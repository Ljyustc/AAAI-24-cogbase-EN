{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert 9:00 AM to total minutes\n    end_time = 10 * 60   # Convert 10:00 AM to total minutes\n    class_duration = end_time - start_time  # Calculate the difference in minutes\n    \n    return class_duration  # Return the duration in minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    # Let's denote x as the amount Jia Jia had initially.\n    # She spent 20% of her money on the bag, which means she is left with 80% of it.\n    # Then she spent 40% of the remainder, which is 40% of the 80% on the skirt.\n\n    # Let's use an equation to represent the situation:\n    # x * 0.8 * 0.6 = 90 (Since 40% of the remainder i.e., 80% of initial is spent on the skirt)\n\n    remainder_after_bag_and_skirt = 90\n    fraction_remaining = 0.8 * 0.6\n\n    # Now calculate the initial amount\n    initial_amount = remainder_after_bag_and_skirt / fraction_remaining\n\n    return initial_amount\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15  # the last number in the sum\n    m = 4   # the first number in the sum that doesn't include 1, 2, and 3\n    sum_squares_m_to_n = (n * (n + 1) * (2 * n + 1)) / 6\n    sum_squares_1_to_m_minus_1 = ((m - 1) * m * (2 * (m - 1) + 1)) / 6\n    ans = sum_squares_m_to_n - sum_squares_1_to_m_minus_1\n    return int(ans)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    students = 0\n    while True:\n        root = int((students - 5)**0.5)\n        if (root + 1)**2 - students == 26:\n            break\n        students += 1\n\n    return students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    \n    chemistry_students = total_students - (physics_students + biology_students)\n     \n    return int(chemistry_students)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    return 167 - 43\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    \n    amy_gives = (amy_apples - john_apples + 4) / 2\n    \n    return int(amy_gives)\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    r = 4  # number of potted plants to arrange in a row\n\n    # Calculate the number of ways to arrange r plants out of n\n    arrangements = factorial(n) // factorial(n - r)\n    \n    return arrangements\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_savings = 13\n    ali_savings = 5 + 3 * jane_savings\n    return ali_savings\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Each house was sold for Â£99000\n    selling_price = 99000\n\n    # Profit and loss percentages\n    profit_percentage = 0.10\n    loss_percentage = 0.10\n\n    # Calculate the cost price of the houses\n    cost_price_profit_house = selling_price / (1 + profit_percentage)\n    cost_price_loss_house = selling_price / (1 - loss_percentage)\n\n    # Calculate the total cost price\n    total_cost_price = cost_price_profit_house + cost_price_loss_house\n\n    # Calculate the total selling price\n    total_selling_price = 2 * selling_price\n\n    # Calculate overall profit or loss\n    overall_profit_loss = total_selling_price - total_cost_price\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To win, Fred needs to force George into a situation where George is always\n    # left with a multiple of 4 oranges because no matter what George does, he can\n    # only remove 1, 2, or 3 oranges, leaving Fred with a multiple of 4 again.\n    #\n    # If Fred can always reduce the count to a multiple of 4 after his turn, he will\n    # eventually reach the situation where 4 oranges are left, and then Fred can\n    # remove 3 to leave George with 1 orange and win.\n    \n    # Find the number of oranges Fred needs to take so that the remaining number\n    # of oranges is a multiple of 4.\n    for i in range(1, 4):\n        if (15 - i) % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(4 * toms_age - 5, dads_age)\n    age_solution = solve(equation, toms_age)\n    \n    return age_solution[0]\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with shirts and pants\n    shirts_pants_combinations = shirts * pants * shoes\n\n    # Combinations with dresses and shoes or heels\n    dresses_combinations = (dresses * shoes) + (dresses * heels)\n\n    total_combinations = shirts_pants_combinations + dresses_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = fraction_value > decimal_value\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    cupcakes_per_egg = 15 / 3\n    eggs = cupcakes / cupcakes_per_egg\n    return int(eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations for 5 students\n    for perm in permutations('ABCDE'):\n        # Find the index of A, B, and C\n        a_index = perm.index('A')\n        b_index = perm.index('B')\n        c_index = perm.index('C')\n\n        # Check if A is in the middle of B and C\n        if b_index < a_index < c_index or c_index < a_index < b_index:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for notes_count in range(1, 280):\n        if (5 + 10 + 20) * notes_count == 280:\n            return notes_count * 3  # Total notes are 3 times the count of each type\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    jogging_speed = 8  # km per hour\n    walking_speed = jogging_speed / 2\n\n    jogging_time = 2  # hours (from 6:30 am to 8:30 am)\n    walking_time = 1  # hour (from 8:30 am to 9:30 am)\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_op(M, N):\n        return M * N + N + 1\n\n    def square_op(M, N):\n        return 8 * M - N * N\n\n    ans = square_op(diamond_op(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "from sympy import isprime\n\ndef solution():\n    # Start with the smallest odd prime number which is 3\n    p = 3\n    # loop until we find the next prime that is 107 more than p\n    while True:\n        # If p and p+107 are both prime\n        if isprime(p) and isprime(p+107):\n            # We've found our p value\n            return p\n        # Nothing found yet, increase p by 2 to only check the odd numbers\n        p += 2\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # Since only odd numbers are considered, we adjust for the series of squares of odd numbers.\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    \n    return (students + capacity - 1) // capacity\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number only depends on the last digits of the factors\n    # Last digit of powers of 2: 2, 4, 8, 6, 2, ...\n    # Every 4 powers of 2, the pattern repeats.\n    # Therefore, the last digit of 2^100 is same as 2^(100 % 4) which is 2^0 = 1\n\n    # Last digit of powers of 7: 7, 9, 3, 1, 7, ...\n    # Every 4 powers of 7, the pattern repeats.\n    # Therefore, the last digit of 7^100 is same as 7^(100 % 4) which is 7^0 = 1\n\n    # Last digit of powers of 9: 9, 1, 9, 1, ...\n    # Every 2 powers of 9, the pattern repeats.\n    # Therefore, the last digit of 9^100 is same as 9^(100 % 2) which is 9^0 = 1\n\n    # The last digit of the entire expression is therefore 1 * 1 * 1 = 1\n    last_digit = (1 * 1 * 1) % 10\n    return last_digit\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        term = (i**2 + (i+1)**2) / (i * (i+1))\n        total += term\n    return round(total)\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_floors = 4 - 1  # from the first to the fourth floor\n    target_floors = 2 - 1  # from the first to the second floor\n    total_time = 12  # total time for 3 floors\n    \n    time_per_floor = total_time / total_floors\n    time_for_target = time_per_floor * target_floors\n\n    return time_for_target\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # We need to find the minimum number of marbles in the largest pile.\n    # To do this, we can start with the smallest number of marbles in the first pile,\n    # then increase the number of marbles in each subsequent pile by at least one.\n    \n    # Since there are 16 marbles and 4 piles, the smallest pile should have at least 1 marble.\n    # Then, we distribute the remaining marbles so that each subsequent pile has more marbles than the previous one.\n    # We start with the smallest configuration and find the number of marbles in the biggest pile.\n    \n    for x1 in range(1, 16):\n        for x2 in range(x1 + 1, 16):\n            for x3 in range(x2 + 1, 16):\n                x4 = 16 - (x1 + x2 + x3)\n                if x4 > x3:  # The last pile must have more than the third\n                    return x4\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    correct_avg = 163\n    incorrect_avg = 159\n    incorrect_height = 126\n    actual_height = 162\n\n    # Difference in height caused by the incorrect recording\n    height_difference = actual_height - incorrect_height\n\n    # Difference in the average caused by the one incorrect recording\n    avg_difference = correct_avg - incorrect_avg\n\n    # The number of girls is equal to the height difference divided by \n    # the difference in average height because the average height is affected\n    # exactly by the amount of height difference per girl\n    number_of_girls = height_difference / avg_difference\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 12345679 * 63\n    return ans\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = custom_op(200, 199)\n    for i in range(188, 0, -1):\n        ans = custom_op(ans, i)\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = 1\n    for i in range(2, 10):\n        result *= (1 + 1 / i)\n    return result\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    capacity = 4\n\n    containers = (total_apples + capacity - 1) // capacity\n\n    return containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "from math import gcd\n\ndef solution():\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    gcd12 = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd12, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # The sum of cubes of the first n natural numbers is equal to (n(n+1)/2)^2\n    # However, we need only odd numbers, so we have to find equivalent 'n'\n    # for the series 1^3, 3^3, 5^3, ..., (2n-1)^3.\n\n    # Calculate the number of odd terms in the series\n    n = (13 // 2) + 1\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_n_numbers = n * (n + 1) // 2\n\n    # Calculate the square of the sum to get the sum of cubes\n    sum_of_cubes = sum_of_n_numbers ** 2\n    \n    return sum_of_cubes\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbols for Beth and Ken\n    beth, ken = symbols('beth ken')\n    \n    # equation representing the relationship between Beth's and Ken's seashells\n    equation1 = Eq(ken, beth + 75)\n    \n    # equation representing the fraction relationship of their seashells\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n    \n    # solving the system of equations for Beth and Ken\n    solutions = solve((equation1, equation2), (beth, ken))\n    \n    # total number of seashells they have altogether\n    total_seashells = solutions[beth] + solutions[ken]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for i in range(1, 50):\n        cube = i ** 3\n        if (cube - 2) ** 0.5 == int((cube - 2) ** 0.5):\n            return cube - 2\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum([1, 2, 3, 4, 5, 6, 7, 7, 8, 9])\n    return ans\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "def solution():\n    from math import comb\n    # each kid gets at least 2 oranges, so we distribute 2 to each first\n    # this reduces the problem to distributing the remaining 7 oranges to 3 kids\n    remaining_oranges = 13 - 3 * 2\n\n    # the problem now is equivalent to putting 7 indistinguishable oranges into 3 distinguishable boxes\n    # this is a classic stars and bars problem, where the formula for combinations with repetition is:\n    # (n + k - 1) choose (k - 1), where n is the number of items to distribute, and k is the number of boxes\n    ans = comb(remaining_oranges + 3 - 1, 3 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_notes, two_notes = symbols('ten_notes two_notes')\n    total_notes = ten_notes + two_notes\n    spent_ten_notes = 0.4 * ten_notes\n    spent_two_notes = 0.25 * two_notes\n    remaining_ten_notes = ten_notes - spent_ten_notes\n    remaining_two_notes = two_notes - spent_two_notes\n    gift_cost = spent_ten_notes * 10 + spent_two_notes * 2\n\n    # Equations based on the problem statement\n    equation1 = Eq(total_notes, 40)\n    equation2 = Eq(remaining_ten_notes / remaining_two_notes, 4/5)\n\n    solutions = solve((equation1, equation2), (ten_notes, two_notes))\n\n    # We calculate the gift cost based on the solution found\n    gift_cost_value = gift_cost.subs(solutions)\n\n    return gift_cost_value\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    frac = 7 / 8\n    number = 32\n    ans = frac * number\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Sequence of exponents starts from 2^0 and doubles the power each time\n    # So we are looking for the largest value of k such that 2^k <= 2^2009\n    k = 0\n    while 2**k <= 2**2009:\n        k += 1\n    # Subtract one because the sequence stops at the term before it would exceed 2^2009\n    n = k - 1\n    return n\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let's denote the two original numbers as x and y.\n    # According to the problem, we have two equations:\n    # x + y = 11.63 (1)\n    # x + 0.1y = 5.87 (2), because Oliver shifted the decimal one place to the left for y.\n\n    x = Symbol('x')\n    y = Symbol('y')\n\n    # Subtract equation (2) from equation (1). This will give us 0.9y\n    equation = (x + y) - (x + 0.1 * y)\n    \n    # Solve equation (1) where equation = 11.63 - 5.87\n    y_value = solve(equation - (11.63 - 5.87))[0]\n\n    # Now, using the value of y, we can find x from equation (1)\n    x_value = 11.63 - y_value\n\n    # The difference between the two original numbers is x - y\n    difference = abs(x_value - y_value)\n\n    # The question asks for one hundred times the difference\n    result = 100 * difference\n    \n    return result\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    # Equations based on the problem statement\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # Exclude 0 as the first digit\n            continue\n        paso = p * 1000 + a * 100 + s * 10 + o\n        # Verify if this condition holds for the calculated number based on the given information\n        if (s * 100 + a * 10 + s) * 2 == paso:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day_questions = 3\n    days = 7\n    total_questions = sum(first_day_questions + 3 * (day - 1) for day in range(1, days + 1))\n    return total_questions\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amount of water Harry and Liam originally have\n    harry, liam = symbols('harry liam')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(harry + liam, 640) # Harry and Liam originally have 640ml in total\n    equation2 = Eq(harry + 90, 3 * (liam - 90)) # If 90ml is transferred, Harry has 3 times the amount of water as Liam\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Rate of drinking for the man\n    man_rate = 1 / 15\n    # Combined rate of drinking for the man and his wife\n    combined_rate = 1 / 12\n    # Rate of drinking for the wife\n    wife_rate = combined_rate - man_rate\n    # Number of days for the wife to finish the barrel on her own\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    count = 0\n    # Iterate through possible white ball counts\n    for white in range(1, 7):  # Possible white balls taken: 1-6 (leaving 3-8)\n        for red in range(1, 4):  # Possible red balls taken: 1-3 (leaving 2-4)\n            for black in range(4, 7):  # Possible black balls taken: 4-6 (leaving 0-2)\n                if white + red + black == 10:\n                    count += (comb(9, white) * comb(5, red) * comb(6, black))\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return (2 ** 10) % 3\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    for pearls in range(1, 1000):  # Assuming there won't be more than 1000 pearls\n        if pearls // 2 + pearls // 4 + pearls // 6 + 3 == pearls:\n            return pearls\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    times_smaller = snake_length_cm / insect_length_cm\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    increment = 2\n    while term < 100:\n        increment += 2\n        term += increment\n        \n        if term >= 100:\n            return term - increment\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_of_three = 120\n    mean_of_four = 150\n\n    sum_of_three = mean_of_three * 3\n    sum_of_four = mean_of_four * 4\n\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The number of beans peeled each hour forms an arithmetic sequence\n    # 20 beans from 9 to 10, 28 beans from 10 to 11, 36 beans from 11 to 12\n    # The common difference (d) in the arithmetic sequence can be found by\n    # subtracting the number of beans peeled in successive hours.\n    # d = 28 - 20 = 36 - 28 = 8\n    common_difference = 8\n    \n    # The number of beans peeled from 8 to 9 can now be found by subtracting\n    # the common difference from the number peeled from 9 to 10.\n    beans_8_to_9 = 20 - common_difference\n    \n    # To find the number of beans peeled from 7 to 8, we subtract the common\n    # difference once more.\n    beans_7_to_8 = beans_8_to_9 - common_difference\n\n    return beans_7_to_8\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    \n    # The difference in weight is due to the weight of the half basket of mangoes.\n    weight_of_half_basket_of_mangoes = full_weight - half_full_weight\n    \n    # The empty basket weight can be found by subtracting the weight of the half basket of mangoes from the half full basket weight.\n    empty_basket_weight = half_full_weight - weight_of_half_basket_of_mangoes\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    pip_position = 6\n    bud_position_from_end = 6\n    in_between = 5\n\n    # Calculate total children including Pip and Bud\n    # Total children - Pip's position + 1 (as he is the 6th) = Bud's position from the end + number of children in between\n    total_children = (pip_position - 1 + bud_position_from_end + in_between)\n\n    return total_children\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # x = first number, y = second number, z = third number\n    # The system of congruences can be written as:\n    # x â¡ 0 (mod 7) => x = 7k for some integer k\n    # y = x + 2 and y â¡ 0 (mod 8) => x â¡ -2 (mod 8)\n    # z = y + 2 and z â¡ 0 (mod 9) => y â¡ -2 (mod 9) => x â¡ -4 (mod 9)\n    # Using the Chinese Remainder Theorem to solve for x\n    # We need to solve the following congruences:\n    # x â¡ 0 (mod 7)\n    # x â¡ 6 (mod 8)\n    # x â¡ 5 (mod 9)\n\n    congruences = [(0, 7), (6, 8), (5, 9)]\n    x = solve_congruence(*congruences)[0]\n\n    # Now, calculate y and z based on x\n    y = x + 2\n    z = y + 2\n    \n    # The sum of the three numbers is x + y + z\n    return x + y + z\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    \n    # Calculate common difference using the first and fourth term\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate last term using the first term, common difference, and total number of terms\n    last_term = first_term + (num_rows - 1) * common_difference\n    \n    # Calculate total number of athletes using the formula for the sum of an arithmetic series\n    total_athletes = (num_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age_now = 29 * 6  # Average age * number of family members\n    total_parents_age_now = total_family_age_now - 64  # Subtracting the total age of the children\n    average_parents_age_now = total_parents_age_now / 2  # There are two parents\n    average_parents_age_three_years_ago = average_parents_age_now - 3  # Average age 3 years ago\n    return average_parents_age_three_years_ago\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    number_of_threes = 8\n    ans = number_of_threes * 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    papers = 18\n    insert_interval = 3\n    leaves = papers // insert_interval\n\n    return leaves\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    # Total number of paintings done by Pip\n    paintings_done = 35\n    # Number of days taken to complete the paintings done\n    days_taken = 5\n    # Total number of paintings Pip needs to complete\n    total_paintings = 56\n\n    # Find the number of paintings Pip can do per day\n    paintings_per_day = paintings_done / days_taken\n\n    # Calculate the remaining number of paintings Pip has to do\n    remaining_paintings = total_paintings - paintings_done\n\n    # Divide remaining paintings by paintings_per_day to get the number of days needed\n    days_needed = remaining_paintings / paintings_per_day\n\n    # Return the number of additional days needed as integer\n    return int(days_needed)\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # Given 5th term is 8 and 12th term is 50, we need to find the common difference\n    n5 = 8\n    n12 = 50\n    # Number of terms between the 5th and the 12th term is 12 - 5 = 7\n    # Arithmetic progression formula: An = A1 + (n - 1)d\n    # The common difference, d, can be found as follows:\n    d = (n12 - n5) / (12 - 5)\n    return d\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    # time taken by each person\n    times = [7, 9, 4, 10]\n    times.sort()\n\n    # total time\n    total_time = 0\n\n    while len(times) > 3:\n        # Case 1: The two slowest people cross together\n        case_1 = times[0] + (2 * times[1]) + times[-1]\n        # Case 2: The fastest person accompanies each of the three others one by one\n        case_2 = (2 * times[0]) + times[-2] + times[-1]\n\n        # take the optimal strategy\n        total_time += min(case_1, case_2)\n\n        # remove the two fastest people\n        times.pop()\n        times.pop()\n    \n    # adding the time for the last two people\n    total_time += max(times)\n\n    return total_time\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_number = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Calculate the sum of the first three terms\n    first_three_sum = 2 + 5 + 8\n    \n    # Initialize the first term and common difference of the arithmetic progression\n    first_term = 11  # as first 3 terms are erased the 4th term now becomes the first term\n    common_difference = 3\n    \n    # Calculate the last term of the progression before the final three numbers\n    # It's the term before the original last term (242) because we add the sum of\n    # the first three terms at the end, thus extending the sequence by one more term\n    last_term = 242 - common_difference\n    \n    # Calculate the number of terms between the new first term and the last term\n    num_terms = (last_term - first_term) // common_difference + 1\n    \n    # The sequence length must be a multiple of 3 to leave only 3 numbers\n    # Calculate how many groups of 3 we can form from the remaining terms\n    groups_of_three = num_terms // 3\n    \n    # Each group of three reduces the total length of sequence by 2\n    # Calculate the remaining sequence length\n    remaining_length = num_terms - groups_of_three * 2\n    \n    # The second number of the sequence will be the new first term\n    # after removing all complete groups of three terms and the common difference\n    second_number = first_term + common_difference * (remaining_length - 1)\n    \n    return second_number\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initial speed is S, time before rain is t (in minutes), and total distance is D\n    S, t, D = symbols('S t D')\n    \n    # Time taken to run the remaining distance at reduced speed\n    time_after_rain = (2400 / (S * 0.8)) * 60  # convert hours to minutes\n    \n    # Original distance covered before the rain\n    original_distance = S * t\n\n    # Total time should have been 30 minutes, but she arrived 5 minutes late\n    total_time = t + time_after_rain\n\n    # Equation 1: Relationship between speed, time, and distance for the original journey\n    # Which is the distance before rain + 2400 meters == total distance D\n    eq1 = Eq(original_distance + 2400, D)\n\n    # Equation 2: She arrives 5 minutes late, so the total time is 30 + 5 minutes\n    eq2 = Eq(total_time, 35)\n\n    # Using sympy's solve function to solve the system of equations\n    solutions = solve((eq1, eq2), (S, t, D))\n\n    return solutions[D]\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approximate_depreciation = 0.6957\n    \n    value_after_depreciation = initial_value * approximate_depreciation\n    \n    return value_after_depreciation\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n    \n    work_per_person_per_day = 1 / (initial_people * initial_days)\n    total_work = 1\n    \n    work_needed_per_day = total_work / target_days\n    people_needed = work_needed_per_day / work_per_person_per_day\n    additional_people = people_needed - initial_people\n    \n    return int(additional_people) if additional_people == int(additional_people) else int(additional_people) + 1\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let the original number of students in school A be x.\n    # Then the original number of students in school B is 1050 - x.\n    # After 20 students transfer from A to B, school A has x - 20 students,\n    # and school B has 1050 - x + 20 students.\n\n    # School A still has 10 more students than school B after the transfer.\n    # x - 20 = (1050 - x + 20) - 10\n\n    # Solve for x:\n    x = (1050 + 10 + 20 + 20) // 2\n\n    return x\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    remaining_after_C = 49\n    spent_on_bag_and_remaining = remaining_after_C + 3\n    initial_after_B = spent_on_bag_and_remaining * 3\n    remaining_after_B = initial_after_B + 2\n    initial_after_A = remaining_after_B * 2\n    remaining_after_A = initial_after_A + 1\n    initial_money = remaining_after_A * 2\n    return initial_money\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote b as the number of books on the top shelf\n    b = symbols('b')\n    \n    # We have seven shelves, each containing 3 fewer books than the one below\n    # This forms an arithmetic sequence: b, b+3, b+6, ..., b+18\n    # The sum of an arithmetic series is (n/2)*(a_1 + a_n)\n    # In our case, n = 7 (number of shelves), a_1 = b, a_n = b + 18\n    total_books_eq = Eq((7/2) * (b + (b + 18)), 280)\n    \n    # Solve the equation to find the value of b\n    books_on_top_shelf = solve(total_books_eq, b)[0]\n    \n    return books_on_top_shelf\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell could pick all the blue and white pencils first.\n    # There are 3 blue and 3 white pencils, so he could draw 6 pencils\n    # and not get a green one.\n    # The next pencil he draws has to be greem, to be sure to have a green one.\n    \n    # Therefore, he must draw 6 (non-green) + 1 (green) pencils to be sure of getting a green pencil.\n    return 6 + 1\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_time = 5.00  # Time at 5:00 AM\n    final_time = 10.5    # Time at 10:30 AM\n    initial_temp = -3    # Initial temperature at 5:00 AM\n    temp_rate = 2        # Temperature rise rate in â per hour\n\n    time_elapsed = final_time - initial_time  # Time elapsed from 5:00 AM to 10:30 AM\n    temperature_rise = time_elapsed * temp_rate  # Total temperature rise\n\n    final_temp = initial_temp + temperature_rise  # Final temperature at 10:30 AM\n\n    return final_temp\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # find divisors of 2240\n    divs = divisors(2240)\n    \n    # find divisors which when 2240 is divided by, gives a perfect square\n    n_values = [d for d in divs if is_square(2240 // d)]\n\n    # return the value of n (there should be only one such n)\n    return n_values[0]\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n\n    # LCM of the periods will give us the next day he does all chores together\n    return lcm(3, 5, 9, 3*7)  # 3 weeks = 3 * 7 days\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    # By the inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 311):\n        for digit in str(page):\n            total_sum += int(digit)\n    \n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n    \n    # If each eats 18 candies, they need 12 more\n    equation1 = Eq(kids * 18, candies + 12)\n    \n    # If each eats 15 candies, exactly enough for 2 more kids\n    equation2 = Eq((kids + 2) * 15, candies)\n    \n    solutions = solve((equation1, equation2), (candies, kids))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import sqrt, pow\n\n    expression = 16.7 - pow(\n        (pow(-4.56, 2) - pow(8.1, 3)) / pow(7.2, 3) / (-sqrt(6 + 3 / 4) - (-30.15)),\n        1 / 3\n    )\n\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Define the current ages\n    oliver_age_now = 20\n    lin_age_now = 26\n\n    # Define the target sum of their ages\n    target_sum_age = 48\n\n    # Calculate the difference in the sum of their current ages to the target sum\n    age_diff = target_sum_age - (oliver_age_now + lin_age_now)\n\n    # Since each year that passes adds 2 to the sum of their ages (since each person ages 1 year),\n    # divide the needed difference by 2 to find the number of years required.\n    years_later = age_diff // 2\n\n    return years_later\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6/5)\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    return 58 + 63 + 59 + 62 + 63 + 56 + 61\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # mean score for 5 students\n    mean_five_students = 87\n    \n    # mean score for 6 students including Jim\n    mean_six_students = 88\n    \n    # total score for 5 students\n    total_five_students = mean_five_students * 5\n    \n    # total score for 6 students\n    total_six_students = mean_six_students * 6\n    \n    # Jim's score is the difference between the total score of six students and five students\n    jim_score = total_six_students - total_five_students\n    \n    return jim_score\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Let's assume the speed of Jayden is 7 units and Carter is 4 units\n    # The distance between A and B is 440m\n    # They meet the first time after t hours, Jayden walks 7t and Carter walks 4t where 7t + 4t = 440\n    # So t = 440 / 11 = 40m\n    # The meeting point the first time from A is 7t = 7 * 40 = 280m\n    # After the first meeting, Jayden keeps walking towards B and back.\n    # Ratio of Jayden to Carter for the remaining distance is 7 to 4, so they will meet at 7 / (7+4) of the way from B.\n    # This will be at point 440 * 7/11 = 280m from B\n    \n    # Now we calculate how far they travel until their second meeting.\n    # Jayden needs to travel the remaining 440m - 280m = 160m to reach B and then return which in total is 160m + 440m.\n    # The total distance covered by Jayden and Carter together when they meet the second time is 600m.\n    # The distance ratio covered by Jayden to Carter is still 7:4 while they are going towards their second meeting.\n    # Since they meet when Jayden has covered 280m from B, this distance represents 7/11 of the distance Carter will cover\n    # Carter's distance coverage will be 280m * (11/7) = 440m from A.\n    # Since Jayden and Carter meet at the same spot, this is also the distance that Jayden covered from B.\n\n    distance_AB = 440\n    ratio_Jayden_Carter = 7 / 4.0\n    # The distance that Jayden covered from A when they meet the second time is the rest distance times Carter's speed ratio over the total ratio.\n    distance_Jayden_from_A = (distance_AB * (ratio_Jayden_Carter / (1 + ratio_Jayden_Carter)))\n\n    return distance_Jayden_from_A\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number of stickers each person has as symbols\n    sam, peter, john_original, john_final = symbols('sam peter john_original john_final')\n\n    # Given ratios and percentages\n    ratio_sam_peter = 7 / 5\n    percentage_given = 20 / 100\n    percentage_increase_john = 80 / 100\n\n    # Equations based on the problem statement\n    equation1 = Eq(sam, peter * ratio_sam_peter)  # Sam's stickers in terms of Peter's based on the ratio\n    equation2 = Eq(john_final, john_original + ((sam + peter) * percentage_given))  # John's stickers after receiving\n    equation3 = Eq(john_final, john_original * (1 + percentage_increase_john))  # John's stickers after 80% increase\n    equation4 = Eq(sam - (sam * percentage_given), john_final + 20)  # Sam has 20 more stickers than John at the end\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_original, john_final))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # cm\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity_per_minibus = 6\n\n    number_of_minibusses = (boys + capacity_per_minibus - 1) // capacity_per_minibus\n\n    return number_of_minibusses\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of baseball bats\n    bats = symbols('bats')\n\n    # Purchase price for each bat\n    purchase_price = 135\n    # Selling price for each bat\n    selling_price = 185\n    # The remaining bats\n    remaining_bats = 3\n    # The profit earned\n    profit = 2945\n\n    # Equation representing the initial total cost\n    total_cost = bats * purchase_price\n    # Equation representing the total revenue minus the cost of the remaining bats\n    total_revenue = (bats - remaining_bats) * selling_price\n    # The profit is the total_revenue minus the total_cost\n    equation = Eq(total_revenue, total_cost + profit)\n\n    # Solve the equation for the number of bats\n    solutions = solve(equation, bats)\n    \n    # Return the number of bats (making sure to return the positive solution only)\n    return max(solutions)\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Raja and Kumar's original amounts\n    raja, kumar = symbols('raja kumar')\n\n    # Since they had the same amount of money initially\n    equation1 = Eq(raja, kumar)\n    \n    # Express the new amount of money for both after spending\n    equation2 = Eq(kumar - 109, 4 * (raja - 286))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbols for shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # create equations based on the shapes\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # solve equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # find how many triangles equal a diamond\n    ans = solutions[diamond] / solutions[triangle]\n    \n    return ans\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of the chair and table\n    chair, table = symbols('chair table')\n\n    # Table cost $160 more than a chair\n    equation1 = Eq(table, chair + 160)\n    \n    # Mrs. Lim bought a table and 5 chairs for $328\n    equation2 = Eq(table + 5 * chair, 328)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (chair, table))\n\n    # Return the cost of 1 chair\n    return solutions[chair]\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_numbers = 10\n    mean_of_all = 1111\n    difference = 240\n    \n    total_sum = total_numbers * mean_of_all\n    mean_of_last_6 = (total_sum - 4 * (mean_of_all - difference)) / 6\n    \n    return mean_of_last_6\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    # Convert Bud's Â£1.10 to pence\n    bud_pence = 110\n    \n    # Add Pip's pence and Bud's pence\n    total_pence = 60 + bud_pence\n\n    return total_pence\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'h' be the time it takes for the hot tap to fill the bath on its own\n    # Let 'c' be the time it takes for the cold tap to fill the bath on its own\n    h, c = symbols('h c')\n\n    # Since the cold tap flows at twice the rate of hot, it takes half the time of 'h'.\n    # Therefore, we relate 'c' and 'h' by the equation c = h/2.\n    \n    # When both taps are open, they fill the bath in 10 minutes. This gives us the equation:\n    # 1/h + 2/h = 1/10, where '2/h' represents the flow rate from the cold tap.\n    \n    # Setting up the system of equations\n    equation1 = Eq(1/h + 1/c, 1/10)\n    equation2 = Eq(c, h/2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (h, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            if P != I and (I + I + I + I) % 10 == P:\n                S = (I + I + I + I) // 10\n                if S != I and S != P and S < 10:\n                    PI = 10 * P + I\n                    return PI\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they will have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times the candy Alice has\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # The total amount of candy they originally had\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n    \n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    jocye_lori_ratio = 3 / 2  # The ratio of Jocye's speed to Lori's speed\n    jocye_speed = lori_speed * jocye_lori_ratio  # Jocye's speed in meters per second\n    time = 10  # Time in seconds\n\n    distance = jocye_speed * time  # Distance Jocye can run in 10 seconds\n\n    return distance\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Jack's speed in the first part of the race in meters per second\n    speed_first_part = 7\n    # Jack's speed in the middle part of the race in meters per second\n    speed_middle_part = 5\n    # Jack's speed in the final part of the race in meters per second\n    speed_final_part = 8\n\n    # Distance covered in the first part of the race in meters\n    distance_first_part = 280\n    # Distance covered in the middle part of the race in meters\n    distance_middle_part = 400\n\n    # Total distance of the race in meters\n    total_distance = 800\n    # Distance covered in the final part of the race in meters\n    distance_final_part = total_distance - (distance_first_part + distance_middle_part)\n\n    # Time spent in the first part of the race in seconds\n    time_first_part = distance_first_part / speed_first_part\n    # Time spent in the middle part of the race in seconds\n    time_middle_part = distance_middle_part / speed_middle_part\n    # Time spent in the final part of the race in seconds\n    time_final_part = distance_final_part / speed_final_part\n\n    # Total time spent in the entire race in seconds\n    total_time = time_first_part + time_middle_part + time_final_part\n\n    return total_time\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "from math import comb\n\ndef solution():\n    number_of_teams = 5\n    games_played = comb(number_of_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don walks at 60 metres per minute\n    total_distance = 780  # Total distance from house to library\n    meeting_point = 360  # Distance from house to meeting point\n\n    # Distance Danny walked\n    danny_distance = total_distance - meeting_point\n\n    # Time taken for them to meet\n    time_to_meet = meeting_point / don_speed\n\n    # Calculate Danny's speed\n    danny_speed = danny_distance / time_to_meet\n\n    return danny_speed\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    total_digits = 0\n\n    while total_digits < 792:\n        pages += 1\n        total_digits += digits_per_page\n        if pages == 10 or pages == 100:\n            digits_per_page += 1\n\n    return pages\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    # Using the conditional probability formula P(A|B) = P(A and B) / P(B)\n    # Here, A is the event 'animal lives over 25 years' and B is 'animal lives over 20 years'.\n    # We know that P(A) = probability_over_25_given_over_20, and we're looking for P(A|B).\n    # The problem already states P(A and B) as the probability of living over 25 which is 0.3.\n    # We want to find out P(A|B), which is P(A and B) / P(B).\n\n    probability_over_25 = probability_over_25_given_over_20 / probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(j/i for i in range(2, 11) for j in range(i, 11))\n    return ans\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all weights to grams\n    flour_g = 1000 + 500\n    sugar_g = 1000 + 200\n    butter_g = 900\n\n    # Calculate the total weight of the mixture in grams\n    total_mixture_g = flour_g + sugar_g + butter_g\n\n    # Divide the total weight by the number of cake tins\n    mixture_per_tin_g = total_mixture_g / 8\n\n    return mixture_per_tin_g\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    return (20 * 27) // 30\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "from math import factorial\n\ndef solution():\n    # A and B can only stand on the far right or far left, meaning AB or BA\n    # Once AB or BA has been decided, C and D have 2 possibilities to arrange among themselves.\n    # So, we have 2 (for AB or BA's position) * 2 (for C and D's arrangement): 2 * 2 = 4\n    return 2 * factorial(2)\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2 * x), 11 * x)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for n in range(99, 10, -1):  # Start from largest 2-digit number, decrement by 1\n        if n % 7 == 5 and n % 13 == 11:\n            return n  # Return the first (largest) number that satisfies both conditions\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Maximum possibility without guaranteeing 4 of the same color\n    # is taking all but three from one color. So, for each color,\n    # it's total - 3 (because we can take up to 3 without guaranteeing 4 of the same color).\n    # Then add 1 to ensure we get 4 of the same color.\n\n    red = 10\n    blue = 5\n    green = 8\n\n    # Use pigeonhole principle to get the minimum number of marbles.\n    # Take all but three from each color and add 1.\n    min_marbles = (red - 3) + (blue - 3) + (green - 3) + 1\n\n    return min_marbles\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    digits.sort()  # Sort the digits to start with the smallest ones\n    for d in digits:\n        if d % 2 == 0:  # Find the smallest even digit for the last place\n            even_digit = d\n            break\n    \n    digits.remove(even_digit)  # Remove the smallest even digit from the list\n    smallest_even_number = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + even_digit\n    # We use the smallest digits in descending order and add the even digit at the end\n    return smallest_even_number\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    # Initialize a set to store unique two-digit numbers\n    unique_numbers = set()\n\n    # Iterate over the possible digits for the tens place\n    for tens_digit in [1, 2, 3]:\n        # Iterate over the possible digits for the ones place\n        for ones_digit in [1, 2, 3]:\n            # Form the two-digit number if the digits are not the same\n            if tens_digit != ones_digit:\n                number = tens_digit * 10 + ones_digit\n                # Add the formed number to the set\n                unique_numbers.add(number)\n\n    # The number of unique two-digit numbers is the size of the set\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    # If 3 workers take 3 days to build a wall,\n    # 1 worker will take 3 times as many days because they are 1/3 as many workers\n    days_for_one_worker = workers * days \n    return days_for_one_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    expressions = {\n        '285+(15/5)-2', '(285+15)/5-2', '285+15/(5-2)',\n        '(285+15/5)-2', '285+(15/(5-2))', '(285+15)/(5-2)',\n        '285+((15/5)-2)', '((285+15)/5)-2', '(285+(15/5))-2'\n    }\n    results = set()\n    for exp in expressions:\n        results.add(eval(exp))\n    return len(results)\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # John's assumption\n    johns_claim = 45\n    A_john = 10 * (johns_claim // 10) + (johns_claim % 10)\n    B_john = 2 * A_john\n    # Check if John's assumption holds\n    is_john_right = B_john == 6 * A_john + 25\n\n    # If John's assumption does not hold, solve the correct equation\n    if not is_john_right:\n        # Equation: B = 6A + 25\n        # A = 10x + y\n        # B = 20x + 2y\n        # 20x + 2y = 6(10x + y) + 25\n        # 20x + 2y = 60x + 6y + 25\n        # Simplify it to standard form\n        # -40x + 4y = 25 => -10x + y = 25/4, which is not possible since x and y are digits\n        # The solution is not valid, because A and B must be integers as they represent digits joined together.\n        return \"John's method is incorrect, and the question does not have a solution.\"\n    else:\n        # Return John's value if his claim is correct\n        return A_john\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current_level = 4\n    yiding_current_level = 3\n    nicolas_target_level = 16\n\n    yiding_target_level = (yiding_current_level / nicolas_current_level) * nicolas_target_level\n\n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlock_count = 0\n\n    for locker in range(1, 101):\n        if locker % 3 == 0:\n            if locker % 5 == 0:\n                # If divisible by both 3 and 5, then it's in the state it was initially (unlocked).\n                unlock_count += 1\n        else:\n            # If not divisible by 3, it remains unlocked.\n            unlock_count += 1\n\n    return unlock_count\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        if (perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C')) \\\n            or (perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C')):\n            if abs(perm.index('D') - perm.index('E')) != 1:\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the cost of one cake\n    c = symbols('c')\n\n    # She needs to borrow money, which means her total amount is negative\n    # for the given number of cakes\n    # 10 cakes cost - $11 (borrowed amount)\n    equation1 = Eq(10*c, -11)\n    # 13 cakes cost - $26 (borrowed amount)\n    equation2 = Eq(13*c, -26)\n \n    # Solving the two equations to find the cost of one cake\n    solution = solve((equation1, equation2), (c))\n    \n    return solution[c]\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    total_score = mean_score * total_matches\n    known_scores = [37, 53, 29, 41]\n    x = total_score - sum(known_scores)\n    return x\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys_mass_total = 4 * 50\n    girls_mass_total = 6 * 40\n    average_mass_total = (boys_mass_total + girls_mass_total) / (4 + 6)\n    return average_mass_total\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        orig_number = int(str(i) + '9')\n        new_number = int('9' + str(i))\n        if new_number == 4 * orig_number:\n            return orig_number\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    ways = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n\n    return ways\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote c as the number of cows and g as the number of goats initially.\n    c, g = symbols('c g')\n\n    # From the problem, we know that:\n    # 65% of the animals were cows, so the number of cows is 65% of the total.\n    # c = 0.65 * (c + g)\n\n    # The percentage of cows becomes 85% when 240 more animals are added.\n    # c+240 = 0.85 * (c + g + 240)\n\n    # The number of goats doubles when these animals are added.\n    # g*2 = g + 240\n\n    # From these two equations, we can create a system to solve:\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation3 = Eq(2*g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n    minimum_dividend = minimum_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit = 9 * 10 * 10  # All possible three-digit numbers (excluding zeroes in the first digit)\n    \n    # no_sevens = all three digit numbers without a single seven\n    no_sevens = 8 * 9 * 9  # First digit: 1-9 excluding 7, Second and third digits: 0-9 excluding 7\n    \n    # At least one seven = total_three_digit - no_sevens\n    at_least_one_seven = total_three_digit - no_sevens\n    \n    # exactly_one_seven means there's only one '7' present in the three-digit number\n    exactly_one_seven = 3 * (8 * 9)  # 3 positions for '7' to be in, and the other two positions can be 0-9 excluding 7\n    \n    # At least two sevens = at_least_one_seven - exactly_one_seven\n    at_least_two_sevens = at_least_one_seven - exactly_one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n        \n    ans = custom_operation(4, 3) - custom_operation(3, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip, bud + 2)\n    equation2 = Eq(pip + bud, 10)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):  # Generate all possible permutations of 4 digits\n        A, B, C, D = perm\n        # Construct ABA and CDC numbers using the digits and check if they add up to 726\n        if A != 0 and C != 0 and ((A*101 + C*101 + D*10) == 726):\n            # Return the sum A + B + C + D\n            return A + B + C + D\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase_amount = final_amount - initial_amount\n    percentage_increase = (increase_amount / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Total work done is considered as 1 job\n\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    \n    # Total work rate per day when Alice and Bob work together\n    total_work_rate = alice_work_rate + bob_work_rate\n    \n    # Calculate the number of days required to finish the job if both work without any break\n    total_days_without_break = 1 / total_work_rate\n    \n    # Calculate the fraction of the job done by Bob alone in 27 days\n    bob_work_done = 27 * bob_work_rate\n    \n    # Calculate the fraction of the job remaining after 27 days\n    remaining_work = 1 - bob_work_done\n    \n    # Calculate the number of days Alice needs to finish the remaining work alone\n    alice_days_to_finish = remaining_work / alice_work_rate\n    \n    # Calculate the total number of days Alice took off\n    alice_days_off = 27 - alice_days_to_finish\n\n    return alice_days_off\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    cost_five_bananas = 5 * solutions[banana]\n    \n    return cost_five_bananas\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, pages = symbols('days pages')\n    equation1 = Eq((days + 2) * 30, pages)\n    equation2 = Eq((days - 4) * 39, pages)\n\n    solutions = solve((equation1, equation2), (days, pages))\n    return solutions[days], solutions[pages]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    pattern = '20202022020202'  # observe the repeating pattern\n    pattern_length = len(pattern)\n    count_2s_in_pattern = pattern.count('2')\n    \n    # 535 digits will contain complete repeating patterns and may be followed by a partial pattern\n    complete_patterns = 535 // pattern_length\n    partial_pattern_length = 535 % pattern_length\n    \n    # Count 2's in complete patterns\n    count_2s_complete = complete_patterns * count_2s_in_pattern\n    \n    # Count 2's in partial pattern\n    count_2s_partial = pattern[:partial_pattern_length].count('2')\n    \n    # Total count of 2's is the sum of 2's in complete patterns and partial pattern\n    total_count_2s = count_2s_complete + count_2s_partial\n    return total_count_2s\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_cookies = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - given_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Define a function to encapsulate the operation of delta between two numbers\n    def delta_operation(a, b):\n        # Analyze the pattern in given operations\n        result = a**2 + b\n        return result\n\n    # Use the defined operation to get the result of 10 delta 9\n    return delta_operation(10, 9)\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    number_of_tickets = 19\n    total_amount = 75\n    adult_ticket_price = 5\n    child_ticket_price = 3\n    \n    for num_adults in range(number_of_tickets + 1):\n        num_children = number_of_tickets - num_adults\n        if num_adults * adult_ticket_price + num_children * child_ticket_price == total_amount:\n            return num_adults\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Define a variable to iterate over the possible number of initial fifty cent coins\n    number_of_50_cent_coins_initially = 1  \n\n    while True:\n        # Calculate the total initial coins based on the given ratio\n        total_initial_coins = (number_of_50_cent_coins_initially * 7) // 2\n\n        # Calculate the initial number of one-dollar coins\n        number_of_1_dollar_coins_initially = total_initial_coins - number_of_50_cent_coins_initially\n\n        # Add 10 one-dollar coins and calculate how many fifty cent coins one receives when given five dollars\n        number_of_1_dollar_coins_after = number_of_1_dollar_coins_initially + 10\n        number_of_50_cent_coins_after = number_of_50_cent_coins_initially + (5 * 2)\n\n        # Check if the condition of twice as many one-dollar coins as fifty cent coins is met\n        if number_of_1_dollar_coins_after == 2 * number_of_50_cent_coins_after:\n            break\n\n        # Prepare for the next iteration if the condition is not met\n        number_of_50_cent_coins_initially += 1\n\n    # Return the total number of initial coins\n    return total_initial_coins\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    equation1 = Eq(dress, 3 * belt)  # dress costs thrice as much as a belt\n    equation2 = Eq(shirt, 2 * dress)  # shirt costs twice as much as a dress\n    equation3 = Eq(shirt - belt, 155)  # difference between the cost of the shirt and belt\n    \n    # Solving the equations for belt, dress, and shirt\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    # Difference between the cost of dress and shirt\n    diff_dress_shirt = solutions[dress] - solutions[shirt]\n    \n    return diff_dress_shirt\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_save = 7\n    brenda_daily_save = 6\n    andy_total_save = 378\n\n    days_passed = andy_total_save // andy_daily_save\n    brenda_total_save = days_passed * brenda_daily_save\n\n    return brenda_total_save\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_wrong = -2\n    total_points = 44\n\n    for correct_questions in range(total_questions + 1):\n        wrong_questions = total_questions - correct_questions\n        if correct_questions * points_correct + wrong_questions * points_wrong == total_points:\n            return correct_questions\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the final number of marbles for Anna, Betsy, and Charlene as A, B, and C respectively.\n    A, B, C = symbols('A B C')\n\n    # Setting up the equations based on the problem statement\n    # After all transactions, the ratio of marbles is 2:5:7\n    equation1 = Eq(A, 2 * (B / 5))\n    equation2 = Eq(C, 7 * (B / 5))\n    # The total number of marbles after the transactions is still 168.\n    equation3 = Eq(A + B + C, 168)\n\n    # Betsy gives away 8 marbles to Anna so before that she had B + 8\n    # Charlene gives away 15 marbles to Betsy so before that she had C + 15\n    # Original total is 168 so the equation is A - 8 + (B + 15) + C = 168\n    # Simplified to A + B + C + 7 = 168\n    equation4 = Eq(A + B + C, 161)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C))\n\n    # Since we need the initial marbles Betsy had before giving 8 to Anna,\n    # we need to add those 8 marbles back to her final count.\n    betsy_initial = solutions[B] + 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sequence = [30, 40, 50] * 3\n    sum_sequence = sum(sequence)\n    return sum_sequence\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    num_contestants = 8\n    num_prizes = 3\n    ways_to_award = factorial(num_contestants) // factorial(num_contestants - num_prizes)\n\n    return ways_to_award\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 60\n    total_work = remaining_work / (1 - (completed_percentage / 100))\n    return int(total_work)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original volume = length * breadth * height\n    # Let's assume the original dimensions are 1 for simplicity because we just want the ratio change in percentage\n    original_volume = 1 * 1 * 1  # This will not affect the percentage calculation\n    \n    # New length = original length * 110%\n    new_length = 1 * 1.10\n    \n    # New breadth = original breadth * 4/5\n    new_breadth = 1 * (4/5)\n    \n    # New height to the original height is 11:10\n    new_height = 1 * (11/10)\n    \n    # New volume = new_length * new_breadth * new_height\n    new_volume = new_length * new_breadth * new_height\n    \n    # Express the new volume as a percentage of its original volume\n    # (New Volume / Original Volume) * 100\n    new_volume_percentage = (new_volume / original_volume) * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of mushrooms gathered in the first and second hour\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Equation 1: The total number of mushrooms gathered is 40\n    equation1 = Eq(first_hour + second_hour, 40)\n\n    # Equation 2: First hour mushrooms count + 26 is the same as the second hour\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    ans = round(278, -1)\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n\n    difference = hottest_temperature - coldest_temperature\n\n    return difference\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for two unknown ages\n    scan_age, ted_age = symbols('scan_age ted_age')\n\n    # Write the equations based on the given ratios\n    # Current age ratio scan_age : ted_age = 1 : 4\n    eq1 = Eq(scan_age, ted_age / 4)\n\n    # Future age ratio (scan_age + 4) : (ted_age + 4) = 1 : 3\n    eq2 = Eq(scan_age + 4, (ted_age + 4) / 3)\n\n    # Solve the system of equations\n    ages_solution = solve((eq1, eq2), (scan_age, ted_age))\n\n    # Ages from the solution\n    scan_current_age = ages_solution[scan_age]\n    ted_current_age = ages_solution[ted_age]\n\n    # Use the formula for age ratio to find the number of years ago when the ratio was 1:9\n    # We are looking for a past time \"years_ago\" when the ratio is 1:9\n    years_ago = symbols('years_ago')\n\n    # Past age ratio equation (scan_age - years_ago) / (ted_age - years_ago) = 1 / 9\n    eq3 = Eq((scan_current_age - years_ago) / (ted_current_age - years_ago), 1 / 9)\n\n    # Solve for the years ago\n    years_ago_solution = solve(eq3, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging\n    jog_time = 1  # hours (from 6:30 AM to 7:30 AM)\n    # Speed while jogging\n    jog_speed = 6.5  # miles per hour\n    # Distance covered while jogging\n    jog_distance = jog_speed * jog_time\n\n    # Time spent walking\n    walk_time = 2  # hours (from 7:30 AM to 9:30 AM)\n    # Speed while walking\n    walk_speed = 4.5  # miles per hour\n    # Distance covered while walking\n    walk_distance = walk_speed * walk_time\n\n    # Total distance travelled\n    total_distance = jog_distance + walk_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Define symbols for the number of questions solved by each student\n    noa, b, c, d, e = symbols('noa b c d e')\n\n    # Create inequalities to express that everyone solves at least one question\n    # and that everyone solves a different number of questions\n    inequalities = [\n        noa >= 1, b >= 1, c >= 1, d >= 1, e >= 1,  # At least one question each\n        noa != b, noa != c, noa != d, noa != e,\n        b != c, b != d, b != e,\n        c != d, c != e,\n        d != e,\n    ]\n\n    # Define the total number of questions\n    total_questions = Eq(noa + b + c + d + e, 40)\n\n    # Start with the smallest number of questions for the other students and maximize for Noa\n    # Noa will have the largest number if the other students solve the minimum number 1, 2, 3, 4 questions.\n    all_solutions = solve((total_questions,) + tuple(inequalities), (noa, b, c, d, e))\n    \n    # We only want the maximum value for Noa\n    max_noa = max(solution[noa] for solution in all_solutions)\n\n    return max_noa\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    meters = 9\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climb = 10\n    day = 0\n    current_height = 0\n    \n    while current_height < height:\n        day += 1\n        current_height += climb  # snail climbs up during the day\n\n        if current_height >= height:\n            break  # snail has reached the top\n        \n        current_height -= day  # snail slides down during the night\n    \n    return day\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio_cm_to_m = 2 / 3\n    real_tree_height_m = 12\n    \n    model_tree_height_cm = real_tree_height_m * scale_ratio_cm_to_m\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mollies, goldfish, guppies = symbols('mollies goldfish guppies')\n    equation1 = Eq(mollies, 2 * goldfish)\n    equation2 = Eq(goldfish, 2 * guppies)\n    equation3 = Eq(mollies, 276)\n\n    solutions = solve((equation1, equation2, equation3), (mollies, goldfish, guppies))\n    \n    difference = solutions[mollies] - solutions[guppies]\n    return difference\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score_correct = 8\n    score_wrong = -4\n    target_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * score_correct + wrong_answers * score_wrong\n        if score == target_score:\n            return correct_answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for foldable and non-foldable bicycles\n    foldable, non_foldable = symbols('foldable non_foldable')\n    \n    # Total bicycles before the sale\n    total_bicycles = 476\n    # Bicycles sold\n    bicycles_sold = 208\n\n    # The fraction of non-foldable bicycles left after the sale\n    # non_foldable: total_non_foldable = 5:9\n    # Similarly for foldable bicycles we have foldable: total_foldable = 4:7\n    \n    # Equations based on the problem\n    equation1 = Eq(non_foldable / (5/9), foldable / (4/7))\n    equation2 = Eq(foldable + non_foldable, total_bicycles - bicycles_sold)\n    equation3 = Eq(foldable + non_foldable, total_bicycles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n\n    # Calculate the number of foldable bicycles sold\n    foldable_bicycles_sold = solutions[foldable] * (3/7)\n\n    return int(foldable_bicycles_sold)\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle,\n    # if Valeria wants to guarantee that at least one kid gets at least 3 pieces of candy,\n    # she should prepare enough for the worst case scenario where each of the other 19 kids get 2 pieces each\n\n    # Number of students\n    num_students = 20\n\n    # Each student except one gets 2 pieces\n    pieces_per_student = 2\n\n    # Total candies for 19 students to get 2 pieces each\n    total_for_19_students = (num_students - 1) * pieces_per_student\n\n    # One student needs to get at least 3 pieces\n    at_least_3_pieces = 3\n\n    # Total candies Valeria should prepare at least\n    total_candies = total_for_19_students + at_least_3_pieces\n\n    return total_candies\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 0.60 * 765\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    number_of_gaps = total_flowers // flowers_between_posts\n    road_length = 50\n\n    distance_between_posts = road_length / (number_of_gaps + 1)\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To ensure he gets a pair of white socks at most,\n    # Yohan may pick all red and black socks before getting to the white ones.\n    max_red_socks = 10  # All red socks\n    max_black_socks = 10  # All black socks\n    # He needs to take one more sock to be sure to have at least one pair of white socks.\n    white_sock_pair = 1\n\n    # Total socks he must take at most\n    max_socks = max_red_socks + max_black_socks + white_sock_pair\n\n    return max_socks\n    \nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    temperature_diff = 17\n    initial_temperature = 8\n    final_temperature = initial_temperature - temperature_diff\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    # Include trees at both ends.\n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # books on the left of the favorite book\n    left_books = 6\n    # position from the right\n    position_from_right = 14\n    # total books are the sum of left_books, 1 (for the favorite book itself), and position_from_right - 1\n    total_books = left_books + 1 + (position_from_right - 1)\n    return total_books\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    result = 48 / (4 / 5)\n    return result\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    n = 5\n\n    fifth_number = first_number * ratio**(n-1)\n\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**-12)\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n    \n    sweets_to_distribute = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_to_distribute // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's daily work rate\n    p_work_rate_per_hour = 1 / (12 * 8)\n    \n    # Q's daily work rate\n    q_work_rate_per_hour = 1 / (8 * 10)\n    \n    # Combined work rate when both work 8 hours a day\n    combined_daily_work_rate = 8 * (p_work_rate_per_hour + q_work_rate_per_hour)\n    \n    # Number of days to complete the job working together\n    days_to_complete = 1 / combined_daily_work_rate\n\n    return days_to_complete\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132  # km/h\n    speed_slow_van = 78   # km/h\n    time_hours = 8        # hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time_hours\n\n    return distance_apart\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    spacing_from_edge = 1.5\n    spacing_between_bushes = 3\n    \n    # Effective length is the side length minus two times the spacing from edge\n    effective_length = side_length - 2 * spacing_from_edge\n    \n    # Number of bushes is the effective length divided by the spacing between bushes\n    # We add one because we include a bush at both ends\n    number_of_bushes_per_side = effective_length // spacing_between_bushes + 1\n    \n    # Total bushes is 4 times the bushes per side, but we need to subtract 4 to prevent counting the corners twice\n    total_bushes = 4 * number_of_bushes_per_side - 4\n    \n    return int(total_bushes)\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = (360 * 100) / remaining_work_percentage\n    return total_masks\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # To maximize the number of apples for the child with the most apples,\n    # we should minimize the number of apples the other children get.\n    # So, we start by giving 1 apple to the first child, 2 to the second, and so on.\n\n    remaining_apples = 19\n    apples_distributed = 0\n    \n    for i in range(4):  # We only loop for 4 children because we want to maximize the last child's apples\n        apples_distributed = i + 1\n        remaining_apples -= apples_distributed\n\n    max_apples_for_last_child = remaining_apples\n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    n_apples = 78\n    ways = [d for d in divisors(n_apples) if d % 2 == 0]\n\n    ans = len(ways) - 1  # Excluding the case where all apples are in one bag\n    return ans\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    total_sum = sum(numbers)\n    average = total_sum / len(numbers)\n    return average\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n    original_score = solve(equation, score)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given:\n    # 9 rabbits = 3 goats\n    # 2 goats = 4 cows\n    # We need to find out how many rabbits can 2 cows be exchanged for.\n\n    # from 2 goats = 4 cows, we get 1 goat = 2 cows\n    # Hence now we will replace goats in the first equation with cows\n    # 9 rabbits = 3 * (1 goat)\n    # 9 rabbits = 3 * (2 cows)\n    # 9 rabbits = 6 cows\n\n    # Now, we need to find out how many rabbits for 2 cows\n    # Let x be the number of rabbits that can be exchanged for 2 cows.\n    # We can create a proportion based on the relationship we found:\n    # 9 rabbits / 6 cows = x rabbits / 2 cows\n    # Cross-multiplying gives us:\n    # 6*x = 9*2\n    # x = (9*2) / 6\n    rabbits_for_2_cows = (9 * 2) / 6\n    return int(rabbits_for_2_cows)\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # let p be the number of pencils and n be the number of pens\n    # p/n = 4/5 and (p+1)/(n-1) = 7/8\n    # we can solve these two equations to find the values of p and n\n    # start with initial guesses for p and n\n    for p in range(1, 100):\n        for n in range(1, 100):\n            if p * 5 == n * 4 and (p + 1) * 8 == (n - 1) * 7:\n                return p + n  # return the total number of pencils and pens\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    score = 168\n    \n    # Define total number of questions actually attempted\n    attempted = total_questions - not_attempted\n    \n    # Let x be the number of correct answers.\n    # Since 4 marks are given for each correct answer and 1 mark is taken for each wrong answer:\n    # 4x - (attempted - x) = score\n    # 4x - attempted + x = score\n    # 5x = score + attempted\n    # x = (score + attempted) / 5\n\n    correct_answers = (score + attempted) // 5\n    \n    return correct_answers\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n\n    # The number of seats in the nth row can be calculated by the formula:\n    # an = a1 + (n - 1)d\n    # However, to find the total number of seats, we can use the sum formula for arithmetic progression:\n    # Sn = n/2 * (a1 + an)\n\n    # Since it's an arithmetic progression, the last term can be calculated as:\n    last_term = first_term + (num_rows - 1) * difference\n\n    # Total number of seats is the sum of all terms:\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls_percentage = 100 - 40\n    number_of_girls = 72\n    total_children = (number_of_girls * 100) / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n\n    ans = hash_op(10, 9)\n    ans = hash_op(ans, 8)\n    ans = hash_op(ans, 7)\n    ans = hash_op(ans, 6)\n    ans = hash_op(ans, 5)\n    ans = hash_op(ans, 4)\n\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_profit_percent = 60\n    total_profit_percent = initial_profit_percent * 0.8\n    first_day_sold_percent = 70\n    first_day_profit_percent = 60\n    second_day_sold_percent = 100 - first_day_sold_percent\n\n    # Let 'discount_percent' be the percentage discount on the second day\n    discount_percent = symbols('discount_percent')\n\n    # Equation representing the total profit made\n    equation = Eq((first_day_sold_percent * first_day_profit_percent) + (second_day_sold_percent * (initial_profit_percent - discount_percent)), total_profit_percent * 100)\n\n    discount_rate = solve(equation, discount_percent)[0]\n\n    return discount_rate\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    ans = initial_strawberries - eaten_strawberries + bought_strawberries\n    return ans\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_digits = [1, 3]\n    count = 0\n    \n    for tens in digits:\n        for units in odd_digits:\n            if tens != units:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    last_page_before_missing = 14\n    first_page_after_missing = 35\n\n    # Since pages are consecutive and printed on both sides, if the last page before missing is even,\n    # then the subsequent odd page is printed on the same sheet. Thus, we start counting from the next even page.\n    if last_page_before_missing % 2 == 0:\n        last_page_before_missing += 1\n\n    # If the first page after the missing pages is odd, then the previous even page is printed on the same sheet.\n    # Otherwise, we start counting from the first page itself.\n    if first_page_after_missing % 2 == 0:\n        first_page_after_missing -= 1\n\n    # Calculate the number of missing pages\n    missing_pages = first_page_after_missing - last_page_before_missing - 1\n\n    # Compute the number of missing sheets. Each sheet contains 2 pages.\n    missing_sheets = missing_pages // 2\n\n    return missing_sheets\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    # Create the equations based on the question\n    equation1 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n    equation2 = Eq(tuna_puff_price - curry_puff_price, 0.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    count = end - start + 1\n    return count\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "ç½ç»æéï¼è¯·éè¯"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed = 36  # meters per minute\n    time_seconds = 200  # time in seconds\n    time_minutes = time_seconds / 60.0  # convert seconds to minutes\n    \n    distance = speed * time_minutes  # distance = speed * time\n    return int(distance)\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    # Assume all children are boys and got 2 balloons each\n    all_boys = total_children * 2\n    \n    # Remaining balloons after subtracting all boys' balloons\n    remaining_balloons = total_balloons - all_boys\n    \n    # Since for every girl we assumed to be a boy, we need to add 2 more balloons.\n    # The number of girls will then be the remaining balloons divided by 2.\n    num_girls = remaining_balloons // 2\n    \n    # Subtract the number of girls from total children to get the number of boys\n    num_boys = total_children - num_girls\n    \n    return num_boys\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    from fractions import Fraction\n    \n    result = 1\n    for i in range(3, 20, 2):\n        result *= Fraction(1 + 2/i)\n    \n    ans = result\n    return ans\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_needed_cm = 400 * 85\n    roll_length_cm = 20 * 100\n\n    rolls_needed = string_length_needed_cm / roll_length_cm\n    if rolls_needed != int(rolls_needed):\n        rolls_needed = int(rolls_needed) + 1\n    \n    return rolls_needed\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbolic representation of Emma and John's ages\n    emma, john = symbols('emma john')\n\n    # Emma's age in 3 years will be emma + 3\n    # John's age in 3 years will be john + 3, and he is 7 years older than Emma\n\n    # Equation representing the sum of their ages in 3 years\n    equation1 = Eq(emma + 3 + john + 3, 27)\n    # Equation representing the age difference\n    equation2 = Eq(john - emma, 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    spending_on_food = (5/6) * remainder\n    savings = remainder - spending_on_food\n\n    equation = Eq(spending_on_food, donation + 78)\n\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # Finding the last digit of 2^2017\n    last_digit_2 = pow(2, 2017, 10)\n    # Finding the last digit of 3^2017\n    last_digit_3 = pow(3, 2017, 10)\n    # The last digit of the final product is the product of the last digits of 2^2017 and 3^2017\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n    return last_digit_product\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Total number of animals originally on the farm\n    total_animals = symbols('total_animals')\n    \n    # The original number of cows (65% of the total) and the original number of goats (35% of the total)\n    original_cows = 0.65 * total_animals\n    original_goats = 0.35 * total_animals\n    \n    # When 240 more cows and goats are added, cows increase by 20% to become 85% of the new total\n    # The number of goats doubles\n    # The new total is the original total plus 240\n    new_total_animals = total_animals + 240\n    new_cows = 0.85 * new_total_animals\n    new_goats = 2 * original_goats\n    # The equation representing the new total number of cows\n    equation1 = Eq(new_cows, original_cows + 240)\n\n    # Since the new goats are equal to the doubled original goats and make up the rest of the animals\n    equation2 = Eq(new_goats + new_cows, new_total_animals)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (total_animals))\n\n    # Calculate the original number of goats using the solution\n    original_goats_number = 0.35 * solution[total_animals]\n\n    return original_goats_number\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time before increasing speed\n    # Let y be the time after increasing speed\n    x, y = symbols('x y')\n\n    # Before speed increase: 150m/min times x minutes\n    # After speed increase: 200m/min times y minutes\n    # Total distance walked is 3700m and 10 minutes have passed after the speed increase\n    eq1 = Eq(150 * x + 200 * (y - 10), 3700)\n    eq2 = Eq(x, y - 10) # The time before increase is equal to the time after increase minus 10\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Total time spent walking in the park\n    total_time = solutions[x] + solutions[y]\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given terms and their positions\n    seventh_term = 57\n    fifteenth_term = 89\n    terms_difference = 15 - 7\n\n    # Calculate common difference using the terms given\n    common_difference = (fifteenth_term - seventh_term) / terms_difference\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)\n\n    # Since we only want the smallest positive number less than 400, \n    # and solve_congruence gives us the smallest positive solution, \n    # we can subtract the modulus product until we get a number less than 400\n    while ans[0] >= 400:\n        ans = (ans[0] - ans[1], ans[1])\n\n    return ans[0]\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # Each of the three places can be filled with any of the three digits.\n    # Therefore, we have 3 choices for each of the three places.\n    \n    choices_per_place = 3\n    total_numbers = choices_per_place ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2*apple + 1*orange, 40)\n    equation2 = Eq(1*apple + 2*orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_bought_weekly = 45\n    sweets_eaten_weekly = 60\n    target_sweets = 150\n    net_sweets_per_week = sweets_bought_weekly - sweets_eaten_weekly\n    \n    weeks = (initial_sweets - target_sweets) / net_sweets_per_week\n    return weeks\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and \\\n           (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must be divisible by 9\n    fixed_sum = 4 + 7 + 1 + 9  # These are the fixed digits in the seven-digit number\n    \n    # Initialize A, B, C to None, which will store the final digits\n    A = B = C = None\n    \n    # Find the value of A, B, C such that the sum of all digits is divisible by 9\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if a != b and a != c and b != c and a not in [4, 7, 1, 9] and b not in [4, 7, 1, 9] and c not in [4, 7, 1, 9]:\n                    # Check if the sum of the digits is divisible by 9\n                    if (fixed_sum + a + b + c) % 9 == 0:\n                        A, B, C = a, b, c\n                        # Return the values as soon as we find a valid combination\n                        return A + B + C, int(f'47{A}1{B}9{C}')\n\nans, number = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes = sport_class_students + reading_class_students - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_amount = 140\n    racket_price = 49\n    ball_price = 1.5\n\n    total_racket_price = 2 * racket_price\n    remaining_amount = total_amount - total_racket_price\n    num_balls = remaining_amount // ball_price\n    \n    return int(num_balls)\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week = 0\n    \n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week += 1\n    \n    return week\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # In the worst case, we could pick all the balls of one color first, which is 4 balls.\n    # Continuing with the worst case, we could then pick all the balls of another color, adding another 4 balls.\n    # At this point, we have 8 balls, but they are only from two colors.\n    # To ensure we have 3 different colored balls, we need to pick one more ball.\n    # This additional ball will definitely be of the third color because only the third color is left in the bag.\n    # Therefore, the minimum number of balls we must pick is 4 (first color) + 4 (second color) + 1 (third color) = 9.\n\n    return 9\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_durians = total_durians * (4/6)\n    durians_left = total_durians - sold_durians\n    return durians_left\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes with 6 donuts each\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points, and the distance between each pair of adjacent points is the same.\n    # For a right angled triangle to form, the two shorter sides must include two points that\n    # are adjacent to the right angle vertex and hence form a diameter of the circle. \n    # Since the circle can only have 12/2 = 6 diameters, there are 6 choices for the hypotenuse.\n    # For each choice of hypotenuse, there are 12-2=10 points remaining to choose from for the\n    # third vertex which is not on the diameter (since 2 points are used for the hypotenuse).\n    # Therefore, for each diameter, there are 10 possible right angled triangles.\n\n    hypotenuses = 6\n    other_points = 10\n    right_angled_triangles = hypotenuses * other_points\n\n    return right_angled_triangles\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the weight of a box of apples and y be the weight of a box of oranges\n    x, y = symbols('x y')\n    \n    # The first equation from the problem statement\n    equation1 = Eq(3*x + 5*y, 270)\n    \n    # The second equation from the problem statement\n    equation2 = Eq(3*x + 7*y, 342)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The solutions represent the weight of a box of apples and a box of oranges\n    return solutions\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is the 11th animal from the start, there are 10 animals ahead of it.\n    # Since the tiger is also in the exact middle, there should be 10 animals behind it.\n    # Therefore, the total number of animals in the line is:\n    # 10 animals ahead + 1 tiger + 10 animals behind = 21 animals\n    ans = 10 + 1 + 10\n    return ans\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    part1 = (1/3) * 24\n    part2 = (2/5) * 30\n    part3 = (1/3) * 15\n\n    ans = part1 + part2 + part3\n\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # first digit must be from 1 to 9 as it's a three-digit number\n        for j in range(10):  # second digit must be from 0 to 9\n            for k in range(10):  # third digit must be from 0 to 9\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    roses_in_vases_after_addition = 24 // 3\n    total_roses = roses_in_vases_after_addition * (3 + 4)\n    return total_roses\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # cost of a packet of Mamee in dollars\n    big_jelly_cost = 6 * mamee_cost  # cost of a big packet of jelly in dollars\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    from num2words import num2words\n    return num2words(number)\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    # Will does not eat mint candies\n    candies_will_can_eat = lemon_candies + cherry_candies\n\n    return candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    midpoint = (-18 + -2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    # price of strawberry cake\n    price_strawberry = 3\n    \n    # price of marble cake\n    price_marble = price_strawberry + 2\n    \n    # price of cheese cake\n    price_cheese = 3 * price_marble\n    \n    # price of 2 cheese cakes\n    price_2_cheese = 2 * price_cheese\n    \n    return price_2_cheese\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In a single-elimination tournament, the number of games is one less than the number of players.\n\n    return games_played\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    # As stated in the Knowledge Point Routes, we're going to use the Chinese Remainder Theorem\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n\n    while number < 80:\n        # Return the answer directly to avoid extra loops as there should be only one such number less than 80\n        return number\n        # If we would need to find multiple such numbers within a range, we could use:\n        # number += 2 * 3 * 4 * 5\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(1, 10):\n            if B == A:\n                continue\n            for C in range(1, 10):\n                if C == A or C == B:\n                    continue\n                for D in range(1, 10):\n                    if D == A or D == B or D == C:\n                        continue\n                    AB = 10 * A + B\n                    BC = 10 * B + C\n                    CD = 10 * C + D\n                    ABC = 100 * A + 10 * B + C\n                    BCD = 100 * B + 10 * C + D\n                    if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                        return 1000 * A + 100 * B + 10 * C + D\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    number = symbols('number')\n\n    # Define the equation\n    equation = Eq(3 * number + 6, number + 16)\n\n    # Solve the equation\n    solved = solve(equation, number)\n\n    # Return the solution\n    return solved[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given height and height to width ratio\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Calculate width using the ratio\n    width = (ratio_width / ratio_height) * height\n    \n    # Calculate perimeter\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from itertools import permutations\n\n    # Assuming the ages of children are positive integers\n    for sons in permutations(range(1, 55), 2):\n        for daughters in permutations(range(1, 55), 2):\n            if (sum(sons) + sum(daughters) == 55 and\n                abs(sons[0] - sons[1]) == 3 and\n                abs(daughters[0] - daughters[1]) == 2 and\n                sons[1] == 2 * daughters[0]):\n                return min(sons[0], sons[1], daughters[0], daughters[1])\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_friends = 3\n\n    average_distance = total_distance / number_of_friends\n\n    return average_distance\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a wallet and a watch\n    w, t = symbols('w t')\n\n    # Two equations based on the given information\n    eq1 = Eq(2 * w + 3 * t, 433)\n    eq2 = Eq(5 * w + 4 * t, 701)\n\n    # Solve the system of equations\n    solved_values = solve((eq1, eq2), (w, t))\n\n    return solved_values[w]\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    # Calculate permutations with repetition\n    ways = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    return ways\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_part = '428571'  # The sequence of digits that repeats\n    repeat_length = len(decimal_part)\n    \n    total_digits = 58  # The total number of digits we want to sum\n    full_repeats = total_digits // repeat_length  # How many times the sequence repeats completely\n    partial_repeat = total_digits % repeat_length  # The remaining digits in a partial repeat\n\n    # Sum of digits in full repeats\n    sum_full_repeats = sum(int(digit) for digit in decimal_part) * full_repeats\n\n    # Sum of digits in partial repeat\n    sum_partial_repeat = sum(int(decimal_part[i]) for i in range(partial_repeat))\n\n    # Total sum of the first 58 digits after decimal point\n    total_sum = sum_full_repeats + sum_partial_repeat\n\n    return total_sum\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_volume = 177\n    jane_extra = 32\n    jane_volume = audrey_volume + jane_extra\n    total_volume = audrey_volume + jane_volume\n    return total_volume\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Equation represents the final concentration of sugar in both solutions being the same\n    equation = Eq((50 * 0.11 + x * (0.47 - 0.11)), (50 - x) * 0.47 + 50 * 0.11)\n    \n    # Solve for x, the amount of solution to be exchanged\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    nicks_string_extra = 25\n    difference_in_length = nicks_string_extra\n    \n    return difference_in_length\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert plot length from metres to centimetres\n    spacing_cm = 40\n    first_plant_distance_cm = 20\n    \n    # The actual planting length is the plot length minus the distance for the first plant\n    planting_length_cm = plot_length_cm - first_plant_distance_cm\n    \n    # Number of cauliflowers is the number of spaces plus one for the first cauliflower\n    num_cauliflowers = (planting_length_cm // spacing_cm) + 1\n    \n    return num_cauliflowers\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '6']\n    all_permutations = set(permutations(digits, 3))  # Create all permutations of 3 digits\n    # Convert each permutation from a tuple to an integer\n    three_digit_numbers = {int(''.join(p)) for p in all_permutations}\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 16):  # Ensure x2 is greater than x1\n            for x3 in range(x2 + 1, 17):  # Ensure x3 is greater than x2\n                for x4 in range(x3 + 1, 18):  # Ensure x4 is greater than x3\n                    if x1 + x2 + x3 + x4 == 15:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    for i in range(1, 51):\n        if isprime(i) and isprime(i + 6) and i + 6 <= 50:\n            primes.append(i)\n        elif isprime(i) and isprime(i - 6) and i - 6 >= 1:\n            primes.append(i)\n    # Remove duplicates\n    primes = list(set(primes))\n    primes.sort()\n    return len(primes), primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    total = 250\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7  # Initial value in metres\n    centimetres_to_metres = 64 / 100  # Conversion from cm to metres\n    total_metres += centimetres_to_metres  # Addition of converted cm to total metres\n\n    subtract_metres = 2 + (7 / 100)  # Convert 2m 7cm to metres\n    ans = total_metres - subtract_metres  # Subtraction to get the final answer\n\n    return ans\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fib_seq = [1, 2, 3, 5, 8, 13, 21]\n    next_number = fib_seq[-1] + fib_seq[-2]\n    return next_number\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for a banana and a pear\n    banana, pear = symbols('banana pear')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(1*banana + 2*pear, 94)\n    equation2 = Eq(1*banana + 1*pear, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    # Get the price of one banana\n    banana_price = solutions[banana]\n    \n    return banana_price\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earning = 70\n    days_worked = 6\n    total_earnings = daily_earning * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence is a geometric sequence with each term being 2 times the previous term\n    # we denote the n-th term as a_n = 2^(n-1)\n\n    # Calculate the 20th number in the sequence\n    number_20th = 2**(20 - 1)\n\n    # Calculate the 17th number in the sequence\n    number_17th = 2**(17 - 1)\n\n    # Divide the 20th number by the 17th number\n    ans = number_20th / number_17th\n\n    return ans\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_integers = 35\n    # For two numbers a and b, with a fixed sum, the largest product\n    # is when the two numbers are as close to each other as possible.\n    a = sum_of_integers // 2\n    b = sum_of_integers - a\n\n    # If the sum is odd and we divide by 2, one must be one larger than the other.\n    if sum_of_integers % 2 == 1:\n        a += 1\n        \n    product = a * b\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_between_first_and_fourth = 9\n    distance_between_two_flags = distance_between_first_and_fourth / 3\n    distance_between_first_and_ninth = distance_between_two_flags * (9 - 1)\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Let x be the total number of books Alice, Becky, and Crystal have.\n    # With an average of 60, the total for the three of them is x = 3 * 60.\n    x = 3 * 60\n\n    # When Dennis is included, the average increases to 70.\n    # The new total is then y = 4 * 70.\n    y = 4 * 70\n\n    # The number of books Dennis has is the difference between the new total and the old total.\n    dennis_books = y - x\n\n    return dennis_books\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    num_necklaces = total_beads // beads_per_necklace\n\n    return num_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_height = (johns_height / ratio_john) * ratio_mike\n\n    return mikes_height\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    # Total distance to climb\n    total_distance = 16\n    # Distance climbed per day\n    climb_distance = 5\n    # Distance slid down per night\n    slide_distance = 3\n    # Effective distance climbed after day 1\n    effective_distance = climb_distance - slide_distance\n    # Distance left to climb after climbing for a full day and sliding down\n    current_distance = 0\n    \n    # Starting from day 1\n    day = 1\n    while True:\n        # Snail climbs up during the day\n        current_distance += climb_distance\n        # If the snail has reached or exceeded the total distance, it's out of the burrow\n        if current_distance >= total_distance:\n            break\n        # Otherwise, the snail slides down during the night\n        current_distance -= slide_distance\n        # Move on to the next day\n        day += 1\n\n    return day\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange\n\n    # Find the smallest two-digit prime number\n    primes = list(primerange(10, 100))\n    smallest_two_digit_prime = primes[0]\n\n    # Find the largest two-digit square number\n    largest_square = 0\n    for i in range(1, 10):\n        square = i**2\n        if 10 <= square <= 99:\n            largest_square = square\n\n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_square\n\n    return ans\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Place value of 7 in the hundredths place\n    hundredths_place = 7 / 100\n    # Place value of 6 in the tenths place\n    tenths_place = 6 / 10\n    # Value of 4 in the ones place\n    ones_place = 4\n    \n    # Combining the values\n    ans = ones_place + tenths_place + hundredths_place\n    return ans\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    distance = 200\n    \n    # Speed downstream = speed of the ship + speed of the current\n    speed_downstream = speed_ship + speed_current\n    \n    # Time = Distance / Speed\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n\n    pencils_per_pen = cost_pen // cost_pencil\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_wrong = -2\n    total_points = 36\n    \n    # Let x be the number of correct answers\n    # then (total_questions - x) will be the number of incorrect answers\n    # We can set up the equation: x * points_for_correct + (total_questions - x) * points_for_wrong = total_points\n    \n    x = (total_points - total_questions * points_for_wrong) / (points_for_correct - points_for_wrong)\n    \n    return int(x)\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    ways_trains = 4\n    ways_buses = 3\n    ways_flights = 2\n\n    total_ways = ways_trains + ways_buses + ways_flights\n\n    return total_ways\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number of peaches as P, A students as a and B students as b\n    P, a, b = symbols('P a b')\n\n    # Equations based on the given problem\n    equation1 = Eq(a * 5 + 10, P)  # All peaches given to Class A with 10 left\n    equation2 = Eq(b * 8, P - 2)   # All peaches given to Class B with 2 needed\n    equation3 = Eq(a, b + 3)       # Class A has 3 more students than Class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (P, a, b))\n\n    return solutions[P]\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    return product % 100\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    perfect_cube_h = None\n    for h in range(1, 28512+1):\n        if 28512 % h == 0 and round((28512/h)**(1/3))**3 == 28512/h:\n            perfect_cube_h = h\n            break\n    return perfect_cube_h\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # To ensure Bart gets two M&M's of different colors, consider the worst-case scenario.\n    # The worst-case scenario would be picking all of one color first before getting a different color.\n    # There are 3 red chips, so he could pick all 3 reds first without getting two different colors.\n    # There are 4 yellow chips, so after picking all reds, he could pick all 4 yellows.\n    # At this point, no matter what he picks next, it will be a different color.\n    \n    # So the number of picks needed will be all reds plus all yellows plus 1 (which will be brown)\n    picks = 3 + 4 + 1\n    \n    return picks\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial as f\n\ndef solution():\n    # Calculate the number of slots where sketches can be placed (after every dance, and beginning and end).\n    # There will be 7 dancing performances, so there are 8 slots for sketches including the start and the end.\n    sketch_slots = 7 + 1 \n\n    # Choose 3 out of these 8 slots for the sketches.\n    sketch_slot_choices = f(sketch_slots) // (f(3) * f(sketch_slots - 3))\n\n    # Permute the 7 dances since dances are indistinguishable.\n    dance_permutations = f(7)\n\n    # The total ways is the product of choosing the sketch slots and permuting dances.\n    total_ways = sketch_slot_choices * dance_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415927\n    b = 31415925\n    ans = (a - 1)**2 - a * b\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position_from_front = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position_from_front + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    persons_per_family = 3\n    total_persons = families * persons_per_family\n\n    # Fathers shake hands with everyone except their own family members\n    father_handshakes = (families - 1) * (total_persons - persons_per_family)\n    # Each mother shakes hands with all fathers and children except their own family members\n    mother_handshakes = (families - 1) * (families + (families - 1))\n    # Children shake hands only with fathers and mothers from other families\n    child_handshakes = (families - 1) * 2 * (families - 1)\n    \n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes\n    return total_handshakes\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # Given recurring decimal 0.852784...\n    recurring_sequence = \"85274\"\n    \n    # To find the 79th digit, we calculate 79 modulo the length of the sequence\n    index = (79 - 1) % len(recurring_sequence)  # Subtract 1 because string indexing starts at 0\n    \n    # The digit at the calculated index is the answer\n    ans = int(recurring_sequence[index])\n    \n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_three_digit_number = 999\n    for i in range(max_three_digit_number, 99, -1):\n        if (i + 2009) % 17 == 0 and (i + 2009) % 19 == 0:\n            return i\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    missing_number = total_sum - 1939\n\n    return missing_number\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # For a 3-digit number, we have three positions to place these digits.\n\n    # The hundreds place can be any of the 5 odd digits.\n    # The tens place can also be any of the 5 odd digits.\n    # The ones place can be any of the 5 odd digits as well.\n\n    # Thus, by the multiplication rule (Law of Multiplication), since each place\n    # is independent of the others, we can multiply the number of possibilities for each place.\n\n    hundreds_place = 5  # Options for hundreds place (1, 3, 5, 7, 9)\n    tens_place = 5       # Options for tens place (1, 3, 5, 7, 9)\n    ones_place = 5       # Options for one's place (1, 3, 5, 7, 9)\n\n    # Calculating total number of 3-digit numbers with all odd digits\n    total_numbers = hundreds_place * tens_place * ones_place\n\n    return total_numbers\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 999):\n        if i + (i + 1) == 777:\n            return i + 2  # The next ticket number after ours\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    total_bill = 82\n    free_hours = 40\n    first_extra_hours_max = 10\n    second_extra_hours_max = 10\n    first_extra_hour_rate = 5\n    second_extra_hour_rate = 8\n    third_extra_hour_rate = 15\n    \n    # Calculate the bill for the first segment of extra hours\n    first_segment_bill = first_extra_hours_max * first_extra_hour_rate\n    if total_bill <= first_segment_bill:\n        extra_hours = total_bill / first_extra_hour_rate\n    else:\n        extra_hours = first_extra_hours_max\n        total_bill -= first_segment_bill\n        \n        # Calculate the bill for the second segment of extra hours\n        second_segment_bill = second_extra_hours_max * second_extra_hour_rate\n        if total_bill <= second_segment_bill:\n            extra_hours += total_bill / second_extra_hour_rate\n        else:\n            extra_hours += second_extra_hours_max\n            total_bill -= second_segment_bill\n            \n            # Calculate the hours for the third segment\n            extra_hours += total_bill / third_extra_hour_rate\n    \n    # Calculate the total parking hours\n    total_hours = free_hours + extra_hours\n    return total_hours\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Numbers of marbles for each color\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # We want to find the minimum number of marbles such that we have 4 different colors.\n    # In the worst case scenario, we draw all but one color entirely before getting a marble of the last color.\n    # So we add the largest numbers of marbles from three colors, since we could draw all of these without getting the fourth color.\n    # And then we add 1 to ensure we get the fourth color.\n\n    # We sort the numbers of marbles to easily get the largest three amounts\n    sorted_marbles = sorted([red, green, blue, orange], reverse=True)\n\n    # Add up the largest three amounts and add 1 to ensure the fourth color\n    min_draws = sum(sorted_marbles[:3]) + 1\n\n    return min_draws\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_per_day = 60\n    days_in_a_week = 7\n\n    total_earnings = average_per_day * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    return 3016 - 100\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Function to calculate number of ways to reach a step\n    def count_ways(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return count_ways(n - 1) + count_ways(n - 2) + count_ways(n - 3)\n\n    # Total ways to reach the 4th step\n    ways_to_4 = count_ways(4)\n    # Total ways to reach the 10th step without considering the muddy 5th step\n    ways_to_10 = count_ways(10)\n\n    # Since Jimmy can't step on the 5th step, we consider 10th step as 9th step\n    # and multiply the number of ways to get to the 4th step with the number of ways\n    # to go from the 5th to the 10th step treating it as going from the 4th to the 9th.\n    ans = ways_to_4 * (ways_to_10 - ways_to_4)\n\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Since we need the largest number to be as big as possible,\n    # we need the other four numbers to be as small as possible.\n    # The smallest positive odd numbers are 1, 3, 5, and 7.\n    # The sum of these four numbers is 1 + 3 + 5 + 7 = 16.\n\n    # Subtract this sum from the total sum to find the largest number.\n    largest_number = 85 - 16\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    tax_for_first_30000 = T * 30000 / 100\n    tax_for_remaining_income = (T + 3) * (income - 30000) / 100\n    total_tax = tax_for_first_30000 + tax_for_remaining_income\n\n    equation = Eq(total_tax, (T + 1) * income / 100)\n\n    solutions = solve((equation, income > 30000), (T, income))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    effective_speed = speed_ship + speed_current\n    time = distance / effective_speed\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return int(n)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    # Let x be the number of 50-cent coins and y be the number of 20-cent coins\n    # We have two equations based on the problem statement:\n    # x + y = 21 (total number of coins)\n    # 0.50x + 0.20y = 6.30 (total value of coins)\n    # We will use sympy to solve this system of equations\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # create symbols for x and y\n    eq1 = Eq(x + y, 21)  # equation for the total number of coins\n    eq2 = Eq(0.50*x + 0.20*y, 6.30)  # equation for the total value of the coins\n    \n    # solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n    return solutions[x]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    \n    remainder = total_coins % children\n    \n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import isqrt, sqrt\n\n    count = 0\n    num = 2\n\n    while True:\n        str_num = '2' + '5' * (num - 1)\n        int_num = int(str_num)\n        \n        # Check if it's a perfect square by verifying that the square root squared is the number itself\n        if isqrt(int_num) ** 2 == int_num:\n            count += 1\n\n        # If the number exceeds 25555, break the loop as the pattern suggests we should stop there\n        if int_num > 25555:\n            break\n        \n        num += 1\n\n    return count\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the speeds of Alan and Phillip be 'a' and 'p' respectively\n    a, p = symbols('a p')\n\n    # Since Phillip walks 15 meters more than Alan does per minute\n    eq1 = Eq(p, a + 15)\n\n    # Phillip takes 12 minutes to walk from A to B\n    time_phillip = 12\n\n    # Alan takes 3 minutes more than Phillip\n    time_alan = time_phillip + 3\n\n    # The distance covered by Alan and Phillip is the same (let it be 'd')\n    # Thus, distance = speed * time, giving us two equations:\n    d = symbols('d')\n    eq2 = Eq(d, a * time_alan)\n    eq3 = Eq(d, p * time_phillip)\n\n    # Now we solve the equations to find 'd'\n    solutions = solve((eq1, eq2, eq3), (a, p, d))\n\n    # Return the distance between A and B\n    return solutions[d]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_five = 28\n    mean_twelve = 11\n\n    total_five = mean_five * 5\n    total_twelve = mean_twelve * 12\n\n    total_numbers = 5 + 12\n    total_sum = total_five + total_twelve\n\n    mean_all = total_sum / total_numbers\n\n    return mean_all\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    return discounted_price\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variables\n    alice_original, tom_original = symbols('alice_original tom_original')\n\n    # Alice's money after spending $36 and being $25.4 less than Tom's\n    alice_after = tom_original - 25.40 - 36\n\n    # Set up the equation Tom had $68.10\n    equation1 = Eq(tom_original, 68.10)\n\n    # Set up the equation for Alice's original amount of money\n    equation2 = Eq(alice_original - 36, alice_after)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (alice_original, tom_original))\n\n    return float(solutions[alice_original])\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    bench_spacing = 7\n    num_benches = 9\n\n    # Total length of all the bench spacings is the number of spacings (one less than the number of benches) times the spacing length\n    total_spacing_length = (num_benches - 1) * bench_spacing\n\n    # The length of bench is total distance minus total length of all spacings, divided by the number of benches\n    bench_length = (total_distance - total_spacing_length) / num_benches\n    \n    return bench_length\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Maximum number of coins of the same colour to ensure the next coin is of a different colour\n    coins_needed = 6 + 1  # Taking all 6 of one color plus 1 ensures the next one is different\n    return coins_needed\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Each time Peter cuts 5 arms, 1 grows back. So, effectively, he removes 4 arms.\n    effective_arms_cut = 21\n    original_arms = effective_arms_cut // 4 * 5\n    # Since Peter cut exactly 21 arms, check for any remaining arms that were cut but didn't lead to a full cycle of regrowth\n    remaining_arms_cut = effective_arms_cut % 4\n    \n    # Add the remaining arms he cut to the original number of arms\n    # since the octopus didn't have time to regrow the last set of arms.\n    original_arms += remaining_arms_cut\n\n    return original_arms\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in class A as A\n    # and the number of students in class B as B.\n    # Jenny's total number of candies is C.\n    A, B, C = symbols('A B C')\n    \n    # From the problem statement, we have the following equations:\n    # 1) 4A + 20 = C -> Each student in class A gets 4 candies and 20 more are needed\n    # 2) 6B - 16 = C -> Each student in class B gets 6 candies and 16 are left\n    # 3) A = 2B -> The number of students in class A is twice of class B.\n\n    equation1 = Eq(4 * A + 20, C)\n    equation2 = Eq(6 * B - 16, C)\n    equation3 = Eq(A, 2 * B)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # The number of candies Jenny has is denoted by C in our equations\n    return solutions[C]\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Assuming trees are planted at equal intervals.\n    # Distance from 1st to 5th tree is for 4 intervals, which is 20 cm.\n    # Therefore, each interval distance is 20 cm / 4 intervals.\n    interval_distance = 20 / 4\n\n    # Distance from 8th to 14th tree is for 6 intervals (14 - 8 = 6).\n    # Therefore, distance from 8th to 14th tree is 6 intervals * interval distance.\n    distance_8_to_14 = 6 * interval_distance\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance_meters = speed_m_per_min * time_minutes\n\n    return distance_meters\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    total_sum = 2021\n    third_greatest = 246\n    remaining_sum = total_sum - third_greatest  # Sum of other nine numbers\n    \n    # As we are trying to minimize the 4th number, the first two numbers must be as large as possible.\n    # For the first two numbers to be largest, the other seven numbers (other than 3rd and 4th)\n    # must be as small as possible, which is 1 (the smallest whole number).\n    # The sum of these seven smallest amounts is therefore 7 * 1 = 7.\n    \n    # The remaining sum for the other two numbers out of nine (excluding the third greatest) is:\n    remaining_sum -= 7\n\n    # Now we have two numbers left to add to the third greatest to get to the remaining sum.\n    # One must be greater than or equal to the third greatest, and the other we want to be the minimum.\n    # To maximize the second greatest, we make it one more than the third greatest.\n    second_greatest = third_greatest + 1\n    \n    # Subtract second greatest from the remaining sum to find the fourth greatest.\n    # This will minimize the fourth greatest number.\n    fourth_greatest = remaining_sum - second_greatest\n    \n    return fourth_greatest\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = (38 * 32) + (37 * 33) + (36 * 34)\n    return ans\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    ans = 0\n    for i in range(1, 25):\n        for j in range(i + 1, 25):\n            if i % j != 0 and j % i != 0:\n                for k in range(j + 1, 25):\n                    if i % k != 0 and k % i != 0 and j % k != 0 and k % j != 0:\n                        for l in range(k + 1, 25):\n                            if i % l != 0 and l % i != 0 and j % l != 0 and l % j != 0 and k % l != 0 and l % k != 0:\n                                ans += 1\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    \n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n    # Grey was born when his father was 30 years old, so the difference in their ages is 30 years.\n    equation1 = Eq(father, grey + 30)\n    # This year, the age of Grey's father is three times that of Grey's age.\n    equation2 = Eq(father, 3 * grey)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "import matplotlib.pyplot as plt\n\ndef draw_parts_graph(pip, bud):\n    # Create a figure and a set of subplots\n    fig, ax = plt.subplots()\n    \n    # Define labels and sizes for the parts\n    labels = 'Pip', 'Bud'\n    sizes = [pip, bud]\n\n    # Draw the parts graph (pie chart)\n    ax.pie(sizes, labels=labels)\n\n    # Set aspect ratio to be equal so that pie is drawn as a circle\n    ax.axis('equal')\n\n    # Show the plot\n    plt.show()\n\ndef solution():\n    # Given that Pip has apples 5 times as many as Bud\n    bud = 1\n    pip = 5 * bud\n\n    # Draw the parts graph\n    draw_parts_graph(pip, bud)\n\n    return None # This problem doesn't have a return value; it requires a graph.\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    \n    # At least (total_books // layers) books will be on the layer with the most books,\n    # By the Pigeonhole Principle, if we distribute evenly and then add the remaining books to a layer.\n    min_on_most_populated_layer = (total_books // layers) + (1 if total_books % layers else 0)\n    \n    return min_on_most_populated_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_row_seats = 48\n    last_row_seats = 80\n    difference = 4\n    \n    # Use the formula to find the number of terms: (last_term - first_term) / difference + 1\n    number_of_rows = (last_row_seats - first_row_seats) // difference + 1\n    \n    # Use the formula for the sum of an arithmetic series: (n/2) * (first_term + last_term)\n    total_seats = (number_of_rows / 2) * (first_row_seats + last_row_seats)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    digits = [3, 6, 9]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    hundreds_place_options = 2  # Only 1 or 2 can be used in the hundreds place\n    tens_place_options = 2      # Any number except the one used in hundreds place\n    ones_place_options = 1      # Only one number left for the ones place\n    \n    total_combinations = hundreds_place_options * tens_place_options * ones_place_options\n    return total_combinations\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, _ = solve_congruence(*congruences)\n    while num < 100:\n        num += 3 * 5 * 7\n    if num < 200:\n        return num\n    else:\n        return \"No solution in given range\"\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = quotient + 1  # because the remainder is less than the divisor and is positive\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, initial_goats = symbols('total_animals initial_goats')\n    initial_cows = 0.65 * total_animals\n    total_animals_after = total_animals + 240\n    cows_after = 0.85 * total_animals_after\n    goats_after = 2 * initial_goats\n\n    # Setup the equations based on the problem statement\n    equation1 = Eq(initial_cows + initial_goats, total_animals)\n    equation2 = Eq(initial_cows + 240, cows_after)\n    equation3 = Eq(initial_goats, total_animals - initial_cows)\n    equation4 = Eq(initial_goats * 2, goats_after)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals, initial_goats))\n\n    return int(solutions[initial_goats])\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    first_section_cm = 30  # already in cm\n    second_section_cm = 1.5 * 100  # convert from m to cm\n    third_section_cm = 150 / 10  # convert from mm to cm\n\n    # Sum all sections to get the total width\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    age_difference = 38 - melanie_age\n\n    uncle_age = melanie_age + age_difference\n\n    return uncle_age\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current = symbols('hazel_current')\n    jessica_current = symbols('jessica_current')\n\n    # Let's define \"y\" years old as Hazel's age 3 years from now\n    y = symbols('y')\n\n    # Hazel's current age = Hazel's age 3 years from now - 3 years\n    equation1 = Eq(hazel_current, y - 3)\n\n    # Jessica is 3 years younger than Hazel\n    equation2 = Eq(jessica_current, hazel_current - 3)\n\n    # We solve for Hazel's and Jessica's current ages\n    ages_current = solve((equation1, equation2), (hazel_current, jessica_current))\n\n    # Total age next year will be: (Hazel's current age + Jessica's current age) + 2 years (one for each next year)\n    total_age_next_year = (ages_current[hazel_current] + ages_current[jessica_current]) + 2\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100  # Convert Â£3.00 to pence\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    n = (5 - 3) // 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students_facing_teacher = 50\n\n    # Turn multiples of 4 backward\n    multiples_of_4 = set(range(4, 51, 4))\n\n    # Turn multiples of 6 backward\n    multiples_of_6 = set(range(6, 51, 6))\n\n    # Multiples of 4 or 6 will turn backwards once\n    # Multiples of 4 and 6 (i.e., 12) will turn backwards twice, so they end up facing the teacher\n    students_backwards_once = multiples_of_4.symmetric_difference(multiples_of_6)\n    \n    students_facing_teacher -= len(students_backwards_once)\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Katy's movie start time in 24-hour format\n    start_time = datetime.strptime('15:25', '%H:%M')\n\n    # Movie duration in minutes\n    duration = timedelta(minutes=108)\n\n    # Calculate end time\n    end_time = start_time + duration\n\n    # Format end time in 24-hour format\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    first_number = 2 + Fraction(3, 8)\n    second_number = 6 + Fraction(9, 12)\n    third_number = 1 + Fraction(14, 16)\n\n    ans = first_number + second_number + third_number\n\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    sister_age_in_3_years = amy_age_now - 5\n    sister_age_now = sister_age_in_3_years - 3\n    return sister_age_now\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 21 and i % 2 == 0:\n            return i\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            total_sum += i/j\n    return total_sum\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_value = 18\n    fraction_part = 3/5\n    whole_amount = part_value / fraction_part\n    return whole_amount\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different numbers/letters in each suit and 4 suits.\n    # Using the pigeonhole principle, drawing one from each number/letter\n    # will result in 13 cards, all different. To guarantee a pair, draw\n    # just one more card, which will be the 14th card.\n    return 13 + 1\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    # The smallest two-digit number that can be divided by both 3 and 7\n    # is their least common multiple (LCM), provided it's two-digit.\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    # Each cactus costs $2, each sunflower costs $7\n    cost_cacti = 2\n    cost_sunflowers = 7\n    \n    # Lavi spent a total of $156\n    total_cost = Eq(cacti * cost_cacti + sunflowers * cost_sunflowers, 156)\n    \n    # Lavi bought 6 more cacti than sunflowers\n    more_cacti = Eq(cacti, sunflowers + 6)\n    \n    # Solve the system of equations\n    solutions = solve((total_cost, more_cacti), (cacti, sunflowers))\n    \n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    book_price = symbols('book_price')\n\n    # Create the equations based on the problem statement\n    # Sarah's total cost equation: 8 books + 3 pencils = Rebecca's cost + Â£1.00\n    sarah_cost = 8 * book_price + 3 * 0.40\n    rebecca_cost = 3 * book_price + 8 * 0.40\n    equation = Eq(sarah_cost, rebecca_cost + 1.00)\n\n    # Solve the equation\n    book_price_solution = solve(equation, book_price)\n\n    # Return the price of the book\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([2*i**2 for i in range(1, 11)])\n    odd_squares = sum([(2*i-1)**2 for i in range(1, 11)])\n    return even_squares - odd_squares\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured = 2 * 6\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    book_price = symbols('book_price')\n\n    # Equation based on the given information\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1.00)\n\n    # Solve for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of Liverpool fans and Manchester United fans at first\n    L, M = symbols('L M')\n\n    # Original number of Liverpool fans is 1000 more than Manchester United fans\n    equation1 = Eq(L, M + 1000)\n\n    # Added fans after 30 minutes\n    added_Liverpool_fans = 472\n    added_ManU_fans = 4836\n\n    # The final number of Manchester United fans is 3 times the final number of Liverpool fans\n    equation2 = Eq(M + added_ManU_fans, 3 * (L + added_Liverpool_fans))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Start from the final remaining amount which is $3\n    remaining = 3\n    \n    # Undo the last operation which was giving $2 to Mike\n    remaining += 2\n    \n    # Undo giving half to Nini by multiplying by 2\n    remaining *= 2\n    \n    # Undo giving half to Bob by multiplying by 2 again\n    remaining *= 2\n    \n    # Undo giving half to her mother by multiplying by 2 one last time\n    remaining *= 2\n    \n    # The result is the original amount Andy had\n    return remaining\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    number = \"\"\n    for i in range(1, 2023):\n        number += str(i)\n        if len(number) >= 2023:\n            break\n    return int(number[2023 - 1])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    class_a_students, class_b_students, peaches = symbols('class_a_students class_b_students peaches')\n\n    # each student in class A can get 5 peaches with 10 left\n    equation1 = Eq(peaches, 5 * class_a_students + 10)\n    # each student in class B can get 8 peaches, need 2 more\n    equation2 = Eq(peaches + 2, 8 * class_b_students)\n    # class A has 3 more students than class B\n    equation3 = Eq(class_a_students, class_b_students + 3)\n\n    solutions = solve((equation1, equation2, equation3), (class_a_students, class_b_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    # Today is 31/12/98 and tomorrow is the 11th birthday,\n    # which means the person was born on 1/1/88.\n    # On 31/12/01, we calculate the age by subtracting the birth year from the year in question.\n    \n    birth_year = 88\n    year_in_question = 1\n    \n    # If the birth year is less than or equal to the year in question, no century change is involved\n    if birth_year <= year_in_question:\n        age = year_in_question - birth_year\n    else:\n        # If the birth year is greater than the year in question, a century change is involved\n        # Years are in two-digit format, so we calculate the age across the century, which is '100 + year_in_question - birth_year'\n        age = 100 + year_in_question - birth_year\n    \n    return age\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    smallest_odd = None\n    digits = [\"4\", \"6\", \"2\", \"5\"]\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 != 0:\n            if smallest_odd is None or number < smallest_odd:\n                smallest_odd = number\n    return smallest_odd\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    max_students_per_boat = 6\n    \n    if students % max_students_per_boat == 0:\n        trips = students // max_students_per_boat\n    else:\n        trips = (students // max_students_per_boat) + 1\n    \n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    term_value = 36\n    ordinal_number = ((term_value - first_term) // difference) + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    # Define variables for t-shirts (t) and caps (c)\n    t, c = 8, 5  # t:c = 8:5\n    \n    # Total amount collected\n    total_amount = 132\n    \n    # Cost of each t-shirt and cap\n    cost_tshirt = 3 \n    cost_cap = 5\n    \n    # Number of t-shirts and caps sold\n    # 1/4 of t-shirts and 1/5 of caps are sold, hence the remaining ratio is (3/4 * t) and (4/5 * c)\n    # The total amount collected is the total value of t-shirts plus caps sold\n    # Equation: (1/4 * t) * cost_tshirt + (1/5 * c) * cost_cap = total_amount\n    # Replace t with 8k and c with 5k (where k is a common multiplier), we have\n    # (1/4 * 8k) * 3 + (1/5 * 5k) * 5 = 132\n    # (2k) * 3 + (k) * 5 = 132\n    # 6k + 5k = 132\n    # 11k = 132\n    # k = 132 / 11\n    k = total_amount / 11\n    \n    # Number of t-shirts is 8 times k\n    num_tshirts = 8 * k\n    \n    return int(num_tshirts)\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:  # prime numbers < 10\n        for ones_digit in [2, 3, 5, 7]:  # prime numbers < 10\n            N = tens_digit * 10 + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    kids_run_away = 5\n    library_catch = 9\n    \n    total_kids_caught = (initial_catch - kids_run_away) + library_catch\n    \n    return total_kids_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # minutes (1 hour and 20 minutes)\n\n    # Number of pictures that can be painted in the given time\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # If person 6 stands directly opposite to person 19,\n    # the circle must be divided into segments where the difference between opposite\n    # numbers equals half the number of people in the game.\n    difference = 19 - 6\n    # The number of people is twice this difference\n    number_of_people = 2 * difference\n    return number_of_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    total_apples = 10\n    for group1 in range(1, total_apples): \n        group2 = total_apples - group1\n        if group1 != group2:\n            count += 1\n    # Since order doesn't matter, we avoid double counting by dividing by 2\n    return count // 2\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'e' be the number of Eric's game cards\n    e = symbols('e')\n    \n    # Joe has 7 times as many game cards as Eric\n    j = 7 * e\n    \n    # Joe has to give 'g' game cards to Eric so that each has 168 game cards after that\n    g = symbols('g')\n    \n    # After giving 'g' cards to Eric, Joe will have j - g cards and Eric will have e + g cards\n    # Set up the equations based on the conditions after giving the game cards\n    equation1 = Eq(j - g, 168)  # Joe will have 168 cards\n    equation2 = Eq(e + g, 168)  # Eric will have 168 cards\n    \n    # Solve the equations for the variables 'e' and 'g'\n    solutions = solve((equation1, equation2), (e, g))\n    \n    # Return the number of game cards Joe must give to Eric\n    return solutions[g]\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    num_students = 5\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    ans = amy_swims - joanne_swims\n    return ans\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    abcd = 1000 * a + 100 * b + 10 * c + d\n    abc = 100 * a + 10 * b + c\n    ab = 10 * a + b\n    \n    equation = Eq(abcd + abc + ab + a, 1370)\n    solutions = solve(equation, (a, b, c, d))\n    \n    return solutions[abcd]\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3  # Sachin can clean 1 flat in 3 hours, so his rate is 1/3 flat/hour\n    peter_rate = 1 / 6   # Peter can clean 1 flat in 6 hours, so his rate is 1/6 flat/hour\n\n    # When working together, their rates are additive\n    combined_rate = sachin_rate + peter_rate\n\n    # Time taken to clean 1 flat together is the reciprocal of their combined rates\n    time_together = 1 / combined_rate\n  \n    return time_together\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne, charlie = symbols('anne charlie')\n    \n    equation1 = Eq(anne - 6, charlie + 6)\n    equation2 = Eq(anne + charlie, 38)\n    \n    solutions = solve((equation1, equation2), (anne, charlie))\n    \n    return solutions[anne]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n    number = factorial(29)\n    count = 0\n    while number % 10 == 0:\n        count += 1\n        number //= 10\n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    base_8_number = '12345654321'\n    N = int(base_8_number, 8)\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    linda_ratio = 3\n    ted_ratio = 4\n    total_ratio = linda_ratio + ted_ratio\n    \n    linda_distance = 1200\n    total_distance = linda_distance * total_ratio / linda_ratio\n\n    return total_distance\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    \n    # Original condition: Isaac had 5 times as many stamps as Joseph\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # After receiving 154 stamps, Joseph has 9/10 as many stamps as Isaac\n    equation2 = Eq(joseph + 154, 9/10 * isaac)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2018 * 10 + A) % 9 == 0:\n            return (2018 * 10 + A) % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_them = 1\n    \n    total_squirrels = ryan_front + between_them + elvis_behind + 2 # +2 for Ryan and Elvis themselves\n\n    return total_squirrels\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_effort = workers * days\n    days_for_one_worker = total_effort / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from math import factorial\n\n    def derangement_number(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n\n        # Use the formula for derangements: !n = (n-1)*(!(n-1) + !(n-2))\n        return (n - 1) * (derangement_number(n - 1) + derangement_number(n - 2))\n\n    num_students = 6\n    ans = derangement_number(num_students)\n    return ans\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_kg = 64\n\n    ans = (percentage / 100) * total_kg\n\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x + 3) / 6, (5 * x - 2) / 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(number for number in range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_current = symbols('jack_current')\n    equation = Eq(jack_current - 5, (jack_current + 8) / 2)\n\n    jack_age = solve(equation, jack_current)\n\n    return jack_age[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let x be the initial number of pupils at School P\n    # Let y be the initial number of pupils at School Q\n    # We have the following system of equations:\n    # 2/3 = x/y,\n    # 3/4 = (x + 240)/(y + 240)\n    # From the first equation, we get: y = (3/2)*x\n    # Substitute y in second equation we get:\n    # 3/4 = (x + 240)/((3/2)*x + 240)\n    # Now, we solve for x\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation1 = Eq(x/y, 2/3)\n    y = solve(equation1, y)[0]  # y in terms of x\n    \n    equation2 = Eq((x + 240)/(y + 240), 3/4)\n    solution = solve(equation2.subs(y, (3/2)*x), x)\n    return solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora spent 70% on a bag\n    spent_on_bag_percentage = 70\n    \n    # Remainder after spending on a bag\n    remainder_percentage = 100 - spent_on_bag_percentage\n    \n    # Fraction of remainder spent on a purse\n    spent_on_purse_fraction = 3/8\n    \n    # Percentage of remainder spent on a purse\n    spent_on_purse_percentage = spent_on_purse_fraction * remainder_percentage\n    \n    return spent_on_purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('EDUCATION') # total number of letters\n    vowels_count = len('EDUCATION') - len(set('EDUCATION') - set('AEIOU')) # count of vowels in EDUCATION\n    consonants_count = total_letters - vowels_count # count of consonants\n\n    # Total arrangements of letters\n    total_arrangements = factorial(total_letters)\n\n    # Arrangements where vowels are together\n    vowels_together = factorial(vowels_count) * factorial(consonants_count + 1) # +1 to consider the block of vowels as a single entity\n\n    # Subtracting the cases where vowels are together from total arrangements\n    arrangements_with_vowels_apart = total_arrangements - vowels_together\n\n    return arrangements_with_vowels_apart\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_per_student = 12\n    new_students = initial_students + 1\n\n    total_candies = initial_students * candies_per_student\n    new_candies_per_student = total_candies // new_students\n\n    return new_candies_per_student\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    angle_A = 50\n    angle_BPC = 180 - (angle_A / 2) - (angle_A / 2)\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.3*x + 0.7*(20-x), 20*0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    purchased_sweets = 11\n    wrappers = 11\n    total_sweets = purchased_sweets\n    \n    while wrappers >= 3:\n        extra_sweets = wrappers // 3\n        wrappers = wrappers % 3 + extra_sweets\n        total_sweets += extra_sweets\n        \n    return total_sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40', '%H:%M')\n    duration = timedelta(hours=4, minutes=50)\n    leaving_time = arrival_time + duration\n\n    return leaving_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    number = 10  # starting from the smallest two-digit number\n    while not (number % 5 == 4 and number % 7 == 4):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x1 be the number of two-tailed birds, x2 be the number of three-tailed birds,\n    # x3 be the number of six-tailed birds, and x4 be the number of eight-tailed birds.\n    x1, x2, x3, x4 = symbols('x1 x2 x3 x4')\n\n    # Given the number of two-tail birds is 5 more than twice as many as the number of eight-tail birds.\n    equation1 = Eq(x1, 2 * x4 + 5)\n\n    # Given number of three-tail birds is 2 more than half the number of six-tail birds.\n    equation2 = Eq(x2, x3 / 2 + 2)\n\n    # Given total number of their tails is 2 less than four times as many as the total number of their heads.\n    equation3 = Eq(2 * x1 + 3 * x2 + 6 * x3 + 8 * x4, 4 * (x1 + x2 + x3 + 2 * x4) - 2)\n\n    # Given the difference between the total number of their heads and their tails is 241.\n    equation4 = Eq((x1 + x2 + x3 + 2 * x4) - (2 * x1 + 3 * x2 + 6 * x3 + 8 * x4), 241)\n\n    # Solving the system of equations for x1, x2, x3, x4\n    solutions = solve((equation1, equation2, equation3, equation4), (x1, x2, x3, x4))\n\n    # Access the solution for x2 to find the number of three-tailed birds.\n    return solutions[x2]\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    weight_per_bag_kg = 0.25\n    total_weight_kg = 5\n    \n    number_of_bags = total_weight_kg / weight_per_bag_kg\n    total_selling_price = number_of_bags * selling_price_per_bag\n    \n    profit = total_selling_price - cost_price\n    profit_percentage = (profit / cost_price) * 100\n    \n    return profit_percentage\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    ans = (20 * 3) / 15\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given arithmetic sequence information\n    tenth_number = 23  # The 10th number in the sequence\n    fifteenth_number = 38  # The 15th number in the sequence\n\n    # Calculate the common difference\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n\n    # Calculate the 12th number\n    twelfth_number = tenth_number + (12 - 10) * common_difference\n\n    return twelfth_number\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways to go from Ayton to Beeton\n    A_to_B = 4\n    # Number of ways to go from Beeton to Ceeton\n    B_to_C = 5\n    # Number of ways to go from Ceeton to Deeton\n    C_to_D = 6\n    # Number of ways direct from Ayton to Deeton\n    A_to_D_direct = 3\n    \n    # Number of ways from Ayton to Deeton through Beeton and Ceeton\n    A_to_D_through_B_C = A_to_B * B_to_C * C_to_D\n    # Total number of ways from Ayton to Deeton\n    total_ways = A_to_D_direct + A_to_D_through_B_C\n\n    return total_ways\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    total_trees_first_3_days = 135 * 3\n    total_trees_last_5_days = 151 * 5\n    total_days = 8\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    average_trees = total_trees / total_days\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    # Count of numbers underlined twice will be those that are multiples of\n    # the least common multiple (LCM) of 2 pairs among (2, 3, 4).\n    # Since 4 is a multiple of 2, we are only interested in LCM of (2, 3) and (3, 4).\n    # LCM(2, 3) = 6, LCM(3, 4) = 12.\n    # We need to find the count of multiples of 6 and 12 between 1 and 2016\n    # and exclude those that are multiples of LCM(2, 3, 4) i.e., LCM(4) = 4,\n    # as those will be underlined three times.\n    \n    count_multiple_6 = 2016 // 6\n    count_multiple_12 = 2016 // 12\n    count_multiple_4 = 2016 // 4\n\n    # Multiples of 12 are also multiples of 6, so we subtract them from the count of multiples of 6.\n    # Multiples of 12 are already counted in multiples of 4, so no need to subtract from multiples of 12.\n    \n    # They are underlined twice if they are either multiples of 6 (not of 4) or multiples of 12.\n    count_twice = count_multiple_6 + count_multiple_12 - 2 * count_multiple_4\n\n    return count_twice\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define joe as the variable for the amount of money Joe had initially.\n    joe = symbols('joe')\n    \n    # Initially, Sally had $3.75, so after buying an ice-cream cone, she would have $3.75 - $2.50 left.\n    sally_after = 3.75 - 2.50\n    \n    # After both bought the ice-cream cone, they had $5 left in total.\n    # Thus, Joe would have $5 - Sally's amount left after the purchase.\n    total_after = 5\n    \n    # Set up the equation Joe's initial amount - $2.50 (the cost of the ice-cream cone)\n    # plus Sally's remaining amount equals to the total amount they have left.\n    equation = Eq(joe - 2.50 + sally_after, total_after)\n    \n    # Solve the equation for the variable joe.\n    solutions = solve(equation, joe)\n    \n    # Return the solution for Joe's initial amount of money.\n    return solutions[0]\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 202\n    second_number = 22\n\n    equation = Eq(first_number + magic_number, 6 * (second_number + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n    \n    solutions = solve(equation, magic_number)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    # Iterate over possible hundreds digits (1-9 because it's a 3-digit number)\n    for i in range(1, 10):\n        # Iterate over possible tens digits (0-9)\n        for j in range(0, 10):\n            # Calculate units digit to make the sum of the digits equal to 7\n            k = 7 - i - j\n            # Check if the calculated units digit is valid (i.e., it's a single digit >=0 and <=9)\n            # and the number is even (i.e., units digit is even)\n            if k >= 0 and k <= 9 and k % 2 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all the given numbers are prime\n        if (isprime(n) and isprime(n + 2) and isprime(n + 4) and \n            isprime(n + 106) and isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate the number of choices if Eddie picks salads and soups\n    ss = comb(salads, 1) * comb(soups, 1)\n\n    # Calculate the number of choices if Eddie picks salads and vegetables\n    sv = comb(salads, 1) * comb(vegetables, 1)\n\n    # Calculate the number of choices if Eddie picks salads and sandwiches\n    ssa = comb(salads, 1) * comb(sandwiches, 1)\n\n    # Calculate the number of choices if Eddie picks soups and vegetables\n    svv = comb(soups, 1) * comb(vegetables, 1)\n\n    # Calculate the number of choices if Eddie picks soups and sandwiches\n    b = comb(soups, 1) * comb(sandwiches, 1)\n\n    # Calculate the number of choices if Eddie picks vegetables and sandwiches\n    v = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    # Add them up\n    ans = ss + sv + ssa + svv + b + v\n\n    return ans\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last_with_20_boys = total_plasters / 20\n    return days_last_with_20_boys\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of strawberries and mangoes\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    # Equation 1: mangoes = strawberries + 448 (448g more mangoes than strawberries)\n    equation1 = Eq(mangoes, strawberries + 448)\n\n    # Equation 2: strawberries = 2 * (mangoes - 900) (After giving away 900g of mangoes, strawberries are twice the mass of mangoes)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    \n    apples = (2 / 3) * total_items\n    bananas = (1 / 9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    solutions = solve(equation, total_items)\n    num_lemons = total_items - apples - bananas\n\n    return int(num_lemons.subs(total_items, solutions[0]))\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boys_extra = 32\n    total_students = 0\n    side_length = 1;  # Starting with a single layer\n\n    # Assuming n is the side length of the square\n    # boys count can be written as boys = n^2 if n is odd, else (n-1)*(n-1)\n    # girls count can be written as girls = (n-1)^2 if n is odd, else n*n\n    # total boys - total girls = boys_extra\n\n    while True:\n        if side_length % 2 == 0:  # if side length is even\n            boys = (side_length - 1) ** 2\n            girls = side_length ** 2\n        else:  # if side length is odd\n            boys = side_length ** 2\n            girls = (side_length - 1) ** 2\n\n        if boys - girls == boys_extra:\n            total_students = boys + girls\n            break\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    equation1 = Eq((max_money - 12) / anthony_money, 2/5)\n    equation2 = Eq(max_money / (anthony_money - 12), 8/13)\n\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let r be the original number of red stickers and b be the original number of blue stickers.\n    r, b = symbols('r b')\n\n    # Initially, r = b; Liz had an equal number of red and blue stickers.\n    initial_stickers_eq = Eq(r, b)\n\n    # Liz gave away 2/3 of her red stickers, so she is left with 1/3 of her red stickers.\n    red_left_eq = Eq(r * (1 - 2/3), r / 3)\n\n    # Let x be the fraction of the blue stickers she gave away.\n    x = symbols('x')\n\n    # In the end, she was left with 1/4 of her total stickers, r + b.\n    end_stickers_eq = Eq((r / 3) + b * (1 - x), (r + b) / 4)\n\n    # We solve the system of equations to find x, the fraction of blue stickers Liz gave away.\n    solution_x = solve((initial_stickers_eq, red_left_eq, end_stickers_eq), (r, b, x))\n\n    return solution_x[x]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def nCk(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    def stars_and_bars(n, k):\n        return nCk(n - 1, k - 1)\n\n    # 20 pens to 6 kids means 20 - 6 = 14 \"stars\" and 6 - 1 = 5 \"bars\"\n    ans = stars_and_bars(20 - 6 + 1, 6 - 1)\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Since we only care about the unit digit, we only need to consider the last digit of the base\n    base_unit_digit = 4\n    \n    # The pattern of the last digit of base 4 powers repeats every 2: 4^1 = 4, 4^2 = 16, 4^3 = 64...\n    # So we want to find the equivalent exponent on the pattern cycle\n    # The cycle for 4's unit digit is (4, 6), so we just need to find the position of 2022 in this cycle\n\n    # Since the cycle length is 2, we use modulo 2 to find the position in the cycle for the exponent 2022\n    cycle_position = 2022 % 2\n\n    # Now we determine the unit digit depending on the position on the cycle\n    if cycle_position == 0:\n        unit_digit = 6  # for even powers of 4, the unit digit is 6\n    else:\n        unit_digit = 4  # for odd powers of 4, the unit digit is 4\n\n    return unit_digit\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Convert all lengths to millimetres\n    lengths_mm = [\n        10,            # 10 mm\n        100 * 10,      # 100 cm in mm\n        10 * 1000,     # 10 m in mm\n        2 * 1000 * 1000,  # 2 km in mm\n        2800 * 10,     # 2800 cm in mm\n        2500 * 1000,   # 2500 m in mm\n        100,           # 100 mm\n        100 * 1000     # 100 m in mm\n    ]\n\n    # Find the smallest length\n    min_length_mm = min(lengths_mm)\n\n    return min_length_mm\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    page_difference = 4\n\n    # Calculate the number of days it took to finish the book\n    num_days = ((last_day_pages - first_day_pages) / page_difference) + 1\n\n    # Calculate the total number of pages\n    total_pages = ((first_day_pages + last_day_pages) * num_days) / 2\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Initialize the piles list\n    piles = [0, 0, 0, 0]\n    # Set the total number of marbles\n    total_marbles = 16\n    # Start with the largest pile and minimize it\n    for biggest_pile in range(1, total_marbles - sum(piles[:3])):\n        other_piles_total = total_marbles - biggest_pile\n        # Deduct the biggest_pile and distribute the rest\n        for second_pile in range(1, other_piles_total - sum(piles[2:])):\n            for third_pile in range(1, other_piles_total - second_pile):\n                fourth_pile = other_piles_total - second_pile - third_pile\n                # Check for different numbers in each pile and if they total 16 marbles\n                if (len(set([biggest_pile, second_pile, third_pile, fourth_pile])) == 4 and\n                        sum([biggest_pile, second_pile, third_pile, fourth_pile]) == total_marbles):\n                    return biggest_pile\n    return None\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    series = [3, 7, 11, 15, 19]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    while True:\n        current_steps += 1\n        if is_palindrome(current_steps):\n            break\n\n    return current_steps - 1991\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Three-digit odd number: ABC\n    # A cannot be 0\n    # C must be an odd number\n    count = 0\n    for A in [1, 2, 3, 4, 5, 6]:\n        for B in [1, 2, 3, 4, 5, 6]:\n            for C in [1, 3, 5]:  # only odd numbers for the last digit\n                if A != B and B != C and A != C:  # check that all digits are different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    for ducks in range(26):\n        cows = 25 - ducks\n        if ducks * 2 + cows * 4 == 68:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    total_children = 11 + 5\n    average_height = 122.5\n    \n    equation1 = Eq((11 * girls + 5 * boys) / total_children, average_height)\n    equation2 = Eq(girls, boys + 3.2)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7, 602 % 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    total_students = 70\n    average_score = 66\n    girls_average = 70\n    boys_average = 63\n\n    # Let the number of girls be x\n    # Then the number of boys is total_students - x\n    # We set up the equation:\n    # x * girls_average + (total_students - x) * boys_average = total_students * average_score\n\n    # Solve for x\n    x = (total_students * average_score - total_students * boys_average) / (girls_average - boys_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # As we know the sum of an arithmetic sequence is average * number of terms\n    # There are 9 odd numbers that makes it an arithmetic sequence with a common difference of 2\n    # Let the first term be a1 and the common difference be d (which is 2 for odd numbers)\n    # The sum of the sequence is (a1 + (a1 + (n-1)*d)) * n / 2\n    # For 9 numbers the sum S is given by: S = (a1 + (a1 + 8*2)) * 9 / 2 = 1503\n    # We simplify the equation to: 18*a1 + 72 = 1503*2\n    # Solving for a1 we get:\n    a1 = (1503 * 2 - 72) / 18\n    \n    return int(a1)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # Index of terms\n    index_n1 = 32\n    index_n2 = 108\n    \n    # Value of terms\n    term_n1 = 157\n    term_n2 = 537\n    \n    # Calculating the common difference (d) using the formula:\n    # term_n2 = term_n1 + (index_n2 - index_n1) * d\n    d = (term_n2 - term_n1) / (index_n2 - index_n1)\n    \n    # Calculating the first term (a) using the formula:\n    # term_n1 = a + (index_n1 - 1) * d\n    a = term_n1 - (index_n1 - 1) * d\n    \n    return int(a)\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 people to whom A can pass the ball initially.\n    first_pass_options = 3\n    # After A passes the ball, the receiver has 2 options (excluding A) to pass it further.\n    second_pass_options = 2\n    # After the second pass, the receiver again has 2 options (excluding the one who passed to him/her).\n    third_pass_options = 2\n\n    # The total number of different methods is the product of the options at each pass.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n\n    return total_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    num_days = 5\n\n    total_cost = cost_per_day * num_days\n\n    return total_cost\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # According to the question, we will use inductive reasoning to get the pattern\n    # The maximum number of regions formed by the intersection of n lines can be found \n    # using the formula: R(n) = R(n-1) + n\n    # However, since we consider triangles, we are finding regions created by sides \n    # of the triangles. Hence, we can use a modified version of inductive reasoning here.\n    # Basically, it can be deduced that with each new triangle, up to the number of \n    # sides of the new triangle plus one additional parts (produced by overlapping \n    # intersections) can be created.\n    # T(1) triangle can divide the plane into at most 2 regions (1 triangle + 1 plane).\n    # T(2) triangles can intersect with each other to form 4 more regions maximum than T(1).\n    # T(3) triangles can intersect with the former 2 triangles and themselves to create \n    # six new parts maximum than T(2).\n    # Continuing this pattern, we can deduce that the maximum number of new regions created \n    # by each additional triangle is equal to the number of sides plus the triangle number itself.\n    # This gives us:\n    # T(n) = T(nâ1) + 3 + nâ1, with a base case of T(1) = 2.\n    # Applying this to the 5 triangles, we get:\n\n    regions = 2  # Starting with the first triangle\n    for triangles in range(2, 6):  # Starting from the second triangle up to 5 triangles\n        regions += 3 + (triangles - 1)  # Add new regions for each triangle\n    return regions\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')\n    \n    # Kate ate 1/4 of the candies and had 42 candies left\n    # So the number of candies Kate got from Jane is 42 / (1 - 1/4) = 42 / (3/4) = 42 * 4 / 3\n    candies_kate_received = 42 * 4 / 3\n\n    # Jane ate 1/3 of the candies plus 4 candies\n    # candies_kate_received = (candies_jane_received - 4) * (2/3)\n    candies_jane_received = solve(candies_kate_received - (x - 4) * (2/3) - x, x)[0]\n\n    # Donna kept half of the candies plus 3 candies and then gave the remaining to Jane\n    # candies_jane_received = (total_candies - 3) / 2\n    total_candies = solve((x - 3) / 2 - candies_jane_received, x)[0]\n    \n    return total_candies\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_initial_books = 30  # Jason has 30 books initially\n    books_given = 4  # Jason gives 4 books to Anthea\n    \n    # After giving away 4 books, Jason and Anthea have the same number of books\n    # Let's denote Anthea's initial number of books as 'anthea_initial_books'\n    # We know that: jason_initial_books - 4 = anthea_initial_books + 4\n    \n    # From that equation, we can solve for Anthea's initial number of books\n    anthea_initial_books = jason_initial_books - books_given - books_given\n    \n    # The difference between Jason and Anthea's books initially\n    difference_initial = jason_initial_books - anthea_initial_books\n    \n    return difference_initial\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        if perm[0] != 0:  # Exclude 0 for the first digit\n            Q, P = perm\n            ans = Q * 10 + P\n            return ans\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    position = 4 * 10 // math.gcd(4, 10)\n    return position\n\nimport math\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = (2020 * 68) + (505 * 128)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    concentration = (total_sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # meters per second\n    time_seconds = 12 * 60  # 12 minutes to seconds\n\n    distance = speed * time_seconds\n    return distance\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10  # Total amount paid with a Â£10 note\n    newspaper_cost = 2.20  # Cost of the newspaper\n    change_received = 4.83  # Change received\n\n    # Calculate the cost of the box of tissues\n    tissues_cost = total_paid - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    # A's efficiency is twice B's\n    a_efficiency = 2\n\n    # Let x be the number of days B takes\n    # A takes x - 12 days\n\n    # If A's efficiency is twice B's, B's work can be represented as 1 unit per day\n    # A's work can be represented as 2 units per day\n\n    # A's total work = 2 * (x - 12)\n    # B's total work = x\n\n    # Their combined efficiency is 3 units per day\n    # Total work done by A and B together is x units (since total work must be the same)\n    # days_together = total_work / combined_efficiency\n    # x = 3 * days_together\n\n    # We can equate the total work by A when working alone to the total work by A and B together:\n    # 2 * (x - 12) = 3 * days_together\n\n    # Substitute x from the relation above:\n    # 2 * (3 * days_together - 12) = 3 * days_together\n    # 6 * days_together - 24 = 3 * days_together\n    # 3 * days_together = 24\n    # days_together = 24 / 3\n    # days_together = 8\n\n    # Hence, A and B can complete the whole job together in 8 days.\n    return 8\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    all_perms = set()\n\n    for i in range(1, len(digits)+1):\n        perms = [''.join(p) for p in permutations(digits, i)]\n        all_perms.update(perms)\n    \n    return len(all_perms)\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + 3 * tomatoes\n    return cucumbers\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    \n    # Assuming the number of girls is the same as boys, we set girls = boys.\n    girls = boys\n    \n    # After 3/5 of the boys and 42 girls left, boys remaining: boys - 3/5 * boys\n    # Girls remaining: girls - 42\n    # There were 12 more boys than girls at the exhibition afterwards.\n    equation = Eq(boys - (3/5) * boys, (girls - 42) + 12)\n    \n    # Solve for the number of boys\n    solutions = solve(equation, boys)\n    \n    # The total number of students equals the number of boys + the number of girls\n    total_students = solutions[0] * 2\n    \n    return total_students\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_pencil_case = 6.25\n    total_cost = cost_per_pencil_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n    return total_candy\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_increase = 13 - (-8)\n    return temperature_increase\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60  # 12 minutes late\n    early_time = -4 / 60  # 4 minutes early\n    \n    # Let d be the distance from home to office\n    # Let t be the normal time to travel without being late or early\n    \n    # When speed is 3 km/h, time is t + late_time\n    # When speed is 5 km/h, time is t - early_time\n    \n    # Using the equation distance = speed * time\n    # At speed 3 km/h, distance d = 3 * (t + late_time)\n    # At speed 5 km/h, distance d = 5 * (t - early_time)\n    \n    # As the distance is the same,\n    # 3 * (t + late_time) = 5 * (t - early_time)\n    # Solving for t gives the normal time to travel\n    \n    # Rearrange the equation to find t\n    # 3t + 3 * late_time = 5t - 5 * early_time\n    # 2t = 3 * late_time + 5 * early_time\n    t = (3 * late_time + 5 * early_time) / 2\n    \n    # Now calculate the distance using the speed and the normal time t\n    d = 3 * (t + late_time)\n    \n    return d\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    card_a = 40\n    card_b = card_a / 2\n    card_c = card_b / 2\n    total_value = card_a + card_b + card_c\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    each_room_after_transfer = total_pupils // 2\n    return each_room_after_transfer\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of boys and girls as b and g respectively.\n    b, g = symbols('b g')\n\n    # The initial ratio is 3:2\n    equation1 = Eq(3*g, 2*b)\n\n    # After 12 boys and 12 girls joined, the new ratio is 19:14\n    equation2 = Eq(19*(g+12), 14*(b+12))\n\n    # Let's solve the system of equations to find the values of b and g\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Calculate the total number of children after 12 boys and 12 girls joined\n    total_children = solutions[b] + 12 + solutions[g] + 12\n\n    return total_children\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange four different colored socks in a row\n    total_unique_socks = 4\n    arrangements_unique_socks = factorial(total_unique_socks)\n\n    # Number of ways to arrange two different colored pairs of socks in a row\n    total_pairs = 2\n    arrangements_each_pair = factorial(2)  # Each pair can be switched within itself\n    arrangements_total_pairs = factorial(total_pairs)\n    \n    # Total number of arrangements for pairs taking into account that each pair is indistinguishable\n    arrangements_pairs = arrangements_total_pairs * (arrangements_each_pair ** total_pairs)\n\n    return arrangements_unique_socks, arrangements_pairs\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_of_iron_bar1 = 23\n    length_of_iron_bar2 = 37\n    length_of_welded_part = 3\n\n    total_length = (length_of_iron_bar1 + length_of_iron_bar2) - length_of_welded_part\n    return total_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    import math\n\n    # The period T of a pendulum is given by the formula T = 2 * pi * sqrt(L/g)\n    # where L is the length of the pendulum and g is the gravitational acceleration.\n\n    # Let's assume that the length L of the pendulum is the same on Earth and the Moon.\n\n    # The period on Earth Te is given.\n    Te = 1  # in seconds\n    # The gravitational acceleration on Earth ge is approximately 9.81 m/s^2.\n    ge = 9.81  # in m/s^2\n\n    # Calculate the length of the pendulum based on its period on Earth.\n    Le = (Te / (2 * math.pi))**2 * ge\n\n    # The gravitational acceleration on the Moon gm is one-sixth of that on Earth.\n    gm = ge / 6  # in m/s^2\n\n    # Calculate the period on the Moon Tm using the length Le and the gravitational acceleration gm.\n    Tm = 2 * math.pi * math.sqrt(Le / gm)\n\n    return Tm\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 4  # Justin scores 24 more points, each correct answer difference is 6 points\n        william_points = william_correct * 6 - (10 - william_correct) * 2\n        justin_points = justin_correct * 6 - (10 - justin_correct) * 2\n        if william_points + justin_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1 Mar 2023\", \"%d %b %Y\")\n    end_date = datetime.strptime(\"15 Apr 2023\", \"%d %b %Y\")\n    trip_duration = end_date - start_date\n    \n    return trip_duration.days + 1  # Include both start and end dates\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Assume n is the number of layers of tiles\n    n = 1\n    while True:\n        # The number of tiles in a layer follows the pattern (2n-1)^2\n        layer_square = (2 * n - 1) ** 2\n        if layer_square >= 400:\n            break\n        n += 1\n    # When the while loop ends, it either gives the exact layer, or we need to subtract one\n    # We need to check if our layer contains more than 400 tiles. If so, go one inner layer.\n    if layer_square > 400:\n        n -= 1\n    \n    # Calculate the total number of red and green tiles\n    red_tiles = green_tiles = 0\n    for i in range(1, n+1):\n        # Calculate the number of tiles for each layer's color\n        if i % 2 != 0:  # Red tiles on odd layers\n            red_tiles += (2 * i - 1) ** 2\n        else:  # Green tiles on even layers\n            green_tiles += (2 * i - 1) ** 2\n    \n    # Calculate how many more tiles there are of the dominant color\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Consider that the problem is of the kind where digits 0-9 are to be placed\n    # vertically such that they sum to 100, and assume that A represents one such\n    # digit in the vertical puzzle\n    # Since the sum of all digits 0-9 is 45, and assuming a straight vertical addition with no carries\n    # we cannot reach a sum of 100 without some carries. Thus, a possible solution to reach\n    # the sum of 100 requires reusing some digits\n    # Here we can just assume that A+A+A = 100, because we cannot solve for A without more information.\n    A = 100 // 3\n    return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    a_work_rate = 1 / 15\n    # B's work rate per day\n    b_work_rate = 1 / 10\n    # Total work done by A and B together in 3 days\n    work_done_in_3_days = 3 * (a_work_rate + b_work_rate)\n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_in_3_days\n    # Days required for B to finish the remaining job\n    days_for_b = remaining_work / b_work_rate\n    return days_for_b\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people = 100\n    side = int(people**0.5) # Since they are in a square array, the side length is the square root of 100\n    outer_layer = 4 * side - 4 # Each side contributes 'side' number of people, but we must not count the corners twice.\n    return outer_layer\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Calculating the common difference\n    term = first_term\n\n    count = 0\n    while term > 0:  # Continue until the term is negative\n        count += 1\n        term += difference  # Move to the next term\n\n    return count\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 4/7  # 1 - 3/7\n    remaining_after_mum = 7/8  # 1 - 1/8\n    remaining_fraction = remaining_after_sister * remaining_after_mum\n    initial_amount = 280 / remaining_fraction\n    return initial_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    total_balls = 34\n    red_ratio = 1\n    white_ratio = 2\n    white_black_ratio = 3/4\n\n    white = (white_ratio / (red_ratio + white_ratio + white_ratio * white_black_ratio)) * total_balls\n    red = (red_ratio / white_ratio) * white\n\n    return int(red)\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    apples = 80\n    min_apples = 3\n\n    # Since at least one student gets at least 3 apples,\n    # if every student got exactly 2 apples, we could have at most 80 // 2 students\n    max_students_with_two_apples = apples // 2\n\n    # But since at least one has to get 3 or more, we subtract one\n    # from the number of students that could have 2 so that there\n    # is at least one student who can receive 3 or more apples.\n    class_size = max_students_with_two_apples - 1\n\n    return class_size\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The winning strategy is to always leave the opponent with two piles of equal numbers.\n    # Since the nim-sum (binary exclusive OR of the pile sizes) is non-zero, there exists a move\n    # to leave the opponent with a nim-sum of zero (two piles of equal size).\n    # Here, since pile A has more cards than pile B, Tom's winning strategy is to make his first move\n    # from pile A, reducing its size to match pile B.\n\n    pile_a = 88\n    pile_b = 52\n\n    # Calculate the number of cards Tom needs to take from pile A to leave two piles of equal size\n    cards_to_take = pile_a - pile_b\n\n    # After taking these cards, Tom leaves the situation with two equal piles and nim-sum = 0\n    # From this position, no matter how Jane plays, Tom can always mimic her moves on the opposite pile,\n    # eventually leading him to take the last card and win.\n\n    return cards_to_take\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    number_of_people = 8\n\n    amount_per_person = total_amount / number_of_people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since 10! and onwards contain the factor of 10 (which is 2*5),\n    # the last digit of 10! and any higher factorials would be 0.\n    # Consequently, the last digit of 2014! will also be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for cheesecake and logcake prices\n    cheesecake_price, logcake_price = symbols('cheesecake_price logcake_price')\n    \n    # Given equations\n    eq1 = Eq(6*cheesecake_price + 7*logcake_price, 1426)          # 6 cheesecakes and 7 logcakes cost $1426\n    eq2 = Eq(4*cheesecake_price, 3*logcake_price)                 # 4 cheesecakes cost thrice as much as a logcake\n\n    # Solve the system of equations to find the price of each item\n    solutions = solve((eq1, eq2), (cheesecake_price, logcake_price))\n    \n    # Calculate the total cost for 10 cheesecakes and 10 logcakes\n    total_cost = 10*solutions[cheesecake_price] + 10*solutions[logcake_price]\n    \n    return total_cost\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    total_sum = sum(range(1, 1002, 2)) - sum(range(2, 1001, 2))\n    return total_sum\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5\n    hole_area = 1 * 1\n    effective_base_area = base_area - hole_area\n    height = 480 / effective_base_area\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = 0\n    for i in range(1, 11):\n        total += i * (2 * i - 1)\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    # Cost of a pencil\n    pencil_cost = 5\n    # Cost of a pen\n    pen_cost = 15\n\n    # Number of pencils equal in value to one pen\n    pencils_per_pen = pen_cost / pencil_cost\n\n    return int(pencils_per_pen)\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n\n    initial_ratio = Eq(yellow / green, 3 / 2)\n    final_ratio = Eq((green + 20) / (yellow + 5), 3 / 2)\n\n    solutions = solve((initial_ratio, final_ratio), (yellow, green))\n\n    initial_total = solutions[yellow] + solutions[green]\n\n    return initial_total\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if 0 < x3 < 13 and x1 != x3 and x2 != x3 and x1 != x2:\n                count += 1\n    ans = count // 6  # To account for permutations of the 3 numbers\n    return ans\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2\n    marbles_left = 16\n    \n    total_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n    return total_marbles\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * n - 1) for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Count two-digit palindromic numbers\n    for i in range(1, 10):\n        count += 1  # Two-digit numbers like 11, 22, ..., 99\n        \n    # Count three-digit palindromic numbers\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # Three-digit numbers like 101, 111, ..., 191, 202, ..., 999\n    \n    return count\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meet_time = 4\n\n    total_distance = (amy_speed + christen_speed) * meet_time\n    christen_travel_time_to_amy_start = total_distance / christen_speed\n\n    return christen_travel_time_to_amy_start\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    for correct in range(51):\n        wrong = 50 - correct\n        score = 4 * correct - wrong\n        if score == 110:\n            return correct\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    count = 0\n\n    # Loop through all the permutations of the 6 digits taken 4 at a time\n    for perm in permutations(digits, 4):\n        # Since we are looking for even numbers, the last digit (units place) must be even\n        if perm[-1] in (0, 6, 8):\n            # check that the first digit is not 0, since we are looking for four-digit numbers\n            if perm[0] != 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    import math\n\n    lcm = 1\n    for i in range(2, 7):\n        lcm = (lcm * i) // math.gcd(lcm, i)\n    \n    return lcm\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2/7) * total_cakes\n    banana_cakes = (35/100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    ratio_sum = 4 + 5\n    lemon_cakes = (4 / ratio_sum) * remaining_cakes\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lily, judy = symbols('lily judy')\n    \n    # Lily sends x books to Judy, and they will both have the same amount of books\n    equation = Eq(lily - judy, 2 * (judy - (lily - judy)))\n    \n    # solve for the difference which is the amount of books Lily has more than Judy\n    difference = solve(equation)\n    \n    return difference[0]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are 2 people to pass to initially.\n    first_pass_options = 2\n    \n    # After the first pass, the ball can only be passed to the remaining person.\n    second_pass_options = 1\n    \n    # The total number of different passing ways is the product of the options.\n    total_pass_ways = first_pass_options * second_pass_options\n    \n    return total_pass_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    avg_first_four = 89\n    num_assignments = 4\n    score_fifth = 94\n\n    total_score_first_four = avg_first_four * num_assignments\n    total_score_all_five = total_score_first_four + score_fifth\n    avg_all_five = total_score_all_five / (num_assignments + 1)\n\n    return avg_all_five\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # There are 3 cases to consider for a 3-digit number with exactly 2 different digits.\n    # Case 1: The repeating digit is in the hundreds place. (e.g., 11X, X cannot be 1, 10 choices for X)\n    # Case 2: The repeating digit is in the tens place. (e.g., X11, X cannot be 1, 9 choices for hundreds place)\n    # Case 3: The repeating digits are in the hundreds and tens places. (e.g., XX1, 9 choices for X, 8 choices for 1)\n    \n    # Case 1 and Case 2 gives us the same count because for Case 1 we have 10 choices for X, and in Case 2 we have 9 choices \n    # for the hundreds place, but we can also choose 0 which is not allowed in the other cases, therefore 10 choices in total.\n    \n    # For each of these cases, the non-repeating digit can be any digit except the one in the hundreds place.\n\n    # Total count for Case 1 and Case 2:\n    count_case_1_and_2 = 9 * 10 * 2  # We multiply by 2 to account for both cases\n    \n    # Total count for Case 3:\n    count_case_3 = 9 * 8  # 9 choices for the repeating digit (cannot be 0) and 8 for the non-repeating one\n    \n    total_count = count_case_1_and_2 + count_case_3\n    return total_count\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    total_wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * total_wibbles\n    remaining_arms = total_arms - total_wibble_arms\n\n    wobble_arms = 5\n    num_wobbles = remaining_arms // wobble_arms\n\n    return num_wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) // 9\n            if isprime(b) and 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the variables for each friend\n    chloe, david, emily = symbols('chloe david emily')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place can't be 0 in a 3-digit number\n        for tens in range(10):\n            for ones in range(10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15 / 100\n    total_amount = 420\n\n    result = percentage * total_amount\n\n    return result\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10    # km/h\n\n    relative_speed = maverick_speed - kelvin_speed  # Relative speed at which Maverick catches up to Kelvin\n    \n    distance_to_catch_up = 10  # km\n\n    time_to_catch_up = distance_to_catch_up / relative_speed   # Time in hours Maverick takes to catch up to Kelvin\n    time_to_catch_up_minutes = time_to_catch_up * 60           # Convert hours to minutes\n\n    # Maverick's estimate is 24 minutes, we compare it to the calculated time\n    if time_to_catch_up_minutes > 24:\n        ans = time_to_catch_up_minutes\n    else:\n        ans = 24  # If Maverick's estimate was correct or overestimated\n\n    return ans\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # The custom operation can be transformed into a pattern.\n    # Given the nature of the operation, we can see that \"a # b\"\n    # is equal to \"a + b - (a * b) / 910\". If we generalize this operation\n    # and apply it to multiple terms, we see that each application reduces\n    # the total by a factor dependent on 910, thus it can be iteratively \n    # applied.\n\n    # Let's define a helper function to perform the custom operation.\n    def custom_op(a, b):\n        return a + b - ((a * b) / 910)\n\n    # Start with the first term in the sequence. \n    ans = 1\n\n    # Apply the custom operation sequentially from 2 up to 2016.\n    for i in range(2, 2017):\n        ans = custom_op(ans, i)\n\n    # The result does not need to be an integer.\n    return ans\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_boy_and_girl = boys * girls\n    return ways_to_pick_boy_and_girl\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    score_for_correct = 5\n    score_for_wrong = -2\n    \n    for correct in range(total_questions + 1):  # possible correct answers from 0 to 6\n        wrong = total_questions - correct   # remaining are wrong\n        score = correct * score_for_correct + wrong * score_for_wrong\n        if score == 23:  # the score matches Valerie's score\n            return correct  # return the number of correct answers\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since each kid gets at least one eraser, we give one to each first\n    remaining_erasers = 6 - 3\n\n    # Now we distribute the remaining 3 erasers to 3 kids\n    # This is equivalent to the problem of placing 3 indistinguishable items into 3 different bins\n    # The number of ways can be computed using the \"stars and bars\" method\n\n    # \"n\" is the number of items to distribute and \"k\" is the number of bins\n    n = remaining_erasers\n    k = 3\n\n    # The formula for the stars and bars problem is C(n+k-1, k-1) where C is the combination function\n    from math import comb\n    ans = comb(n + k - 1, k - 1)\n\n    return ans\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total length of the road from one plum tree to the opposite end plum tree\n    total_length = (41 - 1) * 4  # 41 trees, so 40 intervals of 4m each\n    \n    # Since pine trees are planted every 5m, divide the total length by 5 and add 1 for the first tree\n    num_pine_trees = (total_length // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people_9_hours = 10\n    time_9_hours = 9\n    time_3_hours = 3\n\n    work_rate = people_9_hours / time_9_hours\n    people_3_hours = work_rate * time_3_hours\n\n    return int(people_3_hours)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Cost of the bag\n    cost_of_bag = 120\n    # Money spent on the bag is 2/5 of the remaining money after buying the book\n    # Let's denote the original amount of money as x\n    # Then, the remaining money after buying the book is 2/3 * x\n    # And 2/5 of the remaining money is spent on the bag, which equals to the cost of the bag\n    # Hence, (2/5) * (2/3) * x = cost_of_bag\n    # Solving for x gives us the original amount of money\n    x = cost_of_bag / (2/5) / (2/3)\n    return x\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y, o = symbols('y o')  # y = younger's current age, o = older's current age\n\n    # Let's assume y years ago, the older one was the same age as the younger one is now.\n    # o - y = y -> Equation 1 (When the older one was the younger's current age, the younger was 4)\n    equation1 = Eq(o - y, y)\n    # y + k = o -> Equation 2 (k years later, the younger one will be the same age as the older one's current age)\n    equation2 = Eq(y + (o - y), o + (o - y))\n    # o + k - y = 61 -> Equation 3 (k years later, the younger one will be 61 years old)\n    equation3 = Eq(o - y + (o - y), 61)\n\n    solutions = solve((equation1, equation2, equation3), (y, o))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1_petrol = 27\n    week2_petrol = 25\n    week3_petrol = 30\n\n    total_petrol = week1_petrol + week2_petrol + week3_petrol\n\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n    nancy_weight = candy_weight - weight_difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 0.60\n    watermelons_left = 48\n\n    watermelons_after_first_day = watermelons_left / remaining_after_second_day\n    total_watermelons = watermelons_after_first_day / remaining_after_first_day\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Using the formula S = 1/6 * n * (n + 1) * (2n + 1) for the sum of squares of first n natural numbers\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_squares_before_first_term = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    ans = sum_squares_n - sum_squares_before_first_term\n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):\n            for x3 in range(x2+1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')  # Define symbols for boys and girls\n\n    equation1 = Eq(boys - boys / 11, girls - 5)\n    equation2 = Eq(boys + girls, 152)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start = 1000\n    difference = -11\n    term = start\n    number_of_terms = 0\n    \n    while term >= 0:\n        term += difference\n        number_of_terms += 1\n    \n    first_negative = start + (number_of_terms * difference)\n    \n    return first_negative\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Desks behind Judy\n    desks_behind_judy = 7\n    \n    # Desks between Jessica and Judy (since they are adjacent, it is 1)\n    desks_between_jess_and_judy = 1\n    \n    # Total desks are the desks in front of Jessica, behind Judy, between them and their own desks.\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + desks_between_jess_and_judy + 2 # Jessica's and Judy's desks\n    \n    return total_desks\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(75/100 * x - 5, 2.5)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    known_number = 0.11\n    difference = midpoint - known_number\n    other_number = midpoint + difference\n\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    unit_rate = 7 / 12\n    toffees = unit_rate * chocolates\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factor for factor in range(1, num + 1) if num % factor == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    numbers = [21, 27, 19, -17, 22, 18]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                totals.add(coin1 + coin2 + coin3)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        # The equation is equivalent to ABC * 5 = CBA0\n        if A != 0 and 500 * A + 50 * B + 5 * C == 1000 * C + 10 * B + A:\n            return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mango_price_per_case = 56\n    mango_cases = 24\n    lychee_cases = 19\n\n    total_cost = 2826\n    total_mango_cost = mango_price_per_case * mango_cases\n\n    total_lychee_cost = total_cost - total_mango_cost\n    lychee_price_per_case = total_lychee_cost / lychee_cases\n\n    return lychee_price_per_case\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage_value = 65 / 100\n    decimal_value = 0.507\n    fraction_value = 1 / 4\n\n    ans = percentage_value + decimal_value + fraction_value\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    distinct_numbers = set()\n    \n    for perm in permutations(cards, 3):\n        if perm[0] != '0':  # The number can not start with 0\n            distinct_numbers.add(''.join(perm))\n    \n    return len(distinct_numbers)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Jogging time from 7:30 AM to 8:30 AM is 1 hour\n    jogging_speed = 5 # miles per hour\n    jogging_time = 1 # hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Walking time from 8:30 AM to 10:30 AM is 2 hours\n    walking_speed = 3 # miles per hour\n    walking_time = 2 # hours\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid Â£10, and y be the number who paid Â£15\n    # We then have two equations:\n    # x + y = 50 (total number of children)\n    # 10x + 15y = 555 (total amount paid)\n\n    # Use sympy to solve the equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(10*x + 15*y, 555)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be x\n    # Then the five consecutive numbers are x, x+1, x+2, x+3, x+4\n    # The sum of these five numbers is 5x + 10\n    # According to the problem, the sum is 100\n    # 5x + 10 = 100\n    # 5x = 90\n    # x = 18\n    # Therefore, the smallest number is 18\n    \n    return 18\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Considering the multiplication tiling puzzle, we need to find out the possible digits for P, Q, R.\n    # If P * 4 = R and P is a one-digit non-zero number, R must be either 4, 8 or 2 (with carry over from the previous step),\n    # and P must be 1, 2, or 6 respectively.\n\n    # Let's loop through the possible values for P and check the result for R.\n    for P in range(1, 10):\n        R = P * 4\n        # If R is a two-digit number, it means there's a carry from the previous multiplication.\n        if R >= 10:\n            # We discard this option since R must be a one-digit number.\n            continue\n\n        # Now, we can find Q.\n        Q = (P * 3 + R // 10) % 10\n\n        # Now for carrying to check if it's possible\n        if ((P * 3) + int(R >= 10)) != Q + 10 * (R // 10):\n            continue\n\n        return P + Q + R\n\n    # If no solution is found, return None\n    return None\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    trees = 21\n    intervals = trees - 1\n\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factors of 44000\n    factors = factorint(44000)\n\n    # We look for a value of q such that 44000/q is a cube.\n    # This means that the exponent of each of the prime factors of\n    # 44000/q should be a multiple of 3.\n    q = 1\n    for prime, exponent in factors.items():\n        if exponent % 3 != 0:\n            q *= prime ** (3 - exponent % 3)\n\n    return q\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # The worst case scenario occurs when we draw cards such that we get 2 of each number\n    # before getting the 3rd card of the same number, since we want to ensure 3 cards of the same number.\n    \n    # There are 13 different numbers, and to have 2 of each we have 2 * 13 = 26 cards.\n    \n    # After having 2 of each number without having 3 of the same number, the next card we draw\n    # will inevitably be the third card of some number (by the Pigeonhole Principle).\n    \n    # Hence, we need 26 cards (for 2 of each number) + 1 more card to guarantee a third card of the same number.\n    cards_to_draw = 26 + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    total_notebooks_andy = 149\n    shared_notebooks = 38\n\n    # Andy gives his sister 38 notebooks, which means they will have an equal number\n    # So we subtract 38 from Andy's total and add it to his sister's total\n    notebooks_andy_after = total_notebooks_andy - shared_notebooks\n    # Since they have the same number after sharing, this is also the number of notebooks his sister has after sharing\n    notebooks_sister_after = notebooks_andy_after\n    \n    # To find how many notebooks Andy's sister had at first, we subtract the shared notebooks from her total after sharing\n    notebooks_sister_before = notebooks_sister_after - shared_notebooks\n\n    # Return false if Joey's answer is not equal to the correct answer, else true\n    return False if notebooks_sister_before != 130 else True, notebooks_sister_before\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Define possible cards for each suit\n    possible_spades = {'A', 'J', 'K'}\n    possible_hearts = {'3', '5', 'K'}\n    possible_diamonds = {'2', '7', 'J'}\n    possible_clubs = {'A', '7'}\n\n    # Combine all possible cards with suits\n    all_possible_cards = {\n        'spades': possible_spades,\n        'hearts': possible_hearts,\n        'diamonds': possible_diamonds,\n        'clubs': possible_clubs\n    }\n\n    # Eddies says he does not know the card, which means the suit must be spades or hearts \n    # (suits with more than one possible card)\n    # Neither does Avril, means number cannot be unique, 'A', '2', '3', '5' are eliminated.\n\n    # Hence, Eddie's statement has removed 'A', '2', '3', '5' from our possibilities.\n    # We are left with J, K and 7.\n    # 'J' and 'K' are in two suits, and '7' is in two suits.\n    # Since Avril now knows for sure, it must be the number that appears in only one suit after Eddie's statement.\n    # That leaves us with 'J' in diamonds and '7' in clubs.\n    # Since we still have 'J' appearing twice, Avril knowing for sure must be '7' in clubs.\n\n    # Now Eddie also knows the card after Avril's statement, confirming that the card is indeed '7' of clubs.\n\n    # Final card is '7' of clubs.\n    card = ('7', 'clubs')\n\n    return card\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90  # distance between two buildings in meters\n    number_of_intervals = 9  # number of trees means number of intervals is one less\n    \n    # The number of gaps is one more than the number of trees\n    number_of_gaps = number_of_intervals + 1\n    \n    distance_between_each_tree = total_distance / number_of_gaps\n    \n    return distance_between_each_tree\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    sum_of_numbers = sum(numbers)\n    total_numbers = 5\n    mean_value = 5\n    \n    sum_required_for_mean = mean_value * total_numbers\n    fifth_number = sum_required_for_mean - sum_of_numbers\n    \n    return fifth_number\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    # Assume 200 has digits abc where a=2, b=0, c=0\n    count = 0\n\n    # All other values of a, fixing b and c\n    for a in range(10):\n        if a != 2:\n            number = a * 100 + 0 * 10 + 0\n            if isprime(number):\n                count += 1\n\n    # All other values of b, fixing a and c\n    for b in range(10):\n        if b != 0:\n            number = 2 * 100 + b * 10 + 0\n            if isprime(number):\n                count += 1\n\n    # All other values of c, fixing a and b\n    for c in range(10):\n        if c != 0:\n            number = 2 * 100 + 0 * 10 + c\n            if isprime(number):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n\n    # Emily is directly behind Danny, so the people in front of Emily\n    # are the people in front of Danny, plus Danny himself\n    total_people_in_front_of_danny = people_in_front_of_emily + 1\n\n    # The total number of people is the people in front of Danny,\n    # plus the people behind Danny (including himself)\n    total_people = total_people_in_front_of_danny + danny_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, total_pages = symbols('days total_pages')\n\n    # Vanessa reads 30 pages a day and finishes 2 days after the deadline\n    equation1 = Eq(30 * (days + 2), total_pages)\n    # Vanessa reads 39 pages a day and finishes 4 days before the deadline\n    equation2 = Eq(39 * (days - 4), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (days, total_pages))\n\n    return solutions[days], solutions[total_pages]\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n\n    cost_per_cup = total_cost / num_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count_5 = 0\n    page = 0\n    while count_5 < 30:\n        page += 1\n        count_5 += str(page).count('5')\n    return page\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2*(2*x - 3), 5 - (x - 2))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10+9+8+7+6)-(5+4+3+2+1)\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # It takes 12 minutes to cut a piece of wood into 4 sections.\n    # That means it takes 3 cuts, because after each cut, the number of sections are as follows: 1 cut -> 2 sections, 2 cuts -> 3 sections, 3 cuts -> 4 sections.\n    # So, 12 minutes per 3 cuts.\n    \n    # To cut the same piece of wood 5 times, we will have 6 sections.\n    # So, 5 cuts are needed.\n    \n    # Since the time is proportional to the number of cuts, we can find the time for 5 cuts:\n    time_per_cut = 12 / 3  # The time it takes to make one cut.\n    total_time_for_5_cuts = time_per_cut * 5  # The total time to make 5 cuts.\n    \n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms_to_paint = 4\n    workers = 2\n\n    days_to_paint = total_rooms_to_paint / (rooms_per_day_per_worker * workers)\n\n    return days_to_paint\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of an apple and an orange\n    apple, orange = symbols('apple orange')\n    \n    # Create equations based on the given information\n    eq1 = Eq(apple + 2 * orange, 48)\n    eq2 = Eq(apple + orange, 31)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (apple, orange))\n    \n    # Return the cost of one orange\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, price_per_ball = symbols('pocket_money price_per_ball')\n    \n    # Week 1: 4 * price_per_ball + 27p = pocket_money\n    equation1 = Eq(4 * price_per_ball + 27, pocket_money)\n    \n    # Week 2: 2 * price_per_ball + Â£1.51 = pocket_money\n    # Convert Â£1.51 to pence\n    equation2 = Eq(2 * price_per_ball + 151, pocket_money)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    total_pages = 30\n    time_in_hours = 3 / 4\n    time_in_seconds = time_in_hours * 60 * 60\n    seconds_per_page = time_in_seconds / total_pages\n\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3/8)\n    remaining = total_badges - given_away\n    \n    return remaining\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    \n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    return sum(range(11, 32, 2))\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Elias had 5 times as many stickers as Aileen\n    equation1 = Eq(elias, 5 * aileen)\n    \n    # After Elias gave away 88 stickers and Aileen lost 8 stickers,\n    # they had the same number of stickers\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Calculate the number of stickers each of them had in the end\n    elias_stickers_end = solutions[elias] - 88\n    aileen_stickers_end = solutions[aileen] - 8\n\n    return elias_stickers_end, aileen_stickers_end\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    numbers = [2, 3, 4, 5, 6, 7, 8]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert from base 8 to base 10, perform addition and convert back to base 8\n    sum_base10 = int('25', 8) + int('37', 8)\n    ans = oct(sum_base10)[2:]\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    butter_per_cookie = 20 / 25  # Calculate the amount of butter needed for one cookie\n    cookies_with_48_grams = 48 / butter_per_cookie  # Calculate how many cookies can be made with 48 grams of butter\n    return int(cookies_with_48_grams)  # Return the result as an integer\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let's denote:\n    # t - pieces of cheese Thomas eats\n    # g - pieces of cheese Gerald eats\n\n    # From problem statement we have 2 equations:\n    # t + g = 104 (Total pieces of cheese eaten by Thomas and Gerald)\n    # t/g = 5/3  (Thomas is greedy and eats 5 pieces for every 3 pieces Gerald eats)\n\n    # We can solve these equations for t and g.\n\n    # Multiply both sides of the second equation by g to get values in terms of t\n    # (t/g) * g = (5/3) * g\n    # t = (5/3) * g\n\n    # Substitute t in the first equation with the expression found from the second equation\n    # t + g = 104 becomes (5/3) * g + g = 104\n\n    # Combine terms to solve for g\n    # (5/3 + 3/3) * g = 104\n    # (8/3) * g = 104\n    # g = 104 * (3/8)\n\n    gerald_pieces = 104 * (3/8)\n\n    # Now substitute g back into the equation to solve for t\n    # t = (5/3) * g\n\n    thomas_pieces = (5/3) * gerald_pieces\n\n    # Find the difference\n    difference = thomas_pieces - gerald_pieces\n\n    return int(difference)\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let the number of boys be represented by 'b', girls 'g', and adults 'a'\n    b = Symbol('b')\n    g = Symbol('g')\n    a = Symbol('a')\n\n    # Given proportions\n    eq1 = g - (7/2) * b   # girls are 7/2 times the boys\n    eq2 = a - (3/2) * (g + b)  # adults are 2/3 times children (which is boys + girls)\n    eq3 = a - b - 1228   # there are 1228 more adults than boys\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (b, g, a))\n\n    # Total number of people\n    total_people = solutions[b] + solutions[g] + solutions[a]\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let the number of rackets originally purchased be x\n    # Proceeds = selling price * (number of rackets sold)\n    # Cost = cost price * (number of rackets originally purchased)\n    # Profit = Proceeds - Cost\n    # According to the problem:\n    # Proceeds = Cost + Profit\n    # selling price * (x - remaining_rackets) = cost price * x + Profit\n    # Solve for x:\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (selling_price_per_racket * (x - remaining_rackets)) - (cost_price_per_racket * x) - profit\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the amount of money both Chloe and Gordon had at first.\n    # Let d be the number of days after which Chloe had $157 left and Gordon had $82 left.\n\n    # Chloe's remaining amount after d days: x - 20d\n    # Gordon's remaining amount after d days: x - 25d\n\n    # We have two equations:\n    # x - 20d = 157  (1)\n    # x - 25d = 82   (2)\n\n    # Subtract the second equation from the first to find d:\n    # (x - 20d) - (x - 25d) = 157 - 82\n    # 5d = 157 - 82\n    # 5d = 75\n    # d = 75 / 5\n    d = 75 // 5\n\n    # Use the value of d in either equation (1) or (2) to find x:\n    # Using equation (2):\n    # x - 25d = 82\n    # x - 25*(75/5) = 82\n    # x - 25*15 = 82\n    # x = 82 + 25*15\n    x = 82 + 25 * d\n\n    return x\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n + (n * (n - 1) // 2) + (n * (n - 1) * (n - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n\n    # Formulate the equation\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # x2 > x1 to ensure different numbers\n            for x3 in range(x2 + 1, 14):  # x3 > x2 to ensure different numbers\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    \n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_per_melon = 15 / total_melons\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    total_sales = remaining_melons * selling_price_per_melon\n    total_cost = total_melons * cost_per_melon\n    profit = total_sales - total_cost\n    return profit\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    total_length_cm = 10\n    cross_interval_cm = 1\n    crosses = total_length_cm // cross_interval_cm + 1\n    \n    return crosses\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    for i in range(1, min(150, 100) + 1):\n        if 150 % i == 17 and 100 % i == 5:\n            return 150 // i\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_balloons_in_pattern = 2\n    total_balloons = 75\n\n    full_patterns, remaining_balloons = divmod(total_balloons, pattern_length)\n    green_balloons = full_patterns * green_balloons_in_pattern\n\n    if remaining_balloons >= 3:\n        green_balloons += 1\n    if remaining_balloons == 6:\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1st_and_6th = 60\n    number_of_intervals_1st_to_6th = 6 - 1\n    interval_distance = distance_between_1st_and_6th / number_of_intervals_1st_to_6th\n\n    number_of_intervals_1st_to_9th = 9 - 1\n    distance_between_1st_and_9th = interval_distance * number_of_intervals_1st_to_9th\n\n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Sandra had more than Jessica initially\n    x = symbols('x')\n\n    # After giving Jessica 13 marbles, Sandra has x-13 marbles, and Jessica has x+13 marbles\n    # Sandra now has 6 fewer marbles than Jessica: (x - 13) + 6 = (x + 13)\n    equation = Eq(x - 13 + 6, x + 13)\n\n    # Solve for x\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Each of the seven friends received 26 pieces of candy\n    shared_candy = 7 * 26\n\n    # Kate was left with 22 pieces after sharing\n    kate_left_candy = 22\n\n    # Total candy after eating 1/3 at home\n    total_after_eating = shared_candy + kate_left_candy\n\n    # Calculate the initial total before eating 1/3\n    initial_total_candy = total_after_eating * (3/2)\n\n    return int(initial_total_candy)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n    top_floor = 25\n\n    # Assuming both started at the same time and their speeds are constant\n    # The ratio of their speeds is the same as the ratio of the floors they have reached\n    speed_ratio = bob_current_floor / andy_current_floor\n\n    # When Andy reaches the top floor, we can find which floor Bob will be on by multiplying the top floor by the speed ratio\n    bob_top_floor = top_floor * speed_ratio\n\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initial digit counts for 1 and 2\n    digit_count_1 = 0\n    digit_count_2 = 0\n    # Start with the first number\n    n = 0\n    \n    # Loop until we get the digit counts we want for 1s and 2s\n    while digit_count_1 != 15 or digit_count_2 != 14:\n        n += 1\n        num_str = str(n)\n        \n        # Count 1s and 2s in the current number\n        digit_count_1 += num_str.count('1')\n        digit_count_2 += num_str.count('2')\n    \n    return n\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    return 8 * (3/2)\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let the initial sum of jewels' values in P be x\n    # After transferring the Â£5000 jewel, the sum in P becomes x - 5000\n    # Initial average value of jewels in P is x / 3\n    # Average value increases by Â£1000, so new average value is (x / 3) + 1000\n    # Thus, the sum of jewels' values in P becomes 3 * ((x / 3) + 1000)\n    \n    # x - 5000 = 3 * ((x / 3) + 1000) - 5000\n    # x - 5000 = x + 3000 - 5000\n    # -5000 = 3000 - 5000\n    # x cancels out, and we are left with -5000 = -2000, which is not true for any x\n    # This implies that the initial assumption is incorrect\n    \n    # Let the initial total value of jewels in P be 'p' and in Q be 'q'.\n    # After the transaction: Q has one more jewel and P has one less\n    # The average value increases by Â£1000 in both boxes, which means:\n    # New Average of P = (p - 5000) / 2 = (Old Average of P) + 1000. [1]\n    # New Average of Q = (q + 5000) / 4 = (Old Average of Q) + 1000. [2]\n\n    # Let the initial average of P be 'a' and Q be 'b'\n    # From [1]: (p - 5000) / 2 = a + 1000 -> p - 5000 = 2a + 2000 -> p - 2a = 7000 [3]\n    # From [2]: (q + 5000) / 4 = b + 1000 -> q + 5000 = 4b + 4000 -> q - 4b = -1000 [4]\n    \n    # Since P and Q initially have the same number of jewels, their average values are equal: a = b [5]\n    # Using [3] and [5], we substitute b with a in [4]: q - 4a = -1000 [6]\n    \n    # Now add equations [3] and [6]: p + q - 2a - 4a = 7000 - 1000\n    # Simplify: p + q - 6a = 6000 -> Total value of all jewels (p + q) = 6a + 6000\n\n    # The total value of all 6 jewels before the transaction is the sum of the average values times 3\n    # We can write it as 6a (since a = b); after adding Â£6000, the total is 6a + 6000\n    \n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the unknown initial averages of boxes P and Q\n    a = symbols('a')\n    \n    # Set up the equations based on [3] and [6] after substituting b with a\n    eq1 = Eq(7000, 2 * a)\n    eq2 = Eq(-1000, 4 * a)\n    \n    # Solve the system of equations to find the value of a\n    solution = solve((eq1, eq2), (a))\n    a_value = solution[a]\n    \n    # Compute the total value of all 6 jewels\n    total_value = 6 * a_value + 6000\n    \n    return total_value\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (120 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    words, speed = symbols('words speed')\n    \n    # Original time is 3 minutes\n    # New speed is speed + 30 words per minute\n    # New time is 3 - 1 = 2 minutes\n    equation1 = Eq(words, speed * 3)          # original speed\n    equation2 = Eq(words, (speed + 30) * 2)   # increased speed\n    \n    solutions = solve((equation1, equation2), (words, speed))\n    \n    return solutions[words]\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    day_climb = 3\n    night_slip = 2\n    well_depth = 8\n    total_climbed = 0\n    day = 0\n    \n    while total_climbed < well_depth:\n        day += 1\n        total_climbed += day_climb\n        if total_climbed >= well_depth:\n            break\n        total_climbed -= night_slip\n    \n    return day\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    # Initialize all lights as off (0 for off, 1 for on)\n    lights = [0] * 10\n\n    # Ms. Lily presses switches of every other light starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = 1  # She turns on the lights\n\n    # Sam presses switches of all even-numbered lights 7 times\n    for i in range(1, 10, 2):\n        lights[i] = (lights[i] + 7) % 2  # Toggle the light 7 times\n\n    # Count the number of lights that are on\n    ans = sum(lights)\n\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a, 2/3 * b)                     # A has 2/3 of B's water\n    equation2 = Eq(a + 4, 7/8 * (b - 4))           # After transferring 4 liters, A has 7/8 of B's water\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    total_water = solutions[a] + solutions[b]\n\n    return total_water\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_seamstress_per_day = 2\n    num_seamstresses = 2\n    num_days = 9\n    \n    total_dresses = dresses_per_seamstress_per_day * num_seamstresses * num_days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of a table and chair\n    table, chair = symbols('table chair')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(table, 2 * chair)  # A table costs two times as much as a chair\n    equation2 = Eq(2 * table + 3 * chair, 280)  # Two tables and three chairs cost $280\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    # Extract the cost of one table from the solutions\n    table_cost = solutions[table]\n\n    return table_cost\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    time_spent = 2\n    total_parts_needed = 100\n\n    rate = parts_made / time_spent\n    remaining_parts = total_parts_needed - parts_made\n    time_needed = remaining_parts / rate\n\n    return time_needed\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # We need to consider the worst-case scenario where we draw the same color repetitively\n    # After we've drawn all 5 balls of one color, we still don't have three different colored balls\n    # So we need to draw at least one more ball to get two different colors (5+1 = 6 balls)\n    \n    # Following the same logic, after drawing all balls of a second color, we need just one more\n    # ball from the remaining color to ensure we have three different colors (6+5 = 11 balls)\n    \n    # The next ball we draw will be the third different color for sure (11+1 = 12 balls)\n    \n    return 12\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n    equation1 = Eq(grade5, 4 + 2 * grade4)\n    equation2 = Eq(grade6, 8 + 3 * grade4)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # There are 5 colors and the students take 2 balls out, so there are\n    # comb(5, 2) different combinations of 2 balls.\n    combinations = comb(5, 2)\n    \n    # By the pigeonhole principle, to guarantee that at least 2 people have the same\n    # combination, there should be one more than the number of combinations.\n    people = combinations + 1\n    \n    return people\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # initial volume of the syrup in ml\n    initial_sugar_percentage = 0.06  # initial sugar content in decimal\n    desired_sugar_percentage = 0.10  # desired sugar content in decimal\n\n    # Calculate the initial amount of sugar\n    initial_sugar_content = initial_volume * initial_sugar_percentage\n\n    # Let the amount of sugar to be added be 'x'\n    # After adding 'x' grams of sugar, the total volume remains 900 ml (since sugar dissolves)\n    # The new sugar percentage would be (initial_sugar_content + x) / 900\n    # Set the equation to the desired sugar percentage and solve for 'x'\n    x = symbols('x')\n    equation = Eq((initial_sugar_content + x) / initial_volume, desired_sugar_percentage)\n\n    # Solve the equation for x\n    sugar_to_add = solve(equation, x)[0]\n\n    return sugar_to_add\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    n = 3\n    common_difference = (third_term - first_term) / (n - 1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let the number of cards Hisham has be x.\n    # Then Melissa has 2x cards.\n    # The equation for total cards is x + 2x = 876\n    # Solve for x to find out how many cards Hisham has.\n    x = total_cards // 3\n    # Melissa has 2x cards.\n    melissa_cards = 2 * x\n    # When Melissa gives Hisham (melissa_cards - x) / 2 cards,\n    # they will both have the same number of cards.\n    cards_to_give = (melissa_cards - x) // 2\n    return cards_to_give\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    price_per_cake = 46\n    \n    total_cost = num_cakes * price_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # When considering a product that is divisible by 4, we must have at least one even number.\n    # The worst case scenario for drawing numbers at random to ensure there are two numbers\n    # whose product is divisible by 4 is drawing all the odd numbers first and then one even number.\n    # Since there are 16 odd numbers between 10 and 41, we need to draw at least one more to guarantee\n    # an even number.\n\n    # Number of odd numbers between 10 and 41 (inclusive)\n    num_odds = len([n for n in range(10, 42) if n % 2 != 0])\n\n    # Drawing at least one even number after all odd numbers\n    at_least_one_even = 1\n\n    # Total numbers drawn\n    total_draws = num_odds + at_least_one_even\n\n    return total_draws\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    # find the smallest two-digit prime number\n    from sympy import primerange\n    \n    smallest_two_digit_prime = list(primerange(10, 100))[0]\n    \n    # find the largest two-digit square number\n    largest_two_digit_square = max(i**2 for i in range(1, 10) if (i**2) < 100)\n\n    # calculate the product of the two numbers\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd_rate = 0.96\n    coffee_cost_euros = 4.8\n\n    coffee_cost_usd = coffee_cost_euros / euro_to_usd_rate\n\n    return coffee_cost_usd\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian is 14, his father is 41, the age difference is 27 years.\n    age_difference = 27\n\n    # Next time Brian's age is the reverse of his father's age, Brian has to be at least 15.\n    # We start checking from age 15 onwards.\n    for brian_age in range(15, 100):  # It is safe to assume Brian won't be older than 99.\n        # Calculate father's age by adding the age difference.\n        father_age = brian_age + age_difference\n        # Check if father's age in reverse is Brian's age.\n        if str(father_age)[::-1] == str(brian_age):\n            return brian_age  # Return Brian's age when the condition is met.\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = None\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + b / c + (d / e) * f - (g + h / j)\n        if N % 1 == 0:  # Check if N is a whole number\n            if max_N is None or N > max_N:\n                max_N = N\n    return int(max_N)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors_total = 12 * 10\n    overall_total = 20 * 14\n    seniors_total = overall_total - juniors_total\n    seniors_average = seniors_total / 8\n    return seniors_average\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age = 10 years\n    combined_age_4_years_ago = 10\n    \n    # Each year each dog ages by 1 year, so in the span of 4 years, each dog ages by 4 years\n    # Thus, a total of 8 years is added to the combined age for both dogs (4 years per dog)\n    combined_current_age = combined_age_4_years_ago + 8\n    \n    # In 2 years, each dog will age 2 more years, so a total of 4 years is added to the combined age (2 years per dog)\n    combined_age_in_2_years = combined_current_age + 4\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    total_books_final = 3900 + 510\n    ratio_chinese, ratio_malay, ratio_english = 4, 3, 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    chinese_books_initial = (ratio_chinese / total_ratio) * total_books_initial\n    malay_books_initial = (ratio_malay / total_ratio) * total_books_initial\n    english_books_initial = (ratio_english / total_ratio) * total_books_initial\n\n    chinese_books_final = chinese_books_initial * 1.20\n    malay_books_final = malay_books_initial * 1.10\n\n    english_books_final = total_books_final - chinese_books_final - malay_books_final\n    increase_english_books = english_books_final - english_books_initial\n    percentage_increase_english = (increase_english_books / english_books_initial) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** -2022)\n    denominator = 92 * (10 ** -2023)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # To ensure at least one container has 2 apples, the minimum number of apples\n    # needed is containers + 1 (by the Pigeonhole Principle).\n    min_apples = containers + 1\n    return min_apples\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    correct_points = 4\n    incorrect_points = -2\n    rex_score = 66\n\n    # Rex answered all but one of the questions\n    attempted_questions = total_questions - not_attempted\n\n    # Let x be the number of correct answers\n    # The number of incorrect answers would then be (attempted_questions - x)\n    # We can set up the equation:\n    # (correct_points * x) + (incorrect_points * (attempted_questions - x)) = rex_score\n\n    # Using algebra, we can solve for x:\n    # 4x - 2(attempted_questions - x) = rex_score\n    # 4x - 2(attempted_questions) + 2x = rex_score\n    # 6x - 2(attempted_questions) = rex_score\n    # 6x = rex_score + 2(attempted_questions)\n    # x = (rex_score + 2(attempted_questions)) / 6\n\n    x = (rex_score + 2 * attempted_questions) / 6\n    return int(x)\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    cookies_needed = 300\n    butter_needed = butter_used * cookies_needed / cookies_made\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of correct answers\n    # Total questions = 90\n    # Mochi answered 60% of the questions, so he answered 0.6 * 90 questions\n    total_answered = 0.6 * 90\n\n    # Let y be the number of wrong answers\n    # Since every unanswered question gives 1 mark, the remainder of the questions contribute to the score as well\n    unanswered = 90 - total_answered\n\n    # Correct answers give 5 marks, incorrect answers subtract 2 marks\n    x, y = symbols('x y')\n    equation1 = Eq(5*x - 2*y + unanswered, 264)  # Score equation\n    equation2 = Eq(x + y, total_answered)  # Total answered questions equation\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for Dedra's and Timm's initial amounts\n    Dedra, Timm = symbols('Dedra Timm')\n\n    # Dedra had 4 times as much money as Timm at first\n    equation1 = Eq(Dedra, 4 * Timm)\n\n    # Both received $72 each\n    # Now, Dedra has twice as much money as Timm\n    equation2 = Eq(Dedra + 72, 2 * (Timm + 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Dedra, Timm))\n\n    # Returning Dedra's initial amount\n    return solutions[Dedra]\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) / 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jane and Jack's ages\n    jane, jack = symbols('jane jack')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    # Get Jane's age from the solution\n    return solutions[jane]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Initialize variables to keep track of the count of digits and the current number\n    digit_count = 0\n    current_number = 1\n    \n    # Loop until the count of digits reaches 1000\n    while digit_count < 1000:\n        # Convert the current number to a string to get its length (number of digits)\n        current_number_str = str(current_number)\n        digit_count += len(current_number_str)\n        # Increment the current number for the next iteration\n        current_number += 1\n    \n    # We overshot the count, so we need to determine the digit that made the count reach 1000\n    overshoot = digit_count - 1000\n    \n    # The desired unit digit is the digit in the position 'overshoot' from the end of the current number string\n    unit_digit = int(current_number_str[-(overshoot + 1)])\n    \n    return unit_digit\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "from math import factorial\n\ndef solution():\n    n_pupils = 18\n    r_seats = 3\n    permutations = factorial(n_pupils) // factorial(n_pupils - r_seats)\n    return permutations\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Given data\n    A = 62  # Number of fruits containing vitamin A\n    C = 90  # Number of fruits containing vitamin C\n    E = 68  # Number of fruits containing vitamin E\n    AC = 48  # Number of fruits containing vitamins A and C\n    AE = 36  # Number of fruits containing vitamins A and E\n    CE = 50  # Number of fruits containing vitamins C and E\n    ACE = 25  # Number of fruits containing all three vitamins A, C, and E\n\n    # Using the Inclusion-Exclusion Principle to find the total\n    total_fruits = A + C + E - AC - AE - CE + ACE\n\n    return total_fruits\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack = 4\n    jason = symbols('jason')\n    \n    # Bruce and Willie are of the same age as Jason, so we have three Jasons in total\n    bruce = jason\n    willie = jason\n    \n    # Total age equation\n    total_age_eq = Eq(jack + jason + bruce + willie, 19)\n    \n    solutions = solve(total_age_eq, jason)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    erasers_left_5 = 3\n    erasers_short_6 = 2\n    \n    friend_count = 1\n    while True:\n        total_erasers_5 = friend_count * 5 + erasers_left_5\n        total_erasers_6 = friend_count * 6 - erasers_short_6\n        \n        if total_erasers_5 == total_erasers_6:\n            return total_erasers_5\n        \n        friend_count += 1\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    \n    return rachel\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jake and John's current ages\n    jake, john = symbols('jake john')\n\n    # Jake is older, hence jake > john\n\n    # Equations based on the problem statement\n    equation1 = Eq(jake + john, 44)                       # The sum of their ages is 44\n    equation2 = Eq(jake + 14, 2 * (john + 14))            # In 14 years, Jake will be twice as old as John\n\n    # Solve the system of equations for Jake and John's current ages\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # John's age in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of the youngest child\n    x = symbols('x')\n    # The age difference between each child is 15 months\n    # The oldest child is 6 times the age of the youngest, which also equals the youngest plus 8*15 (since there are 8 age gaps of 15 months each)\n    equation = Eq(6 * x, x + 8 * 15)\n\n    # Solve the equation for x\n    youngest_age = solve(equation, x)[0]\n\n    return youngest_age\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    result = sum((n**2 + (n+1)**2) / (n * (n+1)) for n in range(1, 2008))\n    ans = round(result)\n    return ans\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Loop through all four digit numbers starting with 1000 (smallest 4-digit number)\n    for number in range(1000, 10000):\n        # separate the digits of the number\n        thousands = number // 1000\n        hundreds = (number % 1000) // 100\n        tens = (number % 100) // 10\n        ones = number % 10\n        # create the new number by moving the ones digit to the first position\n        new_number = ones * 1000 + thousands * 100 + hundreds * 10 + tens\n        # check if the difference between the new number and the original number is 5877\n        if new_number - number == 5877:\n            return number  # return the smallest original number that satisfies the condition\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from itertools import permutations\n\ndef solution():\n    expressions = [\n        \"({}+{})*({}+{}-{}+{})\",\n        \"({}+{}*({}+{}-{}+{}))\",\n        \"(({}+{}*{})+{}-{}+{})\",\n        \"({}+({}+{})*{}-{}+{})\",\n        \"{}+(({}+{})*{}-{}+{})\",\n        \"({}+{})*({}+({}-{}+{}))\",\n        \"{}+({}+{}*({}-{}+{}))\",\n        \"(({}+{})*{}+{}-{}+{})\",\n    ]\n\n    values = [15, 5, 5, 15, 6, 7]\n    smallest_result = float('inf')\n    best_expression = \"\"\n\n    for expr in expressions:\n        for perm in permutations(values):\n            current_expr = expr.format(*perm)\n            result = eval(current_expr)\n            if result < smallest_result:\n                smallest_result = result\n                best_expression = current_expr\n\n    return smallest_result, best_expression\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    result = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2 / 15)\n    return result\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has\n    # Then Cayden has x + 5 sweets\n    # After giving Jiaxiang 10 sweets, Cayden has (x + 5 - 10) sweets, which is (x - 5) sweets\n    # And Jiaxiang has (x + 10) sweets\n    # The difference in the number of sweets they have now is abs((x - 5) - (x + 10))\n    # Simplifying the above we get abs(-5 - 10) which is abs(-15) \n\n    difference_after_giving = abs(-15)\n    \n    return difference_after_giving\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    # Calculate the first multiple of 11 greater than 50\n    first_multiple = 50 - (50 % 11) + 11\n    if first_multiple < 50:\n        first_multiple += 11\n\n    # Calculate the last multiple of 11 less than 150\n    last_multiple = 150 - (150 % 11)\n\n    # Calculate the number of multiples of 11 between the first and last multiple\n    number_of_multiples = ((last_multiple - first_multiple) // 11) + 1\n    \n    return number_of_multiples\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # speed of the train\n\n    # The total distance for the end of the train to cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    pupils_without_mary = 5\n    average_without_mary = 72\n    total_without_mary = pupils_without_mary * average_without_mary\n\n    total_pupils = 6\n    average_with_mary = 75\n    total_with_mary = total_pupils * average_with_mary\n\n    mary_score = total_with_mary - total_without_mary\n    return mary_score\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes = distance / speed\n\n    return int(minutes)\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Total doughnuts to distribute is 11 and we subtract 1 from each student\n    # because each student should get at least 1 doughnut, now we distribute 7 \n    # doughnuts to 4 students, which is similar to placing 3 partitions in the 7\n    # unit places, which is choosing 3 positions out of 10 possible positions.\n\n    total_doughnuts = 11 - 4  # We subtract 4 because each student should get at least one\n    partitions = 4 - 1  # We need 3 partitions to split doughnuts into 4 parts\n    \n    # Calculate combinations C(10, 3) to place the partitions\n    return comb(total_doughnuts + partitions, partitions)\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # There are 4 red, 7 green, 6 blue and 2 orange marbles.\n    # To guarantee 4 different coloured marbles, we consider the worst-case scenario.\n\n    # Calculate the maximum marbles that could be drawn without getting all 4 colours:\n    max_without_all_colours = (7 - 1) + (6 - 1) + (4 - 1) # The largest piles without taking the last one that would make it 4 different coloured\n\n    # Add one more to guarantee the fourth colour is drawn.\n    total_draws = max_without_all_colours + 1\n\n    return total_draws\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # List of available coins as multiples of 5 pence\n    coins = [5, 10, 20, 50, 100, 200]\n\n    # Â£5 in pence, the total amount Angela had initially\n    total_amount = 500\n\n    # Since Angela received 5 different coins as change\n    # Loop through the combinations of 5 coins and calculate the sum\n    from itertools import combinations\n    for combo in combinations(coins, 5):\n        change_total = sum(combo)\n        if change_total < total_amount:\n            spent = total_amount - change_total\n            return spent  # Return the amount spent\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    honey_per_hive = 50 / 5\n    required_hives = 90 / honey_per_hive\n    additional_hives = required_hives - 5\n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of erasers Ali originally had and 'k' be what Kumar had.\n    a, k = symbols('a k')\n\n    # Original ratio is 7:5\n    equation1 = Eq(7 * k, 5 * a)\n\n    # After giving Kumar 10 erasers, the new ratio becomes 1:5\n    equation2 = Eq((a - 10) / (k + 10), 1/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, k))\n\n    # The total number of erasers they have altogether is sum of 'a' and 'k'\n    total_erasers = solutions[a] + solutions[k]\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of $10 notes and y represent the number of $2 notes.\n    x, y = symbols('x y')\n\n    # The total number of notes is 38.\n    equation1 = Eq(x + y, 38)\n\n    # After the spending, he is left with thrice as many $10 notes as $2 notes.\n    equation2 = Eq((1 - 0.80) * x, 3 * (1 - 0.75) * y)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total cost of the fan.\n    cost = 0.80 * 10 * solutions[x] + 0.75 * 2 * solutions[y]\n\n    return cost\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    # Final east-west displacement: 15km east - 9km west = 6km east\n    east_west_displacement = 15 - 9\n    \n    # Final north displacement: 3km + 5km = 8km north\n    north_displacement = 3 + 5\n    \n    # Use Pythagorean theorem to find shortest distance\n    shortest_distance = sqrt(east_west_displacement**2 + north_displacement**2)\n    \n    return shortest_distance\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert total hours and minutes to minutes\n    activity_and_break = 45 + 20  # Time for each activity and the following break\n\n    # Subtract the last break time because it's not needed after the last activity\n    total_activities_time = total_minutes - 20\n\n    # Calculate the number of activities and remove the fraction if any\n    num_activities = total_activities_time // activity_and_break\n\n    return num_activities\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for number in permutations(cards):\n        if number[0] != '0' and ''.join(number).startswith(('5', '8')):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 3 pears = 84p\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n\n    # Emily's purchase: 1 banana + 1 pear = 48p\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let a, b, c represent the weight of Adam, Ben, and Carl respectively.\n    a_plus_b = 102  # Adam and Ben together weigh 102kg\n    b_plus_c = 97   # Ben and Carl together weigh 97kg\n    a_plus_c = 92   # Adam and Carl together weigh 92kg\n\n    # By adding all the pairs together, we get twice the total weight:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 2 * (Adam + Ben + Carl)\n    total_weight_twice = a_plus_b + b_plus_c + a_plus_c\n\n    # To find the total weight, we divide the sum of all pairs by 2\n    total_weight = total_weight_twice / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    \n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    frac = 3 / 5\n    number = 35\n    result = frac * number\n    return result\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a_time, b_time = symbols('a_time b_time')\n\n    # A's efficiency is twice B's\n    equation1 = Eq(1/a_time, 2/b_time)\n    \n    # A is able to finish the job in 5 days less than B\n    equation2 = Eq(a_time + 5, b_time)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a_time, b_time))\n    \n    return solutions[b_time] \n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    num = 123456\n    # Perform the divisibility test for 11: difference between the sum of the digits in odd positions and\n    # the sum of the digits in even positions should be a multiple of 11\n    digits = [int(d) for d in str(num)]\n    odd_sum = sum(digits[::2])\n    even_sum = sum(digits[1::2])\n    divisibility_diff = abs(odd_sum - even_sum)\n\n    # Check if George's claim is correct\n    is_george_correct = (divisibility_diff == 1 and num % 11 == 1)\n    \n    # If George is not correct, compute the correct remainder\n    if not is_george_correct:\n        remainder = num % 11\n\n    return remainder if not is_george_correct else 1\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100  # converting final length from cm to meters\n\n    melted_length_m = initial_length_m - final_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - 2 * initial_passengers // 5 + 7\n    after_second_stop = after_first_stop - after_first_stop // 4 + 13\n\n    return after_second_stop\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_in_12_minutes = 17\n    minutes_needed = 36\n    planes_in_36_minutes = (planes_in_12_minutes / 12) * minutes_needed\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    # Rounding to the nearest Â£5 means the actual value can be Â£2.5 less or Â£2.5 more than the estimate\n    error_margin = 5 / 2\n    least_actual_price = estimated_price - error_margin\n    return least_actual_price\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Ways to reach a specific step is the sum of ways to reach two steps behind and five steps behind,\n    # because the frog can only jump either 1 or 4 steps.\n    # Example: To reach step 5, you can come from step 4 (1 step) or from step 1 (4 steps).\n    # We initialize a list that stores the number of ways to reach each step.\n\n    ways = [0] * 10  # We need 10 because we are considering step 0 as the starting point\n    ways[0] = 1  # There is one way to stay on the ground (step 0), which is to not move.\n\n    for i in range(1, 10):\n        # If we can reach this step by moving 1 step up\n        if i >= 1:\n            ways[i] += ways[i - 1]\n        # If we can reach this step by moving 4 steps up\n        if i >= 4:\n            ways[i] += ways[i - 4]\n\n    return ways[9]  # Number of ways to reach step 9\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the number of terms in the series\n    series_start = 0.5\n    series_end = 10\n    step = 0.5\n    n = int((series_end - series_start) / step + 1)  # Number of terms\n    \n    # Sum of an arithmetic series formula: S_n = n/2 * (first_term + last_term)\n    sum_of_terms = (n / 2) * (series_start + series_end)  # Sum of all terms 0.5, 1, 1.5, ..., 10\n\n    # Sum of cubes of the first n natural numbers formula: (1^3 + 2^3 + ... + n^3) = (1 + 2 + ... + n)^2\n    sum_of_cubes = sum_of_terms ** 2  # Square of the sum of terms\n\n    return sum_of_cubes\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    years_until_future_sum = future_sum_ages - current_sum_ages\n    return years_until_future_sum\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between = 5\n    rabbit_position_from_left = elephant_position_from_left - (toys_between + 1)\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Nancy's work rate\n    nancy_rate = 1 / 6\n    # Nancy's and Tim's combined work rate\n    combined_rate = 1 / 4\n    # Tim's work rate\n    tim_rate = combined_rate - nancy_rate\n    # Time Tim would take to complete the work by himself\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and pencils % 3 == 2 and\n            pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 3 + 1  # Ewan and his 3 sisters\n\n    biscuits_each = total_biscuits / people_count\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    ans = (3/7) * 385\n    return ans\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimeters\n    pink = 2.5 * 100  # 2.5 meters to centimeters\n    blue = 220        # already in centimeters\n    orange = 30.5     # already in centimeters\n\n    # Determine the longest ribbon\n    longest_ribbon = max(pink, blue, orange)\n\n    # Return the color of the longest ribbon\n    if longest_ribbon == pink:\n        return \"pink\"\n    elif longest_ribbon == blue:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_numbers = len(numbers) + 1  # Include the unknown 'a'\n    \n    sum_of_numbers = mean_value * total_numbers\n    sum_known_numbers = sum(numbers)\n    \n    a = sum_of_numbers - sum_known_numbers\n    \n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from math import lcm\n\ndef solution():\n    # Convert all times to seconds for commonality\n    first_light = 60       # 1 minute is 60 seconds\n    second_light = 90      # 1.5 minutes is 90 seconds\n    min_third_light = 30   # minimum third light time is 30 seconds\n    max_seconds = 9 * 60   # 9 minutes is the cycle for all lights to be green\n    \n    # Calculate the least common multiple of the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n    \n    # Find the smallest valid time for the third light\n    third_light = lcm_first_second\n    while third_light < max_seconds:\n        if third_light >= min_third_light:\n            break\n        third_light += lcm_first_second\n        \n    if third_light > max_seconds:\n        third_light = max_seconds\n    \n    # Convert seconds back to minutes for final answer\n    ans = third_light / 60\n    return ans\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prep_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass to grams for easier calculations\n    total_mass_grams = 172 * 1000\n\n    # Ratio coefficients\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n\n    # Masses of individual packets in grams\n    mass_p = 300\n    mass_q = 400\n    mass_r = 500\n\n    # Total ratio coefficient\n    total_ratio = ratio_p + ratio_q + ratio_r\n\n    # Total mass represented by the ratio\n    mass_per_ratio = total_mass_grams / total_ratio\n\n    # Calculate the number of packets for each ingredient\n    packets_p = (mass_per_ratio * ratio_p) / mass_p\n    packets_q = (mass_per_ratio * ratio_q) / mass_q\n    packets_r = (mass_per_ratio * ratio_r) / mass_r\n\n    # Total number of packets\n    total_packets = packets_p + packets_q + packets_r\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    total = 0\n    for i in range(1, 4):\n        total += int('4' * i)\n    return total\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_cars = 3 + 12 + 15\n    total_people_capacity = (3 * 10) + (12 * 15) + (15 * 20)\n    average_people_per_car = total_people_capacity / total_cars\n    return average_people_per_car\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    exchange_rate = 1.25\n    cost_cad = 64\n    cost_usd = cost_cad / exchange_rate\n    return cost_usd\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    position_from_front = 8\n    position_from_back = 10\n\n    total_shelves = position_from_front + position_from_back - 1\n\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score_needed = 90 * 5\n    highest_possible_score = 100\n\n    for lowest_score in range(highest_possible_score - 4):\n        scores = [lowest_score + i for i in range(5)]\n        if sum(scores) == total_score_needed:\n            return lowest_score\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n\n    ans = (2 * largest_number) - (3 * smallest_number)\n    return ans\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    rachel_speed = 84  # km/h\n    eleanor_time_to_G = 4  # hours\n    rachel_time_to_G = eleanor_time_to_G - 1.5  # Rachel's travel time to reach the point Eleanor passed her\n    rachel_distance_to_F = 39  # km\n\n    # Rachel's distance travelled before meeting Eleanor\n    rachel_distance_before_meeting = rachel_speed * rachel_time_to_G\n\n    # Total distance travelled by Rachel\n    total_rachel_distance = rachel_distance_before_meeting + rachel_distance_to_F\n\n    # Total distance between City F and City G is the distance Eleanor travelled in 4 hours\n    eleanor_speed = total_rachel_distance / eleanor_time_to_G  # Eleanor's speed\n    distance_F_G = eleanor_speed * eleanor_time_to_G\n\n    return distance_F_G\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the length of Rope B be x, then we can express the lengths of the other ropes in terms of x.\n    B = symbols('B')\n    A = 3 * B  # Rope A is 3 times as long as Rope B\n    C = B + 56  # Rope C is 56 cm longer than Rope B\n    equation = Eq(A, C + 130)  # Rope A is 130 cm (1 m 30 cm) longer than Rope C\n\n    # Solve the equation to find the length of Rope B\n    length_B = solve(equation, B)[0]\n\n    # Calculate the lengths of the other ropes\n    length_A = 3 * length_B\n    length_C = length_B + 56\n\n    # Calculate the total length\n    total_length = length_A + length_B + length_C\n\n    return total_length\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "def solution():\n    from itertools import combinations\n    \n    # All possible combinations of 3 letters from A, B, C, D, E\n    total_combinations = list(combinations('ABCDE', 3))\n    \n    # Combinations that contain both A and B\n    ab_combinations = [combo for combo in total_combinations if 'A' in combo and 'B' in combo]\n    \n    # Probability of having both A and B in the combination\n    probability = len(ab_combinations) / len(total_combinations)\n    \n    return probability\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given ratio x:48 is equivalent to 3:4\n    # We can write this as x/48 = 3/4\n    # Solve for x to find its value\n    x = (3/4) * 48\n    return x\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n    \n    student_males = (student_male_percentage / 100) * male_members\n    student_females = (student_female_percentage / 100) * female_members\n    total_students = student_males + student_females\n    total_members = male_members + female_members\n    \n    student_percentage = (total_students / total_members) * 100\n    \n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300  # Total volume after mixing both punch bowls\n    total_fruit_juice = (200 * 0.35) + (300 * 0.50)  # Total fruit juice in L after mixing\n    percentage_concentration = (total_fruit_juice / total_volume) * 100  # Percentage concentration of the mixture\n    \n    return percentage_concentration\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    while amy - john != 4:\n        amy -= 1\n        john += 1\n    return 37 - amy\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_terms)\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Number of chicken, vegetable, and fruit pies\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n    \n    # (1) Fraction of chicken pies more than vegetable pies\n    chicken_more_than_vegetable = chicken_pies - vegetable_pies\n    fraction_chicken_more = chicken_more_than_vegetable / chicken_pies\n    \n    # (2) Fraction of vegetable pies less than fruit pies\n    vegetable_less_than_fruit = fruit_pies - vegetable_pies\n    fraction_vegetable_less = vegetable_less_than_fruit / vegetable_pies\n\n    return (fraction_chicken_more, fraction_vegetable_less)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    initial_markers = 32\n    markers_given_away = 7\n    markers_left = initial_markers - markers_given_away\n    bag_capacity = 5\n    \n    number_of_bags = markers_left // bag_capacity\n    return number_of_bags\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be non-zero because it's the first digit in a two-digit number\n        for b in range(10): # 'b' can be zero\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip = 0.20 * bill\n    tax = 0.10 * bill\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one jug (j) and the cost of one cup (c)\n    j, c = symbols('j c')\n    \n    # Create equations based on the given information\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n    \n    # Return the cost of one cup\n    return solutions[c]\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    \n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let the original number of papers per hour be x.\n    # She plans to finish in 5 hours, so total papers is 5x\n    # After marking for one hour, she has 4 hours left, and she needs to mark 6 more papers per hour,\n    # so the new rate is (x+6), and the total papers can be given by 1 * x + 4 * (x + 6)\n    # If marking 10 more papers than the original plan per hour, she finishes in 4 hours (1 hour earlier),\n    # so total papers is also 4 * (x + 10)\n    \n    # Set up the equations:\n    # 5x = x + 4(x + 6)\n    # 5x = 4(x + 10)\n    \n    # Solve the equations\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation1 = Eq(5*x, x + 4*(x + 6))\n    equation2 = Eq(5*x, 4*(x + 10))\n    \n    # Both equations should give us the same number of papers\n    # so we can solve either of them to find x\n    solution = solve((equation1, equation2), (x))\n    x_value = solution[x]\n    \n    # Calculate the total number of papers\n    total_papers = 5*x_value\n    \n    return total_papers\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3 / 4\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # You need 4 cards with consecutive numbers.\n    # The worst-case scenario, without considering the suit, is that you pick all 13 cards without getting 4 consecutive ones.\n    # In this case, you have 1 to 13 without consecutiveness, like 2,4,6,8,10,12,1,3,5,7,9,11,13\n    # The next card you pick will have to be consecutive to one of the previous ones, which guarantees 4 consecutive cards.\n    # 13 cards of the first suit + all 13 cards of the second suit + all 13 cards of the third suit + 1 card of the fourth suit\n    min_cards_drawn = 13 * 3 + 1\n  \n    return min_cards_drawn\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age_now = 10\n    difference_in_age = 2\n\n    brother_age_three_years_ago = ashley_age_now - 3 - difference_in_age\n    brother_age_now = brother_age_three_years_ago + 3\n\n    return brother_age_now\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols\n    v_final, g, h_initial, h_final = symbols('v_final g h_initial h_final')\n    \n    # Constants\n    g = 9.8  # Acceleration due to gravity in m/s^2\n    \n    # Initial conditions\n    h_initial = 3000  # Initial height in meters\n    h_final = 2000    # Final height in meters\n    v_initial = 0     # Initial velocity (starting from rest)\n    \n    # Conservation of energy (ignoring air resistance)\n    # Initial potential energy + initial kinetic energy = final potential energy + final kinetic energy\n    # m * g * h_initial + 1/2 * m * v_initial**2 = m * g * h_final + 1/2 * m * v_final**2\n    # Simplify the equation (m cancels out and v_initial is 0)\n    # g * h_initial = g * h_final + 1/2 * v_final**2\n    \n    # Equation to solve for v_final\n    equation = Eq(g * h_initial, g * h_final + 1/2 * v_final**2)\n    \n    # Solve the equation for v_final\n    solutions = solve(equation, v_final)\n    \n    # We take the positive root because velocity is positive in the downward direction\n    v_final = max(solutions)\n\n    return v_final.evalf()\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    # Let x be the price of each wristband.\n    # The price of each cap is 3x.\n    # Caleb spends 2/5 of his money on 4 caps and 6 wristbands.\n    # This means he spends 2/5 of his money on 4*3x (for caps) + 6x (for wristbands).\n    \n    # Let M be the total money Caleb had initially.\n    # So, we write the equation: (2/5)M = 4*3x + 6x\n    \n    # Then he uses 1/3 of the remaining money to buy more caps.\n    # The remaining money after the first purchase is (3/5)M.\n    # So, the money spent on more caps is (1/3)*(3/5)M = (1/5)M.\n    \n    # The number of additional caps he can buy with (1/5)M is (1/5)M / (3x).\n    \n    # We need to find out the value of M/(3x), which will be the number of all caps he can buy,\n    # because the first term gives us the count of initial caps bought, and the second term the additional caps.\n    # (4*3x + 6x)(3) + M/(3x) = M/(3x)\n    # (12x + 6x)(3) + M/(3x) = M/(3x)\n    # (18x)(3) + M/(3x) = M/(3x)\n    # Simplifying, we get M/x = 5(4*3 + 6), because (2/5)M = 4*3x + 6x\n    # M/x = 5(12 + 6)\n    # M/x = 5*18\n    # M/x = 90\n    \n    # Therefore, M/(3x) = 90/3 = 30 caps is what he could buy with all his money.\n    # But he only spent (2/5 + 1/5) = 3/5 of his money on caps.\n    # So, he bought (3/5)*30 caps altogether.\n    \n    caps_all = (3/5) * 30\n    \n    # Since Caleb can only buy whole caps, we return the integer value of caps_all\n    return int(caps_all)\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    # Initialize variable for the count of pages numbered\n    numbered_pages = 0\n    # Initialize variable for the last printed page\n    last_printed_page = 0\n    \n    # Start iterating page numbers\n    while numbered_pages < 89:\n        last_printed_page += 1\n        # Check if the page is not every third page\n        if last_printed_page % 3 != 0:\n            numbered_pages += 1\n\n    return last_printed_page\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Predefined digits based on the problem statement\n    A, C, G = 3, 1, 7\n    # Since the last digit J must be divisible by 10, J = 0\n    J = 0\n    # Create a list of the remaining digits that need to be permuted\n    remaining_digits = [0, 2, 4, 5, 6, 8, 9]\n    # Generate all permutations of the remaining digits\n    for perm in permutations(remaining_digits):\n        # Check if the other conditions are satisfied\n        # Insert the predefined digits into the permutation\n        # We use A * A as a filler as it is not important for our divisibility check\n        number_str = '{}{}{}{}{}{}{}{}{}{}'.format(A, perm[0], C, perm[1], A * A, perm[2], G, perm[3], perm[4], J)\n        B, D, E, F, H, I = int(number_str[1]), int(number_str[3]), int(number_str[4]), int(number_str[5]), int(number_str[7]), int(number_str[8])\n        # Convert the number into an integer and check divisibility\n        if all(int(number_str[:i]) % i == 0 for i in range(2, 11)):\n            # If all conditions are met, return the result\n            return {'A': A, 'B': B, 'C': C, 'D': D, 'E': E, 'F': F, 'G': G, 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    total_tickets = 19\n    total_sales = 75\n    # price for adult ticket is $5 and for a child ticket is $3\n    # Let's denote the number of adult tickets as 'a' and child tickets as 'c'\n    # We have two equations:\n    # a + c = total_tickets\n    # 5a + 3c = total_sales\n    # We need to find the number of solutions that satisfy both equations\n\n    adult, child = 0, total_tickets\n\n    while 5 * adult + 3 * child != total_sales:\n        adult += 1\n        child -= 1\n    \n    return adult\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n    age_difference = grandma_future_age - tom_future_age\n    grandma_current_age = tom_current_age + age_difference\n    return grandma_current_age\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_multiples_of_3 = 600 // 3\n    count_multiples_of_5 = 600 // 5\n    count_multiples_of_15 = 600 // 15  # Multiples of 3 and 5 are multiples of 15\n\n    ans = count_multiples_of_3 + count_multiples_of_5 - count_multiples_of_15\n    return ans\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):  # Jeremy can use 0 to 5 ten-pence coins\n        for twenty_pences in range(4):  # Jeremy can use 0 to 3 twenty-pence coins\n            for fifty_pences in range(2):  # Jeremy can use 0 to 1 fifty-pence coin\n                if 10 * ten_pences + 20 * twenty_pences + 50 * fifty_pences == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students_b = symbols('students_b')\n    candies = symbols('candies')\n\n    # Equation for class A (twice the number of students as class B, needs 20 more candies to give 4 to each)\n    eq_for_a = Eq(4 * (2 * students_b) - candies, -20)\n\n    # Equation for class B (gives 6 candies to each with 16 left)\n    eq_for_b = Eq(6 * students_b - candies, 16)\n\n    # Solve the system of equations\n    solutions = solve((eq_for_a, eq_for_b), (students_b, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # She could take out all the orange and yellow balls without getting 4 of the same color.\n    # That is 4 orange + 2 yellow = 6 balls.\n    # The next ball she takes out must be blue to make it the fourth blue ball.\n    # Therefore, she needs to take out 6 + 1 = 7 balls to ensure she has 4 of the same color.\n    return 6 + 1\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Since there are 3 red and 3 green stickers,\n    # if we take one sticker, we cannot be sure of its color.\n    # If we take two stickers, they could still be one of each color.\n    # Only when we take a third sticker can we be certain,\n    # due to the pigeonhole principle, that at least two will be of the same color.\n    # Therefore, we need to take at least 4 stickers to be sure to have 2 stickers of the same color\n    # (either we have 2 of one color in the first 3, or if they are one of each, the 4th will match one of the first 3).\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    teams = 5\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Number of legs for each animal\n    ducks_legs = 4 * 2  # 4 ducklings with 2 legs each\n    geese_legs = 2 * 2  # 2 baby geese with 2 legs each\n    lambs_legs = 4      # each lamb with 4 legs\n\n    # Total legs of ducks and geese\n    total_ducks_geese_legs = ducks_legs + geese_legs\n\n    # Total legs that lambs must have\n    total_lambs_legs = 36 - total_ducks_geese_legs\n\n    # Number of lambs based on the total number of legs they must have\n    num_lambs = total_lambs_legs // lambs_legs\n\n    return num_lambs\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation based on ratio of boys to girls: 3 girls for every boy\n    equation1 = Eq(boys, 3 * girls)\n    \n    # Equation based on total sweets received\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    sorted_digits_desc = sorted(digits, reverse=True)\n    sorted_digits_asc = sorted(digits)\n    \n    largest_num = int(\"\".join(map(str, sorted_digits_desc)))\n    smallest_num = int(\"\".join(map(str, sorted_digits_asc)))\n    \n    difference = largest_num - smallest_num\n    \n    return difference\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_with_one = 1.2 + 1.23 + 1\n    sum_without_one = 1.2 + 1.23\n\n    ans = sum_with_one * sum_with_one - sum_with_one * sum_without_one\n    return ans\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # For a pyramid made of stacked boxes, the n-th layer from the top\n    # contains n^2 boxes (since the base of that layer is an n x n square).\n\n    # The top layer is the 1st layer and contains 1^2 boxes.\n    # The second layer from the top is the 2nd layer and contains 2^2 boxes.\n    # The third layer from the top is the 3rd layer and contains 3^2 boxes.\n\n    # Therefore, the total number of boxes in the top three layers is:\n    # 1^2 + 2^2 + 3^2\n\n    total_boxes = 1**2 + 2**2 + 3**2\n    return total_boxes\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles_in_january = average_smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n\n    good_copies_A = (3/5) * total_good_copies\n    good_copies_B = (2/5) * total_good_copies\n\n    # A produces 1 bad copy for every 4 good copies, \n    # so in total A produces 5 copies to get 4 good copies\n    # Similarly, B produces 6 copies to get 5 good copies\n    total_copies_A = good_copies_A * (5/4)\n    total_copies_B = good_copies_B * (6/5)\n\n    total_copies_needed = total_copies_A + total_copies_B\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable son represent the time son would take to harvest all by himself\n    son = symbols('son')\n\n    # The farmer's rate of work (since it takes him 24 hours alone)\n    rate_farmer = 1 / 24\n\n    # Son's rate of work (unknown, so represented as 1 / son)\n    rate_son = 1 / son\n\n    # Creating an equation based on their combined work rates\n    # Together they work for 16 hours to finish the job\n    equation = Eq(1, 16 * (rate_farmer + rate_son))\n\n    # Solving the equation to find time the son will take to do the job by himself\n    solutions = solve(equation, son)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + bounce_height * 2\n\n    return total_distance\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    number_of_rolls = 30\n    probability_of_getting_5 = 1/6\n\n    expected_times = number_of_rolls * probability_of_getting_5\n\n    return expected_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n    \n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10 - 1 + 1\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    remainder = 2\n    quotient = 9\n    divisor = 4\n\n    incorrect_step = (quotient * remainder) + divisor\n\n    correct_product = quotient * divisor\n    correct_ans = correct_product + remainder\n\n    is_correct = incorrect_step == correct_ans\n    return (is_correct, correct_ans)\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    # total arrangements without restrictions\n    total_arrangements = factorial(total_children)\n    \n    # calculate the arrangements where Hugh is between Louise and Richard\n    # we can treat the three persons Hugh, Louise and Richard as a single entity\n    # when Hugh is between Louise and Richard, there are two scenarios:\n    # Louise-Hugh-Richard or Richard-Hugh-Louise. \n    # For each scenario, we have 3! ways to arrange these three as a single entity\n    # and then 3! ways to arrange the other children\n    restricted_arrangements = 2 * factorial(3) * factorial(total_children - 3)\n    \n    # subtract the restricted arrangements from the total\n    valid_arrangements = total_arrangements - restricted_arrangements\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)  # The total cost in pence\n    note_value = 1000  # The value of a Â£10 note in pence\n\n    # Change in pence\n    change = note_value - total_cost\n\n    # Convert change to pounds\n    change_in_pounds = change / 100.0\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_matches, wins, draws, losses, points = symbols('total_matches wins draws losses points')\n    \n    # Set up the equation based on the conditions given\n    equation1 = Eq(wins, total_matches * 2/5)\n    equation2 = Eq(draws, total_matches * 7/20)\n    equation3 = Eq(losses, 10)\n    \n    # Calculate total number of matches\n    total_matches_eq = solve(equation1 + equation2 + equation3 - total_matches, total_matches)\n    total_matches_val = total_matches_eq[0]\n\n    # Calculate number of wins, draws and losses\n    wins_val = 2/5 * total_matches_val\n    draws_val = 7/20 * total_matches_val\n    losses_val = 10\n    \n    # Calculate points\n    points_val = 3 * wins_val + 1 * draws_val + 0 * losses_val\n    \n    return points_val\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_reduction = initial_price * 0.10\n    price_after_first_reduction = initial_price - first_reduction\n    second_reduction = price_after_first_reduction * 0.20\n    final_price = price_after_first_reduction - second_reduction\n    return final_price\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n    ans = len(range(start, end + 1, step))\n    return ans\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the mean of the last 5 numbers\n    m = symbols('m')\n\n    # Sum of the first 3 numbers\n    sum_first_3 = 3 * (m - 296)\n    \n    # Sum of the last 5 numbers\n    sum_last_5 = 5 * m\n    \n    # Sum of all 8 numbers based on their mean\n    sum_all_8 = 8 * 555\n\n    # Equation based on the total sum\n    equation = Eq(sum_first_3 + sum_last_5, sum_all_8)\n\n    # Solve for m\n    mean_last_5 = solve(equation, m)[0]\n\n    return mean_last_5\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    return 5 * 7\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    # Calculate work rate per person per day\n    work_rate = 1 / (initial_people * initial_days)\n\n    # Calculate total number of people needed to finish the job in target_days\n    total_people_needed = 1 / (work_rate * target_days)\n\n    # Calculate the number of additional people needed\n    additional_people = total_people_needed - initial_people \n\n    return int(additional_people)\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky_stickers = 99\n    timmy = symbols('timmy')\n\n    equation1 = Eq(vicky_stickers, 6 * timmy - 3)\n    solutions = solve(equation1, timmy)\n\n    timmy_stickers = solutions[0]\n    kevin_stickers = timmy_stickers + 32\n\n    return kevin_stickers\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position_from_front = 3\n    children_between_pip_and_bud = 5\n    bud_position_from_front = pip_position_from_front + children_between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(rasidah, chai_seng - 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (1/2) * rasidah * (1 - 3/5))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    pounds_to_kg_approx = 2.2\n    kg = pounds / pounds_to_kg_approx\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        sum_series = sum(range(a, b))\n        return sum_series - b\n\n    result = custom_op(5, 10) - custom_op(4, 9)\n    return result\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables for the number of years ago\n    years_ago = symbols('years_ago')\n\n    # Isaac's age years ago\n    isaac_age_then = 53 - years_ago\n    # Isaac's mother's age years ago\n    mother_age_then = 81 - years_ago\n\n    # Equation where Isaac's age is one third of his mother's age years ago\n    equation = Eq(isaac_age_then, mother_age_then / 3)\n\n    # Solve the equation to find the number of years ago\n    years_ago_solution = solve(equation, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    digits = [1, 2, 3]\n    all_possible_numbers = list(permutations(digits, 3))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 21))\n    count = 0\n    for prime in primes:\n        if isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    # This is a double arithmetic sequence. To find the rule, let's analyze the differences.\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]  # [12, 11, 10, 9]\n\n    # We can see that the difference between consecutive terms is decreasing by 1.\n    # Next difference should be: 9 - 1 = 8\n\n    # Last number in sequence is 50, so the next number is:\n    next_number = 50 + 8  # 50 + 8 = 58\n\n    return next_number\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens in range(1, 10):  # The tens digit must be between 1 and 9 for a valid two-digit number\n        for ones in range(0, 10):  # The ones digit must be between 0 and 9\n            if tens + ones == 15:  # Sum of digits must be 15\n                return tens * 10 + ones  # Smallest number with the given property\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    # calculate the total weight of the initial 8 apples\n    total_initial_weight = 8 * 50\n    # calculate the total weight after adding the extra apple\n    total_final_weight = 9 * 52\n    # the weight of the extra apple is the difference between the two totals\n    weight_of_extra_apple = total_final_weight - total_initial_weight\n    \n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    # Finding all permutations of the digits 1, 2, 3, 4, and 5\n    perms = permutations(['1', '2', '3', '4', '5'])\n    \n    count = 0\n    # Filtering permutations that form an even number\n    for perm in perms:\n        if int(perm[-1]) % 2 == 0:  # Checking if the last digit is even\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -(4**2)\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    result = sum(range(96, 100))\n    return result\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    from math import sqrt\n\n    # The number of times a light is toggled is equal to the number of its factors.\n    # Only perfect squares have an odd number of factors (every factor has a pair, except for the square root which is paired with itself)\n    # We need to find the number of perfect squares up to and including 250.\n\n    # Since the square root of 250 is about 15.81, there are 15 (1^2, 2^2, 3^2... up to 15^2) perfect squares less than or equal to 250.\n    ans = int(sqrt(250))\n    return ans\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pages\n    x = symbols('x')\n    # Original speed: 50 pages/min\n    original_speed = 50\n    # New speed: 50 + 20 = 70 pages/min\n    new_speed = original_speed + 20\n    # Original time: x / original_speed\n    # New time: x / new_speed\n    # The new time is 2 minutes less than the original time\n    equation = Eq(x / original_speed - x / new_speed, 2)\n\n    # Solve the equation for x\n    pages = solve(equation, x)\n\n    return pages[0]\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Limiting the range for practical purposes\n        for dividend in range(1, 1000):\n            if dividend / divisor == 8 and dividend % divisor == 7:\n                return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    next_year = start_date.year + 1\n    while True:\n        next_date = datetime(next_year, 1, 28)\n        if next_date.weekday() == 0:  # Monday is 0 in weekday() method\n            # Check if it's a leap year and adjust\n            if (next_year % 4 == 0 and next_year % 100 != 0) or (next_year % 400 == 0):\n                # If it's a leap year, next_date should be 2 days after start_date's weekday.\n                if (start_date + one_year + one_day).weekday() == next_date.weekday():\n                    break\n            else:\n                if (start_date + one_year).weekday() == next_date.weekday():\n                    break\n        next_year += 1\n\n    return next_year\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    # Total work done by 4 companies in 5 days\n    total_work = 900\n    # Work done by 1 company in 5 days\n    work_by_one_company = total_work / 4\n    # Work done by 1 company in 1 day\n    work_by_one_company_per_day = work_by_one_company / 5\n    return work_by_one_company_per_day\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Calculate the time spent jogging and walking\n    time_jogging = 1 # from 6:30am to 7:30am is 1 hour\n    time_walking = 2 # from 7:30am to 9:30am is 2 hours\n    \n    # Calculate the distances\n    distance_jogging = time_jogging * 6 # distance = speed * time\n    distance_walking = time_walking * 5\n    \n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n    \n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_money = 20\n    saved_money = 1 * 7  # $1 each day for 7 days\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    \n    total_money = initial_money + saved_money - lent_to_brother - spent_on_snacks\n    \n    return total_money\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount_rate = 0.10\n    num_members = 30\n\n    discounted_cost = normal_cost * (1 - discount_rate)\n    cost_per_member = discounted_cost / num_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    cost_per_additional_minute = 5 / 100  # convert cents to dollars\n    base_cost = 80 / 100  # convert cents to dollars\n    total_cost = 1.4  # in dollars\n    additional_cost = total_cost - base_cost\n\n    additional_minutes = additional_cost / cost_per_additional_minute\n\n    # Up to 15 minutes are included in the base cost\n    total_minutes = 15 + additional_minutes\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Calculate the last digit of the powers of 2 and 3, raised to 2017\n    last_digit_2 = pow(2, 2017, 10)\n    last_digit_3 = pow(3, 2017, 10)\n\n    # Calculate the last digit of the product of these two numbers\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the number Sara first thought of\n    equation = Eq(((x - 4) / 2) + 11, 37)\n\n    initial_number = solve(equation, x)\n\n    return initial_number[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return (a - 1) + (b - 1)\n    \n    # You can find the pattern by applying the custom operation\n    # to the given examples. For instance:\n    # 4â7 = (4-1) + (7-1) = 3 + 6 = 9, but the example gives 21,\n    # which indicates that the actual operation might be:\n    # (first number - 1) * (second number - 1)\n    \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 - 2*x + 7*x, 35)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5 # first multiple of 5 greater than 56\n    last_multiple = 120 // 5 * 5 # last multiple of 5 less than or equal to 120\n    \n    if last_multiple > 120: \n        last_multiple -= 5 # ensure last_multiple is within the range\n    \n    count_multiples = (last_multiple - first_multiple) // 5 + 1\n    return count_multiples\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2 + 1/2  # Mixed number to improper fraction calculation\n    quarters_in_one = 4       # Number of quarters in one whole\n    ans = total_quarters * quarters_in_one\n    return ans\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Calculate the difference in years between Gina's 50th birthday and James's 20th birthday\n    years_diff = 2005 - 1997\n    \n    # Calculate how old James was when Gina was 50\n    james_age_when_gina_50 = 20 - years_diff\n    \n    # Since James was 'james_age_when_gina_50' years old when Gina was 50,\n    # calculate how old he was when Gina was 35\n    james_age_when_gina_35 = james_age_when_gina_50 + (50 - 35)\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5 # Lucy is the 5th from front\n    eddie_position = 9 # Eddie is the 9th from back\n    people_between = 2 # 2 people stand between Lucy and Eddie\n    \n    # Total people = Lucy's position + people between + Eddie's position\n    total_people = lucy_position + people_between + eddie_position\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import primerange\n\n    # Get all prime numbers less than 8 since the remainders must be different and primes\n    primes = list(primerange(1, 8))\n    \n    # Try all combinations of four primes (remainders)\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                for d in primes:\n                    if len(set((a, b, c, d))) == 4:  # Make sure all remainders are different\n                        # Try to find a number that satisfies all the remainder conditions\n                        for i in range(1, 3*5*7*8):\n                            if i % 3 == a and i % 5 == b and i % 7 == c and i % 8 == d:\n                                return i\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    cut_length_cm = 5 * 100 + 8      # Convert meters to centimeters\n    remaining_length_cm = total_length_cm - cut_length_cm\n    stripe_length_cm = remaining_length_cm / 9  # Divide the remaining length into 9 equal parts\n\n    stripe_length_m = stripe_length_cm // 100  # Convert centimeters to meters (integer part)\n    stripe_length_cm_remainder = stripe_length_cm % 100  # The remainder centimeters\n\n    return stripe_length_m, stripe_length_cm_remainder\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    result = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return result\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Maximum possible number of left-handed girls \n    max_left_handed_girls = girls - (total_pupils - right_handed)\n    \n    # The smallest number of girls who are right-handed would be the total\n    # number of girls minus the maximum possible number of left-handed girls.\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if 2 * chickens + 4 * rabbits == 34:\n            return chickens\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B = symbols('A B')\n\n    # Define the equations based on the problem statements\n    equation1 = Eq(A + B, 130)    # Their sum is 130\n    equation2 = Eq(A, 5 * B + 4)  # A is $4 more than five times B\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Extract the solution for A\n    return solutions[A]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    equation2 = Eq(orchids / tulips, 3/5)\n    \n    # Calculate the number of flowers sold\n    sold_orchids = 0.40 * orchids\n    sold_tulips = 1/5 * tulips\n    sold_roses = 0.25 * roses\n\n    # Set up the equation for the number of flowers left after selling\n    equation3 = Eq(orchids + tulips + roses - (sold_orchids + sold_tulips + sold_roses), 2644)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of books and files\n    books, files = symbols('books files')\n\n    # Total cost of books and files equation\n    total_cost_eq = Eq(12 * books + 9 * files, 336)\n\n    # Number of books is 14 more than files\n    books_files_eq = Eq(books, files + 14)\n\n    # Solve the system of equations\n    solutions = solve((total_cost_eq, books_files_eq), (books, files))\n\n    # Number of books Tanya bought\n    return solutions[books]\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digit = 0\n    for i in range(1, 10):\n        ones_digit += (i ** 2013) % 10\n    return ones_digit % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 6), (5, 7)]  # (remainder, modulus)\n    age, _ = solve_congruence(*congruences)\n    \n    while age < 30:\n        age += 6 * 7  # LCM of 6 and 7\n\n    return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario: Peter takes one of each color before getting a matching pair.\n    # This means he takes one red, one blue, and one black sock for sure.\n    socks_taken = 3\n    \n    # The next sock Peter takes must create a pair with at least one of the previously taken socks.\n    # Therefore, only one additional sock is necessary to guarantee a matching pair.\n    socks_taken += 1\n\n    return socks_taken\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    # write the equations\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    # calculate the sum of square and diamond\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted_questions = total_questions - not_attempted\n    total_score = 168\n    \n    for correct in range(attempted_questions + 1):\n        incorrect = attempted_questions - correct\n        score = correct * 4 - incorrect * 1\n        if score == total_score:\n            return correct\n        \nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Japan time of departure in datetime format\n    departure_japan = datetime(year=2023, month=7, day=2, hour=20)\n\n    # France time of arrival in datetime format\n    # Since France is 7 hours behind Japan, we adjust the arrival time by adding 7 hours\n    arrival_france = datetime(year=2023, month=7, day=3, hour=1) + timedelta(hours=7)\n\n    # Calculate the difference in hours\n    flight_duration = arrival_france - departure_japan\n    hours = flight_duration.total_seconds() / 3600  # total_seconds converts duration to seconds\n\n    return int(hours)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    # System of equations based on the given problem\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Find the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    first_digit_options = 2 # Only 1 or 2 can be the first digit (0 cannot be the first digit)\n    second_digit_options = 3 # 0, 1, or 2 can be the second digit\n\n    total_numbers = first_digit_options * second_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from math import factorial\n\ndef solution():\n    ans = sum((100 / factorial(i)) for i in range(97, 2, -1))\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest even number be x.\n    # Then the next four consecutive even numbers would be x+2, x+4, x+6, x+8.\n    # Hence, their sum is x + (x+2) + (x+4) + (x+6) + (x+8) = 5x + 20\n    # We set that sum to equal 200 and solve for x.\n    x = symbols('x')\n    equation = Eq(5*x + 20, 200)\n    smallest_number = solve(equation, x)[0]\n    return smallest_number\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    votes_needed_for_majority = (total_votes // 2) + 1\n\n    additional_votes_peter_needs = max(0, votes_needed_for_majority - peter_votes)\n\n    return additional_votes_peter_needs\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to cut a piece of wood into 5 sections.\n    # This means she makes 4 cuts in 8 minutes (since cutting it into 5 sections requires 4 cuts).\n    cuts_needed_for_5_sections = 4\n    time_for_5_sections = 8\n\n    # Find the time taken for one cut.\n    time_per_cut = time_for_5_sections / cuts_needed_for_5_sections\n\n    # If Katie wants to cut the piece of wood 6 times, calculate the total time needed.\n    total_time_for_6_cuts = time_per_cut * 6\n\n    return int(total_time_for_6_cuts)\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys - 7)\n    equation2 = Eq(boys + girls, 995)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of sugar solution transferred\n    x = symbols('x')\n\n    # For container A: (5 - 0.1x + 0.2x) / (50 - x + x) = (6 + 0.1x - 0.2x) / (30 - x + x)\n    # Simplify the equation\n    equation = Eq((5 - 0.1*x + 0.2*x) / 50, (6 + 0.1*x - 0.2*x) / 30)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the solution as the amount transferred\n    return solution[0]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    highest_units = max(number % 10 for number in numbers)\n    circle_number = max(numbers, key=lambda x: x % 10)\n\n    return circle_number\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # The total amount in the money box in pence\n    for num_coins in range(1, total_amount // 5):\n        if 5 * num_coins + 10 * num_coins + 20 * num_coins == total_amount:\n            return num_coins * 3  # Total number of coins is 3 times the number of each type\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    spent_on_book = initial_money * 0.1\n    money_left_after_book = initial_money - spent_on_book\n    spent_on_dvd = money_left_after_book * 0.2\n    final_money_left = money_left_after_book - spent_on_dvd\n    return final_money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # Annie's initial amount in dollars\n    cost_of_gift = 20    # Cost of the gift in dollars\n\n    # Calculate the remaining amount in dollars\n    remaining_amount_dollars = initial_amount - cost_of_gift\n    \n    # Convert the remaining amount into cents\n    remaining_amount_cents = remaining_amount_dollars * 100\n\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9\n    total_sweets = 135\n    d = 3\n\n    # Using the sum formula for arithmetic series: n/2 * (2a + (n-1)d) = total_sweets\n    # we need to solve for 'a' (number of sweets eaten on the first day)\n    # However, we're interested in the last day, which is a + (n-1)d\n    # So, we need to isolate 'a' from the sum formula and then substitute in the last day formula\n\n    # total_sweets = n/2 * (2a + (n-1)d)\n    # 2 * total_sweets = n * (2a + (n-1)d)\n    # 2 * total_sweets / n = 2a + (n-1)d\n    # (2 * total_sweets / n - (n-1)d) / 2 = a\n\n    a = (2 * total_sweets / n - (n-1) * d) / 2\n\n    # Now we find the number of sweets eaten on the last day\n    last_day_sweets = a + (n - 1) * d\n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * ((1 + rate) ** time)\n    return balance\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    num_pages = 185\n    digits = 0\n    \n    # Single digit pages 1-9\n    digits += 1 * 9\n    \n    # Double digit pages 10-99\n    digits += 2 * (99 - 10 + 1)\n    \n    # Triple digit pages 100-185\n    digits += 3 * (num_pages - 100 + 1)\n    \n    return digits\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n    pay_rise_amount = annual_salary * (pay_rise_percent / 100)\n    new_annual_salary = annual_salary + pay_rise_amount\n    new_monthly_salary = new_annual_salary / 12\n    return new_monthly_salary\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    return (4.08 * 20 - 1.08 * 20) / 20\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(119, 98, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Iterate over all possible months (1 to 12) and days (1 to 31)\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the equation holds for the current month and day\n            if 31 * month + 12 * day == 376:\n                # Format the date as \"ddmm\"\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_required = 40\n    milk_required = 80\n    flour_available = 25\n    \n    milk_used = (flour_available * milk_required) / flour_required\n    \n    return milk_used\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    max_num = 2023\n    count = 0\n    for num in range(1, max_num):\n        if num % 7 != 0 and num % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n\n    total_sweets = sweets_taken + sweets_left\n\n    return total_sweets\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6\n    protractor_price = 0.30  # converting pence to pounds\n\n    # Sale reductions\n    calculator_reduction = calculator_price / 4\n    protractor_reduction = protractor_price / 2\n\n    # Sale prices\n    sale_calculator_price = calculator_price - calculator_reduction\n    sale_protractor_price = protractor_price - protractor_reduction\n\n    # Total cost\n    total_cost = (sale_calculator_price * 8) + (sale_protractor_price * 20)\n    return total_cost\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    # Convert the tonnes to kilograms by multiplying by 1000\n    # (since 1 tonne = 1000 kilograms)\n    tonnes_in_kilograms = 1.194 * 1000\n    \n    # Calculate two-thirds of the total amount in kilograms\n    ans = (2/3) * tonnes_in_kilograms\n    return ans\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let y be the current age of the younger elephant\n    # Let o be the current age of the older elephant\n    y = 18\n\n    # When the younger elephant grows up to the older elephant's current age\n    # The age difference between the two elephants will remain the same.\n    # So, when the younger is as old as the older is now, the older will be 62.\n    # This means that the older elephant is currently 62 - the age difference.\n\n    # y + (o - y) = o -> The younger elephant's age plus the age difference equals the older elephant's age now\n    # o + (o - y) = 62 -> The older elephant's age plus the age difference equals 62\n\n    # We solve the above system of equations to find the value of o.\n    # Since 2 equations are essentially the same, we only need one equation to solve for o.\n    age_difference = 62 - y\n    o = y + age_difference\n\n    return o\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let's assume the total amount of grass to be eaten is G (a constant value)\n    # The rate at which one ox eats grass is r\n    \n    # According to the problem:\n    # 27 oxen can finish eating the grass in 6 weeks\n    # -> 27 * r * 6 = G\n    \n    # 23 oxen can finish eating the grass in 9 weeks\n    # -> 23 * r * 9 = G\n    \n    # We set the two equations equal to each other to solve for r:\n    # 27 * r * 6 = 23 * r * 9\n    # r cancels out, and we can solve for G:\n    G = 27 * 6 # G doesn't change because it cancels out from both sides\n    \n    # Now we want to find out how many weeks (w) it will take for 21 oxen to finish eating the grass G:\n    # 21 * r * w = G\n    # w = G / (21 * r)\n    # We already know G from the previous step and we can use either of the two given situations to find r.\n    \n    # Let's use the first situation to find r:\n    # 27 * r * 6 = G\n    # r = G / (27 * 6)\n    \n    r = G / (27 * 6) # This is the rate of one ox eating grass per week\n    \n    # Now we use G and r to calculate w:\n    w = G / (21 * r)\n    \n    # Simplify the equation by substituting G and r:\n    # w = (27 * 6) / (21 * (27 * 6) / (27 * 6))\n    # The (27 * 6) cancels out, simplifying to:\n    # w = 27 * 6 / 21\n    w = 27 * 6 / 21\n    \n    return w\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's biking time is 1 hour (from 7:30am to 8:30am)\n    biking_speed = 10  # biking speed in miles per hour\n    biking_distance = 1 * biking_speed  # distance covered while biking\n\n    # Ellen's train travel time is 2 hours (from 8:30am to 10:30am)\n    train_speed = 50  # train speed in miles per hour\n    train_distance = 2 * train_speed  # distance covered on the train\n\n    total_distance = biking_distance + train_distance  # total distance traveled\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # We can solve this problem using the stars and bars technique\n    # We have 5 balls (stars) and 2 bars (to divide the balls into 3 boxes)\n    # The total number of items to arrange is 5 stars + 2 bars = 7 items\n    # The formula for combinations with repetitions is C(n+k-1, k-1)\n    \n    from math import comb\n    num_balls = 5\n    num_boxes = 3\n    \n    # Calculate the number of ways to place the bars (which is equivalent to choosing the spaces for the balls)\n    ways = comb(num_balls + num_boxes - 1, num_boxes - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of marbles of each color\n    blue, red, green = symbols('blue red green')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(red, blue + 25)       # red marbles = blue marbles + 25\n    equation2 = Eq(green, red + 32)      # green marbles = red marbles + 32\n    equation3 = Eq(blue + red + green, 112)  # Total number of marbles\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n    \n    return solutions[blue]  # Return the number of blue marbles\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is the 3rd from front to back and 2nd from back to front\n    # This means there are 3 + 2 - 1 rows (subtracting 1 because Lucas is counted in both)\n    rows = 3 + 2 - 1\n    \n    # Lucas is the 4th from left to right and 3rd from right to left\n    # This means there are 4 + 3 - 1 columns (subtracting 1 because Lucas is counted in both)\n    columns = 4 + 3 - 1\n    \n    # Total number of students is the number of rows times the number of columns\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while True:\n        if sum(map(int, str(num))) == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amounts of money Ema and Keng Wee had as e and k respectively.\n    e, k = symbols('e k')\n\n    # According to the problem, Ema had $360 less than Keng Wee, so we set up the first equation:\n    eq1 = Eq(e, k - 360)\n\n    # Ema spent 1/4 of her money, and Keng Wee spent 4/7 of his money.\n    # After spending, they both have the same amount of money left.\n    # So we set up the second equation based on this information:\n    eq2 = Eq(e - e/4, k - (4/7)*k)\n\n    # We solve the system of equations to find the values of e and k.\n    solutions = solve((eq1, eq2), (e, k))\n\n    # Extract Keng Wee's initial amount of money.\n    keng_wee_initial = solutions[k]\n\n    return keng_wee_initial\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth = one_fourth_of_36 * 10\n\n    return int(one_tenth)\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    result = 6.4 * 2.7\n    return result\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # From front to back Lucas is 3rd, and from back to front he is 2nd, which means the rectangle has 3 + 2 - 1 rows.\n    rows = 3 + 2 - 1\n    # From left to right Lucas is 4th, and from right to left he is 3rd, which means the rectangle has 4 + 3 - 1 columns.\n    columns = 4 + 3 - 1\n    # Total number of students is the product of the number of rows and columns.\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = sum(2 * (1/i) for i in range(1, 11)) - 1\n    return ans\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # Initial ratio of girls to boys\n    equation1 = Eq(girls, (9/11) * boys)\n\n    # After 2 girls are transferred in\n    equation2 = Eq(girls + 2, (10/11) * boys)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    # The number of students in the class now is the sum of boys and girls, after 2 girls are transferred in\n    ans = solutions[girls] + 2 + solutions[boys]\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost = 3 * 31 + 2 * 17 + 1 * 78 + 105\n    change = 500 - total_cost\n    return change\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    x, y = symbols('x y')\n\n    # Given equation 2(3x - y) = 2x + 4\n    equation = Eq(2*(3*x - y), 2*x + 4)\n\n    # Solve for y in terms of x\n    y_in_terms_of_x = solve(equation, y)[0]\n\n    # The value of the term within the brackets (2x - y)\n    value_within_brackets = 2*x - y_in_terms_of_x\n\n    # Simplifying the expression\n    simplified_value = value_within_brackets.simplify()\n\n    return simplified_value\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    return solutions[lim] - solutions[tan]\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    trevor, siobhan = symbols('trevor siobhan')\n    \n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n    \n    solutions = solve((equation1, equation2), (trevor, siobhan))\n    \n    return solutions[trevor]\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    cost_per_ticket = total_cost / number_of_tickets\n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(15, 5)\n    ways_without_A_B_C = comb(12, 5)\n    ways_with_A_B_C = comb(12, 2)\n    ways_with_only_one_of_A_B_C = total_ways - ways_without_A_B_C - 3*ways_with_A_B_C\n\n    return ways_with_only_one_of_A_B_C\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol representing Zehan's current age\n    zehan_age_now = symbols('zehan_age_now')\n\n    # Create an equation based on the problem statement\n    equation = Eq(zehan_age_now + 12, 3 * zehan_age_now)\n\n    # Solve the equation for Zehan's current age\n    solution = solve(equation, zehan_age_now)\n\n    # Return Zehan's current age\n    return solution[0]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    return 6 * 3\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    savannah_ratio = 5\n    total_ratio = shaila_ratio + savannah_ratio\n    shaila_sweets = 36\n\n    total_sweets = (shaila_sweets * total_ratio) // shaila_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of lemon juice in the bottle.\n    x, water = symbols('x water')\n    \n    # Original ratio: 2 parts lemon juice to 3 parts water\n    original_ratio = Eq(x / water, 2 / 3)\n    # After adding 80ml, new ratio: (x + 80) parts lemon juice to water parts water\n    new_ratio = Eq((x + 80) / water, 6 / 5)\n\n    # Solve the system of equations for x and water\n    solutions = solve((original_ratio, new_ratio), (x, water))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote Kim's total savings as 's'\n    s = symbols('s')\n\n    # Kim gave 1/3 of her savings to her mother, so she was left with 2/3s\n    # She spent 177 on dresses and 129 on earrings, so she was left with 2/3s - 177 - 129\n    # The money left was 50% (or 1/2) of what she gave to her mother, which is 1/2 * (1/3s)\n    # So the equation will now be: 2/3s - 177 - 129 = 1/6s\n\n    equation = Eq(2/3 * s - 177 - 129, 1/6 * s)\n    \n    # solving for 's'\n    savings = solve(equation, s)\n\n    return savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    know_french = 75\n    know_japanese = 45\n    \n    know_both = (know_french + know_japanese) - total_teachers\n    only_know_french = know_french - know_both\n    \n    return only_know_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increase\n    delay_time = 9 / 60  # 9 minutes converted to hours\n\n    # Usual time to cover the distance at usual speed\n    # is equal to the decreased time to cover the distance at increased speed plus the delay.\n    # Let the distance to be covered be d miles.\n    # Usual time = d / usual_speed\n    # Reduced time = d / increased_speed\n    # Usual time = Reduced time + delay_time\n    # d / usual_speed = d / increased_speed + delay_time\n    # Solving the equation for d:\n    d = (delay_time * usual_speed * increased_speed) / (increased_speed - usual_speed)\n    \n    return d\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    \n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if red_ropes * 2 + blue_ropes * 3 == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let the number we are looking for be represented by 'n'\n    # The equation based on the problem description is: ((n + 8) * 8 - 8) / 8 = 80\n    # Simplify the equation: (n + 8) * 8 - 8 = 80 * 8\n    # (n + 8) * 8 - 8 = 640\n    # (n + 8) * 8 = 640 + 8\n    # (n + 8) * 8 = 648\n    # n + 8 = 648 / 8\n    # n + 8 = 81\n    # n = 81 - 8\n    # n = 73\n    n = 81 - 8\n    return n\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be s (in metres per minute) and the original time be t (in minutes)\n    s, t = symbols('s t')\n\n    # If speed increases by 25%, new speed becomes 1.25s\n    # New time becomes (original time) - 20 minutes, hence t - 20\n    equation1 = Eq(1.25 * s * (t - 20), s * t)\n\n    # If speed decreases by 45 metres per minute, new speed becomes s - 45\n    # New time becomes 1.75 * (original time), hence 1.75t\n    equation2 = Eq((s - 45) * 1.75 * t, s * t)\n\n    # Solve the system of equations to find the values of s and t\n    solutions = solve((equation1, equation2), (s, t))\n    \n    # Original speed and time\n    original_speed = solutions[s]\n    original_time = solutions[t]\n\n    # Distance = speed * time\n    distance = original_speed * original_time\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 7 == 0) and (i % 9 == 2):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    total = 22\n    count = 0\n    for i in range(1, total // 2):\n        if i != total - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    # Total electricity saved in the first half of the year\n    total_first_half = 366\n    \n    # Average electricity saved per month in the second half of the year\n    average_second_half = 65\n    \n    # Number of months in the second half of the year\n    months_second_half = 6\n    \n    # Total electricity saved in the second half of the year\n    total_second_half = average_second_half * months_second_half\n    \n    # Total months in a year\n    total_months = 12\n    \n    # Total electricity saved in the whole year\n    total_year = total_first_half + total_second_half\n    \n    # Average electricity saved per month in the whole year\n    average_year = total_year / total_months\n    \n    return average_year\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:\n            A = i + 41 // i\n            break\n    return A * 7\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    used_brownies = Fraction(1, 7)\n    used_cookies = Fraction(1, 14)\n    used_muffins = Fraction(1, 2)\n\n    total_used = used_brownies + used_cookies + used_muffins\n\n    return total_used\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 12):\n        product *= Fraction(1, i) + 1\n    return product\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x - y, 36)\n    equation2 = Eq(x + y, 98)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number_str = \"333\" * 4  # one '333' block represents 3 digits, and we have 12/3=4 blocks\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n\n    return bags * pens_per_bag\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.70\n    correct_marks = 3\n    wrong_marks = -1\n    total_score = 78\n\n    # calculate the number of questions answered correctly\n    correct_answers = int(total_questions * correct_percentage)\n    # calculate the number of questions answered wrongly\n    wrong_answers = total_questions - correct_answers\n\n    # use the marks rule to calculate the total score\n    actual_score = correct_answers * correct_marks + wrong_answers * wrong_marks\n\n    # find the number of wrong answers that should have existed to get the score of 78\n    # since each wrong answer decreases the score by 4 marks (3 marks not gained for correct and 1 mark deducted)\n    while actual_score != total_score:\n        correct_answers -= 1\n        wrong_answers += 1\n        actual_score = correct_answers * correct_marks + wrong_answers * wrong_marks\n\n    return correct_answers\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Let's use the unitary method to find the cost of 1 file and 1 ruler.\n    \n    # Cost of 6 files + 10 rulers = $40\n    cost_of_6_files_10_rulers = 40\n    \n    # Assuming the cost of 1 file is 'x' and the cost of 1 ruler is 'y',\n    # Then cost of 6 files is '6x' and cost of 10 rulers is '10y'.\n    # We have 6x + 10y = 40 -- Equation (1)\n    \n    # The requirement is to find the cost of 9 files + 15 rulers.\n    # Which will be 9x + 15y.\n    \n    # From equation (1), we can find the value of 'x' + 'y',\n    # 6x + 10y = 40 => Dividing the whole equation by 2 to get 'x' + 'y':\n    # 3x + 5y = 20 -- Equation (2)\n    \n    # What we want is to find 9x + 15y.\n    # From Equation (2), we multiply the whole equation by 3 to scale it to what we want:\n    # (3x + 5y) * 3 = 20 * 3\n    # 9x + 15y = 60\n\n    # Hence, the cost of 9 files + 15 rulers is $60.\n    return 60\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # The last digit of an exponentiation only depends on the base's last digit.\n    # Also, the cycle of the last digits repeats every 4 powers for any base. \n    # Therefore, we can find the last digit of any number raised to the 100th power\n    # by raising it to the 0th power (because 100 is a multiple of 4),\n    # which means the last digit will be 1 for that part of the multiplication.\n    \n    last_digit_4 = (4**100) % 10  # The last digit of 4 raised to any power multiple of 4 is 6\n    last_digit_7 = (7**100) % 10  # The last digit of 7 raised to any power multiple of 4 is 1\n    last_digit_9 = (9**100) % 10  # The last digit of 9 raised to any power multiple of 4 is 1\n    last_digit_11 = (11**100) % 10 # The last digit of 11 (or 1) raised to any power multiple of 4 is 1\n\n    # The last digit of the entire expression will be the product of the last digits found above,\n    # since we are only interested in the last digit of the product, we can simply multiply the\n    # last digits of each part (which are all 1 in this case except for 4) and find the last digit of the result.\n    last_digit_of_expression = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit_of_expression\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john_money, jessie_money = symbols('john_money jessie_money')\n\n    # Equation based on the initial situation\n    equation1 = Eq(john_money, 5/13 * jessie_money)\n\n    # Equation based on the situation after Jessie transfers the money\n    equation2 = Eq(john_money + 600, 1/2 * (jessie_money - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_money, jessie_money))\n\n    # Calculate total money\n    total_money = solutions[john_money] + solutions[jessie_money]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    digit_count_1 = 15\n    digit_count_2 = 14\n    current_count_1 = 0\n    current_count_2 = 0\n    N = 0\n    \n    while current_count_1 < digit_count_1 or current_count_2 < digit_count_2:\n        N += 1\n        current_count_1 += str(N).count('1')\n        current_count_2 += str(N).count('2')\n\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "def solution():\n    from datetime import datetime\n\n    time_in = datetime.strptime(\"10:30\", \"%H:%M\")\n    time_out = datetime.strptime(\"11:00\", \"%H:%M\")\n\n    duration = time_out - time_in\n    \n    return duration.seconds // 60  # Convert from seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # Given ratios\n    shirts_to_caps = Eq(t_shirts / caps, 8/5)\n    \n    # Define the total amount collected and expressions for amounts from T-shirts and caps\n    money_from_shirts = 3 * (t_shirts / 4)\n    money_from_caps = 5 * (caps / 5)\n    total_money_collected = Eq(money_from_shirts + money_from_caps, 132)\n    \n    # Solve the system of equations\n    solutions = solve((shirts_to_caps, total_money_collected), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Calculate the total cost for bananas (12p each) and apples (11p each)\n    total_cost_pence = (3 * 12) + (5 * 11)\n    # Convert the total cost to pounds (Â£1 = 100p)\n    total_cost_pounds = total_cost_pence / 100\n    # Ian pays with a Â£2 coin, so calculate the change\n    change = 2 - total_cost_pounds\n    return change\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_siblings = 7\n    \n    harvir_age = youngest_age + age_difference * (number_of_siblings - 1)\n    \n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n\n    total_spent = calendar_price + ball_price\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left = 360 / 1000  # Convert grams to kilograms\n    flour_used_muffins = 1/5\n    flour_used_cookies = 1/2\n\n    initial_flour = flour_left + flour_used_muffins + flour_used_cookies\n\n    return initial_flour\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # Since the sitting around a table is a circular permutation,\n    # we have to fix one person's position to avoid equivalent rotations.\n    # There are (n - 1)! ways to arrange the remaining people.\n\n    people_count = 4  # Judy, James, Bowen, and myself\n    num_orders = factorial(people_count - 1)\n\n    return num_orders\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eggs_before = symbols('eggs_before')\n    \n    equation = Eq(eggs_before + 24, 3 * eggs_before)\n    \n    num_eggs_before = solve(equation, eggs_before)\n\n    return num_eggs_before[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n    \n    def star(a, b):\n        return 3 * a - 2 * b\n\n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n\n    return ans\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Let the number of oranges be 'o' and lemons be 'l'\n    # 26p = 0.26 pounds, 30p = 0.30 pounds, ï¿¡5 = 5 pounds\n    # 0.26o + 0.30l = 5\n    # Since we can buy whole fruits only, 'o' and 'l' must be integers\n    # We will loop through possible number of oranges and calculate lemons\n    for o in range(0, int(5 / 0.26) + 1):  # o cannot exceed the total when only buying oranges\n        l = (5 - 0.26 * o) / 0.30\n        if l.is_integer():  # number of lemons must be a whole number\n            total_fruits = o + l\n            return int(total_fruits)\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for page in range(1, 441): # 440 pages in total\n        count += str(page).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n    \n    # Leo had $220 more than Jason\n    initial_condition = Eq(leo, jason + 220)\n    \n    # After receiving the salary: Leo got extra $180, Jason got extra $1100\n    # Now Jason has 2 times as much money as Leo\n    final_condition = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all the books\n    same_type_books_factorials = factorial(3) * factorial(4) * factorial(2) * factorial(2)  # Factorials of same type books\n\n    # Divide the factorial of the total number of books by\n    # the product of the factorials of the number of books of the same type\n    ways = factorial(total_books) // same_type_books_factorials\n    \n    return ways\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female visitors on the first day\n    # Let m be the number of male visitors on the first day\n    f, m = symbols('f m')\n\n    # Given the number of male visitors was 450 more than the number of female visitors\n    equation1 = Eq(m, f + 450)\n\n    # On the second day, female visitors increased by 15%\n    # Therefore, the number of female visitors becomes f + 0.15 * f\n    female_second_day = f + 0.15 * f\n\n    # On the second day, male visitors decreased by 18%\n    # Therefore, the number of male visitors becomes m - 0.18 * m\n    male_second_day = m - 0.18 * m\n\n    # The total number of visitors on the second day was 1354\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # The number of visitors on the first day is the sum of females and males\n    first_day_visitors = solutions[f] + solutions[m]\n    \n    return first_day_visitors\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0 or D == 0:  # Skip if A or D is zero, as we need a non-zero leading digit\n            continue\n        if (10 * A + B) - (10 * C + D) == E and len(set([A, B, C, D, E])) == 5:\n            return 10000 * E + 1000 * D + 100 * C + 10 * B + A\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "from math import comb\n\ndef solution():\n    # Since the pencils are identical, we can simplify the problem using\n    # the formula for combinations with repetitions:\n    # C(n + k - 1, k) where n is the number of items to place (7 pencils)\n    # and k is the number of containers (3 pencil cases).\n    return comb(7 + 3 - 1, 3 - 1)\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n\n    total_robots = robots_per_day * days_per_week\n\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start = 345\n    difference = 9\n\n    last_positive = start % difference\n\n    return last_positive\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000\n    num_friends = 5\n    \n    each_pay = total_cost / num_friends\n    \n    return each_pay\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    total_money = 555\n    cost_plain_shirt = 10\n    cost_custom_shirt = 15\n    \n    for custom_shirt_count in range(total_children + 1):\n        plain_shirt_count = total_children - custom_shirt_count\n        if plain_shirt_count * cost_plain_shirt + custom_shirt_count * cost_custom_shirt == total_money:\n            return custom_shirt_count\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # On the first day, the number of male visitors was 450 more than the number of female visitors\n    equation1 = Eq(male_first_day, female_first_day + 450)\n\n    # On the second day, the number of female visitors increased by 15%\n    female_second_day = female_first_day * 1.15\n\n    # On the second day, the number of make visitors decreased by 18%\n    male_second_day = male_first_day * 0.82\n\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(male_second_day + female_second_day, 1354)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    # Return the number of male visitors on the first day\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while 40 >= position * 2:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n\n    # Distance walked at the first speed (150m/min for 10 minutes)\n    distance_first_part = 150 * 10\n\n    # Distance walked at the increased speed (200m/min for t minutes)\n    distance_second_part = 200 * t\n\n    # Total distance is the sum of distances from both parts\n    total_distance = Eq(distance_first_part + distance_second_part, 3700)\n\n    # Solve for t\n    time_second_part = solve(total_distance, t)[0]\n\n    # Total time spent walking is the sum of both parts (10 + t)\n    total_time = 10 + time_second_part\n\n    return total_time\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    # Calculate permutations of all cards\n    permutations_all = factorial(total_cards)\n    # Divide by the permutations of the indistinguishable cards (hearts, spades, and diamonds)\n    ways = permutations_all // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # the smallest multiple of 5\n    second_digit = 1  # the smallest odd number among the natural numbers\n    third_digit = 9  # the largest odd single digit number\n    fourth_digit = 0  # the smallest even number\n    fifth_digit = 8  # the largest single digit multiple of 2\n    sixth_digit = 3  # the smallest odd number greater than 1 in nature\n    seventh_digit = 0  # multiples of 2 and 5 must end in 0\n\n    return int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    departure_time_singapore = 5  # 05:00 in Singapore\n    arrival_time_london = 11     # 11:00 in London\n\n    # Since Singapore is 7 hours ahead, subtract 7 hours from Singapore's departure time\n    # to get the time equivalent in London when the flight took off.\n    departure_time_london = departure_time_singapore - 7\n    if departure_time_london < 0:\n        departure_time_london += 24  # Convert to valid 24-hour format\n\n    # Calculate the duration of the flight\n    flight_duration = arrival_time_london - departure_time_london\n    if flight_duration < 0:\n        flight_duration += 24  # Flight duration cannot be negative\n\n    return flight_duration\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 80  # Pages read on the last day\n    page_increase = 5\n    current_read = 20  # Pages read on the first day\n\n    while current_read < 80:\n        total_pages += current_read\n        current_read += page_increase\n    \n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    # Amount of almonds bought\n    almonds = 4/9\n    # Amount of cashew nuts bought\n    cashews = 1/3\n    # Calculate the difference\n    difference = almonds - cashews\n\n    return difference\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    \n    # Jon has 30% more money than Miguel\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    # Together they have Â£46\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum = 0\n    for i in range(1, 28):\n        if i % 2 == 0:  # if i is even, subtract the number\n            sum -= (2 * i)\n        else:  # if i is odd, add the number\n            sum += (2 * i + 52)\n    return sum\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's initial multiplication is correct, where the quotient times the divisor should give a product\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    product = quotient * divisor\n    \n    # In order to find the dividend, we should add the remainder to the product of quotient and divisor\n    # Johnny's mistake is that he added the divisor instead of the remainder\n    correct_dividend = product + remainder\n    \n    return correct_dividend\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        S, A, M, O, G = perm\n        if S == 0 or O == 0:  # S and O cannot be zero as they are the first digits in the numbers\n            continue\n        SASMO = 10000 * S + 1000 * A + 100 * S + 10 * M + O\n        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g\n    # We know that total number of boys and girls is 40, so b + g = 40\n    # Each boy distributed 4 bags, and each girl distributed 3 bags\n    # The boys distributed 62 more bags than the girls, so 4b - 3g = 62\n    # We need to find a solution for b\n\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Setting up the equations based on the given problem\n    equation1 = Eq(b + g, 40)  # total number of boys and girls\n    equation2 = Eq(4*b - 3*g, 62)  # difference in the number of bags distributed\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # We're interested in the number of boys\n    return solutions[b]\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_times = total_rolls * probability_of_5\n\n    return expected_times\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    # Building the sequence until the first 11 appears\n    for i in range(1, 12):\n        sequence.extend([i] * i)\n    # Finding the median\n    middle = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[middle - 1] + sequence[middle]) / 2\n    else:\n        median = sequence[middle]\n    \n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cut_length = symbols('cut_length')\n    \n    equation = Eq(65 - cut_length, 3 * (29 - cut_length))\n    \n    solution = solve(equation, cut_length)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    result = 15 / 0.05\n    return result\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12 * 6\n    denominator = 18\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C) / 3, 45)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    dress_cost = solve(total_cost, x)\n\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 odd digits (1, 3, 5, 7, 9)\n    odd_digits_count = 5\n    \n    # Each place (hundreds, tens, ones) can be any of the 5 odd digits\n    # Since each place is independent of each other, we use multiplication rule\n    total_numbers = odd_digits_count * odd_digits_count * odd_digits_count\n    \n    return total_numbers\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days it takes for the lazy one to paint the house on their own\n    energetic_rate = 1/12\n    lazy_rate = symbols('lazy_rate')\n    \n    # Equation based on combined work: (1/energetic's rate + 1/lazy's rate) * time = 1 job\n    equation = Eq((energetic_rate + lazy_rate) * 8, 1)\n    \n    lazy_days = solve(equation, lazy_rate)\n    \n    # Since lazy_rate is the rate in days^-1, we get the number of days by inverting it\n    return 1/lazy_days[0]\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    # Given ratio of Nell to Joe: 4:5\n    # Nell received 24 sweets, which correspond to her ratio, which is 4\n    nell_ratio = 4\n    nell_sweets = 24\n\n    # Total ratio units combining both Nell and Joe\n    total_ratio_units = nell_ratio + 5  # Nell's 4 units plus Joe's 5 units\n\n    # Total sweets calculation\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio_units\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let x be the length, and y be the width of the original rectangle.\n    # According to the problem, increasing the length by 12 cm gives a new perimeter of 38 cm.\n    # 2(x + 12) + 2y = 38\n    \n    # Solving for x from the equation\n    # x + 12 + y = 19\n    # x + y = 7\n    # The perimeter of the original rectangle is 2x + 2y\n    \n    # Since we already have x + y, we can multiply it by 2 to get the original perimeter.\n    original_perimeter = 2 * (19 - 12)\n    return original_perimeter\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    JA, NT = symbols('JA NT')  # JA for Jamie-Anne, NT for Natasha\n\n    equation1 = Eq(JA, 5/3 * NT)\n    equation2 = Eq(JA - NT, 18)\n\n    solutions = solve((equation1, equation2), (JA, NT))\n\n    total_stamps = solutions[JA] + solutions[NT]\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # The first digit 'a' must be non-zero\n        for b in range(0, 10):  # 'b' can be from 0 to 9\n            if int(f\"{a}{b}\") + int(f\"{b}{a}\") + b == int(f\"{a}{a}{b}\"):\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    # Original situation: Sana had 8 times as many coins as Mina, together they had 234 coins\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sana, mina))\n    mina_initial = solutions[mina]\n\n    # Mina gave away 12 coins\n    mina_final = mina_initial - 12\n\n    return mina_final\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3 / 7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3 / 8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3 / 4\n    number_of_small_bags = remaining_after_tuesday / small_bag_weight\n\n    return int(number_of_small_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    students = 123\n    total_flour = flour_per_student * students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page in range(1, 121):\n        count += str(page).count('7')\n    return count\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    pence_in_pound = 100  # 1 pound = 100 pence\n\n    total_pence = pounds * pence_in_pound\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Each corner is counted twice when calculating 6 * 4 since the corners are shared\n    # between two sides. Therefore, we subtract the 4 corners, to account for the\n    # double counting, and add them back once.\n    flowers_per_side = 6\n    total_sides = 4\n    corners = 4\n    \n    flowers = (flowers_per_side * total_sides) - (corners * 2) + corners\n    \n    return flowers\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Number of lamp posts Uncle Sam passes every 50 seconds is 10 (from the first to the eleventh is 10 intervals)\n    lamp_posts_per_50_seconds = 10\n\n    # Calculate how many seconds it takes to pass one lamp post\n    seconds_per_lamp_post = 50 / lamp_posts_per_50_seconds\n\n    # Calculate how many lamp posts are passed in 80 seconds\n    lamp_posts_in_80_seconds = 80 / seconds_per_lamp_post\n\n    # We'll always get that first lamp post, so we add 1 to the count.\n    ans = int(lamp_posts_in_80_seconds) + 1\n\n    return ans\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n\n    solutions = solve(equation, total_items)\n\n    total_items_value = solutions[0]\n    lemons_value = total_items_value - apples.subs(total_items, total_items_value) - bananas.subs(total_items, total_items_value)\n\n    return int(lemons_value)\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_length = basketball_court_length + 56\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount_percentage = ((original_price - 67.50) / original_price) * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    result = 1.3 - 0.02\n    return result\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    fraction = 5 / 6\n    \n    total_two_days = first_day + second_day\n    total = total_two_days / fraction\n\n    return int(total)\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place has a value of 800, so the digit is 8.\n    hundreds = 8\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place.\n    thousands = hundreds + 1  # 9\n\n    # The digit in the ones place is the sum of all the factors of 4.\n    # The factors of 4 are 1, 2, and 4.\n    ones = sum([1, 2, 4])  # 7\n\n    # The digit in the tens place is the difference between the digit in the\n    # hundreds place and the digit in the ones place.\n    tens = abs(hundreds - ones)  # 1\n\n    # Assembling the number\n    num = thousands * 10000 + hundreds * 1000 + hundreds * 100 + tens * 10 + ones\n\n    return num\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    # Smallest s means we need the smallest fraction that is greater than 3/10\n    # and less than 5/16, starting with s = 1 and increasing until we find r/s\n    # that satisfies the inequalities.\n    from fractions import Fraction\n    \n    # Start with the smallest possible s which is 1\n    s = 1\n    while True:\n        # Find the smallest r for the current s such that r/s > 3/10\n        r = ((3 * s) // 10) + 1\n        \n        # Check the two conditions for the inequality to hold\n        if Fraction(3, 10) < Fraction(r, s) < Fraction(5, 16):\n            break\n        \n        # If the conditions aren't met, increment s\n        s += 1\n    \n    return s\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    max_children = 40\n    current_children = 15\n    max_adults = 24\n    remaining_seats_for_children = max_children - current_children\n    remaining_seats_for_adults = (remaining_seats_for_children * max_adults) / max_children\n\n    return int(remaining_seats_for_adults)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factors\n    prime_factors = factorint(28)\n    \n    # To make a perfect square, all prime factors must be in pairs\n    # So, we need to multiply 28 by the prime factor that is missing a pair\n    mult = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 != 0:  # Check if exponent is odd\n            mult *= prime\n\n    return mult\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    # Time it takes to cook one batch of 2 pancakes\n    time_for_2_pancakes = 3 # minutes\n\n    # Total time available to cook\n    total_time = 12 # minutes\n\n    # Number of batches that can be cooked in the total time\n    batches = total_time // time_for_2_pancakes\n\n    # Total number of pancakes\n    total_pancakes = batches * 2 # 2 pancakes per batch\n\n    return total_pancakes\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n    # By the pigeonhole principle, at least one size must have at least:\n    same_size_min = (total_students + num_sizes - 1) // num_sizes\n    return same_size_min\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n\n    ans = (percentage / 100) * total\n    \n    return ans\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Russell's current age\n    russell_now = symbols('russell_now')\n\n    # Create the equation based on the problem statement\n    # Russell is 4 times as old as himself 16 years ago, in 32 years time:\n    equation = Eq(russell_now + 32, 4 * (russell_now - 16))\n\n    # Solve the equation for Russell's current age\n    russell_age_now = solve(equation, russell_now)\n\n    return russell_age_now[0]\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for people in range(1, 100):\n        if (people // 2) == (19 - 6):\n            return people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                pip_number = int(f\"{A}{B}{C}{A}\")\n                bud_number = int(f\"{A}{C}{B}{A}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    cuts_needed = 5 - 1  # To cut into 5 pieces, we need 4 cuts.\n    time_per_cut = 2  # Time taken for each cut is 2 minutes.\n\n    total_time = cuts_needed * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let the number of shelves with math books be m\n    # Let the number of shelves with spelling books be s\n    # We know s + m = 15 (because there are 15 shelves)\n    # And we know 9 * s + 4 * m = total number of books including the 72 spelling books\n    \n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n    math_books_per_shelf = 4\n    \n    # Calculate number of shelves with spelling books\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    \n    # Calculate number of shelves with math books\n    shelves_with_math_books = 15 - shelves_with_spelling_books\n    \n    # Calculate total number of math books\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n    \n    return int(total_math_books)\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    time_for_3_floors = 6  # Time from first to fourth floor (3 intervals)\n    total_intervals = 9  # Number of intervals from first to tenth floor\n\n    # Since speed is constant, time is directly proportional to the number of intervals\n    time_for_9_floors = (time_for_3_floors / 3) * total_intervals\n\n    return time_for_9_floors\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the initial number of students in Class 6A,\n    # and B be the initial number of students in Class 6B.\n    A, B = symbols('A B')\n\n    # Initially, the number of students in Class 6A was 4/9 of Class 6B.\n    equation1 = Eq(A, 4*B/9)\n\n    # After reshuffling, the number of students in both classes became equal.\n    # 3 students went from Class 6A to Class 6B,\n    # 18 students went from Class 6B to Class 6A.\n    equation2 = Eq(A - 3 + 18, B + 3 - 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    # Original amounts\n    original_chocolate = 40\n    original_biscuits = 100\n\n    # Available biscuits\n    available_biscuits = 75\n\n    # Calculate the proportion of chocolate needed\n    proportion = available_biscuits / original_biscuits\n    chocolate_needed = original_chocolate * proportion\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    # Define the symbols to be used in the equation\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the salary\n    s = symbols('s')\n    \n    # According to the problem 1/5 of his salary is left after the purchases\n    # Therefore, 4/5 of his salary is spent on the DVD player and the TV\n    # Given that he spent $740 on the DVD player, let's find the money spent on the TV\n    # 3/4 of the remaining money (after buying the DVD player) is spent on the TV\n    # Thus the remaining amount after buying the DVD player is s - 740\n    # The money spent on the TV is then (3/4)*(s - 740)\n    # Combine spent money on DVD and TV and it makes 4/5 of his salary\n    # The equation is then 740 + (3/4)*(s - 740) = (4/5)*s\n    eq = Eq(740 + (3/4) * (s - 740), (4/5) * s)\n    \n    # Solve the equation for 's'\n    solution = solve(eq, s)\n    \n    # As there might be multiple solutions, we take the first one.\n    salary = solution[0]\n    \n    # Return the final salary value\n    return salary\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    days_in_week = 7\n\n    total_earnings = average_daily_earnings * days_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    difference = 3\n    harry_flowers = luna_flowers - difference\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = 32 / 4  # From the equation 32/n = n/2, we get n^2 = 32*2 = 64 and thus n = sqrt(64)\n    return n\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - 9*6 - 7*6\n    return ans\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    first_distance = 280  # meters\n    middle_distance = 400  # meters\n    sprint_distance = 800 - first_distance - middle_distance  # meters\n\n    first_speed = 7  # meters per second\n    middle_speed = 5  # meters per second\n    sprint_speed = 8  # meters per second\n\n    first_time = first_distance / first_speed  # time for first 280 meters\n    middle_time = middle_distance / middle_speed  # time for middle 400 meters\n    sprint_time = sprint_distance / sprint_speed  # time for sprint stage\n\n    total_time = first_time + middle_time + sprint_time  # total time for the race\n\n    return total_time\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways_to_arrange = factorial(total_cards)\n    ways_to_arrange //= factorial(4)  # Dividing by factorial of identical yellow cards\n    ways_to_arrange //= factorial(3)  # Dividing by factorial of identical red cards\n    ways_to_arrange //= factorial(7)  # Dividing by factorial of identical green cards\n    return ways_to_arrange\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    initial_students = 16 * 2  # The 16th student is directly opposite the 8th, so there are 16 students in between them, making it a total of 32 students originally.\n    new_students = 22 * 2  # The 22nd student is directly opposite the 8th, now 22 students are between them, making it a total of 44 students now.\n\n    # Calculate the number of new students that joined.\n    additional_students = new_students - initial_students\n    \n    return additional_students\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    # Using sympy for solving linear equations\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknown values\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Define equations based on the problem statement\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    after_charlene_gives = Eq(charlene - 15, betsy + 15)\n    after_betsy_gives = Eq(betsy + 15 - 8, anna + 8)\n    final_ratio = Eq(2*(betsy - 8), anna + 8)\n    final_ratio_2 = Eq(5*(charlene - 15), betsy - 8)\n    final_ratio_3 = Eq(7*(charlene - 15), anna + 8)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles, after_charlene_gives, after_betsy_gives, final_ratio, final_ratio_2, final_ratio_3), (anna, betsy, charlene))\n    \n    # Get the answer for the number of marbles Betsy had at first\n    return solutions[betsy]\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    digits = 0\n    for i in range(1, 268 + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the white paper in cm (to avoid floating point issues)\n    length_cm = 136\n    width_cm = 80\n\n    # Calculate the greatest common divisor of length and width\n    square_side = gcd(length_cm, width_cm)\n\n    # Calculate the number of squares that can be cut\n    num_squares = (length_cm // square_side) * (width_cm // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    equation1 = Eq(lollipops / gum_drops, 5 / 7)\n    equation2 = Eq((lollipops + 120) / (gum_drops + 120), 4 / 5)\n\n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n\n    total_candy_now = solutions[lollipops] + 120 + solutions[gum_drops] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    \n    # Three digit numbers range from 100 to 999, we are using digits 4, 5, and 7.\n    for d1 in [4, 5, 7]:      # Hundreds digit\n        for d2 in [4, 5, 7]:  # Tens digit\n            for d3 in [4, 5, 7]:  # Units digit\n                if (d1*100 + d2*10 + d3) % 2 != 0:  # Check if the number formed is odd\n                    count += 1\n   \n    return count\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    def count_divisible_by(n, div):\n        return (n-1) // div\n\n    count_5 = count_divisible_by(201, 5)\n    count_7 = count_divisible_by(201, 7)\n    count_5_and_7 = count_divisible_by(201, 5*7)\n    \n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    equation1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for x in range(1000, 10000):  # assuming the original number has at least 4 digits\n        if x - int(str(x)[:-1]) == 135:\n            return x\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    ans = (49 * 57) + 7\n    return ans\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams in the league\n    n = symbols('n')\n\n    # Each team plays each other team twice, so the total number of matches is n*(n-1)\n    # Since every match involves two teams, we divide by 2 to get the actual number of matches\n    equation = Eq(n*(n-1), 60)  # 30 matches * 2 because each match is played twice\n\n    # Solve for n\n    ans = solve(equation, n)\n\n    # Return the positive value because the number of teams cannot be negative\n    return [a for a in ans if a.is_real and a > 0][0]\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    trips_to_cross = 2  # One trip to cross and another to return with the boat\n\n    # Boat trips needed: \n    # 1. To take students across the river \n    # 2. To come back with an empty boat (not counted on last trip because boatman does not need to return)\n    total_trips = ((students // (boat_capacity - 1)) * trips_to_cross) + (0 if students % (boat_capacity - 1) == 0 else 1)\n    \n    # Last trip does not require a return, so subtract one trip\n    total_trips -= 1\n\n    return total_trips\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2 * 10\n    hundreds = 3 * 100\n    \n    number = hundreds + tens + ones\n    \n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    ans = 100 / (1 + 1/99)\n    return ans\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise.\n    # According to the principle of inclusion-exclusion:\n    # Number of students who chose A or B or both = Number who chose A + Number who chose B - Number who chose both\n    # Also, 10% chose neither, therefore, 90% chose either A or B or both.\n    \n    # Given:\n    # 80% chose A, which is 0.8x students\n    # 35% chose B, which is 0.35x students\n    # 10% chose neither, which means 90% chose either A, B or both, which is 0.9x students\n    # Number who chose both A and B is given as 75 students.\n    \n    # So we have the equation:\n    # 0.8x + 0.35x - 75 = 0.9x\n    # This simplifies to:\n    # 1.15x - 75 = 0.9x\n    # 1.15x - 0.9x = 75\n    # 0.25x = 75\n    # x = 75 / 0.25\n    # x = 300\n\n    x = 75 / 0.25\n    return int(x)\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n    \n    # Difference in age between Frank and Alex is the same as between Alex and Paul\n    equation1 = Eq(frank - alex, alex - paul)\n    \n    # Sum of their ages is 99\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n    \n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    all_numbers = [''.join(p) for p in permutations('1469')]\n    avg_value = sum(int(number) for number in all_numbers) / len(all_numbers)\n    return avg_value\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # At first, the number of boys and girls is equal.\n    equation1 = Eq(boys, girls)\n\n    # After 60 boys and 12 girls leave, twice as many girls as boys remain.\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for digit in range(10):\n        for tens in range(10):\n            for ones in range(10):\n                if digit != tens and digit != ones and tens != ones and digit == 9 and (tens + ones) == 15 and ones % 2 == 0:\n                    return int(f\"{digit}{tens}{ones}\")\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    \n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    \n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    def number_of_factors(n):\n        factors = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Generate all possible combinations of 9 numbers from 1 to 13\n    all_combinations = list(combinations(range(1, 14), 9))\n\n    # Set the condition initialized to None\n    correct_combination = None\n\n    for combo in all_combinations:\n        factors_count = [number_of_factors(num) for num in combo]\n\n        # Two students know the number of factors in their number,\n        # so there must be exactly two unique factors counts\n        unique_factors_count = list(set(factors_count))\n        \n        if len(unique_factors_count) == 7:  # 9 - 2 = 7 unique factors after removing duplicates\n            two_counts = [count for count in unique_factors_count if factors_count.count(count) == 2]\n\n            # Check which two students raised their hands if we know that these could be pairs\n            for pair in combinations(two_counts, 2):\n                alice_options = [num for num in combo if number_of_factors(num) in pair]\n                \n                if len(alice_options) >= 3:  # Alice sees at least two options since she doesn't know her number yet\n                    alice_options.sort()\n                    \n                    for alice in alice_options:\n                        if alice % 2 == 1:  # Alice knows her number is odd\n                            may = alice - 2\n                            mark = may - 1\n                            \n                            if may in combo and mark in combo:\n                                # If it satisfies Alice, May, and Mark's constraints, we have our combination.\n                                correct_combination = combo\n                                break\n            if correct_combination is not None:\n                break\n\n    # Calculate the product of the four numbers that were not picked\n    remaining_numbers = set(range(1, 14)) - set(correct_combination)\n    product_of_remaining = prod(remaining_numbers)\n\n    return product_of_remaining\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    # Speed of the van\n    speed_van = 80  # in km/h\n    # Speed of the car\n    speed_car = 120  # in km/h\n    \n    # Time the van traveled before the car starts, in hours\n    time_van_start = 3\n    \n    # Distance the van has traveled in 3 hours, before the car starts\n    distance_van_traveled = time_van_start * speed_van\n    \n    # The speed difference between the car and the van\n    speed_difference = speed_car - speed_van\n    \n    # Time needed for the car to catch up with the van\n    time_to_catch_up = distance_van_traveled / speed_difference\n    \n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    from itertools import combinations\n\n    # Number of ways to choose hats (0 to 4 hats)\n    hat_choices = sum(1 for r in range(5) for _ in combinations(range(4), r))\n    \n    # 3 shirts, 2 pairs of pants, and 1 skirt are not optional, so they are always chosen\n    # Therefore, multiply by 1 for each of those items\n    shirts_choices = 3\n    pants_choices = 2\n    skirts_choices = 1\n\n    # Use the law of multiplication for independent events (choices)\n    ans = hat_choices * shirts_choices * pants_choices * skirts_choices\n    return ans\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A's speed in pages per minute\n    speed_A = 300 / 12\n    \n    # Printer B's speed in pages per minute\n    speed_B = 300 / 10\n    \n    # Combined speed of both printers\n    combined_speed = speed_A + speed_B\n    \n    # Time in minutes for which printers are used\n    time_minutes = 0.5 * 60  # converting half an hour to minutes\n    \n    # Total pages printed by both printers\n    total_pages = combined_speed * time_minutes\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert the repeating decimals into fractions\n    fraction_1 = Fraction('0.01').limit_denominator()\n    fraction_2 = Fraction('0.01').limit_denominator()\n    \n    # Multiply the fractions\n    product_fraction = fraction_1 * fraction_2\n    \n    # Convert the product into a decimal\n    product_decimal = product_fraction.numerator / product_fraction.denominator\n    \n    # Calculate the length of one repetend\n    repetend_length = len(str(product_fraction.numerator)) - len(str(product_fraction.denominator))\n    \n    return repetend_length\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            date = f\"{day:02d}/{month:02d}/2019\"\n            count += date.count(\"3\")\n    return count\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    # Let the total number of items be x\n    # According to the question, we have:\n    # 2/3 * x (number of apples) - 1/1 * x (number of lemons) = 12\n    # We also know that:\n    # 1/1 * x (number of lemons) = x - 2/3 * x - 1/9 * x (total items minus apples and bananas)\n    \n    # Simplifying, we get:\n    # 1/1 * x = x - 5/9 * x\n    # 1/1 * x = 4/9 * x\n    # This represents the number of lemons\n    \n    # Now setting up the equation:\n    # (2/3 * x) - (4/9 * x) = 12\n    # (6/9 * x) - (4/9 * x) = 12\n    # (2/9 * x) = 12\n    # x = 12 * (9/2)\n    # x = 54 (total number of items)\n    \n    # The number of lemons is 4/9 * x\n    lemons = (4/9) * 54\n    return int(lemons)\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of durian, chocolate, and strawberry puffs sold be d, c, and s respectively\n    d, c, s = symbols('d c s')\n\n    # Equations based on given ratios and total amount collected\n    equation1 = Eq(d, 3/9 * (d + c + s))  # 3 parts out of 3+4+2 parts for durian\n    equation2 = Eq(c, 4/9 * (d + c + s))  # 4 parts out of 3+4+2 parts for chocolate\n    equation3 = Eq(s, 2/9 * (d + c + s))  # 2 parts out of 3+4+2 parts for strawberry\n    equation4 = Eq(5*d + 3*c + 4*s, 560)  # Total amount equals $560\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (d, c, s))\n\n    # Money collected from the sale of durian puffs which is 5 times the number of durian puffs sold\n    money_collected_durian = 5 * solutions[d]\n\n    return money_collected_durian\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for digit1 in range(1, 10):  # Loop through possible tens digits (cannot be 0)\n        for digit2 in range(10):  # Loop through possible ones digits\n            original_number = digit1 * 10 + digit2\n            swapped_number = digit2 * 10 + digit1\n            if swapped_number == (original_number // 3) + 3 and original_number % 3 == 0:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    interest_first_three_years = 1.06 ** 3\n    interest_last_two_years = 1.08 ** 2\n    total_amount = principal * interest_first_three_years * interest_last_two_years\n    return round(total_amount, 2)\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person and their respective apartment level\n    Zachary, Yvonne, Xavier, Waylon, A, B, C, D = symbols('Zachary Yvonne Xavier Waylon A B C D', integer=True)\n    \n    # Define the provided conditions\n    conditions = [\n        D > A,    # A stays in a unit higher than C but lower than D (1)\n        A > C,\n        B < Xavier,    # B stays in a unit lower than Xavier (2)\n        D == 5 * Yvonne,    # D stays in a unit that is 5 times Yvonne's unit (3)\n        Zachary + 2 - Xavier == Zachary - Waylon,    # If Zachary moves two levels above, then the diff with Waylon and Xavier is the same (4)\n        Zachary == Yvonne + Xavier,    # Zachary's level is the sum of Yvonne and Xavier's levels (5)\n        # Set the bounds for apartment levels\n        A > 0, A <= 18,\n        B > 0, B <= 18,\n        C > 0, C <= 18,\n        D > 0, D <= 18,\n        Zachary > 0, Zachary <= 18,\n        Yvonne > 0, Yvonne <= 18,\n        Xavier > 0, Xavier <= 18,\n        Waylon > 0, Waylon <= 18,\n    ]\n    \n    # Solve the system of equations based on the conditions\n    solutions = solve(conditions)\n    # Filter to include only valid solutions (within apt. level limits)\n    valid_solutions = [s for s in solutions if all(1 <= s[var] <= 18 for var in [A, B, C, D, Zachary, Yvonne, Xavier, Waylon])]\n    \n    # Since A could be Zachary, Yvonne, Xavier, or Waylon, we get their specific values for valid solutions\n    # We're assuming there's only one valid solution\n    ans = valid_solutions[0][A] if valid_solutions else None\n    \n    return ans\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raisin_roll_price, donut_price = symbols('raisin_roll_price donut_price')\n    equation1 = Eq(5 * raisin_roll_price + 6 * donut_price, 14.70)\n    equation2 = Eq(raisin_roll_price, 3 * donut_price)\n\n    solutions = solve((equation1, equation2), (raisin_roll_price, donut_price))\n\n    return solutions[raisin_roll_price]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Given number of students from each school\n    students_school1 = 24\n    students_school2 = 36\n    students_school3 = 42\n\n    # Calculate the greatest common divisor of the three numbers\n    gcd12 = gcd(students_school1, students_school2)  # GCD of school 1 and 2\n    gcd123 = gcd(gcd12, students_school3)            # GCD of all three schools\n\n    return gcd123\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers at $50.\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    \n    # A notebook and a pencil case cost $6.\n    equation2 = Eq(notebook + pencil_case, 6)\n    \n    # A pencil case and an eraser cost $9.\n    equation3 = Eq(pencil_case + eraser, 9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '8']\n    all_permutations = [''.join(p) for p in permutations(digits)]\n    return len(all_permutations)\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # Because we reach up to 12 and each number n appears n times.\n    half = total_numbers // 2\n\n    numbers_written = 0\n    for i in range(1, 13):\n        numbers_written += i\n        if numbers_written >= half:\n            return i  # This will be the median value.\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    total_digits = 0\n\n    for i in range(7, 41):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # The large cuboid's dimensions are 7x5x14 and it's cut into 7*5*14 = 490 small cubes of size 1x1x1.\n    # Only the small cubes at the corners of the large cuboid will have exactly three faces painted.\n    # Each corner of a cuboid has one small cube that fits this description.\n    # A cuboid has 8 corners, so there are 8 small cubes with exactly three faces painted.\n\n    # Number of small cubes with exactly three faces painted is 8\n    ans = 8\n\n    return ans\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage games calculation\n    # In each group, every team plays against every other team.\n    # So, in a group of 4 teams, there will be C(4,2) games.\n    # Since there are 8 groups, we multiply by 8 to get all the group stage games.\n    teams_in_group = 4\n    games_in_group = (teams_in_group * (teams_in_group - 1)) // 2\n    group_games = games_in_group * 8\n\n    # Knockout round games calculation\n    # Every match in the knockout round eliminates one team until there's one team left.\n    # This means we need one less game than the number of teams in the knockout round.\n    # There are 16 teams in the knockout round (2 from each group), so there will be 15 games.\n    knockout_teams = 16\n    knockout_games = knockout_teams - 1\n\n    # Total games is the sum of group stage games and knockout round games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    # Red light flashes 4 times a minute, so its interval is 60/4 = 15 seconds\n    # Green light flashes 6 times a minute, so its interval is 60/6 = 10 seconds\n    # We need to find the least common multiple (LCM) of the two intervals to find their flashing interval\n\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a // gcd(a, b) * b\n\n    # Calculate LCM of 15 (red light) and 10 (green light)\n    flash_interval = lcm(15, 10)\n\n    # Find out how many times they flash together in an hour.\n    # There are 3600 seconds in an hour\n    flashes_same_instant = 3600 // flash_interval + 1  # including the first and the last times\n    return flashes_same_instant\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    number = symbols('number')\n    equation = Eq(3 * number + 1, 22)\n    solution = solve(equation, number)\n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = 0.4 * total_paintings\n    still_lifes = total_paintings - landscapes\n    \n    french_artists_landscape = 25\n    french_artists_total = 40\n    french_artists_still_lifes = french_artists_total - french_artists_landscape\n    \n    not_french_still_lifes = still_lifes - french_artists_still_lifes\n    \n    return int(not_french_still_lifes)\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink\n    max_volume_per_glass = total_volume // 9  # Maximum volume in each glass\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Given the sum of the first 9 terms (S9) and the sum of first 27 terms (S27)\n    S9 = 99\n    S27 = 540\n    \n    # The formula for the sum of the first n terms of an arithmetic sequence is given by:\n    # S = n/2 * (a + l) where n is the number of terms, a is the first term and l is the last term\n    \n    # Denote a1 as the first term and d as the common difference\n    # We can express the 9th term as a1 + 8d and the 27th term as a1 + 26d\n    \n    # Then we have two equations:\n    # S9 = 9/2 * (a1 + (a1 + 8d)) = 99\n    # S27 = 27/2 * (a1 + (a1 + 26d)) = 540\n    \n    # Simplify and solve for a1 and d\n    # S9 = 9/2 * (2a1 + 8d) => 2 * 99 = 9 * (2a1 + 8d) => 198 = 18a1 + 72d => 11a1 + 4d = 99 (Equation 1)\n    # S27 = 27/2 * (2a1 + 26d) => 2 * 540 = 27 * (2a1 + 26d) => 1080 = 54a1 + 702d => 20a1 + 26d = 540 (Equation 2)\n    \n    # Multiply the first equation by 2 and subtract from the second equation to solve for d\n    # (20a1 + 26d) - 2 * (11a1 + 4d) = 540 - 2 * 99\n    # 20a1 + 26d - 22a1 - 8d = 540 - 198\n    # -2a1 + 18d = 342\n    \n    # Divide the whole equation by 18 to find d\n    # -a1 + d = 19\n    # d - a1 = 19 => a1 = d - 19 (Equation 3)\n    \n    # Substitute a1 in Equation 1 with the value obtained from Equation 3\n    # 11(d - 19) + 4d = 99\n    # 11d - 209 + 4d = 99\n    # 15d = 308\n    # d = 308 / 15\n\n    d = 308 / 15\n    \n    # Now solve for a1\n    # a1 = d - 19\n    a1 = d - 19\n    \n    # Now we can find the sum of the first 16 terms (S16) using the sum formula\n    # S16 = 16/2 * (a1 + (a1 + 15d))\n    # S16 = 8 * (2a1 + 15d)\n    \n    S16 = 8 * (2 * a1 + 15 * d)\n    \n    return int(S16)\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    weight1 = 100\n    concentration1 = 0.50\n\n    weight2 = 400\n    concentration2 = 0.80\n\n    total_weight = weight1 + weight2\n    total_rice = (weight1 * concentration1) + (weight2 * concentration2)\n\n    concentration_of_new_mixture = total_rice / total_weight\n\n    return concentration_of_new_mixture\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_per_minute = 24  # speed in meters per minute\n    time_in_seconds = 300\n    time_in_minutes = time_in_seconds / 60\n\n    distance = speed_per_minute * time_in_minutes\n\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n    last_five_digits = str(total_sum)[-5:]\n    ans = int(last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method\n    # Total amount of hay can feed 12 horses for 15 days,\n    # so it can feed 1 horse for 12 * 15 days.\n    hay_for_one_horse = horses_initial * days_initial\n\n    # Now, find out how many days it can feed 20 horses:\n    days_final = hay_for_one_horse / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let 'x' be the number of years later when the sum of their ages is 48\n    # Oliver's age in 'x' years would be (20 + x)\n    # Lin's age in 'x' years would be (26 + x)\n    # We can write an equation based on the sum of their ages:\n    # (20 + x) + (26 + x) = 48\n    \n    # Solving this equation for 'x'\n    x = (48 - 20 - 26) / 2  # Simplify the equation to find x\n    \n    return int(x)\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for multiplier in range(1, 1000):  # We assume the answer exists within reasonable bounds.\n        num = 35 * multiplier\n        if str(num).endswith('35') and sum(map(int, str(num))) == 35:\n            return num\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # The house number is of the form: abcd\n    # When the first digit is moved to the one's place, the number becomes: bcd + a * 1000\n    # The new number is bigger by 4707: bcd + a * 1000 = abcd + 4707\n    # We can rewrite the equation as: a * 1000 + bcd - abcd = 4707\n    # Simplifying, we get: 999a + (bc - a)c + d = 4707, where bc is the two-digit number formed by b and c.\n\n    # Since the problem must hold for any value of b and c we can assume the simplest bc = 10*b + c = 10\n    # Now our equation becomes: 999a + d = 4707\n    # Considering the constraints of a digit (0 - 9), we can simply check each possible value for a:\n    for a in range(1, 10):  # a cannot be 0 since it's the first digit of a 4-digit number\n        for d in range(10): # d can range from 0 to 9 since it's the fourth digit of a 4-digit number\n            if 999 * a + d == 4707:\n                bcd = 4707 - a * 1000\n                b = bcd // 100  # Extract the hundreds digit\n                cd = bcd % 100  # Get the last two digits\n                c = cd // 10    # Extract the tens digit from the last two digits\n                # check if a 4-digit number is formed\n                if 1000 <= a * 1000 + b * 100 + c * 10 + d <= 9999:\n                    return a * 1000 + b * 100 + c * 10 + d\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    for year in range(1901, 2000):\n        if year % 4 == 0:\n            total_days += 366  # Leap year\n        else:\n            total_days += 365  # Non-leap year\n\n    total_days += 366  # Adding the leap year 2000\n\n    return total_days\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    y = symbols('y')\n\n    watch_cost = 4 * y\n    handbag_cost = 20\n    each_child_received = y - 5\n\n    total_money_initially = 8 * y\n    money_given_to_children = 2 * each_child_received\n\n    # Equation for the total expenditures and the remaining money given to children\n    equation = Eq(watch_cost + handbag_cost + money_given_to_children, total_money_initially)\n\n    # Solve for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    pocket_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:\n            pocket_money += 10\n        else:\n            pocket_money -= 8\n    return pocket_money\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 3 != 0 and i % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    num1 = 16\n    num2 = 28\n\n    ans = gcd(num1, num2)\n\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12\n    sum_of_strikes = n * (n + 1) // 2  # Sum of the first n natural numbers\n    return sum_of_strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of a ten-pence coin in grams\n    total_pence = 40  # total pence we have\n    number_of_coins = total_pence / 10  # number of ten-pence coins\n    total_weight = weight_per_coin * number_of_coins  # total weight of the coins\n    return total_weight\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_sum = 1 + 4\n    adults = (total_people / ratio_sum) * 1\n    return int(adults)\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let n represent the number of buttons Nina has originally\n    # Let j represent the number of buttons James has originally\n    # The total number of buttons Nina and James have is 22\n    # Nina has more buttons than James\n    # When Nina gave 4 of her buttons to James, Nina and James have the same number of buttons\n\n    # We set up the equations based on the problem statement\n    # Nina's buttons - 4 (after giving to James) = James' buttons + 4 (after receiving from Nina)\n    # n - 4 = j + 4\n    # The total number of buttons is 22, so:\n    # n + j = 22\n\n    # From the first equation, we can express j in terms of n\n    # j = n - 8 (from n - 4 = j + 4)\n\n    # We substitute the value of j in the second equation\n    # n + n - 8 = 22\n    # 2n - 8 = 22\n\n    # Now we solve for n\n    # 2n = 30\n    n = 30 // 2\n\n    # So, Nina originally has n buttons\n    return n\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, apple = symbols('mango pear apple')\n    eq1 = Eq(mango + pear, 3.40)\n    eq2 = Eq(mango + apple, 3.80)\n    eq3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n    \n    solutions = solve((eq1, eq2, eq3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    correct_answer_mark = 5\n    incorrect_answer_deduction = 2\n    num_of_questions = 6\n    \n    for correct_answers in range(num_of_questions + 1):\n        incorrect_answers = num_of_questions - correct_answers\n        if correct_answers * correct_answer_mark - incorrect_answers * incorrect_answer_deduction == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    children = 9\n\n    # Since Mr. Chan starts giving candies from seat number 3, we offset by 2\n    # And then we adjust by subtracting 1 because Python uses 0-based indexing\n    last_candy_seat = (total_candies + (3 - 1) - 1) % children\n\n    # We add 1 at the end because the output requires seat number in 1-based indexing\n    return last_candy_seat + 1\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, ball = symbols('racket ball')\n    \n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n    \n    solutions = solve((equation1, equation2), (racket, ball))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n\n    matches = (players - 1) // (players_per_match - 1)\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - (9 * 24 // 2)\n    return ans\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "def solution():\n    import math\n\n    # Given values\n    angle_degree = 37\n    initial_speed = 10  # m/s\n    g = 9.81  # Acceleration due to gravity, m/s^2\n\n    # Convert angle to radians for calculation\n    angle_radian = math.radians(angle_degree)\n\n    # Compute the vertical component of the initial velocity\n    initial_speed_y = initial_speed * math.sin(angle_radian)\n\n    # Time to reach the highest point (where vertical speed becomes 0)\n    # Using the equation: final_speed = initial_speed + acceleration * time\n    # Since final vertical speed at the highest point is 0 and acceleration is -g,\n    # We get time = -(initial_speed_y / -g)\n    time_to_highest_point = initial_speed_y / g\n\n    # Calculate height reached by the box using: distance = initial_speed * time + 0.5 * acceleration * time^2\n    height_reached = initial_speed_y * time_to_highest_point + 0.5 * (-g) * time_to_highest_point ** 2\n\n    # Calculate the distance along the ramp using Pythagorean theorem where ramp_distance = height / sin(angle)\n    ramp_distance = height_reached / math.sin(angle_radian)\n\n    return height_reached, ramp_distance\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # There are 5 blue, 4 orange and 2 yellow balls\n    # Sheila needs 2 groups of 4 balls of the same color\n    # Let's use the Pigeonhole Principle to determine the worst case scenario\n\n    # After taking out 3 balls, Sheila might still not have a group of 4 of the same color\n    # After taking out 4 balls, Sheila will have at least one group of 4 balls of the same color\n    # Sheila now has one complete group of 4 balls of one color\n\n    # To ensure she gets a second group of 4 balls of the same color,\n    # in the worst case scenario, she would take all remaining balls of the other two colors\n    # So she takes out 4 of the remaining color and the 2 yellows, which makes 6 more\n\n    # She now has 4 balls of one color and 6 of the other two, to ensure another group of 4\n    # she needs to take out at least two more balls.\n\n    ans = 4 + 6 + 2  # first group of 4 + the other 6 balls + 2 more for the second group of 4\n\n    return ans\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / number_of_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Since the first digit is moved to the ones place, let the original number be of the form ABCD (in digits)\n    # Then, the new number is BCDA\n    # The equation is hence: 1000*B + 100*C + 10*D + A - (1000*A + 100*B + 10*C + D) = 4707\n    for A in range(1, 10):  # The first digit A cannot be 0\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    if (1000 * B + 100 * C + 10 * D + A) - (1000 * A + 100 * B + 10 * C + D) == 4707:\n                        ans = 1000 * A + 100 * B + 10 * C + D\n                        return ans\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming the cost of CD in St. Petersburg is provided at 105 rubles each\n    # and the current conversion rate is 1 pound sterling (Â£1) = 105 rubles.\n    cost_of_cd_in_london = 14\n    conversion_rate = 105\n    cost_of_cd_in_st_petersburg = 105  # taken as given information\n\n    rubles_spent = cost_of_cd_in_london * conversion_rate\n    number_of_cds_in_st_petersburg = rubles_spent // cost_of_cd_in_st_petersburg\n\n    return number_of_cds_in_st_petersburg\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Iterate through the options given.\n    for age in [28, 39, 52, 84]:\n        # \"my age was a square number\"\n        if int((age - 3) ** 0.5) ** 2 == age - 3:\n            # \"it will be a prime number\"\n            if isprime(age + 1):\n                # \"a cube number.\"\n                cube_future = age + 12\n                cube_root = round(cube_future ** (1/3))\n                if cube_root ** 3 == cube_future:\n                    return age\n    \n    return None  # if no age fits the conditions, which should not happen given the problem statement\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart must take one of each color to ensure getting 2 of different colors\n    # 3 red, 4 yellow, and 5 brown, the smallest number would be the worst-case scenario\n    # where he picks all of one color first, then all of another color.\n    # So, 1 (guaranteed different color) + 4 (all yellow, for example) + 1 (to get a different color)\n    # Thus, the smallest number of M&Ms to ensure 2 different colors is 6.\n    ans = max(3, 4, 5) + 1\n    return ans\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a + b\n\n    # Given 2 vee (x vee 4) = 59\n    # According to the definition of the operation we are looking for an x such that:\n    # 2 times (x times 4 + x + 4) + 2 + x times 4 + x + 4 = 59\n    # We need to find x that satisfies the above condition.\n    \n    # Let x vee 4 be y for simplification\n    y = symbols('y')\n    \n    # Find y from 2 vee y = 59 according to custom_operation definition\n    equation = Eq(custom_operation(2, y), 59)\n    y_value = solve(equation, y)[0]\n    \n    # Now find x from y = x vee 4\n    equation_x = Eq(custom_operation(x, 4), y_value)\n    x_value = solve(equation_x, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    length_of_pattern = len(pattern)\n    total_length = 43\n    \n    complete_repetitions = total_length // length_of_pattern\n    remaining_digits = total_length % length_of_pattern\n    \n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    sum_of_remaining = sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    total_sum = (complete_repetitions * sum_of_pattern) + sum_of_remaining\n    \n    return total_sum\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_per_kilometre = 100000\n    centimetres = kilometres * centimetres_per_kilometre\n    return centimetres\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    number_of_quizzes = 4\n\n    total_time_minutes = time_per_quiz_minutes * number_of_quizzes\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the speed ratios using symbols\n    andrew_speed, bernice_speed, cassandra_speed = symbols('andrew_speed bernice_speed cassandra_speed')\n\n    # When Andrew is at level 5, Bernice is at level 3\n    equation1 = Eq(andrew_speed * 5, bernice_speed * 3)\n\n    # When Bernice is at level 6, Cassandra is already at level 10\n    equation2 = Eq(bernice_speed * 6, cassandra_speed * 10)\n\n    # Solve the ratios of their speeds\n    speed_solutions = solve((equation1, equation2), (andrew_speed, bernice_speed, cassandra_speed))\n\n    # Use the ratio of their speeds to find out the level Andrew will be when Cassandra is at level 19\n    # The ratio of Andrew's speed vs Cassandra's speed will be maintained\n    # That is, (Andrew's Level)/(Cassandra's Level) = (Andrew's Speed)/(Cassandra's Speed)\n    # Substitute Cassandra's Level with 19 and solve for Andrew's Level\n    andrew_level = symbols('andrew_level')\n    equation3 = Eq(andrew_level / 19, speed_solutions[andrew_speed] / speed_solutions[cassandra_speed])\n\n    level_solution = solve(equation3, andrew_level)\n\n    return int(level_solution[0])\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # The sum of the first n terms of an arithmetic sequence can be calculated using the formula:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms, n is the number of terms, a is the first term, and d is the common difference.\n\n    # We have two equations from the given sums:\n    # S_9 = 72 and S_23 = 736\n    # We need to find S_16\n\n    # From S_9, we have\n    # 72 = 9/2 * (2a + (9 - 1)d)\n    # 72 = 9/2 * (2a + 8d)\n    # 16 = 2a + 8d ... (1)\n\n    # From S_23, we have\n    # 736 = 23/2 * (2a + (23 - 1)d)\n    # 736 = 23/2 * (2a + 22d)\n    # 64 = 2a + 22d ... (2)\n\n    # Subtracting equation (1) from equation (2), we get\n    # 64 - 16 = 2a + 22d - (2a + 8d)\n    # 48 = 14d\n    # d = 48 / 14\n    # d = 24 / 7\n\n    # Now, we find 'a' using equation (1)\n    # 16 = 2a + 8 * (24 / 7)\n    # 16 = 2a + 8 * 24 / 7\n    # 2a = 16 - 8 * 24 / 7\n    # 2a = (16 * 7 - 8 * 24) / 7\n    # 2a = (112 - 192) / 7\n    # 2a = -80 / 7\n    # a = -40 / 7\n\n    # Now that we have 'a' and 'd', we can find S_16\n    # S_16 = 16/2 * (2a + (16 - 1)d)\n    # S_16 = 8 * (2a + 15d)\n    # S_16 = 8 * (2 * (-40 / 7) + 15 * (24 / 7))\n    # S_16 = 8 * ((-80 + 15 * 24) / 7)\n    # S_16 = 8 * ((-80 + 360) / 7)\n    # S_16 = 8 * 280 / 7\n    # S_16 = 320\n\n    # The sum of the first 16 terms is 320\n    return 320\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for the cost of one chair and one table\n    chair, table = symbols('chair table')\n\n    # Equation for the total cost\n    total_cost_eq = Eq(4 * table + 9 * chair, 504)\n\n    # Cost of each table is equal to the cost of 3 chairs\n    cost_relation_eq = Eq(table, 3 * chair)\n\n    # Solve the system of equations\n    solutions = solve((total_cost_eq, cost_relation_eq), (chair, table))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    # Grandpa's current age\n    grandpa_age = 61\n    # Grandsons' current ages\n    grandson_ages = [4, 7, 12]\n    # Calculate the number of years until the sum of grandsons' ages equals grandpa's age\n    years = 0\n    while sum(grandson_ages) != grandpa_age:\n        # Each year, everyone gets a year older\n        grandpa_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n        years += 1\n    return years\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert minutes to hours since the speed is in km/h\n    time_in_hours = 40 / 60\n\n    # Calculate the distance that both drivers have travelled before Samuel turned back\n    shafur_distance = 54 * time_in_hours\n    samuel_distance = 66 * time_in_hours\n\n    # Calculate the remaining distance Shafur needs to travel to reach Town Y\n    # since both drivers reached Town Y at the same time and Samuel had to cover the distance twice (to Town X and back to Town Y)\n    remaining_distance = shafur_distance + samuel_distance\n\n    # Now find the total distance by adding the distance covered in the first 40 minutes\n    total_distance = remaining_distance + shafur_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for num_fives in range(0, 41, 5):\n        for num_tens in range(0, 41, 10):\n            if num_fives + num_tens == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    return 100 / 40\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    flowers_per_vase = 9\n    vases_needed = -(-flowers // flowers_per_vase)  # Ceiling division\n\n    return vases_needed\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This is the step, negative since the sequence is decreasing.\n    \n    # Since we need to find the first negative term, we will find the term that is just before becoming negative\n    n = 1  # Starts from the first term\n    term = first_term\n    while term > 0:\n        term += common_difference\n        n += 1\n\n    return n - 1  # Subtract 1 because we want the term before the first negative term.\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        # Extract the digits of the number\n        digits = [int(x) for x in str(number)]\n        # Calculate the product of the digits\n        product = 1\n        for digit in digits:\n            product *= digit\n        # Check if the product is a 3-digit number\n        if 100 <= product <= 999:\n            return number\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # first multiple of 3 after 38\n    last_multiple = 81 // 3 * 3         # last multiple of 3 before or equal to 81\n\n    # Calculate the number of multiples by dividing the difference by 3 and adding 1\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # First expression \n    first_numerator = 7 / -3.3333333333333335  # Replacing recurring decimal with approximate value\n    first_denominator = (-0.027) ** (1/3)\n    first_expression = first_numerator / first_denominator\n\n    # Second expression\n    second_numerator = 2 ** 3 / 4 ** 2\n    second_denominator = 0.125 * (1.8 - (0.2 * 7))\n    second_expression = second_numerator / second_denominator\n\n    # Third expression (inside square brackets)\n    third_expression_inner_numerator = 0.1\n    third_expression_inner_denominator = 0.14285714285714285  # Replacing recurring decimal with approximate value\n    third_expression_inner = third_expression_inner_numerator / third_expression_inner_denominator\n\n    # Third expression\n    third_expression = third_expression_inner + (2 * 0.3)\n\n    # Final calculation\n    ans = first_expression + second_expression - third_expression\n\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the first half of the pyramid until 10\n    sum_first_half = sum(range(3, 11))  # 3+4+5+...+10\n\n    # Calculate the sum of the second half of the pyramid starting from 10 and excluding\n    # the last number of the first half (9, because it is included already in the first half)\n    sum_second_half = sum(range(10, 2, -1))  # 10+...+4+3\n\n    # Calculate the total sum by adding both halves\n    total_sum = sum_first_half + sum_second_half\n\n    return total_sum\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    # If 3/7 of the number is 18\n    # We find the whole number by dividing 18 by 3 and then multiplying by 7\n    whole_number = (18 / 3) * 7\n\n    # Now we find 5/6 of the whole number\n    result = (5 / 6) * whole_number\n\n    return result\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    # Pip has Â£50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n    \n    # Pip spent 80% of his pocket money\n    pip_spent = 0.80 * pip\n    \n    # Bud spent 3/4 of her pocket money\n    bud_spent = 3/4 * bud\n    \n    # The ratio of their leftover money is 6:5\n    equation2 = Eq((pip - pip_spent) / (bud - bud_spent), 6/5)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1  # Since one player gets eliminated each game\n\n    return num_games\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    # Let's denote the number of phones the shop had initially as x.\n    # According to the problem, in January they sold 22 more than half of x, leaving the shop with x - (x/2 + 22).\n    # In February, they sold 13 more than half of the remaining phones, this leaves the shop with ((x - (x/2 + 22))/2 - 13).\n    # After February they had 78 phones left which results in the equation ((x - (x/2 + 22))/2 - 13) = 78.\n    # We can now solve this equation to find the value of x.\n\n    # Rearrange the equation to solve for x:\n    # ((x - (x/2 + 22))/2 - 13) = 78\n    # (x - x/2 - 22)/2 - 13 = 78\n    # x - x/2 - 22 - 26 = 156\n    # x/2 - 48 = 156\n    # x/2 = 204\n    # x = 408\n    \n    # Final answer is x, the initial number of mobile phones\n    x = (78 + 13) * 2 + 22 * 2  # Reverse calculation based on the described steps\n    return x\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    extra_apples = 16\n    total_apples = initial_apples + extra_apples\n    return total_apples\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x. Then pens will be x + more_pens.\n    # x + (x + more_pens) = total_items\n    # 2x + more_pens = total_items\n    # 2x = total_items - more_pens\n    # x = (total_items - more_pens) / 2\n    pencils = (total_items - more_pens) / 2\n\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate total spending for each period\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n    \n    # Calculate total spending for the year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    \n    # Calculate average spending per month\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_players = 5\n    num_games = num_players - 1  # In a knockout tournament, each game eliminates one player\n\n    return num_games\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_amount_needed = 4 * 70\n    amount_short = 15\n    amount_she_had = total_amount_needed - amount_short\n    return amount_she_had\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_left = 3\n    from_right = 7\n    from_front = 7\n    from_back = 4\n    \n    total_rows = from_front + from_back - 1\n    total_columns = from_left + from_right - 1\n    \n    total_students = total_rows * total_columns\n    return total_students\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # Let's denote the total number of shelves as n.\n    # According to the librarian, the book is on shelf 8 from the front\n    # and shelf 10 from the back. Thus, we have two equations:\n    # 1) The 8th shelf from the front is the (n - 7)th from the back.\n    # 2) The (n - 9)th shelf from the front is the 10th from the back.\n    # These two shelves are actually the same. So, we deduce that:\n    # n - 7 = 10 and n - 9 = 8\n    # Solving either equation gives us the total number of shelves n.\n\n    n = 8 + 9  # Solving for n using n - 9 = 8\n    return n\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n    \n    # Find the prime factorization of 2016\n    factors = factorint(2016)\n\n    # Since the children are of different ages and all under 10, \n    # we decompose the prime factors into factors under 10\n    # 2016 = 2^5 * 3^2 * 7^1\n    # We can get the ages of the children as 8 (2^3), 2 (2^1), 9 (3^2), and 7 (7^1)\n    ages = [2**3, 2**1, 3**2, 7**1]\n\n    # Sum of their ages\n    sum_ages = sum(ages)\n    return sum_ages\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_four_years_ago = 10\n    # Since 4 years ago the combined age was 10, adding 4 years for each dog would mean\n    # we add 4 * 2 = 8 years to the combined age to get their combined age now.\n    combined_age_now = combined_age_four_years_ago + 8\n    # Next, we need to determine their combined age in 2 years.\n    # So we add 2 years for each dog (2 * 2) to the combined age now.\n    combined_age_in_two_years = combined_age_now + 4\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return int(common_difference)\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of marbles Anna, Betsy, and Charlene originally had as A, B, and C.\n    A, B, C = symbols('A B C')\n\n    # Now let's set up the equations based on the problem description.\n    # The total number of marbles is 168.\n    total_marbles = Eq(A + B + C, 168)\n    \n    # Charlano gave 15 marbles to Betsy, so B's original count is B - 15.\n    # Betsy gave 8 marbles to Anna, so A's final count is A + 8.\n    # The final ratio of Anna's to Betsy's to Charlene's marbles is 2:5:7.\n    final_ratio = Eq((A + 8) / (B - 15) / (C), 2 / 5 / 7)\n\n    # Solve the system of equations.\n    solutions = solve((total_marbles, final_ratio), (A, B, C))\n\n    # There might be multiple solutions but we need the one where all counts are positive integers.\n    # Let's filter them.\n    valid_solutions = [sol for sol in solutions if all(map(lambda x: x > 0 and x.is_integer, sol))]\n    \n    # Return the initial number of marbles Betsy had.\n    return valid_solutions[0][B]\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    # Let the number of 10p coins be x\n    # Then the number of 20p coins is 2x\n    # And the number of 5p coins is x / 2\n    # Total amount in pounds is Â£15.75, which is 1575p\n    # The equation for the total amount in terms of x is:\n    # 5p * (x / 2) + 10p * x + 20p * (2x) = 1575p\n    # Simplify the equation:\n    # (5/2)x + 10x + 40x = 1575\n    # Combine like terms:\n    # (55/2)x = 1575\n    # Multiply both sides by 2 to get rid of the fraction:\n    # 55x = 3150\n    # Divide both sides by 55 to solve for x:\n    x = 3150 // 55\n\n    # Since the number of 20p coins is 2x:\n    num_20p_coins = 2 * x\n\n    return num_20p_coins\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_chocolate = 60\n    fraction_eaten = 3/5\n    fraction_remaining = 1 - fraction_eaten\n\n    original_mass = remaining_chocolate / fraction_remaining\n\n    return original_mass\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Each boy has as many sisters as brothers, which means: \n    # boys - 1 (himself) = girls (number of his sisters)\n    equation1 = Eq(boys - 1, girls)\n\n    # Each girl has half as many sisters as brothers, which means:\n    # girls - 1 (herself) = 2 * (boys - girls)\n    equation2 = Eq(girls - 1, 2 * (boys - girls))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Distance travelled in the first 30 minutes: (x/2) miles\n    # Distance travelled in the second 30 minutes: ((x - 20)/2) miles\n    # Distance travelled in the last 30 minutes: ((x + 10)/2) miles\n    # Total distance is the sum of the distances travelled in each period, which should equal 70 miles\n\n    equation = Eq((x / 2) * 0.5 + ((x - 20) / 2) * 0.5 + ((x + 10) / 2) * 0.5, 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    common_difference = 6\n\n    num_students = ((last_term - first_term) // common_difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    number = 96\n    base = 6\n    digits = []\n    \n    while number > 0:\n        digits.append(str(number % base))\n        number //= base\n        \n    return ''.join(reversed(digits))\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10\n    total_paid = 50\n    \n    total_cost = total_cost_per_person * number_of_people\n    total_tip = total_cost * (tip_percentage / 100)\n    \n    total_amount_paid = total_cost + total_tip\n    \n    change = total_paid - total_amount_paid\n    \n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb = 4\n    slide = 2\n    progress = 0\n    day = 0\n\n    while progress < depth:\n        day += 1\n        progress += climb\n        if progress >= depth:\n            break\n        progress -= slide\n    \n    return day\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # Assume the children get apples in ascending order, and let x be the number of apples\n    # the child with the most apples gets. To minimize x, we need to maximize the number \n    # of apples the other children get, which means the distribution before the last child\n    # should be a consecutive sequence starting with 1.\n    # i.e., the distribution will be something like (1, 2, 3, 4, x) for x being the maximum.\n\n    total_apples = 27\n    num_children = 5\n\n    # Find the least value of x by deducting the sum of the first (num_children - 1) numbers\n    # from the total apples.\n    # The sum of the first (num_children - 1) consecutive numbers starting from 1 can be found\n    # using the formula for the sum of an arithmetic series: sum = n * (n + 1) // 2,\n    # where n is the number of terms.\n    sum_of_first_children = (num_children - 1) * (num_children) // 2\n    x = total_apples - sum_of_first_children\n\n    return x\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Since the person who takes the last marble loses, we work backwards from 26.\n    # The winning positions are when the opponent is forced to pick from 4 marbles.\n    # Jason needs to leave 4n + 1 marbles after his first turn to ensure a win.\n\n    # The strategy is to leave a multiple of 4 + 1 marbles after Jason's turn.\n    for first_pick in range(1, 4):\n        if (26 - first_pick) % 4 == 1:\n            return first_pick\n    # As per the rules outlined, returning 0 would imply no possible winning move\n    # which is not the case here, so we leave this condition out.\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    # Find the number based on the fraction given\n    base_number = (18 * 7) / 3\n    \n    # Calculate the desired fraction of the same number\n    ans = (base_number * 5) / 6\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    for combo in combinations(range(1, 25), 7):  # choose 7 numbers from the range\n        if sum(combo) == 25:\n            ways.append(combo)\n    return len(ways), ways\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Probability that the alcoholic is not at the first bar is 90%\n    not_at_first_bar = 0.9\n    \n    # Probability that the alcoholic is also not at the second bar given that he is not at the first bar is also 90%\n    not_at_second_bar_given_not_at_first = 0.9\n\n    # Since the events are independent, we can multiply the probabilities\n    not_at_first_and_second_bar = not_at_first_bar * not_at_second_bar_given_not_at_first\n\n    # The probability of the alcoholic staying in the third bar is the complement of not being in the first two bars\n    at_third_bar = 1 - not_at_first_and_second_bar\n\n    return at_third_bar\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    # Each volunteer plants 4 trees, 5 trees are left\n    equation1 = Eq(4 * volunteers + 5, trees)\n    # Each volunteer plants 7 trees, one volunteer has nothing to plant\n    equation2 = Eq(7 * (volunteers - 1), trees)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return int(solutions[volunteers]), int(solutions[trees])\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let G be the amount of grass that grows each week.\n    # Let T be the total amount of grass available at the beginning.\n\n    # From the problem, we know that:\n    # T + 12*G = 120*12    (1) \n    # T + 8*G = 150*8      (2)\n\n    # We can solve these equations for T and G.\n\n    # Rearrange equation (1):\n    # T = 120*12 - 12*G     (1')\n\n    # Substitute in equation (2) and solve for G:\n    # 120*12 - 12*G + 8*G = 150*8\n    # 120*12 - 4*G = 150*8\n    # 4*G = 120*12 - 150*8\n    G = (120*12 - 150*8) / 4\n\n    # Now substitute the value of G into equation (1') to find T:\n    # T = 120*12 - 12*G\n    T = 120*12 - 12*G\n\n    # Now we have the total amount of grass T and the amount of grass growing back each week G.\n    # We need to find out how many cows the pasture can sustain for 6 weeks:\n    # Let X be the number of cows the pasture can sustain for 6 weeks.\n    # We have the equation:\n    # T + 6*G = X*6\n    # Solve for X:\n    X = (T + 6*G) / 6\n\n    return int(X)\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    last_term = 41\n    common_difference = 6\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # The proportion states that 10 / x = 14 / 21\n    # Cross-multiplication yields 10 * 21 = 14 * x\n    # Solve for x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    n = symbols('n', integer=True)\n    boys = (n**2 - (n-2)**2)\n    girls = (n-2)**2 - (n-4)**2\n\n    equation = Eq(boys - girls, 55)\n    possible_n = solve(equation, n)\n\n    # Filter only positive and even values of n since the arrangement alternates between boys and girls\n    possible_n = [val for val in possible_n if val % 2 == 1 and val.is_real and val > 0]\n\n    # There should be only one possible n that makes sense\n    if len(possible_n) != 1:\n        raise ValueError(\"There should be only one positive integer solution for n\")\n\n    n_value = possible_n[0]\n\n    # Total students will be the number of all boys and girls\n    total_students = n_value**2\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        sum = 0\n        for i in range(1, number):\n            if number % i == 0:\n                sum += i\n        return sum\n    \n    i = 1\n    while True:\n        if sum_of_factors(i) == i:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    return (30 - 28) + (26 - 24) + (22 - 20) + (18 - 16) + 14\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    # Let x be the initial number of stickers in Bag A, so the initial number of stickers in Bag B is (270 - x)\n    # After moving 56 stickers from Bag A to Bag B, the number of stickers in Bag A becomes (x - 56)\n    # and the number of stickers in Bag B becomes (270 - x + 56).\n    # The ratio of the number of stickers in Bag B to Bag A is 3:2 after moving the stickers\n    # Hence, we have the equation: (270 - x + 56) / (x - 56) = 3 / 2\n    # Multiplying both sides by 2(x - 56) to get rid of the denominator\n    # We get: 2 * (270 - x + 56) = 3 * (x - 56)\n    # Simplifying the equation will give us the initial number of stickers in Bag A\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (270 - x + 56), 3 * (x - 56))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_number = 10  # the given term number\n    nth_term = 25  # the given nth term\n    common_difference = 28 - 25  # the common difference between terms\n\n    first_term = nth_term - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    if total_cakes % cakes_per_box == 0:\n        num_boxes = total_cakes // cakes_per_box\n    else:\n        num_boxes = (total_cakes // cakes_per_box) + 1\n\n    return num_boxes\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    equation = Eq(1/4 * money + 2/7 * money, 225)\n\n    result = solve(equation, money)\n\n    return result[0]\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # Lovelle and Makayla had $3998 muffins altogether.\n    equation1 = Eq(lovelle + makayla, 3998)\n    \n    # After Lovelle sold $462 muffins\n    lovelle_left = lovelle - 462\n    \n    # Makayla sold 2/5 of her muffins\n    makayla_left = makayla - (2 / 5) * makayla\n\n    # Lovelle and Makayla had an equal number of muffins left\n    equation2 = Eq(lovelle_left, makayla_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # We need to find the maximum distinct positive integers that add up to 30.\n    # The sequence of the smallest positive integers is 1, 2, 3, 4, 5, ...\n    # We can continue adding the next smallest integer until the sum exceeds 30.\n    \n    current_sum = 0\n    num_terms = 0\n    \n    while current_sum + (num_terms + 1) <= 30:\n        num_terms += 1\n        current_sum += num_terms\n    \n    return num_terms\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap = 1.1\n    length = (num_daffodils - 1) * gap\n    \n    return length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    \n    length_per_piece = total_length / pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Calculate the maximum number of cards he can draw without getting 10 of the same color\n    # by taking the worst-case scenario of 9 cards from each color.\n    max_without_10_same_color = 9 * 4  # 9 cards from each of the 4 colors\n\n    # To ensure 10 cards of the same color, he needs to draw one more card.\n    at_least_cards = max_without_10_same_color + 1\n\n    return at_least_cards\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48  # Total distance in meters\n    speed = 8      # Speed in meters per minute\n    correct_time = distance / speed  # Correct calculation\n    return correct_time\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    # Ways to distribute 9 stickers are combinations of positive integers (x1, x2, x3) which sum to 9\n    # and are all distinct x1 != x2 != x3, since the boxes are identical, permutations of the same counts are considered the same.\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # ensure x2 > x1\n            x3 = 9 - x1 - x2\n            if x3 > x2:  # ensure x3 > x2, to keep them distinct and in increasing order\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    ratio_alex_to_jane = 1.5  # Alex drinks 50% more than Jane\n    \n    # Let x be the amount that Jane drinks, then Alex drinks 1.5 * x.\n    # x + 1.5x = total_juice\n    # 2.5x = total_juice\n    # x = total_juice / 2.5\n    jane_drinks = total_juice / (1 + ratio_alex_to_jane)\n    alex_drinks = ratio_alex_to_jane * jane_drinks\n    \n    return alex_drinks\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return (1 / 4 * 16) / (1 / 2)\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    \n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n    \n    return packets_needed\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(12, 4)  # Total ways to select 4 students from 12 without any restriction\n    ways_without_boys = comb(5, 4)  # Ways to select 4 students from 5 girls, with no boys\n    ways_with_at_least_one_boy = total_ways - ways_without_boys  # Subtracting the ways with no boys from total ways\n    return ways_with_at_least_one_boy\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    return 5 * 15 / 3\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    total_friends = 6\n\n    pears_per_friend = total_pears // total_friends\n    strawberries_per_friend = total_strawberries // total_friends\n    chocolates_per_friend = total_chocolates // total_friends\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits, pages = 0, 0\n    while digits < 157:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1 if digits > 157 else pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 241, 2):  # Increment by 2 to check only odd numbers\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7 - 7) * 13)\n    return ans\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let's denote the total money Bud had originally as 'x'.\n    # According to the problem, Bud spent 1/4 of it on a book.\n    # Therefore, the remaining money after buying the book is (3/4)*x.\n\n    # Then, Bud spends 2/5 of the remaining money on a bag, which costs Â£60.\n    # Thus, the amount spent on the bag is (2/5)*(3/4)*x which is equal to Â£60.\n    # We can set up the equation and solve for x to find the original amount of money.\n    \n    money_spent_on_bag = 60  # Â£60 spent on the bag\n    fraction_spent_on_bag = (2/5) * (3/4)  # Fraction of original money spent on the bag\n\n    # Original amount of money (x) is the money spent on the bag divided by the fraction spent on it\n    x = money_spent_on_bag / fraction_spent_on_bag\n\n    return x\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            price = int(f\"{i}679{j}\")\n            if price % 72 == 0:\n                return price // 72\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360 # in meters\n    speed = 40 # speed in m/s\n\n    time = train_length / speed # time = distance/speed\n\n    return time\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total length of the road covered by the peach trees\n    total_length = (41 - 1) * 3  # 41 trees, so 40 intervals of 3m each\n\n    # Number of lamp posts is length of the road divided by distance between lamp posts, plus one for the lamp post at the starting point\n    num_lamp_posts = (total_length // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n\n    return potted_plants\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # Loop through all two-digit numbers\n        digits_sum = sum(int(digit) for digit in str(number))  # Sum of digits of the number\n        if digits_sum % 5 == 0:  # Check if sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    x = symbols('x')\n\n    # The number of students in class A is twice the number in class B\n    students_class_A = 2 * x\n    students_class_B = x\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    candies_for_A = 4 * students_class_A - 20\n\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    candies_for_B = 6 * students_class_B + 16\n\n    # The total number of candies is the same\n    equation = Eq(candies_for_A, candies_for_B)\n\n    # Solve for the number of students in class B\n    num_students_class_B = solve(equation, x)\n    num_students_class_B = num_students_class_B[0]\n\n    # Calculate the number of candies Miss Jenny has\n    num_candies = 6 * num_students_class_B + 16\n\n    return num_candies\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    dvd_price = total_savings / 3\n    remaining_after_dvd = total_savings - dvd_price\n    book_price = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_price\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    for year in range(1, 4):\n        initial_rabbits = initial_rabbits * 3  # Rabbits multiply\n        initial_rabbits = initial_rabbits // 2  # Wolves eat half\n    return initial_rabbits\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_for_first_mile = 1 / 60  # time = distance / speed\n    time_for_second_mile = 1 / 30\n    \n    total_time = time_for_first_mile + time_for_second_mile\n    total_distance = 2  # since it's 1 mile at each speed\n    \n    average_speed = total_distance / total_time\n    return average_speed\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(0, 41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n\n    number_of_washes = (target_amount // amount_per_wash) + 1\n\n    return int(number_of_washes)\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    candies_eaten_first_day = 2\n    day_to_calculate = 4\n    candies_eaten_on_forth_day = candies_eaten_first_day * (2 ** (day_to_calculate - 1))\n    return candies_eaten_on_forth_day\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    daily_earnings = 70\n    num_days = 6  # Monday to Saturday\n\n    total_earnings = daily_earnings * num_days\n    return total_earnings\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define x as the natural number we are looking for\n    x = symbols('x', integer=True, positive=True)\n    \n    # We define a as the remainder when dividing 290 by the unknown number\n    a = symbols('a', integer=True)\n\n    # Create equations based on the problem statement\n    eq1 = Eq(290 % x, a)\n    eq2 = Eq(235 % x, a + 2)\n    eq3 = Eq(200 % x, a + 5)\n\n    # Subtract the two equations to eliminate 'a'\n    eq4 = Eq(eq1.lhs - eq2.lhs, eq1.rhs - eq2.rhs)\n    eq5 = Eq(eq1.lhs - eq3.lhs, eq1.rhs - eq3.rhs)\n\n    # We solve the system of equations considering 'x' must be greater than \"1\"\n    solutions = solve((eq4, eq5), (x, a))\n    solutions = [sol[x] for sol in solutions if sol[x] > 1 and sol[a] >= 0]\n\n    # Return the solution which is the natural number\n    return solutions[0]\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the smaller angle as x and the larger one as 2x\n    x = symbols('x')\n    \n    # Since one angle is 90 degrees (right angle),\n    # the sum of the other two angles should be 90 degrees.\n    equation = Eq(x + 2 * x, 90)\n    \n    # Solving for x to find the smaller angle\n    smaller_angle = solve(equation, x)\n\n    # The larger angle is twice the smaller angle\n    larger_angle = 2 * smaller_angle[0]\n\n    return larger_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for I in range(1, 10):\n        for S in range(0, 10):\n            if I != S:  # Ensure I and S are different digits\n                PI = int(f\"{str(4 * S)}{I}\")\n                IS = int(f\"{I}{S}\")\n                if 4 * IS == PI:\n                    return PI\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine = (3 * 6) + 10  # Total sunshine from Monday to Sunday\n    total_days = 7  # Total days in a week\n    average_sunshine = total_sunshine / total_days\n    return average_sunshine\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # Total number of intervals is the number of trees plus 1\n    intervals = 79 + 1\n    \n    # Distance between each tree is the road length divided by the number of intervals\n    distance_between_trees = 320 / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # 2 times walking speed\n    walk_time = 24  # min\n    \n    # Total distance to school\n    distance_to_school = walk_time * walking_speed\n    \n    # Half the distance\n    half_distance = distance_to_school / 2\n    \n    # Time taken to walk half the distance\n    time_walk_half = half_distance / walking_speed\n    \n    # Time taken to run half the distance\n    time_run_half = half_distance / running_speed\n    \n    # Total time taken for half walk and half run\n    total_time = time_walk_half + time_run_half\n    \n    return total_time\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where 'n' is the number of terms, 'first_term' is the first term in the sequence, \n    # and 'last_term' is the last term in the sequence.\n    # Since the ages are consecutive natural numbers, the difference (d) is 1.\n    \n    # Let's denote the first term of the sequence as 'a'.\n    # Then the terms are a, a+1, a+2, ..., a+8 (since there are 9 terms which are consecutive numbers)\n    # The sum is thus 765, and we have:\n    # 765 = 9/2 * (a + (a + 8))\n    # 765 = 9/2 * (2a + 8)\n    # 765 * 2 = 9 * (2a + 8)\n    # 765 * 2 / 9 - 8 = 2a\n    # (765 * 2 / 9 - 8) / 2 = a\n    a = (765 * 2 / 9 - 8) / 2\n    \n    # We need to find the middle term which will be the 5th term (since there are 9 terms).\n    # The middle term is the 5th term: a + 4\n    middle_age = a + 4\n    \n    return middle_age\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    piece_length = 15\n    remainder = total_length % piece_length\n    return remainder\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    for x1 in range(7):  # We use 7 because 6 apples + 1 choice for 0 apples in a basket\n        for x2 in range(7 - x1):\n            # The third basket's apple count is determined by x1 and x2.\n            x3 = 6 - x1 - x2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings, spent_on_dresses, spent_on_earrings = 177, 129, symbols('savings spent_on_earrings')\n\n    # Kim gave 1/3 of her savings to her mother\n    given_to_mother = savings / 3\n\n    # Amount left is 1/2 of what she gave her mother\n    amount_left = given_to_mother / 2\n\n    # Equation representing the situation\n    equation = Eq(savings - given_to_mother - spent_on_dresses - spent_on_earrings, amount_left)\n\n    # Solve for savings\n    solutions = solve(equation, savings)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if chickens * 2 + cows * 4 == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    possible_values = []\n    for N in range(1, 2018):\n        if (2018 - 11) % N == 0:\n            possible_values.append(N)\n    return sum(possible_values)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        workers = day\n        total_skirts += workers * skirts_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    start, diff = 11, 3\n    numbers = range(30, 61)\n\n    valid_numbers = [num for num in numbers if (num - start) % diff == 0]\n\n    return valid_numbers\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    \n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    unanswered = 1\n    answered_questions = total_questions - unanswered\n    correct_points = 4\n    incorrect_points = -2\n    woody_score = 66\n\n    for correct in range(answered_questions + 1):\n        incorrect = answered_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == woody_score:\n            return correct\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for apples and bananas\n    a, b = symbols('a b')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * a + 2 * b, 1.25)\n    equation2 = Eq(1 * a + 1 * b, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[b]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    count = 0\n    num_digits = 0\n    digit = 0\n\n    # Iterate over the numbers until we reach the required digit position\n    while count < 2023:\n        num_digits += 1  # Move to the next number and increase digit counter\n        num_str = str(num_digits)  # Convert the number to string to count its digits\n        count += len(num_str)  # Increase the count by the number of digits in the current number\n\n    # Calculate the index of the desired digit in the last number\n    digit_index = 2023 - (count - len(num_str))\n    \n    # Find the desired digit\n    digit = int(num_str[digit_index - 1])\n    \n    return digit\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n\n    # Using the Pigeonhole Principle\n    # The minimum number of boys born on the day with the most births\n    min_boys_per_day = (total_boys // days_in_january) + 1\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')  # symbol for the unknown tax rate over $50,000\n    income = 150000\n    tax_paid = 15000\n    first_50k_tax = 0.08 * 50000\n    remaining_income = income - 50000\n\n    # Tax paid for the amount over 50000 is (8+T)% of the remaining income\n    remaining_tax = tax_paid - first_50k_tax\n\n    # Setup the equation\n    equation = Eq(remaining_tax, remaining_income * (0.08 + T / 100))\n\n    # Solve the equation\n    solution = solve(equation, T)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    digits = [0, 2, 3]\n    count = 0\n    for i in digits:\n        if i == 0:  # Skip the case where a number starts with 0\n            continue\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for Rachel and Alice's original amounts\n    rachel, alice = symbols('rachel alice')\n    \n    # Write the equation based on: if Rachel gives Alice 10 pieces, they would have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Write the equation based on: if they both eat 8 pieces, Rachel has 3 times as many left as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    total_cars = 31\n    distance_between_cars = 5\n\n    total_length = first_car_length + ((total_cars - 1) * other_cars_length) + (distance_between_cars * (total_cars - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    remaining_chocolates = total_chocolates - chocolates_given_away\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    seventh_term = 105\n    ninth_term = 135\n    common_difference = (ninth_term - seventh_term) // 2\n\n    first_term = seventh_term - (7 - 1) * common_difference\n\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for p in permutations('ABCDEFG'):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or \\\n           p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            if 'DE' in ''.join(p) or 'ED' in ''.join(p):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    length_now = 30\n    growth_rate = 1/5\n    length_last_week = length_now / (1 + growth_rate)\n\n    return length_last_week\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n    total_sweets = (sarah_sweets * total_ratio) / sarah_ratio\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # Cost in pence\n    total_cakes_cost = 9 * 113    # Cost in pence since Â£1 = 100p\n    total_cost = total_biscuits_cost + total_cakes_cost  # Total cost in pence\n\n    total_cost_in_pounds = total_cost / 100  # Convert pence to pounds\n\n    change = 20 - total_cost_in_pounds  # Change from a Â£20 note\n\n    return round(change, 2)  # Round to 2 decimal places\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    apples_per_pile = 8\n    number_of_piles = 6\n    total_apples = apples_per_pile * number_of_piles\n    return total_apples\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1_petrol = 27\n    week2_petrol = 25\n    week3_petrol = 30\n\n    total_petrol = week1_petrol + week2_petrol + week3_petrol\n\n    return total_petrol\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    return 1.8 - 0.57\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    \n    combinations = tops * bottoms\n    \n    return combinations\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers Sam and Peter originally had\n    sam, peter = symbols('sam peter')\n\n    # Set up the equations based on the problem statement\n    # Sam had 40 stickers more than Peter initially\n    eq1 = Eq(sam, peter + 40)\n    # Sam gave 20% of his stickers to Peter\n    eq2 = Eq(sam - 0.20 * sam, sam - (sam / 5))\n    # Peter gave 25% of his stickers to Sam after receiving from Sam\n    eq3 = Eq(peter + (sam / 5) - 0.25 * (peter + (sam / 5)), peter + (sam / 5) - (1/4) * (peter + (sam / 5)))\n    # In the end, Sam had 96 stickers more than Peter after exchange\n    eq4 = Eq((sam - (sam / 5)) + (1/4) * (peter + (sam / 5)), peter + (sam / 5) - (1/4) * (peter + (sam / 5)) + 96)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq4), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 4),  # x â¡ 3 (mod 4)\n        (3, 5),  # x â¡ 3 (mod 5)\n        (3, 6),  # x â¡ 3 (mod 6)\n        (3, 9)   # x â¡ 3 (mod 9)\n    ]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Benson finished lunch at 2:50pm\n    finish_lunch_time = datetime.strptime('14:50', '%H:%M')\n    \n    # Lunch lasted for 20 minutes\n    start_lunch_time = finish_lunch_time - timedelta(minutes=20)\n    \n    # Watched television for 20 minutes before lunch\n    end_tv_time = start_lunch_time\n    start_tv_time = end_tv_time - timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home\n    reach_home_time = start_tv_time - timedelta(minutes=10)\n    \n    # Format time to the required output format\n    ans = reach_home_time.strftime('%H:%M %p')\n    return ans.lower()  # Convert to lowercase to match expected format\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = (6 + 1/2) / (1/2)\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    ans = 887 + 96\n    return ans\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef num_permutations(n, r):\n    return factorial(n) // factorial(n - r)\n\ndef solution():\n    # Counting 3-digit numbers formation\n    # since we cannot use 0 as the first digit, there are only 3 choices for the first digit\n    # then we have 3 digits left for the second position, and 2 for the third position\n    three_digit_numbers = 3 * num_permutations(3, 2)\n    \n    # Counting 4-digit numbers formation\n    # since 0 can be used in any position but the first, there are 3 choices for the first digit\n    # then we have 3 remaining digits for the second position, 2 for the third, and 1 for the fourth\n    four_digit_numbers = num_permutations(3, 1) * num_permutations(3, 2)\n\n    # The total number of numbers is the sum of the 3-digit and 4-digit numbers we can form\n    return three_digit_numbers + four_digit_numbers\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Since the pattern is 1 black, 2 white, 2 gray,\n    # and each full pattern has 2 gray rabbits.\n    # If there are 14 grey rabbits, then there must be\n    # 14 / 2 = 7 full patterns to accommodate all grey rabbits.\n\n    full_patterns = 14 // 2\n\n    # Each full pattern consists of 1 black + 2 white + 2 gray = 5 rabbits\n    total_rabbits = full_patterns * 5\n\n    return total_rabbits\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_nines(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('9')\n        return count\n\n    # Binary search for the page number that contains the 181st nine\n    left, right = 1, 181\n    while left <= right:\n        mid = (left + right) // 2\n        if count_nines(mid) < 181:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Jason sells 10 more than half of his crystals to Yvonne\n    sold_to_yvonne = (initial_crystals / 2) + 10\n\n    # He then mines 20 more crystals\n    mined_in_singapore = 20\n\n    # He sells 14 crystals to Cherlyn\n    sold_to_cherlyn = 14\n\n    # He has 35 crystals left in the end\n    remaining = 35\n\n    # Setting up the equation according to the problem statement\n    equation = Eq(initial_crystals - sold_to_yvonne + mined_in_singapore - sold_to_cherlyn, remaining)\n\n    # Solving for the initial number of crystals\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n    \n    A = 12\n    B = 15\n    C = 18\n\n    # Find greatest common divisor (GCD) for the group sizes\n    gcd_ab = gcd(A, B)\n    gcd_abc = gcd(gcd_ab, C)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    max_num = max([\n        100 * numbers[i] + 10 * numbers[j] + numbers[k]\n        for i in range(4)\n        for j in range(4)\n        for k in range(4)\n        if i != j != k != i and numbers[i] != 0\n    ])\n    min_num = min([\n        100 * numbers[i] + 10 * numbers[j] + numbers[k]\n        for i in range(4)\n        for j in range(4)\n        for k in range(4)\n        if i != j != k != i and numbers[i] != 0\n    ])\n    ans = max_num - min_num\n    return ans\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors = []\n    for i in range(1, 181):\n        # Check if i is a factor of 180 and also a multiple of 9\n        if 180 % i == 0 and i % 9 == 0:\n            factors.append(i)\n    return len(factors)\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    possible_digits = ['1', '2', '3', '4']\n    even_numbers = ['2', '4']  # Last digit must be even\n    count = 0\n    for last_digit in even_numbers:\n        remaining_digits = [d for d in possible_digits if d != last_digit]\n        for perm in permutations(remaining_digits):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n    \n    return round(amount, 2)\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds_to_pence = 200  # Â£2 in pence\n    single_price = 12      # single sweet price in pence\n    three_price = 30       # three sweets price in pence\n    \n    # Buy in sets of three first\n    sets_of_three = pounds_to_pence // three_price\n    remaining_pence = pounds_to_pence % three_price\n    \n    # Buy any remaining sweets with the leftover pence\n    remaining_sweets = remaining_pence // single_price\n    \n    # Calculate the total number of sweets\n    total_sweets = (sets_of_three * 3) + remaining_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_when_10 = 10\n    kenny_age = symbols('kenny_age')\n    kenny_brother_age = kenny_age - 2\n    total_age_when_may_10 = 3 * may_age_when_10\n    \n    equation = Eq(kenny_age + kenny_brother_age, total_age_when_may_10)\n\n    kenny_current_age = solve(equation, kenny_age)[0]\n    kenny_age_difference_with_may = kenny_current_age - 7\n\n    return kenny_age_difference_with_may\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n    # The problem can be transformed to distributing 10 - 7 = 3 identical balls into 7 boxes,\n    # where some boxes can be empty because each original box already has 1 ball guaranteed.\n    ans = comb(3 + 7 - 1, 3)\n    return ans\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # If Felix goes first and eats 1 candy, he can always ensure victory.\n    # Strategy:\n    # 1. Eat 1 candy first.\n    # 2. Whatever John eats on his turn (1 or 2 candies), Felix should eat\n    #    an amount that makes the total candies eaten by both to be a multiple of 3.\n    # This way, Felix can always force the game to a state where 9 candies are eaten\n    # when it's John's turn, leaving one candy for Felix to win.\n\n    goes_first = \"Felix\"\n    strategy = \"Eat 1 candy, then make the total a multiple of 3.\"\n    \n    # Since we are asked to return the final result 'ans',\n    # which should describe whether Felix should go first or second and the strategy.\n    ans = (goes_first, strategy)\n    return ans\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    single_pipe_length = 5\n\n    num_pipes_needed = pipe_length // single_pipe_length\n\n    if pipe_length % single_pipe_length != 0:\n        num_pipes_needed += 1\n\n    return num_pipes_needed\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water needed\n    x = symbols('x')\n\n    # Using a 5-litre pail, 4 litres will overflow, so x = 5*pails - 4\n    # Using a 3-litre pail, he needs 4 more pails, so x = 3*(pails+4)\n    # Setting up the equations\n    eq1 = Eq(5 * (x // 5) - 4, x)\n    eq2 = Eq(3 * ((x // 3) + 4), x)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2))\n\n    # x should be a positive number, so we return the matching solution\n    for sol in solutions:\n        if sol > 0:\n            return sol\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count_3 = 0\n    page = 0\n    while count_3 < 28:\n        page += 1\n        count_3 += str(page).count('3')\n    return page\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    double_underlined = 0\n\n    # A number is underlined twice if it's a multiple of 2 and 3 (i.e., multiple of 6) \n    # and not a multiple of 4, or if it's a multiple of 4 and 3 (i.e., multiple of 12) \n    # and also a multiple of 2. However, as every multiple of 4 is also a multiple of 2 \n    # by definition, we only need to consider multiples of 6 that are not multiples of 4.\n    for num in range(1, 2017):\n        if num % 6 == 0 and num % 4 != 0:\n            double_underlined += 1\n\n    return double_underlined\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    brother_total = sum(coins) / 3\n\n    for lost_coin in coins:\n        if sum(coins) - lost_coin == 2 * brother_total:\n            return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus = 15 * 60 + 55 # 15.55 in minutes\n    second_bus = 16 * 60 + 35 # 16.35 in minutes\n\n    time_arrival = first_bus + 4 # Arrival time if 4 minutes late\n\n    wait_time = second_bus - time_arrival\n\n    return wait_time\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Since the average of 4 out of 5 numbers is given, we multiply each average by 4 to get the sum of those 4 numbers.\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    # The overall sum of all 5 numbers must be the sum of the 4 smallest 'sums' plus the largest number\n    total_sum = sum(sums) - min(sums)\n    # The largest number is therefore the total sum minus 4 times the smallest average\n    largest_number = total_sum - 4 * min(sums) / 4\n    \n    return largest_number\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    # Number of intervals is one less than the number of trees\n    num_intervals = road_length // distance_between_trees\n    num_trees = num_intervals + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Original equation describing total students\n    equation1 = Eq(boys + girls, 152)\n    \n    # Equation after removing 1/11 of boys and 5 girls\n    equation2 = Eq(boys - boys / 11, girls - 5)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    lorries_needed = (workers + lorry_capacity - 1) // lorry_capacity\n    return lorries_needed\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4\n    last_two_days = 60\n    total_pages = first_three_days + next_four_days + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    for students in range(1, 1000):  # The range here is arbitrary and serves as an upper bound\n        if (students + 6) % 4 == 0 and (students - 1) % 5 == 0:\n            return students\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    # x â¡ 3 (mod 4), x â¡ 3 (mod 5), x â¡ 3 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    # Find the smallest x that is a three-digit number less than 200\n    while x < 100 or x >= 200:\n        x += 4 * 5 * 9  # Increment x by the product of moduli until it satisfies the condition\n\n    return x\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9  # Total sum of seven numbers with mean 9\n    total_final = 6 * 10   # Total sum of remaining six numbers with mean 10\n    \n    number_removed = total_initial - total_final  # The number removed is the difference\n    \n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    leave_fraction = 1/3\n    people_left = total_people * (1 - leave_fraction)\n    return int(people_left)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    lcm_interval = lcm(lcm(interval_a, interval_b), interval_c)\n\n    hours, minutes = divmod(lcm_interval, 60)\n    next_time_hour = 10 + hours\n    next_time_minute = 0 + minutes\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    marks_for_correct = 5\n    deduction_for_wrong = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * marks_for_correct + wrong_answers * deduction_for_wrong\n        if score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass_tree = 30  # time in seconds\n    length_of_train = 360  # length in meters\n\n    # Speed = Distance / Time\n    speed_of_train = length_of_train / time_to_pass_tree\n\n    return speed_of_train  # speed in meters per second\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Extracting the common factor (3999 * 2014) from the expression\n    common_factor = 3999 * 2014\n    # The expression can be rewritten as (common_factor * 1.2014 + common_factor * 1.9999) / 12.0012\n    # Simplify the multiplication inside the brackets\n    inner_value = common_factor * (1.2014 + 1.9999)\n    # Now divide by 12.0012\n    ans = inner_value / 12.0012\n    return ans\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    # By the principle of inclusion-exclusion for three sets:\n    # |A âª B âª C| = |A| + |B| + |C| - |A â© B| - |A â© C| - |B â© C| + |A â© B â© C|\n    \n    # The maximum number of students that can be in exactly two sports is:\n    # (swimmers â© cyclists) + (swimmers â© table_tennis_players) + (cyclists â© table_tennis_players)\n    # Which is the sum of the individual groups minus the total students, assuming none do all three sports:\n    max_in_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    # However, this number might include some students who play all three sports.\n    # Therefore, the least possible number of students in all three sports is zero if the max_in_two_sports <= total_students,\n    # otherwise it's the difference max_in_two_sports - total_students.\n    all_three_sports = max_in_two_sports if max_in_two_sports <= total_students else max_in_two_sports - total_students\n\n    return all_three_sports\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    effective_climb = day_climb - night_slide\n    \n    # Calculate number of full days needed to reach just below the total_distance\n    full_days_to_last_climb = (total_distance - day_climb) // effective_climb\n    \n    # The snail will climb out on the next day without sliding back\n    full_days_to_climb_out = full_days_to_last_climb + 1\n\n    return full_days_to_climb_out\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    for num_people in range(2, 50):  # Assuming the number of people is less than 50 for simplicity\n        half_circle = num_people // 2\n        if 10 + half_circle * 2 == 24:\n            return num_people\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Numbers of marbles for each color, which are already sorted in descending order:\n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n    \n    # We want 4 marbles of different colors. To ensure that in the worst-case scenario,\n    # we draw at least one of each color, we consider the worst-case for each step:\n    # 1. Draw all marbles of one color: red (12 marbles).\n    # 2. Draw all marbles of another color: blue (9 marbles).\n    # 3. Draw all marbles of another color: yellow (8 marbles).\n    # After this, we are forced to get a green marble on the next draw.\n    # So, to guarantee that we have 4 marbles of different colors, we need:\n    \n    # Adding 1 for the green marble.\n    min_draws = red + blue + yellow + 1 \n\n    return min_draws\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    time_A = 24\n    time_B = 64\n    return lcm(time_A, time_B)\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return possible_ages[-1]  # Return the last possible age which is Meiling's current age\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for num in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if 75 % num == 0 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_percent = 20\n    savings_less_than_food = 6\n\n    # Calculate money spent on books and stationery\n    books_money = (books_percent / 100) * pocket_money\n\n    # Let the money spent on transport be x\n    transport_money = x = symbols('x')\n\n    # Money spent on food is 3 times transport\n    food_money = 3 * x\n\n    # Savings is 6 less than food money\n    savings_money = food_money - savings_less_than_food\n\n    # Total expenditure is the sum of books, food, and transport money\n    total_expenditure = books_money + food_money + transport_money\n\n    # Total savings is pocket money minus total expenditure\n    total_savings = pocket_money - total_expenditure\n\n    # Equation for total savings equal to savings money\n    equation_savings = Eq(total_savings, savings_money)\n\n    # Solve the equation to find the value of x (transport_money)\n    solution_x = solve(equation_savings, x)\n\n    # Calculate the percentage of savings from pocket money\n    savings_percent = (savings_money.subs(x, solution_x[0]) / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    wrong_subtrahend = 41\n    wrong_result = 50\n\n    # Assuming the minuend stays the same, let's denote it by x.\n    # The actual problem was: x - 14 = correct result.\n    # We know that x - wrong_subtrahend = wrong_result.\n    # Therefore, x = wrong_result + wrong_subtrahend.\n\n    minuend = wrong_result + wrong_subtrahend\n\n    # Now find the correct difference by subtracting the correct subtrahend(14) from the minuend.\n    correct_subtrahend = 14\n    correct_result = minuend - correct_subtrahend\n    \n    return correct_result\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n    for d1 in range(3, 6):  # First digit must be between 3 and 5 for the number to be in the range.\n        for d2 in range(1, 7):  # Second digit can be any of the 6 digits.\n            if d2 != d1:  # Check that the digit is not repeated.\n                for d3 in range(1, 7):\n                    if d3 != d1 and d3 != d2:  # Check that the digit is not repeated.\n                        for d4 in range(1, 7):\n                            if d4 != d1 and d4 != d2 and d4 != d3:  # Check that the digit is not repeated.\n                                number = d1 * 1000 + d2 * 100 + d3 * 10 + d4\n                                if 3267 <= number <= 5120:  # Ensure that number is in the desired range.\n                                    total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters = 4\n    sisters_apples_each = 5\n    sisters_apples_total = sisters * sisters_apples_each\n    apples_left = 20\n\n    total_apples = justin_apples + sisters_apples_total + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum(40 - 2 * i if i % 2 == 0 else -(40 - 2 * i) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # let the initial square array side length be x, so the total number of soldiers is x^2\n    # after adding 31 soldiers, a new row and column are added, making the new array (x+1)*(x+1)\n    # the equation is then x^2 + 31 = (x + 1)^2\n    # expanding the equation: x^2 + 31 = x^2 + 2x + 1\n    # simplifying the equation: 31 = 2x + 1\n    # solving for x: 30 = 2x --> x = 15\n    # the total number of soldiers is now: (x+1)^2 = 16^2 = 256\n    \n    x = (31 - 1) // 2\n    total_soldiers = (x + 1) ** 2\n    return total_soldiers\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 3.2 + 6.77 + 8.88 + 6.3\n    d = 6.77 + 8.88\n\n    ans = a * b - c * d\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    return minutes * seconds_per_minute\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    future_value = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_to_paint_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # 1 hour and 20 minutes in minutes\n\n    num_pictures = total_time_available // time_to_paint_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount_after_4_years = 7320.5\n    # Since we have approximate values for 1.2^3 and 1.1^4, we can use them to narrow down the interest rate\n\n    # Check 1.2^3 first, which implies the rate is higher than 20%\n    rate_approx_20 = 1.2  # approximate rate higher than 20%\n    compounded_20 = principal * (rate_approx_20 ** 4)\n    \n    # Check 1.1^4 next, which implies the rate is lower than 10%\n    rate_approx_10 = 1.1  # approximate rate lower than 10%\n    compounded_10 = principal * (rate_approx_10 ** 4)\n\n    # Since we know the final amount, we look for the rate between 10% and 20%\n    # A simple approach is to use a binary search within this range to find the rate.\n    lower_bound = 1.1\n    upper_bound = 1.2\n    epsilon = 0.0001  # acceptable error\n    while lower_bound <= upper_bound:\n        mid = (lower_bound + upper_bound) / 2\n        compounded = principal * (mid ** 4)\n        if abs(compounded - amount_after_4_years) < epsilon:\n            return mid - 1  # Subtracting 1 to convert from multiplier to rate\n        elif compounded < amount_after_4_years:\n            lower_bound = mid\n        else:\n            upper_bound = mid\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples\n    total_apples = 30\n    # Number of children excluding Ann\n    num_children = 5 \n    # Each of the other children should get at least one apple\n    min_apples_other_children = num_children\n    # Calculate the maximum number of apples Ann can get after others get at least one each\n    max_apples_Ann = total_apples - min_apples_other_children\n    return max_apples_Ann\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combination when Cherry picks blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n\n    # Combination when Cherry picks dress with shoes\n    dress_shoes_combinations = dresses * shoes\n\n    # Combination when Cherry picks dress with heels\n    dress_heels_combinations = dresses * heels\n\n    # Total combinations is the sum of all three possibilities\n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n    equation1 = Eq(a + b, 13)\n    equation2 = Eq(a + c, 25)\n    equation3 = Eq(c, 3 * b)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the given digits\n    digits = '1356789'\n    perms = [''.join(p) for p in permutations(digits)]\n\n    # Iterate through permutations to find the correct numbers\n    for perm in perms:\n        first_number = int(perm[:2])         # Assume first number is 2-digit\n        second_number = int(perm[2:4])       # second number is also 2-digit\n        third_number = int(perm[4:])         # third number is 3-digit\n\n        # Check if the relationships between the numbers hold\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n\n    equation1 = Eq(4 * book + 8 * teddy, 164)\n    equation2 = Eq(2 * book + 3 * teddy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all to grams for easier calculation\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Find the mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Find the difference between the soil and sand mass\n    mass_difference_g = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the mass difference back to kg and g\n    mass_difference_kg = mass_difference_g // 1000\n    mass_difference_g %= 1000\n\n    return (mass_difference_kg, mass_difference_g)\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "from sympy import divisors\n\ndef solution():\n    # hcf is the product of the shared prime factors to their shared powers\n    hcf = 3**1 * 5**2\n\n    # Define the function to determine the number of factors for a given power of 3 and 5\n    def find_number_of_factors(power_of_3, power_of_5):\n        # The number of divisors of a number is the product of (exponent+1) of its prime factors\n        return (power_of_3 + 1) * (power_of_5 + 1)\n    \n    # Searching for M and N given their number of factors and HCF\n    # First, list the possible exponents for 3 and 5 given their number of factors\n    possible_m_3_power = []\n    possible_m_5_power = []\n    possible_n_3_power = []\n    possible_n_5_power = []\n    \n    # Fill in the possible powers for M (12 divisors) and N (10 divisors) based on the number of divisors formula\n    for i in range(12):\n        for j in range(12):\n            if find_number_of_factors(i, j) == 12:\n                possible_m_3_power.append(i)\n                possible_m_5_power.append(j)\n    for i in range(10):\n        for j in range(10):\n            if find_number_of_factors(i, j) == 10:\n                possible_n_3_power.append(i)\n                possible_n_5_power.append(j)\n    \n    # Find M and N based on the possible powers and their HCF\n    # Since HCF is 75, we know that the shared powers of 3 and 5 are (3^1, 5^2)\n    M, N = 0, 0\n    for i in range(len(possible_m_3_power)):\n        for j in range(len(possible_n_3_power)):\n            candidate_M = 3**possible_m_3_power[i] * 5**possible_m_5_power[i]\n            candidate_N = 3**possible_n_3_power[j] * 5**possible_n_5_power[j]\n            # Check if the HCF of M and N is 75\n            if hcf * candidate_M // 75 == candidate_N // 75 == hcf:\n                M, N = candidate_M, candidate_N\n                break\n        if M and N:\n            break\n    \n    return M + N\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of buttons James has as 'j' and Nina has as 'n'\n    j, n = symbols('j n')\n\n    # Equation1: The total number of buttons they have is 22\n    equation1 = Eq(j + n, 22)\n\n    # Equation2: After Nina gives 4 buttons to James, they have the same number\n    equation2 = Eq(n - 4, j + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, n))\n\n    # We need the value of n (the number of buttons Nina has originally)\n    return solutions[n]\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper / paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    total_points = 29\n    points_correct = 4\n    points_incorrect = -2\n\n    # Let x be the number of correct answers and \n    # (total_questions - x) be the number of incorrect answers\n    # Equation: points_correct * x + points_incorrect * (total_questions - x) = total_points\n\n    x = (total_points - points_incorrect * total_questions) / (points_correct - points_incorrect)\n\n    return int(x)\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = '12345'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_patterns = 52 // len(pattern)\n    remaining_digits = 52 % len(pattern)\n\n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320  # in meters\n\n    # Since there are no trees in front of the school or her house,\n    # the distance for (total_trees + 1) intervals is 320 meters.\n    intervals = total_trees + 1\n\n    # The distance between each tree is the total distance divided by the number of intervals.\n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    total_length = 10 + 4/5\n    short_rod_length = 3/10\n    num_short_rods = total_length / short_rod_length\n    return int(num_short_rods)\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price_for_30 = 2800\n    cost_without_deal = 20 * single_laptop_price\n    cost_with_deal_for_20 = (deal_price_for_30 / 30) * 20\n    savings = cost_without_deal - cost_with_deal_for_20\n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits. So 1 rabbit is equivalent to 10 / 4 fish.\n    fish_per_rabbit = 10 / 4\n\n    # Oscar trades 5 rabbits for 6 packs of wheat. So 1 pack of wheat is equivalent to 5 / 6 rabbits.\n    rabbit_per_wheat = 5 / 6\n    \n    # To find out how many fish are equivalent to one pack of wheat,\n    # we multiply the number of fish per rabbit by the number of rabbits per wheat pack.\n    fish_per_wheat = fish_per_rabbit * rabbit_per_wheat\n\n    # To find out how many fish are needed for 12 packs of wheat,\n    # we multiply the number of fish per wheat pack by 12.\n    fish_for_12_wheat = fish_per_wheat * 12\n    \n    # The result should be an integer number of fish, so we round the number if necessary.\n    ans = round(fish_for_12_wheat)\n    return ans\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown, which is the number of penguins\n    penguins = symbols('penguins')\n\n    # Create the equation for when 3 fish are given to each penguin\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    # Solve for the number of penguins\n    penguin_count = solve(equation1, penguins)\n\n    return penguin_count[0]\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    subtracted_instead_of_adding = 26\n    actual_number = incorrect_result + (2 * subtracted_instead_of_adding)\n    return actual_number\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    total_earnings = hourly_rate * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35 / 100\n    number = 80\n    result = percentage * number\n    return result\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n\n    return kelly_height\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # There are 4 dancing performances, we can think of them as \"D\", and between every 2 \"D\" there must be \n    # at least 1 singing performance \"S\". Let's represent this minimum structure as \"DSDSDSDSD\".\n    # There are 5 gaps between these performances (including the ends), and in these 5 gaps we need to place the remaining \n    # 2 singing performances. This can be done in C(5, 2) = 5! / (2! * (5-2)!) ways.\n    \n    # Once the S and D are fixed in their minimum structure, we have to permute the total structure without \n    # disrupting the S and D spacing. Because there are repetitive elements (6 S's and 4 D's), the total permutation \n    # is (6+4)!/(6!*4!) = 10! / (6! * 4!).\n    \n    # The total number of ways to arrange the performances is then the product of these two quantities.\n    \n    # Calculating combinations (C(5, 2)) and permutations ((10! / (6! * 4!))).\n    gaps_combinations = factorial(5) // (factorial(2) * factorial(5 - 2))\n    total_permutations = factorial(10) // (factorial(6) * factorial(4))\n    \n    # The final answer is the product of these two quantities.\n    return gaps_combinations * total_permutations\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    dividend = 689\n    divisor = 13\n\n    quotient = dividend // divisor\n\n    return quotient\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    \n    cards_lost = original_cards * fraction_lost\n\n    return int(cards_lost)\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n\n    return comb(num_students, num_monitors)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # The score for one team at half time can't be more than the final score\n    for score_team1_ht in range(4): # Since the first team scored 3 in the end, it scored 0, 1, 2, or 3 goals by half time\n        for score_team2_ht in range(3): # Similarly, the second team could have 0, 1 or 2 goals by half time\n            # The total number of goals each team can score in second half\n            goals_team1_second_half = 3 - score_team1_ht\n            goals_team2_second_half = 2 - score_team2_ht\n            # If both teams scored the same or more goals in the second half than first half\n            # then this is a possible half time score\n            if goals_team1_second_half >= 0 and goals_team2_second_half >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emma = symbols('emma')\n    clara = 5 * emma  # Clara baked five times as many cookies as Emma did.\n    equation = Eq(clara + emma, 1002)\n    \n    # Solve for emma\n    emma_cookies = solve(equation, emma)\n    \n    return emma_cookies[0]\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_weight_half_full = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = half_full_weight - mangoes_weight_half_full\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    total_amount = 400\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "from sympy import symbols, solve\n\ndef solution():\n    pupils = symbols('pupils')\n    girls_cannot_swim = 20 / 2\n    boys_cannot_swim = 20 / 2\n    girls = (8/3) * girls_cannot_swim\n    boys = (5/3) * boys_cannot_swim\n\n    total_pupils = solve(pupils - (girls + boys), pupils)\n\n    return total_pupils[0]\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Given that Mike is always 2nd in line, we deduce that the array must be at least 3x2 or 2x3\n    # Since this array could be potentially very large, there isn't necessarily an upper bound\n    # However, the whole number of students must be a multiple of both dimensions.\n    # We'll start from the smallest realistic array and increment by possible sizes\n\n    students_count = 0\n    for rows in range(2, 100):  # using 100 as an arbitrary upper limit for a classroom size\n        for cols in range(2, 100):\n            # Since Mike is 2nd in line no matter the direction, we can infer that he\n            # cannot be on the corner. Therefore, the array cannot be a square (3x3, 4x4, etc)\n            # and the number of rows cannot equal the number of columns.\n            if rows != cols and (rows - 1) * (cols - 1) == 1:\n                students_count = rows * cols\n                # Once we find one valid solution, we break out of the loop.\n                return students_count\n    return students_count\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_left_over = 16\n    pip_fraction = 3 / 5\n\n    sweets_in_box = bud_left_over / (1 - pip_fraction)\n\n    return int(sweets_in_box)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    product = 6 * 5\n    percentage = (product / 40) * 100\n    return percentage\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_5_cups = cost_per_cup * 5\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_house_capacity = 4\n    num_big_houses = 5\n    num_small_houses = 9\n    total_rabbits = 38\n\n    total_capacity_big_houses = big_house_capacity * num_big_houses\n    remaining_rabbits = total_rabbits - total_capacity_big_houses\n    small_house_capacity = remaining_rabbits // num_small_houses\n\n    return small_house_capacity\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((2 * i + 1) if i % 2 == 1 else -(2 * i + 1) for i in range(1, 9))\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    children_at_school = total_children - absent_children\n    return children_at_school\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July inclusive is 5 months\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n    \n    return total_pizzas\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * 7\n    ways[0] = 1  # There is one way to stay on the ground\n    ways[1] = 1  # There is only one way to reach the first step, take one step\n\n    for i in range(2, 7):  # Starting from the second step up to the sixth step\n        ways[i] = ways[i-1] + ways[i-2] + ways[i-3]\n\n    return ways[6]\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    product_of_digits = 2 * 3 * (sum_of_numbers // 2 // 3)\n    return product_of_digits\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    effective_speed_upstream = speed_in_still_water - speed_of_current\n    time_to_travel = distance / effective_speed_upstream\n\n    return time_to_travel\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of Abigail and Ryan\n    abigail, ryan = symbols('abigail ryan')\n\n    # Given: Abigail is 3 times as old as Ryan\n    equation1 = Eq(abigail, 3 * ryan)\n    # In 6 years, Abigail will be 42\n    equation2 = Eq(abigail + 6, 42)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    # Ryan's current age\n    ryan_age_now = solutions[ryan]\n    # Ryan's age in 2 years\n    ryan_age_in_2_years = ryan_age_now + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2*drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = -(-56 // 4) * 4   # Ceiling division to get the first multiple of 4\n    last_multiple = 92 // 4 * 4        # Floor division to get the last multiple of 4\n\n    # Calculate number of multiples by subtracting and dividing by 4,\n    # then add 1 to include both first and last in the count\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1)**(i//4) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    claire_current = symbols('claire_current')\n    \n    # Equation representing the age problem\n    equation = Eq(claire_current + 6, 3 * claire_current)\n\n    # Solve for Claire's current age\n    claire_current_age = solve(equation, claire_current)\n\n    # Calculate Claire's age two years from now\n    claire_future_age = claire_current_age[0] + 2\n\n    return claire_future_age\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    # Calculating the sum of the given fractions\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let x be the time the journey should have taken in hours\n    # The train took 11/12 of the time it should have done\n    # And since it left 15 minutes late but arrived only 5 minutes late, it made up 10 minutes.\n    # 10 minutes is 10/60 = 1/6 of an hour\n    # Therefore, the equation is x - (11/12)x = 1/6\n    # Solving for x, we get the time the journey should have taken\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - (11/12) * x, 1/6)\n    time_should_have_taken = solve(equation, x)[0]\n\n    return time_should_have_taken * 60  # Convert hours to minutes\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 9\n    # We only need to consider the pattern of the last digit when base is raised to different powers.\n    # For base 9, the pattern of the last digit is: 9, 1, 9, 1, ...\n    # This is because 9^1 has the last digit 9, 9^2 has the last digit 1 (as 81 ends in 1), and this pattern repeats every 2 powers.\n    pattern_length = 2\n\n    # We can find the position in the pattern for 9^99 by taking the power modulo the length of the pattern.\n    pattern_position = 99 % pattern_length\n\n    # If the position is 0, it mean it's the last number in the pattern, which is 1\n    # If the position is 1, it's the first number in the pattern, which is 9.\n    ans = 9 if pattern_position != 0 else 1\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022  # Return the difference from 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number = (total_product - known_product) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # 44p change can be given as:\n    # 20p + 20p + 2p + 2p (4 coins)\n    # As all UK coin denominations are multiples of 2, and there is no coin for 40p,\n    # we cannot do it in fewer than 4 coins.\n    # Susan has to pay one coin at least to get the change.\n    # Therefore, a minimum of 5 coins will change hands, considering Susan also pays with a single coin.\n    \n    return 5\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To ensure Jane draws 4 different coloured marbles in the worst case:\n    # Draw all red marbles: 4 marbles\n    # Draw all but one green marble to ensure the next is a different colour: 6 marbles\n    # Draw all but one blue marble to ensure the next is a different colour: 5 marbles\n    # The next marble drawn after this will definitely be orange: 1 marble\n    # 4 (red) + 6 (green) + 5 (blue) + 1 (orange) = 16 marbles\n    return 4 + 6 + 5 + 1\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from itertools import combinations\n\ndef solution():\n    books = 19\n    kids = 4\n    count = 0\n    for combo in combinations(range(1, books - kids + 1), kids - 1):\n        if sum(combo) <= books - 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = 1\n    net_distance_per_day = day_distance - night_distance\n    \n    days = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_distance\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    term = 2\n    difference = 1\n    while term < 100:\n        term += difference\n        difference += 1\n    return term\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, start with one pen in each.\n    remaining_pens = 6 - 3\n    # Now we need to distribute the remaining pens into 3 pencil cases.\n    # This is a problem of distributing indistinct items into distinct boxes,\n    # which can be solved using stars and bars method. We have `remaining_pens` stars and `3 - 1` bars.\n    num_pencil_cases = 3\n    bars = num_pencil_cases - 1\n    # The formula for stars and bars is C(stars + bars, bars), where C is the combination function.\n    from math import comb\n    num_ways = comb(remaining_pens + bars, bars)\n    \n    return num_ways\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of motorbikes, y the number of tricycles, and z the number of vans.\n    # A motorbike has 2 wheels, a tricycle has 3, and a van has 4.\n    x, y, z = symbols('x y z')\n\n    # Motorbike and van wheels = tricycle wheels + 35\n    equation1 = Eq(2*x + 4*z, 3*y + 35)\n    # Tricycle and van wheels = motorbike wheels + 13\n    equation2 = Eq(3*y + 4*z, 2*x + 13)\n    # Total wheels\n    equation3 = Eq(2*x + 3*y + 4*z, 101)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculate number of more motorbikes than vans\n    num_more_motorbikes_than_vans = solutions[x] - solutions[z]\n\n    return num_more_motorbikes_than_vans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = 0\n    for i in range(2, 41, 4):\n        ans += i**2 - (i-2)**2\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    target_cups = 30\n    gallons_needed = target_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    Pip_and_Bud = 2  # Including Pip and Bud\n\n    total_people = people_in_front_of_Pip + Pip_and_Bud + people_behind_Bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for amounts of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Given conditions\n    equation1 = Eq(A, 5 * B)             # Tank A has 5 times as much water as Tank B\n    equation2 = Eq(B, 5 + C)             # Tank B has 5 more liters of water than Tank C\n    equation3 = Eq(C + D, A)             # The total amount of water in Tank C and Tank D is equal to Tank A\n    equation4 = Eq(D, 41)                # Tank D contains 41 liters of water\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    # Return the amount of water in Tank B\n    return solutions[B]\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 298\n\n    term_number = ((nth_term - first_term) / common_difference) + 1\n\n    return int(term_number)\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    number = 0\n    while True:\n        if number % 7 == 3 and number % 11 == 7 and number % 13 == 9:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    total_students = 36\n    \n    # Let x be the number of students who like both sports\n    x = symbols('x')\n\n    # According to the problem, the number of students who like football\n    # is three times the number of students who like both sports\n    football_lovers = 3 * x\n\n    # Similarly, the number of students who like basketball is four times \n    # the number of students who like both sports\n    basketball_lovers = 4 * x\n\n    # The total number of students liking at least one sport is the sum of\n    # students who like football, basketball, minus those who like both (as they are counted twice)\n    equation = Eq(football_lovers + basketball_lovers - x, total_students)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The solution will give us the number of students who like both sports\n    return solution[0]\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]  # given numbers\n    total = sum(numbers)          # sum of the given numbers\n    average = 6                   # given average\n    n = 8                         # total numbers (including p and q)\n\n    # Total sum of all 8 numbers\n    total_sum = average * n\n\n    # Sum of p and q\n    pq_sum = total_sum - total\n\n    # The maximum difference between min and max is 6\n    max_diff = 6\n\n    # Loop through possible values of p and q such that p < q\n    # Start from the minimum p which is higher than the lowest number 3\n    for p in range(4, pq_sum // 2 + 1):\n        q = pq_sum - p\n        if q - min(numbers + [p]) == max_diff:  # Check if the difference is 6\n            return q\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    ans = 0\n\n    for n0 in range(1, 3):           # digit 0\n        for n1 in range(1, 3):       # digit 1\n            for n2 in range(1, 3):   # digit 2\n                if n0 + n1 + n2 == 6:  # ensure the count is correct, there are two other digits for y\n                    # calculate combinations of different digits\n                    days = set(permutations('0' * n0 + '1' * n1 + '2' * n2 + '4' * 2))\n                    for day in days:\n                        d = int(''.join(day[4:]))\n                        m = int(''.join(day[2:4]))\n                        if 1 <= m <= 12:\n                            if m == 2 and 1 <= d <= 28:\n                                ans += 1\n                            if m in [1, 3, 5, 7, 8, 10, 12] and 1 <= d <= 31:\n                                ans += 1\n                            if m in [4, 6, 9, 11] and 1 <= d <= 30:\n                                ans += 1\n\n    return ans\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam in km/h\n    speed_adam = 60\n    # Speed of Jacob in km/h\n    speed_jacob = 80\n\n    # Jacob's travel time in hours\n    time_jacob = 3\n    # Adam's total travel time in hours (3 hours + 30 minutes)\n    time_adam = 3 + 0.5\n\n    # Total distance Adam traveled\n    distance_adam = speed_adam * time_adam\n    # Total distance Jacob traveled\n    distance_jacob = speed_jacob * time_jacob\n\n    # The total distance between their homes\n    total_distance = distance_adam + distance_jacob\n\n    return total_distance\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Prime factorization of 252 = 2^2 * 3^2 * 7^1\n    factors_count = (2 + 1) * (2 + 1) * (1 + 1)  # (exponents+1) product\n    return factors_count\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    step1 = custom_operation(1, 2)\n    step2 = custom_operation(step1, 3)\n    step3 = custom_operation(step2, 4)\n    ans = custom_operation(step3, 5)\n    return int(ans)\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n\n    # Using the Pigeonhole Principle, at least one layer must have\n    # ceil(total_cakes / layers) cakes to guarantee each layer has at least one cake.\n    most_cakes = -(-total_cakes // layers)  # A way to calculate the ceiling division\n\n    return most_cakes\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 7 / 100\n    amount_paid_for_gst = 0.91\n    cost_before_gst = amount_paid_for_gst / gst_rate\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # If Lucy takes 3 marbles, by the Pigeonhole Principle, she will have at least 2 marbles of the same color.\n    # It's the worst case scenario where she picks one marble of each color first, and then the third marble will\n    # have to match one of the colors already picked.\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    weight1 = 2.49 * kg_to_g\n    weight2 = 670\n    weight3 = (3 * kg_to_g) + 80\n\n    total_weight = weight1 + weight2 + weight3\n\n    return total_weight\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time = 60  # total exercise time in minutes\n    cycling_time = total_exercise_time / 3\n    jogging_time = total_exercise_time - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin_age_now = symbols('justin_age_now')\n    equation = Eq(justin_age_now + 18, 4 * (justin_age_now - 6))\n\n    justin_current_age = solve(equation, justin_age_now)\n\n    return justin_current_age[0]\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple of the three times\n    meet_time = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the next meeting time\n    meet_minutes = meet_time // 60\n    meet_seconds = meet_time % 60\n    meet_hours = meet_minutes // 60\n    meet_minutes = meet_minutes % 60\n\n    # Since they start at 10:00 a.m., add the meeting time to the start time\n    start_hour = 10\n    next_meeting_hour = (start_hour + meet_hours) % 24\n    next_meeting_minute = meet_minutes\n    next_meeting_second = meet_seconds\n\n    # Formatting the time to HH:MM:SS\n    next_meeting_time = f\"{str(next_meeting_hour).zfill(2)}:{str(next_meeting_minute).zfill(2)}:\" \\\n                        f\"{str(next_meeting_second).zfill(2)}\"\n    \n    return next_meeting_time\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18  # Difference between consecutive terms of the sequence\n    last_term = 2  # Last given term in the sequence\n    next_term = last_term - difference  # Next term in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_miles_per_gallon = 72.8\n    tom_additional_gallons = 6 + 3/4\n\n    sam_gallons = distance / sam_miles_per_gallon\n    tom_gallons = sam_gallons + tom_additional_gallons\n    tom_miles_per_gallon = distance / tom_gallons\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "from math import comb\n\ndef solution():\n    # First, start by considering one color, and see how many we can draw without ensuring a different color.\n    # For instance, we can draw all 3 red M&M's but we can't be sure we have a different color.\n    # So after 3 red, we need to draw exactly 1 more to ensure we have a different color (either yellow or brown).\n    red_only = 3\n\n    # But we must also consider that we could start by drawing yellow or brown,\n    # so we also calculate those scenarios:\n    yellow_only = 4\n    brown_only = 5\n\n    # To guarantee a different color, we must take out all of one color and one more.\n    # We take the maximum of red_only, yellow_only, brown_only to ensure we account for the worst case.\n    max_single_color = max(red_only, yellow_only, brown_only)\n\n    # Since we need to take out one more than this maximum single color count to ensure a different color, we add 1.\n    min_to_ensure_diff = max_single_color + 1\n\n    return min_to_ensure_diff\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Assuming the child with the most apples receives 'x' apples.\n    # The remaining children must receive between 1 and x-1 apples and all must be different.\n    # We start from the highest possible value for the most apples (30) and go down,\n    # until we find a number x that allows us to distribute the remaining apples between the remaining children\n    # with each child receiving a different amount.\n    \n    # There are 30 apples, and we have to leave at least one apple for each of the other 5 children.\n    # Thus, we start the max number at 30 - 5(from the second child to the sixth child).\n    max_apples = 30 - 5 * (5 + 1) // 2  # Using the formula for the sum of first n natural numbers\n\n    # We iterate from the maximum possible apples for one child down to 6 (each child must get at least one apple)\n    for x in range(max_apples, 5, -1):\n        # Calculate the sum of natural numbers up to x - 1 which would be the maximum sum of apples\n        # the remaining children can get if they do not share the same amount with each other.\n        used_apples = x + (x - 1) * (x - 1 + 1) // 2 - (1 * (1 + 1)) // 2  # Subtract the sum for '1' as we started from 2\n        remaining_apples = 30 - used_apples  # The remaining apples after giving x apples to one child\n\n        # If the remaining apples is enough for each of the 5 children to get different amounts (starting from 1),\n        # and have no apples left, we found the solution.\n        if remaining_apples >= 15 and remaining_apples <= (x - 1):\n            return x\n    \n    # In case no solution is found (which shouldn't happen given the problem constraints), return None\n    return None\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    sum_result = 3017 + 4962\n    return sum_result\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum((2 * i + 1) ** 2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_combinations = shirts * skirts\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Pattern is identified as each number being 3 raised to the power of n, where n starts at 0.\n    # 1 = 3^0, 3 = 3^1, the next term should be 3^2 which is 9, followed by 27 = 3^3 and 81 = 3^4.\n    \n    # Thus, the missing number is 3^2\n    missing_number = 3**2\n    return missing_number\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given the 7th, 8th, and 9th terms of an arithmetic sequence\n    term7 = 105\n    term8 = 120\n    term9 = 135\n    \n    # Calculate the common difference of the sequence\n    common_difference = term8 - term7\n    \n    # Calculate the first term using the 7th term\n    first_term = term7 - (7 - 1) * common_difference\n    \n    # Calculate the 100th term using the first term and common difference\n    term100 = first_term + (100 - 1) * common_difference\n    \n    return term100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert decimal numbers to base 7\n    num1_base7 = int(str(45), 7)\n    num2_base7 = int(str(66), 7)\n\n    # Calculate sum in base 7\n    sum_base10 = num1_base7 + num2_base7\n\n    # Convert sum back to base 7 from base 10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return int(ans)\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    num_rabbits = 8\n    num_days = 5\n\n    total_carrots = carrots_per_day_per_rabbit * num_rabbits * num_days\n\n    return total_carrots\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    result = (5 / 8) * 160\n    return result\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, lemons = symbols('oranges lemons')\n    equation1 = Eq(oranges / lemons, 3/5)\n    equation2 = Eq((oranges - 48) / lemons, 1/2)\n    \n    solutions = solve((equation1, equation2), (oranges, lemons))\n    \n    return solutions[lemons]\n    \nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Rates at which each animal eats a bale of hay per day\n    horse_rate = 1/2\n    cow_rate = 1/3\n    sheep_rate = 1/12\n    \n    # Combined rate of consumption per day\n    combined_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Number of bales\n    bales = 22\n    \n    # Number of days the bales will last\n    days = bales / combined_rate\n    \n    return days\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let d be the daughter's current age and m be the mother's current age.\n    \n    # When the daughter reaches the mother's current age (m), the mother will be 75 years old.\n    # So we have: m + (m - d) = 75, which simplifies to 2m - d = 75... (1)\n\n    # When the mother was the daughter's current age (d), the daughter was 3 years old.\n    # So that was (m - d) years ago.\n    # Therefore, we have: d - (m - d) = 3, which simplifies to 2d - m = 3... (2)\n\n    # Now we need to solve the two simultaneous equations (1) and (2).\n\n    # From equation (2) we get: m = 2d - 3... (3)\n    \n    # Substituting (3) into (1) gives us: 2 * (2d - 3) - d = 75\n    # Which simplifies to: 4d - 6 - d = 75\n    # So: 3d = 75 + 6\n    # And: d = (75 + 6) / 3\n    # Hence: d = 81 / 3\n    d = 27\n\n    # We can now find the mother's age (m) using equation (3):\n    # m = 2d - 3\n    m = (2 * d) - 3\n\n    return m\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Isabella wants to ensure she gets 3 red apples.\n    # The worst case scenario is when she picks out all the non-red apples first.\n    # She would then need to pick one more for each red apple she wants.\n\n    # Number of non-red apples in the basket\n    green_apples = 11\n    yellow_apples = 7\n    non_red_apples = green_apples + yellow_apples\n\n    # Number of red apples Isabella wants\n    target_red_apples = 3\n\n    # The smallest number of apples she needs to take out\n    # to make sure that she gets 3 red apples is all non-red apples\n    # plus 3 red apples.\n    apples_to_take_out = non_red_apples + target_red_apples\n\n    return apples_to_take_out\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*(x+2), 51+2*(x-1))\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_amount = 200\n    final_amount = 204\n    percentage_change = ((final_amount - initial_amount) / initial_amount) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    \n    # Assuming the year 2014 has the digits '2', '0', '1', '4'\n    # We need to find combinations having same number of '0', '1', '2'\n    # The remaining two digits can be from '3' to '9' including '4' again\n    for digits in permutations('0011223456789', 8):\n        if digits[0] != '0' and '2014' in ''.join(digits):\n            count += 1\n    \n    # Since permutations include repetitions and we only want unique dates\n    # we divide the total count by factorial of the number of repetitions\n    # for each repeating digit\n    count = count // (2 * 2 * 2)  # Divided by factorial of number of '0's, '1's, and '2's\n    return count\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.80\n    original_price = total_spent / (1 - discount)\n    money_saved = original_price - total_spent\n    return money_saved\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    num_teams = 6\n    total_games = num_teams * (num_teams - 1) // 2  # Total number of games in round-robin\n    points_per_game = 2  # Total points distributed in each game\n\n    total_points = total_games * points_per_game\n    return total_points\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Assuming all boys are right-handed, we can find the least number of right-handed girls.\n    # This would be the number of right-handed minus the number of boys.\n    boys = total_pupils - girls\n    right_handed_girls = right_handed - boys\n\n    # If the calculated number of right-handed girls is negative, it means that some boys are left-handed, and all girls are right-handed.\n    # Therefore, the minimum number of right-handed girls will be 0 in this scenario.\n    right_handed_girls = max(0, right_handed_girls)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n    minibuses_needed = (children + minibus_capacity - 1) // minibus_capacity\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane needs to ensure she has 4 different colored marbles,\n    # we have to consider the worst case scenario using the pigeonhole principle.\n    \n    # Start by picking the marbles one by one until she has all but one color. \n    # This guarantees that the next marble will complete the set of four different colors.\n    \n    # Pick the maximum number of marbles from each color except the one with the least amount.\n    max_marbles_without_orange = (4 - 1) + (7 - 1) + (6 - 1)\n\n    # Now add one more marble which is guaranteed to be the fourth color, orange in this case.\n    total_marbles = max_marbles_without_orange + 1\n    return total_marbles\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 41))  # Generate a list of prime numbers less than 41\n\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    equation2 = Eq(girls_swim, 31/80 * girls)  # Ratio of girls who can swim\n    equation3 = Eq(girls_not_swim, 49/80 * girls)  # Ratio of girls who cannot swim\n    equation4 = Eq(boys_swim, boys_not_swim - 120)  # Boys who can swim is 120 less\n    equation5 = Eq(girls + boys, 1690)  # Total number of pupils\n    equation6 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, 1690)  # Total should also include swimming and non-swimming\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Number of pupils who cannot swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_not_swim\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    cost_per_pc_4 = 7 / 4\n    cost_per_pc_6 = 8.5 / 6\n    if cost_per_pc_4 < cost_per_pc_6:\n        ans = \"4pc is a better buy\"\n    else:\n        ans = \"6pc is a better buy\"\n    return ans\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    # The count of zeros at the end of a product of a sequence of whole numbers (also known as\n    # the factorial of n, denoted as n!) is determined by the number of times the product can be\n    # divided by 10. Since 10 = 2 * 5, we count the pairs of 2s and 5s in the prime factorization\n    # of the factorial.\n    \n    # The number of 5s in the prime factorization is always less than the number of 2s, so we\n    # need to count the number of 5s to determine the number of zeros.\n    \n    # Initialize n and the count of 5s\n    n = 0\n    count_5s = 0\n    \n    # Loop until the count of 5s in the factorial is less than 28\n    while count_5s < 28:\n        n += 1\n        # Check the factors of the current number for 5s\n        temp = n\n        while temp % 5 == 0:\n            count_5s += 1\n            temp //= 5\n    \n    return n\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    phone_cost = 740\n    rent_fraction = 0.75\n    remaining_fraction = 1/5\n\n    # Equation for the money spent on phone and rent\n    spent_equation = Eq(salary - (phone_cost + rent_fraction * (salary - phone_cost)), salary * remaining_fraction)\n\n    # Solve the equation\n    solution = solve(spent_equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_after_removing_apples = 280\n    number_of_apples_removed = 3\n    \n    weight_of_removed_apples = total_weight_with_apples - weight_after_removing_apples\n    weight_of_one_apple = weight_of_removed_apples / number_of_apples_removed\n\n    number_of_remaining_apples = 5 - number_of_apples_removed\n    total_weight_of_remaining_apples = number_of_remaining_apples * weight_of_one_apple\n\n    weight_of_basket = weight_after_removing_apples - total_weight_of_remaining_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "import itertools\n\ndef solution():\n    numbers = [2, 3, 4]\n    \n    all_combinations = []\n    for r in range(1, len(numbers)+1):\n        all_combinations.extend(itertools.permutations(numbers, r))\n    \n    unique_combinations = {\"\".join(map(str, comb)) for comb in all_combinations}\n    return len(unique_combinations)\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    bet_amount = 1\n    win_amount = 10\n\n    # The possible sums that are greater than 10 are 11 and 12\n    favorable_outcomes = {11: 0, 12: 0}\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            total = die1 + die2\n            if total in favorable_outcomes:\n                favorable_outcomes[total] += 1\n    \n    # Calculate the probability of winning\n    total_possible_outcomes = 6 * 6\n    probability_of_winning = (favorable_outcomes[11] + favorable_outcomes[12]) / total_possible_outcomes\n    \n    # Expected number of wins\n    expected_wins = total_rolls * probability_of_winning\n\n    # Calculate the expected value\n    expected_payout = expected_wins * win_amount\n    expected_loss_per_game = bet_amount - (expected_payout / total_rolls)\n\n    # Expected total loss\n    expected_total_loss = expected_loss_per_game * total_rolls\n    \n    return expected_total_loss\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100  # This is the half left after he drank before class\n    original_amount = after_class * 2  # Reverse the process of drinking half\n\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Initializing the starting point\n    hours = 2\n    minutes = 31\n    \n    # Counter for minutes elapsed\n    minutes_elapsed = 0\n    \n    # Using a set to store the unique digits \n    required_digits = {'0', '1', '2', '3'}\n    \n    # Looping until we find the required condition\n    while True:\n        # Incrementing the minutes\n        minutes += 1\n        minutes_elapsed += 1\n        \n        # If the minutes are 60, increment the hours by 1 and reset minutes to 0\n        if minutes == 60:\n            minutes = 0\n            hours += 1\n            \n        # If the hours are 24 (midnight), reset hours to 0\n        if hours == 24:\n            hours = 0\n        \n        # Formatting the time into a string, adding leading zeros for single digits\n        time_str = f\"{hours:02d}{minutes:02d}\" \n        \n        # If all the required digits are in the current time, break the loop\n        if set(time_str) == required_digits:\n            break\n\n    return minutes_elapsed\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    result_diamond = diamond(4, 2)\n    ans = triangle(result_diamond, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3 / 7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3 / 8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3 / 4\n    num_bags = remaining_after_tuesday / bag_weight\n    return int(num_bags)\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    lynn, mary = symbols('lynn mary')\n    \n    # Lynn and Mary initially had the same amount of money\n    equation1 = Eq(lynn, mary)\n    \n    # After Lynn spent $160 and Mary spent $58, Mary had thrice as much\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lynn, mary))\n    \n    lynn_left = solutions[lynn] - 160\n    return lynn_left\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    unsold_tickets_percentage = 100 - 60\n    unsold_tickets_count = 28\n\n    total_capacity = (unsold_tickets_count * 100) / unsold_tickets_percentage\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # Since the remainder must be less than the divisor\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48, 44]) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for minuend in range(10, 100):\n        for subtrahend in range(10, 100):\n            correct_tens = subtrahend // 10\n            correct_ones = subtrahend % 10\n            mistaken_tens = 5\n            mistaken_ones = 3\n            mistaken_subtrahend = mistaken_tens * 10 + mistaken_ones\n            correct_subtrahend = correct_tens * 10 + correct_ones\n            \n            if minuend - mistaken_subtrahend == 36 and correct_tens == 3 and correct_ones == 2:\n                correct_difference = minuend - correct_subtrahend\n                return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice = 7 * 195  # Total amount of juice in ml\n    jug_capacity = 250      # Capacity of each jug in ml\n    num_jugs = -(-total_juice // jug_capacity) # We use ceiling division for least number of jugs\n\n    return num_jugs\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    total = 0\n    numerator = 100\n    denominator = 97\n    while denominator >= 1:\n        total += numerator / denominator\n        numerator *= numerator - 1\n        denominator -= 1\n    return total\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    total_matches = 220\n\n    matches_weight = total_weight_with_matches - empty_box_weight\n    weight_per_match = matches_weight / total_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50\n    desired_percentage = 0.90\n    blue_balls = 1\n\n    # Let x be the number of red balls to be removed.\n    # The number of red balls remaining will be (49 - x).\n    # We want (49 - x) / (total balls - x) to be equal to 0.90\n\n    # Set up the equation and solve for x.\n    x = (49 - (desired_percentage * total_balls)) / (1 - desired_percentage)\n\n    # Since we can't remove a fraction of a ball, round up to the nearest whole number.\n    return int(x)\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows and b be the number of birds\n    c, b = symbols('c b')\n\n    # Each cow has 4 legs and each bird has 2 legs\n    # We have two equations based on the problem statements:\n    equation1 = Eq(c + b, 1300)  # Total number of cows and birds\n    equation2 = Eq(4*c + 2*b, 3440)  # Total number of legs\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, b))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Starting from the largest 3-digit number that is odd and decrease in steps of 18 (which is divisible by 9)\n    # Since it's odd and divisible by 9, the last digit can be 1, 3, 5, 7 or 9\n    # The digit in tens place needs to be divisible by 4\n    # So possible digits for tens place could be 0, 4, or 8\n    for number in range(999, 99, -18):\n        if (number // 10) % 10 in [0, 4, 8]:\n            # If the tens digit is divisible by 4, we found our greatest possible number\n            return number\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    # Number of pens Jenny has initially\n    jenny_pens = 83\n    # Number of pens Jenny gives to Ben\n    given_pens = 28\n    \n    # After giving pens away, Jenny will have (jenny_pens - given_pens) pens\n    # Ben will also have the same amount of pens after receiving the given_pens,\n    # Let ben_pens be the number of pens Ben has initially\n    # So we write the equation: ben_pens + given_pens = jenny_pens - given_pens\n    ben_pens = jenny_pens - 2 * given_pens\n\n    return ben_pens\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "import math\n\ndef solution():\n    m1, v1_north = 500, 20  # mass and velocity of the first car going north\n    m2, v2_west = 500, 30   # mass and velocity of the second car going west\n    \n    # Since the cars have equal mass and stick together, we use vector addition\n    # to determine the velocity of the combined mass. The northward and west\n    # direction movement is perpendicular, so we can use Pythagorean theorem.\n    \n    # Calculate the final velocities in the north and west directions\n    vf_north = m1 * v1_north / (m1 + m2)\n    vf_west = m2 * v2_west / (m1 + m2)\n    \n    # Calculate magnitude of the velocity vector\n    vf_magnitude = math.sqrt(vf_north**2 + vf_west**2)\n    \n    # Calculate the angle of the velocity vector (counter-clockwise from west)\n    angle_from_west = math.degrees(math.atan2(vf_north, vf_west))\n    \n    # Since the final velocity is a vector, we return both magnitude and angle\n    # However, if only the magnitude is needed, remove the angle computation\n    return vf_magnitude, angle_from_west\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    total_length = (21 - 1) * 2 # 20 intervals of 2m each\n    num_lamp_posts = (total_length // 10) + 1 # One at each end and every 10m\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the cost of one DVD player\n    dvd_cost = symbols('dvd_cost')\n\n    laptop_cost = (2960 - dvd_cost)  # Cost of one laptop\n\n    # Equation based on the total cost\n    total_cost_eq = Eq(5 * laptop_cost + 4 * dvd_cost, 14438)\n\n    # Solve the equation\n    solution = solve(total_cost_eq, dvd_cost)\n\n    # Return the cost of one DVD player\n    return solution[0]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3\n    colours_per_size = 5\n    \n    ans = sizes * colours_per_size\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    avg_before_aaron, people_before_aaron = symbols('avg_before_aaron people_before_aaron')\n\n    # Equation when Aaron joined the group\n    equation1 = Eq(((avg_before_aaron * people_before_aaron) + 45) / (people_before_aaron + 1), 61)\n\n    # Equation when Ben joined the group\n    equation2 = Eq(((avg_before_aaron * people_before_aaron) + 45 + 71) / (people_before_aaron + 2), 62)\n\n    # Solve both equations for the same variables\n    solutions = solve((equation1, equation2), (avg_before_aaron, people_before_aaron))\n\n    return solutions[avg_before_aaron]\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # Iterate through all permutations of digits from 0-9\n    for p in permutations(range(10), 5):\n        # Assign each digit to a letter, one triangle is variable 'a'\n        a, b, c, d, e = p\n        # Multiply by the corresponding multipliers as per the puzzle\n        triangle_value = a * 10000 + b * 1000 + c * 100 + d * 10 + e\n        circle_value = b * 1000 + a * 100 + d * 10 + c\n        square_value = d * 100 + e * 10 + a\n        # Check the condition given in the puzzle\n        if triangle_value == circle_value + square_value:\n            return a  # This is the value of one triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    repeated_patterns = 2000 // len(pattern)\n    remaining_digits = 2000 % len(pattern)\n    \n    total_sum = repeated_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15  # Total amount paid by John in pounds\n    coffee_cost = 3.69  # Cost of the jar of coffee in pounds\n    milk_cost = 0.89  # Cost of the carton of milk in pounds (converted from pence to pounds)\n\n    sugar_cost = total_paid - (coffee_cost + milk_cost)  # Calculate the cost of the bag of sugar\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    # Let h be the number of hours that have passed since midnight\n    # Then the number of hours remaining until noon is 12 - h\n    # According to the problem, h = 2 * (12 - h)\n    # This simplifies to h = 24 - 2h or 3h = 24\n    h = 24 // 3\n\n    # Return the time in hours\n    return h\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Maximum balls Sheila can take out without having 4 balls of the same color\n    max_without_4_same = (4 - 1) * 3  # 3 colors, so she can take out 4-1 balls of each color at most\n\n    # To ensure she gets 4 balls of the same color, she has to take out one more ball\n    balls_to_take_out_for_4_same = max_without_4_same + 1\n\n    return balls_to_take_out_for_4_same\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    cost_oranges = 1.5 * 4.1\n    cost_mangoes = 2.3 * 2\n    total_cost = cost_oranges + cost_mangoes\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return int(ans)\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # List of known numbers\n    mean_value = 5                # Given mean value\n    total_numbers = len(numbers) + 1  # Including the unknown number a\n\n    # Sum of all numbers including a\n    total_sum = mean_value * total_numbers\n\n    # Subtract the sum of known numbers from total_sum to find a\n    a_value = total_sum - sum(numbers)\n    \n    return a_value\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Sum of the first half of the pyramid (1 to 13)\n    first_half = sum(range(1, 14))\n\n    # Sum of the second half of the pyramid (13 to 1)\n    second_half = sum(range(1, 14))\n\n    # The total sum of the pyramid\n    ans = first_half + second_half - 13  # Subtract the repeating middle term (13)\n    \n    return ans\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    reduction_percentage = (reduction_amount / original_price) * 100\n\n    return reduction_percentage\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A can do the job in 15 days, so in 1 day A does 1/15 of the job\n    a_rate = 1/15\n    # B can do the job in 10 days, so in 1 day B does 1/10 of the job\n    b_rate = 1/10\n\n    # They both work together for 4 days\n    work_done = 4 * (a_rate + b_rate)\n\n    # Remaining work to be done after A leaves\n    remaining_work = 1 - work_done\n\n    # Number of days B needs to finish the remaining job alone\n    days_for_b = remaining_work / b_rate\n\n    return days_for_b\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # Initialize the variables to determine the minimum number of test tubes.\n    bottles = 1000\n    test_tubes = 0\n\n    # Calculate the number of test tubes. We are using logarithm with base 2.\n    # Since we are testing for poison which presents maximum two outcomes (poison/no poison),\n    # this is similar to a binary search where each test tube can provide information about \n    # the state of multiple bottles.\n    while 2 ** test_tubes < bottles:\n        test_tubes += 1\n\n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for num in range(100, 1000):  # smallest three-digit number is 100\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    ducklings_legs = 4 * 2  # 4 ducklings with 2 legs each\n    geese_legs = 2 * 2      # 2 baby geese with 2 legs each\n    lamb_legs = 4           # each lamb has 4 legs\n\n    total_legs = 36         # total legs of all animals\n    remaining_legs = total_legs - (ducklings_legs + geese_legs)\n\n    num_lambs = remaining_legs // lamb_legs\n\n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Conversion from litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6 # Number of sweets remaining after the fourth day\n\n    # Calculate the number of sweets before the fourth day\n    before_fourth_day = remaining_sweets * 4\n\n    # Calculate the number of sweets before the third day\n    before_third_day = before_fourth_day * 5\n\n    # Calculate the number of sweets before the second day\n    before_second_day = before_third_day * 6\n\n    # Calculate the initial number of sweets\n    initial_sweets = before_second_day * 7\n\n    return initial_sweets\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # Let n be the size of the square layer with boys or girls.\n    # Boy layers will be equivalent to n**2 where n is even.\n    # Girl layers will be equivalent to n**2 where n is odd.\n    # If the outermost layer is boys, then the boys count will be:\n    # b = 2**2 + 4**2 + 6**2 + ... + k**2\n    # And the girls count will be:\n    # g = 1**2 + 3**2 + 5**2 + ... + (k-1)**2\n    # We know that b - g = 52\n    # The total number of students will be b + g\n    # We will keep adding the squares until we reach the given difference between boys and girls\n\n    boy_layer = 0\n    girl_layer = 0\n    layer = 0\n    \n    while True:\n        layer += 1\n        if layer % 2 == 0:  # Even layer, boys\n            boy_layer += layer**2\n        else:  # Odd layer, girls\n            girl_layer += layer**2\n        \n        if boy_layer - girl_layer == 52:\n            break\n\n    total_students = boy_layer + girl_layer\n    return total_students\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Charlene had at first.\n    x = symbols('x')\n\n    # Charlene kept half of the cookies plus 8 cookies.\n    charlene_kept = (1/2) * x + 8\n\n    # Emerald got the remaining cookies.\n    emerald_got = x - charlene_kept\n\n    # Emerald ate 1/3 of the cookies plus 4 cookies.\n    emerald_ate = (1/3) * emerald_got + 4\n\n    # Emerald gave the remaining cookies to Hebe.\n    hebe_got = emerald_got - emerald_ate\n\n    # Hebe ate 1/4 of the cookies and had 42 cookies left.\n    hebe_ate = (1/4) * hebe_got\n    hebe_left = hebe_got - hebe_ate\n\n    # Setting up the equation based on Hebe having 42 cookies left.\n    equation = Eq(hebe_left, 42)\n\n    # Solving the equation.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    days_for_720 = 5\n\n    uniforms_per_day = made_in_5_days / days_for_720\n    total_days = total_uniforms / uniforms_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    matches_total = 30\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the number of teams\n    n = symbols('n')\n\n    # The total number of matches is given by n choose 2 times 2 (for home and away)\n    # n * (n - 1) / 2 * 2 = 30\n    equation = Eq(n * (n - 1), 30 * 2)\n    \n    team_count = solve(equation, n)\n    \n    # Filter out the negative solution as number of teams cannot be negative\n    ans = [team for team in team_count if team.is_real and team > 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = 45\n    boys = symbols('boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solution = solve(equation, boys)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    product = 2*2*2*3*8*5*5*25\n    count = 0\n    while product % 10 == 0:\n        product //= 10\n        count += 1\n    return count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(40, 51):\n        root = i ** 0.5\n        if root.is_integer():\n            return i\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    number_of_cups = 3\n\n    water_used = cup_volume * number_of_cups\n    remaining_water = initial_volume - water_used\n\n    return remaining_water\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Define a function to calculate ways to reach a certain step\n    def ways_to_step(n):\n        # Base cases: 1 way to reach step 0 and 1 way to reach step 1\n        if n == 0 or n == 1:\n            return 1\n        # Recursive case: ways to reach previous step + ways to reach two steps before\n        else:\n            return ways_to_step(n - 1) + ways_to_step(n - 2)\n\n    # Calculate the ways to reach the 5th step\n    ways_to_5 = ways_to_step(5)\n    # Calculate the ways to reach the 10th step from the 5th step\n    ways_to_10_from_5 = ways_to_step(10 - 5)\n\n    # Total ways is the product of the ways to reach the 5th step and the ways to reach the 10th from there\n    return ways_to_5 * ways_to_10_from_5\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    n = 1\n    while n**4 < 3024:\n        n += 1\n    for i in range(n-1, 0, -1):\n        if i * (i + 1) * (i + 2) * (i + 3) == 3024:\n            return i + 3\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    # Let x be the cost of a notebook, y be the cost of a pencil case, and z be the cost of an eraser.\n    # According to the problem, we have the following equations:\n    # 3x + 4y + 5z = 50 (total cost)\n    # x + y = 6 (cost of a notebook and a pencil case)\n    # y + z = 8 (cost of a pencil case and an eraser)\n\n    # Now we need to solve these equations for y (pencil case cost).\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(3*x + 4*y + 5*z, 50)\n    equation2 = Eq(x + y, 6)\n    equation3 = Eq(y + z, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Return the cost of a pencil case\n    return solutions[y]\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: After Colin gives Bob $25 cards, Bob has $3 times as many cards as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    # Least common multiple of the pack sizes\n    from math import lcm\n    least_common_multiple = lcm(6, 8, 9, 15)\n\n    # Calculate the least number of packs needed to exceed 1000 markers\n    packs = -(-1000 // least_common_multiple)\n\n    # Calculate the total number of packs\n    total_packs = packs * 4  # Since there are four different pack sizes\n\n    return total_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    # The total number of handshakes is the combination of 10 students taken 2 at a time\n    # because each handshake involves 2 students.\n    from math import comb\n\n    total_students = 10\n    handshakes = comb(total_students, 2)  # Combination of 10 taken 2 at a time\n\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n    \n    num_anne_apples = solve(total_apples, anne)[0]\n    \n    return num_anne_apples\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    result = (20 / 100) * 90 - (90 / 100) * 20\n    return result\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert the recurring parts into fractions\n    # 0.1[1]9925[7] -> 1/10 + [1]/90 + 9925/990000 + [7]/9000000\n    a = 1/10 + 1/90 + 9925/990000 + 7/9000000\n    # 0.2[3]456[7] -> 2/10 + [23]/990 + 4567/1000000\n    b = 2/10 + 23/990 + 4567/1000000\n\n    # Check each decimal place for the smallest value of n where the nth decimal place is the same\n    n = 1\n    while True:\n        if int(a * 10**n % 10) == int(b * 10**n % 10) == 7:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit_weight = 416\n    afternoon_fruit_weight = 248\n\n    weight_difference = morning_fruit_weight - afternoon_fruit_weight\n\n    return weight_difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_grams = 10\n\n    water_grams = (water_ratio * orange_grams) / orange_ratio\n\n    return water_grams\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    total_needed = target_average * 5\n    current_sum = sum(scores)\n    minimum_last_score = total_needed - current_sum\n\n    return minimum_last_score\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of days Jason took to read the book\n    n = symbols('n')\n\n    # First day pages = 30\n    # Last day pages = 70\n    # Common difference d = (70 - 30) / (n - 1)\n    d = (70 - 30) / (n - 1)\n\n    # Sum of the arithmetic sequence = n/2 * (first_term + last_term)\n    total_pages = Eq(n / 2 * (30 + 70), 550)\n\n    # Solve for the number of days n\n    n_val = solve(total_pages, n)\n\n    # Since n is likely to give two solutions, we take the positive integer one\n    n_val = [val for val in n_val if val.is_real and val > 0][0]\n\n    # Calculate the common difference d using the number of days\n    d_val = (70 - 30) / (n_val - 1)\n\n    return d_val\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    principal = 10000\n    total_interest = 816\n    rate = symbols('rate')\n\n    equation = Eq(principal * rate * 2, total_interest)\n    solution = solve(equation, rate)\n\n    interest_rate_per_year = solution[0] * 100  # Convert to percentage\n    return interest_rate_per_year\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Johnny's calculation method is incorrect.\n    # The correct way to get the original number from the quotient and remainder is:\n    # (quotient * divisor) + remainder\n\n    # Given from the problem\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Correct calculation\n    original_number = (quotient * divisor) + remainder\n\n    return original_number\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    result = (43 - 7) / 2\n    return result\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Hannah be x cm/s,\n    # then the speed of Peter will be x + 15 cm/s.\n    speed_hannah = symbols('speed_hannah')\n\n    # The ratio of time taken to cover a certain distance by Peter and Hannah is 3:4.\n    # Since speed and time are inversely proportional, the ratio of their speeds will be 4:3.\n    equation = Eq(4/(speed_hannah), 3/(speed_hannah+15))\n\n    # Solve the equation for the speed of Hannah\n    speed_hannah_solution = solve(equation, speed_hannah)\n\n    return speed_hannah_solution[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choice = 23\n    time_spent_fill_in_blank = 35\n    time_left_for_short_answers = total_time - time_spent_multiple_choice - time_spent_fill_in_blank\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the total number of coins Owen had initially\n    # let y be the number of fifty-cent coins\n    x, y = symbols('x y')\n    \n    # According to the problem:\n    # 2/7 of the coins are fifty-cent coins => y = 2/7 * x\n    equation1 = Eq(y, 2/7 * x)\n    \n    # He is given 10 one-dollar coins and 10 fifty-cent coins (since 5 dollars worth of fifty-cent coins)\n    # Total one-dollar coins after receiving = x - y + 10\n    # Total fifty-cent coins after receiving = y + 10\n    \n    # He ends up with twice as many one-dollar coins as fifty-cent coins\n    equation2 = Eq(x - y + 10, 2 * (y + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # the answer we need is the total number of coins Owen had initially\n    return solutions[x]\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850\n    train_speed = 30  # in meters per second\n    cross_time = 45  # in seconds\n\n    tunnel_length = (train_speed * cross_time) - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    # Initialize counters\n    circles = 5\n    line = 1\n    # Formula to calculate maximum parts created by circles\n    # P = n^2 + n + 2)/2\n    parts_by_circles = (circles**2 + circles + 2) / 2\n    # Every line can intersect a circle at most in two new points and it intersects previous lines.\n    # New parts created by a line = Number of circles (as it intersects all circles) + Number of intersections with previous lines + 1\n    parts_by_line = circles + (circles * (circles - 1)) / 2 + 1\n    # Total parts = parts created by circles + parts created by the line\n    total_parts = parts_by_circles + parts_by_line\n    ans = int(total_parts)\n    return ans\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    from itertools import permutations\n    \n    # Total entrances available\n    entrances = 4\n    \n    # Total ways without any restriction is simply permutations of 3 people (Joe, Mike, Tina) through 4 entrances\n    total_unrestricted = permutations(range(entrances), 3)\n    \n    # Count the unrestricted ways\n    count_unrestricted = len(list(total_unrestricted))\n    \n    # For the restricted ways, Joe and Mike cannot use the same entrance\n    # Since there are 4 entrances, and Joe takes one, Mike has 3 entrances to choose from,\n    # and Tina will have the remaining 2 entrances\n    # Then multiply by 3! for all possible orders (permutations) of Joe, Mike, and Tina\n    count_restricted = (entrances - 1) * (entrances - 2) * 3 * 2 * 1\n    \n    return count_restricted\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_pocket_money = 55\n    amount_saved = 32.5\n    amount_spent = total_pocket_money - amount_saved\n    transportation = amount_spent / 3  # transportation is one part out of three (1 transportation + 2 food)\n    food = 2 * transportation\n    return food\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Fixed service fee and rate for the first 3 tons\n    fixed_service_fee = 4\n    initial_rate = 4\n    initial_tons = 3\n    \n    # Rate for additional usage\n    additional_rate = 3\n    \n    # Total amount Irene can use\n    total_amount = 109\n    \n    # Calculate the cost of first 3 tons of water\n    initial_cost = fixed_service_fee + (initial_tons * initial_rate)\n    \n    # Remaining amount after initial cost\n    remaining_amount = total_amount - initial_cost\n    \n    # Calculate additional tons she can use using the remaining amount\n    additional_tons = remaining_amount // additional_rate\n    \n    # Total tons of water she can use\n    total_tons = initial_tons + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1\n    while smallest_divisor <= remainder:\n        smallest_divisor += 1\n    smallest_possible_dividend = quotient * smallest_divisor + remainder\n    return smallest_possible_dividend\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candies = 12 + 9  # Total candies Eve and Alice brought\n    num_girls = 3  # Eve, Alice, and Irene\n    candies_each = total_candies // num_girls  # Divide equally among the girls\n\n    return candies_each\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n\n    equation1 = Eq(bala, amelia / 2 + carl + daniel)\n    equation2 = Eq(carl, 3/4 * (amelia + bala + daniel))\n    equation3 = Eq(bala, daniel + 320)\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n    daniel_cookies = solutions[daniel]\n\n    return daniel_cookies\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of hours the lazy gardener takes to mow the lawn on his own\n    x = symbols('x')\n\n    # The quick gardener's work rate is 1/12 lawns per hour\n    # The lazy gardener's work rate is 1/x lawns per hour\n    # Together their combined work rate is 1/8 lawns per hour\n    equation = Eq(1/12 + 1/x, 1/8)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The solution will be in a list, take the first (and only) solution\n    hours_lazy_gardener = solution[0]\n\n    return hours_lazy_gardener\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had initially\n    # After giving 7 tomatoes to Matthew, Belinda has 36 - 7 tomatoes\n    # They have the same number of tomatoes now, so we can set up the equation:\n    # Belinda's tomatoes after giving = Matthew's initial tomatoes + 7\n    # (36 - 7) = x + 7\n\n    # Simplify the equation and solve for x\n    x = 36 - 7 - 7\n\n    return x\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # The number of oranges is 32 more than the number of apples\n    equation1 = Eq(oranges, apples + 32)\n    \n    # After giving away 1/3 of apples and 1/2 of oranges, he had 100 fruits left\n    equation2 = Eq(apples - apples / 3 + oranges - oranges / 2, 100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Count the total number of fruits initially\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    original_amount = 182\n    cost_dress = 5\n    cost_skirt = 3\n    remaining = 5 * x\n\n    # total cost of dresses and skirts\n    total_cost = cost_dress * x + cost_skirt * x\n\n    # setting up the equation\n    equation = Eq(original_amount - total_cost, remaining)\n\n    # solving for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    \n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 1*2\n    product = 1\n    for i in range(3, 15, 2):\n        product *= i\n        ans += product * (i + 1)\n    return ans\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990  # Total capacity of the jug in milliliters\n    half_jug_ml = jug_capacity_ml / 2  # Half of the jug's capacity\n    cups_poured = 3  # Number of cups Marc poured\n\n    # Capacity of each cup\n    cup_capacity_ml = half_jug_ml / cups_poured\n\n    return cup_capacity_ml\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_per_tree = 3\n    number_of_trees = 101\n    walking_time_minutes = 3\n    total_distance_home_to_school = 4000\n    \n    distance_to_101th_tree = (number_of_trees - 1) * distance_per_tree\n    walking_speed = distance_to_101th_tree / (walking_time_minutes * 60) # meters per second\n    \n    traveling_time_home_to_school_seconds = total_distance_home_to_school / walking_speed\n    \n    # Convert seconds to minutes\n    traveling_time_home_to_school_minutes = traveling_time_home_to_school_seconds / 60\n    \n    return traveling_time_home_to_school_minutes\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import gcd\n\n    green_interval = 5  # The green line sets out every 5 minutes\n    red_interval = 6    # The red line sets out every 6 minutes\n    \n    # Find the least common multiple (LCM) of the two intervals\n    lcm = (green_interval * red_interval) // gcd(green_interval, red_interval)\n    \n    # Convert the LCM from minutes to hours and minutes\n    hours = lcm // 60\n    minutes = lcm % 60\n    \n    # The time when both trains set out together will be 5:00 am plus the LCM\n    start_hour = 5   # The starting hour is 5 am\n    next_hour = start_hour + hours\n    next_minute = minutes\n    \n    # Adjust for day roll-over if the next hour is 24 or more\n    next_hour = next_hour % 24\n\n    return f\"{next_hour:02d}:{next_minute:02d}\"\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    num = 29381\n    nearest_thousand = round(num, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(3 * apple + 2 * banana, 1.25)\n    eq2 = Eq(apple + banana, 0.48)\n\n    # Solve the system of equations for the cost of an apple and a banana\n    solutions = solve((eq1, eq2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum([(6 + 5 * i) ** 2 for i in range((51 - 6) // 5 + 1)])\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate the sum of squares of an arithmetic progression\n    # with the formula for the sum of the first n squares: n(n + 1)(2n + 1) / 6.\n    # Our sequence has a common difference of 4, so we divide each term by 4\n    # to use the formula: 1^2 + 2^2 + ... + (124/4)^2.\n\n    n = 124 // 4\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) / 6\n    # Since we divided each term by 4, we have to multiply each term's square by 4^2 to correct it\n    ans = sum_of_squares * (4**2)\n    return int(ans)\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n\n    # All possible entrances available for each person\n    entrances = [1, 2, 3]\n    # All possible ways to choose an entrance for 4 people\n    all_combinations = list(permutations(entrances * 4, 4))\n    # Filter combinations where all three entrances are used at least once\n    filtered_combinations = set(comb for comb in all_combinations if set(comb) == set(entrances))\n    \n    # Answer is the number of unique filtered combinations\n    return len(filtered_combinations)\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    questions = 6\n\n    for correct_questions in range(questions + 1):\n        wrong_questions = questions - correct_questions\n        if correct_questions * correct_mark + wrong_questions * wrong_mark == total_marks:\n            return correct_questions\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen traded 5 fish for 2 rabbits, which means 1 rabbit equals 2.5 fish\n    rabbit_fish_ratio = 5 / 2\n    \n    # Oscar traded 4 rabbits for 7 packs of wheat, which means 1 rabbit equals 7/4 packs of wheat\n    rabbit_wheat_ratio = 7 / 4\n    \n    # To find out how many fish should Owen give Dennis for 14 packs of wheat,\n    # we first find out the number of rabbits that equals 14 packs of wheat\n    rabbits_for_14_wheat = 14 / rabbit_wheat_ratio\n    \n    # Then we convert the number of rabbits to the number of fish by multiplying with the rabbit_fish_ratio\n    fish_for_14_wheat = rabbits_for_14_wheat * rabbit_fish_ratio\n    \n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    minutes_per_drawing = 124\n    number_of_drawings = 111\n    total_time = minutes_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    justin_age = solve(equation, justin)\n\n    return justin_age[0]\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of animals initially\n    # Then 0.65x is the number of cows and (1 - 0.65)x = 0.35x is the number of goats initially\n    x = symbols('x')\n    \n    # Number of cows became 0.65x + 240, and this constitutes 65% + 20% = 85% of the new total\n    # Number of goats became 0.35x * 2, which constitutes the rest 15% of the new total\n    \n    # New total number of animals is x + 240\n    # Create the equation based on the new percentages\n    equation = Eq(((0.65*x + 240) / (x + 240)), 0.85)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n\n    # Find the number of goats initially\n    number_of_goats = 0.35 * x_value\n\n    return int(number_of_goats)\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    # start checking from the smallest multiple of 8 that is more than 1 (since we want at least one cookie)\n    cookies = 8\n    while True:\n        # if there is 1 cookie left when divided by 9, we've found the solution\n        if (cookies - 1) % 9 == 0:\n            return cookies\n        # if not, check the next multiple of 8\n        cookies += 8\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        total_cost -= 15\n    elif total_cost >= 20:\n        total_cost -= 4\n    \n    return total_cost\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    number, _ = solve_congruence(*congruences)\n    while number < 100:\n        return int(number)\n        number += 4 * 5 * 6\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n    \n    # Number of ways to arrange 2 boys at each end: P(2, 2)\n    boys_permutations = factorial(2)\n    \n    # Number of ways to arrange 3 girls in the middle: P(3, 3)\n    girls_permutations = factorial(3)\n    \n    # By the multiplication principle, total arrangements:\n    total_arrangements = boys_permutations * girls_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for tom_age in ages:\n        if tom_age % 3 == 0 and tom_age != max(ages):  # Tom's age is a multiple of 3 and he is not the oldest\n            adam_age = max(ages)\n            return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # In the worst case scenario, all balls drawn out of one color, then all balls of a second color.\n    # Then the next ball drawn would be the third color for sure.\n    # So we need to draw all 5 balls of one color, and all 5 balls of another color, \n    # and then 1 ball of the last color to guarantee 3 different colored balls.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    n = 1\n    num = 2023\n    while True:\n        if int(str(num) * n) % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 / 21\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Total apples to distribute\n    total_apples = 28\n    \n    # Sort the minimum apples each child can get. After giving each child one apple,\n    # we would distribute the remaining ones, ensuring no two get the same amount.\n    # Minimum distribution to other five children would be: 1, 2, 3, 4, 5 apples. \n    # Total of minimum distribution to others: 1 + 2 + 3 + 4 + 5 = 15 apples.\n    min_others = sum(range(1, 6))\n    \n    # Remaining apples for Avril would be the total minus the minimum for others\n    avril_apples = total_apples - min_others\n\n    return avril_apples\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_spent = 5 / 8\n    cost_of_laptop = total_money * fraction_spent\n    return cost_of_laptop\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Let's use basic algebraic substitution\n    # Let triangle be 't', square be 's', and circle be 'c', diamond be 'd'\n    # From the given equations:\n    # triangle + triangle = square  ==> 2*t = s\n    # square + triangle = circle    ==> s + t = c\n    # diamond = circle + square + triangle ==> d = c + s + t\n\n    # Since we know from the first equation that s = 2*t\n    # We can substitute s in the second and third equation \n    # So the second equation becomes:\n    # 2*t + t = c  ==>  3*t = c\n    # And the third equation becomes:\n    # d = c + 2*t + t  ==> d = 3*t + 3*t ==> d = 6*t\n\n    # The question asks how many triangles are equal to a diamond\n    # Based on our equations, it's clear that d = 6*t\n    # Hence, 6 triangles equal a diamond\n\n    return 6\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    time = 10\n\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_count = 2\n    new_count = original_count + 1\n    \n    original_sum = original_average * original_count\n    new_sum = new_average * new_count\n    \n    new_number = new_sum - original_sum\n    \n    return new_number\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += (10 - i)\n    return trophies\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    difference = 23 - 16\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_ride = 18  # 18 minutes\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate time spent walking to bus stop\n    walking_to_bus_stop = (time_caught_bus - time_left_school).total_seconds() / 60\n\n    # Calculate time from dropping off the bus to getting home\n    time_dropped_off_bus = (time_got_home - time_bus_ride).total_seconds() / 60\n\n    # Total walking time\n    total_walking_time = walking_to_bus_stop + (time_dropped_off_bus - time_bus_ride * 60)\n\n    return int(total_walking_time)\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n\n    percentage_boys = (boys / total_children) * 100\n\n    return percentage_boys\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken_initial, lisa_initial, money_given = symbols('ken_initial lisa_initial money_given')\n\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    equation2 = Eq(ken_initial - money_given, lisa_initial + money_given + 21)\n\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, money_given))\n\n    return solutions[money_given]\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 1, 9, 2]\n    numbers = [''.join(map(str, permutation)) for permutation in permutations(digits)]\n    max_number = max(numbers)\n    min_number = min(numbers)\n    return int(max_number) - int(min_number)\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # To ensure we get 2 red marbles, we have to consider the worst case scenario.\n    # This is when we keep drawing non-red marbles.\n    # There are a total of 18 blue + 8 orange = 26 non-red marbles.\n    # If we draw these 26 marbles, the next two marbles we draw must be red.\n    # So we need to draw 26 non-red marbles + 2 red marbles = 28 marbles total to ensure getting 2 red marbles.\n    \n    return 26 + 2\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculate the number of elements in the sequence (sum of arithmetic progression)\n    num_elements = sum(range(2, 9))  # Add one more because it's inclusive of 8\n    \n    # Calculate the position of the median\n    median_pos = (num_elements + 1) // 2\n    \n    current_pos = 0  # Initialize current position in the sequence\n    for i in range(1, 9):  # Iterate over the numbers to be written\n        count_i = i + 1  # Number of times each 'i' is written\n        current_pos += count_i  # Update the current position for each 'i'\n        if current_pos >= median_pos:\n            # The median is the current number 'i' if current position has reached or passed the median position\n            return i\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    # Number of days\n    n = 5\n    # Total number of cookies eaten\n    total_cookies = 100\n    # Common difference, i.e., cookies increase each day\n    d = 6\n    \n    # Let x be the number of cookies eaten on the first day.\n    # Using arithmetic sum formula: total_cookies = (n/2) * (2x + (n - 1) * d)\n    # Solve the linear equation for x\n    \n    # Rearranging the terms\n    # (n/2) * (2x + (n - 1) * d) = total_cookies\n    # 2x = (total_cookies * 2/n) - (n - 1) * d\n    # x = ((total_cookies * 2/n) - (n - 1) * d) / 2\n    x = ((total_cookies * 2 / n) - (n - 1) * d) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for student in range(1, 31):\n        # turn around for multiple of 2 and multiple of 3\n        if student % 2 == 0:\n            turn_around = True\n        else:\n            turn_around = False\n\n        if student % 3 == 0:\n            turn_around = not turn_around\n\n        # if turn_around is False after both operations, student is facing the teacher\n        if not turn_around:\n            facing_teacher += 1\n\n    return facing_teacher\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    nth_term = 25\n    total_rows = 25\n\n    common_difference = (nth_term - first_term) / (4 - 1)\n    last_term = first_term + (total_rows - 1) * common_difference\n\n    total_athletes = (total_rows * (first_term + last_term)) / 2\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initial probability of each door having the car\n    prob_car_door1 = 1/3\n    prob_car_door2 = 1/3\n    prob_car_door3 = 1/3\n\n    # Host opens door 3, which has a goat\n    # Probabilities update: if door 1 was initially chosen,\n    # the probability that the car is behind door 2 increases\n    prob_car_door2_given_door3_opened = prob_car_door2 / (prob_car_door2 + prob_car_door1)\n    \n    # You should switch if the probability is greater than the initial choice\n    switch = prob_car_door2_given_door3_opened > prob_car_door1\n\n    return 2 if switch else 1\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # Represent the unknown dollar amount using x\n    total_spent = 6 * x  # Total spent is 6 times the unknown amount\n\n    return total_spent\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 2\n    while True:\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of combinations of 7 books taken 1 at a time\n    num_ways = factorial(7) // (factorial(1) * factorial(7 - 1))\n    # Since there are 3 students, each selection can be distributed in 3 different ways\n    num_ways *= 3\n    return num_ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    students = 12 + 1  # Tommy and his 12 friends\n    time_per_student = 142\n    total_time = students * time_per_student\n    return total_time\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    # Let the total amount of money David had be x\n    # After spending $75 on CDs, David has x - 75 left\n    # Then he spends 1/4 of the remaining money on batteries\n    # After buying batteries, he is left with (x - 75) - 1/4 * (x - 75)\n    # According to the question, the money he is left with is 1/3 of the original sum\n    # We set up the equation: (x - 75) - 1/4 * (x - 75) = 1/3 * x\n    # Solving the equation will give us the amount of money David had originally\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x - 75) - 1/4 * (x - 75), 1/3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Since 7 trainers can catch 7 pokemon in 7 minutes, \n    # we can calculate the rate at which one trainer can catch pokemon per minute.\n    rate_per_trainer_per_minute = 7 / (7 * 7)\n\n    # Now we need to find the number of trainers required to catch 49 pokemons in 49 minutes.\n    # Since the rate is constant, the time and number of pokemons are scaled by the same factor (49/7 = 7),\n    # the number of trainers needed remains the same regardless of the scaling.\n    # Therefore, the number of trainers needed is the same as that at the beginning.\n\n    # This remains 7 trainers since it's a direct scaling of the scenario\n    num_trainers_needed = 7\n\n    return num_trainers_needed\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    op = symbols('oplus')\n\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n\n    solution = solve(equation, op)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n    return percentage_incorrect\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Each block of '928' has digits that sum to 19\n    # 19 mod 9 gives the remainder of 1 when each block is divided by 9\n    # A 99-digit number composed of the pattern '928' repeated suggests there are 33 such blocks\n    # If each block contributes a remainder of 1 when divided by 9, then\n    # 33 blocks will contribute a remainder of 33 when divided by 9\n    # Hence, the remainder when the 99-digit number is divided by 9 is simply\n    # 33 mod 9, which is\n\n    remainder_per_block = (9 + 2 + 8) % 9\n    num_blocks = 99 // 3\n    total_remainder = (remainder_per_block * num_blocks) % 9\n\n    return total_remainder\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    target = 2.5\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # Total litres of orange juice.\n    per_container_volume = 2  # Litres per container.\n\n    num_containers = total_volume // per_container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Convert Â£1 to pence\n    eliot_payment = 3 * 100  # Eliot pays with three Â£1 coins\n    maya_payment = 4 * 100   # Maya pays with four Â£1 coins\n    \n    # Price per bar in pence\n    sour_sweets_price = 12\n    chocolate_drops_price = 17\n    \n    # Assume they buy 'n' bars each and get the same amount of change\n    # eliot_payment - (n * sour_sweets_price) = maya_payment - (n * chocolate_drops_price)\n    # Solve for n\n    for n in range(1, min(eliot_payment // sour_sweets_price, maya_payment // chocolate_drops_price) + 1):\n        if eliot_payment - n * sour_sweets_price == maya_payment - n * chocolate_drops_price:\n            return n\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 0, 2, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n\n    # The smallest even digit must be in the unit's place to form the smallest even number\n    smallest_even_digit = min(even_digits)\n    digits.remove(smallest_even_digit)\n    \n    # The smallest non-zero digit must be in the thousand's place for the smallest number\n    digits_without_zero = [digit for digit in digits if digit != 0]\n    smallest_non_zero_digit = min(digits_without_zero)\n    digits.remove(smallest_non_zero_digit)\n    \n    # Sort the remaining digits to get the smallest possible combination in the hundred's and ten's place\n    digits.sort()\n    \n    # Concatenate the digits to form the smallest 4-digit even number\n    smallest_4_digit_even = int(str(smallest_non_zero_digit) + ''.join(map(str, digits)) + str(smallest_even_digit))\n    \n    return smallest_4_digit_even\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    return solutions[jackson] + 3\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be x, y, z such that x <= y <= z\n    # Total sum of the numbers is 56\n    total_sum = 56\n    \n    # Average of the smallest two numbers is 14. Let's consider them as x and y.\n    avg_small = 14\n    sum_small = avg_small * 2  # sum of x and y\n    \n    # Average of the largest two numbers is 22. Let's consider them as y and z.\n    avg_large = 22\n    sum_large = avg_large * 2  # sum of y and z\n    \n    # Since total_sum = x + y + z => y = total_sum - (x + z)\n    # We also know y from the other two equations:\n    # y = sum_small - x and y = sum_large - z\n    \n    # Now, we can equate them to find the values of x and z\n    # total_sum - (x + z) = sum_small - x\n    # total_sum - (x + z) = sum_large - z\n    # Hence, we can find x, y, and z by solving these equations\n    \n    x = sum_small - (total_sum - sum_large)  # Rearranging the equation\n    z = sum_large - (total_sum - sum_small)\n    y = total_sum - (x + z)\n    \n    # Since y is the middle value (x <= y <= z), it is the median\n    median = y\n    \n    return median\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    result1 = 66 * 2 + 66 * 3\n    result2 = 66 * 5\n    return result1 == result2\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    return 297 + 198 + 204 + 99\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    \n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + bun, 41)\n    \n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n    \n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_fare_paid = 8.5\n    base_distance = 1.8\n\n    additional_fare_paid = total_fare_paid - base_fare\n    additional_distance = additional_fare_paid / additional_fare_per_km\n\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    ans = 8 * 2  # Since you received half, mom originally had twice as many\n    return ans\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # According to the Pigeonhole Principle, if we have n students (pigeons) and m apples (pigeonholes),\n    # then at least one student will get at least ceil(m / n) apples. \n    # To meet the condition that at least one student gets 3 apples or more,\n    # we want to find the maximum n such that ceil(80 / n) > 2, i.e., 80 / n > 2\n    \n    # Starting with n=1 and incrementing, we can determine the size of the class\n    n = 1\n    while True:\n        if 80 / n > 2:\n            n += 1\n        else:\n            break\n    # Since we know every student should get at least one apple,\n    # and we need the max number of students with at least one of them having more than two apples,\n    # we must subtract one to account for the scenario where all students have at least one apple.\n    return n - 1\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big = 36\n    girls_in_small = 12\n    capacity_big = 4\n    capacity_small = 2\n    \n    big_cars_needed = boys_in_big // capacity_big\n    small_cars_needed = girls_in_small // capacity_small\n    \n    total_cars = big_cars_needed + small_cars_needed\n    \n    return total_cars\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    \n    def total_years(x):\n        return mother_age + x + father_age + x + julia_age + x\n    \n    years = 0\n    while True:\n        if total_years(years) == 100:\n            break\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    # Conversion factors\n    ounces_to_pounds = 1 / 16\n    pounds_to_kg = 1 / 2.2\n    \n    # Newborn tiger cubs weight in ounces\n    cub_weight_ounces = 56\n    \n    # Convert ounces to pounds\n    cub_weight_pounds = cub_weight_ounces * ounces_to_pounds\n    \n    # Convert pounds to kilograms\n    cub_weight_kg = cub_weight_pounds * pounds_to_kg\n    \n    return cub_weight_kg\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate the sum of the first part of the sequence: 5 to 80 inclusive\n    first_part_sum = sum(range(5, 81))\n    # Calculate the sum of the second part of the sequence: 79 down to 5 inclusive\n    second_part_sum = sum(range(5, 80))\n    # Combine both parts to get the total sum\n    total_sum = first_part_sum + second_part_sum\n    return total_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.2)  # Reversing the first 20% discount to find the original price\n    final_price = 32 - 4  # Applying the further discount of $4\n    total_discount = original_price - final_price  # Total discount in dollars\n    total_discount_percentage = (total_discount / original_price) * 100  # Convert total discount to percentage\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    sum = 0\n    for i in range(3, 2013, 7):\n        sum += 2019 / (i * (i + 7))\n    return sum\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    # The maximum value for A would be reached by arranging the digits in descending order from left to right\n    # The value of 'A' will be maximized when 'ghi' is 789, 'fgh' is 678, and so forth, down to 'abc' being 123\n    # This maximizes the addition of the overlapping parts\n    digits = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    max_sum = 0\n    \n    # Looping through the slices of the digits list and calculating the three-digit numbers\n    for i in range(7):\n        max_sum += int(\"\".join(map(str, digits[i:i+3])))\n        \n    return max_sum\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "def solution():\n    import math\n    # Since A wants to stand on the left side of B, and B on the left side of C,\n    # we can consider A, B, and C as a single unit ABC for arrangement purposes.\n    # There are 3! ways to arrange ABC among themselves.\n    abc_permutations = math.factorial(3)\n\n    # We have two other people who can be arranged, so we have in total 5 spots.\n    # Now we can consider the unit ABC as one, and we want to arrange these\n    # 'three' elements (ABC, D, E), which is 3! ways.\n    remaining_permutations = math.factorial(3)\n\n    # The total number of arrangements is the product of the two sets of permutations.\n    total_arrangements = abc_permutations * remaining_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(x):\n        return (x // 10 - x % 10) ** 2\n\n    ans = pattern(55)\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "import itertools\n\ndef solution():\n    digits = ['0', '1', '2', '3', '4', '5']\n    all_six_digit_numbers = sorted(set(itertools.permutations(digits, 6)))\n    five_hundred_fifth_number = all_six_digit_numbers[504]  # Index starts from 0\n    ans = ''.join(five_hundred_fifth_number)\n    return ans\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # Initial count of numbers\n    count = 0\n    \n    # Hundreds place cannot have 0, so it has 2 choices: 2 or 3\n    for hundreds in [2, 3]:\n        # Tens place can have 0, 2, or 3, but it should be different from hundreds\n        for tens in [0, 2, 3]:\n            if tens != hundreds:\n                # Units place can have 0, 2, or 3, but it should be different from hundreds and tens\n                for units in [0, 2, 3]:\n                    if units != hundreds and units != tens:\n                        count += 1\n                        \n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    girls = symbols('girls')\n\n    # total students are 36\n    boys = 36 - girls\n\n    # the average score of the class was 89\n    # the total score of the class\n    total_score = 36 * 89\n\n    # girls' average score was 88\n    # boys' average score was 91\n    # Create equations based on the average scores\n    equation = Eq(girls * 88 + boys * 91, total_score)\n\n    # Solve the equation\n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    lcm = 6 * 9 // math.gcd(6, 9)  # Least common multiple of 6 and 9\n    multiples = [lcm * i for i in range(1, 50 // lcm) if 20 < lcm * i < 50]\n    return multiples\n\nimport math\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    # Given ratios\n    # Red : White = 1 : 2\n    # White : Black = 3 : 4\n    \n    # Let the common multiple for white balls in both ratios be '3w'\n    # Therefore, Red = 1w and Black = 4w\n    # The total number of balls is:\n    # Total = Red + White + Black = 1w + 3w + 4w = 8w\n\n    # Total number of balls is given as 136, so:\n    # 8w = 136\n    # Solving for w:\n    w = 136 / 8\n    \n    # Number of red balls is 1w\n    red_balls = 1 * w\n    \n    return int(red_balls)\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Total work required is LCM of individual capacity (40 * 60 / GCD of 40 and 60)\n    from math import gcd\n    total_work = (40 * 60) // gcd(40, 60)\n    \n    # Alice's daily work capacity (total_work / 40)\n    alice_work_per_day = total_work // 40\n    # Bob's daily work capacity (total_work / 60)\n    bob_work_per_day = total_work // 60\n    \n    # Work done together in one day\n    work_per_day_together = alice_work_per_day + bob_work_per_day\n    \n    # Total work they should have completed by end of 27th day\n    work_by_27_days = 27 * work_per_day_together\n    \n    # To find the days Alice took off, we can subtract from this the actual total work\n    work_deficit = work_by_27_days - total_work\n    \n    # Finally, to find out how many days off Alice took, we can divide the deficit by her daily capacity\n    alice_days_off = work_deficit // alice_work_per_day\n    \n    return alice_days_off\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Given sequence values and their positions\n    seventh_term = 105  # 7th value\n    eighth_term = 120   # 8th value\n    ninth_term = 135    # 9th value\n\n    # Calculate the common difference of the arithmetic sequence\n    difference = eighth_term - seventh_term\n\n    # To find the 100th term, use the formula for the n-th term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # We know a_7 and need to find a_100\n    # So, a_100 = a_7 + (100 - 7) * d\n\n    # Using the given terms to find the 100th term\n    hundredth_term = seventh_term + (100 - 7) * difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # We have 2 colors of socks: Red and Blue.\n    # Worst case scenario to ensure we have at least one matching pair is:\n    # Picking one Red, still no matching pair.\n    # Picking one Blue, still no matching pair.\n    # Picking second Red or second Blue, we now have a matching pair.\n    # So we took 1 Red + 1 Blue + 1 of either color.\n\n    # Therefore, the smallest number of socks we need to take out is 3.\n    return 3\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = 4**2 / 2\n    return int(n)\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Four years ago, the combined age of 3 dogs was 24 years.\n    combined_age_four_years_ago = 24\n\n    # In those four years, each of the 3 dogs would age by 4 years,\n    # That's an additional 12 years combined (4 years * 3 dogs).\n    combined_age_increase_over_four_years = 4 * 3\n\n    # So the combined current age of the dogs would be:\n    current_combined_age = combined_age_four_years_ago + combined_age_increase_over_four_years\n\n    # In 2 more years, each of the 3 dogs would age by 2 years,\n    # That's an additional 6 years combined (2 years * 3 dogs).\n    combined_age_increase_over_two_more_years = 2 * 3\n\n    # So the combined age in 2 years' time would be:\n    combined_age_in_two_years = current_combined_age + combined_age_increase_over_two_more_years\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 4 * 5\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hours = 8\n    minutes = 30\n\n    # Calculate the angles moved by hour and minute hands\n    hour_angle = (360 / 12) * (hours + minutes / 60)\n    minute_angle = (360 / 60) * minutes\n\n    # Find the difference between the two angles\n    angle_difference = abs(hour_angle - minute_angle)\n\n    # The angle should be the smaller one between the two possible angles\n    angle_difference = min(angle_difference, 360 - angle_difference)\n\n    return angle_difference\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # original ratio\n    equation1 = Eq(ryan / audrey, 2/7)\n\n    # after ryan buys 20 more marbles and audrey gives away 80 marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # black + white + red beads\n    full_pattern_count = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n\n    black_beads_in_full_pattern = full_pattern_count * 3\n    additional_black_beads = min(remaining_beads, 3)\n\n    total_black_beads = black_beads_in_full_pattern + additional_black_beads\n\n    return total_black_beads\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum((-1) ** ((i // 2) % 2) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    total_minutes_needed = 13 + 23 + 8 + 27\n    school_arrival_time = datetime.strptime(\"7:45\", \"%H:%M\")\n    \n    wake_up_time = school_arrival_time - timedelta(minutes=total_minutes_needed)\n\n    return wake_up_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    # List of the possible coins.\n    coins = [1, 2, 5]\n    # Set to hold different totals.\n    totals = set()\n    \n    # Nested loops to try every combination of 3 coins.\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                totals.add(total)\n\n    # The number of different totals is the size of the set.\n    return len(totals)\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of chickens, y be the number of ducks, z be the number of cows\n    x, y, z = symbols('x y z')\n\n    # Chicken and duck heads (1 head each), cow heads (1 head each)\n    equation1 = Eq(x + y + z, 51)\n\n    # Since the number of chickens is equal to the number of ducks\n    equation2 = Eq(x, y)\n\n    # Chicken and duck legs (2 legs each), cow legs (4 legs each)\n    equation3 = Eq(2*x + 2*y + 4*z, 160)\n\n    # Since chickens and ducks are the same in number we can use x for both in equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n\n    ans = (percentage / 100) * quantity\n\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_hours = 13 * 24 + 22  # Total time in hours\n    distance_nm = 3000  # Distance in nautical miles\n    \n    average_speed = distance_nm / total_hours\n    \n    return round(average_speed)\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_amount = 750\n    rebekah_drunk = initial_amount * (1/5)\n    abigail_drunk = 200\n    anna_drunk = 120\n\n    juice_left = initial_amount - (rebekah_drunk + abigail_drunk + anna_drunk)\n\n    return juice_left\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3, 4] # Representing four entrances\n\n    # Assuming Joe, Mike, and Tina are represented by 'J', 'M', and 'T'\n    people = ['J', 'M', 'T']\n    \n    # Generate all permutations of the entrance orders for 3 people\n    entrance_permutations = permutations(entrances, 3)\n    \n    # Count the valid combinations\n    count = 0\n    for perm in entrance_permutations:\n        joe_entrance, mike_entrance, _ = perm\n        # Check if Joe and Mike are not using the same entrance\n        if joe_entrance != mike_entrance:\n            count += 1\n    \n    # Considering all permutations of people since the order they enter is uncertain\n    total_ways = count * len(list(permutations(people)))\n    \n    return total_ways\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    low = 50 // 11\n    high = 150 // 11\n    if 50 % 11 == 0:\n        ans = high - low + 1\n    else:\n        ans = high - low\n\n    return ans\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    stamps_after_giving_to_sister = initial_stamps - 339\n    stamps_after_buying_more = stamps_after_giving_to_sister + 455\n    final_stamps = stamps_after_buying_more - 777\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n  \n    volume_1 = 2  # Liters of the first fruit punch\n    concentration_1 = 0.40  # 40% fruit juice of the first fruit punch\n    \n    volume_2 = 3  # Liters of the second fruit punch\n    concentration_2 = 0.70  # 70% fruit juice of the second fruit punch\n    \n    # Total amount of fruit juice\n    fruit_juice_1 = volume_1 * concentration_1\n    fruit_juice_2 = volume_2 * concentration_2\n    total_fruit_juice = fruit_juice_1 + fruit_juice_2\n    \n    # Total volume of the new mixture\n    total_volume = volume_1 + volume_2\n    \n    # Concentration of the new mixture\n    new_concentration = total_fruit_juice / total_volume\n    \n    return new_concentration * 100  # converting to percentage\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for initial number of men and women\n    men, women = symbols('men women')\n    \n    # Equation representing the situation after the first bus left\n    equation1 = Eq(women - 36, (3/5) * men)\n    \n    # Equation representing the situation after the second bus left\n    equation2 = Eq(men - 48, women - 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n    \n    # Calculate the original number of people at the bus stop\n    total_people = solutions[men] + solutions[women]\n    \n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n    \n    for num in range(20, 31):\n        if isprime(num):\n            return num\n            \nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1 * 3 * 8 + 2 * 6 * 16 + 3 * 9 * 24\n    denominator = 1 * 2 * 4 + 2 * 4 * 8 + 3 * 6 * 12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    height_diff = 132 - 124 + 1  # +1 because inclusive of both 124 and 132\n    min_students_same_height = 4\n    class_size = height_diff * (min_students_same_height - 1) + 1  # Pigeonhole principle\n\n    return class_size\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of Fatouma\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(x + 2, 2 * (x - 5))\n\n    # Solve the equation for x\n    age = solve(equation, x)\n\n    # Since we expect a single solution for age, we return the first element\n    return age[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    solutions = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len({x1, x2, x3}) == 3:\n                    solutions.append((x1, x2, x3))\n    return solutions\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost of three pens at 50p each\n    amount_paid = 5  # amount paid in pounds\n    change = amount_paid - total_cost  # calculate the change\n\n    return change\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    desired_ready_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_cooking_time = desired_ready_time - cooking_duration\n    return start_cooking_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    \n    chinese_books = total_books - english_books\n    more_english_books = english_books - chinese_books\n    \n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # If Fred wants to ensure a win, he should leave a multiple of 4 oranges for George each turn.\n    # To do this, Fred should first make the total number of oranges a multiple of 4.\n    # With 15 oranges, to leave 12 (which is a multiple of 4) for George, Fred should take 3 oranges.\n\n    fred_first_turn = 15 % 4\n    return fred_first_turn\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_and_checkers = 18\n    go_and_chess = 10\n    checkers_and_chess = 9\n    all_three = 5\n\n    total_students = (go + checkers + chess) - (go_and_checkers + go_and_chess + checkers_and_chess) + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    ticket_count = 16\n    ticket_cost = 112\n    total_cost = ticket_count * ticket_cost\n    return total_cost\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    p = 1\n    while True:\n        cube_root = (245 * p) ** (1/3)\n        if cube_root.is_integer():\n            break\n        p += 1\n    return p\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Oliver's current age\n    oliver_age = 20\n    # Lin's current age\n    lin_age = 26\n    # Desired sum of their ages\n    desired_sum = 48\n    # Calculate the number of years it will take for their ages to sum up to the desired total\n    years = 0\n    while (oliver_age + lin_age) < desired_sum:\n        years += 1\n        oliver_age += 1\n        lin_age += 1\n    return years\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    # Total poles = 40, distance between each = 3m\n    # The total distance is the distance covered by the poles in between\n    # Since no poles right outside the school and house, the poles counted are one less than total\n    total_poles = 40\n    distance_between_poles = 3\n    distance_from_school_to_house = (total_poles - 1) * distance_between_poles\n    return distance_from_school_to_house\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_meters = 736 / 100\n    return cm_in_meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum(64 - i * 2 * ((i % 2) * 2 - 1) for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        E, S, A, M, O = p\n        if E != '0' and S != '0' and A != '0' and M != '0' and O != '0':  # No leading zero\n            ESSE = int(E + S + S + E)\n            SASMO = int(S + A + S + M + O)\n            if ESSE + 2018 == SASMO:\n                return sum(int(x) for x in {S, A, S, M, O})  # Sum of unique digits\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 2 # one sick and one personal leave\n    attendance_rate = (present_students / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return 15 * 8 // 5\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = (1/4) * this_year_production\n\n    # Since it's more than 1/4, add one to get the smallest possible integer value that is more than 1/4.\n    return int(last_year_production) + 1\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    ans = sum(1/i for i in range(2, 2018))\n    return ans\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 270 * 0.30\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original ratio\n    equation1 = Eq(apples / oranges, 3 / 8)\n\n    # Ratio after removing one apple\n    equation2 = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x - 100))\n\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_savings = 2.40\n    total_needed = 150\n    days_needed = total_needed / daily_savings\n    weeks_needed = math.ceil(days_needed / 7)\n    \n    return weeks_needed\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position from the front is 4, hence there are 3 people in front of Tim.\n    rows_front_of_tim = 3\n    \n    # Tim's position from the back is 3, hence there are 2 people behind Tim.\n    rows_back_of_tim = 2\n    \n    # Tim's position from left to right is 1, he is the first, so no one is on his left.\n    cols_left_of_tim = 0\n    \n    # Tim's position from right to left is 4, hence there are 3 people on his right.\n    cols_right_of_tim = 3\n    \n    # Calculate total number of rows and columns, add 1 for Tim's position.\n    total_rows = rows_front_of_tim + rows_back_of_tim + 1\n    total_cols = cols_left_of_tim + cols_right_of_tim + 1\n    \n    # Calculate total number of band members in the array.\n    total_members = total_rows * total_cols\n    \n    return total_members\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = 6.5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))\n    target_sum = initial_sum + 2019\n    \n    for i in range(1, target_sum // 8):\n        consecutive_sum = sum(range(i, i + 8))\n        if consecutive_sum == target_sum:\n            return i\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    return common_factor * (836 + 162 + 2)\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    letters = \"STATISTICS\"\n    freq = {char: letters.count(char) for char in set(letters)}\n    ans = factorial(len(letters))\n    \n    for key, value in freq.items():\n        ans //= factorial(value)\n        \n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define weights of each animal as symbols\n    r, c, k = symbols('r c k')\n\n    # Given equations\n    equation1 = Eq(2 * r, 6 * c)\n    equation2 = Eq(3 * k, 4 * r)\n\n    # Instead of directly solving for k, we first solve for r in terms of c\n    # using the first equation, then substitute the result into the second equation.\n    r_in_terms_of_c = solve(equation1, r)[0]      # Find r in terms of c\n    equation2_subs = equation2.subs(r, r_in_terms_of_c)\n\n    # Solve the second equation for k now that it is in terms of c\n    k_in_terms_of_c = solve(equation2_subs, k)[0]  # Find k in terms of c\n\n    # Return the weight of one kangaroo in terms of the number of chickens\n    # Since k_in_terms_of_c represents the weight of 3 kangaroos,\n    # we divide by 3 to get the weight of one kangaroo in terms of chickens.\n    return k_in_terms_of_c / 3\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Tasks that can be done simultaneously are put into separate lists\n    simultaneous_tasks_1 = [3]  # Cut wood\n    simultaneous_tasks_2 = [1, 1, 1]  # Weave wet grass into rope, Mow the grass, Soak cut grass\n    simultaneous_tasks_3 = [5]  # Dry the wood\n    simultaneous_tasks_4 = [1]  # Prepare food\n    simultaneous_tasks_5 = [1]  # Choose wood\n    \n    # Sorting each list to get the maximum days for parallel tasks\n    max_simultaneous_1 = max(simultaneous_tasks_1)\n    max_simultaneous_2 = max(simultaneous_tasks_2)\n    max_simultaneous_3 = max(simultaneous_tasks_3)\n    max_simultaneous_4 = max(simultaneous_tasks_4)\n    max_simultaneous_5 = max(simultaneous_tasks_5)\n    \n    # Summing the maximum days required for each set of simultaneous tasks\n    total_days = (max_simultaneous_1 + max_simultaneous_2 +\n                  max_simultaneous_3 + max_simultaneous_4 +\n                  max_simultaneous_5)\n    \n    return total_days\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    Snow_White_position = 7\n    total_dwarves = (Snow_White_position - 1) * 2\n    return total_dwarves\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    age_difference = ashley_age - (3 + 2)\n    brother_age = ashley_age - age_difference\n    return brother_age\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    min_participants_per_school = 4\n    \n    max_schools = participants // min_participants_per_school\n    \n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1 \n    total_sum = (num_terms / 2) * (first_term + last_term)\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total_fractions = 0\n    for i in range(1, 2019):\n        fraction_part = (2018 + i) / 5 - (2018 + i) // 5\n        total_fractions += fraction_part\n    return total_fractions\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i * 6) ** (1/3) % 1 == 0 and (i / 6) ** 0.5 % 1 == 0:\n            return i\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    import math\n    ans = math.lcm(2, 3, 8)\n    return ans\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "def solution():\n    # Add the whole numbers and fractions separately\n    whole_number_sum = 3 + 6\n    fraction_sum = (5/9) + (4/9)\n\n    # The fraction part sums up to exactly 1, combine this with the whole number sum\n    combined_sum = whole_number_sum + fraction_sum\n\n    # Since the fractions added up to a whole number, the answer is just the sum of the whole numbers\n    return combined_sum\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # speed of faster train (train A)\n    speed_A = 48\n    # speed of slower train (train B)\n    speed_B = 36\n    # speed_A travels 70km more than speed_B, denoting x as the distance traveled by speed_B\n    # speed_A travels x + 70km\n    # We can set up the ratio since they travel the same period of time\n    # (x + 70) / x = speed_A / speed_B\n    ratio = speed_A / speed_B\n\n    # solving for x gives us the distance traveled by the slower train\n    x = 70 / (ratio - 1)\n\n    # The distance between the two stations is the sum of both distances traveled by the trains\n    distance = (x + 70) + x\n    return distance\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # We can deduce the dimensions of the rectangular array from Tim's positions:\n    # Number of rows: Tim is 4th from the front and 3rd from the back => 4 + 3 - 1 = 6\n    # Number of columns: Tim is 4th from the left and 7th from the right => 4 + 7 - 1 = 10\n\n    # Total number of band members is the product of rows and columns\n    rows = 4 + 3 - 1\n    columns = 4 + 7 - 1\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 3 and number % 7 == 1 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (4/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Total amount before losing any coin\n    total = 50 + 20 + 10 + 5\n\n    # Amounts for each possible lost coin\n    lost_coins = [50, 20, 10, 5]\n\n    # Check which coin she lost by dividing the remaining amount by two\n    # and comparing with the brother's amount\n    for lost in lost_coins:\n        remaining = total - lost\n        if remaining / 2 == total - remaining:\n            return lost\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n\n    # Iterate through all possible pairs (i, j) where i < j\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:  # Check if the sum is multiple of 5\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the number of friends Natalia has\n    friends = symbols('friends')\n    \n    # Create equations based on the information given \n    equation1 = Eq(friends * 18 + 41, friends * 23 - 34)\n    \n    # Solve for the number of friends\n    num_friends = solve(equation1, friends)[0]\n\n    # Calculate the total chocolates Natalia has\n    total_chocolates = num_friends * 18 + 41\n\n    # Calculate the number of chocolates left if she gives 20 to each friend\n    chocolates_left = total_chocolates - num_friends * 20\n\n    return chocolates_left\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    # Let x be the number of students and y be the number of boats originally.\n    # Adding one boat leads to each boat holding exactly 6 people: (x)/(y+1) = 6\n    # Subtracting one boat leads to each boat holding exactly 9 people: (x)/(y-1) = 9\n\n    # We have two equations:\n    # x = 6*(y+1)   [1]\n    # x = 9*(y-1)   [2]\n\n    # Equating [1] and [2], we get:\n    # 6*(y+1) = 9*(y-1)\n    # 6y + 6 = 9y - 9\n    # 3y = 15\n    # y = 5\n\n    # We can substitute y back into [1] or [2] to solve for x.\n    y = 5\n    x = 6*(y+1)\n\n    return x\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), (rasidah * (1 - 3/5)) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for d1 in range(1, 10):\n        for d2 in range(d1 + 1, 10):\n            for d3 in range(d2 + 1, 10):\n                d4 = d1 + d2 + d3\n                if d3 == d1 + d2 and d1 + d2 + d3 + d4 == 16:\n                    return d4\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = [0, 2, 4]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j and i != 0:  # i is the ten's place, should not be 0\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007)**2\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    distance_uphill = 3 * 5  # speed * time\n    distance_downhill = 2 * 10  # speed * time\n    total_distance = distance_uphill + distance_downhill\n    total_time = 3 + 2\n    average_speed = total_distance / total_time\n    return average_speed\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_denominator = 7\n    whole_number = 63\n    result = 54\n    \n    fraction_numerator = (result * fraction_denominator) / whole_number\n    \n    return int(fraction_numerator)\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([2, 4, 6, 8], 4):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0:\n            max_number = max(max_number, num)\n    return max_number\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    original_price = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    value_after_years = original_price * ((1 - depreciation_rate) ** years)\n    rounded_value = round(value_after_years, 1)\n\n    return rounded_value\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # fixed variables\n    fixed_service_fee = 3\n    total_cost = 63\n    initial_rate = 2\n    additional_rate = 1\n    initial_kwh = 5\n\n    # calculate the cost for the initial 5 kwh\n    initial_cost = initial_kwh * initial_rate\n\n    # subtract the fixed service fee and initial cost from the total cost\n    remaining_cost = total_cost - fixed_service_fee - initial_cost\n\n    # calculate the additional kwh that can be used (each kwh costs 1 dollar after the initial 5)\n    additional_kwh = remaining_cost / additional_rate\n\n    # the total kwh includes the initial 5 and the additional kwh\n    total_kwh = initial_kwh + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for num_students in range(1, 3*7*11): # Least Common Multiple (LCM) of 3, 7, 11 is upper bound\n        if num_students % 3 == 2 and num_students % 7 == 6 and num_students % 11 == 10:\n            return num_students\n    return None\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-8 - (-19))\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    # Since A is xy and B is 4xy, A lies in the tens and B in the hundreds position respectively\n    for x in range(1, 10):  # x cannot be 0 since it's the first digit\n        for y in range(10):  # y can be any digit\n            A = 10 * x + y\n            B = 400 + A\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    value = 4320\n    factor_3_over_2 = 3/2\n    n = 0\n\n    # Prime factorize 4320 to count how many times it can be divided by 3\n    while value % 3 == 0:\n        value = value / 3\n        n += 1\n\n    # Since for each n we divide by an extra 2, it subtracts one from the 3's counted\n    return n\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n\n    if total_cookies % cookies_per_small_box == 0:\n        small_boxes_needed = total_cookies // cookies_per_small_box\n    else:\n        small_boxes_needed = (total_cookies // cookies_per_small_box) + 1\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students = 43\n    students_math = 30\n    students_science = 28\n    students_english = 25\n    \n    max_all_subjects = (students_math + students_science + students_english) - total_students\n    return max(max_all_subjects, 0)\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    \n    juice_1 = 20 * 0.35\n    juice_2 = 30 * 0.60\n    \n    total_juice = juice_1 + juice_2\n    concentration = (total_juice / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    boxes_needed = total_cookies // cookies_per_box\n\n    # If there's any remainder, we need one more box\n    if total_cookies % cookies_per_box > 0:\n        boxes_needed += 1\n\n    return boxes_needed\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original amount of grain in warehouse B\n    x = symbols('x')\n    \n    # After A received 12 tons and B shipped out 16 tons\n    A = 50 + 12\n    B = x - 16\n    \n    # A is now 2 times B\n    equation = Eq(A, 2 * B)\n    \n    # Solving the equation\n    original_B = solve(equation, x)\n    \n    return original_B[0]\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_letters = len(word)\n    ways = factorial(total_letters)\n    \n    for count in letter_counts.values():\n        ways //= factorial(count)\n        \n    return ways\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # The given sequence is a sequence of consecutive prime numbers.\n    # The missing prime number is between 31 and 41.\n    # We will check each number between 31 and 41 to find the missing prime.\n    # Since 31 and 41 are both primes, we'll test numbers starting from 32 to 40.\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for num in range(32, 41):\n        if is_prime(num):\n            return num\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return hours_hired\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen traded 3 fishes for 1 rabbit\n    fishes_per_rabbit = 3\n\n    # Oscar traded 2 rabbits for 3 packs of wheat\n    rabbits_per_wheat_pack = 2 / 3\n\n    # Calculating fishes per wheat pack by multiplying \n    # The number of fishes required for one rabbit by \n    # The number of rabbits required for one pack of wheat\n    fishes_per_wheat_pack = fishes_per_rabbit * rabbits_per_wheat_pack\n\n    return fishes_per_wheat_pack\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    benches = symbols('benches')\n    \n    # If 3 people on one bench, there are 7 people standing; the total seats are 3 less than the people\n    # If 7 people on one bench, there are 3 benches empty; the total seats are 21 more than the people\n    equation1 = Eq(3 * benches - 7, (7 * (benches - 3)))\n    \n    # Solve for benches\n    solution_benches = solve(equation1, benches)\n    \n    # Calculate total people using the first situation\n    total_people = 3 * solution_benches[0] - 7\n    \n    return total_people\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    count = 0\n    for combination in combinations_with_replacement(range(9 + 1), 3):\n        if sum(combination) == 9:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    least_number = solve_congruence(*congruences)[0]\n\n    ans = None\n    while least_number < 400:\n        least_number += 4 * 5 * 7\n        if 400 <= least_number <= 500:\n            ans = least_number\n            break\n\n    return ans\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return 21 - 11\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    # Create an algebraic equation based on the problem (x * 2) - 3 = 19\n    # Then solve for x, which is Lisa's favourite number\n    x = (19 + 3) / 2\n    \n    return x\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_a = 2\n    ratio_b = 3\n    bigger_share = (ratio_b / (ratio_a + ratio_b)) * total_amount\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    empty_mass, juice_mass = symbols('empty_mass juice_mass')\n    equation1 = Eq(5/6 * juice_mass + empty_mass, 4.6)\n    equation2 = Eq(2/3 * juice_mass + empty_mass, 4.45)\n    \n    solutions = solve((equation1, equation2), (empty_mass, juice_mass))\n    return solutions[empty_mass] * 1000  # convert kg to grams\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    pages = 0\n    digits_per_range = 9\n    range_factor = 1\n    \n    while total_digits > digits_per_range * range_factor:\n        total_digits -= digits_per_range * range_factor\n        pages += digits_per_range\n        if pages >= 9 * range_factor:\n            range_factor *= 10\n            digits_per_range *= 10\n\n    pages += total_digits // range_factor\n    if total_digits % range_factor != 0:\n        pages += 1\n    \n    return pages\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    # Loop through all the 3-digit odd numbers\n    for i in range(100, 1000, 2):  # Increment by 2 to ensure the number is odd\n        digits = [int(d) for d in str(i)]  # Split the number into its digits\n        if sum(digits) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    pupils_A = 235\n    pupils_B = 567\n    total_pupils = pupils_A + pupils_B\n    pupils_each = total_pupils // 2\n\n    return pupils_each\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    adder = 2\n    while True:\n        next_term = term + adder\n        if next_term >= 100:\n            break\n        term = next_term\n        adder += 2\n    return term\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_initial_notebooks = andy_notebooks - 2 * andy_gives\n    return sister_initial_notebooks\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_sequence = (n*(n + 1)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    # Let the number of books be b and the number of magazines be m.\n    # The cost of a book is Â£3.40 and the cost of a magazine is Â£1.60.\n    # Clara spends exactly Â£23 on books and magazines.\n    # Therefore, the equation to solve is: 3.40b + 1.60m = 23\n\n    # We will iterate over the possible number of books (b) since \n    # it has to be a whole number and use the equation to find the \n    # corresponding whole number of magazines (m).\n    \n    for b in range(23):\n        m = (23 - 3.40 * b) / 1.60\n        if m.is_integer():  # Check if m is a whole number\n            return int(m)  # Return the number of magazines since that is what we are looking for.\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n    \n    equation1 = Eq(justin, ashley + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5 / 8) + (1 / 17)) * 8 + (9 / 17)\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    # Start with a guess that age is a single digit number from 1 to 9 in base 10\n    for age in range(1, 10):\n        # Convert age to base 3\n        base3_age = int(str(age), 10)\n        # Add a \"0\" to the end of base 10 age and convert it to a base 10 number\n        modified_age = int(str(age) + '0')\n        # Check if the modified age in base 10 is the same as the unmodified age in base 3\n        if base3_age == modified_age:\n            return age\n    return None\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Prime factorize 7007\n    factors = []\n    n = 7007\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    # Check for pairs of factors that are both 2-digit numbers and multiples of 7\n    for i in range(len(factors)):\n        for j in range(i+1, len(factors)):\n            num1 = factors[i] * factors[j]\n            num2 = 7007 // num1\n            if (10 <= num1 <= 99) and (num1 % 7 == 0) and (10 <= num2 <= 99) and (num2 % 7 == 0):\n                return num1 + num2\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    ratio_orchids_to_tulips = Eq(orchids / tulips, 3 / 5)\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n    flowers_left = Eq(orchids - 0.40 * orchids + tulips - tulips / 5 + roses - 0.25 * roses, 2644)\n\n    solutions = solve((ratio_orchids_to_tulips, total_flowers, flowers_left), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    import math\n    # There are 7 people and 7 available seats (as one seat is always empty)\n    # Fix one person; others can be arranged in 6! ways around a circular table\n    # (circular permutations).\n    num_ways = math.factorial(6)\n    return num_ways\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given relationships\n    # 3*chocolate_cake = 2*cheesecake\n    # 3*cheesecake = 5*cookie\n    # 1*cookie = $9\n\n    # Calculating the cost of 1 cheesecake (cost_cheesecake)\n    cost_cookie = 9\n    cost_cheesecake = (5 * cost_cookie) / 3  # 3*cheesecake = 5*cookie\n\n    # Calculating the cost of 1 chocolate cake (cost_chocolate_cake)\n    cost_chocolate_cake = (2 * cost_cheesecake) / 3  # 3*chocolate_cake = 2*cheesecake\n\n    return cost_chocolate_cake\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equation 1 based on first sentence\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    # Equation 2 based on second sentence\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    digits = set(range(10)) - set([2, 0, 1, 9])\n    for A in digits:\n        for M in digits - {A}:\n            for C in digits - {A, M}:\n                number = int(f'20{A}{M}C19')\n                if number % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    portion_per_day = 1/4 / 3  # The portion of the book Elvis reads per day.\n    total_days = 1 / portion_per_day  # The total number of days to read the entire book.\n    \n    return total_days\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candies, valeria_candies = symbols('mike_candies valeria_candies')\n    total_candies = 36\n    mike_remaining = 6\n    valeria_remaining = 22\n\n    # Equation: After eating, both have eaten the same amount of candy\n    equation1 = Eq(mike_candies - mike_remaining, valeria_candies - valeria_remaining)\n    # Equation: Total candies they have\n    equation2 = Eq(mike_candies + valeria_candies, total_candies)\n\n    solutions = solve((equation1, equation2), (mike_candies, valeria_candies))\n\n    return solutions[valeria_candies]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    ans = 42 // (2 * 7)\n    return ans\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbols for A, B, C\n    A, B, C = symbols('A B C')\n\n    # Define the equations\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, 3 * A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Melissa's age now and her mother's age now\n    melissa_age_now, mothers_age_now = symbols('melissa_age_now mothers_age_now')\n\n    # Given that when Melissa was 8, her mother was 32, so the difference in age will always be the same\n    age_difference = 32 - 8\n\n    # The first equation represents that Melissa's age plus the difference is equal to her mother's age\n    equation1 = Eq(mothers_age_now, melissa_age_now + age_difference)\n    \n    # The second equation represents that her mother is now three times as old as Melissa\n    equation2 = Eq(mothers_age_now, 3 * melissa_age_now)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa_age_now, mothers_age_now))\n\n    # Return Melissa's age now\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Decimal representation of 6/7\n    decimal_repr = \"857142\"\n    \n    # Length of repeating pattern\n    pattern_len = len(decimal_repr)\n    \n    # Total sum of repeating decimals for first 58 digits\n    complete_sets = 58 // pattern_len\n    remaining_digits = 58 % pattern_len\n    \n    # Sum of digits in the repeating pattern\n    sum_pattern = sum(int(digit) for digit in decimal_repr)\n    \n    # Total sum calculation\n    total_sum = sum_pattern * complete_sets + sum(int(decimal_repr[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    plants_after_joel = (remaining_plants + 2) * 2\n    plants_after_valerie = (plants_after_joel + 3) * 2\n    initial_plants = (plants_after_valerie + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert recurring decimal to fraction to compare\n    recurring_decimal = Fraction(473, 100) + Fraction(3, 990)\n    \n    # Convert other decimals to fraction to compare\n    decimal_1 = Fraction(473, 100)\n    decimal_2 = Fraction(477, 100)\n    decimal_3 = Fraction(4737, 1000)\n    \n    # Create a dictionary of the decimal representations and their Fraction values\n    decimals = {\n        '4.737': recurring_decimal,\n        '4.73': decimal_1,\n        '4.77': decimal_2,\n        '4.737...': decimal_3,\n    }\n\n    # Find the minimum value using min and comparing the Fraction values\n    min_value = min(decimals, key=lambda k: decimals[k])\n    \n    # The key corresponding to the smallest fraction value is the answer\n    return min_value\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    # Let the original number of eggs be x\n    # After the first sale, the number of eggs remaining in the basket is x - (x/2 + 16)\n    # After the second sale, the seller is left with 18 eggs, so the second sale must have been (x/2 + 16)/2 - 7 eggs\n    # Set up the equation: x - (x/2 + 16) - ((x/2 + 16)/2 - 7) = 18\n\n    # Half of the remaining eggs after the first sale\n    half_remaining = lambda x: (x - (x / 2 + 16)) / 2\n\n    # Value left after the second sale\n    remaining_eggs = lambda x: x - (x / 2 + 16) - (half_remaining(x) - 7)\n\n    # Set up the original number of eggs to 18 after sales\n    original_eggs = lambda x: remaining_eggs(x) - 18\n\n    # Find the number of eggs that makes the original_eggs function equal to 0\n    x = 0\n    while True:\n        if original_eggs(x) == 0:\n            break\n        x += 1\n\n    return x\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # there are 2 possible outcomes for each toss (heads or tails)\n    num_tosses = 2  # the coin is tossed two times\n    total_outcomes = outcomes_per_toss ** num_tosses  # the total outcomes are 2^2\n    return total_outcomes\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    PA = symbols('PA', real=True, positive=True)\n    # Since all the points are from the center, the squares of the distances should add up to the square of the total diagonal\n    equation = Eq(PA**2 + (60*10)**2 + (60*5)**2 + (120*2)**2, (36*7)**2)\n\n    PA_value = solve(equation, PA)\n\n    return PA_value[1]  # taking the positive value since distances are positive\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    p1, p6 = symbols('p1 p6')\n\n    # equation1: number of students (P1 + P6 = 120)\n    equation1 = Eq(p1 + p6, 120)\n    \n    # equation2: number of buckets (P1/2 + P6*2 = 180)\n    equation2 = Eq(p1 / 2 + p6 * 2, 180)\n\n    result = solve((equation1, equation2), (p1, p6))\n\n    return result[p1]\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    pencils = 55\n    pens = 143\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of each type of ball\n    cost_basketball, cost_volleyball = symbols('cost_basketball cost_volleyball')\n\n    # Create equations based on the given problem\n    equation1 = Eq(2 * cost_basketball + 3 * cost_volleyball, 195)\n    equation2 = Eq(4 * cost_basketball + 5 * cost_volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_basketball, cost_volleyball))\n\n    return solutions[cost_volleyball]\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    dividend = 9 * 4 + 2  # Correct approach: multiply the quotient by the divisor and add the remainder\n    # Johnny's incorrect solution was 9 * 2 + 4\n    return dividend  # Correct answer\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = [(i, 8 - i) for i in range(1, 7) if 1 <= 8 - i <= 6]\n    count = len(ways)\n    return count\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed) if boxes_needed.is_integer() else int(boxes_needed) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # The ratio of fish to rabbits is 3 fish for 1 rabbit.\n    # The ratio of rabbits to packs of wheat is 1 rabbit for 1.5 packs of wheat (since 2 rabbits are for 3 packs).\n    # To find the number of fish per pack of wheat, we multiply the two ratios together.\n    \n    fish_to_rabbits = 3 / 1\n    rabbits_to_wheat = 1 / 1.5\n\n    # Multiply both ratios to get fish per pack of wheat\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n    \n    return fish_to_wheat\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Generate all permutations with repetition for lengths 1 to 2\n    for i in [1, 2]:\n        for perm in permutations(digits, i):\n            num = int(''.join(perm))\n            if num < 100 and isprime(num):\n                primes.add(num)\n    \n    # Use all three digits; no repeating, order still matters\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num < 100 and isprime(num):\n            primes.add(num)\n    \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    left_term = numerator / denominator\n\n    right_numerator = (3.5 + Fraction(14, 3) + Fraction(32, 15))\n    right_denominator = (0.5 * (Fraction(21, 20) + 4.1))\n    right_term = right_numerator / right_denominator\n\n    ans = left_term / right_term\n\n    return float(ans)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of students in the canteen at first\n    x = symbols('x')\n    \n    # At first, 40% of the students were boys, which corresponds to 0.4 * x boys\n    boys_initial = 0.4 * x\n    \n    # After 16 boys left and 16 girls entered, the boys made up 2/15 of the students\n    boys_after = boys_initial - 16\n    # Total number of students after the exchange is still x (since 16 left and 16 entered)\n    total_after = x\n    \n    # Now the boys make up 2/15 of the total students\n    equation = Eq(boys_after, 2/15 * total_after)\n    \n    # Solve the equation for x\n    students_initial = solve(equation, x)[0]\n    \n    # Number of girls initially (girls were 60% at the beginning)\n    girls_initial = 0.6 * students_initial\n    \n    # After 16 girls entered\n    girls_after = girls_initial + 16\n    \n    return int(girls_after)\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    only_swimming = 0.82 * total_students\n    only_jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n\n    both = only_swimming + only_jogging - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # We'll iterate through all possible values of N considering it's a four-digit number\n    for N in range(1000, 10000):\n        str_N = str(N)\n        # Now we will remove one digit at a time to form M, which has to be a three-digit number\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N  # Return the original number N when the condition is met\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a banana and a pear\n    banana, pear = symbols('banana pear')\n\n    # Define the equations based on the given information\n    # Max buys 1 banana and 2 pears for 94p\n    eq1 = Eq(banana + 2 * pear, 94)\n    # Emily buys 1 banana and 1 pear for 62p\n    eq2 = Eq(banana + pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (banana, pear))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    expression1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    expression2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    ticket_price = 112\n    num_tickets = 16\n    total_cost = ticket_price * num_tickets\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Calculate the number of trees, considering trees at both ends\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    a_rate = 1/15\n    b_rate = 1/10\n    work_done_in_4_days = 4 * (a_rate + b_rate)\n\n    remaining_work = 1 - work_done_in_4_days\n    days_for_b_to_finish = remaining_work / b_rate\n\n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5\n    cici_rate = 1 / 6\n    combined_rate = linda_rate + cici_rate\n    total_time = 2 * 60  # convert hours to minutes\n    total_problems = combined_rate * total_time\n    return int(total_problems)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for i in range(13, 18):\n        if i % 2 != 0 and i > 13:\n            return i\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # Let x be the number of apples Amy has to give to John.\n    # After giving x apples, Amy would have (amy_apples - x) apples,\n    # and John would have (john_apples + x) apples.\n    # We want Amy to have 4 more apples than John after the exchange.\n    # So, the equation is: amy_apples - x = john_apples + x + 4\n\n    x = (amy_apples - john_apples - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(known_numbers)\n    return missing_number\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    X, Y, Z = symbols('X Y Z')\n\n    equation1 = Eq(X, Y + 83)  # X is 83 more than Y\n    equation2 = Eq(Z, X + 24)  # Z is 24 more than X\n    equation3 = Eq(X + Y + Z, 283)  # Total prizes is 283\n\n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n\n    return solutions[Y]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Total amount of grass required to feed one goat for 15 days\n    goat_grass = 14 * 15\n    # Total amount of grass required to feed one rabbit for 8 days\n    rabbit_grass = 70 * 8\n    # Grass consumption rate of a goat compared to a rabbit\n    goat_eats_like_rabbits = 4\n\n    # Total amount of grass in the pasture\n    total_grass = goat_grass  # or alternatively, total_grass = rabbit_grass\n\n    # Daily consumption of grass by one goat\n    daily_grass_goat = total_grass / (14 * 15)\n    # Daily consumption of grass by one rabbit\n    daily_grass_rabbit = total_grass / (70 * 8)\n\n    # Daily consumption of grass by the 17 goats and 20 rabbits\n    daily_grass_needed = 17 * daily_grass_goat + 20 * daily_grass_rabbit\n\n    # Number of days the pasture can feed the 17 goats and 20 rabbits\n    days_pasture_can_feed = total_grass / daily_grass_needed\n\n    return days_pasture_can_feed\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10         # 10 tens is 100\n    tenths = 35 * 0.1      # 35 tenths is 3.5\n    hundredths = 8 * 0.01  # 8 hundredths is 0.08\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 3 * (19 - x), 65)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    slide_distance_increment = 1\n    \n    while True:\n        day += 1\n        height_climbed += 10  # climb during the day\n        if height_climbed >= 45:\n            break\n        height_climbed -= slide_distance_increment  # slide during the night\n        slide_distance_increment += 1\n        \n    return day\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    num = 4\n    times = 3\n    triangle_number = sum(int(str(num) * i) for i in range(1, times + 1))\n    return triangle_number\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Mr. Chan's and Mr. Toh's money\n    chan, toh = symbols('chan toh')\n\n    # Equation 1 (1/4 of Mr. Chan's money is $33 more than 1/3 of Mr. Toh's)\n    equation1 = Eq(chan/4, toh/3 + 33)\n\n    # Equation 2 (They have $1000 altogether)\n    equation2 = Eq(chan + toh, 1000)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_num = \"0141705021\"\n    devil_num = \"4005220912\"\n\n    angel_count = [angel_num.count(str(i)) for i in range(10)]\n    devil_count = [devil_num.count(str(i)) for i in range(10)]\n\n    if angel_count == devil_count:\n        return True  # Andy can unlock the treasure chest\n    else:\n        correct_password = ''.join(str(i) * count for i, count in enumerate(angel_count))\n        return correct_password  # The correct password\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a')\n    x = sqrt(a) - 2/sqrt(a)\n\n    expression = sqrt(x**2 + 8*x)\n    ans = simplify(expression)\n\n    return ans\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    def recurring_decimal_to_fraction(decimal, repeating):\n        # Convert non-repeating part to fraction\n        non_repeating = decimal.split('.')[0] + decimal.split('.')[1][:repeating]\n        non_repeating_fraction = int(non_repeating) / (10**len(non_repeating))\n        \n        # Calculate repeating fraction\n        repeating_part = decimal.split('.')[1][repeating:] or '0'\n        repeating_length = len(repeating_part)\n        repeating_fraction = int(repeating_part) / (10**repeating_length - 1) / (10**repeating)\n        \n        # Add fractions to get the final result\n        return non_repeating_fraction + repeating_fraction\n    \n    # Calculate each number's fraction value and sum them up\n    ans = (\n        recurring_decimal_to_fraction('0.0', 1) +\n        recurring_decimal_to_fraction('0.1', 1) +\n        recurring_decimal_to_fraction('0.2', 1) +\n        recurring_decimal_to_fraction('0.3', 1) +\n        recurring_decimal_to_fraction('0.4', 1) +\n        recurring_decimal_to_fraction('0.5', 0) +\n        recurring_decimal_to_fraction('0.7', 1)\n    )\n    \n    return ans\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            if x1 + x2 == 6 and x1 != x2:\n                count += 1\n            for x3 in range(1, 6):\n                if x1 + x2 + x3 == 6 and len(set([x1, x2, x3])) == len([x1, x2, x3]):\n                    count += 1\n                for x4 in range(1, 6):\n                    if x1 + x2 + x3 + x4 == 6 and len(set([x1, x2, x3, x4])) == len([x1, x2, x3, x4]):\n                        count += 1\n                    for x5 in range(1, 6):\n                        if x1 + x2 + x3 + x4 + x5 == 6 and len(set([x1, x2, x3, x4, x5])) == len([x1, x2, x3, x4, x5]):\n                            count += 1\n    return count // 2\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    \n    # Applying the Pigeonhole Principle\n    max_sheep_in_a_pen = (total_sheep // total_pens) + (total_sheep % total_pens > 0)\n\n    return max_sheep_in_a_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 7 == 5:\n            return i\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    \n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    \n    total_age_all = total_age_boys + total_age_girls\n    total_people = total_boys + total_girls\n    \n    mean_age_all = total_age_all / total_people\n    \n    return mean_age_all\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel_num = \"0141705021\"\n    devil_num = \"4005220912\"\n    \n    angel_sorted = sorted(angel_num)\n    devil_sorted = sorted(devil_num)\n    \n    if angel_sorted == devil_sorted:\n        return True\n    else:\n        return ''.join(angel_sorted)\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    days_raye = 6\n    days_simon = 12\n    days_taylor = 16\n    \n    ans = lcm(days_raye, days_simon, days_taylor)\n    \n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    table, chair = symbols('table chair')\n    eq1 = Eq(3 * table, 4 * chair)\n    eq2 = Eq(table, chair + 2)\n    solutions = solve((eq1, eq2), (table, chair))\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 25\n    common_difference = 3\n    n = 10\n\n    # Calculate the first term using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n  # To ensure Sara gets 5 balls of the same color, consider the worst case scenario:\n  # She might take out all 5 yellow balls and still need more to get 5 of the same color.\n  # After that, she might pick 4 green balls (not enough to make 5 of the same color).\n  # Finally, Sara has to pick another ball to be sure it is either green or yellow, making 5 of the same.\n  # In total, she has to pick 5 (yellow) + 4 (green) + 1 (another ball to ensure 5 of the same) = 10 balls.\n\n  return 5 + 4 + 1  # The 1 accounts for the next ball ensuring 5 of the same\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Define a function for the new operation\n    def new_operation(a, b):\n        # Extract tens and ones digit of both numbers\n        tens_a = a // 10\n        ones_a = a % 10\n        tens_b = b // 10\n        ones_b = b % 10\n        # Perform the operation as defined\n        result = tens_a * ones_a + tens_b * ones_b\n        return result\n\n    # Use the new operation to calculate 89*75\n    ans = new_operation(89, 75)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1\n    ben_speed = 0.6\n    total_time_seconds = 10 * 60  # 10 mins in seconds\n\n    # Combined speed when they go towards each other\n    combined_speed = sam_speed + ben_speed\n\n    # Time to meet each other for the first time\n    time_to_meet = pool_length / combined_speed\n\n    # Number of times they meet\n    meets = total_time_seconds // time_to_meet\n\n    return int(meets)\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = 2 * average_bob_cindy\n    total_height_all = total_height_bob_cindy + height_doris\n    average_height_all = total_height_all / 3\n    return average_height_all\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies each had at first\n    x = symbols('x')\n    \n    # Equation representing the final number of pies after transactions\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    # In 6 years, Destin = 2 * (nephew's age + 6)\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    # 6 years ago, Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # Sum of their ages in 10 years' time\n    sum_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_in_10_years\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    all_possible_numbers = list(permutations(digits))\n    count_of_numbers = len(all_possible_numbers)\n    return count_of_numbers\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    format_time = \"%I:%M%p\"\n\n    departure_time_str = \"6:35AM\"\n    arrival_time_str = \"10:22AM\"\n\n    departure_time = datetime.strptime(departure_time_str, format_time)\n    arrival_time = datetime.strptime(arrival_time_str, format_time)\n\n    travel_duration = arrival_time - departure_time\n\n    travel_duration_minutes = travel_duration.total_seconds() / 60\n\n    return int(travel_duration_minutes)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    base_pattern = [3, 4, 5, 6]\n    pattern_length = len(base_pattern)\n    total_digits = 50\n    \n    complete_sets = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n    \n    sum_complete_sets = sum(base_pattern) * complete_sets\n    sum_remaining_digits = sum(base_pattern[:remaining_digits])\n    \n    total_sum = sum_complete_sets + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    # Let the number of boys be x\n    # Total number of pencils owned by the boys will be 20x\n    # The number of girls will be (40 - x)\n    # Total number of pencils owned by the girls will be 60(40 - x)\n    # Total pencils = Pencils by boys + Pencils by girls\n    # Average pencils per student = Total pencils / Total students\n    # According to the question, average pencils per student is 35\n    \n    total_students = 40\n    avg_pencils = 35\n    total_pencils = avg_pencils * total_students # Total pencils is average * number of students\n\n    # Now set up equation based on above information\n    # 20x + 60(40 - x) = total_pencils\n    # Solve for x to find the number of boys\n    boys_avg = 20\n    girls_avg = 60\n    x = symbols('x')\n    equation = Eq(boys_avg * x + girls_avg * (total_students - x), total_pencils)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # each division (a div b) can be rewritten as a * (1/b)\n    # rewriting the expression using multiplication and reciprocal of each division term\n    ans = 3 * (5 / 3) * (7 / 5) * (9 / 7) * (13 / 9) * (15 / 13)\n    \n    # simplifying the expression by cancelling out similar terms \n    # which would ultimately give us 15 * (1/3) = 15/3\n    ans = ans / 1  # This line is intentionally verbose.\n    \n    # simplifying the final expression\n    ans = ans / 3\n    \n    return ans\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    current_tom_age = 10\n    future_father_age = 70\n    age_difference = future_father_age - current_tom_age\n    current_father_age = current_tom_age + age_difference\n    return current_father_age\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n    \n    # Number of sweets for the first group of students\n    sweets_for_first_group = fraction_first_group * total_sweets\n    \n    # Number of students in the first group\n    students_first_group = sweets_for_first_group / sweets_first_group\n    \n    # Remaining sweets after the first group has received theirs\n    remaining_sweets = total_sweets - sweets_for_first_group\n    \n    # Number of sweets for the second group of students\n    sweets_for_second_group = fraction_second_group * remaining_sweets\n    \n    # Number of students in the second group\n    students_second_group = sweets_for_second_group / 4\n    \n    # Remaining sweets after the second group has received theirs\n    sweets_remaining_final_group = remaining_sweets - sweets_for_second_group\n    \n    # Number of students in the final group\n    students_final_group = sweets_remaining_final_group / 5\n    \n    # Total number of students in the classroom\n    total_students = students_first_group + students_second_group + students_final_group\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n\n    # Calculate products for all combinations of two numbers from the list\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            prod = numbers[i] * numbers[j]\n            if prod in products:\n                products[prod].append((numbers[i], numbers[j]))\n            else:\n                products[prod] = [(numbers[i], numbers[j])]\n\n    # Calculate products for all combinations of three numbers from the list\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                prod = numbers[i] * numbers[j] * numbers[k]\n                if prod in products and len(products[prod]) == 1:\n                    cards_used = set(products[prod][0])\n                    cards_used.update([numbers[i], numbers[j], numbers[k]])\n                    not_picked = set(numbers) - cards_used\n                    return not_picked.pop()\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    diff = (3 + 1/4) - (1 + 3/4)\n    return round(diff, 2)\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def is_composite(n):\n    if n < 4:  # 1, 2, and 3 are not composite\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solution():\n    for odd in range(999, 0, -2):  # start from a large odd number and go backwards\n        can_split = False\n        for a in range(4, odd // 3 + 1):  # start from the smallest composite number\n            if is_composite(a):\n                for b in range(a + 1, (odd - a) // 2 + 1):  # second composite number must be larger than the first\n                    c = odd - a - b\n                    if c > b and is_composite(b) and is_composite(c):  # ensure different composite numbers\n                        can_split = True\n                        break\n            if can_split:\n                break\n        if not can_split:\n            return odd\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    days_in_packets = lcm(25, 20)\n    month = 3\n    day = 1\n    year = 2023\n\n    # Assuming no leap year, so February has 28 days\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    while days_in_packets > 0:\n        days_in_current_month = days_in_months[month - 1]\n        if days_in_packets > days_in_current_month - (day - 1):\n            days_in_packets -= days_in_current_month - (day - 1)\n            month += 1\n            day = 1\n            if month > 12:\n                month = 1\n                year += 1\n        else:\n            day += days_in_packets\n            break\n\n    return (year, month, day)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    equation2 = Eq(boys, 3 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    # first number in the range [1, 100] that leaves a remainder of 3 when divided by 4 is 3\n    first_number = 3\n    \n    # last number in the range [1, 100] that leaves a remainder of 3 when divided by 4 is 99\n    last_number = 99\n    \n    # The common difference in this arithmetic sequence is 4 (since every fourth number will have a remainder of 3 when divided by 4)\n    common_difference = 4\n    \n    # Calculate the number of terms in this sequence using arithmetic sequence formula n = ((last - first)/d) + 1\n    number_of_terms = ((last_number - first_number) / common_difference) + 1\n    \n    # Calculate the sum of an arithmetic sequence using the formula sum = n/2 * (first_number + last_number)\n    sum_of_numbers = (number_of_terms / 2) * (first_number + last_number)\n    \n    return int(sum_of_numbers)\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    both_teams = (sports_team + art_team) - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2 + 1):  # side a\n        for b in range(a, 12 - 2*a + 1):  # side b, must be at least as long as a to form a triangle\n            c = 12 - a - b               # side c, determined by the perimeter\n            if a == b or b == c:         # Check if it's isosceles (two sides equal)\n                if a + b > c:            # Inequality theorem: sum of two sides must be greater than the third\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n    \n    # current ages of two brothers add up to 42\n    equation1 = Eq(elder + younger, 42)\n\n    # a few years ago, the age difference between their ages remains constant\n    # so we can express the age of the elder brother a few years ago as (elder - (elder - younger))\n    # at that time, the younger brother was exactly half the elder brother's current age\n    # which means younger - (elder - younger) = elder / 2\n    equation2 = Eq(younger - (elder - younger), elder / 2)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n    \n    # we want the age of the elder brother now\n    return solutions[elder]\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had = 86\n    lena_gave_away = 29\n    lena_received_from_mother = 100 - (lena_had - lena_gave_away)\n    return lena_received_from_mother\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    # The number of students in each class\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Calculate the GCD of the three numbers\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Passed second exam\n    passed_second_exam = total_students - failed_second_exam\n\n    # Passed first exam but not second\n    passed_only_first = passed_first_exam - (passed_second_exam - passed_second_failed_first)\n\n    return passed_only_first\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of ways from A to B to C to D\n    A_B_C_D = 7 * 5 * 2\n    \n    # Number of ways from A to C to D\n    A_C_D = 4 * 2\n    \n    # Total number of ways from A to D\n    total_ways = A_B_C_D + A_C_D + 6\n    \n    return total_ways\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # total hay in kilograms\n    cattle_count = 5  # number of cattle\n    days = 10  # number of days the hay lasts\n\n    daily_hay_per_cattle = total_hay / (cattle_count * days)\n\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    pencil_quantity = 3\n    pen_quantity = 2\n\n    total_pencil_cost = pencil_cost * pencil_quantity\n    total_pen_cost = total_cost - total_pencil_cost\n    cost_per_pen = total_pen_cost / pen_quantity\n\n    return cost_per_pen\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let the number of chocolate cupcakes be c and the number of cheese cupcakes be 255 - c\n    # After selling 40% of the chocolate cupcakes, Eric is left with 60% of them, i.e., 0.6c\n    # Similarly, after selling 75% of the cheese cupcakes, Eric is left with 25% of them, i.e., 0.25(255 - c)\n    # It's given that the remaining numbers are equal, thus, we have:\n    # 0.6c = 0.25(255 - c)\n\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number of chocolate cupcakes\n    c = symbols('c')\n\n    # Create the equation based on the problem statement\n    equation = Eq(0.6 * c, 0.25 * (255 - c))\n\n    # Solve the equation to find the number of chocolate cupcakes\n    num_chocolate_cupcakes = solve(equation, c)[0]\n\n    # Calculate the number of cheese cupcakes\n    num_cheese_cupcakes = 255 - num_chocolate_cupcakes\n\n    # Calculate the cupcakes left after selling the given percentages\n    cupcakes_left = 0.6 * num_chocolate_cupcakes\n\n    # Since the problem states that the number of remaining cupcakes\n    # for both types is equal, we return the number for one type.\n    return cupcakes_left\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from sympy import divisors\n\n    # The divisors of 210\n    divs = divisors(210)\n\n    # Iterate through divisors\n    for i in divs:\n        for j in divs:\n            for k in divs:\n                # All children must have different ages and be less than 10\n                if i < j < k < 10 and i*j*k == 210:\n                    return i  # The youngest child's age\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_kg_avocados = 960\n    kg_per_box = 8\n    num_boxes = total_kg_avocados // kg_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    equation1 = Eq(boys + girls, total_students)\n    equation2 = Eq((1/4) * boys, (2/5) * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    more_boys = solutions[boys] - solutions[girls]\n\n    return more_boys\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n    days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts - days * locusts_per_day\n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3/8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return 12*92 + 22*82 + 32*72\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben', positive=True)\n    ratio1 = Eq(don / ben, 2 / 3)\n    ratio2 = Eq((don + 10) / (ben - 5), 6 / 7)\n    solutions = solve((ratio1, ratio2), (don, ben))\n\n    return solutions[don]\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    toys_to_give = (amy_toys - sally_toys) // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    # Let x be the number of $10 notes, y be the number of $5 notes\n    # We have two equations based on the problem statement:\n    # 1. x + y = 116 (the total number of notes)\n    # 2. (0.4x) / (0.75y) = 4/7 (after spending, the ratio of $10 to $5 notes)\n    # We need to find the cost of the bag: cost = (0.6x * 10) + (0.25y * 5)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Equation 1: total number of notes\n    equation1 = Eq(x + y, 116)\n    # Equation 2: ratio after spending\n    equation2 = Eq(0.4*x / (0.75*y), 4/7)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the cost of the bag\n    cost = (0.6 * solutions[x] * 10) + (0.25 * solutions[y] * 5)\n    \n    return cost\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    a, b, c = 1, 1, 29  # Start with 1, 1, 29 which are the smallest values for a, b, c\n    max_product = a * b * c  # Initial max product with a, b, c values\n\n    for i in range(1, 31 // 3 + 1):  # loop from 1 to 31//3\n        for j in range(i, (31 - i) // 2 + 1):  # loop from i to (31-i)//2\n            k = 31 - i - j  # Calculate third number\n            if i + j + k == 31:  # Redundant check, always true\n                max_product = max(max_product, i * j * k)  # Update max_product if current product is greater\n\n    return max_product\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # We notice that the sequence is an alternating sum and addition of consecutive numbers starting from 2\n    # The sequence can be rearranged as (2 + 4 + 6 + ... + 2016) - (3 + 5 + 7 + ... + 2015)\n    # Each of these sequences is an arithmetic progression\n    # The first one starts at 2 and goes up by 2 each time; the second one starts at 3 and also goes up by 2 each time\n    \n    # Calculate the sum of the first sequence (even numbers from 2 to 2016)\n    first_term_even = 2\n    last_term_even = 2016\n    difference_even = 2\n    num_terms_even = (last_term_even - first_term_even) // difference_even + 1\n    sum_even = num_terms_even * (first_term_even + last_term_even) // 2\n    \n    # Now calculate the sum of the second sequence (odd numbers from 3 to 2015)\n    first_term_odd = 3\n    last_term_odd = 2015\n    difference_odd = 2\n    num_terms_odd = (last_term_odd - first_term_odd) // difference_odd + 1\n    sum_odd = num_terms_odd * (first_term_odd + last_term_odd) // 2\n    \n    # Subtract the sum of the second sequence from the sum of the first sequence\n    return sum_even - sum_odd\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    # Given values\n    heather_saved = 12.15\n    zach_saved_factor = 3\n    serena_saved_more = 24.5\n    serena_saved_factor = 5\n    jason_saved_more = 1.54\n\n    # Calculate saved amounts\n    zach_saved = heather_saved * zach_saved_factor\n    serena_saved = zach_saved + serena_saved_more\n    jason_saved = serena_saved / serena_saved_factor\n    william_saved = jason_saved - jason_saved_more\n\n    return william_saved\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_squares = 2870\n    sum_seq = 0\n    \n    # Calculate each term's value and add to the sum sequence\n    for i in range(1, 21, 2):\n        sum_seq += i * (i + 2)\n    \n    ans = sum_seq\n    return ans\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    gallons_needed = order_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n    \n    # Total students\n    total = 7\n    \n    # Treat the triplet sisters as one entity, so we have total - 3 + 1 entities to arrange\n    entities_to_arrange = total - 2\n    \n    # Arrangements for the entities_to_arrange with the sisters kept as one entity\n    arrangements_entities = factorial(entities_to_arrange)\n    \n    # Twin brothers not next to each other\n    # This is same as total arrangements - arrangements where they are together\n    arrangements_twin_together = factorial(entities_to_arrange - 1) * 2\n    arrangements_twin_apart = arrangements_entities - arrangements_twin_together\n    \n    # Arrangements for the triplet sisters among themselves\n    arrangements_triplet = factorial(3)\n    \n    # Total arrangements is the product of arrangements where twin brothers are apart\n    # and arrangement possibilities for the triplet sisters\n    total_arrangements = arrangements_twin_apart * arrangements_triplet\n\n    return total_arrangements\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f'21{i}{j}35')\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    students = 320\n    weeks = 52\n    students_per_week = students//weeks\n    if students % weeks != 0:\n        students_per_week += 1\n    return students_per_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Since a week consists of 7 days, the number of weeks in 55 days is\n    full_weeks = 55 // 7\n    # The maximum number of Fridays is the number of full weeks plus one,\n    # if the 55-day period starts on a Friday or if the Friday is at the end of the 55-day period.\n    # Therefore, the greatest number of Fridays that can occur is\n    max_fridays = full_weeks + 1\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1/2))\n    return ans\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Define the cost of a pencil and a pen\n    cost_pencil = 2\n    cost_pen = 4\n    \n    # Find how many pencils are equal to the cost of one pen\n    pencils_for_pen = cost_pen // cost_pencil\n    \n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n    number_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n    return int(number_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    # Find the least common multiple of the divisors which is also divisible by all of them\n    import numpy as np\n    lcm = np.lcm.reduce([2, 3, 4, 5, 6, 8, 9])\n    \n    # Find the smallest number that is greater than or equal to lcm and leaves a remainder of 5 when divided by 7\n    N = lcm\n    while N % 7 != 5:\n        N += lcm\n    \n    return N\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    away_fraction = 1 / 5\n    pupils_away = total_pupils * away_fraction\n    pupils_going = total_pupils - pupils_away\n    return int(pupils_going)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3  # time for one child to sing a song\n    songs_per_child = 2  # number of songs each child will sing\n    total_children = 50  # number of children\n\n    total_time = time_per_song * songs_per_child * total_children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - remaining_weight_with_two_apples\n    \n    basket_weight = remaining_weight_with_two_apples - (2 * (weight_of_three_apples / 3))\n    \n    return basket_weight\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost and items\n    cost_5_mugs = 3.50\n    cost_8_pens = 6.80\n\n    # Unit costs\n    cost_per_mug = cost_5_mugs / 5\n    cost_per_pen = cost_8_pens / 8\n\n    # Total cost for 7 mugs and 5 pens\n    total_cost = (cost_per_mug * 7) + (cost_per_pen * 5)\n\n    # Change from Â£10\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    percent = 25 / 100\n    decimal = 0.3\n\n    if percent > decimal:\n        ans = '25%'\n    else:\n        ans = '0.3'\n\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    amount = 37100\n\n    years = 0\n    current_amount = principal\n    while current_amount < amount:\n        current_amount += current_amount * rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    num = lcm\n    while True:\n        if str(num).endswith('2'):\n            return num\n        num += lcm\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    two_weeks = 2\n\n    return days_in_a_week * two_weeks\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    position_1 = 3 * 10**5  # The first 3 is in the hundred thousands place\n    position_2 = 3 * 10**2  # The second 3 is in the hundreds place\n    \n    diff = position_1 - position_2\n\n    return diff\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use symbols to represent the unknowns\n    cookies, cakes = symbols('cookies cakes')\n\n    # Original conditions\n    # There were thrice as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n\n    # After 39 cookies and 17 cakes were sold\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    # Solve the system of equations to find the number of cookies and cakes initially\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # Calculate the number of cookies left at the end\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # approach based on the 'Coin Problem', which is a special case of the Frobenius Coin Problem\n    # for the coin problem with two denominations a and b where gcd(a,b) = 1, the largest\n    # amount that cannot be made is a*b - a - b\n\n    a = 4\n    b = 5\n    largest_unmakeable_total = a * b - a - b\n\n    return largest_unmakeable_total\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the productivity of John, Jonah, and Angus as J, Jo, A\n    J, Jo, A = symbols('J Jo A')\n\n    equation1 = Eq(1 / J + 1 / Jo + 1 / A, 1 / 27)  # All together they take 27 hours\n    equation2 = Eq(1 / Jo + 1 / A, 1 / 36)          # Jonah and Angus together take 36 hours\n    \n    # Solving the system of equations to find the productivity of John, Jonah, and Angus\n    solutions = solve((equation1, equation2), (J, Jo, A))\n\n    # Since we're looking for how long John would take to build the wall, we take the reciprocal of John's productivity\n    john_time = 1 / solutions[J]\n\n    return john_time\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    # Calculate the sum of the first 20 natural numbers\n    # Since the book has pages 1, 2, 2, 3, 3, 3, ..., the number of pages for each number is equal to its value\n    total_pages = (20 * (20 + 1)) // 2  # n(n+1)/2 formula for sum of first n natural numbers\n\n    return total_pages\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            if (108200 + 10 * a + b) % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let x be Claire's age and y be Daniel's age 5 years ago\n    # x + y = 14 (Combined age 5 years ago)\n    # In 3 years, their ages will be (x+5+3) for Claire and (y+5+3) for Daniel\n    # Therefore, the combined age in 3 years will be (x+5+3) + (y+5+3)\n    # Simplifying, the combined age in 3 years will be x + y + 16\n    combined_age_5_years_ago = 14\n    combined_age_in_3_years = combined_age_5_years_ago + 16  # Added 16 because 5+3+5+3=16\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # The sum of 10 positive integers is 1001\n    # Let's find the maximum possible value for the greatest common divisor (gcd) of these 10 numbers\n    \n    # Step 1: Initialize the maximum gcd to 1 (minimum possible gcd)\n    max_gcd = 1\n\n    # Step 2: Iterate from 1 to 1001 to find the maximum number that divides 1001 evenly\n    for i in range(1, 1001 + 1):\n        if 1001 % i == 0:\n            # Step 3: Check if this divisor multiplied by 10 is less than or equal to 1001,\n            # as we need 10 such integers\n            if i * 10 <= 1001:\n                max_gcd = i\n\n    # Step 4: Return the maximum gcd found\n    return max_gcd\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    apple_weight = solutions[apple]\n    pear_weight = solutions[pear]\n\n    total_weight = 4 * apple_weight + 4 * pear_weight\n    \n    return total_weight\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 45\n    length_ribbon2 = 30\n\n    longest_piece_length = gcd(length_ribbon1, length_ribbon2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    ans = 475 + 138\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    i = 1\n    while not (i % 5 == 1 and i % 12 == 3):\n        i += 1\n    return i\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    amanda_stickers = solutions[amanda]\n    cathy_stickers = solutions[cathy]\n    \n    return amanda_stickers + cathy_stickers\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let b represent the number of boys, and g represent the number of girls\n    # Total students = number of boys + number of girls\n    total_students = 152\n\n    # After removing 1/11 of the boys and 5 girls, the number of boys and girls become the same\n    # b - (1/11)b = g - 5\n    # Simplify:\n    # 10/11b = g - 5\n  \n    # We also know that:\n    # b + g = 152\n\n    # We have two equations and two unknowns\n    # We'll use algebra to solve:\n    # b = 11/10 * (g - 5)\n    # Substitute b in the second equation:\n    # 11/10 * (g - 5) + g = 152\n    # 11(g - 5) + 10g = 152 * 10\n    # 11g - 55 + 10g = 1520\n    # 21g = 1520 + 55\n    # 21g = 1575\n    # g = 1575 / 21\n    g = 1575 / 21\n\n    # Now, substitute g back into b + g = 152 to find b\n    # b + 75 = 152\n    # b = 152 - 75\n    b = 152 - g\n\n    return int(b)\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (3 * 7) + 24\n    return ans\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_drink = 12\n    fraction_water = 3/4\n\n    litres_water = total_drink * fraction_water\n\n    return litres_water\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Number of eggs laid on the first day\n    initial_eggs = 50\n    \n    # Growth period for a flea to become an adult\n    growth_period = 30\n    \n    # Total number of days till we count the adult fleas\n    total_days = 40\n    \n    # Adult fleas will only come from eggs laid at least 30 days before the 40th day\n    # Since fleas take 30 days to become adults\n    adult_fleas_count = (total_days - growth_period) * initial_eggs\n    \n    return adult_fleas_count\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n    \n    # Using arithmetic progression sum formula: n/2 * (2a + (n-1)d)\n    total_students = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n\n    all_three = 1\n\n    # Using the Inclusion-Exclusion Principle\n    # Add up all the individual, then subtract the intersections of two languages,\n    # then add back the people who can speak all three because they were subtracted twice.\n    total_people = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n\n    return total_people\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = Fraction(21 * 286 + 21, 286)\n    num2 = Fraction(6 * 2530 + 647, 2530)\n    num3 = Fraction(1 * 2829 + 1370, 2829)\n\n    # Perform the calculation step by step\n    result = num1 / num2 * num3\n    \n    # Simplify the result and convert to mixed number format\n    ans_numerator = result.numerator\n    ans_denominator = result.denominator\n    whole_number = ans_numerator // ans_denominator\n    remainder = ans_numerator % ans_denominator\n    fractional_part = Fraction(remainder, ans_denominator)\n    \n    # Return the final answer as a tuple representing the mixed number\n    ans = (whole_number, fractional_part)\n    return ans\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n\n    money_left = total_money - (pencil_cost + ruler_cost)\n    return money_left\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the large cuboid\n    length, width, height = 6, 10, 12\n    # Number of small cubes along each dimension\n    cubes_length, cubes_width, cubes_height = length * width * height // 720, 720 // height, 720 // (length * width)\n    \n    # The number of cubes with exactly one face painted, on each face\n    top_bottom = (cubes_length - 2) * (cubes_width - 2) * 2\n    front_back = (cubes_length - 2) * (cubes_height - 2) * 2\n    left_right = (cubes_width - 2) * (cubes_height - 2) * 2\n\n    # Total number of small cubes with exactly one face painted pink\n    total_painted = top_bottom + front_back + left_right\n    return total_painted\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    candy = 140\n    ways = 0\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    for i in range(1, candy + 1):\n        if candy % i == 0 and is_odd(i):\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    # We iterate through all 2-digit numbers \n    # and check if they satisfy the given conditions\n    for number in range(10, 100):\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work Star can do in 1 hour\n    # Let n be the work Nini can do in 1 hour\n    s, n = symbols('s n')\n\n    # If Star works for 5 hours and then Nini works for 20 hours, the work will be finished\n    # If Star works for 20 hours and then Nini works for 8 hours, the work will also be finished\n    equation1 = Eq(5 * s + 20 * n, 1)\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Work done by Nini in one hour is solutions[n]\n    # Time it takes for Nini to finish the job by herself is 1 / solutions[n]\n    time_for_nini = 1 / solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # A sheet in a newspaper consists of two consecutive pages on each side.\n    # The third sheet will have the pages 5 and 6, and on the other side 7 and 8\n    sheet_page_numbers = [5, 6, 7, 8]\n    # The sum of the page numbers\n    page_sum = sum(sheet_page_numbers)\n    return page_sum\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    keys = 20\n    max_attempts = keys * (keys + 1) // 2  # Gauss's formula for sum of first n numbers\n    return max_attempts\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    num_girls = total_students * fraction_girls\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num1 = 2017 / 2018\n    num2 = 20172017 / 20182018\n    num3 = 201720172017 / 201820182018\n\n    sum_of_fractions = num1 + num2\n    ans = sum_of_fractions / num3\n\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return int(watermelon_to_apples)\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    pages = 0\n\n    while total_digits < 933:\n        pages += 1\n        if pages >= 10 and pages < 100:\n            digits_per_page = 2\n        elif pages >= 100:\n            digits_per_page = 3\n        total_digits += digits_per_page\n\n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    midpoint = (120 + 300) / 2\n    return midpoint\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, Stack A has 20 stones and Stack B has 16 stones.\n    stack_a = 20\n    stack_b = 16\n\n    # Jerry needs to ensure after his move, the number of stones in both stacks are equal.\n    # This way, no matter how many stones Tom takes in the next move (from either stack),\n    # Jerry can always take the equivalent from the other stack and ensure he gets the last stone.\n    # Since Stack A has 20 and Stack B has 16, Jerry should take 4 stones from Stack A.\n\n    jerry_moves = stack_a - stack_b\n\n    return f\"Jerry must take {jerry_moves} stone(s) from Stack A.\"\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost = total_cost / total_cups\n    return average_cost\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 92))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "from datetime import datetime\n\ndef solution():\n    format_str = '%I:%M%p' # The format\n    start_time = datetime.strptime('9:15PM', format_str)\n    end_time = datetime.strptime('11:06PM', format_str)\n    duration = end_time - start_time\n    return int(duration.total_seconds() // 60)\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initially, both boxes have the same amount of pens of each color.\n    blue_A, red_A, black_A, green_A = 10, 15, 20, 25  # Box A counts\n    blue_B, red_B, black_B, green_B = 10, 15, 20, 25  # Box B counts\n\n    # After taking 20 pens from Box A to Box B, we don't know the distribution\n    # of colors of these pens, so we ensure Box A has at least 15 pens of each color.\n\n    pens_to_return = 0  # we will count the pens to return\n\n    # If there are less than 15 pens of a color, we must return enough\n    # pens of that color to make it 15.\n    for color_A in (blue_A, red_A, black_A, green_A):\n        if color_A < 15:\n            pens_to_return += 15 - color_A\n\n    return pens_to_return\n            \nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1/8\n    return ans\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    boys = 0\n    girls = 0\n    layer = 0\n\n    # Assuming layer starts with boys and alternates with girls:\n    # Boys: (2n + 1)^2\n    # Girls: (2n)^2 + (2n + 2)^2\n    # Difference: (2n + 1)^2 - [(2n)^2 + (2n + 2)^2] = 32\n    while True:\n        boys_layer = (2 * layer + 1)**2\n        girls_layer = (2 * layer)**2 + (2 * layer + 2)**2\n        \n        if boys_layer - girls_layer == 32:\n            boys = boys_layer\n            for i in range(layer):\n                boys += 2 * (2 * i)**2\n                girls += 2 * (2 * i + 1)**2\n            break\n        else:\n            layer += 1\n\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # quotient\n    quotient = 29\n    # remainder\n    remainder = 11\n    # sum of dividend and divisor\n    sum_dividend_divisor = 431\n\n    # dividend = divisor * quotient + remainder\n    # Let's denote dividend as \"d\" and divisor as \"div\".\n    # Hence, we can express d in terms of div:\n    # d = div * quotient + remainder\n    # We also know that d + div = sum_dividend_divisor, hence:\n    # (div * quotient + remainder) + div = sum_dividend_divisor\n    # div * (quotient + 1) + remainder = sum_dividend_divisor\n    # div = (sum_dividend_divisor - remainder) / (quotient + 1)\n\n    divisor = (sum_dividend_divisor - remainder) // (quotient + 1)\n    dividend = divisor * quotient + remainder\n    # The difference between the dividend and divisor\n    difference = dividend - divisor\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_playing_violin = 12.5\n    number_playing_violin = 11\n\n    total_pupils = (number_playing_violin * 100) / percentage_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    # Total chocolates\n    total_chocolates = 20\n    # Plain chocolates\n    plain_chocolates = 8\n    # Milk chocolates\n    milk_chocolates = 12\n    # Chocolates with soft-centres\n    soft_centre_chocolates = 16\n    \n    # Since there are more soft-centre chocolates (16) than milk chocolates (12),\n    # all the milk chocolates must have soft centres.\n    # Let's subtract the milk chocolates with soft centres from the total soft-centre chocolates.\n    remaining_soft_centres = soft_centre_chocolates - milk_chocolates\n    \n    # The remaining soft-centres must all be plain chocolates since every\n    # other chocolate is accounted for.\n    plain_soft_centre = remaining_soft_centres\n\n    return plain_soft_centre\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution(n)"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x will represent the number of each kind of coin\n    x = symbols('x')\n\n    # Equation representing the total sum in pence\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solving the equation\n    number_of_coins_each = solve(equation, x)\n\n    # Since we have 4 types of coins and an equal number of each type\n    total_number_of_coins = 4 * number_of_coins_each[0]\n\n    return total_number_of_coins\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    A, B, C = symbols('A B C')\n\n    # Set up ratios according to the problem\n    ratio1 = Eq(A/B, 4/5)\n    ratio2 = Eq(B/C, 5/6)\n\n    # C is greater than A by 10\n    diff = Eq(C - A, 10)\n\n    # Solve the system of equations\n    solutions = solve((ratio1, ratio2, diff), (A, B, C))\n\n    A_val = solutions[A]\n    B_val = solutions[B]\n    C_val = solutions[C]\n\n    # Calculate and return the sum of A, B, and C\n    return A_val + B_val + C_val\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    # Equations based on the problem description\n    # total at first\n    equation1 = Eq(apples + pears, 105)\n    # apples left after selling\n    equation2 = Eq(apples - apples/3, 5/6 * (pears - 2/5 * pears))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    apples_sold = solutions[apples] / 3\n    pears_sold = solutions[pears] * 2 / 5\n    total_sold = apples_sold + pears_sold\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n    \n    group_of_four_factorial = factorial(4)  # Number of ways to arrange A, B, C, and D as a group\n    remaining_students_factorial = factorial(8)  # Number of ways to arrange the remaining 8 students\n    ways_to_place_group = 9  # Number of places to put the group in the line (9 options for the group)\n\n    total_ways = group_of_four_factorial * remaining_students_factorial * ways_to_place_group\n\n    return total_ways\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_matches = (6 * 5) // 2  # each student plays against 5 others\n    total_points = total_matches * 2  # 2 points for each match\n\n    points_already_given = 7 + 6 + 5 + 4 + 3\n    last_student_points = total_points - points_already_given\n\n    return last_student_points\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the weight of bag A and y be the weight of bag B\n    x, y = symbols('x y')\n\n    # Original ratio equation: 5/3 = x/y\n    equation1 = Eq(5*y, 3*x)\n\n    # New weight of bag A is (x - 10) and bag B is (y + 10)\n    # New ratio equation: 7/5 = (x - 10)/(y + 10)\n    equation2 = Eq(7*(y + 10), 5*(x - 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Total weight is the sum of the weights of bags A and B\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count_zeros = 0\n    while product % 10 == 0:\n        product //= 10\n        count_zeros += 1\n    return count_zeros\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n    \n    # Calculate the number of terms in the sequence\n    # Use the formula for the sum of an arithmetic series: total_players = n/2 * (first_line + last_line)\n    # Rearrange to solve for n: n = 2 * total_players / (first_line + last_line)\n    n = 2 * total_players / (first_line + last_line)\n    \n    # Calculate the common difference\n    # Use the formula for the nth term of an arithmetic sequence: last_line = first_line + (n - 1) * d\n    # Rearrange to solve for d: d = (last_line - first_line) / (n - 1)\n    d = (last_line - first_line) / (n - 1)\n    \n    return int(d)\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # masses in grams\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n\n    # setting up the equations based on the problem statement\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    ratio_girls = 6/11\n    ratio_boys = 1 - ratio_girls  # because boys_ratio + girls_ratio should be 1\n\n    boys = total_children * ratio_boys\n    return int(boys)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # The total number of times the dog barked at night over the past 1000 days\n    barks_per_week = 3\n    weeks = 1000 / 7\n    total_barks = barks_per_week * weeks\n\n    # The probability of the dog barking when a thief is around\n    prob_bark_given_theft = 0.9\n\n    # The probability of a theft occurring\n    thefts = 2\n    prob_theft = thefts / 1000\n\n    # The probability of the dog barking\n    prob_bark = total_barks / 1000\n\n    # Using Bayes' Theorem to calculate the probability of a theft given that the dog barks\n    # P(Theft | Bark) = (P(Bark | Theft) * P(Theft)) / P(Bark)\n    prob_theft_given_bark = (prob_bark_given_theft * prob_theft) / prob_bark\n\n    return prob_theft_given_bark\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_stickers, pupils = symbols('total_stickers pupils')\n\n    equation1 = Eq(total_stickers - 13*pupils, 190)\n    equation2 = Eq(total_stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (total_stickers, pupils))\n\n    return solutions[total_stickers]\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70*4) - (80*3) + (60*5)\n    return ans\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # The smallest difference will be when the two numbers are consecutive in order\n    # when the digits are arranged from 1 to 9 and from 9 to 1, respectively.\n    # To make the smallest difference, we place the smallest digit (1) in the highest\n    # place value (hundreds of millions place) for one number and the largest digit (9)\n    # in the highest place value for the other number. This pattern continues for all digits.\n    # Hence, the two consecutive numbers can be 123456789 and 123456790,\n    # and their difference will be 1.\n\n    return 1\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing initial difference in number of boys and girls\n    equation1 = Eq(girls - boys, 65)\n    \n    # Equation representing equal number of boys and girls after some left for recess\n    equation2 = Eq(boys - (2/5)*boys, girls - (3/7)*girls)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Replacing the solutions back into the equation to find the number of students left\n    students_left = solutions[boys] - (2/5)*solutions[boys] + solutions[girls] - (3/7)*solutions[girls]\n\n    return students_left\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    ans = 2412 // 9\n    return ans\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of bricks\n    x = symbols('x')\n\n    # Equation for the first trip: first_trip = 1/2 * x - 26\n    first_trip = 1/2 * x - 26\n    # Equation for the second trip: second_trip = 1/2 * (x - first_trip) + 11\n    second_trip = 1/2 * (x - first_trip) + 11\n    # Equation for the third trip: third_trip = 68 bricks\n    third_trip = 68\n    # Remaining bricks: remaining_bricks = 25\n\n    # Total bricks after all trips: x = first_trip + second_trip + third_trip + remaining_bricks\n    equation = Eq(first_trip + second_trip + third_trip + remaining_bricks, x)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Since we expect a single solution for the total number of bricks\n    return solutions[0]\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    arrangements = factorial(num_kids)\n\n    return arrangements\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, b be the number of boys\n    g, b = symbols('g b')\n    \n    # Total number of pupils in the school\n    total_pupils = 1690\n    \n    # Boys are 90 more than girls\n    equation1 = Eq(b, g + 90)\n    \n    # Girls who can swim (g_swim) to girls who cannot swim (g_no_swim) ratio is 31:49\n    g_swim = 31 / (31 + 49) * g\n    g_no_swim = g - g_swim\n    \n    # Boys who can swim (b_swim) are 120 less than boys who cannot swim (b_no_swim)\n    b_swim = symbols('b_swim')\n    equation2 = Eq((b - b_swim) - b_swim, 120)\n    \n    # Total number of pupils (boys + girls = total_pupils)\n    equation3 = Eq(b + g, total_pupils)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (g, b, b_swim))\n    \n    # Calculate the number of boys who cannot swim\n    b_no_swim = solutions[b] - solutions[b_swim]\n    \n    # Total number of pupils who cannot swim\n    total_no_swim = solutions[g_no_swim] + b_no_swim\n    \n    return int(total_no_swim)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let x be the number of years it will take for the sum of their ages to be 40\n    # Let g be Geoff's current age and s be his sister's current age\n    # We know that g + s = 22\n    # We are looking for the moment when (g + x) + (s + x) = 40\n    # Simplifying, we get 2x + g + s = 40\n    # Using the information that g + s = 22, we replace it in the equation\n    # We get 2x + 22 = 40\n    # Simplifying, we find x = (40 - 22) / 2\n    x = (40 - 22) / 2\n    return int(x)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):  # Pages 1 to 20\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        original_num = str(i)\n        new_num = original_num[-1] + original_num[1:3] + original_num[0]\n        if int(new_num) - i == 5877:\n            return i\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    \n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Assume the number of students along one side of the square is \"n\"\n    # Since Mike is the second in line from any side, the square must have at least 3 rows and columns (Mike cannot be at the corners)\n    # The smallest square with Mike as the 2nd in both directions would be a 3x3 square\n    # A perfect square array of desks implies n x n (where n is a whole number)\n\n    n = 3  # start with the smallest possible square where conditions are met\n    while True:\n        total_students = n * n\n        # Mike's position is 2nd in any order, this means Mike cannot be seated in the last row or column\n        # So Mike's position can be thought of as being in position (2,2), (2,n-1), (n-1,2), or (n-1,n-1)\n        # Which means he would be 1 away from the edge in a square of side length \"n\"\n        # thus his position number would be n+1 or n*n - (n+1) + 1 = n*n - n\n        # So, n*n - n + 1 or n*n - n or n+1 should give the same position\n        # So we can set up the equation n*n - n + 1 = n or n+1 or n^2 - n\n        if (total_students - n + 1 == n) or (total_students - n == n-1) or (total_students - n + 1 == n+1):\n            break  # if this condition is met, we found the size of the square\n        \n        n += 1  # increment n to check next possible square size\n\n    return total_students\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    ways = [0] * 11  # list of ways to get to each step, there are 11 positions from 0 to 10\n    ways[0] = 1  # there is 1 way to stay on the ground (step 0)\n\n    for i in range(2, 11):  # start from step 2 since Peter cannot reach step 1\n        if i >= 2:\n            ways[i] += ways[i-2]  # Peter can reach i-th step from (i-2)-th step\n        if i >= 3:\n            ways[i] += ways[i-3]  # Peter can reach i-th step from (i-3)-th step\n\n    return ways[10]  # return the number of ways to reach the 10th step\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number_1998 = '1998'\n    n = len(number_1998)\n    test_number = number_1998\n    \n    while int(test_number) % 33 != 0:\n        test_number += number_1998\n        n += len(number_1998)\n        \n    return n\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a_n = group_number\n    b_n = a_n ** 2\n    c_n = a_n * b_n\n\n    sum_of_numbers = a_n + b_n + c_n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_run = 1/4\n    total_distance = 3.75\n\n    num_runs = total_distance / distance_per_run\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3_030_030\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion is 10:x = 14:21\n    # Cross multiply to solve for x: 10*21 = 14*x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and number % 9 == 0 and str(number)[-1] == '0':\n            return number\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10\n\n    correct_answer = original_number + tens_to_add\n    johnnys_answer = 5839\n\n    is_correct = johnnys_answer == correct_answer\n    return is_correct, correct_answer\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # The total length of the rope in cm\n    lengths = [147, 32.5, 67]  # The lengths of three pieces in cm\n    fourth_length = total_length_cm - sum(lengths)  # Subtract the sum of known lengths from the total length\n    return fourth_length\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # To maximize the number of different positive integers that add up to 27,\n    # we should use the smallest positive integers starting from 1.\n    # Since we want different numbers, the next number should be 1 + the previous.\n    # 1 + 2 + 3 + ... + n <= 27 where n(n+1)/2 <= 27\n\n    n = 1  # Starting with the smallest positive integer\n    while (n * (n + 1) // 2) <= 27:\n        n += 1\n    # The last added number 'n' would make the sum exceed 27,\n    # so we subtract 1 to get the maximum number of positive integers.\n    return n - 1\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    leaves_required = (pieces_of_paper - 1) // interval\n\n    return leaves_required\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from itertools import product\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    max_pass_number = 0\n    max_probability = 0\n\n    for outcomes in product([True, False], repeat=3):\n        pass_count = sum(outcomes)\n        probability = 1\n        for i, passed in enumerate(outcomes):\n            probability *= probabilities[i] if passed else (1 - probabilities[i])\n        \n        if probability > max_probability:\n            max_probability = probability\n            max_pass_number = pass_count\n            \n    return max_pass_number\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    term1 = (101 + 234 + 567)\n    term2 = (234 + 567 + 89)\n    term3 = (101 + 234 + 567 + 89)\n    term4 = (234 + 567)\n\n    ans = (term1 * term2) - (term3 * term4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # The first term is 1\n    for denominator in range(2, 11):  # Loop over each denominator from 2 to 10\n        ans += (denominator - 1) * (1/denominator)  # Multiply the fraction by the count of its occurrence\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    # Let the number of watches be 8x and the number of caps be 11x.\n    # After selling 88 caps, the new number of caps is 11x - 88.\n    # According to the new ratio, we have 8x / (11x - 88) = 12 / 11.\n    # Solving for x will give us the initial multiplier for the watches.\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((8*x) / (11*x - 88), 12/11)\n    x_value = solve(equation, x)\n    \n    # The number of watches is 8 times x.\n    watches = 8 * x_value[0]\n    \n    return watches\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time taken to reach the sixth house\n    time_to_sixth_house = 30  # in minutes\n    \n    # Number of intervals between six houses is 5\n    # Because the distance between each two adjacent houses is equal and speed is constant,\n    # time is directly proportional to distance.\n    # Thus, time taken to cover one interval is total time divided by number of intervals.\n    time_per_interval = time_to_sixth_house / 5\n    \n    # For ten houses, there are nine intervals\n    # Therefore, time taken for ten houses is time per interval times number of intervals.\n    time_for_ten_houses = time_per_interval * 9\n    \n    return time_for_ten_houses\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for D in range(1, 10):  # A needs to be 1/4 of D, and D cannot be 0\n        for B in range(0, 10):  # B can be any digit\n            A = D // 4  # A is 1/4 of D\n            C = A - 1  # C is 1 less than A\n            if A != B and A != C and A != D and B != C and B != D and C != D and 0 <= C < 10:\n                ABCD = 1000 * A + 100 * B + 10 * C + D\n                DCBA = 1000 * D + 100 * C + 10 * B + A\n                if ABCD * 4 == DCBA:\n                    return ABCD\n    return None\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05\n    longer_piece_ratio = 2\n\n    shorter_piece_length_m = total_length_m / (1 + longer_piece_ratio)\n    longer_piece_length_cm = (longer_piece_ratio * shorter_piece_length_m) * 100\n\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    total_coins = 2015\n    # Since the maximum number of coins one can pick is 11,\n    # Jack should leave Ken with a multiple of 12 coins (11 + 1, since the last coin loses the game)\n    # So Jack should pick a number that would bring the initial total to the nearest smaller multiple of 12.\n    max_pick = 11\n\n    # Find the largest multiple of (max_pick+1) less than total_coins\n    remainder = total_coins % (max_pick + 1)\n    if remainder == 0:\n        # If already a multiple of 12, it's a losing position, so pick 1 (arbitrary, he will lose no matter what)\n        return 1\n    else:\n        # Otherwise, pick the remainder\n        return remainder\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, the y-intercept b must be 0.\n    # Hence the equation simplifies to y = mx.\n    # Now we just need to find the slope m using the point (4, 8).\n    \n    # Coordinates of the given point\n    x1, y1 = 0, 0 # origin\n    x2, y2 = 4, 8 # given point\n    \n    # The slope m is the change in y divided by the change in x.\n    m = (y2 - y1) / (x2 - x1)\n    \n    # Hence, the equation of the line is y = mx.\n    return f\"y = {m}x\"\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    return 1200031093\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # Iterate through all hours and minutes of a day\n    for hour in range(24):\n        for minute in range(60):\n            # Convert the hour and minute to strings and concatenate them\n            time = str(hour).zfill(2) + str(minute).zfill(2)\n            # Count how many times the digit '4' appears in the time string\n            if time.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def pattern(n):\n        return str(n).count('0') + str(n).count('6') + str(n).count('8')\n    \n    ans = pattern(2015)\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # Let's find the pattern first:\n    # âââââââââââââââ...\n    # Here, we see a repeating pattern of 5 balls: one black, followed by two white, one black, and then two white again.\n    # Count of white balls in one pattern: 2\n    \n    # Now we know there are 92 white balls, so we need to find how many full patterns there are:\n    patterns = 92 // 2  # Each pattern contains 2 white balls\n\n    # Total balls in those full patterns:\n    total_balls = patterns * 5  # Each pattern consists of 5 balls\n\n    return total_balls\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # sum of an arithmetic sequence: S_n = n/2 * (2*a_1 + (n - 1)*d)\n    # where S_n is the sum of the first n terms, a_1 is the first term, n is the number of terms, and d is the common difference\n    # youngest three dwarfs sum to 42, so S_3 = 3/2 * (2*a_1 + 2*d) = 42\n    # we are also given that the consecutive ages differ by 1, so d = 1\n    # also, there are seven dwarfs, so we're looking for a_7, which is a_1 + 6*d\n    # we solve the equation: 3/2 * (2*a_1 + 2*1) = 42 for a_1\n\n    from sympy import symbols, Eq, solve\n\n    a1, d = symbols('a1 d')\n    equation = Eq(3/2 * (2*a1 + 2*d), 42)\n    solutions = solve(equation, (a1, d))\n    a1_value = solutions[a1]\n\n    # calculate the age of the oldest dwarf\n    oldest_age = a1_value + 6*d\n    return oldest_age.subs(d, 1)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    # Initialize the count of pears\n    num_pears = 0\n    # Iteratively check each number until the conditions are satisfied\n    while True:\n        num_pears += 1\n        # Check if the current number satisfies both conditions\n        if num_pears % 6 == 2 and (num_pears + 3) % 7 == 0:\n            return num_pears\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    initial_length_cm = 10\n    sharpened_length_mm = 4\n    final_length_cm = initial_length_cm - sharpened_length_mm / 10\n\n    return final_length_cm\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Calculate time for each section of the race\n    time_first_section = 420 / 7   # time = distance / speed\n    time_middle_section = 620 / 5\n    time_last_section = (1200 - 420 - 620) / 8  # The remaining distance for the last section\n\n    # Sum up the time for all sections to find the total time\n    total_time = time_first_section + time_middle_section + time_last_section\n\n    return total_time\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let x be the total number of passengers at the start\n    # At the first stop, 2/5 passengers got off, so 3/5 passengers remain\n    # At the next stop, 1/3 of the remaining passengers get off, leaving 2/3 of the remaining passengers on the bus\n    # This leaves us with 22 passengers which is 2/3 of the remaining passengers after the first stop\n    \n    # To find x, we can set up the equation as follows:\n    # (3/5 * 2/3) * x = 22\n    \n    # Therefore, x = 22 / (3/5 * 2/3)\n    x = 22 / ((3/5) * (2/3))\n    # Return the total number of passengers at the start\n    return int(x)\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    current_total_tests = 4\n    current_total_score = current_average * current_total_tests\n    \n    # We need to find the smallest number of additional tests that allows Paul to reach the desired average\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_total_tests = current_total_tests + additional_tests\n        # To achieve the new average, total score needed is new_total_tests * desired_average\n        new_total_score_needed = new_total_tests * desired_average\n        # Score needed from the additional tests\n        additional_score_needed = new_total_score_needed - current_total_score\n        # If the score needed from additional tests is within the maximum possible score,\n        # then it's possible to reach the desired average\n        if additional_score_needed <= additional_tests * 100:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ten_notes, two_notes = symbols('ten_notes two_notes')\n    \n    # Total number of notes equation\n    equation1 = Eq(ten_notes + two_notes, 72)\n    \n    # Notes left after spending equation\n    equation2 = Eq(0.5 * ten_notes, 2 * (0.25 * two_notes))\n    \n    # Calculate the number of each note before spending\n    notes = solve((equation1, equation2), (ten_notes, two_notes))\n    \n    # Calculate the amount spent on $10 and $2 notes\n    spent_10_notes = notes[ten_notes] * 10 * 0.9\n    spent_2_notes = notes[two_notes] * 2 * 0.75\n    \n    # The total cost of the gift\n    cost = spent_10_notes + spent_2_notes\n    \n    return cost\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of stickers Sam and Peter had as s and p respectively.\n    s, p, j = symbols('s p j')\n\n    # We are given that Sam and Peter had stickers in the ratio 7:5\n    # So, we can write it as an equation\n    eq_ratio = Eq(s/p, 7/5)\n\n    # Both Sam and Peter gave 20% of their stickers to John.\n    # This means that Sam gave 0.20 * s stickers to John\n    # and Peter gave 0.20 * p stickers to John.\n\n    # As a result, John's stickers increased by 80%.\n    # Let's denote the original number of stickers John had as j.\n    # Since John's stickers increased by 80%, the increase is 0.80 * j\n    # Therefore, Sam gave 0.80 * j = 0.20 * s stickers to John\n    # and Peter gave 0.80 * j = 0.20 * p stickers to John.\n    # This leads to two more equations:\n    eq_sam_to_john = Eq(0.20*s, 0.80*j)\n    eq_peter_to_john = Eq(0.20*p, 0.80*j)\n\n    # Since Sam had 20 stickers more than John in the end,\n    # and Sam initially had s stickers and gave away 0.20 * s,\n    # Sam now has s - 0.20 * s stickers. So, we have:\n    # s - 0.20 * s = j + 20\n    # which simplifies to:\n    # 0.80 * s = j + 20\n    eq_sam_end = Eq(0.80*s, j + 20)\n\n    # Now we can solve the system of equations eq_ratio, eq_sam_to_john, eq_peter_to_john, eq_sam_end\n    solutions = solve((eq_ratio, eq_sam_to_john, eq_peter_to_john, eq_sam_end), (s, p, j))\n\n    # We need to find the initial number of stickers Peter had, which is p.\n    return solutions[p]\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are 3 different colors, taking one from each color will give us\n    # 3 markers, but no guarantee of 2 of the same color.\n    # Therefore, we must take at least one more to be sure of having 2 of the same color.\n    # Therefore, the fewest number we need to take is 4.\n    return 4\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_notes = 58\n    total_amount = 164\n\n    # Let the number of $5 notes be x.\n    # Then the number of $2 notes will be total_notes - x.\n    # The total amount is 5*x + 2*(total_notes - x).\n\n    for x in range(total_notes + 1):  # x goes from 0 to total_notes\n        if 5 * x + 2 * (total_notes - x) == total_amount:\n            return x\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Identify the common difference by subtracting two consecutive terms\n    common_difference = 120 - 105  # This is the nth term minus the (n-1)th term\n\n    # Calculate the first term of the sequence by going back from the 7th term\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Find the 100th term by using the formula for the nth term of an arithmetic sequence\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let a, b, c be the part of the pool filled by hoses A, B, and C in one hour respectively\n    a, b, c = symbols('a b c')\n\n    # equations based on the given information\n    # hose A and B together take 9 hours to fill the pool, so a+b should equal 1/9\n    equation1 = Eq(a + b, 1/9)\n    # hose A and C together take 12 hours to fill the pool, so a+c should equal 1/12\n    equation2 = Eq(a + c, 1/12)\n    # hose B and C together take 18 hours to fill the pool, so b+c should equal 1/18\n    equation3 = Eq(b + c, 1/18)\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # part of the pool filled by all three hoses in one hour\n    all_three = solutions[a] + solutions[b] + solutions[c]\n\n    # total time taken by all three hoses to fill the pool\n    time = 1 / all_three\n\n    return time\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Since we need to minimize the number of marbles and each box contains a multiple of 2 and at least 2 marbles,\n    # we can just assign the smallest even numbers to each box.\n    # We will have two boxes with the same number of marbles, so we'll use nine distinct smallest even numbers starting from 2\n    # and repeat the smallest one to make the total count 10 boxes.\n\n    # Smallest nine distinct even numbers starting from 2:\n    distinct_marbles = [2 * i for i in range(1, 10)]\n\n    # Two boxes have the same smallest even number, which is 2\n    repeated_marble = distinct_marbles[0]\n  \n    # The total number of marbles is the sum of distinct_marbles plus one more repeated_marble\n    total_marbles = sum(distinct_marbles) + repeated_marble\n\n    return total_marbles\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    return (14 - 8) / 3\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from fractions import Fraction\n\n    # Let's denote the cost of one muffin as m.\n    # The cost of one cupcake is thrice as much, so it's 3m.\n    # Cellina spent 5/9 of her money on 36 cupcakes and 32 muffins.\n    # So, the equation is 36 * 3m + 32 * m = total_money * 5/9.\n    \n    # She spent 1/6 of her money on additional cupcakes at the price of 3m each.\n    # Therefore, for these additional cupcakes: additional_cupcakes * 3m = total_money * 1/6.\n    \n    # The total amount she spent on all cupcakes is $187.50.\n    # So, we need to find the amount spent on muffins: 32 * m\n    \n    # From the first equation we can denote total_money as t:\n    # t * 5/9 = 36 * 3m + 32 * m \n    # From the second equation:\n    # t * 1/6 = (total_amount_spent_on_cupcakes - 36 * 3m) / 3\n\n    # t * 5/9 = 187.50\n    # t = 187.50 * (9/5)\n    total_money = 187.50 * (9/5)\n    \n    # The amount spent on additional cupcakes is total_money * 1/6\n    additional_cupcakes_cost = total_money * Fraction(1, 6)\n    \n    # The amount spent on the initial 36 cupcakes\n    initial_cupcakes_cost = 187.50 - additional_cupcakes_cost\n\n    # Find the price of one muffin (m)\n    m = initial_cupcakes_cost / (36 * 3)\n\n    # Finally, calculate the total cost of muffins\n    cost_of_muffins = 32 * m\n\n    return cost_of_muffins\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    numbers = [1,2,3,4,5,6,7,8,9,8,7,6,5,4]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    pigeons = 75\n    cages = 20\n\n    # Pigeonhole principle\n    min_pigeons_in_most_crowded_cage = (pigeons + cages - 1) // cages\n\n    return min_pigeons_in_most_crowded_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # After giving away 440 bottle caps, Justin has 5/9 of his collection left.\n    # This means that the 440 bottle caps are equivalent to 1 - 5/9 = 4/9 of his original collection.\n    \n    # Let's denote the original number of bottle caps as x.\n    # The equation can be set up as: (4/9) * x = 440\n    \n    # We can now solve for x by dividing both sides by (4/9).\n    x = 440 / (4/9)\n    \n    # Return the result as an integer since the number of bottle caps must be a whole number.\n    return int(x)\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n    \n    first_day = 8\n    second_day = total_length / 6 + 4\n    two_days = total_length * 5 / 12\n\n    equation = Eq(first_day + second_day, two_days)\n\n    length = solve(equation, total_length)\n\n    return length[0]\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    i = 1\n    while True:\n        # Multiply 35 by i to find multiples of 35\n        multiple = 35 * i\n        # Check if the multiple ends with '35'\n        if str(multiple).endswith('35'):\n            # Sum all digits of the multiple\n            if sum(int(digit) for digit in str(multiple)) == 35:\n                return multiple\n        i += 1\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Alexis had initially\n    x = symbols('x')\n\n    # According to the problem, Mary had 7/5 times the stickers Alexis had\n    mary_stickers = (7/5) * x\n\n    # Both gave 20% of their stickers to Charlotte\n    mary_gave = mary_stickers * 0.20\n    alexis_gave = x * 0.20\n\n    # Let y be the number of stickers Charlotte had initially\n    y = symbols('y')\n\n    # Charlotte's stickers increased by 80%, which means they increased to 180% of the original count\n    charlotte_new = y + mary_gave + alexis_gave\n    equation1 = Eq(charlotte_new, y * 1.80)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation2 = Eq(mary_stickers - mary_gave, charlotte_new + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the number of stickers Alexis had initially\n    return int(solutions[x])\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n    \n    # Number of wheat on the longer side (including corners)\n    wheat_on_length = (total_wheat // 2) \n    \n    # Number of wheat on the shorter side (excluding corners)\n    wheat_on_width = (total_wheat // 2) - 2 \n    \n    # Calculate the distance between wheat on the length side and width side\n    distance_length = length / (wheat_on_length - 1)\n    distance_width = width / (wheat_on_width - 1)\n\n    # The distance between every 2 wheat should be the same, so we return one of them\n    ans = distance_length if distance_length == distance_width else \"The field cannot be planted evenly\"\n    \n    return ans\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_nuts = 112\n    total_days = 8\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Let's assume all days are sunny. We will adjust according to the difference.\n    nuts_with_all_sunny = total_days * sunny_nuts\n    difference = nuts_with_all_sunny - total_nuts\n\n    # Calculate the number of rainy days based on the difference\n    # Each rainy day decreases the total nuts by the difference between sunny and rainy day nuts\n    rainy_days = difference // (sunny_nuts - rainy_nuts)\n\n    return rainy_days\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    both_correct = 7\n    first_correct_only = 10 - both_correct\n    second_correct_only = 15 - both_correct\n    one_question_correct = first_correct_only + second_correct_only\n    return one_question_correct\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament with 4 players, each round eliminates half the players.\n    # Therefore, we need to know how many times we can divide the number of players by 2\n    # until there's only 1 player (the winner) left.\n    players = 4\n    rounds = 0\n    while players > 1:\n        players /= 2\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    num_days = (end_date - start_date).days + 1\n\n    return num_days\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # Speed of the train in m/s\n    time = 5    # Time in seconds to pass a tree\n\n    # Distance = Speed * Time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(7):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    rachel, alice = symbols('rachel alice')\n\n    # Create equations based on the problem\n    equation1 = Eq(rachel - 10, alice + 10)  # If Rachel gives Alice 10 candies\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))  # After eating 8 candies, Rachel has 3 times as many as Alice\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Prices in pence\n    price_1 = 15\n    price_2 = 28\n    price_5 = 60\n\n    # Number of each type of pack to buy\n    x1, x2, x5 = symbols('x1 x2 x5', integer=True)\n\n    # Total number of bottles has to be 17\n    equation1 = Eq(x1 + 2 * x2 + 5 * x5, 17)\n    \n    # Cost in pence\n    total_cost = x1 * price_1 + x2 * price_2 + x5 * price_5\n\n    # Since x1, x2, and x5 can only take non-negative values, we use the nonlinsolve method\n    # to solve the equation and store results that satisfy all conditions\n    solutions = list(solve(equation1, (x1, x2, x5), dict=True))\n    \n    # Initialize the minimum cost with a large number\n    min_cost = float('inf')\n\n    # Go through the solutions to find the one with the minimal cost\n    for sol in solutions:\n        cost = total_cost.subs(sol)\n        min_cost = min(min_cost, cost)\n\n    # Convert to pounds (because 100 pence is 1 pound)\n    return min_cost / 100\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = [\n        \"(285+15)Ã·5-2\",\n        \"285+(15Ã·5)-2\",\n        \"(285+15)Ã·(5-2)\",\n        \"285+(15Ã·(5-2))\",\n        \"285+((15Ã·5)-2)\",\n        \"(285+(15Ã·5))-2\",\n        \"((285+15)Ã·5)-2\",\n        \"285+(15Ã·5-2)\",\n        \"(285+15Ã·5)-2\",\n        \"285+(15Ã·(5-2))\",\n        \"(285+15Ã·5-2)\",\n        \"285+15Ã·(5-2)\"\n    ]\n    \n    results = set()\n    for expr in expressions:\n        results.add(eval(expr.replace('Ã·', '/')))\n    \n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mushroom_first_hour, mushroom_second_hour = symbols('mushroom_first_hour mushroom_second_hour')\n\n    equation1 = Eq(mushroom_first_hour + mushroom_second_hour, 40)\n    equation2 = Eq(mushroom_first_hour + 26, mushroom_second_hour)\n\n    solutions = solve((equation1, equation2), (mushroom_first_hour, mushroom_second_hour))\n\n    return solutions[mushroom_second_hour]\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result_number = 71\n    initial_number = (result_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    ans = Fraction('0.49').limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    \n    total_spent = 59\n    max_brush_cost = 9  # Spend less than Â£10 on brushes implies she can spend at most Â£9\n    max_brushes = max_brush_cost // brush_price  # Calculate the max number of brushes she can buy\n    \n    # Now find the number of towels she can buy\n    for brushes in range(max_brushes + 1):\n        towels_cost = total_spent - (brushes * brush_price)\n        if towels_cost % towel_price == 0:\n            # Once we find a valid combination, we return the number of brushes\n            return brushes\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    # The first digit can be 1 or 8 (2 possibilities)\n    # The second digit can be any of the two remaining (2 possibilities)\n    # The last digit is the remaining number (1 possibility)\n    count = 2 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # You need to draw all the pink and grey marbles plus one to ensure getting a blue one\n    draw_to_ensure_blue = pink + grey + 1\n\n    return draw_to_ensure_blue\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    daily_increment = 2\n\n    # Sum of arithmetic sequence: n/2 * (first_term + last_term)\n    # total_bears = days/2 * (first_day_bears + fifth_day_bears)\n    # As each day she made 2 more teddy bears than the day before:\n    # first_day_bears + (first_day_bears + (days - 1) * daily_increment) = 2 * first_day_bears + (days - 1) * daily_increment\n    # So: total_bears = days/2 * (2 * first_day_bears + (days - 1) * daily_increment)\n\n    # Rearranging the formula to solve for first_day_bears:\n    # first_day_bears = (total_bears * 2 / days - (days - 1) * daily_increment) / 2\n\n    first_day_bears = (total_bears * 2 / days - (days - 1) * daily_increment) / 2\n\n    # Now find the number of bears made on the fifth (last) day:\n    fifth_day_bears = first_day_bears + (days - 1) * daily_increment\n\n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rick's and Morty's test scores\n    rick, morty = symbols('rick morty')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(rick - 70, morty + 70 + 20)  # If Rick gives Morty $70, he is still 20 points ahead\n    equation2 = Eq(rick, 9 * morty)  # Rick's score is 9 times Morty's score\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    return 262 + 8\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    num_days = 14  # Two weeks\n    total_miles = miles_per_day * num_days\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3 / 10\n    whole = 6 / 7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    result = 300 - sum(numbers_to_subtract)\n    return result\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Initial condition: Girls = Boys + 30\n    initial_condition = Eq(girls, boys + 30)\n    \n    # After leaving: (1 - 3/5) * Boys = (1 - 5/8) * Girls\n    boys_left = (1 - 3/5) * boys\n    girls_left = (1 - 5/8) * girls\n    remaining_condition = Eq(boys_left, girls_left)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, remaining_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)\n    equation2 = Eq(frogs_initial - (dragonflies_initial + 1), 11)\n    equation3 = Eq(dragonflies_initial + (frogs_initial - 1), 10)\n\n    solutions = solve((equation1, equation2, equation3), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    s = (amy_apples - john_apples) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):  # Check for numbers between 0 and 24\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "from itertools import permutations\n\ndef solution():\n    expressions = set()\n    \n    # Possible positions for the first pair of brackets\n    # No need to enclose single operations in brackets, hence \"(15)\" is skipped\n    first_bracket_ops = [\n        \"(285 + 15)\", \"(285 + 15) / 5\", \"(285 + 15 / 5)\", \"285 + (15 / 5)\", \"285 + 15 / (5 - 2)\"\n    ]\n    \n    # Possible positions for the second pair of brackets when applicable\n    # The len() check ensures that a division by zero doesn't occur\n    second_bracket_ops = [\n        \"({} - 2)\", \"({} + 15) / (5 - 2)\", \"(285 + {}) / 5\", \"285 + {} / (5 - 2)\", \"285 + ({} - 2)\"\n    ]\n    \n    # Calculate all possible single-bracket insertions\n    for op in first_bracket_ops:\n        expr = op + \" - 2\"  # Append the remaining part of the original expression\n        expr = expr if \"285 + 15 / (5 - 2)\" not in expr else \"285 + 15 / 3 - 2\"  # Add explicit 3 if necessary\n        expressions.add(eval(expr))\n\n    # Calculate all possible double-bracket permutations\n    for first_op in first_bracket_ops:\n        for second_op in second_bracket_ops:\n            # Skip redundant bracket around whole expression\n            if '(285 + 15) / 5' in second_op:\n                continue\n            expr = second_op.format(first_op)\n            if len(expr.split(\"/\")) > 2:  # Skip expressions leading to double division\n                continue\n            expressions.add(eval(expr))\n            \n    return len(expressions)\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Work rates for workers A, B, and C\n    a, b, c = symbols('a b c')\n\n    # Form equations based on the combined work rates\n    equation1 = Eq(1/a + 1/b, 1/3)\n    equation2 = Eq(1/b + 1/c, 1/4)\n    equation3 = Eq(1/a + 1/c, 1/8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c), dict=True)\n\n    # There might be more than one solution, but in reality all should be positive as negative work rates are nonsensical\n    for solution in solutions:\n        if all(value > 0 for value in solution.values()):\n            work_rate_a = solution[a]\n            work_rate_b = solution[b]\n            work_rate_c = solution[c]\n            break\n\n    # Calculate the combined work rate of all three workers\n    combined_work_rate = work_rate_a + work_rate_b + work_rate_c\n\n    # Calculate time taken by all three workers to complete the job\n    time_taken = 1 / combined_work_rate\n\n    return time_taken\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    total_coins = johnson + vicky\n    equation1 = Eq(total_coins, 48)\n    equation2 = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    candies, kids = symbols('candies kids')\n\n    # If every kid eats 18 candies, 12 more candies are needed.\n    equation1 = Eq(candies, kids * 18 - 12)\n\n    # If every kid eats 15 candies, the candies are just enough for 2 more kids.\n    equation2 = Eq(candies, (kids + 2) * 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    # Return the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Create the equation that represents the sugar concentration\n    # 45% of 2 kg sugar water + 15% of x kg sugar water = 25% of (2+x) kg of mixture\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n\n    # Solve for x\n    sugar_water_amount = solve(equation, x)\n\n    return sugar_water_amount[0]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_per_line = 3\n    girls_per_line = 2\n\n    # Calculate the number of lines with the given boys\n    lines = boys / boys_per_line\n\n    # Calculate the number of girls based on the number of lines\n    girls = lines * girls_per_line\n\n    return int(girls)\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Perform the inverse operations to find the original number\n    result_after_addition = 77 / 7\n    original_number = result_after_addition - 6\n    \n    return original_number\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(total_sum)[-5:]\n    ans = sum(map(int, last_five_digits))\n    return ans\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, tim = symbols('sam tim')\n    \n    initial_total = sam + tim\n    sam_ate = sam / 4\n    sam_after = sam - sam_ate\n    tim_after = tim + tim / 5\n    difference = tim_after - sam_after\n    \n    equations = (\n        Eq(initial_total, 1170),\n        Eq(difference, 663),\n        Eq(sam + tim, initial_total)\n    )\n    \n    solutions = solve(equations, (sam, tim))\n    \n    sam_cookies_ate = solutions[sam] / 4\n\n    return sam_cookies_ate\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6  # Calculate the amount of fruit picked per day\n    total_pick = daily_pick * 8  # Calculate the amount of fruit picked over 8 days\n    return total_pick\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry can complete the job in 18 hours\n    jerry_rate = 1 / 18\n    \n    # Together, Tom and Jerry can complete the job in 6 hours\n    together_rate = 1 / 6\n    \n    # Tom's rate of work is the difference between the combined rate and Jerry's rate\n    tom_rate = together_rate - jerry_rate\n    \n    # Tom's time to complete the job is the reciprocal of his work rate\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting\n    # Sally had 40 stamps initially and gave x to Ting\n    # Ting had 32 stamps initially and received x from Sally\n    \n    # After giving x stamps, Sally should have 40 - x stamps\n    # Ting will have 32 + x stamps\n    \n    # Their stamps are in the ratio 1:2 which means:\n    # (40 - x) / (32 + x) = 1 / 2\n    # Cross-multiply to get rid of the fraction:\n    # 2 * (40 - x) = 1 * (32 + x)\n    # Simplify the equation:\n    # 80 - 2x = 32 + x\n    # Solve for x:\n    # 80 - 32 = 2x + x\n    # 48 = 3x\n    # x = 48 / 3\n    # x = 16\n    \n    x = 48 // 3\n    \n    # Now, calculate the number of stamps Ting has in the end:\n    # Initial number of Ting's stamps + x\n    ting_stamps_end = 32 + x\n    \n    return ting_stamps_end\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    # Define the initial speed and the increased speed\n    initial_speed = 150  # in metres per minute\n    increased_speed = initial_speed + 50  # in metres per minute\n\n    # Define the distance walked\n    total_distance = 3700  # in metres\n\n    # Distance covered in the first 10 minutes\n    initial_distance = 10 * initial_speed\n\n    # Remaining distance to be covered at the increased speed\n    remaining_distance = total_distance - initial_distance\n\n    # Time taken to cover the remaining distance at the increased speed\n    remaining_time = remaining_distance / increased_speed\n\n    # Total time spent walking in the park in minutes\n    total_time = 10 + remaining_time\n\n    return total_time\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    money = 20\n    packet_cost = 4\n    sweets_per_packet = 8\n    free_sweets_condition = 2\n\n    # How many packets can be bought with $20\n    packets_bought = money // packet_cost\n\n    # Total sweets from the packets bought\n    total_sweets_from_packets = packets_bought * sweets_per_packet\n\n    # Extra sweets given for every two packets bought\n    free_sweets = (packets_bought // free_sweets_condition)\n\n    # Maximum number of sweets obtained\n    max_sweets = total_sweets_from_packets + free_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Total pieces of candy\n    total_candies = 88\n    # Number of children\n    children = 8\n\n    # If each child receives a different amount, we start by giving\n    # the minimum possible amount to each child and then determine\n    # the least possible amount for the child who gets the most\n    min_pieces = 1\n\n    # Sum of first n natural numbers is n(n+1)/2\n    # We subtract this sum for the first 7 children\n    # to find the least number of pieces for the 8th child\n    min_sum = sum(range(min_pieces, min_pieces + children - 1))\n\n    # The least possible number for the 8th child\n    least_for_last = total_candies - min_sum\n\n    return least_for_last\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')  # b for boys, g for girls\n\n    # Initial condition, 40% more boys than girls\n    equation1 = Eq(b, g + 0.4 * g)\n\n    # After 24 boys and girls leave, 50% more boys than girls remain\n    equation2 = Eq(b - 24, 1.5 * (g - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # We want the number of boys at the beginning\n    return solutions[b]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    # Calculate the factorial of 16\n    fact_16 = factorial(16)\n    \n    # Convert the factorial result to a string to count trailing zeroes\n    fact_16_str = str(fact_16)\n    \n    # Reverse the string to start counting zeroes from the end\n    reversed_fact_16_str = fact_16_str[::-1]\n    \n    # Initialize a count of zeroes\n    count_zeroes = 0\n    \n    # Iterate over each character and increment count if it's a zero\n    for char in reversed_fact_16_str:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            # Stop counting when a non-zero character is encountered\n            break\n\n    return count_zeroes\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    original_pink = 5\n    total_counters = 5 + 7 + 8  # Pink + Purple + Orange\n    \n    # The probability of choosing a pink counter is pink counters / total counters.\n    # We want to find the number of pink counters needed to double this probability.\n    # Let x be the number of extra pink counters needed to double the probability.\n    # The new probability will be (original_pink + x) / (total_counters + x)\n    # We set up the equation: (original_pink + x) / (total_counters + x) = 2 * (original_pink / total_counters)\n    # We solve for x.\n\n    # 2 * (original_pink / total_counters) = (original_pink + x) / (total_counters + x)\n    # Cross multiply to clear the fractions.\n    # 2 * original_pink * (total_counters + x) = original_pink * total_counters + x * total_counters\n    # Simplify the equation\n    # 2 * original_pink * total_counters + 2 * original_pink * x = original_pink * total_counters + x * total_counters\n    # Move all terms involving x to the right side.\n    # x * total_counters - 2 * original_pink * x = original_pink * total_counters - 2 * original_pink * total_counters\n    # Factor out x on the left side.\n    # x * (total_counters - 2 * original_pink) = original_pink * total_counters - 2 * original_pink * total_counters\n    \n    # Solve for x.\n    x = (original_pink * total_counters - 2 * original_pink * total_counters) / (2 * original_pink - total_counters)\n    \n    return int(x)\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    equation1 = Eq(cupcakes, muffins)\n    equation2 = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    total = solutions[cupcakes] + solutions[muffins]\n\n    return total\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # To guarantee 2 pairs of the same color, Cindy must take out socks\n    # to cover the worst case scenario where she picks socks in an order\n    # that doesn't immediately result in a pair.\n    # Worst case scenario: \n    # Cindy picks 1 black, then 1 grey, then 1 red, now she has one of each color.\n    # If she picks another of any color now, she has one pair.\n    # To ensure another pair, she must then pick 3 more socks, one of each remaining color,\n    # after which the next sock must form a pair with one of the pairs she already has.\n    \n    # 3 socks of different colors to get the first pair, then 3 more to increase each\n    # color count to 2, and finally 1 more to guarantee a second pair.\n    socks_needed = 3 + 3 + 1 # = 7\n\n    return socks_needed\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The sequence of congruences x â¡ 1 (mod 2), x â¡ 1 (mod 3), x â¡ 1 (mod 4), x â¡ 1 (mod 6)\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    result = solve_congruence(*congruences)\n\n    ans = None\n    # The solution should be between 200 and 300\n    if 200 <= result[0] < 300:\n        ans = result[0]\n    else:\n        # Use the modulo result[1] to find the solution in the range 200 to 300\n        while result[0] < 200:\n            result = (result[0] + result[1], result[1])\n        ans = result[0]\n\n    return ans\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angeles = 12.25  # Time in hours\n    additional_time = 90 / 60  # 90 minutes to hours\n    los_angeles_to_shanghai = shanghai_to_los_angeles + additional_time\n\n    round_trip_time = shanghai_to_los_angeles + los_angeles_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Helen's daily pocket money as 'helen' and George's daily pocket money as 'george'.\n    helen, george = symbols('helen george')\n    \n    # George receives $3 more pocket money than Helen every day.\n    equation1 = Eq(george, helen + 3)\n    \n    # Each of them spends $5 a day and saves the rest. So their savings are pocket money - $5 per day.\n    # When Helen has saved $60, let's find out how many days have passed.\n    # Helen's savings: (helen - 5) * days = $60\n    # George's savings: (george - 5) * days = Helen's savings + $90\n    \n    # Let's transform the above into equation form:\n    days = symbols('days')\n    equation2 = Eq((helen - 5) * days, 60)\n    equation3 = Eq((george - 5) * days, (helen - 5) * days + 90)\n\n    # Now we'll solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (helen, george, days))\n    \n    return solutions[helen]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    forward_sum = sum(range(1, 31))\n    backward_sum = sum(range(1, 30))\n    ans = forward_sum + backward_sum\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    # Original ratio equation\n    original_ratio = Eq(eddi / wiya, 3 / 2)\n    # New ratio equation after Eddi receives $4 from Lisa\n    new_ratio = Eq((eddi + 4) / wiya, 8 / 5)\n\n    # Solve the system of equations for eddi and wiya\n    solutions = solve((original_ratio, new_ratio), (eddi, wiya))\n    \n    # Wiya's amount of money\n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n\n    # Relation between 9th and 15th term\n    equation1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # Sum of 20th and 12th term\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations to find a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the 32nd term using the found first term and common difference\n    a32 = solutions[a] + 31*solutions[d]\n\n    return a32\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance driven in the first 2 hours\n    distance_first_part = 2 * 40  # speed * time\n\n    # Total distance for the remaining part\n    distance_remaining = 280\n\n    # Time taken for the remaining distance\n    time_remaining = distance_remaining / 70  # distance / speed\n\n    # Total distance driven\n    total_distance = distance_first_part + distance_remaining\n\n    # Total time taken\n    total_time = 2 + time_remaining\n\n    # Average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_numbers = 0\n    # Count numbers with exactly two sevens\n    for pos in range(3):\n        for digit in range(10):\n            if digit != 7:\n                if pos == 0:  # The first digit cannot be zero or seven\n                    total_numbers += 0 if digit == 0 else 1\n                else:  # The non-first digit can be anything but seven\n                    total_numbers += 1\n    # Count numbers with exactly three sevens\n    total_numbers += 1  # 777 is the only number with three sevens\n\n    return total_numbers\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value = (number // 10) % 10\n    \n    return place_value * 10\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    for three_page_letters in range(12):\n        four_page_letters = 11 - three_page_letters\n        total_pages = three_page_letters * 3 + four_page_letters * 4\n        if total_pages == 38:\n            return three_page_letters\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    days_in_packet_type1 = 25\n    days_in_packet_type2 = 20\n\n    lcm_days = lcm(days_in_packet_type1, days_in_packet_type2)\n\n    next_start_day = lcm_days\n    return next_start_day\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Calculate ways to arrange singing performances = factorial(6)\n    sing_perms = factorial(6)\n    \n    # There are 5 places between singing performances, and we need to arrange 4 dances in these places\n    # After each singing performance there's 1 space so 1 dance performance can be placed there\n    # This leaves 1 dance performance and 6 singing performances to arrange in 5 places\n    # The remaining dance performance can be in any of the 5 spaces, so there are 5 possibilities\n    dance_options = 5\n\n    # Calculate total arrangements\n    total_arrangements = sing_perms * dance_options\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number\n    x = symbols('x')\n\n    # Mistaken calculation\n    mistaken = Eq(x / 4 - 25, 2021)\n\n    # Solve for the original number\n    original_number = solve(mistaken, x)[0]\n\n    # Correct calculation\n    correct_answer = 4 * original_number + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors = [75, 56, 12, 105]\n    twos = 0\n    fives = 0\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            factor //= 2\n            twos += 1\n        while factor % 5 == 0:\n            factor //= 5\n            fives += 1\n    \n    ans = min(twos, fives)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    chloe_to_donna_ratio = 4\n    difference = 816\n    donna_books = difference / (chloe_to_donna_ratio - 1)\n\n    return int(donna_books)\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    from itertools import permutations\n    \n    # Create a list with all possible 4-digit numbers\n    all_numbers = [''.join(p) for p in permutations('0123456789', 4)]\n    \n    # Filter based on the teacher's feedback\n    possible_answers = [num for num in all_numbers if num[0] != '0']  # Exclude numbers starting with 0\n    possible_answers = [num for num in possible_answers if (num[0] in '8765') + (num[1] in '8765') + (num[2] in '8765') + (num[3] in '8765') == 2]  # Two digits in 8765\n    possible_answers = [num for num in possible_answers if not ((num[0] == '8') or (num[1] == '7') or (num[2] == '6') or (num[3] == '5'))]  # Not in the correct positions\n    possible_answers = [num for num in possible_answers if (num[0] in '1023') + (num[1] in '1023') + (num[2] in '1023') + (num[3] in '1023') == 2]  # Two digits in 1023\n    possible_answers = [num for num in possible_answers if not ((num[0] == '1') or (num[1] == '0') or (num[2] == '2') or (num[3] == '3'))]  # Not in the correct positions\n    possible_answers = [num for num in possible_answers if num[0] == '8' and num[2] == '6']  # 8 and 6 are in the correct positions\n    possible_answers = [num for num in possible_answers if not any(d in num for d in '5430')]  # None of the digits in 5430\n\n    # The answer should be the only remaining option\n    return possible_answers[0] if possible_answers else None\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # Given A = a_0 + a_1 + a_2 + a_3 + a_4 + a_5 + a_6 = 1\n    # and A Î a_i for each i gives a certain fraction\n    # A Î a_i = A - a_i = given fraction\n    # From the definition of A Î a_i, we can find each a_i by subtracting the fraction from 1\n\n    a_1 = 1 - 1/2\n    a_2 = 1 - 2/3\n    a_3 = 1 - 7/8\n    a_4 = 1 - 29/30\n    a_5 = 1 - 139/144\n    a_6 = 1 - 839/840\n\n    # Now calculate a_0 using the sum of all other a_i being equal to 1\n    a_0 = 1 - (a_1 + a_2 + a_3 + a_4 + a_5 + a_6)\n\n    # Reduce a_0 to its simplest form\n    from fractions import Fraction\n    a_0_fraction = Fraction(a_0).limit_denominator()\n\n    # Find m and n from the fraction representation\n    m = a_0_fraction.numerator\n    n = a_0_fraction.denominator\n\n    # Return the result m + n\n    return m + n\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Transform the given equation to solve for the \"tildes\" part\n    # Original equation: (tildes + 4) / 8 = 3\n    # Multiply both sides by 8 to get rid of the denominator\n    # (tildes + 4) = 3 * 8\n    # Subtract 4 from both sides to isolate the \"tildes\"\n    tildes = (3 * 8) - 4\n    # Now \"tildes\" represents the number that replaces the tildes in the original equation\n\n    return tildes\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(1, 194))  # Generating prime numbers less than 193\n    for a in prime_numbers:\n        for b in prime_numbers:\n            if 3 * a + 11 * b == 193:\n                return a + b\n    return None\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Loop through possible values of a and b\n    for a in range(1, 10): # 'a' cannot be 0 as it is the tens place\n        for b in range(10): # 'b' can be in range [0,9]\n            # Check if the condition is met\n            if (10 * a + b) * 7 == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999\n    exponent = 99\n\n    # Since we only need the ones digit, we can reduce the base mod 10\n    reduced_base = base % 10\n    \n    # Since the reduced base is 9, the ones digit will cycle every 10 powers:\n    # 9^1 -> 9, 9^2 -> 1, and then it repeats. Hence:\n    # 9^(2k+1) -> 9, 9^(2k) -> 1 for any integer k\n    # Thus, we need to check if the exponent is odd or even.\n    \n    if exponent % 2 == 0:\n        ans = 1\n    else:\n        ans = 9\n\n    return ans\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (1, 4),  # x â¡ 1 (mod 4)\n        (2, 5),  # x â¡ 2 (mod 5)\n        (4, 7)   # x â¡ 4 (mod 7)\n    ]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of children, adults, boys, and girls\n    children, adults, boys, girls = symbols('children adults boys girls')\n    \n    # System of equations based on the problem statement\n    equation1 = Eq(adults, 3 * children)  # adults = 3 * children\n    equation2 = Eq(boys, 2 * girls)       # boys = 2 * girls\n    equation3 = Eq(adults, 176 + girls)   # adults = 176 + girls\n    \n    # Since boys and girls make up all children, we also know boys + girls = children\n    equation4 = Eq(boys + girls, children)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (children, adults, boys, girls))\n\n    # Calculate the total number of people at the concert\n    total_people = solutions[adults] + solutions[children]\n    \n    return total_people\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    num1 = 12\n    num2 = 15\n    num3 = 60\n\n    gcd_num1_num2 = gcd(num1, num2)\n    ans = gcd(gcd_num1_num2, num3)\n\n    return ans\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Total number of people at the funfair\n    total_people = symbols('total_people')\n    \n    # Fraction of the people that were children, women, and the rest men\n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - (children + women)\n    \n    # Equation that represents that there were 20 more children than men\n    equation = Eq(children, men + 20)\n    \n    # Solve the equation for the total number of people\n    solution = solve(equation, total_people)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate the houses built per worker per day\n    houses_per_worker_per_day = houses_built_initial / (workers_initial * days_initial)\n\n    # Calculate the total houses that can be built by 9 workers in 2 days\n    houses_final = houses_per_worker_per_day * workers_final * days_final\n\n    return int(houses_final)\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    balls_cost, money = symbols('balls_cost money')\n\n    equation1 = Eq(money - 5 * balls_cost, 15)\n    equation2 = Eq(money - 8 * balls_cost, -12)\n\n    solutions = solve((equation1, equation2), (balls_cost, money))\n\n    return solutions[balls_cost]\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    \n    # After the first bounce, it rebounds to 1/3 of the initial height\n    # Let \"initial_height\" be the height from which the ball is initially dropped\n    # Then, after the first bounce, the height will be initial_height/3\n    # After the second bounce, the height will be (initial_height/3) / 3 = initial_height/9\n    # According to the problem, initial_height/9 = 9 cm\n\n    initial_height = 9 * 9  # Multiply both sides by 9 to isolate initial_height\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # x â¡ 2 (mod 3)\n    # x â¡ 4 (mod 7)\n    # x â¡ 7 (mod 8)\n    \n    congruences = [(2, 3), (4, 7), (7, 8)]\n\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the dogs\n    bob, rex, fido = symbols('bob rex fido', integer=True)\n\n    # Set up the equations based on the problem statement\n    eq1 = Eq(fido, bob - 10)\n    eq2 = Eq(bob + rex + fido, 28)\n    # We want to find the smallest product, so we'll start from 1 and go up\n    min_product = None\n    \n    # Test different ages for Bob and calculate ages for Rex and Fido\n    for age_bob in range(11, 28):\n        age_fido = age_bob - 10\n        age_rex = 28 - age_bob - age_fido\n        # Check for the constraint that all dogs must have different ages\n        if age_bob != age_rex and age_bob != age_fido and age_rex != age_fido and age_rex > 0:\n            current_product = age_bob * age_rex * age_fido\n            if min_product is None or current_product < min_product:\n                min_product = current_product\n    \n    return min_product\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(1, 30) + Fraction(1, 6)) / Fraction(2, 25) + (2 - Fraction(2, 3)) / Fraction(8, 3)\n    return result\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    from math import gcd\n    \n    # We look for the largest possible sum, which means we should start from the largest 3-digit numbers\n    # that satisfy the condition of having two equal digits and being divisible by 75. Numbers divisible\n    # by 75 have to end with 25 or 50 so the last two digits are already fixed.\n\n    largest_sum = 0  # initialize largest sum\n\n    # Iterate over the range of possible hundreds-digits\n    for i in range(9, 0, -1):\n        # Check combinations with two equal digits\n        for d1 in range(9, -1, -1):\n            A = int(f\"{i}{d1}{d1}\")\n            if A % 75 != 0:\n                continue\n\n            # Check for the other number with two digits that could be the same as in A\n            for j in range(i, -1, -1):\n                for d2 in range(9, -1, -1):\n                    B = int(f\"{j}{d2}{d2}\")\n                    if B % 75 != 0 or A == B:\n                        continue\n                    \n                    # Since the question stipulates they must have a gcd of 75, we check for that\n                    if gcd(A, B) == 75:\n                        # Update the largest sum if we find a larger one\n                        largest_sum = max(largest_sum, A + B)\n    \n    return largest_sum\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for Nancy to finish the job by herself\n    # Let y be the time it takes for Lee to finish the job by herself\n    \n    x, y = symbols('x y')\n    \n    # Working together, they finish the job in 10 hours\n    equation1 = Eq((1/x + 1/y), 1/10)\n    \n    # Lee works for 6 hours and Nancy for 20 hours\n    equation2 = Eq(6/y + 20/x, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # We want the solution for x, time taken by Nancy to finish the job by herself\n    return solutions[x]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Simplify the complex fraction from bottom to top\n    # Finding the common denominator for 2007*2008, 2008*2009, and 2009\n    common_denominator = 2007 * 2008 * 2009\n\n    # Fraction addition with a common denominator\n    # (2009 + 2007 + 2008) / common_denominator\n    numerator_sum = 2009 + 2007 + 2008\n\n    # Simplifying the complex fraction by taking the reciprocal of the sum\n    ans = common_denominator / numerator_sum\n\n    return ans\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_average = 90\n    \n    # Let x be the average score for class A\n    # Then, x + 7 is the average score for class B\n    # Using the formula total_average = (sum_of_scores_A + sum_of_scores_B) / total_students\n    # We have 90 = (40x + 30(x + 7)) / 70\n\n    # Solving for x\n    x = (total_average * total_students - 30 * 7) / (40 + 30)\n    \n    # Now find the average score for class B\n    class_b_average = x + 7\n\n    return class_b_average\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    # Xuanxuan's mass\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    capacity = 7\n\n    boats_needed = (students + capacity - 1) // capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    b = 250249\n    c = 250251\n    ans = (a**2) - (b*c)\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    total_ways = 0\n    \n    # iterate over the possible number of ten-pence coins Jeremy can use\n    for ten_pence in range(6):\n        # iterate over the possible number of twenty-pence coins Jeremy can use\n        for twenty_pence in range(4):\n            # calculate the remaining amount to be paid after using ten-pence and twenty-pence coins\n            remaining_amount = 70 - (ten_pence * 10 + twenty_pence * 20)\n            \n            # check if the remaining amount can be paid using a single fifty-pence coin\n            if remaining_amount == 50:\n                total_ways += 1\n    \n    return total_ways\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, caris = symbols('aaron becky caris')\n\n    equation1 = Eq(aaron - becky, becky - caris)\n    equation2 = Eq(aaron + becky + caris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, caris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    # Initialize the count of digits\n    digits_count = 0\n    \n    # Count the digits from 1 to 200\n    for number in range(1, 201):\n        digits_count += len(str(number))\n\n    return digits_count\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for j in range(10):\n        if int(f\"125{j}6\") % 4 == 0:\n            return j\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n    \n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    equation = Eq((original_number + 7) * 6, 66)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of a chair\n    c = symbols('c')\n\n    # The cost of a table is Â£25 more than the cost of a chair\n    table_cost = c + 25\n\n    # The total cost of 5 tables and 12 chairs is Â£720\n    total_cost_equation = Eq(5 * table_cost + 12 * c, 720)\n\n    # Solve the equation to find the cost of a chair\n    chair_cost = solve(total_cost_equation, c)[0]\n\n    # Calculate the cost of a table based on the chair cost\n    table_cost_value = chair_cost + 25\n\n    return table_cost_value\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n    \n    # Given aâb = 5a - 2b, solving for b when aâb = result\n    # result = 5 * a - 2 * b\n    # 5 * a - result = 2 * b\n    # b = (5 * a - result) / 2\n\n    x = (5 * a - result) / 2\n    return x\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    squares_sum = lambda n: (n * (n + 1) * (2*n + 1)) // 6\n    sum_of_numbers = lambda n: n * (n + 1) // 2\n\n    ans = sum(i * (i + 1)**2 for i in range(24))\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    current_age = 24 - 6\n    age_before = current_age - 9\n    return age_before\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    # Since the math question is just the number '11', there isn't any actual problem provided to solve.\n    # Assuming this is asking to simply return the number '11':\n    return 11\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    packet1 = 25\n    packet2 = 20\n\n    days_to_next_start = lcm(packet1, packet2)\n\n    return days_to_next_start\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time_minutes = 360\n    up_down_ratio = 5 / 4\n    speed_difference = 10  # m/min\n\n    # Time spent going up the hill\n    time_up = (up_down_ratio / (1 + up_down_ratio)) * total_time_minutes\n\n    # Time spent going down the hill\n    time_down = total_time_minutes - time_up\n\n    # Speed going down the hill\n    # Since the ratio of times is 5:4 and the speed difference is 10 m/min,\n    # we can set up the following equation:\n    # (speed_down - 10) / speed_down = 5 / 9 (from 5:4, total parts = 5+4 = 9)\n    # speed_down * 4 = (speed_down - 10) * 5\n    # 4 * speed_down = 5 * speed_down - 50\n    # speed_down = 50 m/min\n\n    speed_down = 50\n\n    # Speed going up the hill is 10 m/min slower\n    speed_up = speed_down - speed_difference\n\n    # Distance traveled\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n\n    # Total distance traveled\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent = num_friends * (num_friends - 1)\n    return cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    used_per_day_w = 9\n    used_per_day_p = 9\n\n    for days in range(1, max(watermelons, pineapples)):\n        remaining_w = watermelons - days * used_per_day_w\n        remaining_p = pineapples - days * used_per_day_p\n        if remaining_p == 3 * remaining_w:\n            return days\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_week\n\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time_to_meet = 5\n\n    distance_to_meet = (eddie_speed + brother_speed) * time_to_meet\n\n    return distance_to_meet\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Tom's and Jerry's current age\n    tom, jerry = symbols('tom jerry')\n\n    # Equation 1: Tom will be twice his age in 4 years\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # Equation 2: Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tom, jerry))\n\n    # Get Tom's and Jerry's current age from the solutions\n    tom_current_age = solutions[tom]\n    jerry_current_age = solutions[jerry]\n\n    # Equation 3: Find in how many years will Jerry's age be doubled\n    # Let x be the number of years from now when Jerry's age is doubled\n    x = symbols('x')\n    equation3 = Eq(jerry + x, 2 * jerry)\n\n    # Solve equation 3 for x\n    years = solve(equation3, x)\n\n    return years[0]\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n    \n    discounted_price = original_price * (1 - discount)\n    final_price = discounted_price * (1 + increase)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    s = 0\n    for n in range(3, 52, 2):\n        s += (n**2 - (n-1)**2)\n    return s\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    def is_family_prime(family_ages):\n        return all(isprime(age) for age in family_ages)\n\n    # Current family ages\n    current_ages = {'me': 7, 'brother': 5, 'mother': 29, 'father': 31}\n    year = 2017\n    \n    while True:\n        # Increase year and each family member's age\n        year += 1\n        for member in current_ages:\n            current_ages[member] += 1\n        \n        if is_family_prime(current_ages.values()):\n            return current_ages['father']\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # Number of intervals between lamp posts is one less than the number of flowers divisions\n    intervals = total_flowers // flowers_between_posts + 1\n\n    # Distance between every 2 lamp posts\n    distance_between_posts = 50 / intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    return 1 + circles*(circles + 1)//2 + circles*(circles - 1)*(circles - 2)//6\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_each_friend = 15\n    number_of_friends = 8\n\n    books_given_away = books_given_each_friend * number_of_friends\n    books_left = total_books - books_given_away\n\n    return books_left\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    \n    # Sum of Lora's age and her mother's age is 44\n    equation1 = Eq(lora + mother, 44)\n    \n    # Mother's age is 3 times Lora's age\n    equation2 = Eq(mother, 3 * lora)\n    \n    # Solving the system of equations\n    ages = solve((equation1, equation2), (lora, mother))\n    \n    # Lora's age is the first element of the solution tuple\n    return ages[lora]\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = int(\"90009\")\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_males = 3/5\n    males = total_adults * fraction_males\n    return males\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Finding the unit digit of base number raised to a power can be done via cycle patterns\n    # In this case, we find the cycle pattern of the unit digit of powers of 4\n    \n    cycle = [4**i % 10 for i in range(1, 5)]  # Calculate the unit digits for first four powers of 4\n    # The cycle for the unit digits of powers of 4 is 4, 6, 4, 6...\n    # Since the pattern repeats every 2, we just need to find the remainder of the power divided by 2\n    \n    power_remainder = 2008 % 2\n    \n    # Based on the cycle pattern, if the remainder is 0 the unit digit is 6, if it's 1 the unit digit is 4.\n    unit_digit = cycle[power_remainder]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_audio = 6\n    paths_book = 4\n    paths_chapel = 5\n\n    paths_audio_school = 2\n    paths_book_school = 2\n    paths_chapel_school = 3\n\n    total_paths = (paths_audio * paths_audio_school) + \\\n                  (paths_book * paths_book_school) + \\\n                  (paths_chapel * paths_chapel_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let's assume Adam's weight is a, Ben's weight is b, and Carl's weight is c.\n\n    # From the given information, we can form the following equations:\n    # a + b = 102 (Adam and Ben together)\n    # b + c = 97 (Ben and Carl together)\n    # a + c = 93 (Adam and Carl together)\n\n    # We want to find the sum of their weights: a + b + c\n\n    # Adding all the equations together, we get:\n    # 2(a + b + c) = 102 + 97 + 93\n    # Dividing both sides by 2, we get the total weight:\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins / 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1.00 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_hour = 12  # 12 p.m.\n    arrival_minute = 40  # 40 minutes past noon\n    duration_hours = 2  # stays for 2 hours\n    duration_minutes = 40  # stays for 40 minutes\n\n    # Calculate the total minutes after adding the duration\n    total_minutes = (arrival_hour * 60 + arrival_minute) + (duration_hours * 60 + duration_minutes)\n    \n    # Convert total minutes back to hours and minutes\n    leave_hour = total_minutes // 60\n    leave_minute = total_minutes % 60\n\n    # Adjust for 24-hour clock if necessary\n    if leave_hour >= 24:\n        leave_hour -= 24\n\n    # Adjust for the next day if necessary\n    if leave_hour >= 12 and arrival_hour < 12:\n        leave_hour -= 12\n    \n    # The answer format should be in the form of (hour, minute) 24-hour format\n    ans = (leave_hour, leave_minute)\n\n    return ans\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    total_money = 705\n    cost_calculator = 34\n    cost_racket = 63\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson - cost_calculator, clive - cost_racket)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_lamp_posts = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between_lamp_posts\n\n    return road_length\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    aiden_arrival = (9 * 60) + 22  # Convert 9:22 AM to total minutes past midnight\n    bus_departure = (9 * 60) + 15  # Time when the 9:15 AM bus leaves in minutes\n    \n    # If Aiden arrives after the bus has already left, we need to calculate the wait time\n    if aiden_arrival >= bus_departure:\n        # To find the next bus, we need to find how many intervals have passed since 9:15\n        intervals_since_last_bus = (aiden_arrival - bus_departure) // bus_interval\n        # Then we find the time the next bus leaves\n        next_bus_time = bus_departure + ((intervals_since_last_bus + 1) * bus_interval)\n        # The waiting time is the difference between Aiden's arrival and the next bus time\n        wait_time = next_bus_time - aiden_arrival\n    # If Aiden arrives before the bus leaves, he doesn't need to wait\n    else:\n        wait_time = 0\n\n    return wait_time\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    # Variables representing the number of ice-cream sticks\n    belle_initial = 49\n    belle_after = belle_initial + 11\n\n    # Eddie has the same number after giving 11 sticks to Belle\n    eddie_initial = belle_after\n\n    return eddie_initial\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n    exeter_temp = glasgow_temp + warmer_by\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    equal_volume = total_tea // 2\n    tea_to_give = equal_volume - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')  # number of coins John and Kofi have\n\n    # Initial condition: they have 25 coins in total\n    equation1 = Eq(john + kofi, 25)\n    \n    # After John gives Kofi four coins\n    equation2 = Eq(kofi - john, -7)  # kofi + 4 = (john - 4) + 3\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return 18 + 2 + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            total_sum += i\n        else:\n            total_sum -= i\n    return total_sum\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for normal and special rabbits\n    normal, special = symbols('normal special')\n    \n    # One normal rabbit has 1 head and 4 feet\n    # One special rabbit has 3 heads and 2 feet\n    # Altogether there are 53 heads and 102 feet\n    eq1 = Eq(normal + 3 * special, 53)\n    eq2 = Eq(4 * normal + 2 * special, 102)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (normal, special))\n    \n    return solutions[normal], solutions[special]\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    getcontext().prec = 502  # Set precision to 502 to ensure we get 500 digits after the decimal\n    decimal_part = str(Decimal(1) / Decimal(70))[2:]  # Skip '0.'\n\n    return int(decimal_part[499])  # Get the 500th digit\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Number of sweets Neelesh has after eating one.\n    sweets_neelesh_after_eating = 4\n    \n    # Number of sweets Neelesh had before eating one.\n    sweets_neelesh_before_eating = sweets_neelesh_after_eating + 1\n    \n    # Total number of sweets (since Neelesh had 1/6 before eating one).\n    total_sweets = sweets_neelesh_before_eating * 6\n\n    # Number of sweets Ayesha has left (5/6 of the total number of sweets).\n    sweets_ayesha_left = total_sweets - sweets_neelesh_before_eating\n\n    return sweets_ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    # Equation for 8 copper balls and 9 iron balls\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    # Equation for 6 copper balls and 3 iron balls\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    # Get the weight of 1 copper ball\n    return solutions[copper]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles in each box\n    box_b, box_c = symbols('box_b box_c')\n\n    # Given that there are 80 marbles in Box A, set the equation for the total\n    equation_total = Eq(80 + box_b + box_c, 560)\n\n    # Given that Box B has twice as many marbles as Box C\n    equation_double = Eq(box_b, 2 * box_c)\n\n    # Solve the equations\n    solutions = solve((equation_total, equation_double), (box_b, box_c))\n\n    return solutions[box_c]\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x = number of gummy bears, y = number of lollipops before adding 120 pieces\n    x, y = symbols('x y')\n\n    # Before adding 120 pieces to each pile\n    equation1 = Eq(x/y, 5/7)\n\n    # After adding 120 pieces to each pile\n    equation2 = Eq((x+120)/(y+120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total pieces of candy now after adding 120 pieces to each pile\n    total_candy_now = solutions[x] + 120 + solutions[y] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_of_numbers = sum(numbers) * 3\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term_position = 10\n    last_term = 31\n    difference = 28 - 25  # Common difference in the sequence\n\n    first_term = last_term - (term_position - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    return sum(numbers)\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    base_amount = 3.20\n    percent_of_percent = (50 / 100) * (50 / 100) * base_amount\n    return percent_of_percent\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to base 10\n    num1 = int(\"12101\", 3)\n    num2 = int(\"2210\", 3)\n    \n    # Perform the subtraction in base 10\n    result_base10 = num1 - num2\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n\n    return ans or '0'  # Return '0' if the result is 0\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_questions = correct_answers + wrong_answers\n    \n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for cakes and biscuits\n    cake, biscuit = symbols('cake biscuit')\n    \n    # Two equations based on the given problem\n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    # Solve the system of equations for the calories\n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize an array of 20 elements to represent the 20 positive integers\n    integers = [0] * 20\n    \n    # n represents the largest number of integers we can select\n    n = 0\n    \n    # Iterate through the array to select numbers according to the condition\n    for i in range(20):\n        # If the current element is already selected, continue to the next\n        if integers[i]:\n            continue\n        \n        # Select the current number and increment the count\n        integers[i] = 1\n        n += 1\n        \n        # Mark numbers that differ by 5 from the current number as unavailable\n        if i + 5 < 20:\n            integers[i + 5] = 1\n\n    return n\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's current age and his mother's current age\n    j, m = symbols('j m')\n\n    # Equation 1: John's age in 8 years is the same as his mother's age 20 years ago\n    eq1 = Eq(j + 8, m - 20)\n\n    # Equation 2: The difference in their ages remains constant\n    age_difference = m - j\n\n    # Equation 3: At the time when John's mother was 5 times his age\n    # Let x be the number of years ago when John's mother was 5 times his age\n    # John's age x years ago: j - x\n    # John's mother's age x years ago: m - x\n    # (m - x) = 5 * (j - x)\n    eq3 = Eq(m - age_difference, 5 * (j - age_difference))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq3), (j, m))\n\n    # John's age when his mother was 5 times his age is j - age_difference\n    johns_age_when_mother_five_times = solutions[j] - age_difference.subs(solutions)\n\n    return johns_age_when_mother_five_times\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_student in range(1, 100):\n        total_pencils = pencils_per_student * 44\n        if str(total_pencils).zfill(2) == str(total_pencils)[::-1]:\n            return pencils_per_student\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    smallest_number = lcm(4, 6, 7)\n    return smallest_number\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    # Convert the mixed fractions to improper fractions\n    num1 = 2017 + 7/8\n    num2 = 3 + 2/3\n    num3 = 2016.875\n    num4 = 11/3\n    num5 = 2017 + 1/3\n    num6 = 2016.875\n    num7 = 17\n    num8 = 3 + 23/32\n    \n    # Perform the calculations as per the given complex fraction\n    numerator = (num1 * num2) - (num3 * num4)\n    denominator = (num5 - num6) * num7\n    fraction = numerator / denominator\n    result = fraction * num8\n    return result\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sara, kevin, james = symbols('sara kevin james')\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and all(remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time = 24\n    william_time = 8\n\n    # Calculate the least common multiple (LCM) of their times\n    lcm_time = tom_time * william_time // math.gcd(tom_time, william_time)\n\n    return lcm_time\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n    \n    containers_needed = (total_apples + per_container - 1) // per_container\n    \n    return containers_needed\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n    equation = Eq(romily, reema + 10)\n\n    solutions = solve(equation, reema)\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Applying the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n    \n    # Since the posts are at both ends of every interval, we add 1 to include the last post\n    num_posts = (length_of_field // distance_between_posts) + 1\n    \n    return num_posts\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint, prod\n    \n    factors = factorint(28)\n    # To make it a square, we need to have even powers for each prime factor\n    # Multiply those factors that are not even in power by themselves\n    to_multiply = {factor: (exponent % 2) for factor, exponent in factors.items()}\n    # Calculate the number to multiply to get a perfect square\n    number_to_multiply = prod([factor ** exp for factor, exp in to_multiply.items()])\n    \n    return number_to_multiply\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's a two-digit number\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    \n    sum_positive = sum(positive_numbers)\n    sum_negative = sum(negative_numbers)\n    \n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Lunch finished at 2:50 pm\n    lunch_finished_time = datetime.strptime('14:50', '%H:%M')\n    \n    # Lunch lasted for 20 minutes\n    lunch_duration = timedelta(minutes=20)\n    \n    # Time before watching television\n    time_before_tv = timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home\n    play_duration = timedelta(minutes=10)\n    \n    # Calculate the time Benson reached home\n    reach_home_time = lunch_finished_time - (lunch_duration + time_before_tv + play_duration)\n    \n    # Return the time in the format HH:MM AM/PM\n    return reach_home_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    years = 5\n    for _ in range(years):\n        initial_population = initial_population * 5 / 2\n    return int(initial_population)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n    return None\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Treat students A and B as a single entity, thus having 5 entities to arrange.\n    entities_to_arrange = 5\n\n    # Calculate the permutations for these 5 entities.\n    permutations_of_entities = factorial(entities_to_arrange)\n\n    # Now, A and B can switch places in two different ways.\n    # Since we have treated them as a single entity, we now multiply the result by 2.\n    ways_for_A_and_B_together = 2\n\n    # The total number of ways is the product of the permutations of the entities and the arrangements of A and B.\n    total_ways = permutations_of_entities * ways_for_A_and_B_together\n\n    return total_ways\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    max_sweets_per_student = 5\n    class_size = total_sweets // max_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    known_product = 246 * 135\n    known_multiplicand = 246\n    additional_multiplicand = 248 - known_multiplicand\n    additional_product = additional_multiplicand * 135\n\n    return known_product + additional_product\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of steps of the escalator\n    x = symbols('x')\n\n    # Rate of escalator is (x - 10) steps in 10 seconds or (x - 10) / 10 steps per second\n    escalator_rate = (x - 10) / 10\n\n    # When Peter takes steps at 1 step per second, the total steps he takes plus the steps the escalator moves is x\n    equation1 = Eq(10 + 10 * escalator_rate, x)\n\n    # When Peter takes steps at 2 steps per second, the total time to reach the top is x / 2\n    # Since it takes him 8 seconds, the escalator must have moved 8 steps during the time\n    equation2 = Eq(16 + 8 * escalator_rate, x)\n\n    solution = solve((equation1, equation2), x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the variables representing the number of each color balloon\n    red, green, purple = symbols('red green purple')\n    \n    # Equation 1: There were 1/4 as many red balloons as green balloons\n    eq1 = Eq(red, green / 4)\n    \n    # Equation 2: There were 3/5 as many red balloons as purple balloons\n    eq2 = Eq(red, 3 * purple / 5)\n    \n    # Equation 3: The total mass of the balloons was 642 grams\n    eq3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (red, green, purple))\n    \n    # Extract the number of purple balloons\n    purple_balloons = solutions[purple]\n    \n    return purple_balloons\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve  \n    \n    x = symbols('x')  \n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    sum_of_values = tens + hundredths + thousandths\n\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n    \n    ans = (percentage / 100) * total\n    \n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James's height in cm\n    height_difference = 30  # The height difference between James and Mark in cm\n\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    # Subtract the remaining stickers, then divide by stickers given to each child\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks * 1/4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Hundreds digit must be 2, 4 or 6, and (c) specifies the ones digit to be twice as much\n        for tens in range(0, 10, 2):  # Tens digit must be an even number\n            ones = hundreds * 2\n            if 0 <= ones < 10 and tens > hundreds and (hundreds * 100 + tens * 10 + ones) % 9 == 0:\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original amount of chocolates Sally had be 5x and Ken had be 7x\n    sally, ken = symbols('sally ken')\n    \n    # Ken gave 24 chocolates to Sally\n    # Sally had twice as many chocolates as Ken in the end\n    equation1 = Eq(sally + 24, 2 * (ken - 24))\n    equation2 = Eq(sally/ken, 5/7)\n    \n    # Solve for sally and ken\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    return solutions[ken]\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    color_pencil, notebook = symbols('color_pencil notebook')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(5*color_pencil + 6*notebook, 17)\n    equation2 = Eq(8*color_pencil + 6*notebook, 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (color_pencil, notebook))\n    \n    # Calculate the total cost of 1 color pencil and 1 notebook\n    total_cost = solutions[color_pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_square = 4\n    sides_in_triangle = 3\n    \n    ans = (sides_in_square * 2) - sides_in_triangle\n    return ans\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    total_bill = 82\n    free_hours = 40\n    bill_40_to_50 = min(10 * 5, max(total_bill - 40 * 0, 0))\n    bill_50_to_60 = min(10 * 8, max(total_bill - bill_40_to_50 - 40 * 0, 0))\n    bill_over_60 = max(total_bill - bill_40_to_50 - bill_50_to_60, 0)\n\n    paid_hours_40_to_50 = bill_40_to_50 / 5\n    paid_hours_50_to_60 = bill_50_to_60 / 8\n    paid_hours_over_60 = bill_over_60 / 15\n\n    return free_hours + paid_hours_40_to_50 + paid_hours_50_to_60 + paid_hours_over_60\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12\n    new_pay = original_pay * (1 + increase_percentage / 100)\n    return new_pay\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    pages = 0\n    digit_counter = 0\n\n    while digit_counter < digits:\n        pages += 1\n        digit_counter += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    # Joanna's weekly pocket money in pounds\n    joanna_weekly_money = 5.00\n    # Amy's weekly pocket money in pounds\n    amy_weekly_money = 3.50\n    # Amount Amy spends each week on stickers in pounds\n    amy_weekly_spent_on_stickers = 0.75\n    # Number of weeks\n    weeks = 5\n\n    # Joanna's savings after 5 weeks\n    joanna_savings = joanna_weekly_money * weeks\n    # Amy's savings after 5 weeks (considering the amount spent on stickers)\n    amy_savings = (amy_weekly_money * weeks) - (amy_weekly_spent_on_stickers * weeks)\n\n    # The difference between Joanna's and Amy's savings\n    difference = joanna_savings - amy_savings\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the magic number\n    x = symbols('x')\n    \n    # Given that the first number after addition is 4 times the second number after addition\n    equation = Eq((57 + x), 4 * (9 + x))\n    \n    # Solve for the magic number x\n    magic_number = solve(equation, x)\n    \n    return magic_number[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    male_students = 7\n    female_students = 6\n\n    # total ways without the restriction of at least 1 female student\n    total_ways_without_restriction = total_teachers * comb(male_students + female_students, 4)\n\n    # ways with no female students\n    ways_with_no_female_students = total_teachers * comb(male_students, 4)\n\n    # subtracting the ways with no female students from the total ways\n    ans = total_ways_without_restriction - ways_with_no_female_students\n\n    return ans\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - 6 * i + i for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // (15 - 10)\n\n    twelfth_term = tenth_term + (2 * common_difference)\n    return twelfth_term\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    number_of_cups = 45\n\n    total_milk = milk_per_cup * number_of_cups\n    total_tea = tea_per_cup * number_of_cups\n\n    total_liquids = total_milk + total_tea\n\n    return total_liquids\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    score = 17\n    total_marks = 20\n    percentage = (score / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    nth_term = lambda n: 5 * n\n    return nth_term(10)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Since the degree of the monomial is the sum of the powers of all its variables,\n    # we have for the monomial -x^3y^(2n):\n    # degree = 3 + 2n\n    # We are given that the degree is 5, so setting up the equation:\n    # 3 + 2n = 5\n    # Solving for n:\n    n = (5 - 3) / 2\n    return int(n)\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for a book's cost\n    book_cost = symbols('book_cost')\n\n    # Define the equations based on the problem\n    sarah_cost = 8 * book_cost + 3 * 0.40\n    rebecca_cost = 3 * book_cost + 8 * 0.40\n\n    # The difference in cost between Sarah and Rebecca\n    cost_difference = Eq(sarah_cost - rebecca_cost, 1.00)\n\n    # Solve for the book's cost\n    solution = solve(cost_difference, book_cost)\n\n    return float(solution[0])\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    price_per_gummy = 6  # pence\n    total_price_pence = 342  # 3.42 pounds in pence\n\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * price_per_gummy + bernice * price_per_gummy + candice * price_per_gummy, total_price_pence)\n\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    values = [0, 2, 3, 5, 7, 8, 11, 14, 16, 19]\n    n = 20 - values[len(values) // 2]\n    mean_of_values = sum([n + val for val in values]) / len(values)\n    return mean_of_values\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the first of the three consecutive numbers be n\n    # Therefore, the second number is n + 1, and the third is n + 2\n    # The sum of these three numbers is 3n + 3\n    # According to the problem, 3n + 3 = 60\n    total_sum = 60\n    n = (total_sum - 3) // 3\n    # The largest of the three numbers is n + 2\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    members_who_did_not_shake_hands = 4\n\n    # Calculate the total number of handshakes if everyone shook hands with everyone else\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Calculate the number of handshakes not performed by the 4 members\n    # Each of the 4 members does not shake hands with 3 others, so we avoid counting those handshakes\n    avoided_handshakes = members_who_did_not_shake_hands * (members_who_did_not_shake_hands - 1) // 2\n\n    # Subtracting the avoided handshakes to get the final answer\n    real_handshakes = total_handshakes - avoided_handshakes\n\n    return real_handshakes\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let the weights of the apples be x, y, and z where x < y < z (lightest to heaviest).\n    # We then have two pieces of information.\n    # If Tim eats the largest apple, the mean weight of the two remaining apples is 70 grams:\n    # (x + y) / 2 = 70  ---> Equation 1\n\n    # If Tim eats the lightest apple, the mean weight of the remaining two apples is 105 grams:\n    # (y + z) / 2 = 105 ---> Equation 2\n\n    # From Equation 1 we get y = 140 - x.\n    # From Equation 2 we get y = 210 - z.\n\n    # Equating the two expressions for y gives us:\n    # 140 - x = 210 - z\n    # z - x = 210 - 140\n    # z - x = 70\n\n    # The weight difference between the heaviest apple and the lightest apple is 70 grams.\n    return 70\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    # Let's iterate through all possible single-digit numbers\n    # and find the one that meets the condition described.\n    for i in range(1, 10):\n        # Form the two-digit number by adding a '0' to the right.\n        new_number = int(str(i) + '0')\n        # Check if the two-digit number is greater by 27.\n        if new_number - i == 27:\n            return i  # Return the original number if condition is met.\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # For number puzzles, it's often the case that we look for digits that satisfy certain equations.\n    # Here, we will iterate through all possible combinations of digits to find A.\n    # Since we don't know the value of A, let's assume it's a digit from 0 to 9.\n    \n    # Since no information is given about how A relates to other numbers or equations,\n    # and given the context seems to imply a unique solution (as we are not given a specific puzzle),\n    # It can be interpreted as a trick question, hinting towards the fact that A could be any digit.\n    # Therefore, there's not enough data to determine the value of A, and A could be any digit from 0 to 9.\n    \n    # We cannot provide a definite solution based on the given question, so we will return all possible values for A.\n    possible_values_for_A = list(range(10))\n    return possible_values_for_A\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4  # The difference between each term is 4 points\n    n = 11  # The nth term we want to find\n\n    # Arithmetic sequence formula to find the nth term: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Since Bob is always the 3rd in line no matter the direction he counts from, \n    # It implies that the number of animals in each row and each column is 5\n    # (3 animals before him and 1 after him in each direction)\n    number_of_rows = 5\n    number_of_columns = 5\n\n    # Total number of animals is the product of the number of rows and columns\n    total_animals = number_of_rows * number_of_columns\n\n    return total_animals\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    # Find the smallest multiple of 11 greater than 100\n    smallest_multiple = ((100 // 11) + 1) * 11\n\n    # Find the largest multiple of 11 less than 300\n    largest_multiple = (300 // 11) * 11\n\n    # Sum the smallest and largest multiple of 11\n    sum_of_multiples = smallest_multiple + largest_multiple\n\n    return sum_of_multiples\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of 1-cent coins, y be the number of 2-cent coins, and z be the number of 5-cent coins\n    x, y, z = symbols('x y z')\n\n    # We have the following equations based on the problem statement\n    # Equation representing the height ratio of 1-cent coins to 2-cent coins\n    equation1 = Eq(6*x, 5*y)\n    # Equation representing the height ratio of 1-cent coins to 5-cent coins\n    equation2 = Eq(4*x, 3*z)\n    # Equation representing the total number of coins\n    equation3 = Eq(x + y + z, 124)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Calculate the total value of all coins\n    total_value = solutions[x] + 2 * solutions[y] + 5 * solutions[z]\n\n    return total_value\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of spaces between the plum trees is one less than the number of trees\n    num_spaces = 41 - 1\n    # Total length of the road based on the plum trees\n    road_length_plum = num_spaces * 4\n    \n    # Calculate the number of spaces for pine trees (subtract 1 since there's a pine tree at each end)\n    num_spaces_pine = road_length_plum // 5\n    # Calculate the number of pine trees based on the number of spaces (add 1 for the tree at the end)\n    num_pine_trees = num_spaces_pine + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2*durian + 3*honeydew, 77)\n    equation2 = Eq(durian, 2*honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # Since there are 12 months in a year\n    components_per_month = m / 12\n    return components_per_month\n\n# This placeholder 'm' represents the total components produced last year.\n# You can call solution with a specific value for 'm' to get the result.\n# For example:\n# ans = solution(1200)\n# will assign the number of monthly produced components when 1200 components were produced last year to 'ans'."
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for blue in range(1, 100):\n        for green in range(1, 100):\n            if (blue / green) == (2 / 5):\n                red = green / 4\n                if blue + green + red < 100 and red == int(red):\n                    max_red_pens = max(max_red_pens, int(red))\n    return max_red_pens\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for i in range(999999, 100000, -1):\n        if str(i) == str(i)[::-1] and i % 6 == 0:\n            return i\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    money_spent_on_books = initial_money * 0.25\n    money_left_after_books = initial_money - money_spent_on_books\n    money_spent_on_dvd = money_left_after_books * 0.20\n    money_left = money_left_after_books - money_spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    return 56 + 78 + 44 + 22\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # in meters\n    shortfall_cm = 10  # in centimeters\n\n    # Convert shortfall to meters\n    shortfall_m = shortfall_cm / 100\n\n    # Calculate the length of the piece in the garage\n    garage_piece_length_m = desired_length_m - shortfall_m\n\n    # Return length in meters\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of marbles Wei Yan had\n    x = symbols('x')\n    \n    # Equation representing the final number of marbles\n    equation = Eq(x + 408, 2 * x * (1 - 3/8) * (1 - 5/7))\n    \n    # Solve the equation\n    result = solve(equation, x)\n    \n    # Extract the result\n    initial_marbles = result[0]\n\n    return initial_marbles\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2/7) * 315\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_and_needles = 2540\n    sold_pins = 1820\n    remaining_pins = total_pins_and_needles - sold_pins\n\n    # Let the total number of needles be 5u (since 4/5 of the needles are sold, 1/5 are left)\n    # And the remaining needles (1/5) must be equal to the remaining pins\n    # Hence, 1u (1/5 of needles) = remaining_pins\n    # So to find the total number of needles, we can find 1u (which equals the remaining pins) and multiply by 5\n    u = remaining_pins / 5\n    total_needles = 5 * u\n\n    # Find the number of remaining needles, which is 1/5 of total needles\n    remaining_needles = total_needles / 5\n\n    # Now, double check if 4/5 of needles + sold pins equals the total initial amount\n    if (4 * remaining_needles + sold_pins) != total_pins_and_needles:\n        # If the above condition is not true, then Paul's solution is incorrect\n        # We need to re-calculate using the correct assumption\n        total_needles = total_pins_and_needles - sold_pins\n        sold_needles = (4/5) * total_needles\n        remaining_needles = total_needles - sold_needles\n        # Check if remaining pins and needles are equal\n        if remaining_pins != remaining_needles:\n            remaining_needles = (total_pins_and_needles - sold_pins) / 2\n\n    return int(remaining_needles)\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    total_numbers = 41\n    \n    # Calculate full pattern repetitions and extra numbers after that\n    full_repetitions = total_numbers // pattern_length\n    extra_numbers = total_numbers % pattern_length\n    \n    # Sum of one pattern sequence\n    sum_of_pattern = sum(pattern)\n    \n    # Sum of the numbers in the full pattern repetitions\n    sum_full_repetitions = sum_of_pattern * full_repetitions\n    \n    # Sum of the extra numbers\n    sum_extra_numbers = sum(pattern[:extra_numbers])\n    \n    # Total sum\n    total_sum = sum_full_repetitions + sum_extra_numbers\n    \n    return total_sum\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p in range(0, 24):  # 24 * 2p = 48p, which is more than 47p, so we only check up to 23\n        for five_p in range(0, 10):  # 10 * 5p = 50p, which is more than 47p, so we only check up to 9\n            if two_p * 2 + five_p * 5 == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n    \n    # The difference in age will remain constant\n    age_difference = father_age - brian_age\n    \n    # Search for the ages where Brian's age is the reverse of his father's age\n    while True:\n        # Increment the ages\n        brian_age += 1\n        father_age += 1\n        \n        # Convert ages to strings to check if they are reverses of each other\n        if str(father_age) == str(brian_age)[::-1]:\n            break\n    \n    return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9 + 10 + 11) / 8) - ((10 + 11 + 12) / 9) + ((11 + 12 + 13) / 10) - ((12 + 13 + 14) / 11)\n    denominator = (1 / 8) - (1 / 9) + (1 / 10) - (1 / 11)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    first_number = round(654876, -2)\n    second_number = round(279745, -2)\n    estimated_difference = first_number - second_number\n    return estimated_difference\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - (x1 + x2)\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 3  # Divide by 3! to account for permutations of piles\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass_tree = 16  # Time in seconds\n    length_of_train = 480   # Length in meters\n\n    # Speed = Distance / Time\n    # The distance the train travels to pass the tree is the length of the train\n    speed = length_of_train / time_to_pass_tree  # Speed in meters per second\n\n    # Convert the speed to km/h by multiplying with 3.6 (1 m/s = 3.6 km/h)\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_point_5_kg = cost_per_kg * 3.5\n    return cost_for_3_point_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2/5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    fraction = 5 / 8\n    number = 4000\n    ans = fraction * number\n    return ans\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (total_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_students = 40\n    failed_students = 14\n\n    failed_percentage = (failed_students / total_students) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for total_parts in range(2, 9):  # since 8 = 1+...+1 (8 times) is not allowed, start from 2\n        for x1 in range(1, 8):\n            for x2 in range(1, 8 - x1 + 1):\n                if total_parts == 2 and x1 + x2 == 8:\n                    count += 1\n                for x3 in range(1, 8 - x1 - x2 + 1):\n                    if total_parts == 3 and x1 + x2 + x3 == 8:\n                        count += 1\n                    for x4 in range(1, 8 - x1 - x2 - x3 + 1):\n                        if total_parts == 4 and x1 + x2 + x3 + x4 == 8:\n                            count += 1\n                        for x5 in range(1, 8 - x1 - x2 - x3 - x4 + 1):\n                            if total_parts == 5 and x1 + x2 + x3 + x4 + x5 == 8:\n                                count += 1\n                            for x6 in range(1, 8 - x1 - x2 - x3 - x4 - x5 + 1):\n                                if total_parts == 6 and x1 + x2 + x3 + x4 + x5 + x6 == 8:\n                                    count += 1\n                                for x7 in range(1, 8 - x1 - x2 - x3 - x4 - x5 - x6 + 1):\n                                    if total_parts == 7 and x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8:\n                                        count += 1\n                                    if total_parts == 8:\n                                        count += 1  # Only one possibility exists for 8, which is 1+1+1+1+1+1+1+1\n                                        break\n    return count\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    sum_erased = sum(number for number in range(1, 51) if '3' in str(number))\n    return sum_erased\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n    \n    ans = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return ans\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags_used, remainder_poppers = divmod(total_guests, poppers_per_bag)\n    \n    poppers_left = poppers_per_bag - remainder_poppers if remainder_poppers != 0 else 0\n\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Since we are only interested in the ones digit, let's look at the pattern\n    # of the ones digit for the powers of 7.\n    ones_digit = 7\n    for _ in range(1, 2023):\n        ones_digit = (ones_digit * 7) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # On the first attempt, he tries all 10 keys for the first door, he is certain to find the right key.\n    # For the second door, there remain 9 keys to try at most.\n    # Continuing this process, for the last door there will only be one key left.\n    # Therefore, the maximum number of attempts is the sum of the numbers from 1 to 10.\n    \n    attempts = sum(range(1, 11))\n\n    return attempts\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    least_5_digit_palindrome = 10001\n    greatest_6_digit_palindrome = 999999\n    \n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    import math\n\n    # Evaluate the expression with the repeating decimals\n    expression = (math.pow(-13.333333333333333333333333333333, 1/3) * math.pow(4.090909090909090909090909090909, 2)) / (59.24 - math.sqrt(11.111111111111111111111111111111))\n\n    # Round off to the nearest 3 decimal places\n    ans = round(expression, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create the initial large number by concatenating the numbers from 1 to 30 as strings\n    large_number = ''.join(str(x) for x in range(1, 31))\n    \n    # The strategy to get the smallest number is to remove numbers from the largest digits\n    # So, removing the first 46 digits to get the smallest number possible\n    smallest_number_after_removal = large_number[46:]\n\n    # Convert the resulting string back to an integer\n    ans = int(smallest_number_after_removal)\n    return ans\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_to_pick = 2\n\n    ans = comb(total_children, children_to_pick)\n    return ans\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    fraction_girls = 3 / 4\n    total_members = boys / (1 - fraction_girls)\n    girls = total_members * fraction_girls\n    return int(girls)\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices of banana and apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's purchase equation: 1.5 = 2*banana + 3*apple\n    equation1 = Eq(1.5, 2*banana + 3*apple)\n\n    # Beth's purchase equation: 1.45 = 3*banana + 2*apple\n    equation2 = Eq(1.45, 3*banana + 2*apple)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost for 1 banana and 1 apple\n    cost_for_annabella = solutions[banana] + solutions[apple]\n\n    return float(cost_for_annabella)\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    # Let x be the number of years later\n    # Sara's age after x years: 8 + x\n    # Lucy's age after x years: 36 + x\n    # Their combined age after x years will be: (8 + x) + (36 + x) = 60\n    \n    # Now, we solve for x\n    # 8 + x + 36 + x = 60\n    # 2x + 44 = 60\n    # 2x = 60 - 44\n    # 2x = 16\n    # x = 16 / 2\n    x = 16 / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seat_benches = 6\n    three_seat_benches = 9\n    total_people = (two_seat_benches * 2) + (three_seat_benches * 3)\n    return total_people\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_amount = 16  \n\n    change = paid_amount - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    seq = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(seq)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_minutes = 5\n    total_marshmallows = marshmallows_per_minute * total_minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona must take out one glove of each color. After that, no matter which color glove she takes next,\n    # it will definitely match one of the gloves already taken out, forming a pair.\n    # Therefore, she must take 5 (one of each color) + 1 (to guarantee a pair).\n    \n    num_gloves_to_ensure_pair = 5 + 1\n    return num_gloves_to_ensure_pair\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of footballs and basketballs\n    footballs, basketballs = symbols('footballs basketballs', integer=True)\n\n    # Equation representing the initial ratio of footballs to basketballs\n    equation1 = Eq(footballs, 2/5 * basketballs)\n\n    # Equation representing the ratio after selling 16 basketballs\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n\n    footballs_count = solutions[footballs]\n    basketballs_count = solutions[basketballs]\n\n    # Return the total count of footballs and basketballs initially\n    total_initial = footballs_count + basketballs_count\n\n    return total_initial\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n    number_of_multiples = (last_multiple - first_multiple) // 8 + 1\n    \n    return number_of_multiples\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_current, younger_current = symbols('older_current younger_current')\n\n    # When the age of the older brother was same as the younger brother's current age, the younger brother was 12\n    equation1 = Eq(older_current - younger_current, younger_current - 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_price = original_price * (1 + 10 / 100)\n    lantern_festival_price = spring_festival_price * (1 - 10 / 100)\n\n    return lantern_festival_price\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in a single round-robin tournament for one group with 4 people\n    group_games = (4 * (4 - 1)) // 2\n    \n    # Since there are 4 groups, multiply by 4\n    group_stage_games = group_games * 4\n    \n    # For the knockout stage, each stage will have half the number of games as the number of players starting that stage\n    # Top 8 stage: 4 games, Top 4 stage: 2 games, Top 2 stage: 1 game\n    knockout_stage_games = 4 + 2 + 1\n    \n    # Summing the group stage games and the knockout stage games to find the total number of games\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = [x for x in range(31, 40) if x % 4 == 0 and x % 6 == 0]\n    return sweets[0]\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each person originally had\n    sam, peter = symbols('sam peter')\n\n    # Create the equation based on the problem statement\n    # Sam originally had 40 stickers more than Peter\n    original_condition = Eq(sam, peter + 40)\n    # Sam gave 20% of his stickers to Peter\n    after_sam_gives = sam - 0.20 * sam\n    # Peter gave 25% of his stickers to Sam\n    after_peter_gives = peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam)\n    # After the exchange, Sam had 96 more stickers than Peter\n    final_condition = Eq(after_sam_gives + 0.25 * (peter + 0.20 * sam), after_peter_gives + 96)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, final_condition), (sam, peter))\n\n    # Return the number of stickers Peter had originally\n    return solutions[peter]\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    flora_age_now, father_age_now = symbols('flora_age_now father_age_now')\n\n    # Flora's age now is 5\n    flora_age_2_years_ago = 5 - 2\n    # Father's age 2 years ago was 9 times Flora's age at that time\n    equation = Eq((father_age_now - 2), 9 * flora_age_2_years_ago)\n\n    # Solve the equation\n    solutions = solve(equation, father_age_now)\n\n    # Father's age now\n    father_age_now = solutions[0]\n    \n    return father_age_now\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert 7.2 minutes to hours\n    total_time = 7.2 / 60\n\n    # Relative speed of teacher while going to the head of the line\n    speed_to_head = 12 + 8  # 12km/h (teacher's speed) + 8km/h (students' speed)\n\n    # Relative speed of teacher while running back to the end of the line\n    speed_to_tail = 12 - 8  # 12km/h (teacher's speed) - 8km/h (students' speed)\n    \n    # Let the length of the line be 'd', time to head 't1', and time to tail 't2'\n    # We know that total_time = t1 + t2\n    # Also, we can relate distance to speed and time: d = speed_to_head * t1 = speed_to_tail * t2\n    # We can rewrite the two equations in terms of 't1' and solve for 'd'\n    # t1 = d / speed_to_head\n    # t2 = d / speed_to_tail\n    # Therefore, total_time = d / speed_to_head + d / speed_to_tail\n    # Solving for 'd' gives us total_time * (speed_to_head * speed_to_tail) / (speed_to_head + speed_to_tail)\n    \n    length_of_line = total_time * (speed_to_head * speed_to_tail) / (speed_to_head + speed_to_tail)\n\n    return length_of_line\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):  # The sequence starts at 8 and ends at 85 inclusive\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        count += str(i * 2).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100  # Since 1 pound = 100 pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    ken_took = remaining * 2 + 1\n    remaining += ken_took\n    nini_took = remaining * 2 - 3\n    remaining += nini_took\n    ivy_took = remaining * 2 + 2\n    remaining += ivy_took\n    eddie_took = remaining * 2 - 1\n    start_candies = remaining + eddie_took\n\n    return start_candies\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "def solution():\n    from itertools import permutations\n    \n    unique_permutations = set(permutations('CYZZ'))\n    count = len(unique_permutations)\n\n    return count\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # Climbed for 5 days plus the 6th day\n    remaining = 18 - total_climbed  # Remaining distance after the 6th day\n\n    # Since the snail reaches the top during the day, the slide down is after reaching the top.\n    # If the snail climbs 7 meters and then slides down to be 3 meters out the next day,\n    # the difference (4 meters) is the slide down distance.\n    slide_down = 7 - 3\n\n    return slide_down\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    for boys in range(99):\n        girls = 3 * boys\n        total_paintbrushes = 2 * girls + 3 * boys\n        if total_paintbrushes == 99:\n            return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    students_a = 12\n    students_b = 16\n    students_c = 20\n\n    # Calculate the gcd for the three class sizes\n    gcd_ab = gcd(students_a, students_b)\n    gcd_abc = gcd(gcd_ab, students_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n\n    # convert minutes to hours (20 min late -> 1/3 h late, 10 min early -> -1/6 h early)\n    late_time = 1/3\n    early_time = -1/6\n\n    # set up the equations based on time = distance/speed\n    equation1 = Eq((distance / 4) - late_time, (distance / 6) + early_time)\n\n    # solve for distance\n    solution = solve(equation1, (distance))\n\n    return solution[0]\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to centimeters for uniform comparison\n    height_in_cm = {\n        '5m': 5 * 100,  # 5 meters to cm\n        '120cm': 120,  # already in cm\n        '50mm': 50 / 10,  # 50 mm to cm\n        '8feet': 8 * 30.48  # 8 feet to cm (1 foot is approximately 30.48 cm)\n    }\n    \n    # Set a reasonable range for the height of a pupil\n    min_height_cm = 100  # 1 meter as a minimum height for a pupil\n    max_height_cm = 200  # 2 meters as a likely maximum height for a pupil\n    \n    # Check each height estimate against the reasonable range\n    ans = [height for height, cm in height_in_cm.items() if min_height_cm <= cm <= max_height_cm]\n    \n    # Return the estimates that might be correct\n    return ans\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    difference = 121 - 124  # This is a negative difference\n    n = 15\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    caught_first_time = 100\n    caught_second_time = 200\n    marked_fish_second_time = 25\n\n    # Using Capture-Recapture Method\n    total_fish = (caught_first_time * caught_second_time) // marked_fish_second_time\n    \n    return total_fish\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    import math\n    # Find the least common multiple (LCM) of the different sizes of pieces\n    lcm = math.lcm(2, 3, 5)\n    return lcm\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_rabbit_days = 12 * 15\n    days_for_20_rabbits = total_rabbit_days / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    # Let's denote the number of boys as B and girls as G\n    B = 18\n    G = 12\n\n    # Let's denote the average score of boys as AB and the total average score as AT\n    AB = 74\n    AT = 82\n\n    # Let's calculate the total score for boys TB and the total score for all TA\n    TB = AB * B\n    TA = AT * (B + G)\n\n    # Now we can calculate the total score for girls TG\n    TG = TA - TB\n\n    # To find the average score of girls AG, we divide the total score for girls by the number of girls G\n    AG = TG / G\n\n    return AG\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10 + 22\n    dress_cost = 56\n    money_needed = dress_cost - susan_money\n    return money_needed\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n\n    return total_sweets\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime('07:40', '%H:%M')\n    breakfast_start_time = wake_up_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    total_trees = 100\n    difference = 12\n\n    # Let the number of trees planted by boys be b.\n    # The number of trees planted by girls will then be b + difference.\n    # We can set up the equation as: b + (b + 12) = total_trees\n\n    # Solving for b gives us the number of trees planted by boys.\n    b = (total_trees - difference) / 2\n\n    return int(b)\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n    \n    return total_salt\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_dollars = 2 + 1/2\n    quarters_in_one_dollar = 4\n    \n    num_quarters = total_dollars * quarters_in_one_dollar\n    \n    return int(num_quarters)\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    # Iterate through the number of 2-gram weights from 0 to the point where they alone would exceed 77 grams\n    for two_gram_weights in range(0, 78 // 2 + 1):\n        # Calculate the remaining weight to be filled with 3-gram weights\n        remaining_weight = 77 - two_gram_weights * 2\n        # Check if the remaining weight can be exactly filled with 3-gram weights\n        if remaining_weight % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    def sum_of_cubes(n):\n        return ((n * (n + 1)) // 2) ** 2\n\n    # Calculate sum of cubes from 1 to 20\n    sum_up_to_20 = sum_of_cubes(20)\n    # Calculate sum of cubes from 1 to 9\n    sum_up_to_9 = sum_of_cubes(9)\n\n    # Calculate sum from 10^3 to 20^3\n    ans = sum_up_to_20 - sum_up_to_9\n    return ans\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score = 5 * 90\n    current_score = 96 + 85 + 89 + 92\n    fifth_assignment_score = total_score - current_score\n    \n    return fifth_assignment_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    cards = 0\n    while True:\n        cards += 1\n        if cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6:\n            return cards\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    capacity = 34\n    coaches_needed = (pupils + capacity - 1) // capacity  # Integer division with roundup\n    return coaches_needed\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip / bud, 4 / 7)\n    equation2 = Eq((pip / (bud + 5)), 8 / 15)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure we have at least 5 different colors with at least 10 pencils for each color,\n    # we can draw 10 pencils from one color at a time, but for the fifth color,\n    # since we want to ensure we have it, we might need to draw all of the other colors' pencils.\n\n    # For the first 4 colors, we can draw exactly 10 from each, since the worst case would have us getting\n    # 10 pencils of one color before getting a different color.\n    pencils_drawn = 4 * 10\n\n    # For the fifth color, we need to account for the worst case scenario where we draw all the remaining pencils\n    # of one color. Since there are 9 colors in total and we have already accounted for 4, we might need to draw\n    # up to the maximum from the remaining 4 colors before we get 10 of the fifth color.\n    # We are drawing 10 from the fifth color to ensure we have at least 10.\n    pencils_drawn += (4 * 75) + 10\n\n    return pencils_drawn\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204) - 4  # Subtract 4 to exclude the corners\n    spaces = 116 - 4  # Subtract 4 corner wheats\n    distance = perimeter / spaces\n    return distance\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5_power_20 = 5  # The last digit of any power of 5 is always 5\n    last_digit_7_power_30 = pow(7, 30, 10)  # Using modulo 10 to find the last digit of 7^30\n\n    # Multiply the last digits and find the last digit of the product\n    ans = (last_digit_5_power_20 * last_digit_7_power_30) % 10\n\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)  # Ratio of girls who can swim to cannot swim\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # Boys who can swim is 120 less than boys who cannot swim\n    equation4 = Eq(girls_swim + girls_not_swim, girls)  # Total girls = girls who can swim + girls who cannot swim \n    equation5 = Eq(boys_swim + boys_not_swim, boys)  # Total boys = boys who can swim + boys who cannot swim\n    equation6 = Eq(girls + boys, 1690)  # Total number of pupils in the school\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the total number of pupils who cannot swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    # Assuming Joe shares the chocolate bar equally with one friend,\n    # he would have half of the total squares.\n    joe_squares = total_squares // 2\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # List all prime numbers less than 45\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    \n    # Define a function to check if three primes form a correct addition equation\n    def is_addition_equation(p1, p2, p3):\n        return (p1 + p2 == p3) or (p1 + p3 == p2) or (p2 + p3 == p1)\n    \n    # Iterate over all possible triples of distinct prime numbers\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:\n                    # A's statement: Their three numbers cannot form a correct addition equation\n                    if not is_addition_equation(a, b, c):\n                        # B's statement: if subtract 1 from B's number, the difference is 7\n                        if abs(a - (b - 1)) == 7 or abs(c - (b - 1)) == 7:\n                            # C's statement: if multiply C's number by 2, they can form a correct addition equation\n                            if is_addition_equation(a, b, c * 2):\n                                # If all conditions are met, return the sum of these three prime numbers\n                                return a + b + c\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(4*A + 4*B, 36)\n    equation2 = Eq(2*A + 3*B, 22)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    A_points = solutions[A]\n    B_points = solutions[B]\n\n    score = 3*A_points + 5*B_points\n\n    return score\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    between_children = 2\n\n    total_children = laura_position + between_children + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n\n    return people_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assigning the values based on the conditions given\n    A = 2  # smallest prime number\n    B = 4  # smallest composite number\n    C = 1  # neither prime number nor composite number or zero\n    D = A - 2  # 2 less than the smallest prime number\n    E = 9  # largest composite number up to 10\n    F = 5  # only has factors 1 and 5\n    G = 8  # greatest factor of 8 other than itself\n    H = 6  # lowest multiple of 6\n    \n    # Building the phone number from the individual components\n    phone_number = f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n    \n    return phone_number\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60  # 24 hours * 60 minutes * 60 seconds\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    ans = seconds_in_a_day * fraction_of_day\n    return ans\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    # Total number of digits we have is 5\n    total_digits = 5\n    \n    # We have three 2's and two 3's\n    count_2 = 3\n    count_3 = 2\n    \n    # Calculate the total permutations without considering identical items\n    total_permutations = factorial(total_digits)\n    \n    # Divide by the permutations of the identical items (2's and 3's) to get the unique permutations\n    permutations_identical_2 = factorial(count_2)\n    permutations_identical_3 = factorial(count_3)\n    \n    # Calculate the number of unique permutations\n    unique_permutations = total_permutations // (permutations_identical_2 * permutations_identical_3)\n\n    # However, since we are looking for four-digit numbers, we must exclude the case where leading digit is 0\n    # Since we only have non-zero digits, we don't have to consider this case\n    \n    return unique_permutations\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # There are 3 family members: Eddie, mom, and dad.\n    # We consider them as one unit, plus the number of other people.\n\n    # Let's say there are n other people.\n    # So there are (n+1) units in total when considering Eddie and his parents as one unit.\n\n    # Each unit can be arranged in (n+1)! ways.\n    from math import factorial\n    n = 1  # only one unit (Eddie and his parents)\n    unit_permutations = factorial(n + 1)  # (n+1) factorial\n\n    # But Eddie, his mom, and dad can be arranged among themselves in 3! ways.\n    family_permutations = factorial(3)\n\n    # By the principle of multiplication, the total number of ways is the product of unit_permutations and family_permutations.\n    total_ways = unit_permutations * family_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10):  # Thousands digit cannot be 0\n        for b in range(0, 10):\n            for c in range(0, 10):\n                # Pip's number\n                pip_number = 1000 * a + 100 * b + 10 * c + a\n                # Bud's number with the units and tens digit reversed\n                bud_number = 1000 * a + 100 * c + 10 * b + a\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    # Let x be the total number of stickers Charlotte originally had\n    # Let y be the total number of stickers Alexis originally had\n    # Since Mary and Alexis had stickers in the ratio 7 : 5, Mary had 7/5 * y stickers\n    \n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    # Charlotte's stickers increased by 80%, so the amount she received is 0.8 * x\n    # Therefore, Mary gave 0.8 * x * (5/7) stickers to Charlotte because 5/7 is the Alexis' part in the 7:5 ratio\n    # And Alexis gave 0.8 * x * (2/7) stickers to Charlotte because 2/7 is the Maryâs part in the 7:5 ratio\n    # In the end, the number of stickers Charlotte has is x + 0.8x = 1.8x\n    \n    # Also, in the end, Mary has (7/5 * y) * (1 - 0.2) stickers left\n    # And Alexis has y * (1 - 0.2) stickers left\n    \n    # Therefore, we can write the equation for the stickers Mary and Charlotte have in the end:\n    # (7/5 * y) * (1 - 0.2) - 1.8 * x = 20\n    # Now let's solve for x and y using the two equations:\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # Defining variables x and y\n    \n    # Two equations based on the explanation above\n    equation1 = Eq(0.8 * x * (5/7) + 0.8 * x * (2/7), 0.8 * x)\n    equation2 = Eq((7/5 * y) * 0.8 - 1.8 * x, 20)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Extracting the number of stickers Alexis had originally\n    return solutions[y]\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    n = 1\n    while n * (n + 1) / 2 <= 95:\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    actual_minuend = 166\n\n    correct_difference = actual_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let x be the unknown number of cows that can be fed for 50 days\n    # According to the problem, we have two conditions:\n    # 25 cows for 10 days = 15 cows for 20 days = a constant amount of grass\n    # Therefore, we have the equation:\n    # 25 * 10 = 15 * 20\n    # Also, we can say that this constant amount of grass can feed x cows for 50 days\n    # So, x * 50 = 25 * 10\n    # Now we can solve for x:\n    \n    grass_amount = 25 * 10  # this is common amount of grass for both scenarios \n    x = grass_amount / 50\n    \n    return x\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the quantities we want to find\n    oranges_initial, lemons_initial = symbols('oranges_initial lemons_initial', integer=True)\n\n    # Set up the equations based on the problem\n    equation1 = Eq(oranges_initial / lemons_initial, 3/5)\n    equation2 = Eq((oranges_initial - 48) / lemons_initial, 1/2)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (oranges_initial, lemons_initial))\n    \n    return solutions[lemons_initial]\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax = 0.10\n\n    discounted_price = original_price * (1 - discount)\n    price_after_member_discount = discounted_price - member_discount\n    final_price = price_after_member_discount * (1 + sales_tax)\n    \n    return final_price\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3\n    third_day = second_day * (5/3)\n    \n    total_sold = first_day + second_day + third_day\n    return total_sold\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_possible = 250 / flour_per_cake\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3 maths books and 2 English books.\n    # Consider each set of books to be a single unit first.\n    # Since the maths books must be together, there is one unit of maths books.\n    # Since the English books must be together, there is one unit of English books.\n    # There are 3 other books which are all distinct.\n    \n    # First, calculate the number of ways to arrange these 3 units + 3 other books.\n    # This is like arranging 5 distinct items.\n    total_books_units = 5\n    arrangements_of_units = factorial(total_books_units)\n    \n    # Now calculate the permutations within the maths books.\n    maths_books = 3\n    permutations_of_maths = factorial(maths_books)\n    \n    # Now calculate the permutations within the English books.\n    english_books = 2\n    permutations_of_english = factorial(english_books)\n    \n    # The total number of arrangements is the product of the 3 calculations.\n    total_arrangements = arrangements_of_units * permutations_of_maths * permutations_of_english\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    # Given 20:32 = x:8, we need to find x\n    # We can set up the proportion 20/32 = x/8 and solve for x:\n  \n    x = (20 * 8) / 32\n    return int(x)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let k be the number of days Kevin takes off\n    k = symbols('k')\n\n    # Ivy's work rate is 1/24 jobs per day\n    # Kevin's work rate is 1/20 jobs per day\n\n    # The total job done by Ivy is (12 days)*(1/24 jobs/day) = 12/24 = 1/2 jobs\n    ivy_work = 12 / 24\n\n    # The total job done by Kevin is (12 - k days)*(1/20 jobs/day)\n    kevin_work = (12 - k) / 20\n\n    # Together they complete 1 job\n    equation = Eq(ivy_work + kevin_work, 1)\n\n    # Solve for k\n    days_off = solve(equation, k)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n    \n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for number in range(1, 201):\n        count += str(number).count('1')\n    return count\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n\n    arrangements = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n\n    return arrangements\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # The worst-case scenario is getting all socks of different colors first.\n    # Since there are two colors, Cindy must take out all 4 socks of one color plus 1\n    # to ensure she has at least one pair of the same color.\n    return 4 + 1\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # pence\n    new_price = 100  # pence, which is Â£1.00\n\n    price_increase = new_price - original_price\n    percentage_increase = (price_increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    cost_of_bracelet = 80\n    gst = 8 / 100\n    total_cost = cost_of_bracelet + (cost_of_bracelet * gst)\n\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the number of bicycles, t represent the number of tricycles\n    b, t = symbols('b t')\n    \n    # The number of vehicles is the sum of bicycles and tricycles\n    equation1 = Eq(b + t, 300)\n    \n    # Each bicycle has 2 wheels, and each tricycle has 3 wheels\n    # Total number of tricycle wheels is 180 more than total number of bicycle wheels\n    equation2 = Eq(3*t - 2*b, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, t))\n    \n    # We are interested in the number of bicycles, which is represented by 'b'\n    return solutions[b]\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Pattern repeats every 5 rabbits: 1 black, 2 white, 2 grey.\n    # If there are 14 grey rabbits, we need to find how many complete patterns there are\n    # and if there is an additional pattern with less than 2 grey rabbits.\n    \n    # Number of complete patterns\n    complete_patterns = 14 // 2\n\n    # Number of additional grey rabbits not forming a complete pattern\n    additional_grey = 14 % 2\n\n    # If there is an additional grey, it adds 1 black and 2 white to the complete pattern count\n    total_rabbits = complete_patterns * 5 + (3 if additional_grey else 0)\n\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.96\n    years = 5\n\n    value_after_years = initial_value * (depreciation_rate ** years)\n    \n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1\n\n    dividend = divisor * quotient + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = (2015**2) - ((2015 + 1) * (2015 - 1))\n    ans = ans - (2015**2) - (1**2)\n    ans = -1**2\n    return ans\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped_biscuits = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    chocolate_biscuits = total_biscuits - foil_wrapped_biscuits + chocolate_with_foil - neither_chocolate_nor_foil\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total_amount = 398\n    ans = total_amount / 4\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 9 / 1000 + 7 / 100 + 6 / 10 + 4\n    rounded_number = round(number, 1)\n    return rounded_number if rounded_number != 9764.0 else \"Tongtong is correct\"\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of crystals Jason had\n    x = symbols('x')\n    \n    # According to the problem statement\n    equation = Eq((x / 2 + 10) + 20 - 14 + 35, x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Ensure we have a solution to return, and it should not be negative or fractional\n    if solution and solution[0].is_integer and solution[0] > 0:\n        return solution[0]\n    else:\n        return \"No valid solution found.\"\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Since zeros at the end of a number come from multiplying 10,\n    # and 10 is 2 * 5, we only need to count the pairs of 2's and 5's.\n    # In the given product, there are 15 fives and 10 twos.\n\n    # The number of zeros at the end of the number will be\n    # the minimum of the count of 2's and 5's since we need both for a '10'.\n    # We have more 5's than 2's, so we are limited by the number of 2's.\n    number_of_twos = 10\n    number_of_fives = 15\n\n    # The number of zeros at the end of the product will be the number of 10's we can make.\n    number_of_zeros = min(number_of_twos, number_of_fives)\n\n    return number_of_zeros\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original speed in meters per minute, and t be the original time in minutes\n    x, t = symbols('x t')\n\n    # If speed increases by 25%, new speed is 1.25x and time taken will be t/1.25\n    # Decrease in time is 20 minutes, hence original time t - new time t/1.25 is 20\n    equation1 = Eq(t - t/1.25, 20)\n\n    # If speed decreases by 45, new speed is x - 45\n    # Increase in time is 75% of the original time, hence new time is t + 0.75t\n    equation2 = Eq((t + 0.75*t) * (x - 45), x * t)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, t))\n\n    # The distance is speed (x) times time (t)\n    distance = solutions[x] * solutions[t]\n\n    return distance\n\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    decimal_permutations = [''.join(p) for p in permutations(digits)]\n    count = len(decimal_permutations) * 4  # Each permutation can have the decimal point in four places\n    return count\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    # Olaf had initially thrice as many carrots as Anna\n    equation1 = Eq(olaf, 3 * anna)\n\n    # After giving away 335 carrots, Anna had twice as many carrots as Olaf\n    # olaf - 335 because Olaf gave away 335 carrots\n    # anna + 335 because Anna received the 335 carrots Olaf gave away\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    ans = solutions[anna]\n\n    return ans\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_of_bala = 10\n    ali_and_bala = 2\n    \n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_of_bala\n\n    return total_people\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    pence_per_plant = 85\n    pounds_to_spend = 30\n    pence_to_spend = pounds_to_spend * 100\n    number_of_plants = pence_to_spend // pence_per_plant\n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Use set operation logic:\n    # Let A be the number of blue Dodges, B be the number of total Dodges,\n    # so number of black Dodges is (B - A).\n    # The number of Fords is the total number of cars minus the number of Dodges.\n    # So the number of blue Fords is the total number of blue cars minus the number of blue Dodges (A).\n    # We have 25 black Dodges, so B - A = 25, and hence, A = B - 25.\n    # The number of blue Fords is 18 (blue cars) - A.\n    # The total number of Fords is 60 (total cars) - B.\n\n    # Add the equation for the blue Fords:\n    A = blue_cars - (total_cars - fords - black_dodges)  # Same as A = 18 - (60 - 25 - 25)\n\n    return A\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Max number of balls you could pick without getting all colors would be if you\n    # picked all of one color and all but one of the second color.\n    # So you should pick all balls of the two colors with the least number of balls and one more.\n    # In this case, 8 blue balls + 10 red balls + 1 (to ensure getting a green one)\n    min_picks = 8 + 10 + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    # Start by assuming the smallest possible number\n    num = 0\n    # Loop until the conditions are met\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # The smallest composite number\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        if (B > 1 and any(B % i == 0 for i in range(2, B))) and \\\n           (C > 1 and any(C % i == 0 for i in range(2, C))) and \\\n           (D > 1 and any(D % i == 0 for i in range(2, D))):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_worked = 5  # From Monday to Friday\n\n    total_earnings = daily_earnings * days_worked  # Total amount earned in a week\n\n    return total_earnings\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2) # Number of ways to choose 2 teams from 6 without repetition\n\n    return num_games\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    \n    # Since each child must get at least one apple, we distribute one to each child first\n    apples_distributed = children\n    \n    # Remaining apples after each child receives one\n    remaining_apples = total_apples - apples_distributed\n    \n    # In the least favorable case, the remaining apples should be distributed as evenly as possible\n    # We add one apple to the child with the most, then distribute the rest evenly\n    # The least number of apples the kid with the most can get is the remainder \n    # divided by the number of children plus the initial one apple each child received\n    \n    least_for_most = (remaining_apples // children) + 1  # The +1 is for the initial apple\n    \n    # Since the remaining apples have been distributed as evenly as possible,\n    # we need to calculate the exceptional case where one child can receive one more apple\n    if remaining_apples % children > 0:\n        least_for_most += 1\n    \n    return least_for_most\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n    return math.gcd(math.gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    marks_per_correct = 3\n    marks_deducted_per_wrong = 2\n    total_questions = 50\n    total_marks = 125\n\n    # Let the number of questions Andrew answers correctly be 'right_answers',\n    # and the number of questions he answers incorrectly be 'wrong_answers'.\n\n    # We have two equations based on the problem statement:\n    # 1. right_answers + wrong_answers = total_questions\n    # 2. marks_per_correct * right_answers - marks_deducted_per_wrong * wrong_answers = total_marks\n\n    # We can use these equations to solve for 'right_answers'.\n\n    # Loop through all possible values for 'right_answers' (0 to total_questions)\n    # and calculate 'wrong_answers' using the first equation.\n    # If the second equation holds true, then we've found the correct number of 'right_answers'.\n    for right_answers in range(total_questions + 1):\n        wrong_answers = total_questions - right_answers\n        # Check if the total score matches with the current number of right and wrong answers\n        if (marks_per_correct * right_answers - marks_deducted_per_wrong * wrong_answers) == total_marks:\n            return right_answers\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    counting_end = 10\n    total_counts = 30\n    clock_numbers = 12\n\n    # The starting point on the clock is (counting_end - total_counts) % clock_numbers\n    starting_point = (counting_end - total_counts) % clock_numbers\n\n    # Correct the starting point if the result is 0, it means he started at 12 o'clock\n    starting_point = clock_numbers if starting_point == 0 else starting_point\n\n    return starting_point\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for i in range(10):\n        if (2 + 9 + 6 + i + 1 + 2) % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for i in range(2, 2011):\n        next_number = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_number)\n    return sequence[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (24 * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    initial_distance = 2 * 40  # Distance covered in the first 2 hours\n    remaining_distance = 280   # Remaining distance\n    total_time = 2 + (remaining_distance / 70)  # Total time for the trip\n    total_distance = initial_distance + remaining_distance  # Total distance for the trip\n    average_speed = total_distance / total_time  # Average speed for the whole trip\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bob = symbols('alan bob')\n    \n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_423 = 423 % 4\n    remainder_326 = 326 % 4\n\n    ans = (remainder_423 * remainder_326) % 4\n\n    return ans\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # We are given an arithmetic sequence with an initial term of 23 and common difference of 2\n    # The sum of the first n terms of an arithmetic sequence is given by S_n = n/2 * (first_term + last_term)\n    # We know that S_n = m^2, so we need to solve for n and m where m^2 = n/2 * (23 + (2k - 1))\n    # Rewrite the equation: m^2 = n/2 * (2k + 22)\n    # Since sum is square of an integer, the number of terms (n) and the last term (2k - 1)\n    # must make the product n*(2k + 22) a perfect square\n\n    from sympy import symbols, solve, Eq\n    \n    k, m, n = symbols('k m n', integer=True)\n    \n    # We know that k > 30, so the minimum value for k is 31\n    min_k = 31\n\n    # Equation derived from the formula given\n    eq = Eq(m**2, n/2 * (2 * k + 22))\n\n    # Check values of k greater than 30 until we find an m that is a whole number\n    while True:\n        # Manually calculate last_term for this value of k\n        last_term = 2 * min_k - 1\n        \n        # Substitute values of k and last_term in the equation\n        possible_m_values = solve(eq.subs({k: min_k}), (m, n))\n\n        # Check for whole number solutions\n        for m_val, n_val in possible_m_values:\n            if m_val.is_integer and m_val > 0 and n_val.is_integer and n_val > 0:\n                return m_val\n\n        min_k += 1\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1 * 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + daily_saving - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_cow_per_day = 1\n\n    total_parts = cows * days * parts_per_cow_per_day\n    return total_parts\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    men_ratio = 37\n    women_to_children_ratio = 4 / 5\n    men_more_than_children = 12\n\n    # Assuming total visitors are 100x (a multiple of 100 for easier calculation)\n    total_men = 37  # Since men are 37%\n\n    # Remaining visitors are women and children, which is 63%\n    women_and_children = 63\n\n    # Now, let's find out the number of children.\n    # If x is the number of children, then 4x is the number of women (according to the ratio).\n    # Also, men are 12 more than children, so number of men = x + 12.\n    # We assume the total to be 100 (percentage), hence:\n    # (total_men) + (4x + x) = 100\n    # x + 12 + 4x + x = 100\n    # x (number of children) = (100 - total_men - 12) / 6\n    children = (100 - total_men - men_more_than_children) / 6\n    women = 4 * children\n\n    # The number of women in terms of the actual visitors is:\n    # women / 100 = women (in percentage) / total percentage\n    # Hence, the percentage of women is (women_and_children - children)\n    women_percentage = women_and_children - children\n    actual_women = (women_percentage / 100) * (100 + men_more_than_children)\n\n    return int(actual_women)\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Amount of oil sold from each bucket\n\n    # Equation representing the new weight of the big bucket after selling x kilograms\n    equation_big = Eq(89 - x, 12 * (45 - x))\n\n    # Solve the equation for x\n    oil_sold = solve(equation_big, x)\n\n    return oil_sold[0]\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_train_to_work_late = 0.7\n    prob_train_home_late = 0.4\n    \n    # Probability that both trains are on time\n    prob_both_trains_on_time = (1 - prob_train_to_work_late) * (1 - prob_train_home_late)\n    \n    # Probability that at least one train is late\n    prob_at_least_one_late = 1 - prob_both_trains_on_time\n    \n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a banana and an apple.\n    banana, apple = symbols('banana apple')\n\n    # Create equations based on the information given.\n    # Ellie's transaction: 2 bananas + 3 apples = 3 dollars\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    # Beth's transaction: 3 bananas + 2 apples = 4 dollars\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n\n    # Solve the system of equations for the price of banana and apple.\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost of 10 bananas and 10 apples for Annabella.\n    cost_for_annabella = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return cost_for_annabella\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_has_now = 100\n\n    strawberries_from_mother = lena_has_now - (lena_had_initially - lena_gave_away)\n    \n    return strawberries_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # 10 through 99 inclusive\n    numbers_without_six = 8 * 8  # Removing options for tens and units place with 6\n\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Apr 2023', '%d %b %Y')\n    end_date = datetime.strptime('18 May 2023', '%d %b %Y')\n    days_off = (end_date - start_date).days + 1\n\n    return days_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    \n    sum_last_digit = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    ans = (sum_last_digit ** 3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n\n    time_to_meet = distance / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, orange = symbols('mango pear orange')\n    \n    # Given equations\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, orange))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    # Every pair of lines can intersect at one point unless they are parallel\n    # With n lines, there can be a maximum of nC2 intersections (combinations of n lines taken 2 at a time)\n    from math import comb\n    num_lines = 13\n    max_intersections = comb(num_lines, 2)\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    ans = 9744 // 7\n    return ans\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = (5 ** 20) % 10\n    last_digit_7s = (7 ** 20) % 10\n\n    ans = (last_digit_5s * last_digit_7s) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n    pencils = 28\n    pens = 63\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22 / 7\n    AB = CD = 14\n    # The perimeter consists of two quadrants (half of a circle's circumference)\n    # and two semicircles (also half of a circle's circumference).\n    # Full circle's circumference = 2 * pi * radius\n    # Since AB and CD are diameters of the semicircles, their radius would be half of AB (or CD).\n    # The radius of the semicircles is 7 cm, the radius of the quadrants is also 7 cm\n    radius_semicircles = radius_quadrants = AB / 2\n    # Perimeter of each quadrant and each semicircle is half the circumference of a full circle\n    perimeter_semicircle = (pi * radius_semicircles)  # each semicircle\n    perimeter_quadrant = (pi * radius_quadrants)  # each quadrant\n\n    # Total perimeter is sum of perimeters of 2 semicircles and 2 quadrants\n    total_perimeter = 2 * perimeter_semicircle + 2 * perimeter_quadrant\n    return total_perimeter\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_packet = symbols('rice_packet')\n\n    total_pasta_cost = 6 * 95  # 6 packets of pasta at 95 pence each\n    total_cost = 11.70 * 100  # total cost in pence\n\n    equation = Eq(5 * rice_packet + total_pasta_cost, total_cost)\n\n    solution = solve(equation, rice_packet)\n\n    return solution[rice_packet]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5 and 7\n    for num in range(600, 700, 5):  # The number must end with 0 or 5 to be divisible by 5\n        if num % lcm == 0:\n            return num\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    percentage = 30 / 100\n    two_thirds = 2 / 3\n    number = 45\n\n    return percentage * two_thirds * number\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_days_together = 12\n    days_energetic = 20\n\n    # Rate at which the energetic painter can paint per day\n    rate_energetic = 1 / days_energetic\n\n    # Combined rate of both painters per day\n    combined_rate = 1 / total_days_together\n\n    # Rate at which the lazy painter can paint per day\n    rate_lazy = combined_rate - rate_energetic\n\n    # Number of days the lazy painter would take to paint the house on his own\n    days_lazy = 1 / rate_lazy\n\n    return days_lazy\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while True:\n        if num_pies % 4 == 0 and num_pies % 6 == 0:\n            return num_pies\n        num_pies += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Rational\n    from sympy.solvers.diophantine import diophantine\n    from sympy import Eq\n    \n    a, b, c = symbols('a b c', integer=True)\n    # Create the equation based on the given nested fraction.\n    equation = Eq(1 + 1 / (a + 1 / (b + 1 / c)), Rational(13, 10))\n    # Find the solutions where a, b, and c are whole numbers.\n    sol_set = diophantine(equation)\n\n    # Extract correct solution where a, b, and c are positive.\n    for sol in sol_set:\n        if all(num > 0 for num in sol):\n            a_val, b_val, c_val = sol\n            break\n    # Compute the final answer according to the formula.\n    ans = a_val + 2 * b_val + 3 * c_val\n    \n    return ans\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n\n    return girls\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n    # Adding the remainders gives us the remainder of the sum\n    sum_remainder = (remainder_a + remainder_b) % 8\n    return sum_remainder\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Given the sum of the consecutive numbers\n    total_sum = 1650\n    # Since they're consecutive and there are 15 of them\n    number_of_terms = 15\n    # The average of these numbers is the total sum divided by the number of terms\n    average = total_sum / number_of_terms\n    # The middle term in the sequence of consecutive numbers is the average\n    middle_term = average\n    # Because the numbers are consecutive and symmetrical about the middle term\n    # the largest and the smallest would be symmetric around the middle term too\n    # Hence, the smallest number is the middle term - 7 (because 15/2 = 7.5, rounding down)\n    smallest_number = middle_term - 7\n    # Similarly, the largest number is the middle term + 7\n    largest_number = middle_term + 7\n    # Their sum would be\n    sum_largest_smallest = largest_number + smallest_number\n\n    return int(sum_largest_smallest)\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    each_skirt_cloth = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    used_for_skirts = each_skirt_cloth * num_skirts\n    remaining_cloth = total_cloth - used_for_skirts\n    cloth_for_each_blouse = round(remaining_cloth / num_blouses, 1)\n\n    return cloth_for_each_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    # Start with single digit numbers.\n    current_length = 9\n    digit_length = 1\n    n = 2019\n\n    # Subtract the lengths of the single, two-digit, three-digit... numbers\n    # until we find the length bracket where the 2019th digit falls.\n    while n > current_length * digit_length:\n        n -= current_length * digit_length\n        current_length *= 10\n        digit_length += 1\n        \n    # Calculate the actual number that contains the 2019th digit.\n    number = (current_length // 9) + (n - 1) // digit_length\n\n    # Find the specific digit within that number.\n    digit_index = (n - 1) % digit_length\n    return int(str(number)[digit_index])\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice - alice, 240)\n    equation2 = Eq(cindy - bernice, 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # In the worst case, the guard could find the correct key for the last room only after trying all the 11 keys.\n    # So, for each room, one less key needs to be tried (as each time a correct key is found, it's removed from the set).\n    # Thus, the number of attempts is the sum of the first 11 positive integers minus 1 (since the last room will have only one key left).\n    \n    # Using the formula for the sum of an arithmetic series: n(n + 1)/2\n    attempts = (11 * (11 + 1)) // 2\n\n    # However, for each room except the first, one trial is saved because once a key is found, it is removed from the pool.\n    # So, we subtract the number of rooms - 1 (for the last room, there is no need to try the key) from the total attempts.\n    attempts -= (11 - 1)\n\n    return attempts\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6 + 1/2\n    basket_mass_kg = 500 / 1000\n    kitten_mass_kg = 0.6\n    kittens_total_mass_kg = kitten_mass_kg * 4\n    cat_mass_kg = total_mass_kg - basket_mass_kg - kittens_total_mass_kg\n    return cat_mass_kg\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    digit_2_count = 3\n    digit_3_count = 2\n\n    permutations_5_digits = factorial(total_digits)\n    permutations_2 = factorial(digit_2_count)\n    permutations_3 = factorial(digit_3_count)\n\n    # Number of combinations for the 5 digits\n    all_combinations = permutations_5_digits // (permutations_2 * permutations_3)\n\n    # Subtract combinations that do not form a 4-digit number (leading zero)\n    combinations_with_leading_2 = factorial(total_digits - 1) // (factorial(digit_2_count - 1) * factorial(digit_3_count))\n\n    ans = all_combinations - combinations_with_leading_2\n    return ans\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    total_siblings = 3 + 4  # Mary's three brothers and four sisters\n    total_people = total_siblings + 1  # Including Mary\n    eggs_bought = total_siblings * total_people  # Each person buys an egg for each sibling\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    departure_time = 7 * 60 + 50  # Convert 7:50 AM to minutes\n    arrival_time = 8 * 60 + 40  # Convert 8:40 AM to minutes\n\n    journey_duration = arrival_time - departure_time\n\n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for apples and bananas\n    apples, banana = symbols('apples banana')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    # Solve the equations to find the cost of apples and bananas\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_handbag = 80 / (1 - 3/5)\n    original_amount = remaining_after_handbag / (1 - 1/5)\n    return original_amount\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Since this is a two grade arithmetic sequence, we can see the difference is increasing by an arithmetic sequence as well\n    # The differences are: 6 - 3 = 3, 10 - 6 = 4, 15 - 10 = 5\n    # The difference is increasing by 1 each time, which makes it a second grade arithmetic sequence\n    # Therefore, the next difference should be 5 + 1 = 6\n\n    # The last known number in the sequence is 15, and the next difference is 6\n    next_number = 15 + 6\n\n    return next_number\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    grandpa_current_age = 72\n    johnny_current_age = 8\n\n    # Equation: grandpa's future age = 5 * Johnny's future age\n    equation = Eq(grandpa_current_age + years, 5 * (johnny_current_age + years))\n\n    # Solve for the future years\n    future_years = solve(equation, years)\n\n    return future_years[0]\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_into_bottle = 5\n    remaining_oil = total_oil - oil_poured_into_bottle\n    number_of_tanks = 6\n    \n    oil_per_tank = remaining_oil / number_of_tanks\n    return oil_per_tank\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money_initial = symbols('money_initial')\n\n    # Spent 1/6 of his money and an additional $5 on a DVD.\n    money_after_dvd = money_initial - money_initial/6 - 5\n\n    # Spent 2/5 of his remaining money and an additional $12 on magazines.\n    money_after_magazines = money_after_dvd - 2/5 * money_after_dvd - 12\n\n    # Equation based on the fact that he had $24 left.\n    equation = Eq(money_after_magazines, 24)\n    \n    # Solve for the initial amount of money.\n    result = solve(equation, money_initial)\n\n    return result[0]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    final_amount = 2519.42\n    time_period = 3 \n\n    # We know that A = P * (1 + r)^n\n    # But we need to solve for r, the interest rate\n    interest_rate = ((final_amount / principal) ** (1 / time_period)) - 1\n    # Round the interest rate to nearest tenth of a percent\n    interest_rate_percent = round(interest_rate * 100, 1)\n\n    return interest_rate_percent\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip is 8th from the front\n    pip_position = 8\n    # Bud is 10th from the end\n    bud_position_from_end = 10\n    # There are 4 children between Pip and Bud\n    children_between = 4\n    \n    # Total number of children in the queue is the position of Pip\n    # plus the children between Pip and Bud, plus Bud's position counting from the end\n    total_children = pip_position + children_between + bud_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    sum_odd = sum(range(1, 51, 2))\n    sum_even = sum(range(2, 51, 2))\n    ans = abs(sum_even - sum_odd)\n    return ans\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    bob_has_more = 15\n    colin_gives = 25\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + bob_has_more)\n    # Colin gives Bob 25 cards, Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + colin_gives, 3 * alan)\n\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variables\n    m, n, x = symbols('m n x')\n\n    # Define the custom operation\n    custom_operation = lambda m, n: 5*m + 3*n\n\n    # From the equation x ~Î~ 9 = 37, we can substitute m = x and n = 9\n    equation = custom_operation(x, 9) - 37\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n\n    # Return the value of x\n    return solution_x[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case to get 3 balls of each color without having 4 of same color:\n    # She can take out 3 blue, 3 orange, and 2 yellow balls (the maximum of each without having 4 of the same color)\n    max_without_4_same = (3 + 3 + 2)\n\n    # To be sure to get 4 balls of the same color, she needs to take out one more ball\n    balls_to_take_for_4_same = max_without_4_same + 1\n\n    return balls_to_take_for_4_same\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # If she gave 20 oranges to each elderly, 10 elderly will not receive any oranges.\n    # This implies there are (E - 10) elderly, where E is the total number of elderly.\n    \n    # If she gave 16 oranges to each elderly, she would have enough oranges to pack 25 boxes of oranges, each containing 2 dozen oranges.\n    # 1 dozen = 12 oranges\n    # 25 boxes of oranges, each containing 2 dozen oranges = 25 * 2 * 12\n    total_oranges = 25 * 2 * 12 # Total number of oranges she has\n    \n    # She would have enough oranges for E elderly if she gave 16 to each.\n    # so total_oranges = E * 16\n    \n    # We can now set up two equations:\n    # E - 10 = total_oranges / 20\n    # E = total_oranges / 16\n\n    # By solving these two equations, we find E\n    E = total_oranges // 16  # Number of elderly\n    \n    # Now we need to calculate how many oranges Janice should give to each elderly.\n    # Each elderly must receive the same number of oranges.\n    oranges_per_elderly = total_oranges // E\n\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    remaining_soil_weight = full_weight - (1/5)*full_weight\n    empty_weight = 27 - remaining_soil_weight\n    return empty_weight\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Tim's and Tyler's cookies\n    tim_cookies, tyler_cookies = symbols('tim_cookies tyler_cookies')\n\n    # Equation representing the ratio of their cookies before the sale\n    equation1 = Eq(tim_cookies / 6, tyler_cookies * 3 / 8)\n\n    # Equation representing the ratio after Tyler sold 96 cookies\n    equation2 = Eq(tim_cookies, 9 * (tyler_cookies - 96))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tim_cookies, tyler_cookies))\n\n    # Calculate the total number of cookies at first\n    total_cookies_at_first = solutions[tim_cookies] + solutions[tyler_cookies]\n\n    return total_cookies_at_first\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Defining equations based on the information provided\n    equation1 = Eq(chocolate, vanilla + 72)         # 72 more chocolate than vanilla.\n    equation2 = Eq(blueberry, vanilla - 36)         # 36 lesser blueberry than vanilla.\n    equation3 = Eq((chocolate / 6) + (2 * vanilla / 3) + (7 * blueberry / 9), 427) # Cupcakes left after selling.\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # Number of chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return chocolate_sold\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    water_poured = 24\n\n    full_tank = water_poured / part_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    red_initial, white_initial = symbols('red_initial white_initial', integer=True)\n    red_added_by_pip = symbols('red_added_by_pip', integer=True)\n    white_added_by_bud = symbols('white_added_by_bud', integer=True)\n    \n    # Equations based on the problem statement\n    eq1 = Eq(red_initial / white_initial, 3/2)  # Initial ratio of red to white marbles\n    eq2 = Eq((red_initial + red_added_by_pip) / white_initial, 5/3)  # Ratio after Pip added red marbles\n    eq3 = Eq((red_initial + red_added_by_pip) / (white_initial + white_added_by_bud), 5/4)  # Final ratio\n    eq4 = Eq(white_added_by_bud, red_added_by_pip + 100)  # Bud added 100 more white marbles than Pip added red marbles\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (red_initial, white_initial, red_added_by_pip, white_added_by_bud))\n\n    # Return the number of white balls initially in the box\n    return solutions[white_initial]\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval1 = 24\n    interval2 = 30\n    least_common_multiple = lcm(interval1, interval2)\n    \n    # next departure time in minutes after 9:00 a.m.\n    next_departure = least_common_multiple\n    \n    # Convert minutes to hours and minutes\n    hours = next_departure // 60\n    minutes = next_departure % 60\n    \n    # Starting time is 9:00 a.m., so add elapsed hours and minutes\n    hours += 9\n    minutes += 0\n    \n    # Format to 24-hour clock if hours are >= 24\n    hours = hours % 24\n    \n    return (hours, minutes)\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainders = [(i, i % 8) for i in range(8)]\n    a_rem = [num for num, rem in remainders if rem == 6][0]\n    b_rem = [num for num, rem in remainders if rem == 7][0]\n\n    a = a_rem\n    b = b_rem\n    \n    return (a + b) % 8\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    digit_count = 0\n    for number in range(2, 57):\n        digit_count += str(number).count('6')\n    return digit_count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # If there are 5 desks in front of Jessica and Jessica's desk itself, that's 6 desks up to Jessica.\n    jessica_desks = 5 + 1\n    \n    # There is 1 desk which is Jessica's that is in front of Judy.\n    judy_desks = 1\n    \n    # If there are 7 desks behind Judy's desk itself, that's 8 desks from Judy backwards.\n    behind_judy = 7 + 1\n    \n    # The total number of desks is the sum of desks up to Jessica, Jessica's desk (counted in Judy's), and the desks behind Judy.\n    total_desks = jessica_desks + judy_desks + behind_judy\n    \n    return total_desks\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the average weight before anyone joined, and n be the number of people in the group.\n    # We have two equations derived from the given conditions:\n    # (n*x + 45) / (n + 1) = 61      => Equation for average after Aaron joined.\n    # (n*x + 45 + 71) / (n + 2) = 62  => Equation for average after Ben joined.\n\n    # From the first equation: n*x + 45 = 61*(n + 1)\n    # From the second equation: n*x + 116 = 62*(n + 2)\n\n    # Simplify the first equation: n*x + 45 = 61n + 61\n    # Simplify the second equation: n*x + 116 = 62n + 124\n\n    # Subtract the second equation from the first:\n    # (n*x + 45) - (n*x + 116) = (61n + 61) - (62n + 124)\n    # Simplify it: -71 = -n - 63\n\n    # Isolate n: n = 8\n\n    # Now, replace n in the first equation to find x (average weight before Aaron joined):\n    # n*x + 45 = 61*(n + 1)\n    # 8*x + 45 = 61*9\n    # 8*x = 61*9 - 45\n    n = 8\n    x = (61 * (n + 1) - 45) / n\n    return x\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        a, b, c, d, e = p\n        if a == '0' or c == '0':\n            continue\n        num1 = int(a + b)\n        num2 = int(c + d + e)\n        product = num1 * num2\n        if len(str(product)) == 5 and set(str(product)) == set(p):\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people = 6\n    original_hours = 15\n    desired_hours = 2\n\n    # Calculate the work done by one person in one hour\n    work_per_person_per_hour = 1 / (people * original_hours)\n\n    # Calculate the total work needed for the bridge\n    total_work = people * work_per_person_per_hour * original_hours\n\n    # Calculate the number of people needed to complete the work in 2 hours\n    people_needed = total_work / (work_per_person_per_hour * desired_hours)\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    initial_white_balls = 1991\n    initial_black_balls = 1000\n    total_balls_removed = 2989\n    \n    # Ming will stop when one colour is finished.\n    # Every time he removes two of the same colour, he adds one black back to the bag.\n    # Every time he removes one of each colour, the count for black goes down by one.\n    # So for every pair of blacks removed, one is added back, resulting in one less black ball overall.\n    # For every mixed pair, one black is removed.\n    # Hence, the number of black balls will decrease by one for every two balls Ming takes out.\n    \n    # Calculate the remaining black balls:\n    remaining_black_balls = initial_black_balls - total_balls_removed // 2\n    \n    # However, Ming cannot remove more black balls than there originally are, so:\n    remaining_black_balls = max(0, remaining_black_balls)\n    remaining_white_balls = initial_white_balls if remaining_black_balls > 0 else initial_white_balls - (total_balls_removed - initial_black_balls)\n    \n    # Calculate the remaining white balls:\n    # If black balls are finished, all subsequent removed pairs will be white.\n    \n    remaining_balls = remaining_black_balls if remaining_black_balls else remaining_white_balls \n    color = 'black' if remaining_black_balls else 'white'\n    \n    return (remaining_balls, color)\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert meters to centimeters\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30  # Harry's initial amount in pounds\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70  # 70p converted to pounds\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4  # Cost of four glasses of orange juice\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = initial_amount - total_spent\n\n    return change_left\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    # Divide the count by 2 because (a, b) and (b, a) are considered the same\n    # (order does not matter)\n    return count // 2\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for units in range(2, 10): # units digit can be from 2 to 9\n        hundreds = units - 2   # hundreds digit is 2 less than the units\n        count += 1             # tens digit can be anything from 0 to 9, which is 10 possibilities\n    return count * 10          # multiply the count by 10 for the ten possibilities of the tens place\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_han, daughter = symbols('mr_han daughter')\n    \n    total_mass = Eq(mr_han + daughter, 91.2)\n    mass_ratio = Eq(mr_han, 3 * daughter)\n    \n    solution = solve((total_mass, mass_ratio), (mr_han, daughter))\n    \n    return solution[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - (2/5))\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        ans += (2 * i - 1)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n    \n    for c1 in coin_values:\n        for c2 in coin_values:\n            for c3 in coin_values:\n                total = c1 + c2 + c3\n                unique_totals.add(total)\n                \n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P = 6000  # principal amount\n    A = 8029.35  # amount after 5 years\n    n = 5  # number of years\n    x = symbols('x')  # interest rate symbol\n\n    # Compound interest formula: A = P * (1 + r/n)^(nt), where n = 1 for annually\n    equation = Eq(P * (1 + x / 100)**n, A)\n\n    # Solve for x\n    interest_rate = solve(equation, x)\n\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # If Samantha has more votes than anyone else, the other two can have at most the same number of votes as each other.\n    # Let's call the number of votes the second student gets x.\n    # The third student can also have at most x votes, ensuring Samantha has more.\n    # Since all votes must be cast, we have Samantha's votes + x (second student's) + x (third student's) = 25.\n    # The smallest integer value for x that satisfies the requirement that Samantha has more votes is when x is maximum.\n    # To maximize x, we must minimize Samantha's votes which happens when she has just one more vote than the others.\n    # So, 2x + (x + 1) = 25 => 3x + 1 = 25 => 3x = 24 => x = 8.\n    # Therefore, Samantha must have 8 + 1 votes at the minimum to have more than anyone else.\n    minimum_votes_for_samantha = 8 + 1\n    return minimum_votes_for_samantha\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1  # Subtracting 1 because the loop exits after exceeding 291 digits\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    return (13 / 25) * 100\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g_conversion_rate = 1000\n    weight_in_kg = 2.4\n    weight_in_g = weight_in_kg * kg_to_g_conversion_rate\n    return weight_in_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_spent = 1500\n    spent_on_chairs = 360\n    percent_spent_on_chairs = (spent_on_chairs / total_spent) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pages she has read\n    # Let y be the number of pages she hasn't read\n    x, y = symbols('x y')\n\n    # According to the problem, we have the ratio x:y = 1:5\n    equation1 = Eq(x/y, 1/5)\n\n    # After reading 80 more pages, x + 80 will be 70% of the total pages x + y\n    equation2 = Eq(x + 80, 0.7 * (x + y))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total number of pages in the magazine is x + y\n    total_pages = solutions[x] + solutions[y]\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    total_points = 95\n    vivi_advantage = 15\n    points_per_correct = 10\n    points_per_wrong = -5\n    total_questions = 10\n\n    # Let x be the number of questions CC answered correctly\n    # Then CC's points will be 10x + (-5)(10 - x)\n    # Vivi's points will be CC's points + 15\n    # Their combined points are 95\n    # So, 10x - 5(10 - x) + 10x - 5(10 - x) + 15 = 95\n    # This simplifies to: 20x - 50 + 15 = 95\n    # Further simplification gives us: 20x = 130\n    # So, x = 130 / 20 = 6.5\n    # But x must be an integer, since CC can't answer half a question correctly\n    # Thus CC must have answered either 6 or 7 questions correctly\n    # We test which one fits the scenario\n\n    for x in range(total_questions + 1):\n        cc_points = points_per_correct * x + points_per_wrong * (total_questions - x)\n        vivi_points = cc_points + vivi_advantage\n        if cc_points + vivi_points == total_points:\n            return x\n\n    return None\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    # Calculate the weight of flour per person\n    flour_per_person = 650 / 15\n    \n    # Calculate the total weight of flour needed for 18 people\n    total_flour = flour_per_person * 18\n    \n    return total_flour\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "from itertools import combinations\n\ndef solution():\n    number = \"2581953752\"\n    min_sum = float('inf')\n    for cut1, cut2 in combinations(range(1, len(number)), 2):\n        num1 = int(number[:cut1])\n        num2 = int(number[cut1:cut2])\n        num3 = int(number[cut2:])\n        total_sum = num1 + num2 + num3\n        min_sum = min(min_sum, total_sum)\n    return min_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    return 7000000 / mm_to_m_conversion_factor\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # As per Pip's answer, smallest possible divisor is 1\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    # Two variables representing the original numbers\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the original numbers\n    x, y = symbols('x y')\n    \n    # Equation 1: The sum of the two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # Equation 2: Oliver's incorrect sum is 5.87, which is x + 0.1y or y + 0.1x (since we don't know which number the decimal was shifted)\n    # We can consider both cases and then filter out the correct solution based on the condition that both x and y must be positive.\n    equation2_1 = Eq(x + 0.1*y, 5.87)\n    equation2_2 = Eq(0.1*x + y, 5.87)\n    \n    # Solve the system of equations\n    solution1 = solve((equation1, equation2_1), (x, y))\n    solution2 = solve((equation1, equation2_2), (x, y))\n    \n    # Filter valid solutions (both numbers must be positive)\n    valid_solutions = [s for s in [solution1, solution2] if all(val > 0 for val in s.values())]\n\n    # There should be exactly one valid solution\n    assert len(valid_solutions) == 1\n    valid_solution = valid_solutions[0]\n    \n    # Calculate 100 times the difference between the two original numbers\n    difference = abs(valid_solution[x] - valid_solution[y])\n    ans = 100 * difference\n    \n    # Return the final result\n    return ans\n\n# Call the function to get the answer\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Since we want to ensure that we get 3 marbles of the same color,\n    # we have to consider the worst case scenario using the pigeonhole principle.\n    \n    # Worst case: we take out all blue and yellow marbles, but not 3 of the same.\n    # That would be 2 blue + 2 yellow + 1 red = 5 marbles and still not have 3 of the same color.\n    \n    # Next marble we take out must be the third one of a color (either blue or yellow),\n    # no matter what color it is.\n    # So we add one more marble to the worst case.\n    \n    return 5 + 1  # 5 from worst case scenario + 1 to ensure 3 of the same color\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # Let the common factor for science club to literature club be s,\n    # and the common factor for literature club to math club be l.\n    # This leads to the equations:\n    # 9s + 10s + 5l + 7l = 99,\n    # where 10s = 5l (because they both represent the literature club).\n\n    # Solve for s and l to find actual numbers of students in the science, literature, and math clubs.\n    # 19s + 12l = 99, and s = l/2\n\n    # Replace s with l/2 in the first equation:\n    # 19(l/2) + 12l = 99\n    # Multiply everything by 2 to clear the fraction:\n    # 19l + 24l = 198\n    # 43l = 198\n    # Divide both sides by 43 to solve for l:\n    l = 198 / 43\n\n    # Now we calculate the number of students in the literature and math clubs:\n    literature_members = 10 * l/2 # Since 10s is the number of literature members and s = l/2\n    math_members = 7 * l # Since 7l is the number of math members.\n    \n    # Calculate the difference in members:\n    difference = math_members - literature_members\n\n    return int(difference)\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age, mother_age = symbols('melissa_age mother_age')\n\n    equation1 = Eq(mother_age - melissa_age, 24)  # Since when Melissa was 8, her mother was 32, the difference is 24\n    equation2 = Eq(mother_age, 3 * melissa_age)  # Now, Melissa's mother is three times as old as Melissa\n\n    solutions = solve((equation1, equation2), (melissa_age, mother_age))\n\n    return solutions[melissa_age]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    # Each corner is counted for two sides, so for one side the number of unique flowers is:\n    unique_flowers_per_side = flowers_per_side - 1\n    \n    # Since a square has 4 sides, the total number of flowers is:\n    total_flowers = unique_flowers_per_side * 4 + corners\n    \n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    first_cut = 4.8\n    second_cut = 2.73\n    third_piece = original_length - (first_cut + second_cut)\n\n    pieces = sorted([first_cut, second_cut, third_piece])\n    difference = pieces[-1] - pieces[0]\n\n    return difference\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n\n    # Thomas's solution assumes the total 5/6 refers to the cost of the book and bag, which is incorrect.\n    # The spendings on the book and the bag should be considered separately.\n    # The book cost 1/3 of the total money, and the bag cost 1/2 of the remainder.\n    # Let's denote the total money she had at first as x.\n    # The cost of the book is (1/3)x and the cost of the bag is (1/2)(2/3)x because she spent half of the remainder.\n\n    # Therefore, the equation is: (1/3)x + (1/2)(2/3)x = 132\n    # This simplifies to: \n    # (1/3)x + (1/3)x = 132\n    # (2/3)x = 132\n\n    # Now solving for x:\n    x = total_cost * (3/2)  # Multiplying both sides of (2/3)x = 132 by (3/2) gives us x\n\n    return x\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a basketball and a volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equation 1: The cost of 5 basketballs and 6 volleyballs is $325\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n\n    # Equation 2: A basketball costs $10 more than a volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # The price of a basketball\n    basketball_price = solutions[basketball]\n\n    return basketball_price\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    # Generate the 47-digit number as a string\n    number_47_digits = (pattern * (47 // len(pattern))) + pattern[:47 % len(pattern)]\n    # Calculate sum of all digits\n    ans = sum(int(digit) for digit in number_47_digits)\n    return ans\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_6_bottles = 2.52\n    cost_per_bottle = cost_for_6_bottles / 6\n    cost_for_9_bottles = cost_per_bottle * 9\n    return cost_for_9_bottles\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for j_correct in range(26):\n        j_wrong = 25 - j_correct\n        j_points = 4 * j_correct - j_wrong\n        for jo_correct in range(j_correct):\n            jo_wrong = 25 - jo_correct\n            jo_points = 4 * jo_correct - jo_wrong\n            if j_points == jo_points == 61:\n                return 25 - j_correct\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    total_pupils = 40\n    avg_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n\n    girls = total_pupils - boys\n    equation = Eq(boys * avg_boys_pencils + girls * avg_girls_pencils, total_pupils * avg_pencils)\n\n    number_of_boys = solve(equation, boys)\n\n    return number_of_boys[0]\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    # Loop through possible two-digit numbers\n    for a in range(1, 10):       # a cannot be 0 as it is the first digit of a two-digit number\n        for b in range(10):      # b can range from 0 to 9\n            ab = 10 * a + b      # Construct the number ab\n            ba = 10 * b + a      # Construct the number ba\n            if 8 * ab == 3 * ba: # Check the condition given in the problem\n                return ab        # Return the number ab if condition is satisfied\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    for cupcakes in range(1, 1000):  # Assuming Kate won't order more than 1000 cupcakes\n        if cupcakes <= 20:\n            cost = cupcakes * 4.5 + 12\n        else:\n            cost = 20 * 4.5 + (cupcakes - 20) * 4.5 * 0.8 + 12\n\n        if cost == 120:\n            return cupcakes\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n    equation1 = Eq(3 * pig + goat, 440)\n    equation2 = Eq(pig + 2 * goat, 280)\n\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(str(i) + '1') == 3 * int('1' + str(i)):\n            return i\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pence = 128 * 100  # Convert Â£1.28 to pence\n    total_pence += 57  # Add 57 pence\n    pounds = total_pence / 100  # Convert back to pounds\n    return pounds\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    solutions = solve(equation, A)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_position_from_back = 12\n    total_people = people_in_front_of_rose + rose_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1 / 10\n    lazy_rate = symbols('lazy_rate')\n    combined_rate = 1 / 6\n\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    lazy_days = solve(equation, lazy_rate)\n\n    return 1 / lazy_days[lazy_rate]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number John thought of\n    x = symbols('x')\n\n    # Write the equation that represents the problem\n    # (x + 45) / 3 = 2 * x\n    equation = Eq((x + 45)/3, 2*x)\n\n    # Solve the equation\n    solved = solve(equation, x)\n\n    # Since `solved` is a list of solutions, we take the first (and only) solution\n    ans = solved[0]\n    return ans\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    num_terms = 50\n    first_term = 1\n    last_term = 50\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for x1 in range(2, 10):\n        for x2 in range(2, 10):\n            x3 = 10 - x1 - x2\n            if x3 >= 2 and len({x1, x2, x3}) == 3:\n                count += 1\n            elif x3 >= 2 and len({x1, x2, x3}) == 2:\n                count += 1 / 2\n    return int(count)\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_read_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # There are 4 colors: red, blue, yellow, green\n    # To ensure 4 marbles of different colors, we need to consider the worst-case scenario.\n    # This scenario would be drawing all marbles of one color, then all of another, and so on,\n    # until we get to the point where the next marble we draw must be of a new color.\n\n    # Start with the maximum number from one color (draw all the red ones)\n    red = 12\n    \n    # Then draw all from another color (draw all the blue ones)\n    blue = 9\n    \n    # Then draw all from another color (draw all the yellow ones)\n    yellow = 8\n    \n    # At this point, the next marble we draw will ensure we have a green marble.\n    # Therefore, we add one to the tally to get our final answer.\n    green = 1\n    \n    # Total number of marbles drawn to ensure 4 marbles of different colors\n    ans = red + blue + yellow + green\n    \n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number = '5' * 19 + '0' + '9' * 19  # Replace square with a placeholder 0\n    for digit in range(10):  # Check digits 0-9 for divisibility by 7\n        test_number = int(number[:19] + str(digit) + number[20:])\n        if test_number % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Tom is the 10th from the start, thus there are 9 children shorter than Tom\n    # Since no two children have the same height and they are all whole numbers,\n    # The maximum height for Tom occurs when the 9 children before him are the shortest possible\n    # This means they are 131 - 31, 131 - 30, ..., 131 - 23 (since there are 31 - 9 = 22 children taller than Tom)\n    # Therefore, we add 1 to the height of the child just before Tom to find Tom's maximum height\n    max_height_tom = (131 - 22) + 1\n\n    return max_height_tom\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if i % 10 == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds_place in range(1, 10):\n        for tens_place in range(1, 10):\n            for ones_place in range(1, 10):\n                if (tens_place == 2 * hundreds_place and \n                    hundreds_place == ones_place + 1 and \n                    hundreds_place + tens_place + ones_place == 15):\n                    return 100 * hundreds_place + 10 * tens_place + ones_place\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a = 3  # First number\n    b = 10  # Second number\n    for _ in range(2021):  # We already have the first two values, so we start from the third and proceed until 2023rd\n        a, b = b, (a + b) % 3  # Update a, b and take modulo 3 to get the remainder only\n    return b  # The result is in b after the last iteration\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    # Equation: 208 - magic_number = 9 * (136 - magic_number)\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n    \n    # Solving the equation for magic_number\n    magic_number_solution = solve(equation, magic_number)\n    \n    # Get the magic number from the solution\n    return magic_number_solution[0]\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    for students in range(1, 1000):  # We assume the number of students is less than 1000 for practical reasons\n        if (students * 5 + 3) % 4 == 0 and (students * 5 + 3) - ((students * 4) + 9) == 0:\n            return students\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books = 30\n    anthea_books = jason_books - 4  # After giving 4 books away, Jason has as many books as Anthea\n    # Let's say Anthea originally had 'a' books\n    # Then Jason will be left with 'a' books after giving away 4\n    # So, Anthea originally had 'a' books and after receiving 4 from Jason, she would have 'a + 4' books\n    # Since they both have the same number of books after the transaction, we can write the equation:\n    # a + 4 = jason_books - 4\n    # Solving for 'a' gives us Anthea's original number of books:\n    a = jason_books - 8  # a + 4 = 30 - 4 -> a = 26\n\n    # The difference between Jason's and Anthea's books originally\n    difference = jason_books - a\n\n    return difference\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    number = 840\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_price = 7.85\n    bar_price = 1.83\n    total_paid = 20\n\n    total_chocolate_price = box_price + 2 * bar_price\n    change = total_paid - total_chocolate_price\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    total_money = 200\n    alan_to_bella_ratio = Eq(alan / bella, 4 / 3)\n    alan_chloe_difference = Eq(alan - chloe, 20)\n    total_amount = Eq(alan + bella + chloe, total_money)\n    \n    solutions = solve((alan_to_bella_ratio, alan_chloe_difference, total_amount), (alan, bella, chloe))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # There are 5 family members in total, but Lily and her mother's positions are fixed\n    # So, we need to arrange the remaining 3 family members\n    \n    # The number of ways we can arrange 'n' items is n!\n    # Hence, for 3 members, it will be 3!\n    number_of_ways = factorial(3)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    difference = 4\n    last_term = 99\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    total_seats = num_terms * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible 2-digit numbers from the digits 1-8 without repetition\n    all_combinations = list(permutations(range(1, 9), 2))\n    valid_numbers = []\n\n    # Filter based on the given conditions\n    for tens, ones in all_combinations:\n        if tens * 2 == ones or ones + tens == 9 or tens - 5 == ones or tens % 2 == 1:\n            valid_numbers.append(tens * 10 + ones)\n\n    # Sorting numbers to find the smallest, second smallest, second largest, and largest\n    valid_numbers = sorted(set(valid_numbers))\n\n    # Find the smallest number based on the first condition\n    smallest_number = next(num for num in valid_numbers if num % 10 == (num // 10) * 2)\n\n    # Find the largest number based on the second condition\n    largest_number = next(num for num in reversed(valid_numbers) if (num % 10) + (num // 10) == 9)\n\n    # Find the second largest number based on the third condition\n    second_largest_number = next(num for num in reversed(valid_numbers) if (num // 10) - 5 == (num % 10))\n\n    # Exclude found numbers from the list to get the remaining numbers\n    remaining_numbers = [num for num in valid_numbers if num not in (smallest_number, largest_number, second_largest_number)]\n\n    # There should only be one odd number among these 4 numbers.\n    # So exclude the odd number and get the remaining (which would be even, hence the second smallest)\n    for num in remaining_numbers:\n        if num % 2 == 0:\n            return num\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')\n    \n    children_ratio = 3 / 5\n    men_ratio = 1 / 2\n    \n    children = children_ratio * total_visitors\n    remaining_visitors = total_visitors - children\n    men = men_ratio * remaining_visitors\n    \n    equation = Eq(children - men, 140)\n    \n    total_visitors_solution = solve(equation, total_visitors)\n    \n    return total_visitors_solution[0]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    average_initial = 120\n    average_final = 150\n    num_numbers_initial = 3\n    num_numbers_final = 4\n    \n    sum_initial = average_initial * num_numbers_initial\n    sum_final = average_final * num_numbers_final\n    \n    fourth_number = sum_final - sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    start = 5\n    \n    correct_answer = (n * (n + 1) * (2 * n + 1) // 6) - ((start - 1) * start * (2 * (start - 1) + 1) // 6)\n    \n    kimmy_answer = 1240  # Kimmy's proposed answer\n    \n    # Compare Kimmy's answer with the correct answer\n    ans = (kimmy_answer == correct_answer, correct_answer)\n    return ans\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    # Sam had $40$ stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave $20\\%$ of his stickers to Peter\n    sam_after_giving = sam - (sam * 20 / 100)\n    peter_after_receiving = peter + (sam * 20 / 100)\n    \n    # Peter gave $25\\%$ of his new sticker count to Sam\n    sam_final = sam_after_giving + (peter_after_receiving * 25 / 100)\n    peter_final = peter_after_receiving - (peter_after_receiving * 25 / 100)\n    \n    # In the end, Sam has $96$ stickers more than Peter\n    equation2 = Eq(sam_final, peter_final + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -2\n\n    # Let's denote \"q\" as the number of questions she answered correctly\n    for q in range(total_questions + 1):\n        # The number of questions she answered incorrectly is total_questions - q\n        # The total points will be the sum of the points of correct and incorrect answers\n        total_points = q * correct_points + (total_questions - q) * wrong_points\n        if total_points == 51:\n            # Return the number of questions she answered correctly\n            return q\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    # Let x be the total amount of money Amy had originally.\n    # After spending 6/11 of her money and $5 on highlighters,\n    # she has (5/11)x - 5 left.\n    #\n    # She then spends 3/10 of the remainder and $12 on fountain pens.\n    # The remainder after buying the highlighters is now (5/11)x - 5,\n    # and she spends (3/10) of this and an additional $12, leaving her with $30.\n    # So we have (7/10)((5/11)x - 5) - 12 = 30\n    #\n    # Solve for x to find the original amount of money.\n\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (7/10) * ((5/11) * x - 5) - 12 - 30\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    actual_subtrahend = 75\n\n    minuend = incorrect_subtrahend + incorrect_result\n    correct_result = minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    # Find the least common multiple of 3 and 4,\n    # which represents the frequency a customer will get both pen and file\n    lcm = 12  # LCM of 3 and 4 is 12\n\n    # Number of customers who receive both pen and file\n    # is equal to the number of multiples of 12 from 1 to 40\n    num_customers = 40 // lcm\n\n    return num_customers\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let s be Sally's age now and g be Gillian's age now\n    s, g = symbols('s g')\n    # According to the problem, the ratio of their current ages is 2:7\n    eq1 = Eq(2*g, 7*s)\n    # In 15 years, their ages will be s+15 and g+15, and the ratio will be 1:2\n    eq2 = Eq((s+15) * 2, (g+15))\n    # Solve the system of equations\n    sol = solve((eq1, eq2), (s, g))\n    return sol[s]\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_per_apple = 1 / 9\n    total_apples = 8 / mass_per_apple\n    cakes_baked = total_apples / 4\n\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    # Given that (box/9) * 45 = 35\n    # We need to find the value of 'box'\n    numerator = 35 * 9\n    ans = numerator / 45\n\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_apart = 1.5\n    total_seeds = 12\n\n    circumference = distance_apart * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Let x be the number of pieces of paper that were cut into three parts.\n    # Initially, there were 10 pieces of paper, and cutting one piece into three parts adds two extra pieces.\n    # The total number of pieces after cutting becomes 10 (initial) + 2x (added by cutting).\n    # The final number of pieces is 16, so we can set up the equation: 10 + 2x = 16\n    # Solving for x gives us x = (16 - 10) / 2\n    \n    x = (16 - 10) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    boys = 12\n    girls = 8\n    average_boys = 10\n    average_total = 14\n\n    total_score = (boys + girls) * average_total\n    total_boys_score = boys * average_boys\n    total_girls_score = total_score - total_boys_score\n    average_girls = total_girls_score / girls\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    i = 0\n    while True:\n        if (i ** 2 + 9) + 16 == (i + 1) ** 2:\n            return i ** 2 + 9\n        i += 1\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Since each envelope after the first division has the same number of postcards\n    # Let's find out the number of postcards per envelope after the first division\n    postcards_per_envelope_first_division = 50 // 5\n    \n    # The second division has 2 envelopes with the same number of postcards as the first division\n    postcards_per_envelope_second_division = postcards_per_envelope_first_division\n    \n    # Since there are two envelopes in the second division, \n    # the total number of postcards added is double the number per envelope\n    total_postcards_second_division = 2 * postcards_per_envelope_second_division\n    \n    # The total number of postcards is the sum of the ones from the first division and the new ones\n    total_postcards = 50 + total_postcards_second_division\n    \n    return total_postcards\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight = 250\n    cost = cost_per_100g * (weight / 100)\n    return cost\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1,10):\n        for j in range(1, 10**i):\n            original_number = j * 10 + 9\n            new_number = int('9' + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Since Harry received exactly two of each coin and 2.50 in total,\n    # the smallest coin must be less than or equal to (2.50 / 2).\n    # Possible coin values in GBP are: 1p, 2p, 5p, 10p, 20p, 50p, Â£1, Â£2.\n    # Therefore, we can rule out any coin greater than Â£1. The largest\n    # coin value we consider is then 50p.\n\n    # We also know that there must be an even number of coins because each coin\n    # has exactly one other coin of the same value.\n\n    # Let's list the possible coin combinations where each is represented twice\n    \n    # Loop through possible smallest coin values\n    possible_coins = [0.01, 0.02, 0.05, 0.10, 0.20, 0.50]\n    \n    # Check combinations to see which coins can sum up to 2.50\n    for smallest_coin in possible_coins:\n        for second_smallest_coin in possible_coins:\n            if second_smallest_coin <= smallest_coin:\n                # Skip, as pairs must be distinct\n                continue\n            for third_smallest_coin in possible_coins:\n                if third_smallest_coin <= second_smallest_coin:\n                    # Skip, as pairs must be distinct\n                    continue\n                # Since each coin is there exactly twice, multiply by 2\n                total_change = 2 * (smallest_coin + second_smallest_coin + third_smallest_coin)\n                # Check if the total is equal to the change Harry got\n                if total_change == 2.50:\n                    # Return the smallest coin since we've found a valid combination\n                    return smallest_coin\n    \n    # If no solution is found by above approach, which is unlikely, return None\n    return None\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    # Let x be the total number of cookies baked at first.\n    # Let y be the number of cookies sold.\n    \n    # According to the problem, Jolie threw away 3/5 of the cookies,\n    # this means she kept 2/5 of the cookies.\n    # Jolie then sold 75% (or 3/4) of the remaining cookies.\n    # Therefore, y = (3/4) * (2/5) * x = (3/10) * x.\n    \n    # It is also given that the cookies she burnt (3/5 of the total) is\n    # 42 more than the number of cookies she sold.\n    # Which means (3/5) * x - y = 42.\n    \n    # Replacing y with (3/10) * x from the first equation into the second equation, we get:\n    # (3/5) * x - (3/10) * x = 42\n    # Simplifying, we have (3/5 - 3/10) * x = 42\n    # which is (6/10 - 3/10) * x = 42\n    # Thus, (3/10) * x = 42\n    # Therefore, x = 42 / (3/10) = 140\n    \n    # So, Jolie baked 140 cookies at first.\n    x = 42 / (3/10)\n    return int(x)\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if ((1070 + y) % 6) == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura is fixed at the front, so she does not affect the permutations.\n    # There are 5 students left to arrange, since the question mentions \"other four students\".\n\n    total_students_except_rita = 5 \n\n    # Rita cannot stand at the end, so she has 4 options (2nd to 5th place). \n    # After placing Rita, we have 4 students to arrange in 4 spots.\n\n    permutations_after_rita = factorial(4) \n\n    # Calculate the total number of ways they can form the line.\n    total_ways = total_students_except_rita * permutations_after_rita\n\n    return total_ways\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def operation(a, b):\n        return (a + b) * a\n\n    ans = operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_50 = regular_total_price * 0.5\n    additional_discount_20 = discount_50 * 0.2\n    final_price = discount_50 - additional_discount_20\n    return final_price\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Since Jerry travels three-sevenths (3/7) of the distance, Kevin travels four-sevenths (4/7) of the distance\n    # Their speed ratio is in proportion to the distance they travel\n    # So, Kevin/Jerry = (4/7) / (3/7) = 4/3\n    kevin_speed = 80\n    jerry_speed = kevin_speed * (3/4)  # speed ratio is 4/3 so jerry's speed is 3/4 of kevin's\n    jerry_travel_part = 2/5  # Jerry travels 2/5 of the road length in each hour\n\n    # The whole road length is jerry's speed divided by the part of the road he travels each hour\n    road_length = jerry_speed / jerry_travel_part\n    return road_length\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4/7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for i in range(32, 1000, 4):\n        if (i - 3) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define time formats for parsing\n    time_format = \"%d %B %H:%M\"\n\n    # Define the departure and arrival times in strings\n    departure = \"24 August 05:00\"\n    arrival = \"24 August 11:00\"\n\n    # Parse the departure and arrival times\n    departure_time_singapore = datetime.strptime(departure, time_format)\n    arrival_time_london = datetime.strptime(arrival, time_format)\n\n    # Since Singapore is 7 hours ahead, we subtract 7 hours from the departure time to get UTC\n    departure_time_utc = departure_time_singapore - timedelta(hours=7)\n\n    # Calculate the flight duration by subtracting the departure (UTC) from the arrival (London time, which is UTC+0)\n    flight_duration = arrival_time_london - departure_time_utc\n\n    return flight_duration.seconds // 3600  # Convert flight duration to hours\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    # Let b represent the number of boys, and (40 - b) represent the number of girls\n    # The total number of pencils owned by the boys is 20 * b\n    # The total number of pencils owned by the girls is 60 * (40 - b)\n    # The total number of pencils in the class is 35 * 40\n    # Thus, we can create the following equation:\n    # 20 * b + 60 * (40 - b) = 35 * 40\n    # We can solve this equation for b to find the number of boys\n    \n    total_pupils = 40\n    total_pencils = 35 * total_pupils\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n    \n    # 20 * b + 60 * (40 - b) = 35 * 40\n    # 20b + 2400 - 60b = 1400\n    # -40b = -1000\n    # b = 25\n    \n    b = (total_pencils - avg_girls_pencils * total_pupils) / (avg_boys_pencils - avg_girls_pencils)\n    return int(b)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # probability of Sally winning a game\n    win_prob = 0.3\n    # probability of Sally drawing a game\n    draw_prob = 0.1\n    # probability of Sally losing a game is the remaining probability\n    lose_prob = 1 - win_prob - draw_prob\n\n    # probability that Sally will win exactly one of the two games is calculated by\n    # considering the two possible scenarios: win then lose OR lose then win.\n    # We will add the probability of these two independent events.\n    \n    # Scenario 1: Sally wins the first game and loses the second game\n    prob_s1 = win_prob * (1 - win_prob)\n    \n    # Scenario 2: Sally loses the first game and wins the second game\n    prob_s2 = lose_prob * win_prob\n\n    # Add probabilities of the two scenarios to get the total probability\n    total_prob = prob_s1 + prob_s2\n\n    return total_prob\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    a = 2010\n    b = 2377\n    c = 3111\n\n    # Find differences between the numbers\n    diff_ab = abs(a - b)\n    diff_ac = abs(a - c)\n    diff_bc = abs(b - c)\n\n    # Greatest Common Divisor of the differences will be D\n    D = gcd(gcd(diff_ab, diff_ac), diff_bc)\n\n    # Find the common remainder R using one of the original numbers and D\n    R = a % D\n\n    # Return the sum of D and R\n    return D + R\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # 2-digit numbers start from 10 to 99\n        if (number // 10 + number % 10) % 5 == 0:  # Check if sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Since 1/13 is a recurring decimal, we can find the recurring cycle.\n    recurring_cycle = []\n    remainder = 1 % 13\n    while remainder not in recurring_cycle:\n        recurring_cycle.append(remainder)\n        remainder = (remainder * 10) % 13\n\n    # Find the length of the recurring cycle.\n    cycle_length = len(recurring_cycle)\n    \n    # The 2012th decimal place corresponds to a position in the recurring cycle.\n    position_in_cycle = (2012 - 1) % cycle_length  # Subtract 1 since the cycle starts after the decimal point.\n\n    # Find the digit in the 2012th decimal place.\n    digit_in_cycle = (10 * recurring_cycle[position_in_cycle]) // 13\n\n    return digit_in_cycle\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let's denote the initial number of Eddi's cards as 8x and Wiya's as 7x\n    # After giving away 4 cards, Eddi has 8x-4 and Wiya has 7x+4\n    # The new ratio is then (8x-4)/(7x+4) = 18/17\n    # We can set up the following equation: 17*(8x-4) = 18*(7x+4)\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17 * (8*x - 4), 18 * (7*x + 4))\n    solution = solve(equation, x)\n\n    # Since x is an integer multiple, the number of cards Eddi had initially is 8x.\n    eddi_cards_initial = 8 * solution[0]\n\n    return eddi_cards_initial\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # Red to blue ratio is 5:6 so we can calculate red marbles\n    red_marbles = (5/6) * blue_marbles\n    # Red marbles is twice the number of green marbles, so we can calculate green marbles\n    green_marbles = red_marbles / 2\n    # Total number of marbles is the sum of blue, red, and green marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    \n    return int(total_marbles)\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    return piece3\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 2017 + Fraction(7, 8)\n    num2 = 3 + Fraction(2, 3)\n    num3 = 2016 + Fraction(7, 8)\n    num4 = Fraction(11, 3)\n    num5 = 2017 + Fraction(1, 3)\n    num6 = 3 + Fraction(23, 32)\n\n    # Perform the calculation\n    result = ((num1 * num2 - num3 * num4) / ((num5 - num3) * 17)) * num6\n\n    return float(result)\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in Class B\n    x = symbols('x')\n\n    # Class A has 47 more students than Class B\n    classA = x + 47\n\n    # We need to find the number of students to move from Class A to Class B\n    # such that Class A will have 9 more students than Class B\n    # Let y be the number of students to move\n    y = symbols('y')\n\n    # After moving y students, Class A will have (x + 47 - y) students\n    # and Class B will have (x + y) students\n    # We establish the equation according to the problem:\n    equation = Eq(x + 47 - y, x + y + 9)\n\n    # Solve the equation for y\n    solution = solve(equation, y)\n\n    return solution[y]\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    base_cost = 25000\n    selling_price = base_cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    # Since A, B, C are positive integers with A+B+C=31,\n    # to maximize A*B*C, we get maximum value when two numbers\n    # are as close as possible and the third is whatever is left\n    # since the product of numbers close to each other is larger\n    # than spread out numbers (by AM-GM inequality).\n    \n    # We find the closest pair by dividing 31 by 3 and using the integer part\n    closest_pair = 31 // 3\n    \n    # One number will be the (closest_pair + 1) due to integer division\n    first_number = closest_pair\n    second_number = closest_pair\n    third_number = 31 - (first_number + second_number)\n    \n    # Calculate the product\n    max_product = first_number * second_number * third_number\n    return max_product\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, adults, girls = symbols('boys adults girls')\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if all(int(d) % 2 != 0 for d in str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = solutions[y]\n\n    return smaller_number\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # in meters per minute\n    turtle_speed = 30   # in meters per minute\n    total_distance = 6990  # total race distance in meters\n    rabbit_sleep_time = 215  # in minutes\n    start_delay = 10  # in minutes\n\n    # Distance covered by rabbit before sleep\n    rabbit_dist_before_sleep = rabbit_speed * start_delay\n\n    # Time taken by turtle by the time rabbit starts sleeping\n    turtle_time_before_sleep = start_delay\n\n    # Distance covered by turtle by the time rabbit starts sleeping\n    turtle_dist_before_sleep = turtle_speed * turtle_time_before_sleep\n\n    # Turtle continues to run for rabbit_sleep_time minutes\n    turtle_dist_during_sleep = turtle_speed * rabbit_sleep_time\n\n    # Total distance covered by turtle when rabbit wakes up\n    turtle_total_dist = turtle_dist_before_sleep + turtle_dist_during_sleep\n\n    if turtle_total_dist >= total_distance:\n        # Turtle already reached the finish line before rabbit wakes up\n        winner = \"turtle\"\n        distance_between = 0  # because turtle has finished the race\n    else:\n        # Distance left for the rabbit to finish the race after waking up\n        rabbit_dist_left = total_distance - rabbit_dist_before_sleep\n\n        # Time required for the rabbit to finish the race after waking up\n        rabbit_time_after_sleep = rabbit_dist_left / rabbit_speed\n\n        # Distance turtle will cover during the time rabbit finishes the remaining distance\n        turtle_dist_after_sleep = turtle_speed * rabbit_time_after_sleep\n\n        # Total distance covered by the turtle when the rabbit reaches the finish line\n        turtle_total_dist_after_sleep = turtle_total_dist + turtle_dist_after_sleep\n        \n        if turtle_total_dist_after_sleep >= total_distance:\n            winner = \"rabbit\"\n            distance_between = total_distance - turtle_total_dist\n        else:\n            winner = \"turtle\"\n            distance_between = total_distance - turtle_total_dist_after_sleep\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10, 2):  # hundreds_digit must be odd\n        for tens_digit in range(0, 10):\n            for ones_digit in range(0, 10):\n                if (hundreds_digit + tens_digit + ones_digit == 5):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_cost_pence = 24 * 100  # Convert pounds to pence\n    total_avocados = 16 * 2  # Total number of individual avocados\n    cost_per_avocado = total_cost_pence / total_avocados  # Cost per individual avocado\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    counts = Counter()\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            counts[die1 + die2] += 1\n\n    most_common = counts.most_common(1)\n    ans = most_common[0][0]\n    return ans\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')  # Number of girls in the class\n    boys = 36 - girls         # Number of boys in the class\n\n    # Total scores for girls and boys\n    total_girls_score = 88 * girls\n    total_boys_score = 91 * boys\n\n    # Equation based on the total score\n    equation = Eq(total_girls_score + total_boys_score, 36 * 89)\n\n    # Solve the equation\n    solution = solve(equation, girls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    number_of_tables = 8\n    people_at_corners = 2  # Each corner will be counted twice when tables are put together\n\n    total_people = people_per_square_table * number_of_tables - people_at_corners * (number_of_tables - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    current_count = 0\n    page_number = 1\n\n    while current_count < total_digits:\n        current_count += len(str(page_number))\n        page_number += 1\n\n    return page_number - 1\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    dividend = 9786\n    divisor = 7\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let r be the number of rhinos, d be the number of deer, and o be the number of ostriches\n    # From the problem we know that:\n    # r = d\n    # r + d + o = 28 (number of heads)\n    # 4r + 4d + 2o = 88 (number of legs, since rhinos and deer have 4 legs, and ostriches have 2)\n\n    # Since r = d, we can simplify the equations:\n    # 2r + o = 28\n    # 8r + 2o = 88\n\n    # Now let's solve for r and o:\n    for r in range(29):  # we go up to 29 because there are 28 heads in total\n        o = 28 - 2*r\n        if 8*r + 2*o == 88:\n            return r\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    last_digit_32 = pow(32, 33, 10)  # Calculate the last digit of 32^33\n    last_digit_22 = pow(22, 29, 10)  # Calculate the last digit of 22^29\n    ans = (last_digit_32 - last_digit_22) % 10  # Find the ones digit\n    return ans\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    def num_factors(n):\n        factors_count = 0\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors_count += 1 if i == n // i else 2\n        return factors_count\n    \n    count = 0\n    # All multiples of 15 can be represented as 15 * k\n    # We need only to check the numbers of the form 15 * k have exactly 15 factors\n    # k must start from 1\n    k = 1\n    while True:\n        multiple = 15 * k\n        if num_factors(multiple) == 15:\n            count += 1\n        # If the multiple has more than 15 factors, since factors grow with k, we can stop\n        if num_factors(multiple) > 15:\n            break\n        k += 1\n    return count\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person has\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n\n    # Use the equations to express Boris and Jeffery in terms of Andrew\n    boris_expr = (3 * andrew + 90) - jeffery - 3 * andrew  # Simplified to just 90 - Jeffery\n    jeffery_expr = (3 * andrew + 90) - boris - 3 * andrew  # Simplified to just 90 - Boris\n\n    # Since the question asks for the sum of Boris and Jeffery's marbles, we add the two expressions\n    boris_jeffery_sum = boris_expr + jeffery_expr\n\n    # The sum simplifies further, since Boris and Jeffery cancel each other out\n    sum_of_marbles = 90 + 90  # Simplified sum of their marbles\n\n    return sum_of_marbles\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                diff = B - A\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialize the students and teachers count.\n    students, teachers, total_people = 0, 0, 0\n\n    # Use n to represent the number of layers of students and teachers.\n    # A square array with n layers of students and teachers will have side length of 2n-1.\n    # Start search from 1 layer and increase sequentially.\n    n = 1\n    while True:\n        # Calculate the number of students and teachers in a square array of side length 2n-1.\n        current_students = (2 * n - 1) ** 2 - ((2 * n - 1) - 2) ** 2\n        # Subtract the inner square of students (or teachers, depending on the layer) to get the count of teachers.\n        current_teachers = ((2 * n - 1) - 2) ** 2 - ((2 * n - 1) - 4) ** 2 if n > 1 else 0\n\n        # Update the running total of students and teachers.\n        students += current_students\n        teachers += current_teachers\n\n        # Check if the number of students exceeds the number of teachers by 52.\n        if students - teachers == 52:\n            # Calculate the total number of people in the array (students + teachers).\n            total_people = students + teachers\n            break\n\n        # Update n to consider the next layer.\n        n += 1\n\n    return total_people\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    apples, oranges = symbols('apples oranges')\n\n    # Initial condition: 5/7 of oranges equals apples\n    eq1 = Eq(apples, 5/7 * oranges)\n\n    # After buying 12 more oranges: apples equals 2/3 of (oranges + 12)\n    eq2 = Eq(apples, 2/3 * (oranges + 12))\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Symbols for unknown variables\n    x, y, z = symbols('x y z')\n\n    # Equation representing the complex fraction\n    equation = Eq(2014 / 37, 54 + 1 / (x + 1 / (y + 1 / z)))\n\n    # Making the assumption that x, y, z are integers\n    # Solve the equation for the variables\n    solutions = solve(equation, (x, y, z))\n\n    # Find the solution where x, y, z are distinct\n    for solution in solutions:\n        if len(set(solution)) == 3:\n            return sum(solution)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    result = (10 - 30) % 12\n    if result == 0:\n        start_point = 12\n    else:\n        start_point = result\n    return start_point\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    ans = 200 + 198 + 196 + 194 + 24\n    return ans\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Given the equation: 8 * 80 * 100 = 8^2 * x\n    # We need to find the value of x.\n    \n    # We rewrite 80 as 8 * 10 to make it easier to simplify\n    # 8 * 80 * 100 = 8 * (8 * 10) * 100\n    # Simplifying within the brackets gives us:\n    # 8 * (8 * 10) * 100 = (8^2) * 10 * 100\n    \n    # Now we can cancel out 8^2 on both sides of the equation\n    # (8^2) * 10 * 100 = 8^2 * x\n    # This simplifies to:\n    # 10 * 100 = x\n    \n    # Finally we multiply 10 and 100 to find x\n    x = 10 * 100\n    \n    return x\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    return jackpot // winners\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation representing the amount of oil left in the big bucket\n    equation1 = Eq((89 - x), 12 * (45 - x))\n\n    # Solve the equation for x\n    solved = solve(equation1, x)\n\n    return solved[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n\n    return eddie_apples\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    number = 100  # Smallest three-digit number\n    while not (number % 5 == 1 and number % 6 == 1 and number % 7 == 1):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of five-legged aliens including himself\n    aliens = 6\n    \n    # Cost of shoes per alien (since each needs 5 shoes and shoes are sold in 5s)\n    shoes_cost_per_alien = 78\n    \n    # Cost of socks per alien (each alien has 5 legs and socks are sold in pairs, so each alien needs 3 pairs)\n    socks_cost_per_alien = (5 // 2 + 5 % 2) * 12\n    \n    # Total cost for shoes and socks for all aliens\n    total_cost = (shoes_cost_per_alien + socks_cost_per_alien) * aliens\n    \n    return total_cost\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time = 54 / 60  # converted to hours\n    speed_to_park = 5  # km/h\n    speed_back_home = 4  # km/h\n\n    # Let the distance to the park be x km.\n    # Time to park: x/5, Time back home: x/4\n    # Total time is the sum of the times: x/5 + x/4 = total_time\n    # Solve for x: (4x + 5x) / 20 = total_time\n    \n    x = (total_time * 20) / (4 + 5)\n\n    return x\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    # From the equations given, we find the values of a, b, c\n    a = 31 - 26\n    b = 26 - 20\n    c = 20 - 20  # c should be a prime number, which is not 0.\n\n    # Since c cannot be 0 (as 0 is not a prime number), we adjust the equations.\n    # 31 + a = 26 + b implies  a = b - 5\n    # Since c is also a prime number and c = b - 6, the smallest possible prime value for b that makes c prime as well is 11.\n    b = 11\n    a = b - 5  # a is also a prime number, so this works\n    c = b - 6  # c is also a prime number with this value\n\n    # Calculate the product of a, b, c\n    ans = a * b * c\n    return ans\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let's assume the number of boys is b.\n    # Then the number of girls would be b + 8.\n    # We can set up an equation: b + (b + 8) = total_pupils\n    # Solving for b gives us: 2b + 8 = total_pupils\n    # Hence b = (total_pupils - 8) / 2\n    # The number of girls would then be b + 8\n    boys = (total_pupils - 8) / 2\n    girls = boys + 8\n\n    return int(girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students who like both.\n    both_x = symbols('both_x')\n\n    # According to the problem, number of students who like just apples is 3 times who like both.\n    # The number of students who like just bananas is 5 times who like both.\n    apples = 3 * both_x\n    bananas = 5 * both_x\n\n    # Total students who like apples or bananas (or both) is 35.\n    # The inclusion-exclusion principle states that for two sets A and B,\n    # |A U B| = |A| + |B| - |A â© B|\n    total_students = Eq(apples + bananas - both_x, 35)\n\n    # Solve the equation.\n    solutions = solve(total_students, both_x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the time it takes Lee to type the document alone\n    # Let n be the time it takes Nancy to type the document alone\n    l, n = symbols('l n')\n\n    # Equation1: 1/l + 1/n = 1/10 for working together\n    equation1 = Eq(1/l + 1/n, 1/10)\n\n    # Equation2: Nancy types for 20 hours, Lee types for 6 hours\n    # Nancy would have finished 20/n of the work, and Lee would have finished 6/l of the work\n    equation2 = Eq(20/n + 6/l, 1)\n\n    # Solve the equations for l and n\n    solutions = solve((equation1, equation2), (l, n))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    # initial amount of oranges in kilograms\n    initial_oranges_kg = 3.5\n    # convert grams to kilograms for the amount used in the pie and juice\n    pie_oranges_kg = 550 / 1000\n    juice_oranges_kg = 1050 / 1000\n    # calculate the amount of oranges left after making the pie and juice\n    oranges_left_kg = initial_oranges_kg - (pie_oranges_kg + juice_oranges_kg)\n    \n    return oranges_left_kg\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's define r as the number of pies Rennie baked, and j as the number of pies Joleen baked\n    j, r = symbols('j r')\n\n    # From the problem statement we have two equations\n    # 1. j = r + 5  (Joleen baked 5 more pies than Rennie)\n    eq1 = Eq(j, r + 5)\n\n    # 2. (3/4)*r = (2/3)*j (3/4 of the number of pies Rennie baked was equal to 2/3 of the number of pies Joleen baked)\n    eq2 = Eq(3/4 * r, 2/3 * j)\n\n    # We solve this system of equations\n    solutions = solve((eq1, eq2), (j, r))\n\n    # The total number of pies they baked altogether is j + r\n    return solutions[j] + solutions[r]\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    num_days = 5\n    \n    total_chairs = sum(first_day_chairs + difference * day for day in range(num_days))\n    \n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pound_to_pence = 3.00 * 100\n    percentage = (pence / pound_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12/25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choosing two items among three (pencil & ruler, pencil & pen, ruler & pen)\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    # Sum of all possible combinations\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for n in range(100, 191):\n        if n % 4 == 3 and n % 13 == 1:\n            return n\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Worst case scenarios for each color:\n    # Take 2 blue marbles, still no guarantee of 3 blues\n    # Take 2 yellow marbles, still no guarantee of 3 yellows\n    # Already have 1 red, taking one more gives no guarantee of 3 reds\n    # So the worst case before getting 3 of the same color is\n    # 2 blues + 2 yellows + 2 reds (to guarantee the next one must be the third of a color)\n    \n    # Add 1 because the next one will certainly be the third marble of the same colour\n    marbles = (2 + 2 + 2) + 1\n    \n    return marbles\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # Define two equations based on the problem\n    # 6 * A + 25 = B\n    # A = 10x + y\n    # B = 2 * A => B = 20x + 2y\n    # Now substituting B from the second equation into the first equation gives us:\n    # 6 * A + 25 = 20x + 2y -> Since A = 10x + y, we get:\n    # 6 * (10x + y) + 25 = 20x + 2y\n    # 60x + 6y + 25 = 20x + 2y\n    # Rearrange terms:\n    # 60x + 6y - 20x - 2y = -25\n    # 40x + 4y = -25\n    \n    # However, since x and y are digits, 40x + 4y cannot possibly be a negative number.\n    # Therefore, the assumption that leads to this must be incorrect.\n    # The correct approach:\n    # 6A + 25 = B\n    # But since B = 20x + 2y (not 200 + 10x + y as John mistakenly assumed), we have:\n    # 6 * (10x + y) + 25 = 20x + 2y\n    # 60x + 6y + 25 = 20x + 2y\n    # Solve for x and y:\n    # 60x - 20x + 6y - 2y = -25\n    # 40x + 4y = -25\n    \n    # Since B is 200 + 10x + y, the correct equation should be:\n    # 6A + 25 = 200 + 10x + y\n    for x in range(10): # since x and y are single digit numbers\n        for y in range(10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n\n    return None\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    values = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(values)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_of_ages = 45\n    increase_in_age_over_5_years = 5 * 2  # Both Mary and her son will be 5 years older\n    future_sum_of_ages = current_sum_of_ages + increase_in_age_over_5_years\n    return future_sum_of_ages\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # Cost in pence\n    amount_paid = 100     # Â£1 = 100 pence\n    change = amount_paid - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    paid_tax = 90\n\n    price_of_sofa = paid_tax / tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Sebastian's and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Equation1: Garrett is 24 years older than Sebastian\n    equation1 = Eq(garrett, sebastian + 24)\n    # Equation2: In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = people * travel_cost_per_person\n    total_hotel_cost = people * days * hotel_cost_per_day_per_person\n    total_spending_money = people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n    return total_cost\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n\n    nth_term = first_term + (term_number - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n\n    apples = oranges + 150\n    bananas = oranges + 50\n\n    total_fruits_eq = Eq(oranges + apples + bananas, 1400)\n\n    solutions = solve(total_fruits_eq, oranges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Treating all math books as one unit, all chemistry books as one unit, and all physics books as one unit.\n    # We then have 4 units (math, chemistry, physics, biology) to arrange.\n    units_to_arrange = factorial(4)\n    \n    # Within the math books, we can arrange the 4 books in 4! ways.\n    math_books_arrangement = factorial(4)\n    \n    # Within the chemistry books, we can arrange the 3 books in 3! ways.\n    chemistry_books_arrangement = factorial(3)\n    \n    # Within the physics books, we can arrange the 2 books in 2! ways.\n    physics_books_arrangement = factorial(2)\n    \n    # Multiply the arrangements of the units with the arrangements \n    # within each of the subject book groups.\n    total_arrangements = (units_to_arrange * math_books_arrangement *\n                          chemistry_books_arrangement * physics_books_arrangement)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len(\"ORANGES\"))\n    # Permutations where all vowels AE, EO, OA, OE, AO, AE are together\n    vowels_permutations = factorial(len(\"ORANGES\") - 3) * factorial(3)\n    \n    # Subtract permutations where vowels are together from total permutations\n    ans = total_permutations - vowels_permutations\n    return ans\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    return 70017007\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    metres_to_kilometres = 1000\n    height_kilometres = height_metres / metres_to_kilometres\n    return height_kilometres\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    # Let's assume the number of girls is G and the number of boys is B\n    # From the first statement, we have the equation B = G - 65\n    \n    # After some boys and girls left for recess, the number of boys in the hall is (1 - 2/5)B\n    # And the number of girls in the hall is (1 - 3/7)G\n    # According to the second statement, these two numbers are equal\n    # So, (1 - 2/5)B = (1 - 3/7)G\n    \n    # Let's now replace B with G - 65 in the above equation and solve for G\n    # (1 - 2/5)(G - 65) = (1 - 3/7)G\n    # (3/5)G - (3/5)*65 = (4/7)G\n    # Multiply both sides by 35 (the common denominator for 5 and 7) to clear the fractions\n    # 21G - 21*65 = 20G\n    # This simplifies to G = 21*65\n    \n    G = 21 * 65\n    B = G - 65\n    \n    # Now we need to calculate the number of students that remained in the hall\n    # For boys it is (1 - 2/5)B and for girls it is (1 - 3/7)G\n    boys_remain = (1 - 2/5) * B\n    girls_remain = (1 - 3/7) * G\n    \n    # The total number of students that remained in the hall is the sum of boys_remain and girls_remain\n    total_remain = boys_remain + girls_remain\n    \n    return int(total_remain)\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category_1 = 30\n    category_2 = 40\n    category_3 = 45\n\n    total_ways = category_1 * category_2 * category_3\n\n    return total_ways\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2 + 1):\n        for b in range(a, 12//2 + 1):\n            c = 12 - a - b\n            if c >= b and a + b > c:  # Triangle inequality theorem\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import isprime\n\n    # Since 31 + a = 26 + b, rearrange to find b in terms of a: b = 5 + a\n    # Similarly, since 26 + b = 20 + c, rearrange to find c in terms of b: c = 6 + b\n    # Ultimately, c = 11 + a because b = a + 5 (replace b with a+5 in c = 6 + b)\n\n    # Start with 2 (the smallest prime number) and find the prime triplets that satisfy the conditions\n    a = 2\n    while True:\n        b = a + 5\n        c = a + 11\n        if isprime(a) and isprime(b) and isprime(c) and (31 + a == 26 + b) and (26 + b == 20 + c):\n            # we have found our prime numbers a, b, c\n            break\n        a += 1\n\n    return a * b * c\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # There are 6 people to sit around an 8 seater circular table. \n    # The number of different orders can be considered as the number of permutations \n    # of 6 people around the table (circular permutations).\n    # Since rotating the table results in the same order, we have to divide the total \n    # permutations by the number of seats (8) due to circular rotation.\n    \n    # Calculate number of linear permutations\n    linear_permutations = factorial(6)\n    \n    # To find circular permutations, divide the linear permutations by the number of seats\n    circular_permutations = linear_permutations // 8\n    \n    return circular_permutations\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of stickers each person originally had\n    eugene_original, melvin_original, david_original = symbols('eugene_original melvin_original david_original', integer=True)\n\n    # Define symbols for the number of stickers each person has after all transactions\n    eugene_final, melvin_final, david_final = symbols('eugene_final melvin_final david_final', integer=True)\n\n    # Equation after the first transaction: Eugene gave Melvin twice as many stickers as Melvin had\n    equation1 = Eq(eugene_original - 2*melvin_original, eugene_final)\n\n    # Equation after the second transaction: Melvin gave David as many stickers as David had\n    equation2 = Eq(melvin_original + 2*melvin_original - david_original, melvin_final)\n    \n    # Equation after the third transaction: David gave Eugene as many stickers as Eugene had left\n    equation3 = Eq(david_original + david_original - eugene_final, david_final)\n    \n    # The total number of stickers is unchanged: 260 stickers\n    equation4 = Eq(eugene_original + melvin_original + david_original, 260)\n    \n    # The final ratio of Eugeneâs to Melvinâs to Davidâs stickers was 46:12:7\n    equation5 = Eq(eugene_final/melvin_final, 46/12)\n    equation6 = Eq(melvin_final/david_final, 12/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (eugene_original, melvin_original, david_original, eugene_final, melvin_final, david_final))\n    \n    return solutions[eugene_original]\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # This problem is an example of a game theory problem called Nim.\n    # The winning strategy in Nim for two piles is to always make the XOR of\n    # the number of items in the piles = 0 after your move.\n\n    # Pile A has 35 matches, Pile B has 24 matches\n    pile_A = 35\n    pile_B = 24\n\n    # Find the XOR of the two piles\n    xor_result = pile_A ^ pile_B\n\n    # If the XOR result is not 0, Eddie (the first player) has a winning strategy\n    if xor_result != 0:\n        winning_player = 'Eddie'\n    else:\n        winning_player = 'Wei\\'er' # If the result is 0, Eddie cannot win with a perfect play from Wei'er\n\n    # The winning strategy for Eddie is to make the move that results in\n    # the XOR of the two pile sizes being 0. The move will be determined by\n    # performing an XOR between the current pile size and the XOR result.\n    # The difference will give the amount to remove from one of the piles.\n\n    # Eddie will look at each pile and determine the optimal move.\n    optimal_move_A = pile_A - (pile_A ^ xor_result)\n    optimal_move_B = pile_B - (pile_B ^ xor_result)\n\n    # Eddie should take from the pile that doesn't result in a negative number.\n    if optimal_move_A <= pile_A:\n        winning_strategy = (f'Eddie should take {optimal_move_A} match(es) from pile A')\n    elif optimal_move_B <= pile_B:\n        winning_strategy = (f'Eddie should take {optimal_move_B} match(es) from pile B')\n    else:\n        winning_strategy = 'No winning strategy'  # This case should not happen with optimal play\n\n    return winning_player, winning_strategy\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(80, 55, -4):\n        sum += i - (i - 2)\n    return sum\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = last_term - first_term + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let b be the initial number of boys and g be the initial number of girls.\n    # At first, the number of boys and girls was equal, so b = g.\n    # After 12 boys came in and 8 girls left, we have b + 12 boys and g - 8 girls.\n    # In the end there were twice as many boys as girls, so (b + 12) = 2 * (g - 8).\n    # Since b = g, we can substitute b for g in the equation: (b + 12) = 2 * (b - 8)\n    # Solving for b we get the initial number of boys (and girls, since they were equal).\n\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')  # Only one variable since b = g\n    equation = Eq(b + 12, 2 * (b - 8))\n\n    initial_boys = solve(equation, b)[0]\n\n    # The initial total number of students is the number of boys plus the number of girls.\n    initial_total_students = initial_boys + initial_boys  # Since the initial number of boys and girls is the same\n\n    return initial_total_students\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    return 21 * (2 / 7)\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 7]\n    all_combinations = permutations(digits, 3)\n    count = len(list(all_combinations))\n\n    return count\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Speeds in meters per second\n    speed_1 = 7\n    speed_2 = 5\n    speed_3 = 8\n\n    # Distances in meters\n    distance_1 = 280\n    distance_2 = 400\n    # Total distance is 800, hence the sprint distance is 800 - 280 - 400\n    distance_3 = 800 - distance_1 - distance_2\n\n    # Time = Distance / Speed\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    # Total time is the sum of all three segments\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    import math\n    length_ribbon1 = 15\n    length_ribbon2 = 45\n\n    ans = math.gcd(length_ribbon1, length_ribbon2)\n\n    return ans\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    # We'll check the prime numbers from 2 up to 25\n    for i in range(2, 25):\n        if isprime(i) and isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time = (18, 52)  # Using 24-hour format\n    end_time = (20, 24)\n\n    start_minutes = start_time[0] * 60 + start_time[1]\n    end_minutes = end_time[0] * 60 + end_time[1]\n\n    time_spent = end_minutes - start_minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # equations based on the given information\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((1 - 1/6) * chocolate + (1 - 2/3) * vanilla + (1 - 7/9) * blueberry, 427)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # find the amount of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_lamp_posts = 2\n    # Since there are lamp posts at both ends, we subtract one to get the number of intervals\n    number_of_intervals = number_of_lamp_posts - 1\n    length_of_road = number_of_intervals * distance_between_lamp_posts\n\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    students = 6\n    # Using the Pigeonhole Principle, we add 1 to the total peaches and divide by students\n    peaches_for_max_student = (total_peaches + 1) // students\n\n    # If the division is exact, the maximum is just the quotient, else add 1\n    if (total_peaches + 1) % students == 0:\n        return peaches_for_max_student\n    else:\n        return peaches_for_max_student + 1\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n    ans = end_page - start_page + 1\n    return ans\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    ans = (2/9) * 36\n    return ans\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # The average of the seven consecutive numbers since the sequence is arithmetic\n    # Since there are 7 numbers, the middle number is the fourth number, which is also the average\n    average = 140 / 7\n    \n    # Find the smallest number (first in the sequence)\n    # It will be 3 places before the average since the numbers are consecutive\n    smallest_number = average - 3\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    children_count = solve_congruence(*congruences)\n\n    return children_count[0]\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    total_cost = (10 * 45 + 10 * 27) / 100 # Calculate total cost in pounds\n    change = 10 - total_cost  # Calculate the change from a Â£10 note\n    \n    return change\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day\n    frank_rate = 180 / 10\n    # Ryan's rate of making tables per day\n    ryan_rate = 180 / 15\n\n    # The difference in the rates\n    difference = frank_rate - ryan_rate\n\n    return difference\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3 seats left to arrange for Chantel, Tony, and Cale.\n    # Total possible arrangements for 3 people is 3! (factorial of 3)\n    total_arrangements = 3 * 2 * 1\n\n    # However, Tony cannot sit directly opposite Claire. \n    # Since Claire's seat is fixed, there are 2 possible seats where Tony can sit.\n    # After Tony's seat is fixed, the remaining 2 people can be arranged in 2! ways\n    valid_arrangements_for_tony = 2\n    remaining_seats_arrangement = 2 * 1\n\n    # Total arrangements with restrictions in place\n    total_valid_arrangements = valid_arrangements_for_tony * remaining_seats_arrangement\n\n    return total_valid_arrangements\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    lower_bound = 7.35\n    return lower_bound\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of questions Miss Atkinson marked\n    x = symbols('x')\n    \n    # If she marked at a rate of 4 questions per minute, she would take x/4 minutes\n    # She leaves 5 minutes late, so the time expected to finish marking is x/4 - 5\n    # If she marked at a rate of 6 questions per minute, she would take x/6 minutes\n    # She leaves 5 minutes early, so the time expected to finish marking is x/6 + 5\n\n    # Set the times equal to each other as the actual marking time should be the same\n    equation = Eq(x/4 - 5, x/6 + 5)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Get the number of questions from the solution\n    num_questions = solution[0]\n    \n    return num_questions\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # 75 pence, which is 0.75 pounds\n    number_of_cakes_sold = total_money_raised / price_per_cake\n\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * marks_correct + wrong_answers * marks_wrong == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    \n    spent_at_restaurant = total_money * (3/7)\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    \n    spent_on_fees = remaining_after_restaurant * (2/9)\n    \n    remaining_money = remaining_after_restaurant - spent_on_fees\n\n    return remaining_money\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution('x', 'y')"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    candies_to_give = amy_candies - candies_each\n    return candies_to_give\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    q_days = 8\n    p_hours_per_day = 8\n    q_hours_per_day = 10\n\n    p_work_per_hour = 1 / (p_days * p_hours_per_day)\n    q_work_per_hour = 1 / (q_days * q_hours_per_day)\n    \n    total_work_per_hour = p_work_per_hour + q_work_per_hour\n    total_hours_needed = 1 / total_work_per_hour\n    hours_per_day = 8\n    \n    days_needed = total_hours_needed / hours_per_day\n    return int(days_needed) if days_needed.is_integer() else int(days_needed) + 1\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Total time taken for 3 chimes = 6 seconds\n    # Time between chimes = (Total time - 1 chime) / (number of intervals)\n    # Number of intervals for 3 chimes = 3 - 1 = 2\n    time_between_chimes = (6 - 1) / 2\n    \n    # Number of intervals for 6 chimes = 6 - 1 = 5\n    num_intervals_for_six_chimes = 6 - 1\n    \n    # Total time taken for 6 chimes = Time between chimes * number of intervals for 6 chimes + 1 chime\n    total_time_for_six_chimes = time_between_chimes * num_intervals_for_six_chimes + 1\n    \n    return total_time_for_six_chimes\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimeters = 3.2 * 100\n    difference_in_centimeters = meters_to_centimeters - 30\n    return difference_in_centimeters\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10\n    sum_of_squares = 3 * n * (n + 1) * (2 * n + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # converting pence to pounds\n    total_cost = 5 * cost_per_kg\n    total_paid = 10\n\n    change = total_paid - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    # Initialize the count of digits\n    digit_count = 0\n\n    # Loop through all page numbers\n    for page in range(1, 41):\n        # Convert the page number to a string and get its length,\n        # which corresponds to the number of digits\n        digit_count += len(str(page))\n    \n    return digit_count\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100 - 4):\n        first = i\n        second = i + 1\n        third = i + 2\n        fourth = i + 3\n        fifth = i + 4\n\n        if ((first + second + third) % 37 == 0 or (first + second + fourth) % 37 == 0 or\n            (first + second + fifth) % 37 == 0 or (first + third + fourth) % 37 == 0 or\n            (first + third + fifth) % 37 == 0 or (first + fourth + fifth) % 37 == 0 or\n            (second + third + fourth) % 37 == 0 or (second + third + fifth) % 37 == 0 or\n            (second + fourth + fifth) % 37 == 0 or (third + fourth + fifth) % 37 == 0):\n            if ((first + second + third) % 60 == 0 or (first + second + fourth) % 60 == 0 or\n                (first + second + fifth) % 60 == 0 or (first + third + fourth) % 60 == 0 or\n                (first + third + fifth) % 60 == 0 or (first + fourth + fifth) % 60 == 0 or\n                (second + third + fourth) % 60 == 0 or (second + third + fifth) % 60 == 0 or\n                (second + fourth + fifth) % 60 == 0 or (third + fourth + fifth) % 60 == 0):\n                return fifth  # the largest number\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n    factors = factorint(120)\n\n    total_factors = 1\n    for factor in factors.values():\n        total_factors *= (factor + 1)\n\n    return total_factors\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temp_midnight_thursday = -8\n    temp_midday_friday = 13\n    overall_temp_change = temp_midday_friday - temp_midnight_thursday\n    return overall_temp_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 15):\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "import math\n\ndef solution():\n    product = 180\n    min_difference = math.inf  # Setting minimum difference to infinity initially\n\n    # Finding factors of the product\n    for i in range(1, int(math.sqrt(product)) + 1):\n        if product % i == 0:\n            # j is the corresponding factor of i\n            j = product // i\n            difference = abs(i - j)\n            if difference < min_difference:\n                min_difference = difference\n    \n    return min_difference\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let the time taken by Max to cover the distance be t minutes.\n    # Thus, Luca takes t + 10 minutes to cover the distance.\n    # Using the speeds ratio 2:3, we can say that time ratios are inverse (Luca:Max = 3:2)\n    # Therefore, 3*(t) = 2*(t + 10)\n    \n    # Simplify the equation to find t\n    t = (2 * 10) / (3 - 2)\n    \n    # Now, if Luca walks at double his usual speed, his time would be halved.\n    # So, the time taken by Luca at double speed would be (t + 10) / 2.\n    luca_double_speed_time = (t + 10) / 2\n\n    return luca_double_speed_time\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Jimmy corrected Tom's calculation, as Tom didn't consider that for each wrong question,\n    # he loses a total of 3 marks (1 for the wrong answer and 2 more for not having that question right).\n  \n    # Let x be the number of correct answers, and let y be the number of wrong answers.\n    # According to the question:\n    # 2x - y = 71 (Because Tom got 2 marks for each correct answer and lost 1 mark for each wrong answer)\n    # x + y = 40 (Because there were 40 questions in total)\n\n    # Solve the two equations:\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(2 * x - y, 71)\n    equation2 = Eq(x + y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # worst case scenario, we draw all other patterns than A (12 patterns per suit)\n    max_draws_without_A = 12 * 4\n    \n    # To ensure we get at least one A, we need one more draw\n    return max_draws_without_A + 1\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Time jogged in hours from 6:30 AM to 7:30 AM is 1 hour\n    time_jogged = 1\n    # Speed while jogging in miles per hour\n    speed_jogging = 6.5\n\n    # Distance covered while jogging\n    distance_jogging = time_jogged * speed_jogging\n\n    # Time walked in hours from 7:30 AM to 9:30 AM is 2 hours\n    time_walked = 2\n    # Speed while walking in miles per hour\n    speed_walking = 4.5\n    \n    # Distance covered while walking\n    distance_walking = time_walked * speed_walking\n\n    # Total distance traveled\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship_still_water = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship_still_water + speed_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let the number of pens and pencils originally bought be x.\n    # After giving 5 pencils to Ali, she has x-5 pencils left.\n    # She had twice as many pens as pencils left, so she had 2 * (x - 5) = x pens.\n    # Then she bought another 18 pens, so in the end she has x + 18 pens.\n\n    # From the equation 2 * (x - 5) = x, we can solve for x.\n    # 2 * x - 10 = x\n    # x = 10 (number of pens and pencils originally bought)\n\n    # The number of pens she has in the end is x + 18.\n    # So, she has 10 (original) + 18 (additional) = 28 pens in the end.\n    \n    original_pens = 10\n    additional_pens = 18\n    total_pens = original_pens + additional_pens\n    \n    return total_pens\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    lengths_cut = 45 * 2\n    remaining_length = total_length - lengths_cut\n    num_40cm_pieces = remaining_length // 40\n\n    return num_40cm_pieces\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    grams_for_100_cookies = 100 / cookies_per_gram\n    return grams_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('10:35', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_tennis_of_left_handed = 1 / 10\n    fraction_left_handed_of_total = 0.25\n\n    left_handed_students = left_handed_tennis_players / fraction_tennis_of_left_handed\n    total_students = left_handed_students / fraction_left_handed_of_total\n\n    return int(total_students)\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the three places can be filled with any of the three digits (6, 7, and 8).\n    # So for each place we have 3 choices.\n    \n    choices_per_place = 3\n    \n    # Since we have three places for the three-digit numbers and each can be filled independently,\n    # the total number of different three-digit numbers is the product of the number of choices for each place.\n    total_numbers = choices_per_place ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 10\n\n    total_interest = principal * interest_rate * time\n\n    return total_interest\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_juice = 8 * 3  # 8 cartons, each with 3 liters\n    drank_juice = 9  # drank 9 liters in a week\n\n    remaining_juice = total_juice - drank_juice  # Calculate the remaining juice\n    return remaining_juice\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed1 = 180 # meters per minute\n    time1 = 6    # minutes\n    speed2 = 120 # meters per minute\n    time2 = 8    # minutes\n    \n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n    \n    total_distance = distance1 + distance2\n    \n    return total_distance\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    def count_zeros(n):\n        if n < 10:\n            return 0\n        count, size = 0, 1\n        while n >= 10 ** size:\n            count += size * (9 * 10 ** (size - 1))\n            size += 1\n        count += (n - 10 ** (size - 1) + 1) * size\n        return count\n\n    current_number = 10  # starting from 10 since 0 to 9 contains no zeros\n    total_zeros = 0\n    while True:\n        zeros_in_current = str(current_number).count('0')\n        if total_zeros + zeros_in_current >= 100:\n            break\n        total_zeros += zeros_in_current\n        current_number += 1\n\n    # Now let's find the exact number where the 100th zero occurs\n    while total_zeros < 100:\n        current_number += 1\n        total_zeros += count_zeros(current_number)\n\n    return current_number\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # Add 1 for Elias\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n    \n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    n = 8  # there are 8 consecutive whole numbers\n    total_sum = 2012\n    # Since they are consecutive numbers, we can express them as x, x+1, x+2, ..., x+7.\n    # Their sum is 8x + (1+2+3+...+7).\n    # The sum of first 7 natural numbers is n(n+1)/2 = 7*8/2 = 28.\n    # 8x + 28 = 2012\n    # 8x = 2012 - 28\n    # x = (2012 - 28) / 8\n    x = (total_sum - 28) // n\n    # The largest number is x+7\n    largest_number = x + 7\n    return largest_number\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    ans = (42 / 35) * 100\n    return ans\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B', integer=True)\n\n    # Original ratio of class A to class B\n    equation1 = Eq(A, (5/7) * B)\n\n    # New ratio after transferring 3 students\n    equation2 = Eq(A + 3, (4/5) * (B - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye had at first\n    # She exchanges bottles 5 times,\n    # Each time she exchanges 3 bottles for 1 new bottle\n    # She ends up with 4 bottles, which is 1 more than expected\n    # So without the unexpected extra bottle, she would have had 3 bottles after 5 exchanges\n    # We can set up an equation: x - 5*3 = 3 (because each exchange reduces her count by 2 bottles)\n    # Simplifying the equation: x - 15 = 3\n    # Solving for x gives us the initial number of bottles\n\n    x = 15 + 3\n    return x\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the side of the smaller square array (boys only) be n\n    # Then the side of the larger square array (boys + girls) will be n+1\n    # The total students when the girls join will be (n+1)^2\n    # The number of boys alone will be n^2\n    # The girls added will form an extra row and column which means there will be (n+n+1) girls\n    # And since it's given that there are 17 girls, we can form the following equation:\n    # n + n + 1 = 17\n    # 2n = 16\n    # n = 8\n    # Now we find the number of boys as n^2\n    boys = 8**2\n    return boys\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_volume_ml = 40 * 1000  # Convert litres to millilitres\n    flow_rate_ml_per_second = 125\n    \n    time_seconds = total_volume_ml / flow_rate_ml_per_second\n    \n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 237\n    digits = 0\n    pages = 0\n    \n    #1â9: 9 pages with 1 digit each\n    for i in range(9):\n        digits += 1\n        pages += 1\n        if digits == total_digits:\n            return pages\n    \n    #10â99: 90 pages with 2 digits each\n    for i in range(10, 100):\n        digits += 2\n        pages += 1\n        if digits == total_digits:\n            return pages\n    \n    #100 onwards: 3 digits per page number\n    for i in range(100, 1000):\n        digits += 3\n        pages += 1\n        if digits == total_digits:\n            return pages\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468\n    correct_total = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    savings_difference_per_day = incorrect_day_savings - correct_day_savings\n    total_difference = incorrect_total - correct_total\n\n    number_of_days = savings_difference_per_day / total_difference\n\n    return int(number_of_days)\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, r be the rate, and t be the time (in hours)\n    d, r, t = symbols('d r t')\n\n    # If she travels at rate r and leaves at 1pm to arrive at 7pm, she spends 6 hours\n    equation1 = Eq(t, 6)\n\n    # Distance is the product of the rate and time\n    equation2 = Eq(d, r * t)\n\n    # If she wants to arrive one hour earlier and travels 2 extra km/h, she spends 5 hours at speed r + 2\n    equation3 = Eq(d, (r + 2) * (t - 1))\n\n    # Now we solve the system of equation\n    solutions = solve((equation2, equation3), (d, r))\n\n    return solutions[0][0]\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    # a is the first term and d is the common difference\n\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    a_value = solutions[a]\n    d_value = solutions[d]\n\n    # Calculating the 32nd term\n    nth_term = a_value + 31*d_value\n\n    return nth_term\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80  # The year Lord Ownlynose was born\n    current_year = 2011\n    oak_tree_age = current_year - birth_year  # The age of the oak tree now\n    return oak_tree_age\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25\n    n = 10\n    first_term = tenth_term - (n - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # If Mr. Tung cuts a rope into 4 pieces, he makes 3 cuts.\n    # It takes 12 minutes for 3 cuts, so for each cut it takes 12 / 3 = 4 minutes.\n    time_per_cut = 12 / 3\n    \n    # To cut a rope into 12 pieces, he needs to make 11 cuts.\n    # Therefore, it will take 11 times the time of a single cut.\n    total_time = 11 * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n\n    ans = solve(equation, x)\n\n    return ans[x]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of Lily, Marry, and Carol\n    lily, marry, carol = symbols('lily marry carol')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    # There may be more than one solution, select the one where all ages are positive integers\n    for sol in solutions:\n        if all(age.is_integer and age > 0 for age in sol):\n            ans = sol[carol]\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    chewy_wrong_equation = (8*x + 8)/2 - 3*(x + 6)\n    # Correct the working step\n    chewy_corrected_equation = simplify(chewy_wrong_equation)\n    # Calculate the correct answer\n    ans = chewy_corrected_equation\n    return ans\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    target_number = 38942\n    remainder = target_number % 9\n    if remainder > 0:\n        ans = remainder\n    else:\n        ans = 0\n    return ans\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2 / 5) * total_flowers\n    purple_flowers = (1 / 8) * total_flowers\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # The question can be seen as partitioning 10 marbles into piles.\n    # The number of ways will be the number of partitions of 10 into 2 non-empty piles.\n    # This equals the number of ways to choose 1 number from 1,2,...,9 (since one pile must have at least 1 marble, and they are identical).\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # convert liters to quarts (1 liter = 1.05668821 quarts)\n    liters = 2.5\n    quarts_per_liter = 1.05668821\n    total_quarts = liters * quarts_per_liter\n\n    # cup capacity in quarts\n    cup_capacity = 0.5\n\n    # calculate the number of cups\n    num_cups = total_quarts / cup_capacity\n\n    # round to nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    ans = 2 + 34 / 100\n    return ans\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Picking at least one of each color will always result in 3 of the same color eventually\n    red = 5\n    blue = 9\n    white = 4\n    \n    # Calculate the number of cars he needs to pick to be sure he has 3 of the same color\n    # It's the worst-case scenario where he picks 2 of each color and then one more\n    cars_needed = (2 * red) + (2 * blue) + (2 * white) - (red - 1) - (blue - 1) - (white - 1) + 1\n    \n    return cars_needed\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length_wood1_cm = 85\n    length_wood2_m = 2\n    length_wood3_cm = 147\n    \n    # Convert the lengths of wood from centimeters to meters\n    length_wood1_m = length_wood1_cm / 100\n    length_wood3_m = length_wood3_cm / 100\n    \n    # Calculate the total length in meters\n    total_length_m = length_wood1_m + length_wood2_m + length_wood3_m\n    \n    return total_length_m\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(65):\n        legs = spiders * 8\n        ants = (64 - legs) // 6\n        if ants >= 0 and legs + ants * 6 == 64:\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin, vivian = symbols('justin vivian')\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (justin, vivian))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    millilitres = 7.5 * litres_to_millilitres\n    return millilitres\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    for x in range(1, 1163):  # We are using cents to avoid floating point issues\n        y = 1163 - x\n        if x / 10 + y == 587:\n            difference = abs(x - y)\n            return difference\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((((x - 6) * 6) + 6) / 6, 6)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    amount_left = initial_amount - amount_spent\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let x be the height from which the ball was dropped initially.\n    # After the first bounce, it reaches 3x.\n    # After the second bounce, it also reaches 3x.\n    # After the third bounce, it reaches (3/2)x.\n    # After the fourth bounce, it reaches 36 m, which is (3/4)x.\n    # Therefore, we have (3/4)x = 36, which means x = (36 * 4) / 3.\n    \n    x = (36 * 4) / 3\n    return x\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b != a and b != 8:\n                for c in range(10):\n                    if c != b and c != a and c != 8:\n                        for d in range(10):\n                            if d != c and d != b and d != a and d != 8:\n                                for e in range(10):\n                                    if e != d and e != c and e != b and e != a and e != 8:\n                                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                                        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                                            return number\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original_num = str(i)\n        reversed_num = original_num[::-1]\n        larger_num = max(int(original_num), int(reversed_num))\n        smaller_num = min(int(original_num), int(reversed_num))\n        difference = larger_num - smaller_num\n        results.add(difference)\n    return results\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_cost_pence = 99\n    total_songs = 12\n    whole_cd_cost_pounds = 8.99\n\n    # Convert whole CD cost from pounds to pence\n    whole_cd_cost_pence = whole_cd_cost_pounds * 100\n\n    # Calculate the total cost if bought separately\n    total_cost_separately_pence = total_songs * single_song_cost_pence\n\n    # Calculate the savings\n    savings_pence = total_cost_separately_pence - whole_cd_cost_pence\n\n    # Convert the savings back into pounds\n    savings_pounds = savings_pence / 100\n\n    return savings_pounds\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for n in range(10):\n        if (300 + 10 * n + 3) % 9 == 1:\n            return n\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    perm = permutations(digits, 2)  # Generate all permutations of length 2\n    unique_numbers = set(int(''.join(p)) for p in perm)  # Form numbers from permutations and remove duplicates\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # We need to minimize the difference between the two numbers\n    # To get the smallest difference, one number should be as large as possible and one as small as possible\n    # We can achieve this by dividing the digits into two groups, with one group having the larger digits and the other group having the smaller ones\n    # Since we are using all digits from 0 to 9, the middle digit is 4.5 (average), so we'll use 0,1,2,3,4 in one number and 5,6,7,8,9 in another\n    # We should start the smaller number with 1 (to form a valid 5-digit number) and the larger one with 9\n\n    # Smaller number: start with 1 and then use the next smallest digits in descending order\n    smaller_number = int(\"10\" + \"\".join(str(digit) for digit in range(2, 5)))\n    # Larger number: start with 9 and then use the next largest digits in descending order\n    larger_number = int(\"9\" + \"\".join(str(digit) for digit in range(8, 4, -1)))\n\n    # Calculate the difference\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    ans = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    length_of_train = 450  # in meters\n    time_to_pass = 15  # in seconds\n    \n    # Speed = Distance/Time\n    speed_of_train = length_of_train / time_to_pass  # in meters per second\n    \n    # Convert speed from m/s to km/h (1 m/s = 3.6 km/h)\n    speed_of_train_km_h = speed_of_train * 3.6\n    \n    return speed_of_train_km_h\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n\n    concentration_percent = (salt_weight / total_weight) * 100\n\n    return concentration_percent\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    result = 70 / 100 * 40\n    return result\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    # Let's denote p as the number of stickers Peter originally had.\n    # Then Sam originally had p + 40 stickers.\n    # After the first exchange, Sam has p + 40 - 0.2 * (p + 40) stickers,\n    # and Peter has p + 0.2 * (p + 40).\n    # After the second exchange, Sam has (p + 40 - 0.2 * (p + 40)) + 0.25 * (p + 0.2 * (p + 40))\n    # and Peter has (p + 0.2 * (p + 40)) - 0.25 * (p + 0.2 * (p + 40)).\n    # In the end, Sam has 96 more stickers than Peter, so we can write the equation:\n    # (p + 40 - 0.2 * (p + 40)) + 0.25 * (p + 0.2 * (p + 40)) - ((p + 0.2 * (p + 40)) - 0.25 * (p + 0.2 * (p + 40))) = 96\n    \n    from sympy import symbols, Eq, solve\n\n    # Define symbol for Peter's original amount of stickers\n    p = symbols('p')\n\n    # Express Sam's and Peter's stickers during each exchange\n    sam_initial = p + 40\n    peter_after_sam_gives = p + 0.2 * sam_initial\n    sam_after_he_gives = sam_initial - 0.2 * sam_initial\n    peter_after_he_gives = peter_after_sam_gives - 0.25 * peter_after_sam_gives\n    sam_final = sam_after_he_gives + 0.25 * peter_after_sam_gives\n\n    # Set up the equation based on the condition given:\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final - peter_after_he_gives, 96)\n\n    # Solve the equation to find Peter's original amount of stickers\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    ali_ahead = 14\n    baba_behind = 10\n\n    total_people = ali_ahead + 1 + baba_behind + 1\n\n    return total_people\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    # price of a pencil\n    pencil_cost = 2\n\n    # price of a pen\n    pen_cost = 4\n\n    # Since one pen is worth two pencils (pen_cost / pencil_cost),\n    # Owen should give two pencils for one pen.\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    # With 4 friends, each friend will send a card to the other 3 friends.\n    # So number of cards sent by each person is 3.\n    # Hence, total number of cards sent by 4 people is 4 * 3\n    \n    num_friends = 4\n    cards_per_person = num_friends - 1\n    total_cards = num_friends * cards_per_person\n    \n    return total_cards\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2  # Initial water in the tank\n    jug_capacity = 7  # Capacity of one jug\n    jugs_added = 4  # Number of jugs added\n\n    total_water = initial_water + jug_capacity * jugs_added\n    return total_water\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # Calculate total cookies eaten in the first 3 days\n    first_days = 9 * 3\n    # Calculate total cookies eaten in the following 2 days\n    following_days = 15 * 2\n    # Calculate total cookies eaten in the last 2 days\n    last_days = 10 * 2\n    \n    # Sum all cookies eaten\n    total_cookies = first_days + following_days + last_days\n    # Calculate the average cookies eaten per day\n    average = total_cookies / (3 + 2 + 2)\n\n    return average\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law, the table exerts an equal and opposite force\n    # to the force exerted by the book on the table (its weight).\n    # Therefore, the magnitude of the force exerted by the table on the book is also 20N.\n    force_exerted_by_table = 20\n    return force_exerted_by_table\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Work rates of Candy and David\n    rate_candy = 1 / 20\n    rate_david = 1 / 25\n    \n    # The equation for the amount of work done is:\n    # (rate of Candy * number of days worked by Candy) + (rate of David * number of days worked by David) = 1 (complete job)\n    # We're given that Candy works all 12 days, while David may take some days off.\n    # If we let x be the number of days David works then 12 - x will be the days off.\n    \n    # We want to find the x for which the work done equation holds true.\n    # Candy's work + David's work = 1 job\n    for x in range(13):  # We loop from 0 to 12\n        if (rate_candy * 12) + (rate_david * x) == 1:\n            return 12 - x\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)  # Replace 'y' with Lemar's age when calling the function"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    # solving for T in the tax equation\n    tax_equation = Eq(0.05 * 50000 + (140000 - 50000) * (0.08 + T / 100), 15100)\n\n    # Solving for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # According to the pigeonhole principle, in the worst case scenario,\n    # Lily takes out one less than six balls for both footballs and basketballs,\n    # and all volleyballs. This guarantees that the next ball must be the sixth\n    # of the same type (either a football or a basketball).\n    \n    footballs_needed = 6 - 1   # she might take out 5 footballs\n    basketballs_needed = 6 - 1 # she might take out 5 basketballs\n    volleyballs = 3            # she can take out all volleyballs\n    \n    # Total balls Lily must take out to ensure 6 balls of the same type:\n    balls_needed = footballs_needed + basketballs_needed + volleyballs + 1  # +1 for the sixth ball\n    \n    return balls_needed\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    time_per_cake = time_for_6_cakes / 6\n    time_for_10_cakes = time_per_cake * 10\n    return time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 15 / 100\n    tax_percent = 8 / 100\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g = 9.81  # Acceleration due to gravity (m/s^2)\n    h = 5.0    # Height of the table (m)\n\n    # Using the equation v^2 = u^2 + 2gh, where u(initial velocity) = 0, we can solve for v(final velocity)\n    v = symbols('v')\n    equation = Eq(v**2, 2 * g * h)\n    final_velocity = solve(equation, v)\n\n    # There will be two solutions: positive and negative. We only need the positive one.\n    for v in final_velocity:\n        if v > 0:\n            return v\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total number of fruits as 'f' and the number of apples as 'a'\n    f, a = symbols('f a')\n    \n    # According to the problem, 4/5 of the fruits were apples and the rest were pears\n    equation1 = Eq(a, 4/5 * f)\n    \n    # After 3/4 of the fruits were removed, there were 1/8 of the apples and 30 pears left\n    # Number of apples removed is 3/4 * 4/5 * f = 3/5 * f\n    # So the number of apples left is 1/5 * f - 3/5 * f * 3/4 = f/5 * (1 - 3/4) = f/5 * 1/4 = f/20\n    # Number of pears left is total fruits left - apples left = f/4 - f/20\n    # And the number of pears left is given to be 30, which is f - (4/5 * f) = 1/5 * f\n    # Therefore we have f/4 - f/20 = 30\n    equation2 = Eq(f/4 - f/20, 30)\n\n    # Now let's solve the equations\n    solutions = solve((equation1, equation2), (f, a))\n\n    # Return the total number of fruits at first\n    return solutions[f]\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(13 * pupils + 190, stickers)\n    equation2 = Eq(17 * pupils + 50, stickers)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for number in range(100, 5000):  # Define a reasonable range to search for the number\n        if sum(map(int, str(number))) == 20:  # Check if the digit sum is 20\n            # Check divisibility by 11 using the alternating sum rule\n            # Sum of digits at odd places and sum of digits at even places have a difference divisible by 11\n            odd_sum = sum([int(digit) for i, digit in enumerate(str(number)) if i % 2 == 0])\n            even_sum = sum([int(digit) for i, digit in enumerate(str(number)) if i % 2 != 0])\n            \n            if (odd_sum - even_sum) % 11 == 0:\n                return number  # Return the number if it meets both conditions\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(0, 10):\n            if A != S:\n                for M in range(0, 10):\n                    if M != A and M != S:\n                        for O in range(0, 10):\n                            if O != M and O != A and O != S:\n                                for G in range(0, 10):\n                                    if G != O and G != M and G != A and G != S:\n                                        SASMO = 10000 * S + 1000 * A + 100 * S + 10 * M + O\n                                        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n                                        if SASMO * 4 == OGAMS:\n                                            return SASMO\n    return None\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # The problem is equivalent to partitioning 13 - 3 = 10 oranges,\n    # since each child must get at least one orange.\n    # We need to find the number of integer solutions to the equation\n    # x1 + x2 + x3 = 10 with x1, x2, x3 >= 1.\n    # Subtract 1 from each variable to account for the at least 1 condition:\n    # (x1 - 1) + (x2 - 1) + (x3 - 1) = 10 - 3\n    # y1 + y2 + y3 = 7, where y1 = x1 - 1, y2 = x2 - 1, y3 = x3 - 1, and y1, y2, y3 >= 0.\n    # This is a problem of distributing 7 indistinguishable objects into 3 distinguishable bins.\n    # Use the \"stars and bars\" combinatorial method: (n + k - 1) choose (k - 1)\n    # (7 + 3 - 1) choose (3 - 1) = 9 choose 2\n\n    return comb(9, 2)\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    # Number of choices in each category\n    food_choices = 2     # sandwiches, burgers\n    drink_choices = 3    # coffee, milk, tea\n    dessert_choices = 4  # cake, pudding, ice-cream, pie\n    \n    # Total number of different ways to order lunch\n    total_ways = food_choices * drink_choices * dessert_choices\n    \n    return total_ways\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    # Total water in both containers\n    total_water = 48 + 28\n    # After transferring, both containers should have half of the total water\n    water_in_each = total_water / 2\n    # Water to be transferred from A to B\n    water_to_transfer = 48 - water_in_each\n    return water_to_transfer\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial velocity\n    v0 = 5  # m/s\n    \n    # Angle of projection\n    theta = math.radians(45)  # Convert 45 degrees to radians\n    \n    # Acceleration due to gravity\n    g = 9.81  # m/s^2\n    \n    # Initial velocity components\n    v0x = v0 * math.cos(theta)  # horizontal component\n    v0y = v0 * math.sin(theta)  # vertical component\n    \n    # Height of the building\n    h = 30  # m\n    \n    # Time of flight until the arrow hits the ground\n    # Use the equation: h = v0y * t - (1/2) * g * t^2\n    # Rearrange to form a quadratic equation: (1/2) * g * t^2 - v0y * t - h = 0\n    # To solve for t, we can use the quadratic formula\n\n    # Coefficients of the quadratic equation\n    a = 0.5 * g\n    b = -v0y\n    c = -h\n    \n    # Discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # There are two solutions, the positive root corresponds to the time when the arrow hits the ground\n    t = (-b + math.sqrt(discriminant)) / (2*a)\n    \n    # Final velocity components\n    vf_x = v0x  # Horizontal velocity remains constant\n    vf_y = v0y - g * t  # Vertical velocity \n    \n    # Magnitude of the final velocity vector\n    vf = math.sqrt(vf_x**2 + vf_y**2)\n    \n    return vf\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the interest rate\n    r = symbols('r')\n\n    # Starting principal\n    P = 2000\n    \n    # Final amount after 3 years\n    A = 2519.42\n\n    # The compound interest formula: A = P * (1 + r)^n\n    # Where P is the principal amount, r is the interest rate,\n    # n is the number of years, and A is the amount after n years.\n    equation = Eq(A, P * (1 + r)**3)\n\n    # Solve for the interest rate r\n    interest_rate = solve(equation, r)[0]\n\n    return float(interest_rate)\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the weight variables\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n    \n    # How many pigs weigh as much as 8 elephants\n    pigs_for_elephants = (8 * solutions[elephant]) / solutions[pig]\n    \n    return pigs_for_elephants\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 0.6 * (2/5) * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n\n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    equation2 = Eq(24 * price_mangoes + 20 * price_lychees, 1160)\n\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n\n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    weight_per_box = total_weight_5_boxes / 5\n    total_weight_3_boxes = weight_per_box * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "def solution():\n    from math import factorial\n\n    # Calculate the permutations for 4 comics treated as a single unit\n    comics_permutations = factorial(4)\n    \n    # Calculate the permutations for 6 fictions\n    fictions_permutations = factorial(6)\n    \n    # Calculate the permutations of the 2 units (Comics as one unit and Fictions as another unit) \n    units_permutations = factorial(2)\n\n    # Total arrangements is the product of the three permutations\n    total_arrangements = comics_permutations * fictions_permutations * units_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef factorial_divide(n, k):\n    \"\"\"Helper function to calculate n! / k!\"\"\"\n    return factorial(n) // factorial(k)\n\ndef solution():\n    # Since we are to put at least one singing performance between every two dancing performances, there can be at most 3 blocks of dancing (D).\n    # These blocks can be surrounded and separated by singing (S) performances:\n    # (S) D (S) D (S) D (S)\n    # There are 5 places (denoted by parentheses) where the singing performances can go.\n    \n    # First, we must choose 3 places out of the 5 to put the dancing performances. This is 5C3.\n    places_for_dancing = factorial_divide(5, 5 - 3)\n    \n    # Once the places for dancing performances are fixed, we have 6 singing performances to arrange in the remaining places.\n    # This can be done in 6! ways.\n    arrangements_for_singing = factorial(6)\n    \n    # Multiply the possible choices of places for dancing by the arrangements of singing.\n    return places_for_dancing * arrangements_for_singing\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the time it takes for Nancy to finish the job by herself\n    n = symbols('n')\n    \n    # Equation: Work = Rate * Time\n    # Because they finish the job in 10 hours when working together, their combined rate is 1/10 job per hour\n    # Lee's rate is thus (1/10 - 1/n) job per hour\n    # Lee works for 6 hours and Nancy for 20 hours to complete the job\n    # So: Work by Lee + Work by Nancy = 1 job\n    \n    equation = Eq(6 * (1/10 - 1/n) + 20/n, 1)\n    \n    nancy_time = solve(equation, n)\n    \n    return nancy_time[0]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_litres = 6\n\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let's denote the correct answers by Justin as j and by Dora as d.\n    # Each correct answer gives 10 points and each incorrect or skipped\n    # question gives -5 points. There are 10 questions each.\n    # Total points by both is 155 and Justin has 15 more points than Dora.\n    # Therefore, we have two equations:\n    # 10*j - 5*(10 - j) + 10*d - 5*(10 - d) = 155\n    # 10*j - 5*(10 - j) = 10*d - 5*(10 - d) + 15\n\n    # which simplify to:\n    # 15*j + 15*d = 155\n    # 15*j = 15*d + 15\n    \n    # From the second equation: j = d + 1\n    # Replace j with d+1 in the first equation:\n    # 15*(d+1) + 15*d = 155\n    # 30*d + 15 = 155\n    # 30*d = 140\n    # d = 140 / 30\n\n    d = 140 // 30\n\n    return d\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    pieces = 10\n\n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B.\n\n    # According to the question:\n    # Average number of candies sold by 3 groups in Class A = 12 candies\n    # Total candies sold by Class A = 3 groups * 12 candies/group\n    \n    total_candies_A = 3 * 12\n\n    # The average number of candies sold by all groups in Class A and Class B = 8 candies\n    # Let total groups in Class A and Class B be 3 (A) + 4 (B) = 7 groups\n    \n    total_groups_AB = 3 + 4\n\n    # Total candies sold by all groups in Class A and Class B = average * total groups = 8 * 7\n    \n    total_candies_AB = 8 * total_groups_AB\n\n    # Using the totals, we can find out how many candies Class B sold in total.\n    # Total candies sold by Class B = Total candies by groups A and B - Total candies by Class A\n    \n    total_candies_B = total_candies_AB - total_candies_A\n\n    # Finally, the average number of candies sold by each group in Class B\n    # is the total candies sold by Class B divided by the number of groups in Class B.\n    average_candies_B = total_candies_B / 4\n\n    return average_candies_B\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45 / 100\n    number = 80\n    \n    ans = percentage * number\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavours = 7\n    doughnuts = 2\n\n    return comb(flavours, doughnuts)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    people = 10\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_to_milk_to_dark = Eq(white/milk, 3/7)\n    ratio_white_to_dark = Eq(white/dark, 3/5)\n    difference_dark_white = Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_to_milk_to_dark, ratio_white_to_dark, difference_dark_white), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    students = symbols('students')\n\n    badminton = students / 4 + 3\n    remaining_students = students - badminton\n    table_tennis = remaining_students / 3 - 3\n    football = 25  # given\n\n    equation = Eq(badminton + table_tennis + football, students)\n\n    ans = solve(equation, students)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n    ans = (big_square_side // small_square_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters_to_centimeters = 70.24 * 100\n    return meters_to_centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    initial_red_balls = 5\n    initial_green_balls = 10\n    # Let x be the number of red balls to add\n    # The total number of balls will be (initial_red_balls + x) + initial_green_balls\n    # Probability of getting a green ball should be initial_green_balls / ((initial_red_balls + x) + initial_green_balls) = 1/3\n    # Solving for x:\n    # initial_green_balls = 1/3 * ((initial_red_balls + x) + initial_green_balls)\n    # 3 * initial_green_balls = initial_red_balls + x + initial_green_balls\n    # 3 * initial_green_balls - initial_green_balls = initial_red_balls + x\n    # 2 * initial_green_balls - initial_red_balls = x\n    x = (2 * initial_green_balls) - initial_red_balls\n    \n    return x\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    quarter = spent / 0.25\n    return quarter\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_spent = 25 + 10\n    change = 50 - total_spent\n    return change\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_6s(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    max_pages = 1\n    while count_6s(max_pages) < 18:\n        max_pages += 1\n    # Since we are looking for the page before \n    # the count exceeds 18, we subtract 1\n    return max_pages - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    \n    combinations = fruits * vegetables\n    \n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 more stickers than Peter initially\n    equation1 = Eq(sam, 40 + peter)\n    # Sam gives 20% of his stickers to Peter\n    equation2 = Eq(sam - 0.20 * sam, sam - (sam - peter) / 5)\n    # Peter gives 25% of his stickers to Sam\n    equation3 = Eq(peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam), peter + (sam - peter) / 5 - 0.25 * (peter + (sam - peter) / 5))\n    # After the exchange, Sam had 96 stickers more than Peter\n    equation4 = Eq(sam - (sam - peter) / 5 - 0.25 * (peter + (sam - peter) / 5) - (peter + (sam - peter) / 5 + 0.20 * (sam - (sam - peter) / 5)), 96)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a power only depends on the ones digit of the base number\n    # and the cycle of powers for that base number.\n\n    # For base 32, the cycle of ones digits is 2 -> 4 -> 8 -> 6 -> repeat\n    # Since 33 mod 4 = 1, we use the first number in the cycle: 2\n\n    # For base 22, the cycle of ones digits is 2 -> 4 -> 8 -> 6 -> repeat\n    # Since 29 mod 4 = 1, we use the first number in the cycle: 2\n\n    # Now we can find the ones digit in the difference\n    ones_digit_32_pow_33 = 2\n    ones_digit_22_pow_29 = 2\n    difference = ones_digit_32_pow_33 - ones_digit_22_pow_29\n\n    # If the difference is negative, we add 10 to get the correct ones digit\n    if difference < 0:\n        difference += 10\n\n    return difference\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given the proportion a:b = c:d\n    # where b = 81, c = 4, and d = 9, we need to find a\n    # We use the property of proportion: a/b = c/d\n    # Therefore, a = (b * c) / d\n\n    b = 81\n    c = 4\n    d = 9\n\n    a = (b * c) / d\n\n    return a\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= height:\n            break\n        if jumps % 2 == 0:\n            current_height -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = [i**2 for i in range(1, 100) if i**2 < 100 and (i**2 + 1) % 5 == 0 and i**2 % 16 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2 * i) ** 3 / (2 * i * (2 * i + 1) * (2 * i + 2)) for i in range(1, 2013))\n    ans += 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    common_difference = 21 - 15  # Calculate the common difference\n    last_term = 39  # The last term given in the sequence\n    next_term = last_term + common_difference  # Find the next term in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n\n    cans_in_9_days = cans_per_day * days\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    # Let the number of correct answers be x\n    # Total questions are 80, so the number of incorrect answers is 80 - x\n\n    # Marks for correct answers = 4x\n    # Marks deducted for incorrect answers = 2 * (80 - x)\n    # Total marks = 4x - 2 * (80 - x)\n\n    # According to the problem, the total marks is 152\n    # Therefore, 4x - 2 * (80 - x) = 152\n    # which simplifies to: 4x - 160 + 2x = 152\n    # 6x = 152 + 160\n    # 6x = 312\n    # x = 312 / 6\n    # x = 52\n    \n    x = (152 + 160) // 6\n    return x\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")  # Total number of letters\n    total_vowels = len(\"AI\")  # Total number of vowels\n\n    # Total arrangements of the word RAINBOW\n    total_arrangements = factorial(total_letters)\n\n    # Total arrangements where vowels are together\n    # Treat the vowels as one unit, so we have (total_letters - total_vowels + 1) units\n    # Multiply by arrangements of vowels among themselves (factorial(total_vowels)).\n    vowels_together_arrangements = factorial(total_letters - total_vowels + 1) * factorial(total_vowels)\n\n    # Subtract arrangements where vowels are together from total arrangements\n    arrangements_with_vowels_apart = total_arrangements - vowels_together_arrangements\n\n    return arrangements_with_vowels_apart\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To divide 16 sausages among 24 people,\n    # each person should get 16/24 of a sausage.\n    # This fraction simplifies to 2/3 of a sausage per person.\n    \n    # Each cut can create only one additional piece of sausage,\n    # so starting with 16 sausages, to reach 24 pieces,\n    # we need at least 8 cuts, making it 24 pieces total.\n    \n    # However, since each person needs to get 2/3 of a sausage,\n    # we have to ensure that our cuts result in multiples of 2/3.\n    # Here's the reasoning:\n    # - After 8 cuts, we have 24 pieces (1/1 of a sausage each).\n    # - To divide each sausage into 2/3, we need 3 pieces per sausage.\n    # - Therefore, we need to perform 2 cuts per original sausage to get\n    #   thirds pieces (16 * 2 = 32 more cuts).\n    \n    # In total, we have 8 initial cuts + 32 additional cuts to get thirds.\n    num_cuts = 8 + 32\n\n    return num_cuts\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Container A contained 350 mL more water than Container B initially\n    equation1 = Eq(A, B + 350)\n    \n    # After 500 mL of water was spilled out of Container A\n    # Container B had twice as much water as Container A\n    equation2 = Eq(B, 2 * (A - 500))\n\n    # Now solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago.\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    # The remainders are the same for all numbers when divided by the unknown integer,\n    # so the differences between the numbers should be divisible by the unknown integer.\n    # Find the Greatest Common Divisor (GCD) of the differences.\n    from math import gcd\n    \n    num1 = abs(51 - 39)\n    num2 = abs(147 - 51)\n    num3 = abs(147 - 39)\n    \n    # Calculate the GCD of the three differences\n    gcd_num = gcd(gcd(num1, num2), num3)\n    \n    # The required integer is greater than 10, check if gcd_num is greater than 10\n    ans = gcd_num if gcd_num > 10 else None\n    \n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    lovelle = 1\n    others = 5\n    not_spoken = 12\n    # Each of the 5 other members said 3 sentences to Lovelle\n    # Lovelle said 3 sentences to each of them\n    # 12 members did not speak to Lovelle\n    # Total members = Lovelle + others who spoke to Lovelle + members who did not speak to Lovelle\n    total_members = lovelle + others + not_spoken\n    return total_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits = 0\n    for page in range(1, 326):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_required = total_pieces / pieces_per_hour\n\n    return hours_required\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    # Let x be the total number of fruit gums in the packet.\n    # After eating 2 secretly, x - 2 remains.\n    # Then, he shared one third of the remaining fruit gums with friends.\n    # So, two thirds of the packet is left, i.e., 2/3 * (x - 2).\n    # This amount is then equally divided over the next 4 lessons.\n    # Each lesson, he eats 1/4 of 2/3 * (x - 2)\n    # We want 1/4 of 2/3 * (x - 2) to be a whole number, since you can't eat a fraction of a gum.\n    # Hence, we want the smallest x such that 2/3 * (x - 2) is a multiple of 4.\n    \n    x = 3  # Starting from the smallest possible number of gums that can be divided.\n    while True:\n        if (2/3 * (x - 2)) % 4 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Sarah and Mark's pokemon cards\n    sarah, mark = symbols('sarah mark')\n    \n    # Equation1: Before buying new cards, Sarah had 20 more cards than Mark\n    equation1 = Eq(sarah - mark, 20)\n    \n    # Equation2: After buying new cards, Sarah had 3 times more cards than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    # Sarah's pokemon cards before buying new cards\n    return solutions[sarah]\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Total letters in 'STATISTIC' is 9\n    # Total 'T's in 'STATISTIC' is 3\n    total_letters = 9\n    total_T = 3\n    # We calculate permutations of the letters excluding T: 'SASIC'\n    letters_without_T = total_letters - total_T \n    p_without_T = factorial(letters_without_T)\n    \n    # Positions excluding T (3 T's means 4 slots around Ts: _S_A_S_I_C_)\n    # Number of ways we can choose 3 positions out of 6\n    positions_for_T = factorial(letters_without_T + 1) // (factorial(total_T) * factorial(letters_without_T + 1 - total_T))\n    \n    # For each arrangement of SASIC, there are positions_for_T ways to place T\n    # However, we must account for the repetitions of 'S' (2 times) and 'I' (2 times)\n    repetitions = factorial(2) * factorial(2) # 2 S's and 2 I's\n    \n    # Final answer is permutations of 'SASIC' times positions to insert T's divided by repetitions\n    ans = (p_without_T * positions_for_T) // repetitions\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    return 17 + 18 + 29 + 6\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The worst-case scenario is when the last key the explorer tries is the correct key for each chest\n    # Therefore, for each chest, the number of attempts will be the number of remaining keys.\n    attempts = 0\n    total_keys = 9\n    for chest in range(4):\n        attempts += total_keys - chest  # Add the remaining keys to try for each chest\n    return attempts\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    sequence = [2945, 3445, 3245, 3745, 4045, 3845]\n    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence) - 1)]\n    \n    # Given the pattern, the differences seem to be alternating between adding and subtracting 500 and 200:\n    # +500, -200, +500, (?, should be -200 based on the pattern), +500, -200\n    # Therefore, the missing number should be 3745 - 200.\n    \n    missing_number = sequence[3] - 200\n    \n    return missing_number\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return value_after_years\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    largest_double_digit = 99\n    while largest_double_digit > 9:\n        if largest_double_digit % 3 == 0 and largest_double_digit % 5 == 0:\n            return largest_double_digit\n        largest_double_digit -= 1\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    # Division of a number by a fraction is equivalent to multiplying the number by the reciprocal of the fraction.\n    numerator = 15\n    denominator = 1/7\n\n    ans = numerator * (1 / denominator)\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Total number of mushrooms gathered\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n\n    # Mushrooms in the first hour, if 26 more had been gathered, would equal the second hour\n    equal_mushrooms = Eq(first_hour + 26, second_hour)\n\n    # solving the equations\n    solution = solve((total_mushrooms, equal_mushrooms), (first_hour, second_hour))\n\n    return solution[second_hour]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85\n    num_coins = 11\n    total_length = (num_coins - 1) * coin_diameter + coin_diameter\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    num_terms = 14\n    first_term = 5\n    common_difference = 8 - 5\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    nearest_hundred = round(number / 100) * 100\n    return nearest_hundred\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of women (w) and men (m)\n    w, m = symbols('w m')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(w, 4 * m)      # There were 4 times as many women as men\n    equation2 = Eq(2 * w + 5 * m, 182)  # Total cupcakes eaten\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, m))\n    \n    # Return the number of women\n    return solutions[w]\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 // 12\n    return numerator\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    # Formula for the number of handshakes is n*(n-1)/2 for n participants\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    # For circular permutations, we subtract 1 from the total number as the\n    # arrangements are considered the same when rotated. So, we use (n-1)!\n    num_people = 8\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    difference = night_temp - morning_temp\n\n    return difference\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    x = Symbol('x')\n    equation = x * (1 - 3/4) * (1 - 2/5) + 185 - 2*x\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)  # last digit of the huge power of 2\n    last_digit_3 = pow(3, 2017, 10)  # last digit of the huge power of 3\n\n    # Multiplying the two results and finding the last digit\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = book_cost * (books_day1 + books_day2)\n\n    return total_cost\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8\n    ans = n**2\n    return ans\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    \n    total_pens = pens_per_friend * number_of_friends\n    \n    return total_pens\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    number = 1\n    for _ in range(2021):\n        number = number * 2 + 4\n        if number > 99:\n            number %= 100\n    return number\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a and the common difference be d\n    a, d = symbols('a d')\n\n    # The sum of the first four terms of an arithmetic sequence is 4/2 * (2a + 3d) = 2a + 6d\n    first_four_sum = 2 * a + 6 * d\n\n    # The sum of the last four terms of an arithmetic sequence is 4/2 * (2a + (8-1)d) = 2a + 14d\n    last_four_sum = 2 * a + 14 * d\n\n    # The sum of the last four terms is 32 more than the sum of the first four terms\n    equation = Eq(last_four_sum - first_four_sum, 32)\n\n    # Solve for d\n    solution = solve(equation, d)\n\n    return solution[d]\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Red light flashes 4 times a minute, so its interval is 15 seconds (60/4).\n    # Green light flashes 6 times a minute, so its interval is 10 seconds (60/6).\n\n    # Calculate the least common multiple (LCM) of the two flash intervals\n    from math import lcm\n\n    # Find LCM of intervals in seconds\n    interval_lcm = lcm(15, 10)\n\n    # Total time in one hour in seconds\n    total_time_seconds = 60 * 60\n\n    # Calculate how many times they flash together in one hour\n    flashes_together = total_time_seconds // interval_lcm + 1\n\n    return flashes_together\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 41):  # primes are greater than 1\n        if isprime(a):\n            for b in range(2, 41):\n                if isprime(b) and (3 * a + 7 * b == 41):\n                    return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price1 = 6500\n    profit_percent1 = 30\n    cost_price1 = selling_price1 / (1 + (profit_percent1 / 100))\n    \n    profit2 = 5000\n    cost_price2 = cost_price1\n    selling_price2 = cost_price2 + profit2\n    profit_percent2 = (profit2 / cost_price2) * 100\n    \n    return profit_percent2\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    solutions = solve(equation, n)\n\n    return solutions[0]  # Assuming we want the positive solution only\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)  # \"EARTH\" has 5 distinct letters\n    return total_letters\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_drink_ratio = 5/2  # Since water is 3/5 of the drink, the total drink would be (3/5)/(2/5) = 5/2\n    juice_volume = 120  # 120ml of juice\n    total_drink_volume = juice_volume * total_drink_ratio  # calculate the total volume of drink\n    water_volume = total_drink_volume - juice_volume  # calculate the volume of the water\n    water_needed_for_six_bottles = water_volume * 6  # calculate the water needed for 6 bottles\n\n    return water_needed_for_six_bottles\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 5):\n        SEND = int(p[0] + p[1] + p[2] + p[3])\n        MORE = int(p[1] + p[4] + p[2] + p[0])\n        if SEND + MORE == 10652 and p[1] != \"0\":\n            return SEND * MORE\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 7  # total decorations\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    # Formula to find permutations of a multiset\n    total_permutations = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n\n    return total_permutations\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Fastest two go first (Eddie and Jack).\n    time = 2\n    # Eddie comes back with the light.\n    time += 1\n    # The slowest two go together (Rose and Mary).\n    time += 10\n    # Jack comes back with the light.\n    time += 2\n    # Eddie and Jack cross again.\n    time += 2\n    # Total time.\n    return time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    total_water = 5  # in litres\n    container_size = total_water * 0.25  # in litres\n    cup_volume = 150 / 1000  # converting ml to litres\n    number_of_cups = 14\n    \n    water_used_for_cups = cup_volume * number_of_cups\n    water_left = total_water - container_size - water_used_for_cups\n    \n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n    \n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n        \n    return derangement(7)\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's initial speed: 150 feet/minute\n    simon_speed_initial = 150\n    # Friend's speed: 200 feet/minute\n    friend_speed = 200\n    # Time they walk away from school: 10 minutes\n    time_walked = 10\n    \n    # Distance Simon has walked away from school\n    distance_simon_walked = simon_speed_initial * time_walked\n    # Distance Simon's friend has walked away from school\n    distance_friend_walked = friend_speed * time_walked\n    \n    # Simon runs back to school at twice his original speed\n    simon_speed_run_back = 2 * simon_speed_initial\n    \n    # Time Simon takes to run back to school\n    time_simon_runs_back = distance_simon_walked / simon_speed_run_back\n\n    # Distance friend has walked during the time Simon runs back\n    distance_friend_walks_during_return = friend_speed * time_simon_runs_back\n\n    # Total distance friend has walked when Simon reaches school\n    total_distance_friend_walked = distance_friend_walked + distance_friend_walks_during_return\n\n    # The total distance between Simon and his friend when Simon reaches school\n    ans = total_distance_friend_walked\n\n    return ans\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100 - (100 % 7)\n    return n\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    numerator = 5\n    denominator = 1/4\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed = 3\n    ginny_speed = 4\n    harry_time = 24  # in minutes\n\n    ginny_time = (harry_time / harry_speed) * ginny_speed\n    return ginny_time\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pages, rate = symbols('total_pages rate')\n\n    # Original rate and time\n    equation1 = Eq(rate * 8, total_pages)\n    \n    # Increased rate and decreased time\n    equation2 = Eq((rate + 2) * (8 - 2), total_pages)\n\n    solutions = solve((equation1, equation2), (total_pages, rate))\n\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate the loaves per minute for Pip and Bud\n    pip_rate = 5 / 20\n    bud_rate = 3 / 15\n    \n    # Calculate the total time both Pip and Bud are baking \n    total_time = 40\n    # Calculate the total number of loaves baked by Pip and Bud in 40 minutes\n    total_loaves = (pip_rate + bud_rate) * total_time\n    \n    return int(total_loaves)\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # In the worst case, Yohan picks all the red and black socks first.\n    # Since he needs to get a pair of white socks, he will have to pick one more after that. \n    # Maximum number of red and black socks = 10 red + 10 black\n    max_red_black_socks = 20\n    # After picking one white sock, he needs to pick one more to ensure a pair of white socks.\n    max_white_socks = 2\n    \n    # Total number of socks he needs to pick to guarantee a pair of white socks\n    total_socks = max_red_black_socks + max_white_socks\n    return total_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = (12 * a) / 4 + (2 * a) * 5\n    simplified_expression = simplify(expression)\n    return simplified_expression\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Let's denote the original value of the house as x\n    # After the first year, the value increased by 10%, making the value 1.1x\n    # According to the question, this value is Â£11,000\n    first_year_value = 11000\n\n    # Let x be the original price of the house, so after 10% increase, it becomes 1.1x:\n    # 1.1x = Â£11,000\n    original_price = first_year_value / 1.1\n\n    # In the second year, the house loses 10% of its value\n    # The new value after decrease is therefore 0.9 times the value after the first year\n    second_year_value = first_year_value * 0.9\n\n    # The profit or loss compared to the original price is the second year value minus the original price\n    profit_or_loss = second_year_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    return (6 * 1 + 5 * 1 - 1) * 'd'\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    total_cookies = symbols('total_cookies')\n\n    # Create the equation based on the problem statement\n    equation = Eq((3/8 + 1/6) * total_cookies + 33, total_cookies)\n\n    # Solve the equation\n    solutions = solve(equation, total_cookies)\n\n    # Get the solution value\n    return solutions[0]\n\n# Call the function and store the answer\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n    \n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jemmas_number = symbols('jemmas_number')\n\n    equation = Eq((jemmas_number + 3) * 5, 35)\n\n    solution = solve(equation, jemmas_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Assuming the year 2020, but any non-leap year will do as May and June's dates are the same\n    end_date = datetime(2020, 6, 7)\n    current_date = start_date\n    sundays_count = 0\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 represents Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_volume = 120\n    bucket_volume = 8\n    num_buckets = barrel_volume // bucket_volume\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return not_left_handed\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    red, white, pip_red, bud_white = symbols('red white pip_red bud_white')\n\n    # Initial ratio 3:2\n    eq1 = Eq(red / white, 3 / 2)\n    \n    # After Pip adds red balls, ratio is 5:3\n    eq2 = Eq((red + pip_red) / white, 5 / 3)\n    \n    # After Bud adds white balls, ratio is 5:4\n    eq3 = Eq((red + pip_red) / (white + bud_white), 5 / 4)\n    \n    # Bud puts 100 more white balls than Pip's red balls\n    eq4 = Eq(bud_white, pip_red + 100)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), (red, white, pip_red, bud_white))\n    \n    # Since we need the number of white balls intially, we return the 'white' variable\n    return solutions[white]\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # For a number to be divisible by 3, the sum of its digits must be divisible by 3.\n    # For a number to be divisible by 4, the last two digits must form a number divisible by 4.\n\n    # Let's create a loop to find such K where both conditions are met\n\n    for K in range(10):\n        if ((5 + K + 2 + 7 + K) % 3 == 0) and ((20 + K) % 4 == 0):\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n    # initial ratio\n    equation1 = Eq(cookies / brownies, 4/3)\n    # ratio after giving away 6 brownies\n    equation2 = Eq(cookies / (brownies - 6), 12/7)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n    \n    total_baked = solutions[cookies] + solutions[brownies]\n\n    return total_baked\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Number of companies originally\n    original_companies = 4\n    \n    # Original length of expressway\n    original_length = 900\n    \n    # Original time\n    original_time = 5\n    \n    # Calculate work done by one company in one day\n    work_per_company_per_day = original_length / (original_companies * original_time)\n    \n    # Number of companies now\n    new_companies = 6\n    \n    # New length of expressway\n    new_length = 5400\n    \n    # Calculate the time taken by new companies to build the new length of expressway\n    new_time = new_length / (new_companies * work_per_company_per_day)\n    \n    return new_time\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy1 = 10\n    sell1 = 20\n    profit1 = sell1 - buy1\n    \n    buy2 = 30\n    sell2 = 40\n    profit2 = sell2 - buy2\n    \n    total_profit = profit1 + profit2\n    \n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam buys 6 tickets for Â£93\n    # Find the cost per ticket\n    cost_per_ticket = 93 / 6\n    \n    # Claire spends Â£124\n    # Find how many tickets Claire can buy with Â£124\n    claire_tickets = 124 / cost_per_ticket\n    \n    return int(claire_tickets)\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, n+1)) for n in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25  # Since it's an arithmetic sequence\n\n    # an = a1 + (n-1)d, where an is the nth term, a1 is the first term, and d is the common difference.\n    # Rearrange the formula to find the first term a1.\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs, so 18 shoes in total\n    time_per_shoe = 2    # 2 minutes per shoe\n    cobblers = 2         # 2 cobblers\n\n    # The total time it would take for one cobbler to clean all the shoes\n    total_time_single_cobbler = total_shoes * time_per_shoe\n\n    # The minimum time to clean all the shoes is half the time it would take one cobbler,\n    # because there are two cobblers working simultaneously.\n    min_time = total_time_single_cobbler / cobblers\n\n    return min_time\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    \n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    \n    return packets_needed\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    player_one_sum = 23\n    total_sum = sum(range(1, 9))  # Sum of all numbers from 1 to 8\n    player_two_sum = total_sum - player_one_sum\n\n    # Player Two's highest single card cannot be part of Player One's cards\n    # Start with the highest card and check if removing it from Player Two's total sum\n    # still allows for three more cards to fit within the remaining sum\n    for highest_card in range(8, 0, -1):  \n        remaining_sum = player_two_sum - highest_card\n        count = 0\n        for card in range(1, highest_card):\n            if card not in range(player_one_sum - 3 * highest_card, player_one_sum):\n                remaining_sum -= card\n                count += 1\n                if count == 3:  # Found three other cards\n                    if remaining_sum >= 0:  # The remaining sum should be non-negative\n                        return highest_card\n                    break\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score = 168\n    correct_mark = 4\n    wrong_mark = -1\n\n    # Let x be the number of correct answers\n    # Attempted questions is x + (attempted - x), where (attempted - x) are wrong \n    # Total score is 4x - (attempted - x) * 1\n\n    # 4x - (attempted - x) = score\n    # 4x - attempted + x = score\n    # 5x - attempted = score\n    # x = (score + attempted) / 5\n\n    correct_answers = (score + attempted) // correct_mark\n\n    return correct_answers\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    \n    return handshakes\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    num = 2019 + 2018 * 2020\n    den = 2019 * 2020 - 1\n    # Perform the simplification which is based on the identity (n+1)(n) - 1 = n^2 + n - 1\n    # Here, n is 2019, so the denominator should be 2019^2 - 1, and the numerator can be rewritten as 2019 + 2018*2020 = 2019 + (2019 - 1)*2020\n    num_simplified = 2019 + (2019 - 1) * 2020\n    # The numerator is now 2019 * 2020 - 2020 + 2019 which simplifies to 2020^2 - 2020 + 2019\n    num_simplified = 2020**2 - 2020 + 2019\n    # Recognizing that the denominator is (2019^2 - 1), the fraction simplifies to:\n    ans = (num_simplified) / (2019**2 - 1)\n    return ans\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    # Let the number be x, then two-thirds of x is 24 according to the problem statement.\n    x = 24 * (3/2)\n    # Now we need to find three-quarters of this number.\n    ans = x * (3/4)\n    return ans\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    sum_of_odds = sum(range(1, 20, 2))\n    return sum_of_odds\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    # Calculating the least common multiple (LCM) ensures equal packs of 6, 8, 9, 15\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Since he needs at least 1000 markers, we find the smallest multiple of the LCM that's over 1000\n    num_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        num_packs += 1\n\n    # Minimum number of markers Mr Manson had to purchase\n    min_markers = num_packs * pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n    \n    # All possible permutations of digits 0-9 for four unique digits B, C, D, E\n    for p in permutations(range(10), 4):\n        B, C, D, E = p\n        \n        # Skip if B or D is zero, since we want a 4-digit number\n        if B == 0 or D == 0:\n            continue\n\n        # Construct numbers from permutations\n        CBCD = 1000 * C + 100 * B + 10 * C + D\n        CDBC = 1000 * C + 100 * D + 10 * B + C\n        BDEC = 1000 * B + 100 * D + 10 * E + C\n        \n        # Check if the sum matches the condition\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\n    return None\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    total = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_per_month = total / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while True:\n        n += 1\n        if n % 13 == 0:\n            return n\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Counting the occurrences of each letter\n    occurrences = {\n        'C': 1,\n        'H': 1,\n        'A': 1,\n        'L': 2,\n        'E': 2,\n        'N': 1,\n        'G': 1\n    }\n    \n    # Counting the total letters and deducting one for the group of vowels\n    total_letters = sum(occurrences.values()) - 2  # (A, E, E) count as one entity\n    \n    # Calculating the factorial of the total number of letters (considering the vowel group as one)\n    total_permutations = factorial(total_letters)\n    \n    # Dividing by the factorial of the occurrences of repeated letters to account for indistinguishable permutations\n    for count in occurrences.values():\n        total_permutations //= factorial(count)\n    \n    # Calculating the permutations of the vowel group \"AEE\"\n    vowel_group_permutations = factorial(3) // factorial(2)\n    \n    # Total permutations is permutations of the consonants times vowel group permutations\n    ans = total_permutations * vowel_group_permutations\n    return ans\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n\n    each_pay = total_cost / people\n\n    return each_pay\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    divisor = remainder + 1  # Start with divisor greater than remainder\n    while True:\n        if divisor * divisor + remainder > divisor:\n            return divisor * divisor + remainder\n        else:\n            divisor += 1\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_cakes = 4 + 1 + 5\n    total_sales = (4 * 5) + (1 * 10) + (5 * 12)\n    average_price = total_sales / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    \n    equation1 = Eq(cars, Rational(4, 3) * bikes)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    solutions = []\n\n    for total in range(2, 100, 2):  # total is an even number less than 100\n        equation3 = Eq(cars + bikes + lorries, total)\n        sol = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        if all(val.is_integer and val > 0 for val in sol.values()):\n            solutions.append(sol)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    value_after_depreciation = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return value_after_depreciation\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    row_number = 12\n\n    seats_in_last_row = first_term + (row_number - 1) * difference\n\n    return seats_in_last_row\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_min = 10\n    check_in_rate_per_entrance = 25\n\n    # When there is one entrance\n    one_entrance_time = 16  # minutes\n    # No one waiting in line means visitors checked in equal visitors joined\n    total_visitors = one_entrance_time * visitors_per_min  # total visitors lined up before no one waits\n\n    # When there are two entrances\n    check_in_rate_two_entrances = check_in_rate_per_entrance * 2\n    # Calculate how long it will take for two entrances to check in all visitors\n    time_with_two_entrances = total_visitors / check_in_rate_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 245 and get the prime factors and their exponents\n    factors = factorint(245)\n    \n    # In order for 245p to be a cube number, each prime factor's exponent must be a multiple of 3\n    # Since 245 = 5 * 7^2, we need an additional factor of 5^2 * 7 to make it a cube \n    # because 5^3 * 7^3 is a cube. Therefore, p must be 5^2 * 7 = 25 * 7 = 175.\n    p = 1\n    for prime, exponent in factors.items():\n        while exponent % 3 != 0:\n            exponent += 1\n            p *= prime\n    \n    return p\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    \n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    \n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    money_spent_on_book = initial_money * 0.10\n    remaining_money = initial_money - money_spent_on_book\n    money_spent_on_dvd = remaining_money * 0.20\n    money_left = remaining_money - money_spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # Since 1 / 3 = 0.(3) recurring, we know that the first 1000 digits are all '3'.\n    sum_of_digits = 3 * 1000\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    effective_distance = day_distance - night_distance\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= day_distance\n        if total_distance <= 0:\n            break\n        total_distance += night_distance\n\n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    doubled_number = final_number - added_number\n    original_number = doubled_number / 2\n    return int(original_number)\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    result = 8102 - 2018\n    return result\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10 / 100\n    final_price = original_price * (1 - discount_percentage)\n    return final_price\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let x be the original number of oranges and y be the original number of lemons.\n    # According to the problem, we have two ratios:\n    # 3x : 5y = oranges : lemons initially\n    # (x - 48) : y = 1 : 2 after selling oranges\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(3*x, 5*y)          # Represents the initial ratio of oranges to lemons 3:5\n    equation2 = Eq(x - 48, 2*y)       # Represents the new ratio of oranges to lemons 1:2 after selling 48 oranges\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are three types of fruits: apples (A), pears (P), and cherries (C).\n    # Students can choose:\n    # 1. One type of fruit (3 possibilities: A, P, C)\n    # 2. Two types of fruit (3 possibilities: AP, AC, PC)\n    # 3. Three types of fruit (1 possibility: APC)\n    # Total possibilities: 3 (one type) + 3 (two types) + 1 (three types) = 7\n    \n    # According to the Pigeonhole Principle,\n    # to ensure that at least two students choose the same combination of fruits,\n    # we need one more student than the number of possibilities.\n    # Thus, we need 7 + 1 = 8 students to guarantee this.\n    \n    return 8\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent\n    fraction_spent = 1 / 4  # One-quarter spent\n    initial_amount = spent / fraction_spent  # Calculate the initial amount\n    return initial_amount\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    A = 45\n    B = 75\n    C = 210\n\n    return gcd(gcd(A, B), C)\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Number of legs for each animal\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n\n    # Number of each animal\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    \n    # Calculate the total number of legs excluding the cats\n    total_legs_without_cats = (ducks * duck_legs) + (parrots * parrot_legs) + (rabbit * rabbit_legs)\n    \n    # Total number of legs given in the problem\n    total_legs = 32\n    \n    # Number of cats\n    cats = (total_legs - total_legs_without_cats) // 4\n\n    return cats\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "from math import lcm\n\ndef solution():\n    multiples = [6, 8, 9, 15]\n    least_common_multiple = lcm(*multiples)\n    min_markers = (1000 // least_common_multiple) * least_common_multiple\n    if min_markers < 1000:\n        min_markers += least_common_multiple\n    return min_markers\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the variables\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(father_age, judy_age + 33)  # Judy's father is 33 years older than her\n    equation2 = Eq(judy_age + father_age, 63)  # This year, the sum of their ages is 63 years old\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))  # Years ago, father's age was four times Judy's age\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    older_current, younger_current = symbols('older_current younger_current')\n    \n    # When the older brother was the same age as the younger brother's current age\n    # The younger brother was 12 years old.\n    equation1 = Eq(older_current - younger_current, 12)\n    \n    # When the younger brother becomes the same age as the older brother's current age\n    # The older brother will be 27 years old.\n    # This means the difference in age will be constant even at that time.\n    equation2 = Eq(older_current + (older_current - younger_current), 27)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (older_current, younger_current))\n    \n    # We need the current age of the older brother\n    return solutions[older_current]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    eq1 = Eq(A, B + 25)\n    eq2 = Eq(A + 35, 6 * B)\n\n    solution = solve((eq1, eq2), (A, B))\n    \n    return solution[A]\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    # If there are 4 people in each room, 40 students don't have dormitories.\n    # This means total students = 4 * rooms + 40\n    # If there are 6 people in each room, 24 beds will be vacated.\n    # This means total students = 6 * rooms - 24\n    \n    # Since the total number of students is the same in both situations, we can set the equations equal.\n    equation = Eq(4 * rooms + 40, 6 * rooms - 24)\n    \n    # Solve the equation for the rooms\n    number_of_rooms = solve(equation, rooms)[0]\n    \n    return number_of_rooms\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten = 18\n    fraction_eaten = 3 / 5\n    \n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left_over = total_sweets - sweets_eaten\n    \n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n    term_difference = fifteenth_term - tenth_term\n\n    # Calculate common difference\n    common_difference = term_difference / position_difference\n\n    # Calculate first term using the common difference and 10th term\n    first_term = tenth_term - (9 * common_difference)\n\n    # Calculate the 102nd term\n    hundred_second_term = first_term + (101 * common_difference)\n\n    return hundred_second_term\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    years_until_jane_is_15 = 15 - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_is_15\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Create the equation (13 - x)^2 = 25\n    equation = Eq((13 - x)**2, 25)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Find the integer solution(s) if there is any\n    solutions = [sol for sol in solutions if sol.is_integer]\n\n    # Multiple solutions can be possible\n    return solutions[0] if solutions else None\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = (7 + 3) * 11\n    part2 = 7 + (3 * 11)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n\n    marked_price = 1.2 * cost_price\n    selling_price = 0.8 * marked_price \n    loss = marked_price - selling_price\n    \n    equation = Eq(loss, 40)\n    \n    cost_price_value = solve(equation, cost_price)\n\n    return cost_price_value[0]\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    pupils_apples = 20\n    pupils_strawberries = 30\n    pupils_both = 10\n    pupils_neither = 5\n\n    total_pupils = (pupils_apples + pupils_strawberries - pupils_both) + pupils_neither\n\n    return total_pupils\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    total_markers = 708\n    x_gave_away = 532\n    y_fraction_sold = 3/7\n\n    # After giving and selling, they have an equal number of markers\n    equation = Eq(x - x_gave_away, y - y*y_fraction_sold)\n\n    # Summation of initial markers\n    sum_equation = Eq(x + y, total_markers)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation, sum_equation), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Let the capacity of the tank be 1 unit\n    # The rate at which Tap X fills the tank is 1/10 per minute\n    # The combined rate at which Taps X and Y fill the tank is 1/6 per minute\n    # We need to find the rate at which Tap Y fills the tank alone\n\n    rate_x = 1 / 10\n    rate_xy = 1 / 6\n    \n    # Using the inclusion-exclusion principle to find the rate at which Tap Y fills the tank\n    rate_y = rate_xy - rate_x\n    \n    # Since rate is (1 / time) and we need to find time, we take the reciprocal of the rate of Y\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_rate = 0.12\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_points = 44\n    points_for_correct_answer = 6\n    points_for_wrong_answer = -2\n    total_questions = 10\n    \n    # Let x be the number of correct answers and (total_questions - x) be the number of wrong answers.\n    for x in range(total_questions + 1):\n        if x * points_for_correct_answer + (total_questions - x) * points_for_wrong_answer == total_points:\n            return x\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([fact(i) for i in range(1, 9)])\n    last_two_digits = factorial_sum % 100\n    return last_two_digits\n\ndef fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_A = 300\n    concentration_A = 0.20\n    volume_B = 300\n    concentration_B = 0.30\n\n    sugar_A = volume_A * concentration_A\n    sugar_B = volume_B * concentration_B\n\n    total_sugar = sugar_A + sugar_B\n    total_volume = volume_A + volume_B\n\n    concentration_mixture = total_sugar / total_volume\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars_rate = 2.50\n    dollars = 1000\n\n    pounds = dollars / pounds_to_dollars_rate\n\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes Theia had at first\n    # Let y be the number of $10-notes Theia had at first\n    # We have two equations based on the problem statement:\n    \n    # 1. Total number of notes is 95\n    # x + y = 95\n    \n    # 2. When y $10-notes are exchanged for five $2-notes each,\n    # Theia ends up with 175 $2-notes.\n    # x + 5y = 175\n    \n    # To solve these equations, we calculate y first using the below substitution:\n    # y = 95 - x\n    \n    # Plugging y into the second equation:\n    # x + 5 * (95 - x) = 175\n    # This simplifies to:\n    # x + 475 - 5x = 175\n    # 4x = 475 - 175\n    # 4x = 300\n    # x = 300 / 4\n    # x = 75\n    \n    x = (175 - 5 * 95) // -4\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_length = 1\n\n    remaining_length = total_length - head_length\n    carriage_plus_space = carriage_length + space_length\n    \n    num_carriages = remaining_length // carriage_plus_space + 1\n\n    return num_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # digit '8' in the ones place (x*10 + 8) : 8, 18, 28, ..., 288\n    ones_8 = (288 // 10) + 1  # Including 288 itself\n\n    # digit '8' in the tens place (8x + y) : 80, 81, 82, ..., 89 (10 times for each full 100 pages)\n    # Plus additional 80-88 in the last 88 pages of 200\n    tens_8 = (288 // 100) * 10 + min(10, (288 % 100) - 79)\n\n    # digit '8' in the hundreds place : 0 times (since it's only 288 pages)\n    hundreds_8 = 1 if 288 >= 180 else 0  # Adding 1 if it's 180-288\n\n    # Total number of times digit '8' appears\n    total_8 = ones_8 + tens_8 + hundreds_8\n\n    return total_8\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for variables\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # Ahmad has 6 times as many marbles as Ryan\n    equation1 = Eq(ahmad, 6 * ryan)\n\n    # Ahmad and Ryan have $1442 marbles altogether\n    equation2 = Eq(ahmad + ryan, 1442)\n\n    # Solve the system of equations to find the number of marbles Ahmad and Ryan have initially\n    initial_marbles = solve((equation1, equation2), (ahmad, ryan))\n\n    # Calculate the number of marbles to be given for equal sharing\n    marbles_to_give = (initial_marbles[ahmad] - initial_marbles[ryan]) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # How many triangles are equal to a diamond?\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    correct_points = 2\n    incorrect_points = -1\n    total_questions = 50\n    target_score = 82\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * correct_points) + (incorrect_answers * incorrect_points)\n        if score == target_score:\n            return correct_answers\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24 * x - 25 * y, 8)\n    solutions = solve(equation, (x, y))\n\n    x_values = [sol[x] for sol in solutions]\n    smallest_x = min(x_values)\n\n    return smallest_x\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    # Equation 1: The total cost is $2.90\n    equation1 = Eq(pen + pencil, 2.90)\n    # Equation 2: The pen costs 60 cents (or $0.60) more than the pencil\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    # Calculate the sum of the fractions in the denominator\n    sum_denominator = sum(1 / i for i in range(2001, 2011))\n    \n    # Calculate S\n    S = 1 / sum_denominator\n    \n    # Find the largest whole number smaller than S\n    ans = int(S)\n    \n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    number_of_books = 5\n    price_per_book = 4.50\n\n    total_cost = number_of_books * price_per_book\n\n    return total_cost\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kilogram for each bag\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n    \n    # Compare the price per kilogram to find the better value\n    better_value = \"2.5kg bag\" if price_per_kg_bag1 < price_per_kg_bag2 else \"4kg bag\"\n    \n    return better_value\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = (mass_three_quarters_full - mass_quarter_full) / 2\n    \n    mass_empty_jar = mass_quarter_full - mass_half_full\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages = pages_monday + pages_tuesday\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    \n    trees_each_side = (road_length // interval) + 1\n    total_trees = trees_each_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (bus_length * number_of_buses) + (distance_between_buses * (number_of_buses - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    # Let x be the original number\n    # According to the problem, Aiden mistakenly did: (x/4) - 25 instead of the correct 4*x + 25.\n    # Set the mistaken result equal to 2021\n    mistaken_result = 2021\n    # Solve for x: (x/4) - 25 = 2021\n    x = (mistaken_result + 25) * 4\n\n    # Now calculate the correct answer with the found value of x\n    correct_answer = 4 * x + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_of_one_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_of_one_block * 42\n\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9\n    # Let's denote the five-digit number as 203E2, where E is the digit we need to find\n    # The sum of digits is then 2 + 0 + 3 + E + E + 2\n    \n    for E in range(10):  # E can be any digit from 0 to 9\n        if (2 + 0 + 3 + E + E + 2) % 9 == 0:  # Check divisibility by 9\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # direct proportionality relationship\n    proportional_relationship = \"direct\"\n\n    # given x:5 = y:3, solve for y when x=5\n    x = 5\n    y = (3 / 5) * x\n\n    return proportional_relationship, y\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_after_increase = cost_price * 1.50  # 50% above cost\n    selling_price_after_discount = selling_price_after_increase * 0.90  # 10% discount\n    profit = selling_price_after_discount - cost_price\n\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    from math import sqrt, floor\n\n    m = 1\n    while True:\n        # Original number of students forming an m x m square with 5 left\n        original_students = m ** 2 + 5\n        # New number of students if 18 join\n        new_students = original_students + 18\n        # The square root of the new number of students\n        n = sqrt(new_students)\n        # Check if n is an integer (perfect square)\n        if n == floor(n):\n            return original_students\n        m += 1\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let the first six numbers in the sequence be a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # We know that the fourth number a+2b is 6 and the sixth number 3a+5b is 15\n    # Solving these two equations will give us the values of a and b\n    # a + 2b = 6\n    # 3a + 5b = 15\n\n    # From the first equation, we find that a = 6 - 2b\n    # Substituting the value of a in the second equation, we get:\n    # 3(6 - 2b) + 5b = 15\n    # 18 - 6b + 5b = 15\n    # -b = -3\n    # b = 3\n\n    # Substituting the value of b back into the equation for a:\n    # a = 6 - 2b\n    # a = 6 - 2*3\n    # a = 0\n\n    # Now we can find the seventh number in the sequence:\n    # The sixth number is 3a + 5b = 3*0 + 5*3 = 15\n    # The seventh number is 4a + 8b = 4*0 + 8*3 = 24\n\n    return 24\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    A = 12\n    B = 15\n    C = 18\n\n    g = gcd(A, gcd(B, C))\n\n    return g\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('17:00', '%H:%M')\n    play_duration = timedelta(minutes=45)\n    jog_duration = timedelta(minutes=30)\n\n    end_time = start_time + play_duration + jog_duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # The sum of the original 3 numbers with an average of 25\n    original_sum = 3 * 25\n    \n    # The sum of the 3 numbers after altering one to 16 with an average of 22\n    new_sum = 3 * 22\n    \n    # The difference between sums is the change made\n    difference = original_sum - new_sum\n    \n    # Original number before the alteration\n    original_number = 16 + difference\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 3 and number % 6 == 5:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls in the class be 'g' and the number of boys be '36 - g'\n    from sympy import symbols, Eq, solve\n    g = symbols('g')\n\n    # The total score of the girls is 'girls_average * g'\n    # The total score of the boys is 'boys_average * (total_students - g)'\n    # The overall total score is 'total_average * total_students'\n    equation = Eq(girls_average * g + boys_average * (total_students - g), total_average * total_students)\n\n    num_girls = solve(equation, g)\n    return num_girls[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    david_sugar = 800 * 0.05\n    eugene_sugar = 200 * 0.30\n    felix_sugar = 300 * 0.10\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    total_solution = 800 + 200 + 300\n    concentration = (total_sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -2\n    rex_score = 66\n    questions_answered = total_questions - 1  # Rex answered all but one question\n    \n    # Assume all answered questions were correct.\n    max_score = questions_answered * points_for_correct\n    \n    # Number of incorrect answers needed to decrease the score to 66\n    # For each incorrect answer, the score is reduced by points_for_correct (4 points) - points_for_incorrect (-2 points) = 6 points\n    incorrect_answers = (max_score - rex_score) // (points_for_correct - points_for_incorrect)\n    \n    # The number of correct answers is the remaining number of answered questions\n    correct_answers = questions_answered - incorrect_answers\n    \n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "import itertools\n\ndef solution():\n    # We have vertices of a cube labeled as 1 to 8\n    # We need to find distinct Hamiltonian cycles (a cycle that visits each vertex once)\n    # The cube has a fixed structure, so we can consider one vertex as fixed to eliminate symmetries\n    # and permutations that represent the same cycle. Let's fix vertex 1 and only consider cycles that start at 1\n    \n    vertices = [2, 3, 4, 5, 6, 7, 8]  # We exclude the fixed vertex 1\n    all_permutations = itertools.permutations(vertices)\n    \n    # A helper function to check if a given path is a valid Hamiltonian cycle in a cube\n    def is_valid_cycle(permutation):\n        # Edges of a cube, considering vertex 1 being always the starting point\n        valid_edges = {(1, 2), (1, 3), (1, 5), (1, 8),\n                       (2, 3), (2, 4), (2, 7),\n                       (3, 4), (3, 6),\n                       (4, 5), (4, 8),\n                       (5, 6), (5, 7),\n                       (6, 7), (6, 8),\n                       (7, 8)}\n        \n        # Include the start and end connection to vertex 1 to complete the cycle\n        path = [1] + list(permutation) + [1]\n        \n        # Check if each consecutive edge in the path is valid\n        for i in range(len(path) - 1):\n            if (path[i], path[i + 1]) not in valid_edges and (path[i + 1], path[i]) not in valid_edges:\n                return False\n        return True\n    \n    # Count valid Hamiltonian cycles\n    count = 0\n    for permutation in all_permutations:\n        if is_valid_cycle(permutation):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    \n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20\n    concentration1 = 0.35\n    volume2 = 30\n    concentration2 = 0.60\n\n    total_volume = volume1 + volume2\n    total_fruit_juice = volume1 * concentration1 + volume2 * concentration2\n\n    new_concentration = (total_fruit_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_badges = symbols('initial_badges')\n    sold_first_day = 5 / 7 * initial_badges\n    remaining_after_first = initial_badges - sold_first_day\n    sold_second_day = 1 / 3 * remaining_after_first\n    remaining_badges = remaining_after_first - sold_second_day\n    final_count = remaining_badges + 354\n\n    equation = Eq(final_count, 3 * initial_badges)\n    \n    ans = solve(equation, initial_badges)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Start with the smallest three-digit number with 7 as one digit\n    # The smallest such number would have 7 as the hundreds place\n    # Next, find the smallest digit that satisfies the condition of having a difference of 4 or less with 7\n    # The smallest digit in this case would be 3 (because 7 - 4 = 3)\n    # Finally, the following digit, to ensure that the number is as small as possible and satisfies the condition, would be 3 as well\n    # The smallest three-digit number with 7 as one digit and differences of 4 or less between digits is therefore 733\n    return 733\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Mapping of the letter to the corresponding number\n    angel_to_number = {\n        'A': '0',\n        'n': '1',\n        'g': '4',\n        'e': '7',\n        'l': '5',\n    }\n\n    # Mapping of the letter to the corresponding number for \"Devil\"\n    devil_to_number = {\n        'D': angel_to_number['g'],\n        'e': angel_to_number['e'],\n        'v': angel_to_number['n'],\n        'i': angel_to_number['l'],\n        'l': angel_to_number['l'],\n    }\n\n    # Creating the correct password as a string\n    correct_password = \"\".join(devil_to_number[letter] for letter in 'Devil')\n\n    return correct_password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # For a knockout tournament, in each round half of the players are eliminated.\n    # Hence, the number of rounds needed for n players is log2(n).\n    # Since we have 4 players, we need log2(4) rounds to determine the winner.\n    import math\n    num_players = 4\n    rounds = math.ceil(math.log2(num_players))\n    return rounds\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    counter = 0\n    for page_number in range(1, 101):\n        counter += str(page_number).count('2')\n    return counter\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    produced_by_both = total_exhibits - not_produced_by_A - not_produced_by_B\n    return produced_by_both\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    ans = solve_congruence(*congruences)\n    if 200 <= ans[0] < 300:\n        return ans[0]\n    else:\n        return ans[0] + ans[1]*(200 // ans[1])\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # Pigeonhole principle\n    # Case worst scenario, where the magician picks the maximum number of balls of the same color before getting at least one of each\n    # So he could pick all blue balls and then all red balls and first green to guarantee one of each\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # Picking all blue, all red and the first green guarantees one of each color\n    min_balls_to_pick = blue_balls + red_balls + 1  # We add 1 for the first green ball\n\n    return min_balls_to_pick\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse = symbols('blouse')\n    skirt = blouse + 14\n    total_cost = 3 * skirt + 2 * blouse\n    equation = Eq(total_cost, 317)\n\n    solution = solve(equation, blouse)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    final_value_last_year = 110000\n    # If the value increased by 10% to get to Â£110,000 last year,\n    # then the original value was 100% (the original value) + 10% (the increase) = 110%.\n    # We calculate the original value as 100%.\n    original_value = final_value_last_year / 1.10\n    \n    # This year, the value loses 10%, so the final value becomes 90% of Â£110,000.\n    final_value_this_year = final_value_last_year * 0.90\n    \n    # Profit or loss comparing with the original price\n    profit_or_loss = final_value_this_year - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate ways to arrange the groups of flowers: 3! for rose colors, 4! for jasmine colors\n    # and 1! for the single daisy, since all flowers of the same kind are together.\n    roses = factorial(3)\n    jasmines = factorial(4)\n    daisy = factorial(1)\n    \n    # Calculate ways to arrange the groups themselves: 3 groups can be arranged in 3! ways.\n    groups = factorial(3)\n    \n    # Total arrangements is the product of the arrangements of individual groups and the groups themselves.\n    total_arrangements = roses * jasmines * daisy * groups\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since 8A - 3B is a multiple of 3, and B is prime, B must be congruent to 1 or 2 mod 3,\n    # otherwise if B is 3 mod 3, then B is 3 which is a prime, but 8A is always even and 3B will be odd,\n    # which makes 8A - 3B odd and thus not a multiple of 3.\n    # So B cannot be 3 and has to be either 1 or 2 mod 3.\n\n    # If B is 1 mod 3, then 8A - 3B is 8A - 3 * 1 (mod 3), which simplifies to 2A (mod 3).\n    # For 2A to be 0 mod 3, A must be 3/2 mod 3 which is not possible since A is an integer.\n    # Hence B cannot be 1 mod 3, so B must be 2 mod 3.\n\n    # If B is 2 mod 3, then 8A - 3B is 8A - 3 * 2 (mod 3), which simplifies to 2A + 1 (mod 3).\n    # For 2A + 1 to be 0 mod 3, A must be 1 mod 3.\n    # The smallest prime that is 1 mod 3 is A=2 (since the prime 3, which is also 1 mod 3, would lead to 3B being a multiple of 9).\n    # Therefore, A must be 2.\n\n    A = 2\n    return A\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2  # pupils in each room after the transfer\n    \n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial\n\n    num_factorial_6 = factorial(6)\n    num_factorial_8 = factorial(8)\n    \n    count = 0\n    for i in range(num_factorial_6, num_factorial_8 + 1):\n        if i % num_factorial_6 == 0 and num_factorial_8 % i == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 20 / 100\n    discount_amount = original_price * discount_rate\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    total_sum = 60\n    n = 1  # start with 1 to find the maximum number of positive integers that can sum up to 60\n    while (n * (n + 1)) / 2 <= total_sum:  # use the formula for the sum of first n natural numbers\n        n += 1\n    return n - 1  # subtract 1 because the loop will exit when it exceeds the total sum\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100): # define an upper limit to stop the search\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    rate_ml_per_min = 20\n    mins_per_hour = 60\n    ml_to_litres = 1000\n\n    leaked_ml = rate_ml_per_min * mins_per_hour\n    leaked_litres = leaked_ml / ml_to_litres\n\n    return leaked_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        s, e, v = perm\n        see = s * 100 + e * 10 + e\n        eve = e * 100 + v * 10 + e\n        bee = b * 100 + e * 10 + e\n\n        if s != 0 and b != 0 and see + eve + bee == see * 3:\n            return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "from sympy import symbols, solve\n\ndef solution():\n    age = symbols('age')\n    equations = [\n        age % 2 == 1,\n        age % 3 == 1,\n        age % 4 == 1,\n        age % 6 == 1,\n        age % 7 == 0\n    ]\n    ans = solve(equations, (age))\n    return ans[0]\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # cm\n    difference = 30  # cm\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 colors and to guarantee one pair of the same color,\n    # Cindy might pick one of each color first, which is 3 socks.\n    # The next sock she picks must then match one of the three she already has.\n    # So she must pick 3 + 1 socks to guarantee a pair of the same color.\n    \n    return 3 + 1\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cut_into_three_parts = 0\n    while True:\n        if initial_pieces + 2 * cut_into_three_parts == final_pieces:\n            return cut_into_three_parts\n        cut_into_three_parts += 1\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # By the Pigeonhole Principle, the worst case scenario is when we take apples of alternating colors.\n    # To ensure that we get 2 apples of the same color, we need to take 1 red + 1 green + 1 more (of any color).\n    # This is because even if the first two apples are of different colors, the third apple must match one of\n    # the first two in color.\n\n    # Take 1 red apple\n    # Take 1 green apple\n    # Take 1 more apple (no matter the color, it will match either the red or green apple)\n\n    number_of_apples_taken = 1 + 1 + 1  # One of each color + 1 more\n\n    return number_of_apples_taken\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    water_left = 7\n\n    original_volume = pails_filled * liters_per_pail + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    # Pair the numbers to form whole numbers before performing the calculation\n    # 6.3 + 9.6 forms one whole number (16)\n    # 8.7 - 2.6 forms another whole number (6)\n    # Now we can perform the addition of 16 + 6\n    ans = 16 + 6\n    return ans\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum([x if x % 2 == 0 else -x for x in range(1, 47)])\n    return ans\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    x, y, z = 243**(1/20), 243**(1/15), 243**(1/5)\n    ans = x**8 * y**6 * z**2\n    return ans\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = 2 / 3 * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n    \n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    from math import factorial\n\n    # calculate factorial of 2010 (A)\n    factorial_of_2010 = factorial(2010)\n    \n    # convert the factorial to a string and strip zeros from right\n    str_factorial = str(factorial_of_2010).rstrip('0')\n    \n    # return the last non-zero digit (which is now the first from the right)\n    ans = int(str_factorial[-1])\n    return ans\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_for_four = 150 - 2\n    total_height_for_four = 4 * average_height_for_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_for_two = total_height_for_two / 2\n\n    return average_height_for_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_road_length = 500\n    meters_per_day = 50\n\n    num_days = total_road_length / meters_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Since the pattern is 2 ones, 3 twos, 4 threes, ..., n+1 n's\n    # We need to find the total count of numbers written when we reach 8s\n    total_count = sum([(n+1) * n for n in range(1, 9)])\n    # To find the median, we need to know if the count is odd or even\n    # Since we're increasing by odd numbers every time (2 ones, 3 twos), the total will be odd,\n    # and we can find the exact middle\n    middle_position = (total_count + 1) // 2\n    \n    # Now we need to find out which number occupies that middle position\n    count = 0\n    for i in range(1, 9):\n        count += (i * (i + 1))\n        if count >= middle_position:\n            # Once the count surpasses the middle_position, the last i written is the median\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    daily_fodder_per_cattle = 10\n    num_cattles = 8\n    num_days = 4\n\n    total_fodder = daily_fodder_per_cattle * num_cattles * num_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n    num_chickens = 8 * 2\n    return num_chickens\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    remaining_marbles = 35\n    marbles_given_to_nate = 30\n    marbles_given_to_ollie = 26\n    \n    remaining_fraction = 1 - 5/12  # Fraction of marbles Larry had after giving to Mark\n    \n    # Calculate the total marbles Larry had after giving to Mark, before giving to Nate and Ollie\n    remaining_after_mark = (remaining_marbles + marbles_given_to_nate + marbles_given_to_ollie) / remaining_fraction\n    \n    return remaining_after_mark\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42\n    y_factors = set()\n    y = 1\n    \n    # Factoring 42^2 to get the exponents for y\n    factor_42 = 42\n    for i in range(2, factor_42//2 + 1):\n        while factor_42 % i == 0:\n            if i in y_factors:\n                y_factors.remove(i)\n            else:\n                y_factors.add(i)\n            factor_42 //= i\n    if factor_42 > 1:\n        if factor_42 in y_factors:\n            y_factors.remove(factor_42)\n        else:\n            y_factors.add(factor_42)\n    \n    # Multiplying remaining factors to get y\n    for factor in y_factors:\n        y *= factor\n\n    return x + y\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # total weight of the sugar solution\n    concentration = 0.22  # concentration of sugar in the solution\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for i in range(1, 100):\n        total += sum(map(int, str(i)))\n    return total\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Jess and Jill have initially\n    jess, jill = symbols('jess jill')\n\n    # Given that Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After Jill gives eight sweets to Jess, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets they have together\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given = 1/4\n    money_given = total_money * part_given\n    return money_given\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n\n    remaining_length = original_length - piece_cut\n    \n    return remaining_length\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime\n\ndef solution():\n    current_date = datetime.now()\n    birth_year = current_date.year - 38\n    birth_month = current_date.month - 6\n\n    if birth_month <= 0:\n        birth_year -= 1\n        birth_month += 12\n\n    return birth_year\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            return beads\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n    \n    money_after_CDs = (3 / 4) * initial_amount - 3\n    money_after_batteries = (2 / 5) * money_after_CDs - 6\n    equation = Eq(money_after_batteries, 24)\n    \n    solved = solve(equation, initial_amount)\n\n    return solved[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    for p in permutations(digits, 4):\n        if p[-1] in even_digits:  # Ensuring the last digit is even\n            if p[0] != '0':       # Ensuring the number is not starting with zero (4-digit rule)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = 1848\n    pie_ratio = 15\n    cake_ratio = 7\n    pie_to_cake_number_ratio = 4\n    cake_to_pie_cost_diff = 13\n\n    pies_sold, cakes_sold = symbols('pies_sold cakes_sold')\n    pie_cost = symbols('pie_cost')\n\n    # Equations based on money collected ratio and total money collected\n    money_from_pies = pie_ratio / (pie_ratio + cake_ratio) * total_money\n    money_from_cakes = cake_ratio / (pie_ratio + cake_ratio) * total_money\n\n    # Equations based on number of pies to cakes sold\n    eq1 = Eq(pies_sold / cakes_sold, pie_to_cake_number_ratio)\n\n    # Equations based on cost difference between cake and pie\n    eq2 = Eq((money_from_pies / pies_sold) + cake_to_pie_cost_diff, money_from_cakes / cakes_sold)\n\n    # Equations based on total money collected from pies and cakes\n    eq3 = Eq(pie_cost * pies_sold, money_from_pies)\n    eq4 = Eq((pie_cost + cake_to_pie_cost_diff) * cakes_sold, money_from_cakes)\n\n    solutions = solve((eq1, eq3, eq4), (pies_sold, cakes_sold, pie_cost))\n\n    return solutions[cakes_sold]\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length_a = 45\n    length_b = 30\n\n    longest_possible_length = gcd(length_a, length_b)\n\n    return longest_possible_length\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of 9^n follows a pattern: 9, 1, 9, 1, ...\n    # (9^1 has a units digit of 9, 9^2 has a units digit of 1, and so on)\n    units_digit_9_pow_2015 = 9  # because 2015 is odd, following the pattern\n    units_digit_9_pow_2016 = 1  # because 2016 is even, following the pattern\n    \n    # Sum of the units digits\n    ans = (units_digit_9_pow_2015 + units_digit_9_pow_2016) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial as fact\n\n    # Calculate permutations of 5 men\n    men_permutations = fact(5)\n    \n    # There are 6 possible positions for the women: _ M _ M _ M _ M _ M _\n    women_positions = 6\n    \n    # Calculate combinations of 3 women choosing from 6 positions\n    women_combinations = fact(women_positions) // (fact(3) * fact(women_positions - 3))\n    \n    # Calculate permutations of 3 women\n    women_permutations = fact(3)\n    \n    # Final answer is product of men_permutations, women_combinations and women_permutations\n    ans = men_permutations * women_combinations * women_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Speeds of Qiqi and Weiling\n    speed_qiqi = 60  # m/min\n    speed_weiling = 72  # m/min\n\n    # Time delay for Weiling\n    time_delay_weiling = 2  # minutes\n\n    # Time difference upon arrival\n    time_difference = 4  # minutes\n\n    # Let the time taken by Qiqi to reach the school be t minutes.\n    # Then, Weiling takes (t - 2 - 4) = (t - 6) minutes to reach the school.\n\n    # The distances covered by both are the same.\n    # Therefore, Qiqi's distance = Weiling's distance\n    # speed_qiqi * t = speed_weiling * (t - 6)\n\n    # Solving for t:\n    t = (speed_weiling * 6) / (speed_weiling - speed_qiqi)\n    \n    # Distance between the library and the school is Qiqi's distance, which is:\n    distance = speed_qiqi * t\n\n    return distance\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    return 525 // 25\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    tax_below_30000 = T / 100 * 30000\n    tax_above_30000 = (T + 3) / 100 * (income - 30000)\n    total_tax = tax_below_30000 + tax_above_30000\n\n    equation = Eq(total_tax, (T + 1) / 100 * income)\n\n    solutions = solve((equation, Eq(income, 30000), Eq(T, 0)), (T, income))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    # Marc's watch shows 11:50 AM but is 15 minutes slow.\n    marcs_real_time = 11 * 60 + 50 + 15  # Convert hours to minutes, add 50 minutes, and correct 15 minutes.\n\n    # George's watch is 7 minutes fast.\n    georges_real_time = marcs_real_time - 7\n\n    # Half an hour's time later.\n    georges_time_half_hour_later = georges_real_time + 30  # Add 30 minutes.\n\n    # Convert minutes back to hours and minutes.\n    hours = georges_time_half_hour_later // 60\n    minutes = georges_time_half_hour_later % 60\n\n    # Since it's in the AM, we need to adjust if the hours exceed 12.\n    if hours >= 12:\n        hours = hours - 12\n        # No need to switch to PM as half an hour from 11:50 AM would still be in AM\n\n    return f\"{hours}:{str(minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10\n    B_rate = 1 / 15\n    combined_rate = A_rate + B_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = 3 * jump_up - slide_down\n    \n    jumps_needed = (total_height - slide_down) // effective_jump\n    remainder = (total_height - slide_down) % effective_jump\n    \n    if remainder != 0:\n        jumps_needed = (jumps_needed + 1) * 3  # total jumps including the last set\n        # In the last set, the squirrel jumps until it reaches or exceeds the height\n        while remainder > 0:\n            remainder -= jump_up\n            jumps_needed += 1\n            if remainder <= 0:\n                break\n            remainder += slide_down\n    else:\n        jumps_needed *= 3  # all jumps are in full sets\n\n    return jumps_needed\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    # Let x be the number of correct answers\n    # Then 30 - x is the number of wrong answers\n    \n    # Each correct answer gives 5 marks\n    # Each wrong answer deducts 1 mark\n    # Total mark is 90\n    \n    # Formulate the equation based on the problem statement\n    # 5x - (30 - x) = 90\n    # 5x - 30 + x = 90\n    # 6x = 120\n    # x = 20\n\n    # Solve the equation to find the number of correct answers\n    x = (90 + 30) // 6\n    return x\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # If we draw one marble from each color, except the one with the greatest quantity, we still aren't guaranteed 4 different colors.\n    # So, we need to take all of a single color plus one from each of the remaining colors to ensure 4 different colors.\n    # That is, all reds (12) and one from each of the others.\n    \n    total_marbles = 12 + 1 + 1 + 1  # All 12 reds, and one of each of the other colors\n    return total_marbles\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_age_2002 = 45\n    jenny_age_1995 = 22\n    gigi_age_when_jenny_22 = 22  # Age to find for Gigi\n\n    # Calculate the year when Gigi was 22\n    year_when_gigi_22 = 2002 - (gigi_age_2002 - gigi_age_when_jenny_22)\n    \n    # Calculate the age difference between Gigi and Jenny\n    age_difference = 2002 - 1995  # 7 years\n\n    # Calculate the age of Jenny when Gigi was 22\n    jenny_age_when_gigi_22 = jenny_age_1995 - (year_when_gigi_22 - (1995 - age_difference))\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        code = int(f'451{last_digit}')\n        if code % 3 == 0 and code % 5 != 0 and code % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(1, 1000):  # Arbitrary large number to ensure we find a solution\n        number = 24 * i       # LCM of 3 and 8 is 24\n        if str(number)[-1] == '2':\n            return number\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    time_spent = timedelta(weeks=3)\n\n    end_date = start_date + time_spent\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # negative because terms are decreasing\n    last_positive_term = 2        # since 2 is the last positive number before reaching 0 or negative.\n\n    # Using formula for the nth term of arithmetic sequence: a_n = a_1 + (n-1)d\n    # where a_n is the nth term, a_1 is the first term, n is the number of terms, and d is the common difference.\n    # In this case, we are solving for n when a_n is the last positive term, so a_n >= 2 (last positive term)\n    # 2 >= 50 + (n-1)(-4)\n    # (n-1)(-4) <= 2 - 50\n    # (n-1)(-4) <= -48\n    # n-1 >= 12 (divide both sides by -4 and flip the inequality sign)\n    # n >= 13\n    # So, the last term number is 13 since 14 would give a non-positive term\n\n    num_terms = 13 # Since the nth term that still gives a positive number is when n = 13\n\n    return num_terms\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percent = 15\n    discount_amount = (discount_percent / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n\n    # Initially there's no way to divide the apples\n    count = 0\n    \n    # Since both groups must have different number of apples\n    # and have at least 1 apple, we can just iterate through half way\n    # The maximum for the smaller group will be (total_apples - 1) // 2\n    for apples_in_group1 in range(1, (total_apples // 2) + 1):\n        # The second group's count just complements the first, no need to iterate.\n        apples_in_group2 = total_apples - apples_in_group1\n    \n        # Each unique division of apples is just one possibility\n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = 5 * 0.99 + 2 * 1.98\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    cost_for_drinks = total_cost - total_cupcake_cost\n    cost_per_can = cost_for_drinks / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_wrong = -2\n    total_points = 51\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_correct + wrong * points_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    def find_difference(seq):\n        return [seq[i] - seq[i-1] for i in range(1, len(seq))]\n\n    sequence = [8, 20, 31, 41, 50]\n    first_diffs = find_difference(sequence)\n    second_diffs = find_difference(first_diffs)\n\n    # Since second_diffs is constant, it's a double arithmetic sequence\n    # So we can just add the constant difference to the last element.\n    next_diff = first_diffs[-1] + second_diffs[0]\n    next_number = sequence[-1] + next_diff\n\n    return next_number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    first_traffic_light = 0.5  # in minutes\n    second_traffic_light = 0.75  # in minutes\n    combined_cycle = 9  # in minutes\n\n    # Convert first and second traffic light cycles to seconds\n    first_traffic_light_sec = first_traffic_light * 60\n    second_traffic_light_sec = second_traffic_light * 60\n\n    # Least Common Multiple (LCM) of the first two traffic lights in seconds\n    lcm_first_second_traffic_lights = lcm(int(first_traffic_light_sec), int(second_traffic_light_sec))\n\n    # The third traffic light must have a cycle time in seconds that is a divisor of the combined cycle\n    # converted to seconds (9 minutes = 540 seconds) and greater than or equal to 30 seconds\n    third_light_time = None\n    for time in range(30, 540 + 1):\n        if (540 % time) == 0 and lcm_first_second_traffic_lights % time == 0:\n            third_light_time = time\n            break\n\n    return third_light_time\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]  # Given numbers without the missing number\n    mean_value = 5  # Given mean of all numbers\n    total_numbers = 8  # Including the missing number\n\n    total_sum = mean_value * total_numbers  # Total sum of all numbers\n    current_sum = sum(numbers)  # Sum of given numbers\n    missing_number = total_sum - current_sum  # Missing number\n\n    return missing_number\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    ans = 0\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 3 people who can receive the ball from A (excluding A)\n    first_pass_options = 3\n    \n    # After the first pass, the person with the ball can pass it to 2 people (excluding A and themselves)\n    second_pass_options = 2\n    \n    # After the second pass, the person with the ball can pass it to only 1 person, which is A\n    third_pass_options = 1\n    \n    # Total methods is the product of options at each pass\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    daniel, ming = symbols('daniel ming')\n\n    # Equation 1: Daniel is four times older than Ming\n    equation1 = Eq(daniel, 4 * ming)\n    \n    # Equation 2: Six years later, the sum of their ages is 62\n    equation2 = Eq((daniel + 6) + (ming + 6), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    total_weight_g = weight_per_paper_g * number_of_girls\n    # Convert grams to kilograms (1 kg = 1000 g)\n    total_weight_kg = total_weight_g / 1000\n    \n    return total_weight_kg\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Each bus can seat 36 people.\n    seats_per_bus = 36\n\n    # After occupying all the seats in some buses,\n    # 11 members from group A had to combine with the remaining members from group B\n    # to take up all the seats in another bus.\n    # This means 36 - 11 = 25 members are from group B in the last bus.\n    members_in_last_bus = seats_per_bus - 11\n\n    # Let's use algebra to solve for the exact number of members in group A and B.\n    # Let x be the number of group A's members entirely occupying some buses.\n    # Let y be the number of group B's members entirely occupying other buses.\n    # So the total number of group B's members is y + 25.\n    # This means the last bus has 11 from group A and 25 from group B.\n    # Each member of tour group A took a picture with every member of group B.\n    # The total number of pictures is x * (y + 25)\n    # Since we don't know the exact numbers of x and y, we don't need to solve for them.\n\n    # If each roll of film can take 36 pictures, we need to find out how many rolls\n    # were needed for the x * (y + 25) pictures and how many pictures the last roll can take.\n\n    # Since we need to find out only how many more pictures can the last roll of film take\n    # after all have taken the photograph, we are only concerned with the remainder when\n    # the total number of pictures is divided by the number of pictures a roll of film can take.\n\n    # The total number of pictures taken on the last roll\n    # would be the remainder of the total number of pictures divided by the capacity of a roll.\n    total_pictures_last_roll = (11 * members_in_last_bus) % seats_per_bus\n\n    # The number of more pictures the last roll of film can take\n    additional_pictures_capacity = seats_per_bus - total_pictures_last_roll\n\n    return additional_pictures_capacity\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = 0\n    for i in range(2, 1001, 4):\n        ans += (i+2)**2 - i**2\n    return ans\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n\n    nums = [1, 2, 8, 9]\n    maximum_product = 0\n    for perm in permutations(nums):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > maximum_product:\n            maximum_product = product\n    return maximum_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # The time difference between crossing the two bridges is related only\n    # to the time the length of the line crosses the end of the bridge.\n    # Speed = distance / time\n    # For the first bridge, we calculate the speed\n    speed = 9 / 8  # in meters per second\n\n    # It takes the line 3 meters extra to cross the end of each bridge\n    # because the length of the line is 3 meters\n    extra_time = 3 / speed  # in seconds\n\n    # Total time to cross the second bridge is 10 seconds\n    # Time to cross just the bridge without the overhang is 10 - extra_time\n    bridge_cross_time = 10 - extra_time  # in seconds\n\n    # Now we can find the length of the second bridge by multiplying speed with bridge_cross_time\n    second_bridge_length = speed * bridge_cross_time  # in meters\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "from datetime import datetime\n\ndef solution():\n    start_time = datetime.strptime(\"11:55 AM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"1:40 PM\", \"%I:%M %p\")\n\n    time_played = end_time - start_time\n    minutes_played = time_played.seconds / 60\n\n    return int(minutes_played)\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    return 11 + 7 + 1 # +1 since we need to count Crystal as well\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(2, int(product**(1/3)) + 1, 2):  # consider only even numbers\n        if product % i == 0:  # if i is a factor\n            second = i\n            third = second + 2\n            first = second - 2\n            if first * second * third == product:\n                return third\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    count = 0\n    for group1 in range(1, total_cupcakes):  # One for each possible division\n        group2 = total_cupcakes - group1\n        if group1 < group2:  # Ensure the groups have different numbers of cupcakes\n            count += 1\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for n in range(100, 1000):\n        if n % 3 == 0 and n % 11 == 0:\n            if (n - 1) % 2 == 0 and (n - 1) % 7 == 0:\n                return n\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_time = 45\n    moving_period = 5\n    number_of_lessons = 3\n\n    total_time = start_time + timedelta(minutes=(lesson_time + moving_period) * (number_of_lessons - 1) + lesson_time)\n    ans = total_time.strftime('%H:%M')\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(28, 84), 126)\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit must be between 1 and 9\n        for b in range(10):  # tens digit must be between 0 and 9\n            for c in range(10):  # ones digit must be between 0 and 9\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_winnings = 12018\n    jasmine_winnings = 309\n    total_winnings = neha_winnings + jasmine_winnings\n    return total_winnings\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    troy, adam = symbols('troy adam')\n\n    # Troy had 5 times as many coins as Adam\n    equation1 = Eq(troy, 5 * adam)\n\n    # After Adam took 24 more coins from his mother, Adam had 1/3 as many coins as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # calculate the total number of coins they had at first\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fives, tens = symbols('fives tens')  # The number of $5 and $10 notes initially\n    \n    # Equation for total notes\n    eq1 = Eq(fives + tens, 57)\n    # Equation after spending 60% of $10 and 25% of $5 notes\n    eq2 = Eq(tens * 0.4, fives * 0.75 * 2)\n    # Solve for fives and tens\n    solutions = solve((eq1, eq2), (fives, tens))\n    \n    total_spent_on_bag = 0.60 * solutions[tens] * 10 + 0.25 * solutions[fives] * 5\n    \n    return total_spent_on_bag\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for n in range(1000, 10000):\n        digits = [int(d) for d in str(n)]\n        product = 1\n        for d in digits:\n            product *= d\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Hanson had\n    x = symbols('x')\n\n    # Let's translate the problem into equations\n    # After buying CDs, Hanson has left (3/4)x - 3\n    # Then, he spent 3/5 of the remaining money + 6 on batteries\n    # Finally, he is left with 24 dollars\n\n    remaining_after_CDs = (3/4) * x - 3\n    spent_on_batteries = (3/5) * remaining_after_CDs + 6\n    remaining_after_batteries = remaining_after_CDs - spent_on_batteries\n\n    # Establish the equation based on the final amount\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation to find the original amount x\n    original_amount = solve(equation, x)[0]\n\n    return original_amount\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for one in range(0, 10, 2):  # even numbers end with 0,2,4,6,8\n                if hundred + ten + one == 8 and len({hundred, ten, one}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Worst-case scenario: Darrell picks all blue and white beads before getting the 5 green beads\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n\n    # Darrell must pick all blue and white beads, and then pick 5 green beads\n    min_beads_to_draw = blue_beads + white_beads + green_beads_needed\n\n    return min_beads_to_draw\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    # Since 1/4 of 16 equals 4, we want to find a number that when halved gives 4.\n    # Let's call that number x. Therefore, 1/2 of x should equal to 4.\n    # Thus, x = 4 * 2\n    x = 4 * 2\n    return x\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "from math import comb\n\ndef solution():\n    games_per_group = comb(4, 2)  # Each group plays a round-robin of C(4, 2) games.\n\n    # 4 groups each playing games_per_group\n    group_stage_games = 4 * games_per_group\n    \n    # Knockout stage starting with 8, then 4, then 2, and finally 1 game\n    knockout_stage_games = 8 - 1 + 4 - 1 + 2 - 1 + 1 - 1\n    \n    # Total games is the sum of group stage and knockout stage games\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A is twice as good as B, so A takes half the time of B\n    equation1 = Eq(A, B / 2)\n\n    # A can finish the job in 12 days less than B\n    equation2 = Eq(A + 12, B)\n\n    # Solve for B (the time B takes to finish the job alone)\n    times = solve((equation1, equation2), (A, B))\n\n    # Calculate the work rates of A and B\n    work_rate_A = 1 / times[A]  # A's work rate\n    work_rate_B = 1 / times[B]  # B's work rate\n\n    # Combined work rate when A and B work together\n    combined_work_rate = work_rate_A + work_rate_B\n\n    # Total time for A and B to complete the job together\n    total_time = 1 / combined_work_rate\n\n    return total_time\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    arrange_plants = 4\n    ways = factorial(total_plants) // factorial(total_plants - arrange_plants)\n    return ways\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    # Applying the principle of Inclusion-Exclusion\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    stickers_initial = stickers_end - stickers_bought + stickers_given\n\n    return stickers_initial\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has and a be the number of candies Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, then they would have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times of Aliceâs\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Find the total number of candies they had originally\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2,3), (2,4), (2,5), (0,7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    digits = '12345679'\n    for perm in permutations(digits):\n        num_str = '8' + ''.join(perm)\n        if all(int(num_str[:i]) % i == 0 for i in range(2, 10)):\n            if '0' not in num_str[1:]:  # Ensure 0 is in the last place for divisibility by 10\n                num_str += '0'\n                return int(num_str)\n    return None\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    belinda_after_giving = belinda_tomatoes - 7\n    matthew_tomatoes = belinda_after_giving  # since they'll have the same number afterwards\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_assembly_rate = 10\n    increased_efficiency_rate = base_assembly_rate * (1 + 50/100)\n    return increased_efficiency_rate\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # Since 15 and 21 are two of the factors and we are dealing with a positive integer,\n    # their least common multiple (LCM) should give us the number itself, which has exactly 8 factors.\n    # LCM(15, 21) = 3 * 5 * 7 (since 3 is the common and 5 and 7 are unique prime factors)\n\n    number = 3 * 5 * 7\n\n    # To find all eight factors, we systematically search for all the divisors of the number.\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n\n    # Verify that the number has exactly 8 factors\n    if len(factors) == 8:\n        # Return the sum of the factors if the condition is true\n        return sum(factors)\n    else:\n        # Otherwise, return a message saying the number does not have exactly 8 factors\n        return \"The number does not have exactly 8 factors.\"\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # The two numbers and their difference\n    n1 = 2012\n    n2 = 1274\n    diff = n1 - n2\n\n    # The largest possible value of D is the greatest common divisor of the difference\n    D = gcd(diff, n1)\n\n    # As D divides both numbers, let's find the corresponding remainder\n    R = n1 % D\n\n    # We want the largest possible value of D - R\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_4 = pow(4, 2009, 10)\n    last_digit_6 = pow(6, 2010, 10)\n    ans = (last_digit_4 + last_digit_6) % 10\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_juice = (5/7) * total_juice\n    remaining_after_grace = total_juice - grace_juice\n    evelyn_juice = (1/9) * remaining_after_grace\n    remaining_after_evelyn = remaining_after_grace - evelyn_juice\n    \n    return remaining_after_evelyn\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(32):\n        for five_gram_weights in range(13):\n            if 2 * two_gram_weights + 5 * five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_two = total_height_for_six - total_height_for_four\n    average_height_for_two = total_height_for_two / 2\n    return average_height_for_two\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Since both players are playing optimally, we need to create a strategy for Betty\n    # to ensure her win. We notice that the numbers 1, 3, 4, and 6 sum up to 14.\n    # We want to always force the opponent to take a number\n    # that leaves a multiple of 14 (14, 28, 42) on the blackboard, ensuring our win.\n    \n    # Find a pattern (losing positions) by simulating the game\n    # Starting from 1, deciding which positions are losing\n    losing_positions = [False] * 53  # There are 52 numbers and positions are 1-indexed\n    losing_positions[0] = True  # Base position, no numbers to write, already lost\n\n    for i in range(1, 53):\n        # If there's a way to move to a losing position, the current position is winning\n        if i-1 >= 0 and not losing_positions[i-1]:\n            losing_positions[i] = True\n        elif i-3 >= 0 and not losing_positions[i-3]:\n            losing_positions[i] = True\n        elif i-4 >= 0 and not losing_positions[i-4]:\n            losing_positions[i] = True\n        elif i-6 >= 0 and not losing_positions[i-6]:\n            losing_positions[i] = True\n\n    # If position 52 is a winning position, Betty wants to go first\n    if losing_positions[52]:\n        return \"Betty should go second\", \"Force Abby to a multiple of 14\"\n    else:\n        return \"Betty should go first\", \"Ensure Abby is left with a multiple of 14\"\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))\n    sum_to_19 = sum(range(1, 20))\n    \n    ans = sum_to_20 + sum_to_19\n    \n    return ans\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    total_score = 66\n    questions_attempted = total_questions - 1\n\n    for correct_answers in range(questions_attempted + 1):\n        incorrect_answers = questions_attempted - correct_answers\n        score = (correct_answers * points_correct) + (incorrect_answers * points_incorrect)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    a, b, c, total = symbols('a b c total')\n    \n    # Flow rate of B is twice that of A\n    equation1 = Eq(b, 2 * a)\n    \n    # Equation for A and C filling the pool\n    equation2 = Eq(a + c, total - 18)\n    \n    # Equation for B and C filling the pool\n    equation3 = Eq(b + c, total - 27)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c, total))\n    \n    return solutions[total]\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "from math import factorial\n\ndef solution():\n    num_letters = 4\n    num_colors = 5\n    return factorial(num_colors) // factorial(num_colors - num_letters)\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increased_amount = original_amount + (original_amount * increase_fraction)\n    return increased_amount\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100): # Alberta's age is a two-digit number\n        tens, ones = divmod(age, 10)\n        new_age = ones * 10 + tens + 1\n        if new_age == age // 2:\n            return age\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    if fraction_value > decimal_value:\n        return \"4/25 is larger\"\n    else:\n        return \"0.17 is larger\"\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions, remaining_after_day1, remaining_after_day2 = symbols('total_questions remaining_after_day1 remaining_after_day2')\n\n    equation1 = Eq(remaining_after_day1, total_questions / 2 - 7)\n    equation2 = Eq(remaining_after_day2, remaining_after_day1 / 2 + 5)\n    equation3 = Eq(remaining_after_day2 - 23, 0)\n\n    solutions = solve((equation1, equation2, equation3), (total_questions, remaining_after_day1, remaining_after_day2))\n\n    return solutions[total_questions]\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # 1 litre = 1000 ml\n    water_poured = 200 * 3  # 200 ml poured into each of the 3 cups\n\n    remaining_water = total_water - water_poured\n    return remaining_water\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_initial = 20\n    meatballs_left_final = 10\n    extra_student = 1\n\n    # The difference in the number of meatballs left when an extra student takes meatballs\n    meatballs_difference = meatballs_left_initial - meatballs_left_final\n\n    # Since the difference must be equal to the number of meatballs each student gets\n    # And as the situation changes when one student arrives, we find the number of meatballs each student gets\n    # by looking for a factor of the difference that will fail to divide meatballs_left_initial while successfully\n    # dividing meatballs_left_final when adding one more student.\n    num_meatballs_per_student = meatballs_difference\n\n    while True:\n        # Check if the number of meatballs can be distributed to students such that 20 are left,\n        # and then fail to be evenly distributed when one more student comes, leaving 10\n        if (meatballs_left_initial % num_meatballs_per_student != 0 and\n            (meatballs_left_final + num_meatballs_per_student * extra_student) % num_meatballs_per_student == 0):\n            break\n        num_meatballs_per_student += 1\n\n    return num_meatballs_per_student\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # We know that the sum of an arithmetic sequence can be found by the formula: S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms of the sequence, a is the first term, d is the common difference,\n    # and n is the number of terms.\n    # \n    # We have two equations based on the sums provided:\n    # S_8 = 32\n    # S_22 = 44\n    #\n    # We can say:\n    # 32 = 8/2 * (2a + 7d)\n    # 44 = 22/2 * (2a + 21d)\n    #\n    # Simplifying, we get:\n    # 4 * (2a + 7d) = 32\n    # 11 * (2a + 21d) = 44\n    #\n    # From which we get:\n    # 2a + 7d = 8... (1)\n    # 2a + 21d = 4... (2)\n    #\n    # Subtract equation (1) from (2) to find d:\n    # (2a + 21d) - (2a + 7d) = 4 - 8\n    # 14d = -4\n    # d = -4 / 14\n    # d = -2 / 7\n    #\n    # Substituting d back into equation (1):\n    # 2a + 7*(-2 / 7) = 8\n    # 2a - 2 = 8\n    # 2a = 10\n    # a = 5\n    #\n    # Finally, find the sum of the first 15 terms:\n    # S_15 = 15/2 * (2*5 + (15 - 1)*(-2/7))\n    # S_15 = 15/2 * (10 + 14*(-2/7))\n    # S_15 = 15/2 * (10 - 4)\n    # S_15 = 15/2 * 6\n    # S_15 = 15 * 3\n    # S_15 = 45\n    \n    a = 5\n    d = -2 / 7\n    n = 15\n    S_15 = n/2 * (2*a + (n - 1)*d)\n    \n    return S_15\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Given information\n    term_10 = 23\n    term_15 = 38\n\n    # Calculate the common difference\n    common_difference = (term_15 - term_10) / (15 - 10)\n\n    # Calculate the 12th term\n    term_12 = term_10 + common_difference * (12 - 10)\n\n    return int(term_12)\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    correct_problems = 0.20 * 10 + 0.80 * 20 + 0.90 * 30\n    overall_percentage = (correct_problems / total_problems) * 100\n    return overall_percentage\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of roses be r and daisies be d.\n    r, d = symbols('r d')\n\n    # Equation 1: Sum of original roses and daisies is 300.\n    equation1 = Eq(r + d, 300)\n\n    # Equation 2: After planting the same amount, roses become 280 and daisies become 180.\n    equation2 = Eq(r - d, 280 - 180)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (r, d))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # Initialize a counter for the lamps that are still on\n    count = 0\n\n    # Iterate over the numbers from 1 to 250\n    for i in range(1, 251):\n        # Check if the number has an integer square root (perfect square)\n        # Only perfect square numbers have an odd number of factors,\n        # hence they will end up being \"on\" after all people have toggled the switches.\n        if int(i**0.5) == i**0.5:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    water, fruit = symbols('water fruit')\n    \n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n    \n    solutions = solve((equation1, equation2), (water, fruit))\n    \n    return solutions[fruit]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    max_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n\n    return max_number\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Size of each large brick\n    large_brick_side = 6  # in decimeters\n    large_brick_area_dm2 = large_brick_side ** 2  # area in decimeter^2\n    \n    # Total area covered by 80 large bricks in dm^2\n    total_area_dm2 = 80 * large_brick_area_dm2\n    \n    # Convert the total area from dm^2 to cm^2 (1 dm^2 = 100 cm^2)\n    total_area_cm2 = total_area_dm2 * 100\n    \n    # Size of each small brick\n    small_brick_area_cm2 = 64  # in cm^2\n    \n    # Number of small bricks needed\n    number_of_small_bricks = total_area_cm2 / small_brick_area_cm2\n    \n    return int(number_of_small_bricks)\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    # Let the number of boys be x\n    # So the number of girls will be x + 30\n    # According to the problem:\n    # x + (x + 30) = total_pupils\n    # 2x + 30 = total_pupils\n    # 2x = total_pupils - 30\n    # x = (total_pupils - 30) / 2\n    boys = (total_pupils - 30) / 2\n    # Then the number of girls will be boys + 30\n    girls = boys + 30\n    return girls\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    # Let's check if 91 has any divisors other than 1 and itself.\n    for i in range(2, 91):\n        if 91 % i == 0:\n            # If we find a divisor, we can break the loop as we've determined it's not prime.\n            return f'{91} is not a prime number because it is divisible by {i}.'\n    return f'{91} is a prime number.'\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "import math\n\ndef solution():\n    # Calculate the number of digits of A,\n    # A = 4^2018 * 25^2018\n    # Taking the log base 10 to calculate the number of digits\n    digit_count = math.floor(2018 * math.log10(4) + 2018 * math.log10(25)) + 1\n    return digit_count\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_a = 10\n    length_b = 5 * length_a\n    total_length = length_a + length_b\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    ans = comb(total_players, team_size)\n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n\n    # Calculate the cost price using the profit percentage\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    # Calculate the new profit percentage using the new profit value ($5000)\n    new_profit_percent = (5000 / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x1 >= 1 and x2 >= 1 and x3 >= 1 and x1 != x2 and x1 != x3 and x2 != x3:\n                count += 1\n    # Divide by 6 to correct for the overcounting (each distribution is counted 6 times)\n    return count // 6\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Starting variables\n    boys_diff = 31\n    total = 0\n    \n    # Assume n is the size of the square layer\n    # For each additional square layer surrounding the innermost \n    # there are 4n more students; 4 belong to the corners and are not boys or girls\n    # and the rest are equally distributed between boys and girls, so each contributes to\n    # an additional 2 * (n - 1) boys and 2 * (n - 1) girls\n    # Since at the end there are 31 more boys than girls, boys_diff is 31\n    \n    # The square sizes start at 1 and increase by 2 each layer to keep the arrangement a square\n    n = 1\n    while True:\n        layer_students = 4 * n\n        if n > 1:\n            # Subtract 4 since the corners are not considered boys or girls\n            boys = (layer_students - 4) // 2\n            girls = boys\n            # Only the outermost layer contributes to the difference \n            # between boys and girls\n            if n % 2 != 0: \n                boys_diff -= boys\n            else:\n                boys_diff -= girls\n        else:\n            # For the innermost square layer (1x1), it's either 1 boy or 1 girl\n            if boys_diff > 0: # More boys than girls, so the innermost is a boy\n                boys_diff -= 1\n            else: # More girls than boys, so the innermost is a girl\n                boys_diff += 1\n        total += layer_students\n        # When the difference reaches zero, we have accounted for all boys and girls\n        if boys_diff == 0:\n            break\n        # Increase to the next square layer (outer)\n        n += 2\n\n    return total\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # ensure x2>x1\n            for x3 in range(x2 + 1, 14):  # ensure x3>x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # Danny and Emily themselves\n    \n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n    \n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    number_of_pieces = 2\n    length_of_each_piece = length_of_wood / number_of_pieces\n    return length_of_each_piece\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Assume x is the total number of apples Mr. Aziz had initially.\n    # After selling 1/5 of the apples on Monday, he is left with 4/5x apples.\n    # He then sells another 80 apples on Tuesday.\n    # In the end, he is left with 30% of the apples he had at first, which is 0.3x.\n    # Thus, we have the equation:\n    # (4/5)x - 80 = 0.3x\n    # Solve the equation to find the initial number of apples (x).\n    x = symbols('x')\n    equation = Eq((4/5) * x - 80, 0.3 * x)\n    initial_apples = solve(equation, x)[0]\n\n    # Calculate the number of apples left in the end, which is 30% of the initial number of apples.\n    apples_left = 0.3 * initial_apples\n    return apples_left\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometers = 1.5\n    meters_per_kilometer = 1000\n    meters = kilometers * meters_per_kilometer\n    return meters\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum_of_9_numbers = 9 * 140\n    sum_of_8_numbers = total_sum_of_9_numbers - 180\n    average_of_8_numbers = sum_of_8_numbers / 8\n\n    return average_of_8_numbers\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue \n    green = blue + 45\n\n    total_markers = red + blue + green\n\n    return total_markers\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let's denote the first number of the seven consecutive even numbers as 'x'.\n    # Then the other numbers can be represented as x+2, x+4, x+6, x+8, x+10, x+12.\n    # According to the problem, the fourth number (x+6) is larger than one-third \n    # of the sum of the first (x) and seventh (x+12) numbers by 6.\n    # We can set up the equation: x+6 = (1/3)*(x + x+12) + 6\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x+6, (1/3)*(x + x+12) + 6)\n    first_number = solve(equation, x)[0]\n\n    # Calculate the sum of the seven numbers\n    sum_of_numbers = sum([first_number + 2*i for i in range(7)])\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Calculate the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    common_difference = 2\n    nth_term = first_odd_number + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends, we add 1 to the total count per side.\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n    \n    # Trees are planted on two sides of the highway.\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_paid = lily_book_price + amy_book_price\n    return total_paid\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # The driver finished in second place, having overtaken 5 cars.\n    # Thus, the Ferrari driver must have started in 7th place (2nd place + 5 cars overtaken).\n    # Since the driver was originally last, there must have been 7 cars in the race.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    interior_angle = ((sides - 2) * 180) / sides\n    return interior_angle\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_age_now = 8\n    mike_age_now = 48\n\n    age_difference = mike_age_now - eddie_age_now\n    eddie_age_future = 18\n    mike_age_future = eddie_age_future + age_difference\n\n    return mike_age_future\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last_4_digits = 0\n    for i in range(1, 21):\n        sum_last_4_digits += int('5' * i)\n        sum_last_4_digits %= 10000\n    return sum_last_4_digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(y, x):\n    man_days_per_wall = 2 * 3\n    total_man_days = man_days_per_wall * x\n    days_per_y_men = total_man_days / y\n\n    return days_per_y_men\n\n# Example usage:\nans = solution(6, 4)  # Replace with the values for y (number of men) and x (number of walls)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25\n    women_fraction = 1/5\n\n    men_count = (men_percentage / 100) * total_people\n    women_count = women_fraction * total_people\n\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    total_shirts = 72\n    for checked_shirts in range(total_shirts):\n        white_shirts = 7 * checked_shirts\n        if white_shirts + checked_shirts == total_shirts:\n            return white_shirts\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_days = 9\n    total_pages = pages_per_day * total_days\n    return total_pages\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    number, _ = solve_congruence(*congruences)\n    while number > 100:\n        number -= 3 * 4 * 5\n    return number\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    greatest_number = 0\n    for number in range(100, 1000):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                greatest_number = max(greatest_number, number)\n    return greatest_number\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = sum([72, 60, 48, 36, 24, 12])\n    return ans\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 / 6\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # The question seems to be incomplete as the picture or pattern to analyze is not provided.\n    # Since I cannot see the actual pattern, I cannot provide a specific solution.\n    # However, if the pattern refers to a common sequence or geometric pattern,\n    # a generic placeholder code can be written to showcase how one might solve such a problem.\n    \n    # This is a placeholder value since we don't have the actual pattern.\n    # In a real scenario, this would be replaced with the calculation\n    # derived from the given pattern.\n    placeholder_value = 0\n    \n    return placeholder_value\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    white_balls = 8\n    red_balls = 7\n    green_balls = 5\n    \n    # The worst case scenario is if we pick all balls of one color first,\n    # so we have to pick all 5 green balls. Then we pick 1 white ball.\n    # To ensure the next ball is of the same color as one already picked,\n    # we would need to draw just one more. So it's green+1 white+1=5+1+1\n    draws_needed = green_balls + 1 + 1\n    \n    return draws_needed\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    for num in range(1, 60):\n        if num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def S(n):\n    return sum(map(int, str(n)))\n\ndef solution():\n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_children = 390\n\n    # One third of the number of girls equals to one half of the number of boys\n    eq1 = Eq(girls / 3, boys / 2)\n    # Total number of children is the sum of the number of girls and boys\n    eq2 = Eq(girls + boys, total_children)\n\n    # Solve the system of equation\n    solutions = solve((eq1, eq2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return int(number)\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    kg_per_day = 24 / 5\n    total_kg = kg_per_day * 8.5\n    return total_kg\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    total_months = 12\n    \n    average_per_month = total_spent / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    temperature_drop = temperature_bottom - temperature_top\n    return temperature_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_ratio = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_ratio\n    women_count = total_passengers * women_percentage\n    children_count = total_passengers - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('0735', '%H%M')\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    return arrival_time.strftime('%H%M')\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(200):\n        if sum(int(digit) for digit in str(base_4 := format(N, '4'))) == 5:\n            if sum(int(digit) for digit in str(base_6 := format(N, '6'))) == 8:\n                if sum(int(digit) for digit in str(base_8 := format(N, '8'))) == 9:\n                    possible_values.append(N)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 choices for the first digit (it cannot be 0),\n    # 3 choices for the second digit and 3 choices for the third digit.\n    count = 2 * 3 * 3\n    return count\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for variables\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Set up the equations based on the information given\n    equation1 = Eq(jordan, 3 * emily)  # Jordan got 3 times as many votes as Emily\n    equation2 = Eq(evie, jordan - 20)  # Evie got 20 fewer votes than Jordan\n    equation3 = Eq(jordan + evie + emily, 400)  # Total votes are 400\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    # Return the number of votes Evie got\n    return solutions[evie]\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_hotdog = 1.10 / 6\n    cost_for_12_hotdogs = cost_per_hotdog * 12\n    return cost_for_12_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # pence\n    total_money = 200   # Â£2 is 200p\n\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"63{digit}25\")\n        if num % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0 and (num ** 0.5).is_integer():\n            return num\n            \nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    # Let the number of acorns Chip had originally be x\n    # Then Dale had 124 - x acorns initially\n    # After giving 14 acorns, Chip has x - 14 and Dale has (124 - x) + 14 acorns\n    # They have same number of acorns after the exchange\n    # Therefore, x - 14 = (124 - x) + 14 which simplifies to 2 * x = 124 + 14 + 14\n    # Solving the equation for x\n    \n    x = (124 + 28) // 2\n\n    return x\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    # Number of fiction books and comic books\n    fiction_books = 6\n    comic_books = 2\n\n    # Total number of books\n    total_books = fiction_books + comic_books\n\n    # Number of ways to arrange the books\n    # We use the formula for permutations of identical items: n! / (n1! * n2! * ... * nk!)\n    # In this case, it simplifies to (fiction_books + comic_books)! / (fiction_books! * comic_books!)\n    ways_to_arrange = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return ways_to_arrange\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Primes less than 51\n    prime_sum = 51\n    \n    # Since we want the minimum number of prime numbers that sum up to 51,\n    # we should start with the largest prime and work our way down.\n    primes.sort(reverse=True)\n    \n    count = 0\n    for prime in primes:\n        while prime_sum >= prime:\n            prime_sum -= prime\n            count += 1\n        if prime_sum == 0:\n            break\n        \n        # Since 2 is the smallest prime, if the remaining sum is odd and less than the first prime,\n        # it means we cannot subtract any more primes, thus we need to consider one extra 2\n        if prime_sum < primes[0] and prime_sum % 2 == 1:\n            count += 1\n            break\n            \n    return count\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    # There are 24 hours in a day and 60 minutes in an hour\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    trays = 4\n\n    total_eggs = eggs_per_tray * trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    novels, science_books = symbols('novels science_books')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i%2) * (40 - i) for i in range(40))\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    interest = initial_amount * interest_rate\n    return interest\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 24 == 0 and num // 24 == 36:\n            return num\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Amy is counted twice in both statements\n    return total_people\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_weight = 2.5  # weight in kg\n    pie_weight = 750 / 1000  # convert g to kg\n    juice_weight = 1025 / 1000  # convert g to kg\n\n    remaining_weight = initial_weight - (pie_weight + juice_weight)\n\n    return remaining_weight\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n    growth_per_week = (final_height - initial_height) / weeks\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Worst case for 2 different colored balls: picking all 5 balls of one color + 1 ball of another color\n    # To ensure 3 different colored balls, pick one more ball\n    balls_drawn = 5 + 1 + 1\n    \n    return balls_drawn\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2) * (1/2) * (1/2)\n    return new_volume\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two lengths of ribbon\n    x, y = symbols('x y')\n    \n    # Equation representing the total length of the ribbon\n    equation1 = Eq(x + y, 12.75)\n    \n    # Equation representing the relationship between the lengths of the two pieces\n    equation2 = Eq(y, 2 * x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Get the length of the longer piece\n    longer_piece = solutions[y]\n    \n    return longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # Since there are 6 books on the right,\n    # the favorite book is in the position 14 from the left.\n    # So there are 13 books on its left.\n    left_books = 13\n    right_books = 6\n    \n    # Total number of books is the sum of books on the left, 1 for the favorite book,\n    # and books on the right.\n    total_books = left_books + 1 + right_books\n    return total_books\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    for age in range(15, 100):\n        father_age = 41 + (age - 14)\n        if str(age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return age\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(1, 21))\n    total_cards = 20\n    prime_cards_count = len(prime_numbers)\n    non_prime_cards_count = total_cards - prime_cards_count\n    return non_prime_cards_count\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi_before, lily_before = 120, 24\n    coins_received = symbols('coins_received')\n\n    # Let the coins_received be x for both Gigi and Lily\n    # Gigi's final amount is 120 + x\n    # Lily's final amount is 24 + x\n    # Gigi's final amount is 3 times Lily's final amount\n    equation = Eq(gigi_before + coins_received, 3 * (lily_before + coins_received))\n\n    # Solve the equation\n    solution = solve(equation, coins_received)\n\n    return solution[coins_received]\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for n in range(100, 1000):\n        if n % 2 != 0 and sum(map(int, str(n))) == 11:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    time_to_boil_one = 5\n    num_eggs = 3\n    # Assuming we can boil all the eggs at the same time\n    return time_to_boil_one\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    return cabins_needed\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    today_calories = symbols('today_calories')\n\n    inequality = today_calories < 1000\n\n    return inequality\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_g = 11160  # Converted kg to g\n    cookie_dough_g = 45  # g per cookie\n    brownie_dough_g = 150  # g per brownie\n    num_cookies = 240\n    num_brownies = 2\n\n    dough_used_for_cookies = cookie_dough_g * num_cookies\n    dough_used_for_brownies = brownie_dough_g * num_brownies\n\n    total_dough_used = dough_used_for_cookies + dough_used_for_brownies\n    dough_left_g = total_dough_g - total_dough_used\n\n    dough_left_kg = dough_left_g / 1000  # Convert back to kg\n\n    return dough_left_kg\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    days = 15\n    total_money = 100\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Odd days, he deposits Â£5\n            total_money += 5\n        else:  # Even days, he spends Â£8\n            total_money -= 8\n    return total_money\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Work backwards: add 2 to the remaining since 2 less were eaten\n    remaining_biscuits += 2\n    # Since these are half of the remaining biscuits, multiply by 2 to find the amount before eating on the second day\n    remaining_biscuits *= 2\n    # Now add 4 since these were eaten the day before\n    remaining_biscuits += 4\n    # Finally, this is half of the original biscuits so multiply by 2 to find the original number\n    original_biscuits = remaining_biscuits * 2\n    return original_biscuits\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a, and common difference be d\n    a, d, n = symbols('a d n')\n\n    # Sum of first 4 terms is 4/2 * (2a + 3d) = 124\n    equation1 = Eq(2*a + 3*d, 124*2/4)\n\n    # Sum of last 4 terms is 4/2 * (2a + (2n-3)d) = 156\n    equation2 = Eq(2*a + (2*n-3)*d, 156*2/4)\n\n    # Sum of all terms is n/2 * (2a + (n-1)d) = 210\n    equation3 = Eq(n*(2*a + (n-1)*d)/2, 210)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, d, n))\n\n    # We want the positive integer solution for n\n    num = [s[n] for s in solutions if s[n] > 0]\n\n    return int(num[0])\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    return pattern[(1004 - 1) % len(pattern)]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums / children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    common_difference = 3\n    n = (298 - 10) // 3 + 1  # Calculate the number of terms\n    last_term = 10 + (n - 1) * 3\n    sum_of_sequence = n * (first_term + last_term) // 2  # Sum formula for arithmetic sequence\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    # provided list of numbers to add: 88, 867, 10, 3476, 5, -6790, 4526, 94, -2076, 918\n    # adding the numbers directly using the sum function\n    numbers = [88, 867, 10, 3476, 5, -6790, 4526, 94, -2076, 918]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolates, friends = symbols('chocolates friends')\n    \n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n    \n    solutions = solve((equation1, equation2), (chocolates, friends))\n    \n    total_chocolates = solutions[chocolates]\n    excess = total_chocolates - 20 * solutions[friends]\n    \n    return excess\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    return 84.8 / 400\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7, 5992 % 7\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    book_percentage = 0.15\n    dvd_percentage = 0.30\n\n    spent_on_book = initial_amount * book_percentage\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * dvd_percentage\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "from itertools import combinations\n\ndef solution():\n    all_numbers = range(100, 1000)\n    possible_numbers = []\n\n    for number in all_numbers:\n        sum_of_digits = sum(int(digit) for digit in str(number))\n\n        conditions = [\n            number % 27 == 0,\n            number % 7 == 0,\n            sum_of_digits == 17,\n            int(number ** 0.5) ** 2 == number,\n            89100 % number == 0,\n        ]\n\n        # Only three conditions must be true\n        if conditions.count(True) == 3:\n            possible_numbers.append(number)\n\n    # Find the unique number that satisfies exactly three of the conditions\n    for combination in combinations(range(5), 3):\n        current_numbers_set = set()\n        for number in possible_numbers:\n            if all(conditions[i] for i in combination):\n                current_numbers_set.add(number)\n        # Check if we have one unique number for the current combination of conditions\n        if len(current_numbers_set) == 1:\n            return next(iter(current_numbers_set))\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_still_needed\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # The variable representing the number of push-ups Mulan can do\n    mulan_pushups = symbols('mulan_pushups')\n\n    # The best boy soldier can do 50 push-ups\n    best_boy_pushups = 50\n\n    # Inequality representing that Mulan can do more push-ups than the best boy soldier\n    inequality = mulan_pushups > best_boy_pushups\n\n    return inequality\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    total_games = teams - 1  # In a knockout tournament, total games is one less than number of teams\n    \n    games_played = 27\n    games_remaining = total_games - games_played\n    \n    return games_remaining\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # start with the least number for each child\n    remaining_candies = 88 - sum(range(1, 8))\n    # since no two children get the same number of pieces and\n    # we need to find the least possible number for the child who gets the most\n    # we can simply fill the remaining candies to the child who gets the most\n    most_pieces = remaining_candies + 7\n\n    return most_pieces\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    water_per_pail = 4\n    num_pails = 4\n    water_left = 7\n\n    original_volume = (water_per_pail * num_pails) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B, leaving the stacks as follows:\n    # Stack A: 20 stones, Stack B: 16 stones\n\n    # Jerry must force the game into a state where both stacks have the same amount of stones,\n    # because from that point onwards, whatever move Tom makes, Jerry can copy on the other stack and\n    # ensure that he picks the last stone.\n\n    # To make both stacks even, Jerry should take stones from Stack A.\n\n    # The required number of stones that Jerry must take from Stack A is:\n    stones_to_take = 20 - 16\n\n    # Stack from which Jerry must take stones:\n    stack_name = \"A\"\n\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack_name}.\"\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # ratio_girls_to_boys = 7:9\n    ratio_girls = 7\n    ratio_boys = 9\n    difference_in_numbers = 16  # boys - girls\n\n    # Let's assume the number of girls in the class is 7x and boys is 9x\n    # The difference between boys and girls is given as 16\n    # Therefore: 9x - 7x = 16\n    # Simplify: 2x = 16\n    x = difference_in_numbers / 2\n\n    # Total pupils = girls + boys\n    # girls = 7x and boys = 9x\n    total_pupils = (ratio_girls * x) + (ratio_boys * x)\n\n    return total_pupils\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    cakes_made = 25 / milk_per_cake\n    return cakes_made\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters in cm\n    piece_length_cm = 6\n\n    num_pieces = stick_length_cm // piece_length_cm\n\n    return num_pieces\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(10):\n            M = 100 * i + j  # Constructing a three-digit number with 0 in the tens place.\n            S = i + j        # Sum of the digits since the tens place is 0.\n            if M == 67 * S:\n                reversed_M = 10 * i + j * 100  # Reversing the digits.\n                return reversed_M // S          # Dividing reversed number by sum of digits.\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    total_sum = 160\n    n = 5\n    # Since the balls are divided into consecutive natural numbers\n    # Let the middle number be m, then the numbers are (m-2), (m-1), m, (m+1), (m+2)\n    # The sum of these 5 numbers is 5m, which should be equal to the total sum\n    middle_number = total_sum // n\n    \n    # Student with the most balls has (middle_number + 2) balls\n    most_balls = middle_number + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n\n    ans = comb(total_balls, balls_to_select)\n    return ans\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Calculate sum of arithmetic sequence without mistake\n    first_term = 1    # First term of the sequence\n    common_diff = 3   # Common difference between terms\n    num_terms = 37    # Number of terms\n    \n    correct_sum = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_diff)\n    \n    # Find the difference caused by the mistake\n    mistake_diff = correct_sum - 2011\n    \n    # Calculate who made the mistake based on the difference\n    # Every time a person makes a mistake, the difference is 2 * 3 (because instead of adding 3, 3 is subtracted)\n    mistake_person = mistake_diff // 6 + 1\n    return int(mistake_person)\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days = total_pages / pages_per_day\n    return days\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    cycle = [base ** i % 10 for i in range(1, 5)]\n    \n    # The pattern is periodic with a period of 4 because 8^1, 8^2, 8^3 and 8^4 have distinct last digits, \n    # but 8^5 has the same last digit as 8^1 and the cycle repeats\n    period = len(cycle)\n    \n    ones_digit = cycle[(exponent % period) - 1]\n    return ones_digit\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while True:\n        peaches_sum = days * (days + 1) // 2\n        if peaches_sum > 100:\n            break\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -3\n    total_points = 52\n\n    # Let x be the number of correct answers\n    # Then, (total_questions - x) is the number of wrong answers\n    # We have the equation:\n    # correct_points * x + wrong_points * (total_questions - x) = total_points\n    # 5x - 3(20 - x) = 52\n    # 5x - 60 + 3x = 52\n    # 8x = 112\n    # x = 14\n    \n    x = (total_points + wrong_points * total_questions) / (correct_points - wrong_points)\n\n    return int(x)\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    lhs = 0.3 * 100\n    rhs = 150\n\n    ans = rhs / lhs\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # We want to solve the following equation for a, b, c:\n    # 13/10 = 1 + 1/(a + 1/(b + 1/c))\n    # Let's start from the innermost fraction and work our way outwards\n\n    # Rearrange the equation 13/10 - 1 = 1/(a + 1/(b + 1/c))\n    # This becomes 3/10 = 1/(a + 1/(b + 1/c))\n    # Inverting both sides gives a + 1/(b + 1/c) = 10/3\n\n    # Subtract \"a\" from both sides to find the inner fraction\n    # 1/(b + 1/c) = 10/3 - a = (10 - 3a)/3\n\n    # This means that (b + 1/c) must also be a fraction of the form \"m/n\"\n    # where m and n are integers, and m/n = 3/(10 - 3a)\n\n    # Find all possible integer values for a, b, and c by iterating\n    for a in range(1, 11):  # a has to be less than 10 because 10/3 - a has to be positive\n        # Calculate m/n for the current value of a\n        m, n = 3, 10 - 3 * a\n        \n        # Check if m/n is an integer (since \"b\" must be an integer)\n        if m % n == 0:\n            b = int(m / n)\n            c = 1  # \"c\" can be any integer, but since it appears only once, 1 is sufficient\n            return a + 2 * b + 3 * c\n\n    # If the loop completes without returning, then there's no solution\n    # which should not be the case as per problem statement\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(girls + boys, 100)\n    equation2 = Eq(girls, boys + 12)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    start = 1\n    end = 20\n    remainder = 1\n    divisor = 6\n    \n    total_sum = sum(n for n in range(start, end + 1) if n % divisor == remainder)\n    \n    return total_sum\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    middle_age = 42 // 3\n    oldest_three_sum = (middle_age + 1) + (middle_age + 2) + (middle_age + 3)\n    return oldest_three_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # Total weight of the solution in grams\n    sugar_concentration = 0.48  # Sugar concentration in the solution\n\n    # Calculate the weight of the sugar in the solution\n    sugar_weight = total_weight * sugar_concentration\n\n    # The weight of the water is the total weight minus the weight of the sugar\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    ans = 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\n    return ans\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n    ans = total_pence * fraction\n    return ans\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 as it is the first digit of a 4-digit number\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    abcd = 1000 * a + 100 * b + 10 * c + d\n                    abc = 100 * a + 10 * b + c\n                    ab = 10 * a + b\n                    if abcd + abc + ab + a == 1370:\n                        return abcd\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Since the fractional part of each number is 4/5, when we add them together,\n    # the fractional part will be 4/5 * 5 = 4, which is a whole number we can directly add to the sum.\n    # Therefore, we only need to calculate the sum of the whole number parts and then add 4.\n    \n    whole_number_sum = 19 + 199 + 1999 + 19999 + 199999\n    fraction_sum = 4  # Since 4/5 * 5 = 4\n    \n    ans = whole_number_sum + fraction_sum\n    return ans\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    years = symbols('years')\n    \n    equation = Eq(janice_age + sister_age + 2 * years, 35)\n    ans = solve(equation, years)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum([i/j for j in range(1, 9) for i in range(1, j+1)]) + \\\n          sum([i/j for j in range(1, 9) for i in range(j, 0, -1)])\n    return ans\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_3_tests = 75 * 3\n    total_marks_2_tests = 172\n    marks_remaining_test = total_marks_3_tests - total_marks_2_tests\n    \n    return marks_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    # Equation representing the relationship six years ago\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    \n    # Equation representing the sum of their ages this year\n    equation2 = Eq(dad_current + son_current, 78)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n    \n    solutions = solve((equation1, equation2), (terry, gerald))\n    \n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n\n    # Equation 1: Milk chocolates are 3/4 of the total sweets\n    equation1 = Eq(milk_chocolates, total_sweets * (3/4))\n\n    # Equation 2: 6 fruit drops are 2/7 of the milk chocolates\n    equation2 = Eq(6, milk_chocolates * (2/7))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_sweets, milk_chocolates))\n\n    # Get the total number of sweets\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    football, volleyball = symbols('football volleyball')\n\n    # Define the equations based on the given problem\n    equation1 = Eq(football + 2 * volleyball, 60)  # 1 football and 2 volleyballs cost $60\n    equation2 = Eq(2 * football, 60 + 16)  # 2 footballs cost $60 - $16 returned\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # Define constraints based on the problem statement\n    mode_age = 7\n    mean_age = 9\n    median_age = 8\n    age_range = 6\n\n    # Loop through possible ages of the team members\n    # Start range from mode_age to avoid lower ages that would not allow a range of 6\n    # End range at mean_age * 5 (team size) to keep total within possible total age\n    for a1 in range(mode_age, mean_age * 5 - (5 - 1) * mode_age):  # Oldest age\n        for a2 in range(mode_age, a1):  # Second oldest age\n            for a3 in range(mode_age, a2):  # Middle age\n                for a4 in range(mode_age, a3):  # Second youngest age\n                    for a5 in range(mode_age, a4):  # Youngest age\n                        ages = [a1, a2, a3, a4, a5]\n                        if (mean(ages) == mean_age and median(ages) == median_age and\n                            mode(ages) == mode_age and max(ages) - min(ages) == age_range):\n                            return ages[-2]  # Second oldest member's age\n\n    return None\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "from itertools import permutations\n\ndef solution():\n    # All permutations of the digits (1, 3, 4, 5) since all digits are correct in 3541 but in wrong positions\n    all_permutations = permutations('1345')\n    \n    for perm in all_permutations:\n        perm_str = ''.join(perm)\n        \n        # First Check for 1703: Two digits, correct position\n        correct_1703 = (perm_str[0] == '1') + (perm_str[1] == '7') + (perm_str[2] == '0') + (perm_str[3] == '3')\n        if correct_1703 != 2:\n            continue\n            \n        # Second Check for 2745: Two digits, wrong position\n        correct_2745 = (perm_str[0] in '2745') + (perm_str[1] in '2745') + (perm_str[2] in '2745') + (perm_str[3] in '2745')\n        wrong_position_2745 = (perm_str[0] != '2') + (perm_str[1] != '7') + (perm_str[2] != '4') + (perm_str[3] != '5')\n        if correct_2745 != 2 or wrong_position_2745 != 4:\n            continue\n            \n        # Third Check for 3541: Four digits, wrong position\n        wrong_position_3541 = (perm_str[0] != '3') + (perm_str[1] != '5') + (perm_str[2] != '4') + (perm_str[3] != '1')\n        if wrong_position_3541 != 4:\n            continue\n            \n        # If all checks are passed, we've found the correct number\n        return int(perm_str)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    num_books = 3  # She has three different subjects\n\n    # The number of arrangements of n distinct objects is n!\n    num_arrangements = factorial(num_books)\n\n    return num_arrangements\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_players = 16\n    num_rounds = math.ceil(math.log(num_players, 2))\n    return num_rounds\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # If A cannot stand at the first or the last, A can take any of the 3 middle positions.\n    # For each position that A takes, the remaining 4 people can be permuted in 4! ways.\n    positions_for_A = 3\n    permutations_for_rest = math.factorial(4)\n\n    # The total number of ways to line up is then 3 * 4!.\n    total_ways = positions_for_A * permutations_for_rest\n\n    return total_ways\n\nimport math\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let the number of yellow flowers be y\n    # The number of red flowers is 3 times the number of yellow flowers, so 3y\n    # The number of pink flowers is y - 7\n    # According to the question, the number of pink flowers is 3, so y - 7 = 3\n    # Solve for y (number of yellow flowers):\n    y = 3 + 7\n\n    # The number of red flowers is 3 times y:\n    red_flowers = 3 * y\n\n    # The total number of red and yellow flowers:\n    total_red_and_yellow = red_flowers + y\n\n    return total_red_and_yellow\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    before_afternoon = Eq(boys, girls + 0.5 * girls)\n    afternoon_boys_girls = Eq((boys + 12) / (girls + 12), 19 / 14)\n\n    solutions = solve((before_afternoon, afternoon_boys_girls), (boys, girls))\n\n    total_children_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n    \n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for units in range(0, 10):\n                if hundreds > tens < units and hundreds != units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    \n    return ans\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    last_term = 56\n    ratio = 2\n\n    next_term = last_term * ratio\n\n    return next_term\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_spend = 48\n    total_classmates = 10\n    notebook_cost = 3\n    colour_pencils_cost = 9\n    \n    max_notebooks = total_spend // notebook_cost\n    for notebooks in range(max_notebooks + 1):\n        remaining_money = total_spend - notebooks * notebook_cost\n        if remaining_money % colour_pencils_cost == 0:\n            colour_pencils = remaining_money // colour_pencils_cost\n            if notebooks + colour_pencils == total_classmates:\n                return colour_pencils\n    return 0\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):  # Start from 3 to 47\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smallest even number\n    x = symbols('x')\n    # Consecutive even numbers can be represented as x, x+2, ..., x+10, for a total of six numbers\n    sum_eq = Eq(x + (x + 2) + (x + 4) + (x + 6) + (x + 8) + (x + 10), 510)\n    # Solve for x\n    solutions = solve(sum_eq, x)\n    first_even = solutions[0]\n\n    # Calculate the mean and median of the consecutive even numbers\n    even_numbers = [first_even + 2*i for i in range(6)]\n    mean = sum(even_numbers) / 6\n    median = (even_numbers[2] + even_numbers[3]) / 2\n\n    # Find the difference between mean and median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_2 = 0\n    count_5 = 0\n\n    for i in range(1, n+1):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n\n    return min(count_2, count_5)\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let x be the number of rounds played\n    # In each round, the winner gets 1 card from the loser\n    # If Helen is the winner, she will have 18 + x cards and Oliver will have 22 - x cards\n    # Helen has 10 more cards than Oliver, so:\n    # 18 + x = (22 - x) + 10\n    \n    # Let's solve for x\n    x = symbols('x')\n    equation = Eq(18 + x, (22 - x) + 10)\n    rounds = solve(equation, x)\n    \n    # Calculate the number of cards Helen has now\n    helen_cards = 18 + rounds[0]\n    return int(helen_cards)\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up = 23\n    climb_down = 31\n    final_climb_up = 17\n\n    final_height = initial_height + climb_up - climb_down + final_climb_up\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    base = 5\n    exponent = 100\n    N = base ** exponent\n    num_digits = len(str(N))\n    return num_digits\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    for i in range(1, 40):\n        if i + (i+1) + (i+2) + (i+3) + (i+4) == 40:\n            return i\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the unknown number\n    x = symbols('x')\n    \n    # Set up the equation: 3 * x - 8 = 4\n    equation = Eq(3 * x - 8, 4)\n\n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Extract the solution (since solve returns a list)\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtract 1 for the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the initial mass of strawberries\n    x = Symbol('x')\n\n    # Use the given conditions to set up the equation\n    # Initial mass of mangoes was x + 448\n    # After giving away 900g, mangoes' mass is x + 448 - 900\n    # It was mentioned that strawberries' mass is twice as much as mangoes' mass\n    # So we get the following equation: x = 2 * (x + 448 - 900)\n    equation = x - 2 * (x + 448 - 900)\n\n    # Solve the equation for x (mass of strawberries)\n    mass_of_strawberries = solve(equation, x)[0]\n\n    return mass_of_strawberries\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2000):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    sweets_start = 33\n    sweets_given_away = 8\n    sweets_left = sweets_start - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    largest_num = int(''.join(sorted(digits, reverse=True)))\n    return largest_num\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Digits used for creating the numbers\n    digits = [0, 1, 3, 4, 6, 8, 9]\n\n    # Generate all possible 5-digit numbers with the given digits\n    all_numbers = [''.join(p) for p in permutations('0134689', 5) if p[0] != '0']\n\n    # Filter numbers that are multiples of 9\n    multiples_of_9 = [int(number) for number in all_numbers if int(number) % 9 == 0]\n\n    # Find the maximum and minimum of these numbers\n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n\n    # Return the largest possible value of (M-N)/9\n    return (M - N) // 9\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = 4000000 + 400000 + 4\n    return number\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    correct_sum = incorrect_sum - (incorrect_addend - correct_addend)\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for num in range(1, 381):  # The integer can't be larger than 380\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Given the 4th term a_4 is 39 and the 12th term a_12 is 57 in an arithmetic sequence.\n    # We know that the n-th term of an arithmetic sequence is given by:\n    # a_n = a_1 + (n - 1)d, where a_1 is the first term and d is the common difference.\n    \n    # Let's call a_1 the first term and d the common difference.\n    # Then a_4 = a_1 + 3d = 39 (fourth term)\n    # And a_12 = a_1 + 11d = 57 (twelfth term)\n    \n    # Now, from these two equations we can derive the value of d:\n    # Subtracting the equation for a_4 from the equation for a_12 gives:\n    # a_12 - a_4 = (a_1 + 11d) - (a_1 + 3d)\n    # 57 - 39 = 8d\n    # 18 = 8d\n    # d = 18 / 8\n    # d = 9/4 or 2.25\n    d = (57 - 39) / (12 - 4)\n\n    # Now let's find the first term a_1:\n    # a_4 = a_1 + 3d => a_1 = a_4 - 3d = 39 - 3*(9/4)\n    a_1 = 39 - 3 * d\n\n    return a_1\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_30 = 30 * 0.30\n    salt_20 = 20 * 0.20\n    total_salt = salt_30 + salt_20\n    target_concentration = 0.10\n\n    # Let x be the amount of water added.\n    # total_mass = 30 + 20 + x\n    # total_salt / total_mass = target_concentration\n    # total_salt = target_concentration * total_mass\n    # Solve for x.\n    x = total_salt / target_concentration - (30 + 20)\n\n    return x\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Maximum cards you can draw without having 3 of the same number is by having 2 of each number.\n    # There are 13 different numbers.\n    max_draws_without_3_same_number = 2 * 13\n\n    # So to guarantee 3 cards of the same number, you need to draw one more.\n    cards_to_draw = max_draws_without_3_same_number + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))  # Generate all prime numbers from 1 to 20\n    num_prime_cards = len(primes)     # Count the prime number cards\n    total_cards = 20                  # Total number of cards\n\n    proportion = num_prime_cards / total_cards  # Calculate the proportion\n    return round(proportion, 2)                 # Round the answer to 2 decimal places\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    # Speed of Johnson and Vicky\n    speed_johnson = 600\n    speed_vicky = 250\n    \n    # Total distance\n    distance = 3000\n    \n    # Time taken by Johnson and Vicky to finish the race\n    time_johnson = distance / speed_johnson\n    time_vicky = distance / speed_vicky\n    \n    # Difference in time\n    time_difference = time_vicky - time_johnson\n    \n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # For ensuring 29 balls of one color, we pick the worst-case scenario where we get 28 balls of each,\n    # so we need to add another to make sure we get 29 of at least one color.\n    balls_needed_for_29_of_one = (28 * 3) + 1\n\n    # Similarly, for ensuring 28 balls of another color, we must assume we have 29 of one and 27 of another,\n    # so we need to add another to make sure we get 28 of the second color.\n    balls_needed_for_28_of_another = balls_needed_for_29_of_one + (27 * 2) + 1\n\n    # Lastly, for ensuring 10 balls of the last color, the other two colors could have 29 and 28 balls each.\n    # We must get the remaining balls, assuming we got 9 of the last color after the above picks.\n    balls_needed_for_10_of_last = balls_needed_for_28_of_another + (10 - 1) + 1\n\n    # Returning the total number of balls needed.\n    return balls_needed_for_10_of_last\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    return 1275 - 1 + 51\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean = 8\n    total_numbers = 8\n\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n\n    prices_combinations = {(notebook + calendar) for notebook in notebook_prices for calendar in calendar_prices}\n    \n    return len(prices_combinations)\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFGH'):\n        if perm.index('C') > perm.index('A') and perm.index('C') < perm.index('B') or \\\n           perm.index('C') < perm.index('A') and perm.index('C') > perm.index('B'):\n            if abs(perm.index('D') - perm.index('E')) == 1 and \\\n               abs(perm.index('F') - perm.index('G')) == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of solution transferred\n    x = symbols('x') \n    \n    # Amount of lime initially in each bottle\n    lime_A_initial = 5 * 0.10\n    lime_B_initial = 3 * 0.20\n\n    # Volume of solution after transfer in each bottle\n    vol_A = 5 - x\n    vol_B = 3 - x\n    \n    # Amount of lime after transfer in each bottle\n    lime_A_after = lime_A_initial - 0.10 * x + 0.20 * x\n    lime_B_after = lime_B_initial + 0.10 * x - 0.20 * x\n    \n    # Concentration of lime after transfer\n    conc_A = lime_A_after / vol_A\n    conc_B = lime_B_after / vol_B\n    \n    # Set up the equation where concentrations are equal\n    equation = Eq(conc_A, conc_B)\n    \n    # Solve for x, the amount transferred\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = -(-students // tables_per_row)  # Ceiling division to get the least number of full rows needed\n\n    return rows_needed\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    length_painting = 90\n    length_lego = length_painting - 70.5\n    ratio_length_breadth = 5 / 2\n\n    breadth_lego = length_lego / ratio_length_breadth\n    return int(breadth_lego)\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # Initial number to be repeated.\n    number = 123\n    \n    # Initialize sum and string representation of the incremental addition.\n    total_sum = 0\n    number_str = \"\"\n    \n    # Repeatedly add the number with increasing repetitions\n    for i in range(1, 124):  # There will be 123 repetitions\n        number_str += str(number)\n        total_sum += int(number_str)\n    \n    # Convert the total sum to string to find the hundreds digit.\n    total_sum_str = str(total_sum)\n    \n    # Hundreds digit is the third digit from the end.\n    hundreds_digit = total_sum_str[-3]\n    \n    return int(hundreds_digit)\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    brother_amount = total // 3  # Since she had twice after losing one coin, brother has 1/3 of the total\n\n    # Check every coin to see which one when removed makes Zoey's remaining coins twice her brother's amount\n    for coin in [50, 20, 10, 5]:\n        if total - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    # Convert voucher from pence to pounds\n    voucher = 110 / 100\n\n    # Calculate total cost without voucher\n    total_cost = 5.50 + 3.75\n\n    # Calculate actual amount to pay after applying voucher\n    actual_pay = total_cost - voucher\n\n    return round(actual_pay, 2)\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan reached the finish line, 200m\n    kane_distance = jaan_distance - 12.5  # Kane was 12.5m behind\n    jaan_speed = 8  # Jaan's speed is 8m/s\n\n    # Since Jaan reached the finish line, we can calculate the time it took Jaan\n    jaan_time = jaan_distance / jaan_speed  # Time = Distance / Speed\n\n    # Kane covered 187.5 meters (200 - 12.5) in the same amount of time\n    # Kane's speed = Kane's distance / Jaan's time\n    kane_speed = kane_distance / jaan_time\n\n    return kane_speed\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_rate = normal_rate * 1.25\n    total_hours = 10\n    regular_hours = 8\n    overtime_hours = total_hours - regular_hours\n    \n    total_pay = (regular_hours * normal_rate) + (overtime_hours * overtime_rate)\n    \n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35\n    total = 60\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 3 and i % 7 == 3:\n            return i\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rates of John, Raj, and Pete as j, r, and p jobs per hour respectively\n    j, r, p = symbols('j r p')\n\n    # Equation 1: Together they finish the job in an hour, so their combined rate is 1 job/hour\n    equation1 = Eq(j + r + p, 1)\n\n    # Equation 2: John and Raj finish the job in 1 hr 12 min, which is 1.2 hours, so 1/1.2 = 5/6 job/hour\n    equation2 = Eq(j + r, 5/6)\n\n    # Equation 3: Raj and Pete finish the job in 1 hr 30 min, which is 1.5 hours, so 1/1.5 = 2/3 job/hour\n    equation3 = Eq(r + p, 2/3)\n\n    # Solve the system of equations to find the rates of John, Raj, and Pete\n    solutions = solve((equation1, equation2, equation3), (j, r, p))\n    \n    # r is the rate at which Raj works by himself, and since we need the time in minutes we will calculate the reciprocal of r and multiply by 60\n    raj_time = 60 / solutions[r]\n\n    return raj_time\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    num_repeats = 99 // 9\n    remainder = (3 * 928 * num_repeats) % 9\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the variable\n    x = symbols('x')\n\n    # define the complex fraction equation\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n\n    # solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure at least 3 balls of the same color, we pick in the worst case scenario:\n    # 2 white, 2 blue, 2 green, and then we would need one more of any color \n    # to guarantee 3 of the same color.\n\n    # Maximum number of balls we can pick without having 3 of the same color is\n    # 2 white + 2 blue + 2 green + 2 orange = 8\n    # So the next ball we pick, the 9th one, ensures we have 3 of at least one color.\n\n    ans = 2 + 2 + 2 + 2 + 1  # Picking max 2 of each, and 1 more to ensure 3 of a kind\n    return ans\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # According to the Chinese Remainder Theorem,\n    # we need to find an integer x such that\n    # x â¡ 1 (mod 5), x â¡ 1 (mod 6), and x â¡ 1 (mod 7)\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of the elder brother and y be the age of the younger brother\n    x, y = symbols('x y')\n    # The sum of their current ages is 42\n    equation1 = Eq(x + y, 42)\n    # The younger brother was half the elder brother's current age (x/2)\n    # when the elder brother was at the current age of the younger brother (y)\n    # Let's call the difference in years between now and 'a few years ago' as diff\n    # Then, a few years ago: elder brother's age was x - diff = y\n    # and younger brother's age was y - diff = x/2\n    # Simplifies to: x - y = y - x/2 -> 2x - 2y = y - x -> 3x = 3y -> x = y\n    equation2 = Eq(x - y, y - (x/2))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning the age of the elder brother\n    return solutions[x]\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return round(total_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later that their sum of ages will be 40.\n    # The sum of their ages is currently 34.\n    # Each year, the sum of their ages increases by 2 (since both get 1 year older).\n    # Therefore, we need to solve the equation 34 + 2x = 40.\n\n    # Equation: 34 + 2*x = 40\n    # Solution: x = (40 - 34) / 2\n\n    x = (40 - 34) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Using Pigeonhole Principle where pigeons are participants, pigeonholes are countries\n    countries = 11\n    min_people_per_country_to_exceed = 4  # if we have 4 per country, we cannot ensure 5 per country\n    participants_to_ensure_5_per_country = (countries * min_people_per_country_to_exceed) + 1\n\n    return participants_to_ensure_5_per_country\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    sum_xyz = solutions[x] + solutions[y] + solutions[z]\n\n    return sum_xyz\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the length of the rope and y be the perimeter of the tree\n    # According to the question,\n    # 10y - x = 3 (10 turns around the tree is left 3 meters)\n    # 12y - x = -3 (12 turns is missing another 3 meters)\n    # We can set up the following equations:\n    # equation1: 10y - x = 3\n    # equation2: 12y - x = -3\n\n    # Subtract equation2 from equation1 to eliminate x and solve for y\n    # (10y - x) - (12y - x) = 3 - (-3)\n    # -2y = 6\n\n    # Divide both sides by -2 to get y\n    y = -6 / -2\n\n    # Now use the value of y to solve for x using either equation1 or equation2\n    # Let's use equation1:\n    # 10y - x = 3\n    # 10 * y = x + 3\n    # x = 10y - 3\n\n    x = 10 * y - 3\n\n    # The question asks for how many meters around 8 turns left,\n    # which is simply 8 turns of the perimeter of the tree:\n    # 8 * y\n\n    return 8 * y\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # We know that each team plays 2 matches against each other team (one home and one away).\n    # For n teams, the total number of matches can be calculated using the combination formula\n    # nC2 (since every pair plays twice, multiply by 2):\n    # Total matches = nC2 * 2\n    # 30 = nC2 * 2\n    # To solve this equation, we apply simple algebraic manipulation:\n    # 15 = nC2\n    # Which simplifies to:\n    # 15 = n * (n - 1) / 2\n    # This simplifies to:\n    # n^2 - n - 30 = 0\n    # The solutions to this quadratic equation will give us the number of teams.\n    \n    # Importing the necessary function from sympy to solve the quadratic equation\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    # Define the equation n^2 - n - 30 = 0\n    equation = Eq(n**2 - n - 30, 0)\n    # Solve the equation\n    solutions = solve(equation, n)\n    \n    # We are looking for a positive integer solution for the number of teams\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return solution\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n\n    return ash_cards\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if (A + B + C + D) == (A * 1000 + B * 100 + B * 10 + C) % 10000 // 1000 + \\\n                              (B * 1000 + C * 100 + C * 10 + D) % 10000 // 1000 + \\\n                              (A * 1000 + B * 100 + D * 10 + D) % 10000 // 1000 + \\\n                              (C * 1000 + D * 100 + A * 10 + B) % 10000 // 1000:\n            return A + B + C + D\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    result = (28 - 6) / 2\n    return result\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n    spent = 3 / 7 * total_money\n    not_used = total_money - spent\n\n    equation = Eq(spent - not_used, 12)\n\n    total_money_solution = solve(equation, total_money)[0]\n\n    amount_spent_on_bag = 3 / 7 * total_money_solution\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    age_sum_youngest_3 = 42\n    # Let the youngest dwarf age be 'x', then the ages are an arithmetic sequence: x, x+1, x+2, ..., x+6\n    # Sum of three youngest ages (x + (x+1) + (x+2)) = 42, which simplifies to 3x + 3 = 42\n    x = (age_sum_youngest_3 - 3) // 3\n    # Sum of three oldest ages = (x+4) + (x+5) + (x+6)\n    age_sum_oldest_3 = 3*x + 15\n    return age_sum_oldest_3\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    number = 111\n    n = 7\n    ans = number - sum(range(1, n))\n    return ans\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    sum_of_squares = (1/6) * n * (n + 1) * (2 * n + 1)\n    ans = sum_of_squares * 5**2\n    return int(ans)\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    stickers, pupils = symbols('stickers pupils')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    # Return the total number of stickers\n    return solutions[stickers]\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let's denote the number of toys made by each factory as A, B and C.\n    total_toys = 659\n    AB_toys = 447  # Toys made by factory A and B\n    BC_toys = 335  # Toys made by factory B and C\n\n    # Let AC_toys be the toys made by factory A and C\n    # According to the problem:\n    # A + B + C = total_toys\n    # A + B = AB_toys\n    # B + C = BC_toys\n    # We can rearrange these equations to find the number of toys made by B:\n    # B = total_toys - (A + C)\n    # B = total_toys - (total_toys - BC_toys)\n    B_toys = total_toys - (total_toys - BC_toys)\n\n    return B_toys\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_trays = 1\n    additional_sausages = 21\n\n    total_sausages = (initial_trays * initial_mean) + additional_sausages\n    total_trays = initial_trays + additional_trays\n    new_mean = total_sausages / total_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    # Let the number of boys be b.\n    # Then the number of girls is b + 30.\n    # The total number of pupils is the sum of boys and girls: b + (b + 30) = 500.\n    # Solve for b: 2b + 30 = 500\n\n    total_pupils = 500\n    difference = 30\n\n    # 2b = 500 - 30\n    # b = (500 - 30) / 2\n    boys = (total_pupils - difference) / 2\n\n    # Number of girls = boys + 30\n    girls = boys + difference\n\n    return girls\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    result = (3 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    each_share = total // 2\n    brenda_to_give = brenda - each_share\n\n    return brenda_to_give\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, hundreds):\n            for ones in range(hundreds, 10):\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Total distance covered on the first bridge including the length of the train\n    total_distance_first_bridge = 263 + 137\n    \n    # Since speed is constant, we can use the time and distance of the first bridge to calculate the speed\n    # Speed = Distance / Time\n    speed = total_distance_first_bridge / 20\n    \n    # Total time to cross the second bridge is given, hence calculate the total distance\n    total_distance_second_bridge = speed * 27\n    \n    # Length of the second bridge is the total distance minus the length of the train\n    length_second_bridge = total_distance_second_bridge - 137\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to distribute the first three books to three students\n    # This is a permutation since the books are different and the order of distribution matters\n    ways_to_distribute_first_three_books = factorial(3)\n\n    # Calculate the number of ways to distribute the remaining four books to three students\n    # Each of the remaining four books can go to any of the three students\n    ways_to_distribute_remaining_books = 3 ** 4\n\n    # Total different ways are the product of the two calculations above\n    total_different_ways = ways_to_distribute_first_three_books * ways_to_distribute_remaining_books\n\n    return total_different_ways\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of blue and red balls\n    blue, red = symbols('blue red')\n\n    # Create the equations based on the problem\n    equation1 = Eq(blue + red, 125)  # Total number of balls is 125\n    equation2 = Eq(2/5 * blue, 3/5 * red)  # 2/5 of blue balls is equal to 3/5 of red balls\n\n    # Solve the equations for the number of blue and red balls\n    solutions = solve((equation1, equation2), (blue, red))\n\n    # Calculate the difference between the number of blue and red balls\n    difference = solutions[blue] - solutions[red]\n\n    return difference\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one watch and one handbag\n    watch, handbag = symbols('watch handbag')\n    \n    # Create equations based on the given data\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # Solve the equations for the price of one watch and one handbag\n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    # Calculate the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # The number of candies received by each child forms a strictly increasing sequence.\n    # If the child who gets the most also gets the least possible number of candies, it means the distribution is as equal as possible while still being distinct.\n    # Let's start with a sequence where distribution is 1, 2, 3, ..., so on,\n    # until we have allocated 8 different amounts while keeping the total to 88.\n    \n    # This forms a sequence, the last term is 8th term. Let's find the sum of first 7 terms.\n    n = 7  # We know there are 7 terms before the last one\n    min_sum = n * (n + 1) // 2  # Sum of the first n natural numbers\n    \n    # Now we can find the minimum number for the last child, which will be the rest of the candies.\n    last_child_min = 88 - min_sum\n    \n    return last_child_min\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_birth_year = 2008 - 80\n    daughter_birth_year = 1996 - 40\n    age_difference = grandmother_birth_year - daughter_birth_year\n    return age_difference\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Since the ball must return to A after 3 passes and A is starting the passes, \n    # we can ignore A for the first and the last pass.\n    # Then we only need to calculate the arrangements for the two passes in between,\n    # which cannot involve A and must involve the other 3 individuals. \n    # The first individual can be any of the other 3, \n    # and the second individual can only be any of the remaining 2\n    # because the two passes must be to different individuals.\n    \n    num_ways = 3 * 2\n    \n    return num_ways\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    # Equation representing that Nicole had thrice as many tokens as Eddy initially\n    equation1 = Eq(nicole, 3 * eddy)\n\n    # Equation representing the situation after they've used their tokens\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial as fact\n\n    total_ways = fact(8)  # Ways to arrange 8 people\n    # Treat A and B as one person and arrange 7 \"people\" \n    ab_together = fact(7) * 2  # A can be to the left or right of B\n\n    # Treat C and D as always together and arrange like A and B are together\n    cd_together = fact(7) * 2  # C can be to the left or right of D\n\n    # Subtract the arrangements where C and D are together from the total\n    cd_not_together = total_ways - cd_together\n\n    # Final count is the arrangements of A and B together minus C and D together\n    ans = ab_together * cd_not_together / total_ways\n\n    return int(ans)\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1.0\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200  # grams\n    lenny_solution = 300  # grams\n    leroy_salt_concentration = 0.35  # 35%\n    lenny_salt_concentration = 0.50  # 50%\n\n    total_solution = leroy_solution + lenny_solution\n    total_salt = (leroy_solution * leroy_salt_concentration) + (lenny_solution * lenny_salt_concentration)\n\n    resulting_concentration = total_salt / total_solution\n\n    return resulting_concentration\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_mass = 300\n    sugar_concentration = 0.35\n    sugar_mass = total_mass * sugar_concentration\n    water_mass = total_mass - sugar_mass\n    return water_mass\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    k = symbols('k', real=True, positive=True)\n    equation = Eq(12**50, k**75)\n    sol = solve(equation, k)\n    \n    return int(sol[0])\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    initial_oranges = (133 - 25) + 34\n    return initial_oranges\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n    total_candies = 36\n    mike_left = 6\n    valeria_left = 22\n    candies_eaten_each = (valeria - valeria_left)\n\n    equation1 = Eq(mike - candies_eaten_each, mike_left)\n    equation2 = Eq(valeria - candies_eaten_each, valeria_left)\n    equation3 = Eq(mike + valeria, total_candies)\n\n    solutions = solve((equation1, equation2, equation3), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    count = 0\n    for i in range(1, 20):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    # First, calculate (14 Î¨ 13)\n    first_result = psi_operation(14, 13)\n    # Then, calculate (first_result Î¨ 12)\n    final_result = psi_operation(first_result, 12)\n\n    return final_result\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    total_avg_score = 89\n    girls_avg_score = 88\n    boys_avg_score = 91\n    \n    # Total score for the class\n    total_score = total_students * total_avg_score\n    \n    # Let the number of girls be \"g\" and hence number of boys will be \"total_students - g\"\n    # We set up the equation based on the total score\n    # girls_avg_score * g + boys_avg_score * (total_students - g) = total_score\n    \n    # Calculate the number of girls (g)\n    g = (total_score - boys_avg_score * total_students) / (girls_avg_score - boys_avg_score) \n    \n    return int(g)\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each kind of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n    \n    # Number of each kind of pet\n    cats = 2\n    dogs = 2\n    rabbits = 1\n    \n    # Calculate total legs for cats, dogs, and rabbits\n    total_legs_for_cdr = (cats * legs_per_cat) + (dogs * legs_per_dog) + (rabbits * legs_per_rabbit)\n    \n    # Remaining legs are for the birds\n    remaining_legs_for_birds = 28 - total_legs_for_cdr\n    \n    # Number of birds\n    birds = remaining_legs_for_birds // legs_per_bird\n\n    return birds\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # It takes a team of 5 people 6 hours to paint the fence\n    # Hence, the total man-hours required to paint the fence is 5 people * 6 hours\n    total_man_hours_for_my_fence = 5 * 6\n\n    # The neighbour's fence is twice as long\n    # So it would take double the man-hours to paint\n    total_man_hours_for_neighbours_fence = total_man_hours_for_my_fence * 2\n\n    # The neighbour wants the work completed in less than 5 hours\n    # To find the minimum number of people, divide the total man-hours by the target time (5 hours) and round up\n    target_time_hours = 5\n    min_people = -(-total_man_hours_for_neighbours_fence // target_time_hours)  # Ceiling division\n\n    return min_people\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_216g = cookies_per_gram * 21.6\n    return cookies_with_216g\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_flight = 12 / 4  # Time to walk up from first floor to fifth floor, which is 4 flights\n    number_of_flights_in_30_minutes = 30 / time_for_one_flight\n    return int(number_of_flights_in_30_minutes)\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the octal number to a decimal number\n    N_decimal = int('12345654321', 8)\n    \n    # Find the remainders when divided by 7 and 9\n    remainder_7 = N_decimal % 7\n    remainder_9 = N_decimal % 9\n    \n    # Return the sum of the remainders\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    # Three years ago + 3 years to now + 4 years into the future\n    combined_age_in_four_years = combined_age_three_years_ago + 3 + 4 + 4\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (1 / 6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import divisors, is_square\n    \n    # Get all divisors of 2016\n    all_divisors = divisors(2016)\n    \n    # Count how many of these divisors are perfect squares\n    count = sum(1 for divisor in all_divisors if is_square(divisor))\n    \n    return count\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x - 3 * x + 2, 22)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n    \n    return solutions[big_pail]\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the first number be x. The next two consecutive numbers would be x+1 and x+2.\n    # According to the question, the sum of these three numbers is 60.\n    # Therefore, we have x + (x + 1) + (x + 2) = 60.\n    # Simplify the equation to 3x + 3 = 60\n\n    # Subtract 3 from both sides to get 3x = 57\n    # Then we divide by 3 to find x\n    x = (60 - 3) // 3\n\n    # The largest number is the third one, which is x + 2. We calculate it and return.\n    largest_number = x + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # The worst case is when Annabella picks all shirts excluding one color before getting to yellow.\n    # To ensure she gets a yellow shirt, she must pick all non-yellow shirts plus one yellow shirt.\n    \n    orange = 6\n    pink = 4\n    brown = 12\n    # Total non-yellow shirts\n    non_yellow = orange + pink + brown\n\n    # To get at least one yellow shirt, she needs to pick all non-yellow plus one yellow.\n    ans = non_yellow + 1\n    \n    return ans\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(1, 10):\n                for D in range(0, 10):\n                    if A != B and A != C and A != D and B != C and B != D and C != D:\n                        if (100 * A + 10 * B + A) + (100 * C + 10 * D + C) == 726:\n                            return A + B + C + D\n                            \nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    sequence = [94, 80, 73, 66]\n    differences = [sequence[i] - sequence[i+1] for i in range(len(sequence)-1)]\n    next_difference = differences[1] + (differences[1] - differences[0])\n    ans = sequence[1] + next_difference\n    return ans\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    result = 9 + 4/5 + 99 + 4/5 + 199 + 4/5 + 2999 + 4/5 + 39999 + 4/5 + 1\n    return result\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(7, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glass_sales = 25\n    tumbler_sales = 12\n    carton_ml = 1000\n\n    total_ml_sold = (wine_glass_sales * wine_glass_ml) + (tumbler_sales * tumbler_ml)\n    cartons_needed = total_ml_sold / carton_ml\n\n    return int(cartons_needed) if total_ml_sold % carton_ml == 0 else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_front = 9  # 9th from front\n\n    position_end = total_people - position_front + 1\n\n    return position_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 / 20\n    return int(n)\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original quantities of avocados, peaches, and lemons\n    avocados, peaches, lemons = symbols('avocados peaches lemons')\n\n    # Set up the initial ratio equation (2:9:8)\n    equation1 = Eq(avocados * 9, peaches * 2)\n    equation2 = Eq(avocados * 8, lemons * 2)\n\n    # Set up the resulting ratio equation (6:5)\n    equation3 = Eq((peaches - 12) * 5, (lemons - 60) * 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (avocados, peaches, lemons))\n    \n    # Calculate the total number of fruits left\n    total_fruits_left = sum(val - sold for val, sold in \n                            zip(solutions.values(), [52, 12, 60]))\n    \n    return total_fruits_left\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    result = 125 * 32 * 25 * 7\n    return result\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Powers of 2 mod 10 cycle every 4: 2, 4, 8, 6, ...\n    # so we just need to find out which of these the 859433rd power will fall on.\n    # Since 859433 is congruent to 1 modulo 4 (859433 % 4 == 1),\n    # it will end in the same digit as 2^1\n    \n    last_digit = 2 ** (859433 % 4)\n    \n    return last_digit % 10\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy.ntheory import lcm\n\n    # Least common multiple of 2, 4, and 6\n    lcm_2_4_6 = lcm(2, 4, 6)\n\n    # Since the remainder is 1 when divided by 2, 4, and 6, Peter's age must be\n    # lcm(2, 4, 6) * k + 1 where k is some integer\n    # And also, it has to be 5 (mod 7), so Peter's age must be of the form 7m + 5 where m is an integer\n    # We try different values of k until both conditions are met:\n    k = 0\n    while True:\n        age = lcm_2_4_6 * k + 1\n        if age % 7 == 5:\n            break\n        k += 1\n\n    return age\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    total_students = 60\n    students_turned_3 = total_students // 3\n    students_turned_5 = total_students // 5\n    students_turned_15 = total_students // 15  # Common multiples of 3 and 5 (LCM is 15)\n\n    # Initially, all multiples of 3 turned, then multiples of 5 turned\n    # Multiples of 15 would have turned twice, thus facing the teacher again\n    # So we subtract students who have turned an even number of times (facing teacher)\n    facing_teacher = total_students - (students_turned_3 + students_turned_5 - students_turned_15)\n\n    return facing_teacher\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of sweets Jess has as x and Jill as y\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solving the system of equations for both variables\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets they have altogether\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n\n    for i in range(7, 0, -1):\n        for digits in permutations(range(1, 8), i):\n            number = int(''.join(map(str, digits)))\n            if all(number % d == 0 for d in digits):\n                max_number = max(number, max_number)\n                break\n        if max_number > 0:\n            break\n    return max_number\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Define the equation 52 - (4*x - 3) = 47\n    equation = Eq(52 - (4*x - 3), 47)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let Adam's weight be a, Ben's weight be b and Carl's weight be c.\n    # According to the problem:\n    # Adam + Ben = 102 -> Equation 1\n    # Ben + Carl = 97 -> Equation 2\n    # Adam + Carl = 93 -> Equation 3\n    \n    # Adding all three equations, we get\n    # 2 * (Adam + Ben + Carl) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    \n    # Now we need to divide by 2 to get Adam + Ben + Carl\n    total_weight = total_double / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # Searching through all two-digit numbers\n        if num % 3 == 2 and num % 11 == 2:  # Checking the remainder conditions\n            return num  # Returning the first number that satisfies the conditions\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    # The sum of an arithmetic sequence is given by (n/2)*(first_term + last_term)\n    # For consecutive odd numbers, the difference (d) is 2. First term (a1) is 1.\n    # If there are n terms, the nth term (an) is a1 + (n-1)*d.\n    # The sum (S) of the first n odd numbers is S = (n/2)*(a1 + an).\n    # Since an is also an odd number, we can express it as an = a1 + 2(k-1).\n\n    # Given the sum S = 900, we are looking for the maximum n such that:\n    # 900 = (n/2)*(1 + (1 + 2*(n-1)))\n    # Simplifying we get:\n    # 900 = (n/2)*(1 + 1 + 2n - 2)\n    # 900 = n*(1 + 2n - 1)\n    # 900 = n*(2n)\n    # 900 = 2n^2\n    # n^2 = 450\n    # n is the maximum integer such that n^2 <= 450\n\n    # We are looking for the largest integer n such that 2*n^2 = 900.\n    # We can start checking from n = 1 and increase n until 2*n^2 exceeds 900.\n    \n    n = 1\n    while 2 * n * n <= 900:\n        n += 1\n    \n    # Since we are looking for the largest integer n, we decrement n by one\n    # because the while loop exits when 2*n^2 is just greater than 900.\n    n -= 1\n\n    return n\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n\n    # Start from 121 as it's the next whole number after 120\n    number = 121\n    while True:\n        if number % divisor == remainder:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    ans = min(numbers)\n    return ans\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm_to_m = 2 / 100\n    total_height = height_m + height_cm_to_m\n    return total_height\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_score = 60\n    second_score = first_score * 1.25\n    third_score = second_score * 0.8\n    \n    total_score = first_score + second_score + third_score\n    \n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n    amount = principal * ((1 + rate) ** time)\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(6*pupils - bookmarks, 10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time = f\"{hour:02d}{minute:02d}\"\n            if time.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    # Number of chocolate bars Candy has\n    chocolate_bars = 233\n\n    # Check if the number of chocolate bars is a prime number\n    return isprime(chocolate_bars)\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum(i**2 for i in range(7, 106, 7))\n    return ans\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(130, 151))  # 151 is exclusive\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start = 56\n    end = 92\n    multiple_of = 4\n\n    start_quotient = (start - 1) // multiple_of\n    end_quotient = end // multiple_of\n\n    count = end_quotient - start_quotient\n\n    return count\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    answer = solve_congruence(*congruences)\n\n    return answer[0]\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Distance between the towns\n    distance = 144\n    # Time taken to travel downstream\n    time_downstream = 8\n    # Speed of the ship in still water\n    speed_ship = 15\n    # Speed of the stream\n    speed_stream = distance / time_downstream\n    \n    # Speed upstream is the speed of the ship minus the speed of the stream\n    speed_upstream = speed_ship - speed_stream\n    \n    # Time taken to come back (upstream) is the distance divided by the upstream speed\n    time_upstream = distance / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    num_select = 2\n\n    num_ways = comb(num_students, num_select)\n\n    return num_ways\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for daily consumption of food by Hippo and Kangaroo\n    hippo, kangaroo = symbols('hippo kangaroo')\n    \n    # Equation representing the difference in daily food consumption\n    equation1 = Eq(hipo, kangaroo + 45)\n    \n    # Equation representing the total food consumption after 20 days\n    equation2 = Eq(hippo * 20, 10 * kangaroo * 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n    \n    # Total food consumed by Hippo in 20 days\n    total_hippo_consumption = solutions[hippo] * 20\n\n    return total_hippo_consumption\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    # Convert waiting time to minutes\n    waiting_time_minutes = 1 * 60 + 25  # 1 hour 25 minutes\n\n    # Convert the start time (3.15 PM) to minutes past midday\n    start_minutes = 15 + 3 * 60\n\n    # Calculate the total minutes when they meet\n    meet_minutes = start_minutes + waiting_time_minutes\n\n    # Convert back to hours and minutes\n    meet_hour = meet_minutes // 60\n    meet_minute = meet_minutes % 60\n\n    return f\"{meet_hour}:{str(meet_minute).zfill(2)} PM\"\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/denominator for start in range(1, 20) for denominator in range(start + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # One day work of worker A\n    A_work_per_day = 1 / 15\n    # One day work of worker B\n    B_work_per_day = 1 / 20\n    # Work done by A and B together in 2 days\n    work_done_2_days = 2 * (A_work_per_day + B_work_per_day)\n    # Remaining work after 2 days\n    remaining_work = 1 - work_done_2_days\n    # Time for worker A to finish the remaining work\n    days_for_A_to_finish = remaining_work / A_work_per_day\n\n    return days_for_A_to_finish\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    # To guarantee that there are at least 11 students with the same zodiac sign,\n    # we use the Pigeonhole Principle which states that if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    # For our case, we want at least one container (zodiac sign) to contain at least 11 items (students).\n    # So we need to fill in each container with 10 students first, which is 10 students per zodiac sign.\n    students_per_zodiac = 10\n    min_students = (students_per_zodiac * num_zodiac_signs) + 1\n    \n    return min_students\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure that we have at least two balls of the same colour, we consider the worst-case scenario:\n    # We take out all balls of one colour and then one more ball. The next ball will surely be of the same colour as one we already have taken out.\n\n    # Number of green balls\n    green_balls = 7\n    # Number of blue balls\n    blue_balls = 8\n\n    # In the worst-case scenario, we could take out all 7 green balls, and the next one we take out\n    # must be blue, giving us 8 balls. Alternatively, we could take out all 8 blue balls, and the next\n    # one we take out must be green, also giving us 9 balls. Hence, we need to take out:\n    balls_needed = max(green_balls, blue_balls) + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    children_count = 9\n    first_child = 3\n    \n    last_child = (first_child + total_candies - 1) % children_count\n    # If the remainder is 0, it means the last candy goes to the child at seat number 9\n    if last_child == 0:\n        last_child = children_count\n    \n    return last_child\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    n = 60\n    first_term = 4\n    difference = 3\n    last_term = first_term + (n - 1) * difference\n\n    sum_of_sequence = (n * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # The worst case scenario using the Pigeonhole principle is when Ada picks the most possible\n    # number of balls without getting 10 of the same color.\n    # She could pick 9 yellow (since only 5 are available, she'll pick all yellow balls),\n    # then 9 white (since she could still be in a scenario with 9 white and some black balls), \n    # and then 9 black balls. She's still without 10 of the same color.\n    # The next ball she picks must be the 10th ball of either white or black color, ensuring 10 of the same color.\n    \n    yellow_balls = 5\n    max_yellow = yellow_balls  # All the yellow balls\n    \n    white_balls = 15\n    max_white = 9  # One less than 10\n    \n    black_balls = 20\n    max_black = 9  # One less than 10\n    \n    # Calculating the number of balls picked before ensuring 10 of the same color\n    balls_picked_without_10_same = max_yellow + max_white + max_black\n    \n    # The next ball ensures 10 of the same color\n    total_balls_to_ensure_10_same = balls_picked_without_10_same + 1\n    \n    return total_balls_to_ensure_10_same\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "def solution():\n    from itertools import permutations\n\n    def valid_perm(perm):\n        A_index = perm.index('A')\n        B_index = perm.index('B')\n        C_index = perm.index('C')\n        D_index = perm.index('D')\n        E_index = perm.index('E')\n        F_index = perm.index('F')\n        G_index = perm.index('G')\n\n        # Check if A is between B and C\n        if not (min(B_index, C_index) < A_index < max(B_index, C_index)):\n            return False\n        # Check if D and E are together\n        if abs(D_index - E_index) != 1:\n            return False\n        # Check if F and G are not adjacent\n        if abs(F_index - G_index) == 1:\n            return False\n        return True\n\n    total_count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for perm in permutations(students):\n        if valid_perm(perm):\n            total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    lcm = (7 * 3) // math.gcd(7, 3)  # Least Common Multiple of 7 and 3\n    days_until_next = lcm  # Number of days until she eats both again on the same day\n    return days_until_next\n\nimport math\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Applying the Inclusion-Exclusion Principle\n    both_cats_and_dogs = (children_with_dogs + children_with_cats) - total_children\n\n    return both_cats_and_dogs\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # number of shirts is 36 less than the number of skirts\n    equation1 = Eq(shirts, skirts - 36)\n    \n    # After selling 2/3 of the shirts\n    remaining_shirts = shirts * (1 - 2/3)\n    \n    # After selling 5/6 of the skirts\n    remaining_skirts = skirts * (1 - 5/6)\n    \n    # She had 72 shirts and skirts left in total\n    equation2 = Eq(remaining_shirts + remaining_skirts, 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    months = 3\n    total_saving = monthly_saving * months\n    return total_saving\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # sum of an arithmetic sequence formula: n/2 * (first term + last term)\n    # where n is the number of terms\n    \n    # for the given table, each row is an arithmetic sequence starting from 1 and increasing by 1\n    # sum of the numbers in row i is therefore i/2 * (1 + i)\n    \n    # the table consists of 20 rows, so we need to calculate the sum for each row from 1 to 20 and then add them up\n    sum_table = sum([(i/2) * (1 + i) for i in range(1, 21)])\n    \n    return int(sum_table)\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Given values\n    speed_to = 20  # speed to the destination\n    distance = 120  # total distance one way\n    avg_speed_expected = 30  # overall average speed expected\n    \n    # Time taken to reach the destination\n    time_to = distance / speed_to\n    \n    # Total time for the round trip at the expected average speed\n    total_time_expected = (2 * distance) / avg_speed_expected\n    \n    # Time remaining for the return trip\n    time_back = total_time_expected - time_to\n    \n    # Speed required for the return trip\n    speed_back = distance / time_back\n    \n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    for biscuits in range(400, 801):\n        if biscuits % 5 == 1 and biscuits % 6 == 2 and biscuits % 11 == 7:\n            return biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    # Nell's share ratio\n    nell_ratio = 4\n\n    # Joe's share ratio\n    joe_ratio = 5\n\n    # Total ratio\n    total_ratio = nell_ratio + joe_ratio\n\n    # Nell received 24 sweets, which corresponds to a ratio of 4\n    nell_sweets = 24\n\n    # Calculate the total number of sweets based on the given ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 35):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut, which results in 2 pieces.\n    # To get 5 pieces, the man needs to make 4 cuts.\n    # Since each cut takes 2 minutes, we can calculate the total time as follows:\n    total_time = 4 * 2\n    \n    return total_time\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person's marbles\n    jovan, sean, herman = symbols('jovan sean herman')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(jovan, herman - 240)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n    \n    # Calculate the total number of marbles altogether\n    total_marbles = sum(solutions.values())\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    # Given condition: hay can feed 12 horses for 15 days\n    total_hay = 12 * 15  # Total units of hay equivalent to horse-days\n\n    # We need to find out how many days the same total_hay can feed 20 horses\n    days_for_20_horses = total_hay / 20  # Dividing total units of hay by 20 horses\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    number_of_numbers = 3\n\n    # Calculate the sum of the three original numbers\n    original_sum = original_average * number_of_numbers\n\n    # Calculate the new sum required for the new average with an additional number\n    new_sum = new_average * (number_of_numbers + 1)\n\n    # The number that must be added to achieve the new average\n    number_to_add = new_sum - original_sum\n\n    return number_to_add\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    return 301 + 303 + 305 - 9\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n    ans = gcd(gcd(6, 9), 12)\n    return ans\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    expressway_per_company_per_day = total_expressway / (companies * days)\n\n    return expressway_per_company_per_day\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    # The sequence is an arithmetic sequence, where a_1 = 5 (the first term), d = 4 (the common difference).\n    # We need to find the n-th term (a_n) which is 65.\n    \n    a_1 = 5\n    d = 4\n    a_n = 65\n\n    # Using the formula for the n-th term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # Solving for n gives us: n = ((a_n - a_1) / d) + 1\n    n = ((a_n - a_1) // d) + 1\n    \n    # Using the formula for the sum of the first n terms of an arithmetic sequence: S_n = (n / 2) * (a_1 + a_n)\n    S_n = (n / 2) * (a_1 + a_n)\n    \n    return int(S_n)\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # Number of individual legs for the alien and his 5 brothers\n    total_legs = 5 * (1 + 5)  # each has 5 legs, and there are 6 individuals in total\n    \n    # Cost of shoes for all legs\n    shoe_cost_per_set = 78  # cost per set of 5 shoes\n    sets_of_shoes_needed = total_legs / 5  # since each set contains 5 shoes\n    total_shoe_cost = sets_of_shoes_needed * shoe_cost_per_set\n    \n    # Cost of socks for all legs\n    sock_cost_per_pair = 12  # cost per pair of socks\n    pairs_of_socks_needed = total_legs / 2  # each pair contains 2 socks\n    total_sock_cost = pairs_of_socks_needed * sock_cost_per_pair\n    \n    # Total cost for shoes and socks\n    total_cost = total_shoe_cost + total_sock_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each boy's mass\n    john, andy, charles = symbols('john andy charles')\n\n    # Equation 1: The total mass of John and Andy\n    equation1 = Eq(john + andy, 105)\n\n    # Equation 2: The total mass of Charles and John\n    equation2 = Eq(charles + john, 67)\n\n    # Equation 3: Andy's mass is 3 times Charles's mass\n    equation3 = Eq(andy, 3 * charles)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean\n\n    data_set = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data_set)\n    \n    absolute_deviation = [abs(x - data_mean) for x in data_set]\n    mad = mean(absolute_deviation)\n    \n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # We can solve this problem using the stars and bars method\n    # The formula for distributing n identical items among r containers (allowing empty containers)\n    # is C(n+r-1, r-1), where C is the binomial coefficient (combination)\n    from math import comb\n    n = 13  # The number of oranges\n    r = 3   # The number of kids\n    ans = comb(n + r - 1, r - 1)\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # We iterate through all 4 digit numbers to find the one that meets the condition.\n    for original_number in range(1000, 10000): \n        # Convert the number to string to manipulate digits\n        original_str = str(original_number)\n        # Form the new number by changing the ones place to the first digit\n        new_number = int(original_str[-1] + original_str[1:-1] + original_str[0])\n        # Check if the new number is greater than the original by 5877\n        if new_number - original_number == 5877:\n            return original_number\n    return \"No solution found\"\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    options = [49, 80, 32, 66, 8, 58]\n    ans = [books for books in options if (books - 4) % 7 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # distance from first to fifth tree is the distance for 4 intervals\n    interval_distance = 20 / 4\n    \n    # total number of intervals for the 200m road\n    intervals = 200 / interval_distance\n    \n    # number of trees is intervals + 1 since we start with the first tree\n    num_trees = intervals + 1\n    \n    return int(num_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $0.50 cookies be represented by d (David's cookies)\n    # Let the number of $0.10 cookies be represented by j (Jeremy's cookies)\n    d, j = symbols('d j')\n\n    # David's cookies were cost thrice as much as Jeremy's cookies\n    # Since David had only $0.50 cookies, the value of David's cookies is 0.50 * d\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies, so the number of his $0.50 cookies is (3/5) * j\n    # The value of Jeremy's cookies is thus 0.50 * (3/5) * j + 0.10 * j\n\n    # There were 60 fewer $0.10 cookies than $0.50 cookies, so we get the equation d = j - 60\n\n    # Using these relationships, we can write the equation for the cost:\n    cost_equation = Eq(0.50 * d, 3 * (0.50 * (3/5) * j + 0.10 * j))\n\n    # And the equation for the difference in the number of cookies:\n    number_equation = Eq(d, j - 60)\n\n    # Solve the system of equations\n    solutions = solve((cost_equation, number_equation), (d, j))\n\n    # Calculate the value of Jeremy's cookies\n    jeremys_cookies_value = 0.50 * (3/5) * solutions[j] + 0.10 * solutions[j]\n\n    return jeremys_cookies_value\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product in products:\n                products[product].add((numbers[i], numbers[j]))\n            else:\n                products[product] = {(numbers[i], numbers[j])}\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                product = numbers[i] * numbers[j] * numbers[k]\n                if product in products:\n                    # This product could be made by choosing 2 or 3 cards\n                    # Now we need to find which number is not used\n                    all_numbers = {numbers[i], numbers[j], numbers[k]}\n                    for pair in products[product]:\n                        if all_numbers.issuperset(pair):\n                            unused_number = all_numbers - set(pair)\n                            return unused_number.pop()\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # both taps filling together\n    time_to_half_fill = (1 / 2) / combined_rate  # time to fill half the tank\n    return time_to_half_fill\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    ans = 4392 // 6\n    return ans\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    side_length = 1\n    while True:\n        total_people = (side_length + 1) ** 2\n        boys = total_people - girls\n        if boys % side_length == 0 and boys // side_length == side_length:\n            return boys\n        side_length += 1\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_last = 2\n    \n    total_people = ann_position + people_between + david_position_from_last\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    pages = 0\n    while count < 22:\n        pages += 1\n        count += str(pages).count('8')\n    return pages\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n    third_number = total_sum - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Initial expression: (36 * 21) / (6 * 7)\n    initial_expression = (36 * 21) / (6 * 7)\n\n    # Correct first simplification: 36 * 21 / 6 * 7\n    first_simplification = 36 * 21 / 6 * 7\n\n    # Incorrect second simplification in the homework: 36 / 6 * 21 * 7\n    # Correct second simplification: (36 / 6) * (21 / 7)\n    correct_second_simplification = (36 / 6) * (21 / 7)\n\n    # Incorrect final expression in the homework: 6 * 7 * 21 = 882\n    # Correct final simplification: 6 * 3 * 21\n    correct_final_simplification = 6 * 3 * 21\n\n    # Check if the final answer in the homework is correct\n    correct_answer = correct_final_simplification\n\n    return correct_answer\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Calculate the worst case based on the Pigeonhole Principle\n    # You have to pick all but one from each of the two larger groups (blue and red), and all of the white balls.\n    total_picks = (80 - 1) + (40 - 1) + 30\n    \n    return total_picks\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = -1\n    net_distance = day_distance + night_distance\n    progress = 0\n    day = 0\n\n    while progress < total_distance:\n        day += 1\n        progress += day_distance\n        if progress >= total_distance:\n            break\n        progress += night_distance\n\n    return day\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mount_everest = 8848\n    height_mount_england = 978\n    difference = height_mount_everest - height_mount_england\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    # Iterate through the numbers less than 50\n    for number in range(1, 50):\n        # Check if the number is two less than a multiple of 3\n        if (number + 2) % 3 == 0:\n            # Check if the number is a prime number\n            if isprime(number):\n                # Check if the number is two more than a multiple of 5\n                if (number - 2) % 5 == 0:\n                    return number\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any factorial number greater than 4! will have the last digit as 0.\n    # Since 2014 is certainly greater than 4, the last digit of 2014! would be 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    primes = [2, 2, 3, 8, 5, 5, 5]\n    factors = {'2': 0, '5': 0}\n    \n    for prime in primes:\n        if prime == 2 or prime == 8:\n            factors['2'] += prime // 2\n        elif prime == 5:\n            factors['5'] += 1\n    \n    # The number of zeros at the end of the product is determined by the number\n    # of pairs of 2 and 5 factors because 10 = 2 * 5.\n    num_zeros = min(factors.values())\n    return num_zeros\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 30\n    original_numerator = 6\n    original_denominator = 20\n    \n    denominator = (original_denominator * numerator) / original_numerator\n    \n    return int(denominator)\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts Alicia, Beth, and Casey originally had\n    alicia, beth, casey = symbols('alicia beth casey')\n    \n    # Create the equations based on the problem statement\n    # They all end up with the same amount of money\n    # Alicia spends half of her money, Beth spends $60, Casey spends three times what Alicia spends\n    # Total money they originally had is $900\n    equation1 = Eq(1/2 * alicia + beth - 60 + casey - 3/2 * alicia, beth)\n    equation2 = Eq(alicia + beth + casey, 900)\n    \n    solutions = solve((equation1, equation2), (alicia, beth, casey))\n    \n    # Extract Alicia's original amount of money\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = original_number * 10\n\n    equation = Eq(original_number + new_number, 253)\n\n    solved = solve(equation, original_number)\n\n    return solved[0]\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 6) * 3) / 8 - 8, 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n    \n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n    \n    return seashells_per_box\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of cookies eaten on the first day be x.\n    x = symbols('x')\n    \n    # The number of cookies eaten on the 2nd, 3rd, 4th, and 5th day will be x+6, x+12, x+18, x+24 respectively.\n    # The total number of cookies eaten over the five days is 100.\n    equation = Eq(x + (x + 6) + (x + 12) + (x + 18) + (x + 24), 100)\n\n    # Solve the equation for x to find the number of cookies eaten on the first day.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for i in range(90):\n        if i % 9 == 0 and (i + 1) % 5 == 0 and (i - 1) in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89):\n            return i\n    return None\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    result = 18 / 100 * 250\n    return result\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    men_positions = factorial(4) # 4 men can be arranged in 4! ways\n    women_positions = factorial(4) # 4 women can be arranged in 4! ways\n    return men_positions * women_positions\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    p_count = \"HAPPY\".count(\"P\")\n    # Calculating the permutations of the word \"HAPPY\"\n    permutations = factorial(total_letters) // factorial(p_count)\n\n    return permutations\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_children = 12 / (1 - (2/5))\n    boys = (2/5) * total_children\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    # Number to find the prime factors for\n    number = 96\n    # Dictionary to keep track of the count of each prime factor\n    prime_factors = {}\n    \n    # Start with the smallest prime factor\n    factor = 2\n    while factor * factor <= number:\n        while number % factor == 0:\n            number = number // factor\n            prime_factors[factor] = prime_factors.get(factor, 0) + 1\n        factor += 1\n    \n    # If there is any number left greater than 1, it's a prime factor\n    if number > 1:\n        prime_factors[number] = 1\n        \n    # Calculate the number of factors\n    ans = 1\n    for exponent in prime_factors.values():\n        ans *= (exponent + 1)\n        \n    return ans\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + people_behind_john + peter_and_john\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.60 * 0.10 * 900\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time_hours = 12\n    flight_duration_hours = 4\n    time_difference_hours = 3  # St Petersburg is GMT+3\n\n    # Calculate hours when landing at St Petersburg local time\n    landing_time_hours = (departure_time_hours + flight_duration_hours + time_difference_hours) % 24\n\n    return landing_time_hours\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 2):\n        N, O = p\n        # Since NO is two-digit, N cannot be 0\n        if N == 0:\n            continue\n        \n        NO = 10 * N + O\n        ON = 10 * O + N\n        # Constraint: NO - ON = 63\n        if NO - ON == 63:\n            return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(25, 51):\n        if i % 2 == 1:\n            ans += (2 * i - 2)\n        else:\n            ans -= (2 * i - 2)\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 colors, so to guarantee a pair of at least one color,\n    # Cindy must take out one more than 3 times the number of colors.\n    num_colors = 3\n    ans = num_colors * 2 + 1  # Taking out one more than 3 pairs\n    return ans\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg = 2.5\n    grams = kg * 1000\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    map_distance_cm = 12\n    scale_cm_per_km = 5\n\n    ground_distance_km = (map_distance_cm / scale_cm_per_km)\n\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= ((1/i) - (1/(51-i)))\n    return product\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    boys = fraction_boys * (total_sweets / sweets_per_boy)\n    girls = (total_sweets - (boys * sweets_per_boy)) / sweets_per_girl\n\n    return int(girls)\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kph = 7.2\n    time_seconds = 24\n\n    # Convert speed to meters per second (1 km/h = 1000 m / 3600 s)\n    speed_mps = speed_kph * (1000 / 3600)\n\n    # Calculate the distance in meters\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n    \n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # According to the definition, a composite number is a positive integer that has at least one positive divisor other than one and itself.\n    # Therefore, the number 1 would not be considered a composite number because it does not have at least one other positive divisor.\n    # This means Pip is not entirely correct because the statement did not exclude the number 1, which is neither a prime nor a composite number.\n\n    # Since the question asks for an explanation and not a numerical answer, we will return a boolean representing Pip's correctness.\n    # False represents that Pip's statement is not completely correct.\n\n    return False\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve, divmod\n    \n    # Define the symbol for the unknown number\n    number = symbols('number')\n    \n    # Create equations for the remainders\n    eq1 = Eq(divmod(number, 7)[1], 5)  # Remainder when number is divided by 7\n    eq2 = Eq(divmod(number, 8)[1], 6)  # Remainder when number is divided by 8\n    eq3 = Eq(divmod(number, 10)[1], 6) # Remainder when number is divided by 10\n    \n    # Given the sum of quotients\n    sum_of_quotients = 265\n    quotient_eq = Eq(divmod(number, 6)[0] + divmod(number, 7)[0] + divmod(number, 8)[0], sum_of_quotients)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, quotient_eq), number)\n    \n    # Extract the valid solution (should be only one valid solution)\n    for sol in solutions:\n        if sol > 0 and sol.is_integer:\n            return sol\n        \nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    maths_students = 70\n    language_students = 54\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes = maths_students + language_students - total_students\n\n    # Students taking only math class\n    only_maths = maths_students - both_classes\n\n    return only_maths\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1.5\n    for i in range(3, 10):\n        product *= 1 + 1/i\n    return product\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    x = symbols('x')\n\n    # Represents the equation (1/3 - 0.25)x = 36\n    equation = Eq((1/3 - 0.25) * x, 36)\n\n    # Solves the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    if x1 + x2 + x3 + x4 == 12 and len(set([x1, x2, x3, x4])) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        i += 1\n        if str(40309 + i) == str(40309 + i)[::-1]:\n            return i\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Kasia's sweets after keeping 13 for herself\n    sweets_kasia_keeps = 13\n    sweets_to_share = 42 - sweets_kasia_keeps\n\n    # Sweets shared between Maya and Lucie\n    sweets_per_friend = sweets_to_share / 2\n\n    # Sweets Lucie gives to Joan\n    lucie_to_joan = sweets_per_friend * (2/7)\n\n    # Sweets Lucie keeps for herself\n    lucie_keeps = sweets_per_friend - lucie_to_joan\n\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Initialize the difference between the number of boys and girls\n    difference = 52\n\n    # Start with a square size of 1 and increase by 2 each time (since we add a layer of boys and a layer of girls)\n    size = 1\n\n    # Initialize the total number of boys and girls\n    total_boys = 0\n    total_girls = 0\n\n    # Continue increasing the square size until we find a solution\n    while True:\n        # Calculate the number of students in the current layer\n        if size % 2 == 1:\n            # If it's an odd layer, it's full of boys\n            total_boys += size * size\n        else:\n            # If it's an even layer, it's full of girls\n            total_girls += size * size\n\n        # Check if the difference matches the requirement\n        if total_boys - total_girls == difference:\n            # Return the combined total of boys and girls\n            return total_boys + total_girls\n        \n        # Move on to the next layer\n        size += 2\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's assume Granddad's weekly pension is 1 (whole pension)\n    # On Friday, he spends 1/4 of his pension\n    friday_spent = 1/4\n    # The remaining after Friday is 1 - 1/4\n    remaining_after_friday = 1 - friday_spent\n    # On Saturday, he spends 1/3 of the remaining\n    saturday_spent = 1/3 * remaining_after_friday\n    # The remaining after Saturday is what was left after Friday minus what was spent on Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x represents the total number of litres needed to fill the tank\n    x = symbols('x')\n    \n    # Equation 1: If using a 5-litre pail, 4 litres will overflow, so x - 4 = 5 * (number of 5-litre pails needed)\n    # Equation 2: If using a 3-litre pail, 4 more pails are needed, so x = 3 * (number of 3-litre pails needed + 4)\n    # Both number of pails are integers, and since they differ, we can equate (x - 4)/5 and x/3 - 4 as shown below\n    equation1 = Eq((x - 4)/5, x/3 - 4)\n    \n    # Solving for x\n    solution = solve(equation1, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    # total people on the bus\n    total_people = 20\n    \n    # Ratio of adults to children\n    ratio_adults_to_children = 1 / 4  # 1:4 ratio\n    \n    # Calculate the number of adults\n    adults = total_people / (1 + 4)\n    \n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    combinations = num_school_bags * num_pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    sequence_length = len(recurring_sequence)\n    total_digits = 212\n\n    full_repeats = total_digits // sequence_length\n    additional_digits = total_digits % sequence_length\n\n    sum_full_repeats = sum(int(digit) for digit in recurring_sequence) * full_repeats\n    sum_additional_digits = sum(int(recurring_sequence[i]) for i in range(additional_digits))\n\n    return sum_full_repeats + sum_additional_digits\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_needed = ginkgo_trees - 1\n\n    return willow_trees_needed\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    percentage = 36\n    total_value = 50\n\n    result = (percentage / 100) * total_value\n\n    return result\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n    \n    # Original ratio equation: apples/pears = 3/4\n    ratio_eq = Eq(apples/pears, 3/4)\n    \n    # After replacing equation: (apples + 36) / (pears - 36) = 3/2\n    replaced_eq = Eq((apples + 36)/(pears - 36), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, replaced_eq), (apples, pears))\n    \n    return solutions[apples]\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2/3) * 729\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    count_of_zeros = 28\n    count_of_twos = 0\n    count_of_fives = 0\n    n = 1\n    \n    # The number of zeros at the end of the product is determined by\n    # the number of pairs of 2 and 5 that factorize within the numbers\n    \n    # Since there are always more 2s than 5s in factorial decomposition,\n    # we count the number of 5s to determine the number of zeros\n    \n    while count_of_fives < count_of_zeros:\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_of_fives += 1\n            temp_n //= 5\n        n += 1\n\n    # Subtract 1 because we went one step beyond while counting\n    return n - 1\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = (people * (people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let the original array be nÃn. \n    # The new array will be (n+1)Ã(n+1) after adding one row and one column.\n    # Therefore, the equation will be: n^2 + 31 = (n+1)^2\n    # Simplifying the equation: n^2 + 31 = n^2 + 2n + 1\n    # Further simplification: 31 = 2n + 1\n    # Solving for n: n = (31 - 1) / 2\n    n = (31 - 1) // 2\n    \n    # The total number of soldiers now is (n+1)Ã(n+1)\n    total_soldiers = (n + 1) ** 2\n    return total_soldiers\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    total_lemonade_price = 5 * lemonade_price\n    total_chocolate_bar_price = 6 * chocolate_bar_price\n    total_cost = total_lemonade_price + total_chocolate_bar_price\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let sam be the current age of Sam\n    sam = symbols('sam')\n\n    # In four years, Sam's age will be sam + 4\n    # Four years ago, Sam's age was sam - 4\n\n    # According to the problem, Sam's age in four years is twice his age four years ago\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    # Solve the equation for Sam's age\n    sam_age = solve(equation, sam)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the given digits\n    digits = ['3', '7', '2', '8']\n    all_numbers = [''.join(p) for p in permutations(digits)]\n\n    # Convert permutations to integers, keep only odd ones, and find the smallest\n    all_odd_numbers = [int(n) for n in all_numbers if int(n) % 2 == 1]\n    n = min(all_odd_numbers)\n\n    return n\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    vowels = ['A', 'I', 'O']\n    consonants = ['R', 'N', 'B', 'W']\n    \n    total_vowels = factorial(len(vowels))\n    total_consonants = factorial(len(consonants))\n    \n    total_arrangements = factorial(len(vowels) + len(consonants))\n    \n    # Places where vowels can be placed: _ R _ N _ B _ W _\n    total_places_for_vowels = len(consonants) + 1\n    \n    # Since vowels should not be together, calculate the total possible positions\n    total_ways_to_place_vowels = total_places_for_vowels - len(vowels) + 1\n    \n    # For each position where vowels are placed, they can be arranged among themselves\n    arrangements_with_vowels_separate = total_ways_to_place_vowels * total_vowels\n    \n    # Total valid arrangements are all arrangements minus those with vowels together\n    valid_arrangements = total_arrangements - total_consonants * arrangements_with_vowels_separate\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if (num % 4 == 0) and (36 % num == 0):\n            return num\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms, a is the first term and d is the common difference\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    # sum of first 10 terms S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    equation1 = Eq(5 * (2 * a + 9 * d), 20)\n    # sum of first 30 terms S_30 = 30/2 * (2a + (30 - 1)d) = 90\n    equation2 = Eq(15 * (2 * a + 29 * d), 90)\n    \n    solution = solve((equation1, equation2), (a, d))\n\n    return solution[d]\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    result = 3.462 / 0.3\n    return result\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # worst case scenario to pick 2 pairs of matching colour\n    # we have to consider that he will pick socks all in different colour first\n\n    # pick 1 yellow, 1 green, 1 white, 1 red and 1 black => 5 socks\n    # now for any next sock he picks, he will have a pair of socks in terms of colour\n    # since there are 3 colours with more than 1 sock (yellow, green, white)\n    # he needs to pick at least 1 more sock to guarantee a pair of one of these colours\n\n    # now he has 1 pair, to ensure the second pair, he should pick socks from the different colours\n    # if he picks maximum variety without making a pair, he will need:\n    # maximum variety without a pair would be: 1 yellow, 1 green, 1 white (3 socks)\n    # now any next sock will definitely make a second pair.\n\n    # total number of picks to ensure 2 pairs of the same colour:\n    smallest_number_of_picks = 5 + 1 + 3 + 1  # initial picks + 1 for first pair + variety picks + 1 for second pair\n\n    return smallest_number_of_picks\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amy, penny = symbols('amy penny')\n    equation1 = Eq(amy / penny, 5/4)\n    equation2 = Eq(amy + penny, 117)\n\n    solutions = solve((equation1, equation2), (amy, penny))\n\n    return solutions[penny]\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for chickens, goats, and cows\n    chickens, goats, cows = symbols('chickens goats cows')\n    \n    # 3 times the number of chickens is 5 times the number of cows\n    equation1 = Eq(3 * chickens, 5 * cows)\n    # 2 times the number of goats is 10 times the number of cows\n    equation2 = Eq(2 * goats, 10 * cows)\n    # There are 40 chickens and goats combined\n    equation3 = Eq(chickens + goats, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    \n    # Get the number of each animal\n    num_chickens = solutions[chickens]\n    num_goats = solutions[goats]\n    num_cows = solutions[cows]\n    \n    # Calculate the total number of feet \n    # Chickens have 2 feet, goats and cows have 4 feet\n    total_feet = 2 * num_chickens + 4 * (num_goats + num_cows)\n    \n    return total_feet\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_km_per_hr = 3.6\n    time_sec = 300\n    \n    # Convert speed from km/hr to m/sec\n    speed_m_per_sec = (speed_km_per_hr * 1000) / (60 * 60)\n\n    # Calculate the distance\n    distance_m = speed_m_per_sec * time_sec\n\n    return distance_m\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Jack sold 40 apples which is 4/7 of the apples he brought\n    brought = 40 * (7/4)\n    \n    # He brought 1/2 of all apples he has\n    total_apples = brought * 2\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = '9023'\n    permuts = permutations(digits)\n    closest_num = None\n    min_diff = float('inf')\n    \n    for p in permuts:\n        num = int(''.join(p))\n        diff = abs(2978 - num)\n        if diff < min_diff:\n            closest_num = num\n            min_diff = diff\n            \n    return closest_num\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    ans = 1 + lines + (lines * (lines - 1) // 2) + (lines * (lines - 1) * (lines - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_row_seats = 48\n    last_row_seats = 80\n    difference = 4  # Each row has 4 more seats than the row in front\n\n    # The number of terms can be found by the formula of the nth term of an arithmetic sequence:\n    # An = A1 + (n - 1)d, where An is the nth term, A1 is the first term, d is the difference and n is the number of terms\n    # Rearranging to find n:\n    num_rows = ((last_row_seats - first_row_seats) // difference) + 1\n\n    # The sum of an arithmetic sequence can be found by the formula:\n    # S = n/2 * (A1 + An) where S is the sum, n is the number of terms, A1 is the first term, and An is the nth term\n    total_seats = num_rows / 2 * (first_row_seats + last_row_seats)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    product = 7007\n    for i in range(10, 100):\n        if product % i == 0:\n            j = product // i\n            if j % 7 == 0 and j >= 10 and j < 100:\n                return i + j\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_ab = 22\n    c = 19\n    sum_ab = 2 * average_ab  # A + B\n    sum_abc = sum_ab + c  # A + B + C\n    average_abc = sum_abc / 3  # (A + B + C) / 3\n    return average_abc\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age_at_death = death_date.year - birth_date.year\n    # If death date is before birth date in the year, subtract one year\n    if (death_date.month, death_date.day) < (birth_date.month, birth_date.day):\n        age_at_death -= 1\n\n    return age_at_death\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    leftover_coins = total_coins % children\n    return leftover_coins\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side = 0\n    for i in range(1, 24):\n        if i * i <= 23:\n            max_side = i\n    cut_length = max_side * max_side\n    return 23 - cut_length\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Apply the Pigeonhole Principle: If n items are put into m containers, with n > m,\n    # then at least one container must contain more than n/m items.\n    # In this case, we also need to take the ceiling since we can't have a fraction of a cake.\n    max_cakes_per_layer = (total_cakes + layers - 1) // layers\n\n    return max_cakes_per_layer\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the four numbers be a, b, c, d.\n    # The average of the first 2 numbers (a and b) is 10, so (a + b) / 2 = 10 -> a + b = 20\n    # The average of the last 2 numbers (c and d) is 22, so (c + d) / 2 = 22 -> c + d = 44\n    # The average of the first and the last numbers (a and d) is 14, so (a + d) / 2 = 14 -> a + d = 28\n    \n    # From a + b = 20 and a + d = 28, we can get b - d = -8 (subtracting the second from the first)\n    # We can calculate b and d using c + d = 44 (since we have b - d already, we can get b and c by substitution)\n    \n    # Let's solve the system of equations:\n    # a + b = 20\n    # c + d = 44\n    # a + d = 28\n    # b - d = -8\n    \n    # By re-arranging the last equation we get:\n    # b = d - 8\n    \n    # Now we can substitute this value in the first equation:\n    # a + (d - 8) = 20 -> a = 20 - (d - 8) -> a = 28 - d\n    # So we have a + d = 28\n    # Now we know that a = 28 - d\n    # We also know that a + d = 28\n    \n    # The only valid solution to this system is when a = d = 14\n    # Because a + d = 28, which means 14 + 14 = 28\n    # Now we know that b = d - 8 = 14 - 8 = 6\n    # Finally, since a + b = 20, and a = 14, b must be 6.\n    \n    # Now we have all four values:\n    # a = 14\n    # b = 6\n    # c = 44 - d\n    # d = 14\n    \n    # Now we can find c since we know d:\n    c = 44 - 14  # c = 30\n    \n    # We need to find the average of the two middle numbers b and c.\n    average_middle = (6 + 30) / 2\n\n    return average_middle\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = 20 + (1 * 7)\n    part2 = (21 + 1) * 7\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # average age for Chinese and English teachers\n    avg_CE = 34\n    # average age for English and Mathematics teachers\n    avg_EM = 36\n    # average age for Chinese and Mathematics teachers\n    avg_CM = 44\n    \n    # Using the inclusion-exclusion principle\n    # Let C = sum of Chinese teachers' ages\n    # Let E = sum of English teachers' ages\n    # Let M = sum of Mathematics teachers' ages\n    \n    # We have the following equations:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n\n    # Summing all the three equations we get:\n    # 2(C + E + M) = 68 + 72 + 88\n    total_sum = (68 + 72 + 88)\n    # Dividing by 2 because we counted each teacher twice\n    total_avg = total_sum / 3\n\n    return total_avg\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    sum_fraction_parts = 0\n    for i in range(1, 2019):\n        x = (2018 + i) / 5\n        fraction_part = x - int(x)\n        sum_fraction_parts += fraction_part\n    return sum_fraction_parts\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "def solution():\n    from math import factorial\n\n    # Total number of elements: n\n    # Number of similar elements: r1, r2, ... r_k\n    # Formula for permutation of n items with repetition: n! / (r1! * r2! * ... * r_k!)\n\n    total_numbers = factorial(5) # Total numbers 5! for five places\n    repeat_1 = factorial(2)      # 1 repeats 2 times\n\n    # Calculate the number of different five-digit numbers\n    diff_numbers = total_numbers // repeat_1\n\n    return diff_numbers\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Chelsia and Benson's money\n    chelsia, benson = symbols('chelsia benson')\n    \n    # Create equations based on the problem description\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    # Calculate the total sum of money\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year5_students = (3 / 10) * total_students\n    year5_girls = (3 / 5) * year5_students\n\n    return int(year5_girls)\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the difference between the number of cookies in two adjacent boxes.\n    d = symbols('d')\n\n    # The number of cookies in each box forms an arithmetic sequence: 11, 11+d, 11+2d, ..., 11+9d\n    # The sum of an arithmetic sequence is (n/2) * (first_term + last_term), where n is the number of terms.\n    # In this case, n = 10 (boxes), first_term = 11 (cookies in box 1), last_term = 11+9d (cookies in box 10).\n    \n    n = 10\n    first_term = 11\n    last_term = 11 + 9 * d\n    total_cookies = 425\n\n    # Setting up the equation for the sum of the arithmetic sequence and solving for d.\n    equation = Eq((n / 2) * (first_term + last_term), total_cookies)\n    solution = solve(equation, d)\n\n    # Since there may be multiple solutions, we're ensuring we're returning the correct one (a positive difference).\n    for sol in solution:\n        if sol.is_real and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inv = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inv\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x.\n    # Then, the terms are x, x+2, x+4, x+6, x+8, x+10, x+12.\n    # The sum of these terms is 7x + (2+4+6+8+10+12) = 7x + 42.\n    # We know that the sum is 357.\n    # Hence, 7x + 42 = 357.\n    # Solving for x gives us the first term which is the smallest number in the sequence.\n    sum_of_sequence = 357\n    sum_of_increments = (2 + 4 + 6 + 8 + 10 + 12) # sum of differences between consecutive terms\n    sum_without_increments = sum_of_sequence - sum_of_increments\n    first_term = sum_without_increments // 7 # integer division since we are working with consecutive odd numbers\n\n    return first_term\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    equation1 = Eq(martin_speed / carter_speed, 9 / 13)\n    equation2 = Eq(martin_speed, carter_speed + 20)\n\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 3  # Division by 3 to correct for overcounting\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The smallest number that leaves remainder 1 when divided by 5, 6, or 7 is a solution to the following system:\n    # x â¡ 1 (mod 5)\n    # x â¡ 1 (mod 6)\n    # x â¡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    \n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(0)  # This assumes you will replace the 0 with the actual value of x used when making a dress."
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George painting together\n    fg_rate = 1 / 6\n    # Fred painting alone\n    f_rate = 1 / 9\n    # George painting alone, we have to find this rate\n    # The reciprocal of the sum of reciprocals of individual rates gives the combined rate\n    # 1/george_rate = (1 / fg_rate) - (1 / f_rate)\n    g_rate = 1 / ((1 / fg_rate) - (1 / f_rate))\n    return g_rate\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    \n    # Total legs without birds\n    total_legs_without_birds = cats_legs + dogs_legs + rabbit_legs\n    # Since birds have 2 legs, let's find the remaining legs which would be for the birds\n    remaining_legs_for_birds = 28 - total_legs_without_birds\n    # The number of birds will be half the remaining legs since each bird has 2 legs\n    birds = remaining_legs_for_birds / 2\n\n    return birds\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # Given there are 14 red apples and 20 yellow apples\n    red_apples = 14\n    yellow_apples = 20\n\n    # According to the Pigeonhole Principle, to ensure at least two apples of the same color,\n    # we need to draw one more apple than the number of all the unique \"pigeonholes\" we have.\n    # In this case, each color represents a pigeonhole.\n    \n    # If we take one apple of each color, we might end up with one red and one yellow.\n    # But to ensure TWO of the SAME color, we take out one more apple.\n    # Therefore, the worst case scenario happens when we have taken all apples of the smaller group,\n    # plus one more apple from the other group.\n\n    ans = red_apples + 1\n    \n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let x be the number of pens sold\n    # There were 20 red pens in the end\n    # Before selling, there were 20 + x red pens\n    # And there were (7/3) * (20 + x) black pens\n    # After selling x pens of each, the ratio becomes 5:13\n    # (20 + x - x)/( (7/3)*(20 + x) - x) = 5/13\n    # Simplify the equation to find x\n\n    final_red = 20\n    ratio_before = 3 / 7\n    ratio_after = 5 / 13\n\n    x = symbols('x')\n    equation = Eq((final_red)/(ratio_before * (final_red + x) - x), ratio_after)\n\n    red_sold = solve(equation, x)\n\n    return red_sold[0]\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # There are 5 entrances for each person to choose from.\n    entrances = 5\n\n    # Each of the four people can choose any of the 5 entrances,\n    # and the order in which they enter the zoo matters.\n    # This is a permutation problem where repetition is allowed.\n    ways_for_each_person = entrances\n\n    # The total number of different ways they can enter the zoo is:\n    # ways_for_first_person * ways_for_second_person * ... * ways_for_fourth_person\n    total_ways = ways_for_each_person ** 4\n\n    return total_ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    result = [num for num in factors_of_42 if 10 < num < 20]\n\n    return result[0]\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Value of the house after the first year\n    value_after_first_year = 10500\n    # Increase in value is 5% which makes the value 105% of the original\n    original_value = value_after_first_year / 1.05\n    \n    # In the second year, the house loses 5% of its value\n    value_after_second_year = original_value * 0.95\n\n    # Calculate the profit or loss by subtracting the final value from the original value\n    profit_or_loss = value_after_second_year - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_35 = 200 // (5*7)\n\n    ans = count_5 + count_7 - count_35\n\n    return ans\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel = 300\n    bag_weight = 12\n    bags_needed = (total_gravel + bag_weight - 1) // bag_weight\n\n    return bags_needed\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    # Given numbers and their average\n    numbers = [8, 3, 9]\n    average = 6\n    \n    # Total sum of the numbers including the unknown\n    total_sum = average * 4  # Average multiplied by the number of elements\n    \n    # Sum of given numbers\n    sum_of_given_numbers = sum(numbers)\n    \n    # Number that goes in the square\n    missing_number = total_sum - sum_of_given_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for pen and ruler\n    pen, ruler = symbols('pen ruler')\n    \n    # Given equations\n    equation1 = Eq(2 * ruler + 9 * pen, 21.60)\n    equation2 = Eq(ruler, pen + 0.90)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pen, ruler))\n    \n    # We need the price of one ruler\n    return float(solutions[ruler])\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    # The prime numbers less than 50\n    primes_less_than_50 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    for prime in primes_less_than_50:\n        # Check if prime is two less than a multiple of 3\n        if (prime + 2) % 3 == 0:\n            # Check if prime is two more than a multiple of 5\n            if (prime - 2) % 5 == 0:\n                # If both conditions are met, we've found the answer\n                return prime\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    result += 50  # Reverse step (8)\n    # Now result equals month operation result added to day of birth\n    \n    # Reverse steps (2) through (6)\n    # The operations in these steps effectively multiply the month by 100\n    # So we need to reverse this by dividing by 100\n    month_result = result // 100\n    day = result % 100  # The day of birth is the remainder\n\n    # Reverse steps (1), (3), (4), (5)\n    month_result += 20  # Reverse of subtract 20\n    month_result //= 5   # Reverse of multiply by 5\n    month_result -= 6   # Reverse of add 6\n    month_result //= 4   # Reverse of multiply by 4\n\n    # The calculated month result should now be the month of birth\n    month = month_result\n\n    return (month, day)\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for p in permutations(digits):\n        first_number = int(''.join(p[:3]))\n        second_number = int(''.join(p[3:5]))\n        third_number = int(''.join(p[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    term1 = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - term1) / difference) + 1\n\n    sum_sequence = (num_terms / 2) * (term1 + last_term)\n    sum_double_sequence = sum_sequence * 2 - last_term # Subtract last term as it is not repeated\n\n    return int(sum_double_sequence)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_cost = 5\n    refill_cost = 1\n    total_money = 10\n\n    # Richard can buy one initial cup with 5 dollars\n    remaining_money = total_money - initial_cup_cost\n    # The number of refills he can afford is the remaining money\n    number_of_refills = remaining_money // refill_cost\n\n    # Total cups of cokes Richard can afford is initial cup + refills\n    total_cups = 1 + number_of_refills\n\n    return total_cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Find the unit rate (peaches per monkey per day)\n    total_peaches_for_3_monkeys = 96\n    number_of_days_for_3_monkeys = 2\n    number_of_monkeys_initial = 3\n    peaches_per_monkey_per_day = total_peaches_for_3_monkeys / (number_of_days_for_3_monkeys * number_of_monkeys_initial)\n    \n    # Calculate the total peaches for 5 monkeys over 4 days\n    number_of_days_for_5_monkeys = 4\n    number_of_monkeys_later = 5\n    total_peaches_for_5_monkeys = peaches_per_monkey_per_day * number_of_days_for_5_monkeys * number_of_monkeys_later\n    \n    return int(total_peaches_for_5_monkeys)\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n    \n    # Arrange each kind\n    story_books_arrangements = factorial(story_books)\n    comic_books_arrangements = factorial(comic_books)\n    science_books_arrangements = factorial(science_books)\n    \n    # Arrange the kinds themselves\n    kinds_arrangements = factorial(3)\n    \n    # Total arrangements\n    total_arrangements = story_books_arrangements * comic_books_arrangements * science_books_arrangements * kinds_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let T be the variable for the additional tax rate above the base rate of 6%\n    T = symbols('T')\n    \n    # First 50,000 taxed at 6%\n    base_tax = 50_000 * 0.06\n    \n    # Remaining amount taxed at 6% + T%\n    additional_tax = (120_000 - 50_000) * (0.06 + T / 100)\n    \n    # Total tax paid is 10,000\n    total_tax_paid = Eq(base_tax + additional_tax, 10_000)\n    \n    # Solve for T\n    result = solve(total_tax_paid, T)\n    \n    return result[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import factorial as fact\n\n    # There are 5 identical ice-creams and we need to distribute them to 3 friends.\n    # Since each friend should get at least 1 ice-cream, we give each one ice-cream and then\n    # we have 2 ice-creams left to distribute freely among the 3 friends.\n    # This is a problem of distributing n identical items into r distinct boxes\n    # which can be solved using combinations with repetition: C(n + r - 1, r - 1)\n    \n    # Here, n is the remaining ice-creams (5 - 3 = 2) and r is the number of friends (3).\n    # So, we are distributing 2 identical ice-creams into 3 distinct boxes.\n    n = 2\n    r = 3\n\n    # Ways to distribute is given by the combination with repetition formula:\n    ways = fact(n + r - 1) // (fact(r - 1) * fact(n))\n\n    return ways\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculate the sum spent from January to March (3 months)\n    jan_to_mar = 450 * 3\n    \n    # Calculate the sum spent from April to July (4 months)\n    apr_to_jul = 350 * 4\n    \n    # The sum from August to October is given\n    aug_to_oct = 1250\n    \n    # Calculate the sum spent from November to December (2 months)\n    nov_to_dec = 400 * 2\n    \n    # Calculate the total sum spent over the whole year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate the average per month for the whole year (12 months)\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5/(3*x + 2)) + (2/(1.5*x + 1)), (4.5/(5 - 6*x)) - (3/(2.5 - 3*x)))\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # let the distance to the library be d meters\n    # time to walk to the library is d/walking_speed\n    # time to cycle back from the library is d/cycling_speed\n\n    # total distance covered is 2d (to and fro)\n    # total time taken is d/walking_speed + d/cycling_speed\n    # average speed is total distance divided by total time\n\n    d = 1  # Let's assume a unit distance\n\n    total_time = d / walking_speed + d / cycling_speed\n    total_distance = 2 * d\n\n    avg_speed = total_distance / total_time\n\n    return avg_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the cost of one serving of ice cream.\n    # Sophie bought 3 servings of ice cream and had $0.30 left, we have:\n    # 3x + 0.30 = total_money_given\n    # Sophie needed $2.30 more to buy 5 servings of ice cream, we have:\n    # 5x = total_money_given + 2.30\n    # Replace total_money_given from the first equation into the second, we get:\n    # 5x = 3x + 0.30 + 2.30\n    # Solve for x:\n    x = (0.30 + 2.30) / 2\n    \n    # Now find the total_money_given using the price of one serving (x) from the first equation:\n    total_money_given = 3 * x + 0.30\n    \n    return total_money_given\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for m in range(10):\n        total_sweets = int(f'127{m}')\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    proportion_eq = Eq(9 / x, y / 2)\n    x_value = 3\n    y_value = solve(proportion_eq.subs(x, x_value), y)\n\n    return \"inverse\", y_value[0]\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    all_permutations = [''.join(p) for p in permutations(digits)]\n    odd_numbers = [int(p) for p in all_permutations if int(p) % 2 != 0]\n\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    dividend = 391\n    divisor = 17\n    result = dividend // divisor\n    return result\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # You need to take out at most 7 green + 1 blue to guarantee you have 2 of the same color\n    # OR you can take out at most 8 blue + 1 green to guarantee you have 2 of the same color\n    # Whichever is less is the answer, but since 7 green is less than 8 blue, we take the first scenario\n    return 7 + 1\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    answer = numerator / denominator\n    return round(answer, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let x be the number we start with\n    x = symbols('x')\n    # Applying the operations step by step:\n    # Add 3\n    x = x + 3\n    # Multiply by 2\n    x = x * 2\n    # Take away 2\n    x = x - 2\n    # Add 10\n    x = x + 10\n    # Divide by 2\n    x = x / 2\n    # Take away the number we started with\n    ans = x - (x * 2 - (3 * 2 + 10) - 2) / 2\n    \n    # The flow simplifies to a fixed number\n    return ans\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes_list = list(primerange(51, 100))  # 50 is not prime, so start from 51\n    return len(primes_list)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    # count numbers with exactly two 7's\n    for digit in range(1, 10): \n        if digit != 7:\n            count += 2 # the two possible placements of the non-seven digit\n            \n    # count numbers with three 7's\n    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # The total cost of science fictions\n    total_science_fictions = 20 * 4\n    \n    # The total cost of comic books\n    total_comic_books = 10 * 5\n    \n    # The total cost of novels\n    total_novels = 20 * 6\n    \n    # The total cost of all books\n    total_cost = total_science_fictions + total_comic_books + total_novels\n    \n    # The total number of books\n    total_books = 20 + 10 + 20\n    \n    # The average cost per book\n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    equation1 = Eq(jack, 5 * kyle)\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # To ensure getting 1 yellow shirt, Annabella must consider the worst case.\n    # The worst case is taking out all the shirts of other colors first.\n    orange_shirts = 6\n    pink_shirts = 4\n    brown_shirts = 12\n\n    # Now, the next shirt she takes out must be a yellow one.\n    worst_case_shirts = orange_shirts + pink_shirts + brown_shirts + 1\n\n    return worst_case_shirts\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let F be the initial number of Felicia's bracelets\n    # Let J be the initial number of Janice's bracelets, which is 96\n    # Janice buys 2/5 of the bracelets Felicia sold, which is (2/5) * (3/5) * F\n    # After selling and buying, Felicia has F - (3/5) * F = (2/5) * F bracelets left\n    # After buying, Janice has J + (2/5) * (3/5) * F bracelets\n    # The final ratio of Felicia's bracelets to Janice's bracelets is 5:7\n    # So, (2/5) * F / (J + (2/5) * (3/5) * F) = 5/7\n    # We know J is 96, so we can solve for F and then calculate the number of bracelets Janice bought\n\n    J = 96\n    # Calculating the number of bracelets bought using algebra\n    # (2/5) * F / (96 + (2/5) * (3/5) * F) = 5/7\n    # (2/5) * F * 7 = 5 * (96 + (2/5) * (3/5) * F)\n    # 14/5 * F = 5 * 96 + 6/5 * F\n    # (14/5 - 6/5) * F = 5 * 96\n    # (8/5) * F = 480\n    # F = 480 * (5/8)\n    # F = 60 * 5 = 300\n    F = 480 * (5/8)\n\n    # Number of bracelets Janice bought\n    bracelets_bought = (2/5) * (3/5) * F\n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.9  # cost of the multipack in pounds\n    individual_cost = 0.35  # cost per individual packet in pounds\n    total_individual_cost = individual_cost * 15  # cost for 15 individual packets\n\n    savings = total_individual_cost - multipack_cost  # savings when buying a multipack\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    years = 11\n\n    total_amount = principal * (1 + interest_rate * years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    sum_of_terms = 560\n    common_difference = 2\n\n    # The sum of an arithmetic progression is given by: S_n = n/2 * (2a + (n - 1)d)\n    # Where S_n is the sum of n terms, a is the first term, and d is the common difference\n    # Solving for the first term a gives us: a = (S_n/n - (n - 1)d/2) / 2\n\n    # We can rearrange the above formula to solve for the first term (smallest term) 'a'\n    a = (sum_of_terms / n - (n - 1) * common_difference / 2) / 2\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    well_depth = 8\n    daytime_climb = 3\n    nighttime_slip = 2\n\n    net_distance_per_day = daytime_climb - nighttime_slip\n    distance_climbed = 0\n    day = 0\n    \n    while distance_climbed < well_depth:\n        day += 1\n        distance_climbed += daytime_climb\n        if distance_climbed >= well_depth:\n            break\n        distance_climbed -= nighttime_slip\n    \n    return day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Number of pages read each day for the first four days\n    first_four_days = 25 * 4\n    # Number of pages read each day for the following six days\n    following_six_days = 40 * 6\n    # Number of pages read in total in the last five days\n    last_five_days = 80\n    \n    # Total number of days\n    total_days = 4 + 6 + 5\n    # Total number of pages read\n    total_pages = first_four_days + following_six_days + last_five_days\n    \n    # Calculate the average pages read per day\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    brother_original = 12\n    penny_after_giving = 14\n    difference = 10\n\n    brother_final = penny_after_giving - difference\n    toys_given = brother_original - brother_final\n\n    return toys_given\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Multiplication out of the multiplication table usually refers to larger numbers.\n    # However, no numbers are specified in the question, so I'm assuming it's a simple\n    # multiplication question. Here is a random example using larger numbers:\n    number1 = 123\n    number2 = 456\n    ans = number1 * number2\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if reversed_age + 1 == age // 2:  # Check if condition is met\n            return age\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 60\n    tickets_remaining = 28\n    percent_remaining = 100 - percent_sold\n    \n    total_tickets = tickets_remaining * 100 / percent_remaining\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Assuming the worst case scenario where Tom draws the maximum number of cards\n    # without getting 4 cards of the same suit. Since there are 4 suits, the maximum\n    # number of cards he can draw while still getting only 3 cards from each suit is\n    # 3 cards/suit * 4 suits.\n    max_cards_without_four_of_a_kind = 3 * 4\n    \n    # To be sure he has 4 cards of the same suit, he must draw one more card.\n    cards_to_draw = max_cards_without_four_of_a_kind + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol for the amount they each spent\n    spent = symbols('spent')\n\n    # Equations based on the problem statement\n    hayden_left = 1420 - spent\n    mitchell_left = 505 - spent\n    equation = Eq(hayden_left, 4 * mitchell_left)\n\n    # Solve for the amount spent\n    amount_spent = solve(equation, spent)\n    \n    # Return the spent amount in dollars\n    return amount_spent[0]\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Correct calculation for the amount of $2 notes\n    two_dollar_notes = 5 * 2  # $10\n    \n    # Correct calculation for the amount of 50-cent coins in dollars\n    fifty_cent_coins = 7 * 0.50  # $3.50\n    \n    # Correct total amount before purchasing the file\n    total_amount = two_dollar_notes + fifty_cent_coins\n    \n    # Correct amount spent on the file\n    file_cost = 11.95\n    \n    # Correct calculation for the amount left after the purchase\n    amount_left = total_amount - file_cost\n\n    return round(amount_left, 2)\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    distance_climbed = 0\n    day = 0\n\n    while distance_climbed < 11:\n        day += 1\n        distance_climbed += 3\n        if distance_climbed >= 11:\n            break\n        distance_climbed -= 1\n\n    return day\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let total_people be the total number of people at the party\n    total_people = symbols('total_people')\n    \n    # Given that 3/7 of the people were adults, so the children would be 4/7 of the people\n    children = (4/7) * total_people\n    \n    # Given that 3/8 of the children were boys, so the girls would be 5/8 of the children\n    # And it is known that there were 45 girls\n    equation = Eq((5/8) * children, 45)\n    \n    # Solve the equation to find the total number of people\n    solutions = solve(equation, total_people)\n    \n    # Return the total number of people at the party\n    return solutions[0]\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_pupils = 18\n    pupils_to_seat = 3\n\n    ans = permutations(total_pupils, pupils_to_seat)\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginko_trees = 30\n    willow_trees_between_each = 2\n    total_willow_trees = (ginko_trees - 1) * willow_trees_between_each\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    ship_speed = 28\n    current_speed = 3\n    distance_upstream = 150\n\n    speed_upstream = ship_speed - current_speed\n    time_upstream = distance_upstream / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's money\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    # Equations based on the given information\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    # Total amount\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Equations based on the given information:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Add all these equations\n    # 2A + 2B + 2C = 102 + 97 + 93\n    A_plus_B_plus_C = (102 + 97 + 93) // 2\n\n    return A_plus_B_plus_C\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = ramen_cost * 6\n    \n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    # Calculate the total cost of the cheese\n    cost_of_cheese = (500 / 1000) * 7.48  # Price per 500g\n\n    # Calculate the total cost of the apples\n    cost_of_apples = 8 * 0.12  # 8 apples at 12p each, converted to pounds\n\n    # Calculate the total cost of the yoghurts\n    cost_of_yoghurts = 2 * 0.46  # 2 yoghurts at 46p each, converted to pounds\n\n    # Calculate the total cost of all items\n    total_cost = cost_of_cheese + cost_of_apples + cost_of_yoghurts\n\n    # Calculate the change from a Â£10 note\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the number of aircrafts Andy sells per hour\n    a = symbols('a')\n\n    # Zack sells 150 aircrafts per hour\n    z = 150\n\n    # Together, they sell all the aircrafts in 6 hours\n    total_time = 6\n    total_aircrafts = 1200\n\n    # Equation representing work done together\n    equation = Eq(a * total_time + z * total_time, total_aircrafts)\n\n    # Solve for 'a'\n    andy_rate = solve(equation, a)\n\n    # Calculate time it takes for Andy to sell all the aircrafts by himself\n    andy_time = total_aircrafts / andy_rate[0]\n\n    return andy_time\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan_amount + bilal_amount + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    total_diff = 80\n    total_people = 0\n    # Start with the assumption that the difference between the students and teachers in the square array\n    # corresponds to the two outermost student layers.\n    # t for teachers, s for students\n    t = 1\n    while True:\n        # Each layer increases the number of teachers by (t+2)*(t+2) - t*t, which is essentially adding\n        # a border of width 1 teacher around the existing square of teachers.\n        s = t + 2  # Student layer is 1 thicker on each side than the teacher layer\n        # Calculate students and teachers based on layer\n        students = s * s\n        teachers = t * t\n        # If the difference between students and teachers matches, break the loop\n        if students - teachers == total_diff:\n            total_people = students + teachers\n            break\n        t += 2  # Increase the layer of teachers' square\n    return total_people\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    saved_daily = 1\n    days_in_week = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_daily * days_in_week\n    final_amount = original_amount + total_saved - lent_to_brother - spent_on_snacks\n\n    return final_amount\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller number and y be the bigger number\n    x, y = symbols('x y')\n\n    # Given that the sum of two numbers is 528\n    equation1 = Eq(x + y, 528)\n\n    # The bigger number is three times the smaller number\n    equation2 = Eq(y, 3 * x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the solution for the bigger number y\n    return solutions[y]\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    cube_factors = []\n    factors = factorint(44000)\n    for prime, exp in factors.items():\n        # Only add primes that allow the exponent to be a multiple of 3\n        if exp % 3 == 0:\n            cube_factors.extend([prime] * exp)\n    q = 1\n    for factor in cube_factors:\n        q *= factor\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    length, width = symbols('length width')\n    equation1 = Eq(length, 2 * width)\n    equation2 = Eq(2 * length + 2 * width, 72)\n\n    solutions = solve((equation1, equation2), (length, width))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    repaid_mum = 10.50\n    remaining_money = total_money - repaid_mum\n    spent_on_magazines = remaining_money / 2\n    left_money = remaining_money - spent_on_magazines\n\n    return left_money\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # The amount of money that Steve, Mark, and Ryan originally had\n    steve, mark, ryan = symbols('steve mark ryan')\n    \n    # Amount of money each person will have left when they pay\n    cost = symbols('cost')  # The cost of the meal\n\n    # Equations based on the problem statement\n    eq1 = Eq(steve, mark + 40)  # Steve had ï¼40 more than Mark\n\n    # Ratios when Steve pays\n    eq2 = Eq((steve - cost) / (mark - 0) / (ryan - 0), 3 / 8 / 9)\n    \n    # Ratios when Ryan pays\n    eq3 = Eq((steve - 0) / (mark - 0) / (ryan - cost), 5 / 4 / 1)\n    \n    # Ratios when Mark pays\n    eq4 = Eq((steve - 0) / (mark - cost) / (ryan - 0), 10 / 1 / 9)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (steve, mark, ryan, cost))\n\n    return solutions[cost]\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n_diff = 15 - 3\n    \n    common_difference = (fifteenth_term - third_term) / n_diff\n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 50, A)\n    equation2 = Eq(A - 25, 5 * (B + 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coeff_friction = 0.4  # coefficient of static friction\n    force_applied = 250  # applied force in N\n\n    # Force of static friction formula: f_friction = coeff_friction * normal_force\n    # Normal force for horizontal surface is the weight: normal_force = mass * g (acceleration of gravity)\n    g = 9.81  # acceleration due to gravity in m/s^2\n    normal_force = mass * g\n\n    # Calculate the maximum static friction force\n    max_friction_force = coeff_friction * normal_force\n    \n    # Force of static friction cannot exceed the maximum static friction force but will match the applied force if lower\n    force_friction = min(force_applied, max_friction_force)\n\n    return force_friction\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    total_buttons = 24\n    for james_buttons in range(total_buttons):\n        nina_buttons = total_buttons - james_buttons\n        if nina_buttons - 6 == james_buttons + 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_hour = (total_parts / total_workers) / total_hours\n\n    return parts_per_worker_hour\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the cube number as 'n^3' and the square number as 'm^2'.\n    m, n = symbols('m n', integer=True)\n\n    # Set up the equation m^2 - 1 = n^3\n    equation = Eq(m**2 - 1, n**3)\n\n    # Now, we want the smallest 'm' and 'n' that satisfy this equation.\n    # Use sympy's diophantine solver which finds integer solutions.\n    # Looking for first positive solution since we are interested in the smallest square and cube numbers.\n    solutions = solve(equation, (m, n))\n\n    # The first solution that satisfies the condition is our answer\n    ans = solutions[0][0]**2\n\n    return ans\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day = 0\n    height = 0\n    while True:\n        day += 1\n        height += 5\n        if height >= 16:\n            break\n        height -= 3\n    return day\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[bentley]\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The conditions can be expressed as a series of congruences:\n    # x â¡ 3 (mod 4)\n    # x â¡ 3 (mod 5)\n    # x â¡ 3 (mod 7)\n    # x â¡ 0 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    \n    # Use the Chinese Remainder Theorem to find a solution\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n    ans = decimal if decimal > fraction else fraction\n    return ans\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    from fractions import Fraction\n\n    term1 = Fraction(3)\n    term2 = Fraction(4, 5)\n    term3 = Fraction(10, 9)  # 1 1/9 is 10/9 in improper fraction\n    term4 = Fraction(11, 2)  # 5 1/2 is 11/2 in improper fraction\n    term5 = Fraction(3, 11)\n\n    ans = term1 * term2 * term3 * term4 * term5\n\n    return ans\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # From the provided text, we need to write the equation relating bags used (x) and tax charged (y).\n    # Since there is no explicit information about how x and y are related, we assume it's a linear relationship.\n    # An equation of a line can be formulated as y = mx + b, where m is the slope and b is the y-intercept.\n    # Without specific information, we can only assume that both m (slope) and b (y-intercept) are constants and should be determined.\n    # Therefore, we formulate a generic linear equation with placeholders for m and b:\n    m = 'm'  # Placeholder for the slope, to be determined with more information\n    b = 'b'  # Placeholder for the y-intercept, to be determined with more information\n    # The equation of the line is then y = mx + b\n    # We return this equation as a string since we cannot give numeric values without more context\n    return f\"y = {m}*x + {b}\"\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    total_payment = 275\n    \n    # Calculate the maximum days Steven could have rented the car for a short term\n    max_short_term_days = (total_payment - flat_fee) // daily_fee_short\n    \n    if max_short_term_days <= 5:\n        return max_short_term_days\n    else:\n        # Calculate the total number of days with the additional days fee\n        additional_payment = total_payment - (flat_fee + 5 * daily_fee_short)\n        additional_days = additional_payment // daily_fee_long\n        \n        return 5 + additional_days\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270  # Starting height in meters\n    rebound_ratio = 0.1   # Ratio of rebound to the previous height\n\n    total_distance = initial_height  # The first drop\n\n    while initial_height * rebound_ratio > 0:\n        # Each time the ball hits the ground, it bounces up and then comes back down.\n        total_distance += 2 * (initial_height * rebound_ratio)  # Up and down distance for each bounce\n        initial_height *= rebound_ratio  # Next bounce height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    for sheets in range(1, 100):  # Arbitrary upper limit\n        pages = sheets * 2  # Each sheet becomes 2 pages after folding\n        for first_page in range(1, pages):  # Start checking from page 1\n            second_page = first_page + 1\n            third_page = pages - second_page\n            fourth_page = third_page + 1\n            if first_page + second_page + third_page + fourth_page == 58:\n                return sheets  # Return the number of sheets when the sum is 58\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # speed of buck in metres per minute\n    elephant_speed = 250  # speed of elephant in metres per minute\n    race_distance = 3000  # race distance in metres\n\n    # Time taken for buck to finish the race\n    buck_time = race_distance / buck_speed\n    # Time taken for elephant to finish the race\n    elephant_time = race_distance / elephant_speed\n\n    # The time by which buck finishes earlier than the elephant\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    percentage = 15\n    total_apples = 200\n    bad_apples = (percentage / 100) * total_apples\n    return int(bad_apples)\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    green, yellow = symbols('green yellow')\n    \n    # Sam had an equal number of green and yellow toy cars initially.\n    equation1 = Eq(green, yellow)\n    \n    # After giving away some toy cars, Sam had thrice as many yellow as green toy cars.\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n    \n    solutions = solve((equation1, equation2), (green, yellow))\n    \n    # Number of green toy cars Sam had in the end\n    green_cars_end = solutions[green] - 60\n    \n    return green_cars_end\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    # Calculate the number of terms in the sequence 4, 8, ..., 400\n    num_terms_forward = ((last_term - first_term) // difference) + 1\n    # Since the sequence 396, ..., 12, 8, 4 is the reverse of the sequence 4, 8, ..., 396\n    # with the same number of terms, We don't need to recalculate it.\n    # The total sum is simply twice the sum of one of the sequences minus the last term that is not repeated\n    # which is 400\n    sum_forward = (num_terms_forward / 2) * (first_term + last_term)\n    total_sum = 2 * sum_forward - last_term\n    return int(total_sum)\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    sum_of_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # cost of 12 pencils\n    cost_12_pencils = 1.80\n    # cost of 1 pencil\n    cost_1_pencil = cost_12_pencils / 12\n    # the ratio of the cost of a pen to the cost of a pencil is 7 : 3\n    # so, cost of 1 pen is\n    cost_1_pen = (7 / 3) * cost_1_pencil\n    # cost of 5 pens is\n    cost_5_pens = 5 * cost_1_pen\n    \n    return cost_5_pens\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for one drink (coffee, milk)\n    drinks = 2\n    # Number of choices for one food item (hamburger, burrito, bagel)\n    food_items = 3\n    # Using the principle of multiplication to find the total number of combinations\n    total_combinations = drinks * food_items\n    return total_combinations\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import timedelta, datetime\n    \n    # Given values\n    simon_speed = 80  # km/h\n    wife_speed = 60  # km/h\n    distance_apart = 15  # km\n    \n    # Calculate the time difference needed to cover the distance between them\n    relative_speed = simon_speed - wife_speed  # km/h\n    time_to_cover_distance = distance_apart / relative_speed  # hours\n    \n    # Convert hours to minutes for the timedelta\n    time_to_cover_distance_in_minutes = time_to_cover_distance * 60  # minutes\n    \n    # Time when they both started\n    start_time = datetime.strptime(\"18:10\", \"%H:%M\")\n    \n    # Calculate the time when Simon overtakes his wife\n    overtaking_time = start_time + timedelta(minutes=time_to_cover_distance_in_minutes)\n    \n    return overtaking_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    lockers = [True] * 100  # Start with all lockers unlocked (True)\n\n    # Lock all the lockers that are multiples of 3\n    for i in range(2, 100, 3):\n        lockers[i] = not lockers[i]\n\n    # Toggle the lock state for lockers that are multiples of 5\n    for i in range(4, 100, 5):\n        lockers[i] = not lockers[i]\n\n    # Count the number of unlocked lockers\n    unlocked_lockers = sum(lockers)\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Shortest period for crossing the river strategy\n    # Jason and Chi Yew cross together: 5 minutes\n    # Any of them comes back: 5 minutes, total 10 minutes\n    # Michael and Wei Jie cross together: 9 minutes (since Wei Jie takes longer, they will be limited by him), total 19 minutes\n    # Jason or Chi Yew goes back: 5 minutes, total 24 minutes\n    # Jason and Chi Yew cross again: 5 minutes, total 29 minutes\n    \n    # Hence, the shortest period they will take to cross the river is not 20 minutes but 29 minutes\n    return 29\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # Total length of road in meters\n    total_days = 5  # Total days to pave the road\n\n    meters_per_day = total_length / total_days  # Meters paved per day\n\n    return meters_per_day\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Function to calculate the factorial\n    def factorial(n):\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n    # Function to calculate combinations (n choose k)\n    def nCr(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Calculate the different ways to reach the 5th step\n    # which is 1 way to the first step and then 2 ways for each of the next two steps\n    ways_to_5th = 1 * nCr(3, 1)\n\n    # Calculate the different ways to go from 5th to 10th step\n    # For this, Nelson has 5 more steps. He has to take either 3 single steps\n    # and 1 double step or 1 single step and 2 double steps\n    ways_from_5th_to_10th = nCr(4, 1) + nCr(3, 2)\n\n    # Multiply the ways to get to the 5th step and the ways after that\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(88 / A, 22)\n    \n    A_value = solve(equation, A)[0]\n    correct_answer = 98 / A_value\n    \n    return A_value, correct_answer\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    participants_per_country = 9\n    num_countries = 18\n\n    # To ensure that at least 9 people come from the same country,\n    # we use the Pigeonhole Principle, which states that if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n    # Here, each country is a container and participants are items.\n\n    min_participants = (participants_per_country - 1) * num_countries + 1\n\n    return min_participants\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost_for_twelve = cost_per_calculator * 12\n    return total_cost_for_twelve\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    greatest_possible_amount = rounded_amount + 4\n    return greatest_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed (laps per minute)\n    lucas_speed = 5 / 6\n    # Miller's speed (laps per minute)\n    miller_speed = 5 / 10\n\n    # Relative speed of lucas with respect to miller (laps per minute)\n    relative_speed = lucas_speed - miller_speed\n\n    # Since Lucas overtakes Miller every time Lucas completes a full lap more than Miller,\n    # the time taken to overtake is the time for Lucas to complete one full lap more at the\n    # relative speed.\n\n    # Time taken for the first overtaking (in minutes)\n    # Since overtaking happens when Lucas completes one extra lap compared to Miller\n    time_to_overtake = 1 / relative_speed\n\n    return time_to_overtake\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    remainder = 5217 % 13\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2.5\n    minutes_per_hour = 60\n    ans = hours * minutes_per_hour\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Sum of the first four terms given: 21 + 22 + 23 + 24 = 90\n    # Sum of fifty three consecutive numbers is equal to 2014\n\n    # The sum of an arithmetic sequence can be found by the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n\n    n = 53\n    total_sum = 2014\n    \n    # We can find the first term (a1) of the sequence using the formula for the sum of an arithmetic sequence:\n    # 2014 = 53/2 * (a1 + a1 + 52)\n    # Simplify to find a1:\n    # 2014 = 53 * a1 + 53 * 26\n    # 2014 - (53*26) = 53 * a1\n    # Calculate a1:\n    a1 = (total_sum - (n * (n - 1) // 2)) // n\n    \n    # Then we can calculate the last term of the sequence since they are consecutive numbers\n    # last_term = first_term + (n - 1)\n    last_term = a1 + (n - 1)\n\n    return last_term\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total = symbols('total')\n    children = (3/5) * total\n    remaining = total - children\n    men = (1/4) * remaining\n    \n    equation = Eq(children - men, 120)\n    \n    solution = solve(equation, total)\n    return solution[0]\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    # Equations from the number puzzle:\n    #   A  \n    # + A\n    # ---\n    #  14 (Since A + A = 14, we can then say 2A = 14)\n    eq = Eq(2 * A, 14)\n\n    sol = solve(eq, A)\n    return sol[0]\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    tim_age_now = 8\n    mother_age_future = 54\n\n    # Let x represent the mother's current age\n    mother_age_now = symbols('mother_age_now')\n\n    # When Tim is as old as his mother is now, the difference in age remains the same\n    # That means Tim's age will be x and mother's age will be 54\n    # So the difference in age is x - 8\n    # Therefore, when Tim's age is x, mother's age will be x + (x - 8)\n\n    equation = Eq(mother_age_future, mother_age_now + (mother_age_now - tim_age_now))\n\n    # Solve the equation\n    solution = solve(equation, mother_age_now)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # orange string length in meters\n    orange_length_cm = orange_length_m * 100  # convert orange string length to centimeters\n\n    purple_length_cm = orange_length_cm / 9.2  # calculate the purple string length in centimeters\n    green_length_cm = purple_length_cm + 24.9  # calculate green string length in centimeters\n\n    green_length_m = green_length_cm / 100  # convert green string length to meters\n    return green_length_m\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate_cents = 80  # Base rate in cents for up to 15 minutes\n    additional_rate_cents = 5  # Additional rate per minute in cents\n    total_cost_cents = 140  # Total cost in cents\n\n    # First 15 minutes cost\n    cost_first_15 = base_rate_cents\n\n    if total_cost_cents > cost_first_15:\n        # Extra cost beyond the first 15 minutes\n        extra_cost = total_cost_cents - cost_first_15\n        extra_minutes = extra_cost / additional_rate_cents\n        # Total duration of the call\n        total_minutes = 15 + extra_minutes\n    else:\n        # If the cost is equal or less than base rate, it's 15 minutes or less\n        total_minutes = 15\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n    \n    return apple_juice_litres\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n    combined_rate = ivy_rate + kevin_rate\n    work_done_in_half_time = combined_rate * (18 / 2)\n    remaining_work = 1 - work_done_in_half_time\n    time_for_ivy_to_finish = remaining_work / ivy_rate\n    kevin_days_off = 18 - time_for_ivy_to_finish\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two pieces of rope\n    shorter_piece, longer_piece = symbols('shorter_piece longer_piece')\n\n    # Equation 1: The sum of both pieces is equal to the total length of the rope\n    equation1 = Eq(shorter_piece + longer_piece, 49.5)\n\n    # Equation 2: The longer piece is 5 times the shorter piece\n    equation2 = Eq(longer_piece, 5 * shorter_piece)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shorter_piece, longer_piece))\n\n    # Round the solution for the longer piece to 1 decimal place\n    longer_piece_length = round(solutions[longer_piece], 1)\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    \n    total_days = 3\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * total_days\n    \n    return total_money\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    day_distance = 4\n    night_distance = 1\n    effective_distance = day_distance - night_distance\n\n    # Calculate days it takes without the final climb\n    days = (total_distance - day_distance) // effective_distance\n    \n    # Include the final day of climbing out\n    if (total_distance - day_distance) % effective_distance > 0:\n        days += 1\n    days += 1\n\n    return days\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    pocket_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 0:  # spends money on even days\n            pocket_money -= 8\n        else:  # deposits money on odd days\n            pocket_money += 5\n    return pocket_money\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let the total number of pupils normally at school be x.\n    # Then, 20% of x are in Year 7: 0.20 * x\n    # After the Year 7 girls go for sports, 10% of the pupils left are in Year 7: 0.10 * 400\n    # The number of Year 7 pupils that went for sports is the difference: 0.20 * x - 0.10 * 400\n    # The new total of pupils left is 400, which is the old total minus the Year 7 girls who left: x - (0.20 * x - 0.10 * 400)\n    \n    # So we have the equation:\n    # x - (0.20 * x - 0.10 * 400) = 400\n    # x - 0.20 * x + 40 = 400\n    # 0.80 * x = 360\n    # x = 360 / 0.80\n    x = 360 / 0.80\n    return int(x)\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    ans = number % 7\n    return ans\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for Tim to complete writing the book by himself\n    t = symbols('t')\n    # Nancy can complete 1/6 of the book per day, Tim can complete 1/t of the book per day\n    # Together, they complete 1/4 of the book per day\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve for t\n    tim_days = solve(equation, t)\n\n    return tim_days[0]\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up - slide_down\n    jumps_per_cycle = 3\n\n    # The squirrel makes progress of 1 meter for every 3 jumps until it reaches or surpasse the height of the tree\n    cycles_to_reach_almost_top = (total_height - jump_up) // effective_jump\n\n    # After the last cycle, the squirrel jumps up by 3 meters one last time to reach the top\n    jumps_to_reach_top = cycles_to_reach_almost_top * jumps_per_cycle + 1\n\n    return jumps_to_reach_top\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    num = 1  # Initialization of the numerator for the first term\n    den_start = 1  # Initialization of the starting denominator\n    ans = 0  # Initialize the sum to zero\n    \n    # Loop to calculate the sum of the series\n    for i in range(6):  # There are 6 fractions before the last term \n        den_end = den_start + (3 + 2 * i)  # The ending denominator for the current term\n        ans += num / (den_start * den_end)  # Add the current term to the sum\n        num += 1  # Increase the numerator by 1 for the next term\n        den_start = den_end  # The next term's starting denominator is the current term's ending denominator\n\n    ans += 1 / den_start  # Add the last term separately\n\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeroes(n):\n        count = 0\n        while n % 10 == 0:\n            count += 1\n            n //= 10\n        return count\n\n    num_zeros = count_trailing_zeroes(factorial(999)) - count_trailing_zeroes(factorial(300))\n    return num_zeros\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a, b = 10, 9\n    ans = 4*a + 0.6*b\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # She had 40 pounds left after spending 3/5 of what was left.\n    # So the 40 pounds constitute the remaining 2/5 of the money after buying the dress.\n    money_after_dress = (40 * 5) / 2  # Calculate the whole amount after dress purchase\n\n    # If she spent 1/3 on the dress, then she had 3/3 before buying the dress.\n    # The money after dress purchase represents 2/3 of the original amount.\n    original_money = (money_after_dress * 3) / 2  # Calculate the whole original amount\n    \n    return original_money\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    return int(num_terms)\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Since 60 students form the outermost layer of the square, we have a total perimeter of 60*4 students.\n    perimeter = 60 * 4\n\n    # Each side of the square has perimeter/4 students.\n    side_length = perimeter // 4\n\n    # The total number of students can be calculated by adding up the number of students in each layer,\n    # starting from the outermost layer and moving inwards.\n    # For a square with side length n, the next inner square will have side length n-2, and so on.\n    total_students = 0\n    while side_length > 0:\n        total_students += side_length ** 2\n        side_length -= 2\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve, N\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # equations based on the problem statement\n    equation1 = Eq(cars, bikes + bikes / 3)\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars + bikes + lorries, N(\"2k\", integer=True))\n\n    # finding solutions subject to given constraints\n    vehicle_numbers = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n    # filtering solutions to meet specific constraints from the problem\n    solutions = [sol for sol in vehicle_numbers if sol[0] > 0 and sol[1] > 0 and sol[2] > 0 and sum(sol) < 100 and sum(sol) % 2 == 0]\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A_initial, B_initial = symbols('A_initial B_initial')\n\n    # Given conditions\n    K = symbols('K')  # K is the number of buttons Ken added to box A\n    condition1 = Eq(A_initial, B_initial + 64)  # There were 64 more buttons in box A than box B at first\n    condition2 = Eq(B_initial - 2*K, B_initial - 28)  # Box B became 28 fewer than before\n    condition3 = Eq((A_initial + K)/(B_initial - 2*K), 4)  # The final ratio condition\n\n    # Solve the system of equations\n    solutions = solve((condition1, condition2, condition3), (A_initial, B_initial, K))\n\n    # Extract the solution for the initial number of buttons in box A\n    # We assume that the result will be positive, as we cannot have a negative number of buttons\n    A_initial_solution = solutions[A_initial]\n\n    return A_initial_solution\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    red_tiles = 0\n    green_tiles = 0\n    layer = 1\n    \n    while total_tiles > 0:\n        layer_tiles = (layer * 2 - 1)**2\n        if total_tiles < layer_tiles:\n            layer_tiles = total_tiles\n        \n        if layer % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        \n        total_tiles -= layer_tiles\n        layer += 1\n    \n    if red_tiles > green_tiles:\n        ans = ('red', red_tiles - green_tiles)\n    else:\n        ans = ('green', green_tiles - red_tiles)\n    \n    return ans\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval_length = 10\n\n    # Number of intervals is one less than the number of bins\n    num_bins = (boulevard_length // interval_length) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n\n    total_flour_needed = flour_per_cake * num_cakes\n\n    return total_flour_needed\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_won = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let x be the number of wins, so (total_rounds - x) will be the number of losses.\n    # Formulate the equation based on the card gains and losses:\n    # wins * cards_per_win + losses * cards_per_loss = total_cards_won\n    # x * 4 + (12 - x) * (-2) = 24\n    # Solve for x (number of wins)\n    x = (total_cards_won - total_rounds * cards_per_loss) / (cards_per_win - cards_per_loss)\n\n    # Calculate the number of losses\n    losses = total_rounds - x\n\n    return int(losses)\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        num_str = '26' + '2011' * n + '7'\n        num = int(num_str)\n        if num % 33 == 0:\n            return n\n        else:\n            n += 1\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    ways = 0\n    for x1 in range(8):\n        for x2 in range(8 - x1):\n            x3 = 7 - x1 - x2\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z, rounds = 20, 19, 18, 0\n    while min(x, y, z) > 0:\n        max_coins = max(x, y, z)\n        if x == max_coins:\n            x -= 2\n            y += 1\n            z += 1\n        elif y == max_coins:\n            y -= 2\n            x += 1\n            z += 1\n        else:\n            z -= 2\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    total_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    current_collection = total_cards - duplicates + new_cards\n\n    return current_collection\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # Bob takes 3 minutes to cut a log into 4 pieces. This means he makes 3 cuts.\n    cuts_for_4_pieces = 3\n    \n    # In general, the number of pieces is always one more than the number of cuts.\n    # To get 8 pieces, Bob needs to make 7 cuts.\n    cuts_for_8_pieces = 7\n    \n    # Therefore, it takes Bob 3 minutes to make 3 cuts.\n    # To find out the time it takes to make 7 cuts, we use the proportion:\n    # 3 minutes / 3 cuts = x minutes / 7 cuts\n    # Solving for x gives us the time needed for 7 cuts.\n    time_for_8_pieces = (3 / cuts_for_4_pieces) * cuts_for_8_pieces\n    \n    return time_for_8_pieces\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as a single unit. Now we have 7 units to arrange in a circle.\n    units = 7\n\n    # Circular permutations of n distinct objects are (n-1)!.\n    circular_permutations = factorial(units - 1)\n\n    # Amy and Judy can be arranged in 2! = 2 ways among themselves.\n    arrangements_of_amy_and_judy = factorial(2)\n\n    # Calculate the total permutations.\n    total_permutations = circular_permutations * arrangements_of_amy_and_judy\n\n    return total_permutations\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng - (6/7) * chai_seng, (1/2) * (rasidah - (3/5) * rasidah))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    sum_value = sum([1/i for i in range(1, 8)])\n    return int(sum_value)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n    greatest_common_divisor = gcd(pencils, pens)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy_start, ben_start = symbols('andy_start ben_start')\n    equation1 = Eq(andy_start, ben_start - 84)\n    \n    andy_end = andy_start + andy_start / 3\n    ben_end = ben_start + ben_start / 5\n    \n    equation2 = Eq(andy_end, ben_end / 3)\n    \n    solutions = solve((equation1, equation2), (andy_start, ben_start))\n    \n    andy_final_count = solutions[andy_start] + solutions[andy_start] / 3\n    \n    return andy_final_count\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    \n    # Using the formula for compound interest: A = P * (1 + r/n)^(nt)\n    # Since the interest is compounded yearly, n = 1 and the equation simplifies to: A = P * (1 + r)^t\n    # We need to solve for t: t = log(A/P) / log(1 + r)\n    # We can use the math library to calculate the logarithm\n    \n    from math import log\n\n    years = log(final_amount / principal_amount) / log(1 + interest_rate)\n    \n    return round(years, 2)  # Rounding to 2 decimal places\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Based on the pattern we can see that the sequence alternates between adding 1\n    # and subtracting 1 to a starting number, while also alternating signs.\n    # The sequence thus far in terms of operations performed is as follows:\n    # 18 (start) -> -16 (subtract 34) -> 19 (add 35) -> -15 (subtract 34) -> 20 (add 35)\n    # We continue this pattern to get the next number in the sequence. \n    last_positive = 20\n    next_negative = last_positive - 34  # Subtract 34 from the last positive number\n    return next_negative\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    numerator = 12\n    original_fraction = 6 / 20\n    denominator = numerator / original_fraction\n    return denominator\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbolic variables for the four distinct positive whole numbers\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # The numbers are in descending order: a > b > c > d\n    # Define equations based on the given conditions\n    eq1 = Eq(d + (a + b + c) / 3, 39) # sum of smallest number and avg of others is 39\n    eq2 = Eq(a + (b + c + d) / 3, 51) # sum of largest number and avg of others is 51\n\n    # Since the numbers are distinct and positive whole numbers, we add the inequalities\n    inequalities = (a > b, b > c, c > d, d > 0)\n\n    # We want the largest possible value of 'a', the largest number\n    # We solve the system of equations and inequalities\n    solutions = solve((eq1, eq2)+inequalities, (a, b, c, d), dict=True)\n\n    # Extract the maximum 'a' value from the solutions\n    max_a = max(solution[a] for solution in solutions)\n\n    return max_a\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total pupils passed at least one test\n    total_pass = 43\n    # Pupils passed each test\n    pass_math = 30\n    pass_science = 28\n    pass_english = 25\n\n    # Maximum pupils passed all three (Inclusion-Exclusion Principle)\n    # Instead of subtracting, add because the total already took away the overlaps\n    all_three = pass_math + pass_science + pass_english - total_pass\n\n    return all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance between the school and their home as 'd' meters.\n    d = symbols('d')\n\n    # According to the problem, Ahmad's speed is 80 m/min and his brother's speed is 50 m/min.\n\n    # When Ahmad met his brother, the total distance Ahmad traveled is d (to school) + (d - 210) (back home).\n    # The distance Ahmad's brother traveled is d - 210.\n\n    # Since they start at the same time and their meeting time is the same, their\n    # traveling times are equal. So we can set up the equation based on their speeds:\n    # Ahmad's time = Brother's time\n    # (d + (d - 210)) / 80 = (d - 210) / 50\n\n    # Create the equation based on the above relationship\n    equation = Eq((d + (d - 210)) / 80, (d - 210) / 50)\n\n    # Solve the equation for 'd'\n    sol = solve(equation, d)\n\n    # 'sol' will have one positive value which is our answer\n    distance = sol[1]\n\n    return distance\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Initialize the possible values for the two-digit numbers on hats\n    possible_values = set(range(10, 100))\n\n    # Set of numbers that are definitely not divisible by 24\n    not_divisible_by_24 = set()\n    for k in possible_values:\n        if k % 24 != 0:\n            not_divisible_by_24.add(k)\n            \n    # Set of numbers that are definitely divisible by 24\n    divisible_by_24 = possible_values - not_divisible_by_24\n\n    # We know that Tom raised his hand both times.\n    # So Tom's number must be such that even excluding his own number,\n    # there are 3 numbers that are (not) divisible by the unknown number,\n    # and there are 5 numbers that are (not) divisible by 24.\n    \n    # We don't know the unknown number, but we can iterate over all possible \n    # two-digit numbers that are potential divisors to check this constraint.\n    for unknown_divisor in range(10, 100):\n        # return the sum of the 8 numbers Tom saw.\n        for tom_number in possible_values:\n            \n            # Possible numbers Tom's friends can have, excluding Tom's number\n            friends_numbers = possible_values - {tom_number}\n            \n            # Check for numbers that are definitely divisible by the unknown number\n            divisible_by_unknown = set()\n            for k in friends_numbers:\n                if k % unknown_divisor == 0:\n                    divisible_by_unknown.add(k)\n            \n            # The rest are not divisible by the unknown number\n            not_divisible_by_unknown = friends_numbers - divisible_by_unknown\n            \n            # Check how many would raise their hand for the unknown number\n            known_status_unknown = 0\n            if len(divisible_by_unknown) == 3 or len(not_divisible_by_unknown) == 3:\n                known_status_unknown = 3\n            \n            # Check how many would raise their hand for 24\n            known_status_24 = 0\n            if len(friends_numbers & divisible_by_24) == 5 or len(friends_numbers & not_divisible_by_24) == 5:\n                known_status_24 = 5\n            \n            # If the conditions match the problem statement, return the sum of\n            # numbers on friends' hats\n            if known_status_unknown == 3 and known_status_24 == 5:\n                # Assuming Tom's number is also not divisible by 24, which allows it to be\n                # distinguished and consistent with being counted as known for both cases.\n                if tom_number in not_divisible_by_24:\n                    return sum(friends_numbers)\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    num = 8844\n    thousands_place = 8 * 1000\n    tens_place = 8 * 10\n    return thousands_place - tens_place\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pencil cases cannot be empty, we initially put one pen in each\n    # Now we have 3 pens left to distribute into 3 different pencil cases\n    # Since the pens are identical, this is similar to partitioning the number 3\n    # First, represent the ways to partition 3 as a sum of positive integers:\n    # 3, 2+1, 1+1+1 (the partitions 2+1 and 1+2 are considered the same since the pens are identical)\n    \n    # Now map each partition to the number of ways to distribute to the pencil cases:\n    # For 3: there are 3 ways (all pens to one of the pencil cases)\n    # For 2+1: there are 3 ways (choose which pencil case gets 2 pens, the other two automatically get 1)\n    # For 1+1+1, there is only 1 way (each pencil case already has 1 pen)\n    # In total, we have 3 + 3 + 1 ways\n    \n    ways = 3 + 3 + 1\n    return ways\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    from fractions import Fraction\n\n    complex_fraction_1_numerator = Fraction(1, 30) + Fraction(1, 6)\n    complex_fraction_1_denominator = Fraction(2, 25)\n    complex_fraction_1 = complex_fraction_1_numerator / complex_fraction_1_denominator\n    \n    complex_fraction_2_numerator = 2 - Fraction(2, 3)\n    complex_fraction_2_denominator = Fraction(8, 3)\n    complex_fraction_2 = complex_fraction_2_numerator / complex_fraction_2_denominator\n    \n    ans = complex_fraction_1 + complex_fraction_2\n    \n    return float(ans)\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        if (5720 + A) % 4 == 0 and (5720 + A) % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The smallest 5-digit number is 10000\n    # The largest 5-digit number is 99999\n    # We look for the largest and smallest 5-digit palindromic numbers divisible by 45\n    # Since 45 is a multiple of 9, any number divisible by 45 must be divisible by 9; any such number will have a digit sum divisible by 9\n    # We start from the largest 5-digit number and work downwards to find the largest palindromic number divisible by 45\n    for i in range(99999, 9999, -1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            largest_palindromic = i\n            break\n\n    # We start from the smallest 5-digit number and work upwards to find the smallest palindromic number divisible by 45\n    for i in range(10000, largest_palindromic):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            smallest_palindromic = i\n            break\n\n    # We calculate the difference between the largest and smallest palindromic numbers that are divisible by 45\n    difference = largest_palindromic - smallest_palindromic\n    return difference\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n\n    longest_piece_length = gcd(length_ribbon1, length_ribbon2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy import lcm\n\n    # Step 1: Finding the common supplement\n    # 5 - 1 = 4, 6 - 2 = 4, 11 - 7 = 4, so the common supplement is 4\n    common_supplement = 4\n    \n    # Step 2: Finding the LCM of all the divisors\n    divisors_lcm = lcm([5, 6, 11])\n    \n    # Step 3: Finding the unknown number of biscuits\n    # The unknown number is the least common multiple of all divisors minus the common supplement\n    unknown = divisors_lcm - common_supplement\n    \n    # Ensuring the result is less than 500 and satisfies all conditions\n    while unknown < 500:\n        if unknown % 5 == 1 and unknown % 6 == 2 and unknown % 11 == 7:\n            break\n        unknown += divisors_lcm\n\n    return unknown\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n    \n    adder = 0\n    while True:\n        if is_palindrome(40309 + adder):\n            return adder\n        adder += 1\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind_luna = 4\n    total_sheep = luna_position + sheep_behind_luna\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mean_all = symbols('mean_all')\n\n    # Equation for mean of top 3 students\n    top_3_sum = 3 * 92\n    # Equation for mean of the last 7 students in terms of the mean of all students\n    last_7_sum = 7 * (mean_all - 6)\n\n    # Equation for mean of all students\n    all_10_sum = 10 * mean_all\n\n    # Setting the sum of top 3 and last 7 students equal to the sum of all 10 students\n    equation = Eq(top_3_sum + last_7_sum, all_10_sum)\n\n    # Solving for the mean score of all 10 students\n    mean_all_solution = solve(equation, mean_all)\n\n    return mean_all_solution[0]\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        str_year = str(year)\n        if len(set(str_year)) == 4: # The year must have 4 distinct digits\n            digits = [int(d) for d in str_year]\n            if max(digits) - min(digits) == 3: # Check if the digits form a sequence\n                perms = set(permutations(digits))\n                for perm in perms:\n                    # The first digit cannot be zero in a four-digit number\n                    if perm[0] != 0:\n                        count += 1\n                break # Since consecutive numbers form a unique sequence, we stop after finding the first one.\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        remaining_bags = [x for x in bags if x != red_marbles]\n        for jaslin_bags in combinations(remaining_bags, 3):\n            george_bags = [x for x in remaining_bags if x not in jaslin_bags]\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let's denote the number of sweets Beth has originally as b.\n    # Then, Andre would have 24 - b sweets.\n    # After the teacher gives them 4 sweets each, the equations representing the situation are:\n    # Andre's sweets = (24 - b) + 4\n    # Beth's sweets = b + 4\n    # According to the problem, Andre now has 6 more sweets than Beth, so:\n    # (24 - b) + 4 = b + 4 + 6\n    # Simplifying the equation, we get:\n    # b + (24 - b) = 10\n    # 24 = b + 10\n    # So the number of sweets Beth has now, is b + 4:\n    b = 24 - 10\n    beth_sweets_now = b + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance_original = 550  # km\n    time_original = 5        # hours\n    time_new = 3             # hours\n\n    speed = distance_original / time_original\n    distance_new = speed * time_new\n\n    return distance_new\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    fraction_sold = 2 / 5\n    total_apples = remaining_apples / (1 - fraction_sold)\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    number_of_jumps = 14 # Number of jumps is one less than the number of posts\n    jump_length = 3      # Each jump is 3 inches long\n\n    total_distance = number_of_jumps * jump_length\n\n    return total_distance\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x.\n    # Since they are consecutive even numbers, the numbers will be:\n    # x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is 100, therefore:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 100\n    # 5x + 20 = 100\n    # 5x = 100 - 20\n    # 5x = 80\n    # x = 16\n    \n    x = (100 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of fruits without chocolates\n    friends = 6\n    fruits_per_friend = total_fruits // friends  # Divide equally among friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Alan and Bob together\n    rate_ab = 1 / 4\n    # Bob on his own\n    rate_b = 1 / 6\n    \n    # Alan on his own is the difference between their combined rates\n    # and Bob's rate\n    rate_a = rate_ab - rate_b\n    \n    # Time taken by Alan on his own is the inverse of his rate\n    time_a = 1 / rate_a\n\n    return time_a\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    def is_even(arrangement):\n        colors = 'RBGYOP'\n        for c in colors:\n            indices = [i for i, block in enumerate(arrangement) if block == c]\n            if (indices[1] - indices[0]) % 2 != 0:\n                return False\n        return True\n\n    blocks = 'RRBBYYGGOOPP'\n    even_count = 0\n    total_count = 0\n\n    for p in permutations(blocks):\n        if p.index('R') < p.index('R', p.index('R') + 1):\n            total_count += 1\n            if is_even(p):\n                even_count += 1\n\n    # Since permutations will count the same color arrangements multiple times (2! for each color pair),\n    # we need to divide total_count by 2! for each color pair to get the unique arrangements.\n    unique_total_count = total_count // (2**6)\n\n    # The probability of an even arrangement in terms of unique arrangements\n    probability = Fraction(even_count, unique_total_count)\n    m, n = probability.numerator, probability.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    rate_a = 1 / 36  # Pool fills per minute by A\n    rate_b = 1 / 48  # Pool fills per minute by B\n\n    cycle_time = 6     # Total minutes in each repeating pattern\n    cycle_fill = 1 * rate_a + 2 * rate_b + 2 * rate_a + 1 * rate_b  # Pool fill per cycle\n\n    # Complete cycles to fill pool\n    full_cycles = int(1 / cycle_fill)\n\n    # Time taken for complete cycles\n    time = full_cycles * cycle_time\n\n    # Fill remaining part of pool\n    remaining = 1 - (full_cycles * cycle_fill)\n    while remaining > 0:\n        time += 1\n        if time % cycle_time == 1 or time % cycle_time == 4:\n            remaining -= rate_a\n        else:\n            remaining -= rate_b\n\n    return time\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    probability_rain_saturday = 0.7\n    probability_rain_sunday = 0.5\n    \n    # Probability that it will not rain on a particular day is (1 - probability it will rain)\n    probability_no_rain_saturday = 1 - probability_rain_saturday\n    probability_no_rain_sunday = 1 - probability_rain_sunday\n    \n    # Probability that it will not rain on both days\n    probability_no_rain_both_days = probability_no_rain_saturday * probability_no_rain_sunday\n    \n    # Probability that it will rain on at least one day is (1 - probability it will not rain on both days)\n    probability_rain_at_least_one_day = 1 - probability_no_rain_both_days\n    \n    return probability_rain_at_least_one_day\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_correct = 10\n    points_incorrect = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_correct + incorrect * points_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n    \n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n    \n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    total_bought = 10\n    borrowed = 1\n    empty_bottles = total_bought + borrowed\n    total_drank = total_bought\n\n    while empty_bottles >= 2:\n        trade_in = empty_bottles // 2\n        total_drank += trade_in\n        empty_bottles = trade_in + (empty_bottles % 2)\n    \n    total_drank -= borrowed  # Return the borrowed bottle\n    return total_drank\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n    \n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n    # Rate of draining pool A (per minute)\n    rate_A = 1 / 10\n    # Rate of draining pool B (per minute)\n    rate_B = 1 / 6\n    # Height of water in pool A at time t\n    height_A = 1 - rate_A * t\n    # Height of water in pool B at time t\n    height_B = 1 - rate_B * t\n\n    # Equation where the height of A's waterline is 3 times that of B's\n    equation = Eq(height_A, 3 * height_B)\n\n    # Solving for t\n    time_solution = solve(equation, t)\n\n    return float(time_solution[0])\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # Initialize the prime factors of 10 (2 and 5) counts\n    twos, fives = 0, 0\n    \n    # Initialize n value\n    n = 1\n    \n    # Loop to get the prime factors count of n factorial\n    while True:\n        # Copy the current value for inner loop\n        current_n = n\n        # Count the occurrences of the factor 2\n        while current_n % 2 == 0:\n            twos += 1\n            current_n //= 2\n        # Count the occurrences of the factor 5\n        current_n = n\n        while current_n % 5 == 0:\n            fives += 1\n            current_n //= 5\n        # A zero is added when we have both a 2 and a 5 in the prime factorization,\n        # so the number of zeros is limited by the smaller of the counts of 2's and 5's\n        if min(twos, fives) >= 28:\n            break\n        # Move on to the next number\n        n += 1\n    \n    # The largest value of n when the product has 28 consecutive zeros\n    return n - 1  # Subtract 1 because we added 1 after fulfilling condition\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    initial_sweets = 320\n    weekly_bought = 30\n    final_sweets = 348\n\n    sweets_eaten_weekly = (initial_sweets + total_weeks * weekly_bought - final_sweets) // total_weeks\n\n    return sweets_eaten_weekly\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for i in range(10):\n        number = int(f\"281{i}\")\n        if number % 6 == 0:\n            return i\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n    unfenced_path = total_path - fenced_path\n    return unfenced_path\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "from math import factorial\n\ndef solution():\n    total_time_units = factorial(10)\n    divisors = factorial(2) * factorial(2) * factorial(2) * factorial(1) * factorial(3)\n    ans = total_time_units // divisors\n    return ans\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    for prime in range(2, 69):\n        if isprime(prime) and isprime(69 - prime):\n            return 69 - 2 * prime\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 8 / 60\n\n    # Let the distance be d km\n    # Time taken at 3 km/h = d/3 hours\n    # Correct time = d/3 - late_time\n    # Time taken at 7 km/h = d/7 hours\n    # Correct time = d/7 + early_time\n\n    # As per question,\n    # (d/3) - late_time = (d/7) + early_time\n    # Solving for d:\n    d = (3 * 7 * (late_time + early_time)) / (7 - 3)\n\n    return d\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Define the variable for Yue Ying's sweets\n    yue_ying_sweets = symbols('yue_ying_sweets')\n\n    # Chenxi has 5 more sweets than Yue Ying\n    chenxi_sweets = yue_ying_sweets + 5\n\n    # Chenxi gives Yue Ying 10 sweets, update their sweets\n    chenxi_sweets_after_giving = chenxi_sweets - 10\n    yue_ying_sweets_after_receiving = yue_ying_sweets + 10\n\n    # Calculate the difference in number of sweets they have now\n    difference_in_sweets = chenxi_sweets_after_giving - yue_ying_sweets_after_receiving\n\n    return abs(difference_in_sweets)\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    points_per_correct = 10\n    points_per_incorrect = -5\n    total_questions = 10\n    \n    # Let x be the number of correct answers\n    for x in range(total_questions + 1):\n        # Incorrect answers count is total_questions - x\n        incorrect = total_questions - x\n        # If the total score matches the scenario given, return x\n        if x * points_per_correct + incorrect * points_per_incorrect == total_points:\n            return x\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of students in School A be 'a'\n    # And let the number of students in School B be 'b'\n    a, b = symbols('a b')\n\n    # We have two equations based on the problem statement:\n    # Equation 1: The total number of students originally is 1050 (a + b = 1050)\n    # Equation 2: After transferring 20 students from school A to B, school A has 10 more students than school B (a - 20 = b + 10)\n    equation1 = Eq(a + b, 1050)\n    equation2 = Eq(a - 20, b + 10)\n\n    # Solve the equations for 'a' and 'b'\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Return the number of original students in school A\n    return solutions[a]\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes = 11\n    neither_classes = 10\n\n    # Total taking writing class (both writing and math and writing only)\n    writing_students = total_students - neither_classes - (math_students - both_classes)\n\n    return writing_students\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n\n    digits = ['0', '8', '0', '7', '2', '0', '0', '3']\n    max_prime = 0\n    \n    for i in range(1, 50):\n        if isprime(i):\n            if set(str(i)).issubset(set(digits)):\n                max_prime = i\n    \n    return max_prime\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_sum_of_five = 54 * 5\n    total_sum_of_first_two = 48 * 2\n    sum_of_last_three = total_sum_of_five - total_sum_of_first_two\n    average_of_last_three = sum_of_last_three / 3\n\n    return average_of_last_three\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # We are trying different combinations of brackets to maximize the expression result\n    # Since multiplication has precedence over addition and subtraction, we aim to maximize multiplications\n    # We can try the most obvious solutions as there are limited places to put two pairs of brackets \n    \n    # No brackets, just for reference\n    no_brackets = 15 + 5 * 5 + 15 - 6 + 7\n\n    # Option 1: (15+5) * (5+15) - 6 + 7\n    opt1 = (15+5) * (5+15) - 6 + 7\n\n    # Option 2: ((15+5) * 5 + 15) - 6 + 7\n    opt2 = ((15+5) * 5 + 15) - 6 + 7\n\n    # Option 3: (15+5) * 5 + (15 - 6 + 7)\n    opt3 = (15+5) * 5 + (15 - 6 + 7)\n\n    # Option 4: 15 + (5*(5+15)) - 6 + 7\n    opt4 = 15 + (5 * (5 + 15)) - 6 + 7\n\n    # Option 5: 15 + 5 * (5 + (15 - 6) + 7)\n    opt5 = 15 + 5 * (5 + (15 - 6) + 7)\n\n    # Option 6: (15+5*(5+15)) - 6 + 7\n    opt6 = (15 + 5 * (5 + 15)) - 6 + 7\n\n    # Select the maximum result from all options\n    ans = max(no_brackets, opt1, opt2, opt3, opt4, opt5, opt6)\n\n    return ans\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    numbers = range(1, 18, 2)\n    return sum(numbers)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Maximum number of slices obtained after each cut\n    # follows the pattern 1, 2, 4, 7, 11, 16,... (max slices after each cut)\n    # This is because after the nth cut, you can get at most n new slices.\n    # Therefore, to agree or disagree with the statement, calculate the sum.\n    \n    # Initializing the number of slices after zero cuts.\n    max_slices = 0\n    \n    # Perform 4 cuts and calculate max_slices after each cut\n    for i in range(1, 5):\n        max_slices += i\n    \n    # Return the number of max_slices after 4 cuts\n    return max_slices\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age, teddy_future_age = symbols('teddy_age father_age teddy_future_age')\n    \n    # When Teddy was 5, his father's age was 7 times Teddy's age\n    equation1 = Eq(father_age, 7 * teddy_age)\n    # Given Teddy's current age\n    equation2 = Eq(teddy_age, 5)\n    # Equation representing the future ages when Teddy's father will be 40\n    equation3 = Eq(teddy_future_age + (40 - father_age), teddy_age)\n    # Equation representing the father's age as 40 (as a future age)\n    equation4 = Eq(father_age, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (teddy_age, father_age, teddy_future_age))\n\n    return solutions[teddy_future_age]\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Elephant position from left to right\n    elephant_pos_left_to_right = 10\n\n    # Toys between rabbit and elephant\n    toys_between = 5\n\n    # Rabbit position from left to right\n    rabbit_pos_left_to_right = elephant_pos_left_to_right + toys_between\n\n    # Total number of toys\n    total_toys = 40\n\n    # Rabbit position from right to left\n    rabbit_pos_right_to_left = total_toys - rabbit_pos_left_to_right + 1\n\n    return rabbit_pos_right_to_left\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Given proportions of adults and boys\n    adults_proportion = 2/7\n    boys_proportion = 4/5\n\n    # Correct calculation for girls proportion (of the remaining audience)\n    remaining_proportion = 1 - adults_proportion\n    girls_proportion_of_remaining = 1 - boys_proportion\n    girls_proportion = girls_proportion_of_remaining * remaining_proportion\n\n    # Correct difference based on proportion, not the mistaken direct subtraction\n    difference_proportion = adults_proportion - girls_proportion\n\n    # Given difference in number of people\n    difference_number = 80\n\n    # Calculate total number of people based on the proportion and actual difference\n    total_people = difference_number / difference_proportion\n\n    return int(total_people)\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = 0\n    for number in range(1, 110):  # Pages 1 to 109\n        for digit in str(number):\n            sum_digits += int(digit)\n    return sum_digits\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = 1\n    gray = 11 * pink\n    \n    while pink + gray != 48:\n        pink += 1\n        gray = 11 * pink\n    \n    return pink\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # Area of triangle = 1/2 * base * height\n    # Therefore, height = 2 * area / base\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    total_sum = sum(i**2 for i in range(2, 33, 3))\n    return total_sum\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    ans = 35 / 100 * 700\n    return ans\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n    return total_cabinets\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    # Initial condition, equal number of tables and chairs\n    equation1 = Eq(tables, chairs)\n    \n    # After selling and bringing in, chairs become 4 times tables\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop over all 3-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            digits = [int(d) for d in str(i)]  # Convert the number to a list of its digits\n            if sum(digits) == 7:  # Check if the sum of the digits is 7\n                count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    classes = 5\n    total_boxes = boxes_per_class * classes\n    return total_boxes\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the given expression by factoring powers of 2:\n    # We know 4^982 can be written as (2^2)^982 = 2^1964 and 2^1963 is already in simplest form.\n    # So we can further simplify the expression as (2^2019) / (2^1964 - 2^1963).\n    # Factoring out 2^1963 from the denominator gives us 2^1963 * (2 - 1) = 2^1963.\n    # This leaves us with 2^2019 / 2^1963.\n    # Now, since we're dividing powers of the same base, we just subtract the exponents: 2019 - 1963 = 56.\n    # The expression is then simplified to 2^56.\n    # We want to find the remainder when 2^56 is divided by 5.\n\n    # We can use the fact that the powers of 2 repeat in a pattern of 4 when divided by 5:\n    # 2^1 % 5 = 2\n    # 2^2 % 5 = 4\n    # 2^3 % 5 = 3 (because 8 % 5 = 3)\n    # 2^4 % 5 = 1 (because 16 % 5 = 1)\n    # Then 2^5 % 5 will again be 2 and the cycle will continue.\n\n    # We can find the remainder of the power of 56 divided by 4 to determine where it falls in that cycle.\n    power_remainder = 56 % 4\n\n    # If the remainder is 0, then the value of 2^56 % 5 will be 1.\n    # If the remainder is 1, the value will be 2.\n    # If the remainder is 2, the value will be 4.\n    # If the remainder is 3, the value will be 3.\n    # Since the power_remainder is 0 (as 56 is a multiple of 4), the remainder of 2^56 divided by 5 is 1.\n\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):\n        number = int(f\"49{i:02d}\")\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n    \n    # Equation for the total number of vehicles\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n    # Equation for the total number of wheels\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    # The number of cars is equal to the number of lorries\n    equation3 = Eq(cars, lorries)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n + 1)**2) / 4  # Formula for 1Â³+2Â³+3Â³+......+nÂ³\n    sum_of_numbers = (n * (n + 1)) / 2      # Formula for 1+2+3+......+n\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    mass_5_chocolates = 185\n    mass_17_chocolates = 317\n\n    # The difference between 17 chocolates mass and 5 chocolates mass gives us the mass of 12 chocolates\n    mass_12_chocolates = mass_17_chocolates - mass_5_chocolates\n    \n    # Divide by 12 to find the mass of a single chocolate\n    mass_1_chocolate = mass_12_chocolates / 12\n    \n    # Now calculate the mass of 10 chocolates\n    mass_10_chocolates = mass_1_chocolate * 10\n    \n    # The mass of the jar is the mass of the jar with 5 chocolates minus the mass of the 5 chocolates\n    mass_jar = mass_5_chocolates - (5 * mass_1_chocolate)\n    \n    # Finally, the mass of the jar with 10 chocolates is the mass of the jar plus the mass of the 10 chocolates\n    return mass_jar + mass_10_chocolates\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n    \n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    kristoff_height = solutions[kristoff]\n    ana_height = solutions[ana]\n    \n    height_difference = kristoff_height - ana_height\n\n    return height_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700  # total weight of the sugar solution\n    sugar_concentration = 0.32   # 32% concentration of sugar\n    sugar_weight = total_solution_weight * sugar_concentration  # weight of sugar in the solution\n\n    water_weight = total_solution_weight - sugar_weight  # weight of water in the solution\n\n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    for a in range(0, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                number = int(\"1992\" + str(a) + str(b) + str(c))\n                if number % 2 == 0 and number % 3 == 0 and number % 5 == 0 and number % 11 == 0:\n                    return number\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - 1/10\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_distance = 800  # in meters\n    number_of_trees = 21\n    number_of_gaps = number_of_trees - 1  # since trees are at both ends\n\n    distance_between_trees = total_distance / number_of_gaps\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of each type of fruit\n    apples, pears, mangoes = symbols('apples pears mangoes')\n\n    # Given cost of apples\n    cost_per_apple = 0.60\n\n    # Ratios turned into equations\n    equation1 = Eq(pears, 4 / 5 * apples)\n    equation2 = Eq(mangoes, 2 / 5 * apples)\n\n    # Cost ratios\n    cost_ratio_apples_pears = 3 / 2\n    cost_ratio_pears_mangoes = 1 / 5\n\n    # Money spent on each type of fruit\n    cost_apples = cost_per_apple * apples\n    cost_pears = cost_apples / cost_ratio_apples_pears\n    cost_mangoes = cost_pears * cost_ratio_pears_mangoes\n\n    # Total cost equation\n    equation3 = Eq(cost_apples + cost_pears + cost_mangoes, 150)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, pears, mangoes))\n\n    # Calculate the total number of fruits bought\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_next_year_age = hazel_current_age + 1\n    jessica_next_year_age = jessica_current_age + 1\n    \n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_series = (num_terms * (first_term + last_term)) / 2\n    return sum_series\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    a = 4811\n    b = 1981\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    ans = factorial(len(word)) // denominator\n    return ans\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    # Total electricity saved in the first half of the year\n    total_first_half = 366\n    \n    # Average electricity saved per month in the second half of the year\n    avg_second_half = 65\n\n    # Number of months in the first half of the year\n    months_first_half = 6\n    \n    # Number of months in the second half of the year\n    months_second_half = 6\n\n    # Total electricity saved in the second half of the year\n    total_second_half = avg_second_half * months_second_half\n\n    # Total electricity saved last year\n    total_last_year = total_first_half + total_second_half\n\n    # Total number of months last year\n    total_months_last_year = months_first_half + months_second_half\n\n    # Average electricity saved per month last year\n    avg_per_month_last_year = total_last_year / total_months_last_year\n\n    return avg_per_month_last_year\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_time = datetime.strptime('5:30PM', '%I:%M%p')\n    end_time = datetime.strptime('7:15PM', '%I:%M%p')\n    \n    duration = end_time - half_time\n    start_time = half_time - duration\n\n    return start_time.strftime('%I:%M%p')\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    average_all = 92\n    average_first_five = 94\n    total_assignments = 6\n\n    # Calculate the total score for the six assignments based on the average.\n    total_score_all = average_all * total_assignments\n\n    # Calculate the total score for the first five assignments based on the average.\n    total_score_first_five = average_first_five * (total_assignments - 1)\n\n    # Calculate the score for the sixth assignment.\n    score_sixth_assignment = total_score_all - total_score_first_five\n\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    # Let x be the total number of pairs purchased\n    # total cost = cost_price_per_pair * x\n    # total revenue = selling_price_per_pair * (x - remaining_pairs)\n    # profit = total revenue - total cost\n    # total_profit = selling_price_per_pair * (x - remaining_pairs) - cost_price_per_pair * x\n\n    # Rearrange the equation to solve for x\n    # total_profit + cost_price_per_pair * x = selling_price_per_pair * (x - remaining_pairs)\n    # total_profit + cost_price_per_pair * x = selling_price_per_pair * x - selling_price_per_pair * remaining_pairs\n    # total_profit + selling_price_per_pair * remaining_pairs = (selling_price_per_pair - cost_price_per_pair) * x\n    # x = (total_profit + selling_price_per_pair * remaining_pairs) / (selling_price_per_pair - cost_price_per_pair)\n\n    x = (total_profit + selling_price_per_pair * remaining_pairs) / (selling_price_per_pair - cost_price_per_pair)\n    return int(x)\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    # Let x be the number of cars at the beginning\n    # According to the question, after 8 more cars enter, the number becomes x + 8\n    # Then 10 cars exit, so the number becomes x + 8 - 10\n    # We are given that there are 30 cars in the car park now\n    # So we have the equation x + 8 - 10 = 30\n    # Simplify the equation to find x (the number of cars at the beginning)\n    x = 30 + 10 - 8\n    return x\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((((x * 2) / 4) ** 2 - 4) / 10, 6)\n\n    # Solve the equation to find the value of x\n    solved_x = solve(equation, x)\n\n    return solved_x[0]  # Assuming the question expects the positive solution\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_min = 27 / 5\n    toys_in_20_min = toys_per_min * 20\n    return int(toys_in_20_min)\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    daily_fill = 10\n    nightly_leak = 3\n    net_fill_per_day = daily_fill - nightly_leak\n    first_day_fill = 3\n    days_passed = 1  # account for the first day\n\n    remaining_water_needed = total_water_needed - first_day_fill\n    days_passed += (remaining_water_needed // net_fill_per_day)\n\n    # check if there is any remaining water that needs to be filled after full days\n    if remaining_water_needed % net_fill_per_day > 0:\n        days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    digits_written = 0\n    current_number = 1\n\n    while True:\n        digits_in_number = len(str(current_number))\n        if digits_written + digits_in_number > total_seconds:\n            break\n        digits_written += digits_in_number\n        current_number += 1\n\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    difference = max(amounts) - min(amounts)\n    return difference\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit = 24\n    ginny_visit = 36\n\n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n\n    return lcm\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%M %p')\n    start_time = end_time - timedelta(minutes=225)\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n\n    num_teams = 20\n    matches = comb(num_teams, 2)\n\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_made_in_3_min = 27\n    toys_per_minute = toys_made_in_3_min / 3\n\n    return toys_per_minute\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Darrell could draw all the non-green marbles first\n    non_green_marbles = 5 + 9 + 2  # Blue + White + Black\n\n    # To ensure he gets a green one, he must draw one more after all the non-green ones\n    draws_needed = non_green_marbles + 1  # At least one green marble\n\n    return draws_needed\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits // 2  # Triple the rabbits then half the population\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 6 * 6 + 2  # climbed for 6 days plus the 7th day\n    height_after_sliding = 20 - total_climbed  # remaining height after sliding down\n    daily_slide_down = 6  # the snail slides down the same height it climbs each day\n    snail_slides = daily_slide_down * 6 + height_after_sliding  # sliding for 6 nights plus the last slide\n    \n    return snail_slides\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2  # Minah's rate of making puff per hour\n    hours_for_120_puffs = 120 / puffs_per_hour  # total hours needed for 120 puffs\n\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # With 8 players in a round-robin, each player plays 7 matches\n    # As there cannot be any draws in Ping-Pong, each match has a distinct winner\n    # The maximum number of wins is if one player won all their matches\n    # Therefore, the champion can have at most 7 wins\n    \n    return 7\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for a in range(1, 14):\n        for b in range(1, 14 - a):\n            for c in range(1, 14 - (a + b)):\n                d = 13 - (a + b + c)\n                product = a * b * c * d\n                max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Candy's and Ivy's speed\n    candy_speed, ivy_speed = symbols('candy_speed ivy_speed')\n\n    # Assuming Candy's speed is x, then Ivy's speed is x + 20\n    ivy_speed_eq = Eq(ivy_speed, candy_speed + 20)\n\n    # Calculate the distances each traveled when they met\n    # Time for Ivy = 6 + 12 = 18 minutes; Time for Candy = 12 minutes\n    ivy_distance = ivy_speed * 18\n    candy_distance = candy_speed * 12\n\n    # The sum of the distances they traveled when they met is 1200 meters\n    total_distance_eq = Eq(ivy_distance + candy_distance, 1200)\n\n    # Solve the system of equations\n    solutions = solve((ivy_speed_eq, total_distance_eq), (candy_speed, ivy_speed))\n\n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal_1 = 6 \n    weight_metal_2 = 14\n    \n    concentration_metal_1 = 45 / 100 \n    concentration_metal_2 = 60 / 100 \n    \n    total_nickel = (weight_metal_1 * concentration_metal_1) + (weight_metal_2 * concentration_metal_2)\n    total_weight = weight_metal_1 + weight_metal_2\n    \n    percent_concentration_nickel = (total_nickel / total_weight) * 100\n    \n    return percent_concentration_nickel\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    \n    years = 0\n    while mother_age != 3 * (edward_age + years):\n        years += 1\n        \n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 1 / 6  # 1cm to 6m\n    playground_length_plan = 5  # length on the plan in cm\n    playground_length_real = playground_length_plan / scale_ratio  # real length in meters\n\n    return playground_length_real\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 1000):  # assume the school does not have more than 1000 students\n        if (n**2 + 11) + 12 == (n + 1)**2:\n            return n**2 + 11\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    total_money = 250\n    cost_per_box = 6\n    \n    num_boxes = total_money // cost_per_box\n    \n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_A = 673\n    difference = 56\n    tank_B = tank_A + difference\n    return tank_B\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 15\n\n    # Average number of apples picked by boys\n    avg_boys = 30\n    # Average number of apples picked by girls\n    avg_girls = 20\n    # Average number of apples picked by everyone\n    avg_total = 26\n\n    # The total number of apples picked is the sum of apples picked by boys and girls\n    # We also know this total divided by the total number of students (boys + girls) is the overall average\n    equation = Eq(((boys * avg_boys) + (girls * avg_girls)) / (boys + girls), avg_total)\n\n    # Solve the equation for the number of girls\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    equation = Eq(pen + pencil, 4.5)\n\n    price_of_pen = solve(equation, pen)\n\n    return price_of_pen[0]\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketballs, volleyballs = symbols('basketballs volleyballs')\n\n    equation1 = Eq(basketballs + volleyballs, 12)  # Total number of balls is 12\n    equation2 = Eq(30 * basketballs + 25 * volleyballs, 340)  # Total cost of balls is $340\n\n    solutions = solve((equation1, equation2), (basketballs, volleyballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # 15 million pounds\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1 / i for j in range(1, i)) for i in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - given_to_lily\n    given_to_brother = remaining_candy * (1/3)\n    remaining_candy_after_brother = remaining_candy - given_to_brother\n    return remaining_candy_after_brother\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let s be the common mass of strawberry candies in all containers\n    s = symbols('s')\n    equations = []\n\n    # create 3 equations based on the given fractions and the fact that the mass of mint candies remains the same\n    equations.append(Eq((5/2) * s + (3/2) * s + s, 1371))  # total mass\n\n    # solve the system of equations\n    sol = solve(equations, (s))\n    \n    # the mass of all strawberry candies is s in each container, times the number of containers which is 3\n    strawberry_mass_total = 3 * sol[s]\n    return strawberry_mass_total\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roy, dennis = symbols('roy dennis')\n\n    # Equation based on the total amount of money they shared\n    equation1 = Eq(roy + dennis, 340)\n    # Equation after Roy spent 2/3 of his money and Dennis spent 1/4\n    # Dennis has twice as much as Roy: dennis - dennis/4 = 2 * (roy - 2*roy/3)\n    equation2 = Eq(dennis - dennis/4, 2 * (roy - 2 * roy / 3))\n\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Calculate Dennis' money after spending\n    dennis_end = solutions[dennis] - solutions[dennis]/4\n\n    return dennis_end\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 / 25\n    return ans\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(693)\n    prod = 1\n    for factor, exponent in factors.items():\n        if exponent % 2 == 1:\n            prod *= factor \n    return prod\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # Total number of digits to be used\n    total_digits = 300\n    \n    # Initialize number of digits used\n    digits_used = 0\n    \n    # Initialize the last page number\n    last_page_number = 0\n\n    # Loop through the number of digits in the page numbers\n    for num_digits in range(1, 4): # 1 digit, 2 digits, 3 digits\n        # For each range, calculate the maximum page numbers\n        max_pages = 9 * (10**(num_digits - 1))\n        \n        # Calculate the digits required to print these page numbers\n        required_digits = max_pages * num_digits\n        \n        if digits_used + required_digits >= total_digits:\n            # Calculate remaining digits and pages\n            remaining_digits = total_digits - digits_used\n            # Calculate the last page\n            last_page_number += remaining_digits // num_digits\n            break\n        else:\n            # Update the count of digits used and last page number\n            digits_used += required_digits\n            last_page_number += max_pages\n    \n    return last_page_number\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    number_of_balls = 8\n    cost_per_ball = 20.45\n    number_of_hula_hoops = 6\n    \n    total_cost_balls = number_of_balls * cost_per_ball\n    total_cost_hula_hoops = total_cost - total_cost_balls\n    cost_per_hula_hoop = total_cost_hula_hoops / number_of_hula_hoops\n    \n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate unit digit of each term\n    unit_digit_13_pow = pow(13, 242, 10)\n    unit_digit_17_pow = pow(17, 379, 10)\n    unit_digit_4_pow = pow(4, 2012, 10)\n\n    # Calculate unit digit of the total expression\n    unit_digit_total = (unit_digit_13_pow + unit_digit_17_pow * unit_digit_4_pow) % 10\n\n    return unit_digit_total\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_liters = 8 * 3\n    remaining_liters = total_liters - 9\n    containers_needed = remaining_liters / 5\n    if remaining_liters % 5 != 0:\n        containers_needed += 1\n\n    return int(containers_needed)\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddie_position_from_start = 12\n\n    eddie_position_from_end = total_people - eddie_position_from_start + 1\n\n    return eddie_position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "from fractions import Fraction\n\ndef solution():\n    steak_weight = Fraction(7, 2)\n    cost_per_kg = Fraction(750, 100)\n    note_value = 20\n\n    total_cost = steak_weight * cost_per_kg\n    additional_money_needed = total_cost - note_value\n\n    if additional_money_needed < 0:\n        return 0\n    else:\n        return float(additional_money_needed)\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    # Let x be the number of stickers Alexis had at first\n    # Then Marry had (7/5) * x stickers at first\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    marry_initial = (7/5) * x\n    alexis_initial = x\n    \n    # They each gave 20% of their stickers to Charlotte\n    marry_gave = marry_initial * 0.20\n    alexis_gave = alexis_initial * 0.20\n    \n    # Charlotte's stickers increased by 80%\n    charlotte_got = marry_gave + alexis_gave\n    charlotte_initial = charlotte_got / 0.80\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    marry_final = marry_initial - marry_gave\n    charlotte_final = charlotte_initial + charlotte_got\n    equation = Eq(marry_final, charlotte_final + 20)\n    \n    # Solve for x, the number of stickers Alexis had at first\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the amount Benson had originally, and c represent the amount Clive had originally.\n    b, c = symbols('b c')\n    \n    # Original total amount\n    equation1 = Eq(b + c, 705)\n    \n    # After spending, they have the same amount.\n    equation2 = Eq(b - 34, c - 63)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, c))\n    \n    # Clive's original amount is what we want to find\n    return solutions[c]\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    avg_score = sum(scores) / len(scores)\n    return avg_score\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    light_ball, heavy_ball = symbols('light_ball heavy_ball')\n\n    # Equation 1: The mass of a heavy bowling ball is twice a light one\n    eq1 = Eq(heavy_ball, 2 * light_ball)\n\n    # Equation 2: The total mass of the balls\n    eq2 = Eq(6 * light_ball + 6 * heavy_ball, 65.7)\n\n    # Solve the system of equations\n    solved_values = solve((eq1, eq2), (light_ball, heavy_ball))\n\n    # Round the mass of the light ball to the nearest kg\n    light_ball_mass = round(solved_values[light_ball])\n\n    return light_ball_mass\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10):  # First digit cannot be 0 in a four-digit number\n        for digit2 in range(0, 10):\n            count += 1  # Every combination of digit1 and digit2 will form a palindromic number\n    return count\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_a = 42\n    sweets_b = 4 * sweets_a\n    sweets_c = 2 * sweets_b\n\n    return sweets_c\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    pens_total = 126\n    ratio = 6\n    denise_pens = pens_total // (ratio + 1)\n    return denise_pens\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # Let a, b, c represent A, B, C respectively\n    # Average of A and B is 50: (a + b) / 2 = 50\n    a_plus_b = 50 * 2\n    # Average of B and C is 43: (b + c) / 2 = 43\n    b_plus_c = 43 * 2\n    # Average of A and C is 45: (a + c) / 2 = 45\n    a_plus_c = 45 * 2\n    # Sum of all averages is sum of all numbers: a + b + c\n    sum_of_abc = (a_plus_b + b_plus_c + a_plus_c) / 2\n    # Average of A, B, and C is sum_of_abc / 3\n    average_abc = sum_of_abc / 3\n    return average_abc\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_cost = 5 * 1.26\n    per_cookie_cost = chocolate_bar_cost / 6\n    money_spent_on_cookies = 4 * per_cookie_cost\n    money_left = 9.05 - money_spent_on_cookies\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # After 25 girls leave, the number of girls is 2/3 of the boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n    # After 15 boys leave, the number of boys and girls are the same\n    equation2 = Eq(boys - 15, girls - 25)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    # Total students at first is the sum of initial number of boys and girls\n    total_students = solutions[girls] + solutions[boys]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 8:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Constraints based on the problem statement\n    equation1 = Eq(boys / 3 + girls / 2, 250)  # Balls shared between boys and girls\n    equation2 = Eq(boys + girls, 650)  # Total number of children\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1000):  # Assuming the number in the box is less than 1000\n        if 8 * 11 == i * 9 + 34:\n            return i\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    decrease_temperature = 12\n    midnight_temperature = midday_temperature - decrease_temperature\n    return midnight_temperature\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let the number of 10-cent coins be 8x and 50-cent coins be 3x.\n    # The total value of the coins can be represented as:\n    # (8x * 10 cents) + (3x * 50 cents) = 7590 cents\n    # Simplifying the equation gives us:\n    # 80x + 150x = 7590\n    # 230x = 7590\n    # Solving for x gives us the number of sets of coins in the ratio.\n    x = 7590 / 230\n\n    # The total value of 50-cent coins is 3x * 50 cents\n    value_50_cent_coins = 3 * x * 50\n\n    return value_50_cent_coins\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.20\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7  # Area of the square base in cm^2\n    hole_area = 3 * 3  # Area of the square hole in cm^2\n    effective_base_area = base_area - hole_area  # Subtract the hole area from the base area\n    height = 320 / effective_base_area  # Volume divided by the effective base area gives the height\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as a single entity, thus we have 7 entities to arrange.\n    # Then arrange these 7 entities around the table; this is (7-1)! because in circular permutations,\n    # rotations are considered identical.\n    entities_permutation = factorial(7 - 1)\n    \n    # Additionally, Amy and Judy can switch places with each other, which gives us 2! ways.\n    amy_judy_permutation = factorial(2)\n\n    # The total number of permutations is the product of both permutations.\n    total_permutations = entities_permutation * amy_judy_permutation\n    \n    return total_permutations\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    n = 46\n    cuts = 0\n    pieces = 1\n\n    while pieces < n:\n        pieces += cuts\n        cuts += 1\n\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Find the triangular number just before 2008\n    triangle_num, n = 0, 0\n    while triangle_num < 2008:\n        n += 1\n        triangle_num += n\n\n    # Backtrack one triangular sequence\n    triangle_num -= n\n    \n    # Find the difference between the 2008th number and the last complete triangle number sequence\n    difference = 2008 - triangle_num\n    \n    return difference\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    weight_of_one_x = 1.5  # in grams\n    balance_equation = 3 * weight_of_one_x / 10  # 3x = 10y\n    weight_of_one_y = balance_equation\n\n    return weight_of_one_y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = list(range(6, 27, 4))\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cucumbers = symbols('cucumbers')\n    tomatoes = 27\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve(equation, cucumbers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    # Create all permutations of the numbers 3, 5, and 9\n    perms = permutations([3, 5, 9], 3)\n    # Count the number of permutations\n    count = len(list(perms))\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    for num in range(1, 101):\n        if num % 5 == 2:\n            total_sum += num\n    return total_sum\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    remaining_bags = total_bags - given_to_avril\n    return remaining_bags\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # The sequence is arithmetic: a + 6*d, where a is the first term and d is the common difference\n    first_term_16th = 100  # On the 16th night\n    common_difference = 6  # 6 more than the night before\n\n    # Calculate the first term\n    # the 16th term can be represented as a + 15d = first_term_16th\n    # first_term_16th = a + 15 * common_difference\n    first_term = first_term_16th - 15 * common_difference\n\n    # Sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n - 1)d)\n\n    total_nights = 31  # Total nights is 31\n    last_term = first_term + (total_nights - 1) * common_difference  # last term of the sequence \n\n    total_mosquitoes = total_nights / 2 * (first_term + last_term)  # Total mosquitoes eaten in 31 nights\n    \n    return int(total_mosquitoes)\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Chris needs to ensure that he leaves a multiple of 3 matches for Dylan\n    # So when Chris takes away 1 match, 6 remains, which is a multiple of 3.\n    # In this way, no matter how many matches Dylan takes (1 or 2), Chris can\n    # always keep the number of remaining matches a multiple of 3, by taking 2 or 1 match accordingly.\n    # Eventually, Dylan will have to take the matches that leave 1 remaining, and \n    # Chris will take the last one to win.\n    return 1\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_hour = 9\n    start_minute = 23\n    end_hour = 13\n    end_minute = 6\n\n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n\n    minutes_between = end_time_minutes - start_time_minutes\n    \n    return minutes_between\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        a, b, c, d, e = p\n        if (a == 0 or d == 0):  # Skip permutations where A or D are zero since they are 4-digit numbers\n            continue \n        num1 = a*1001 + b*10  # ABAC\n        num2 = d*1000 + b*100 + e*10 + c  # DBEC\n        num3 = a*10000 + c*1000 + e*100 + d*10 + c  # ACEDC\n        if num1 + num2 == num3:\n            return num2  # Return DBEC\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    return 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all permutations of digits 0-9\n    for perm in permutations(range(10), 3):\n        a, b, c = perm\n        # Skip any permutation where A is 0 as we want ABC to be a 3-digit number\n        if a == 0:\n            continue\n        \n        # Convert tuple to integer\n        abc = a * 100 + b * 10 + c\n        \n        # Check for any other conditions here, since none specified, we return the first valid permutation\n        return abc  # This will return the smallest 3-digit number where A, B, and C are different digits\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    ans = (a**2 - b)\n    return ans\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sequence = list(range(1, 10)) + list(range(8, 0, -1))\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = 0\n    # Looping starting from 53, decrementing by 6 each time\n    for i in range(53, 22, -6):\n        ans += i - (i - 3)  # Subtracting the number 3 less than the current i\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # I'm assuming you've provided the number of restaurants in the scenario which is missing in the prompt.\n    # I'll consider there are 'n' different restaurants for the person to choose from.\n\n    # Since the person can choose only one restaurant to eat at from 'n' available options,\n    # the number of different choices he has is simply the number of restaurants.\n    \n    n = 10  # Assuming there are 10 restaurants for the purpose of this example.\n    return n\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Angel bought 3 notebooks, 4 pencil cases and 5 erasers for $50\n    # A notebook and a pencil case cost $6\n    # A pencil case and an eraser cost $8\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance // speed\n    \n    if time * speed == distance:\n        return time\n    else:\n        return False\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    \n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    door_heights = [8300, 200, 8, 50]  # Convert all heights to centimeters\n    classroom_door_cm = 200  # Typically, a classroom door is about 200 cm in height\n    closest_height = min(door_heights, key=lambda x: abs(x - classroom_door_cm))\n    \n    if closest_height == 8300:\n        return '83m'\n    elif closest_height == 200:\n        return '200cm'\n    elif closest_height == 8:\n        return '8cm'\n    elif closest_height == 50:\n        return '1/2m'\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    # Since all letters represent different digits, A cannot be zero.\n    # We have a four digit number of the form AEEA.\n    # We need to find a number divisible by 9 (since E+E+A+A must be divisible by 9 for the whole number to be divisible)\n    for A in range(1, 10):\n        for E in range(10):\n            if A != E:  # A and E need to be different digits\n                number = int(f\"{A}{E}{E}{A}\")\n                # Sum of the digits must be divisible by 9\n                if (A + E + E + A) % 9 == 0:\n                    return number\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - 5/12\n    remaining_after_dinner = 1 - 2/7\n    remaining_money = 45\n    \n    initial_money = remaining_money / (remaining_after_lunch * remaining_after_dinner)\n    return initial_money\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages_with_one_digit = 9\n    pages_with_two_digits = 90 * 2\n    pages_with_three_digits = (total_digits - pages_with_one_digit - pages_with_two_digits) // 3\n    \n    total_pages = pages_with_one_digit + pages_with_two_digits // 2 + pages_with_three_digits\n    \n    return total_pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    # Total games played equals \"5 choose 2\" since each game is a unique pairing of 2 players out of 5\n    total_games = (5*4)//2\n    # Total games won by Lily, Eva, Tina, and Emma\n    games_won_by_others = 2 + 1 + 4 + 3\n    # Gina's games won are total games minus games won by others\n    ginas_games_won = total_games - games_won_by_others\n    return ginas_games_won\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 1  # Start by assuming 1 digit per page\n    pages_with_current_digit_count = 9  # There are 9 pages with 1 digit: 1-9\n    digits_so_far = 0\n\n    while digits_so_far + pages_with_current_digit_count * digits_per_page <= 1524:\n        digits_so_far += pages_with_current_digit_count * digits_per_page\n        pages_with_current_digit_count *= 10\n        digits_per_page += 1\n\n    pages_left = (1524 - digits_so_far) // digits_per_page\n    total_pages = pages_with_current_digit_count // 10 + pages_left\n\n    return total_pages\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    total_money = 300\n    group_price = 5 * 4 + 10\n    \n    num_groups = total_money // group_price\n    shirts_bought = num_groups * 4  # As there are 4 shirts in each group\n    \n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Each man's work per day\n    man_work_per_day = 1 / (6 * 5)\n    # Each woman's work per day\n    woman_work_per_day = 1 / (5 * 6)\n\n    # Combined work per day of 10 men and 5 women\n    combined_work_per_day = 10 * man_work_per_day + 5 * woman_work_per_day\n\n    # Total number of days to complete the job\n    total_days = 1 / combined_work_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    point_difference = 15\n    num_questions = 10\n    points_correct = 10\n    points_incorrect = -5\n\n    for avril_right in range(num_questions + 1):\n        avril_wrong = num_questions - avril_right\n        avril_points = points_correct * avril_right + points_incorrect * avril_wrong\n        \n        eddie_right = total_points - avril_points - point_difference\n        eddie_wrong = num_questions - eddie_right\n        eddie_points = points_correct * eddie_right + points_incorrect * eddie_wrong\n\n        if eddie_points - avril_points == point_difference and avril_points + eddie_points == total_points:\n            return avril_right\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys initially\n    b, g = symbols('b g')\n\n    # Initial condition: three times as many boys as girls\n    equation1 = Eq(b, 3 * g)\n\n    # After 12 boys leave and 20 girls join, the number of boys and girls is equal\n    equation2 = Eq(b - 12, g + 20)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Return the number of boys initially\n    return solutions[b]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of the coffee beans\n    A = 56\n    B = 96\n    C = 120\n\n    # Find the Greatest Common Divisor (GCD) of the three weights\n    greatest_mass = gcd(gcd(A, B), C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n    from sympy import symbols, Eq, solve\n\n    # Given values\n    angle = math.radians(20)  # convert degrees to radians\n    d = 400  # distance along the slope in meters\n    mu_k = 0.2  # coefficient of kinetic friction\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Using the work-energy principle, the work done by friction is equal to the kinetic energy at the bottom\n    # W_friction = friction_force * d = (mu_k * normal_force * d)\n    # normal_force = m * g * cos(angle), where m is the mass of the skier, which is not needed as it will cancel out\n    # W_gravitational = m * g * h, where h = d * sin(angle)\n    # Kinetic energy at the bottom: KE_bottom = 0.5 * m * v^2\n\n    # Total work done on the skier by gravity and friction is the net work which equals the kinetic energy at the bottom\n    # m * g * h - mu_k * m * g * cos(angle) * d = 0.5 * m * v^2\n    # Solve for v:\n    v = symbols('v')\n    equation = Eq(g * d * math.sin(angle) - mu_k * g * math.cos(angle) * d, 0.5 * v**2)\n\n    solution = solve(equation, v)\n\n    # Since speed cannot be negative, we take the positive solution\n    return float(max(solution))\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    num = 35\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    # Since each child gets at least one apple, we distribute one to each child first\n    apples -= children  # Remaining apples after giving each child one apple\n    max_apples_to_most_greedy = (apples - (children - 1)) + 1  # +1 because the child already has one apple\n    return max_apples_to_most_greedy\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age_now = 8\n    mother_age_now = 44\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age_now + years) == 3 * (anna_age_now + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_legs = 34\n    total_animals = 12\n    \n    # Assume all animals are chickens (2 legs each)\n    all_chickens_legs = 2 * total_animals\n    # Remaining legs would belong to rabbits (since each rabbit has 4 legs)\n    remaining_legs = total_legs - all_chickens_legs\n    # Each rabbit will add 2 more legs than a chicken (4-2=2)\n    # So dividing remaining legs by 2 will give us the number of rabbits\n    rabbits = remaining_legs / 2\n    return int(rabbits)\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let the number of apples be x\n    # Then the number of bananas will be 2x, since for every 1 apple, she uses 2 bananas\n    # And the number of oranges will be 3x, since for every 1 apple, she uses 3 oranges\n    # According to the problem, the total number of fruits used is 24\n    # We can represent this as x + 2x + 3x = 24\n    # Simplifying, we get 6x = 24\n    # Solving for x, we find x = 24 / 6 = 4\n\n    # Therefore, the number of bananas used is 2 * number of apples\n    bananas = 2 * (24 / 6)  # We now know x is 4\n\n    return int(bananas)\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration_percentage = (sugar_weight / total_solution_weight) * 100\n\n    return concentration_percentage\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Let x be the number of long ribbons May has\n    May_short_ribbon_length = 7 * 40  # cm\n    Nancy_long_ribbon_length = 18 * 70  # cm\n    total_length_difference = 2.4 * 100  # Convert to cm\n\n    # Equation representing total length of May's ribbons compared to Nancy's\n    # May's total length = May's short ribbons + x * length of each long ribbon\n    # Nancy's total length = Nancy's long ribbons\n    # May's total length is 2.4m longer than Nancy's total length\n    # May_short_ribbon_length + x * 70 = Nancy_long_ribbon_length + total_length_difference\n    # Solve for x:\n    x = (Nancy_long_ribbon_length + total_length_difference - May_short_ribbon_length) / 70\n\n    # Total number of ribbons is sum of short and long ribbons for May\n    total_ribbons_May = 7 + x\n    return int(total_ribbons_May)\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    max_number = 99\n    while max_number > 0:\n        if (max_number % 4 == 3) and (max_number % 5 == 3):\n            break\n        max_number -= 1\n    return max_number\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_ratio = 3\n    total_paint = 1\n    \n    red_paint = (red_ratio / total_ratio) * total_paint\n    \n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # If A gives B 40 books, they have the same number of books\n    equation1 = Eq(A - 40, B + 40)\n    # If B gives A 40 books, then A is 3 times B\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    known_numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_of_numbers = 6\n    total_numbers_count = 8\n\n    total_sum = mean_of_numbers * total_numbers_count\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_amount = 68\n    quarter_amount = total_amount / 4\n    remaining_amount = total_amount - quarter_amount\n\n    return remaining_amount\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red_balls, blue_balls = symbols('red_balls blue_balls')\n    \n    eq1 = Eq(blue_balls, 2 * red_balls)\n    eq2 = Eq(red_balls + blue_balls, 18)\n    \n    solutions = solve((eq1, eq2), (red_balls, blue_balls))\n    \n    return solutions[blue_balls]\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_of_12_packets = 1.02  # Mass of 12 packets in kg\n    mass_of_one_packet = total_mass_of_12_packets / 12  # Mass of 1 packet\n    mass_of_4_packets = mass_of_one_packet * 4  # Total mass of 4 packets\n\n    return mass_of_4_packets\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # 8 cows for 10 days (8c * 10d)\n    total_grass_for_8_cows = 8 * 10\n    \n    # 4 cows for 15 days (4c * 15d)\n    total_grass_for_4_cows = 4 * 15\n    \n    # Both should equal the total amount of grass available, so:\n    # total_grass_for_8_cows = total_grass_for_4_cows\n    # 8c*10d = 4c*15d\n    # This means that the pasture has enough grass for 80 cow-days\n    \n    # Now, we want to find out how many cows it can feed for 5 days:\n    # Let's call this number of cows 'x'\n    # x * 5d = 80 cow-days\n    x = 80 / 5\n    \n    return x\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    num_tapes = 3\n    num_cds = 4\n    \n    cost_of_tapes = tape_cost * num_tapes\n    cost_of_cds = total_cost - cost_of_tapes\n    cost_per_cd = cost_of_cds / num_cds\n    \n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    # Let x be the true result\n    x = symbols('x')\n\n    # The incorrect division result is x - 99.396\n    incorrect_result = x - 99.396\n\n    # The incorrect divisor is 122 instead of 1.22\n    # Hence, the incorrect result is 100 times smaller than the correct result\n    # Therefore, x = 100 * incorrect_result\n    equation = Eq(x, 100 * incorrect_result)\n\n    # Solve the equation for x\n    true_result = solve(equation, x)\n\n    return true_result[0]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Since each child must have at least 1 apple, they will have a minimum of 1 apple each already.\n    # So we subtract 8 apples from the total of 50, leaving us with 42 apples to distribute.\n    # If we want the kid with the most apples to have the least possible amount,\n    # we should distribute the remaining apples as evenly as possible among the kids.\n    # This is because if one child has too many apples, it is impossible to give each other child a unique amount\n    # without giving someone more apples than necessary.\n    # Therefore, our strategy is to give each of the remaining 7 children one more apple than the child before,\n    # starting from 1 apple. We keep giving apples to the kids in the order of the number they already have,\n    # starting from the child with the least apples.\n\n    remaining_apples = 42\n    children = [1] * 8  # Each child initially has 1 apple\n\n    for i in range(1, 8):\n        children[i] = children[i-1] + 1\n        remaining_apples -= children[i]\n\n    index = 7  # Start from the child who currently has the most apples\n    \n    # Distribute remaining apples one by one to maintain distinct count for each child\n    while remaining_apples > 0:\n        children[index] += 1\n        remaining_apples -= 1\n        index -= 1\n        if index == 0:\n            index = 7\n\n    return children[-1]  # The last child in the list has the most apples\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let's denote the number of cards Hisham has as x. \n    # Then, Melissa has 2x cards.\n    # Together, they have x + 2x = 3x cards, which equals to 876.\n    # So, x = 876 / 3.\n    x = total_cards // 3\n    # Now Hisham has x cards, and Melissa has 2x cards.\n    # They want to have the same number of cards, \n    # so Melissa should give Hisham (2x - x) / 2 cards.\n    cards_to_give = (2*x - x) // 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Tasha's final answer after performing the operations\n    final_answer = 35\n    \n    # Reverse the operation of adding 8\n    subtracted = final_answer - 8\n    \n    # Reverse the operation of multiplying the number by 3\n    original_number = subtracted / 3\n    \n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    # Greatest number of groups is the greatest common divisor of boys and girls\n    number_of_boys = 28\n    number_of_girls = 32\n\n    ans = gcd(number_of_boys, number_of_girls)\n    return ans\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # Convert litres to millilitres by multiplying by 1000\n    return int(n)\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Since we know the 4th and 6th terms, let's denote the terms of the sequence as\n    # a, b, a+b, a+2b, 2a+3b, 3a+5b, and so on (following the pattern of Fibonacci sequence)\n    # We are given that the 4th term is 6 and the 6th term is 15.\n    # Therefore we have:\n    # a + 2b = 6 (1)\n    # 3a + 5b = 15 (2)\n    # By solving these two linear equations, we can find the values of a and b.\n    \n    # Using the numpy library to solve the linear equations\n    import numpy as np\n    \n    # Coefficients matrix (LHS of the equations)\n    coefficients = np.array([[1, 2], [3, 5]])\n    \n    # Constants vector (RHS of the equations)\n    constants = np.array([6, 15])\n    \n    # Solving for a and b\n    solution = np.linalg.solve(coefficients, constants)\n    \n    # Extracting solutions for a and b\n    a = solution[0]\n    b = solution[1]\n    \n    # Calculating the 7th number in the sequence\n    # which will be the sum of the 5th and 6th terms, i.e., (2a+3b) + (3a+5b)\n    seventh_number = (2*a + 3*b) + (3*a + 5*b)\n    \n    return seventh_number\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    total_sum = 0\n    for i in range(7):\n        numerator = 1\n        denominator = (1 + i*5) * (6 + i*5)\n        total_sum += numerator / denominator\n    ans = 36 * total_sum\n    return ans\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # work done by one man in one day\n    work_per_man_per_day = 1 / (24 * 16)\n    # work done by one woman in one day\n    work_per_woman_per_day = 1 / (16 * 24)\n    \n    # work done by 10 men in one day\n    work_per_10_men_per_day = 10 * work_per_man_per_day\n    # work done by 6 women in one day\n    work_per_6_women_per_day = 6 * work_per_woman_per_day\n    \n    # total work done by 10 men and 6 women in one day\n    total_work_per_day = work_per_10_men_per_day + work_per_6_women_per_day\n    \n    # number of days needed to complete the job by 10 men and 6 women\n    days_needed = 1 / total_work_per_day\n    \n    return days_needed\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [4, 7, 5, 8, 3]\n    # Get all possible permutations of the given digits\n    perms = permutations(digits)\n    \n    # Initialize the smallest odd 5-digit number to a large value\n    min_odd = float('inf')\n    \n    for perm in perms:\n        num = int(''.join(map(str, perm)))  # Combine digits to form the number\n        if num % 2 != 0 and num < min_odd:  # Check if the number is odd and smaller than current smallest\n            min_odd = num\n\n    return min_odd\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # There are 5 people, and we need to count the number of permutations where Eddie is not in the middle.\n    total_permutations = factorial(5)  # Total permutations for 5 people\n\n    # When Eddie is in the middle, there are 4! permutations for the remaining people.\n    eddie_in_middle_permutations = factorial(4)\n\n    # Subtract the number of permutations where Eddie is in the middle from the total\n    # number of permutations to get the final answer.\n    ans = total_permutations - eddie_in_middle_permutations\n\n    return ans\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total sum of money Hamid had at first\n    x = symbols('x')\n\n    # Hamid spent 1/3 of his money on a watch\n    spent_on_watch = (1/3) * x\n\n    # Hamid then spent $56 on a tie\n    spent_on_tie = 56\n\n    # He is left with 3/8 of the total sum of money\n    left_with = (3/8) * x\n\n    # The amount left = Initial amount - amount spent on watch - amount spent on tie\n    # Forming the equation: x - (1/3)*x - 56 = (3/8)*x\n    equation = Eq(x - spent_on_watch - spent_on_tie, left_with)\n\n    # Solve the equation\n    total_money = solve(equation, x)[0]\n\n    # Total spent = amount spent on watch + amount spent on tie\n    total_spent = spent_on_watch.subs(x, total_money) + spent_on_tie\n\n    return total_spent.evalf()\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # Based on the plane division principles, 4 identical rectangles can intersect in such a way\n    # that each new rectangle adds lines which intersect the previous ones to create new regions.\n    # The maximum number of regions R(n) divided by n lines (or line segments) can be determined by\n    # the formula R(n) = R(n-1) + n, where R(0) = 1 (single region without any line).\n    # For rectangles, we have to consider both horizontal and vertical line segments.\n    \n    # Given 4 rectangles, we have 8 line segments (4 horizontal and 4 vertical).\n    # Let's divide the problem into two parts - one for vertical and one for horizontal segments.\n    \n    # First consider only horizontal segments.\n    # The first line adds 1 additional region. -> Total regions = 1 + 1 = 2.\n    # The second line intersects with the first, thereby adding 2 regions. -> Total regions = 2 + 2 = 4.\n    # For the n-th horizontal line, it can at most intersect all previous n-1 lines, creating n new regions.\n    \n    # Now consider the vertical line segments, which will intersect with the horizontal ones.\n    # The first vertical line adds 2 regions (since there are 2 horizontal regions). -> Total regions = 4 + 2 = 6.\n    # The second vertical line can intersect with all 2 horizontal line segments, creating 3 more regions -> Total regions = 6 + 3 = 9.\n    # The n-th vertical line can intersect each of the n horizontal regions, creating n+1 new regions.\n    \n    regions = 1  # Starting with one region (no rectangles)\n    horizontal_lines = 4\n    vertical_lines = 4\n\n    # For horizontal line segments\n    for i in range(1, horizontal_lines + 1):\n        regions += i\n\n    # For vertical line segments\n    for j in range(1, vertical_lines + 1):\n        regions += j\n\n    return regions\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # As we are looking for a geometric progression, we'll use the formula:\n    # an = a1 * r^(n-1)\n    # Where:\n    # an is the nth term in the sequence,\n    # a1 is the first term,\n    # r is the common ratio, and\n    # n is the term number.\n    \n    # Given 96, n, 24, 12, 6 we can calculate r using 24, 12, and 6.\n    # r = 12 / 24 = 6 / 12 = 1/2\n    \n    # To find n we'll use 96 as a1 and 24 as the third term (a3).\n    # 24 = 96 * r^(3-1)\n    # 24 = 96 * (1/2)^(2)\n    # 24 = 96 * 1/4\n    # n (the second term) can then be calculated using:\n    # n = 96 * r^(2-1)\n    # n = 96 * 1/2\n    \n    r = 1/2\n    a1 = 96\n    n = a1 * r\n    \n    return int(n)\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # Eddie's speed in m/s\n    train_speed = 57  # Train's speed in m/s\n    relative_speed = eddie_speed + train_speed  # Relative speed of train w.r.t Eddie in m/s\n    time_to_pass = 10  # Time taken to pass Eddie in seconds\n\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    total_distance = 700 + 900  # sum of the train length and the bridge length in meters\n    speed = 400  # speed of the train in meters per minute\n    time = total_distance / speed  # time in minutes for the train to cross the bridge\n    return time\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    operators = ['+', '*']\n    max_value = 0\n    \n    for ops in product(operators, repeat=3):\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    \n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_score = 63\n    correct_points = 8\n    incorrect_deduction = -3\n    total_questions = 12\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_deduction\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # Initialize the first two numbers of the sequence\n    a, b = 3, 10\n\n    # Initialize counter for the number sequence\n    counter = 2  # We already have the first two numbers\n\n    # Loop to iterate over the sequence till the 1997th term\n    while counter < 1997:\n        # The next term is the sum of the previous two terms\n        a, b = b, a + b\n        # Increment the counter\n        counter += 1\n\n    # The result is the last calculated term modulo 3\n    ans = b % 3\n\n    return ans\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # S_n = n/2 * (a_1 + a_n)\n    # S_5_first = 10 = 5/2 * (a_1 + a_5) => a_1 + a_5 = 4\n    # S_5_last = 120 = 5/2 * (a_56 + a_60) => a_56 + a_60 = 48\n    # In an arithmetic sequence: a_5 = a_1 + 4d and a_56 = a_1 + 55d\n    # since a_60 = a_1 + 59d, then a_56 + a_60 = 2*a_1 + 114d \n    # So we have the equations: a_1 + a_1 + 4d = 4 and 2*a_1 + 114d = 48\n    # We can solve this system of equations to find a_1 and d\n\n    a_1_plus_a_5 = 4\n    a_56_plus_a_60 = 48\n\n    # a_1 + (a_1 + 4d) = 4 => 2*a_1 + 4d = 4 => a_1 + 2d = 2  [Equation 1]\n    # a_1 + 55d + (a_1 + 59d) = 48 => 2*a_1 + 114d = 48       [Equation 2]\n    # Solving equation 1 for a_1: a_1 = 2 - 2d\n    # Substitute a_1 in equation 2: 2*(2 - 2d) + 114d = 48 => 4 - 4d + 114d = 48\n    # 110d = 44 => d = 44 / 110 => d = 2/5\n    d = 2/5\n    # Now, find a_1 using a_1 = 2 - 2d: a_1 = 2 - 2*(2/5)\n    a_1 = 2 - 2*(2/5)\n    # Now, find the sum of the 60 numbers\n    # S_60 = 60/2 * (a_1 + a_60) => S_60 = 30 * (a_1 + (a_1 + 59d))\n    # S_60 = 30 * (2*a_1 + 59d)\n    a_60 = a_1 + 59*d\n    S_60 = 30 * (a_1 + a_60)\n    \n    return S_60\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Assume Peter initially had 'p' stickers.\n    # Then Sam initially had 'p + 40' stickers.\n    p = symbols('p')\n    \n    # After the exchange:\n    # Sam has 'p + 40 - 0.20 * (p + 40) + 0.25 * p'\n    # Peter has 'p - 0.25 * p + 0.20 * (p + 40)'\n    # The difference is now 96 stickers.\n    equation = Eq(p + 40 - 0.20 * (p + 40) + 0.25 * p - (p - 0.25 * p + 0.20 * (p + 40)), 96)\n    \n    # Solve the equation.\n    solution = solve(equation, p)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current, hazel_18th, mom_18th, mom_current = symbols('hazel_current hazel_18th mom_18th mom_current')\n    # Hazel's age after 12 years will be three times her current age\n    equation1 = Eq(hazel_current + 12, 3 * hazel_current)\n    # On Hazel's 18th birthday, her mom will be three times Hazel's age then\n    equation2 = Eq(mom_18th, 3 * hazel_18th)\n    # Hazel's age on her 18th birthday will be 18\n    equation3 = Eq(hazel_18th, 18)\n    # Relationship between mom's current age and her age on Hazel's 18th birthday (which is in the future)\n    equation4 = Eq(mom_current, mom_18th - (18 - hazel_current))\n\n    solutions = solve((equation1, equation2, equation3, equation4), (hazel_current, hazel_18th, mom_18th, mom_current))\n\n    return solutions[mom_current]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_to_n = n * (n + 1) // 2\n    ans = sum_to_n ** 2\n    return ans\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers in the deck, for consecutive numbers\n    # we would need to draw at least one from each of the number groups plus one to ensure\n    # that we have two consecutive numbers. This is due to the Pigeonhole Principle.\n    num_groups = 13\n    cards_to_draw = num_groups + 1  # Draw one from each group, plus one more\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # The fifth sheet will have four sheets before it\n    # Each sheet contains 4 page numbers since there are 2 on each side\n    pages_per_sheet = 4\n\n    # The 5th sheet will thus start from 4 * 4 + 1 = 17th page\n    fifth_sheet_start_page = pages_per_sheet * 4 + 1\n\n    # The sheet will contain pages 17, 18 on one side\n    # and the sum of page numbers on the other side will be\n    # the difference between total number of pages (36)\n    # and current sheet's first page + 1\n    other_side_pages_sum = (36 - fifth_sheet_start_page + 1) + (36 - fifth_sheet_start_page)\n\n    # The total sum on the fifth sheet\n    fifth_sheet_sum = fifth_sheet_start_page + fifth_sheet_start_page + 1 + other_side_pages_sum\n\n    return fifth_sheet_sum\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    laptops = symbols('laptops')\n    \n    # Original cost price per laptop\n    original_cost_per_laptop = symbols('original_cost_per_laptop')\n\n    # Selling price\n    selling_price = 2000\n    \n    # Profit equation before cost price decrease\n    original_profit = 60000\n\n    # New cost price per laptop after a 20% decrease\n    new_cost_per_laptop = original_cost_per_laptop * 4 / 5\n\n    # New total profit is a 30% increase\n    new_profit = original_profit * 1.3\n\n    # Profit equations\n    # Original profit equation: laptops * (selling_price - original_cost_per_laptop) = original_profit\n    original_profit_eq = Eq(laptops * (selling_price - original_cost_per_laptop), original_profit)\n    \n    # New profit equation: laptops * (selling_price - new_cost_per_laptop) = new_profit\n    new_profit_eq = Eq(laptops * (selling_price - new_cost_per_laptop), new_profit)\n    \n    # Solve the system of equations\n    solutions = solve((original_profit_eq, new_profit_eq), (laptops, original_cost_per_laptop))\n\n    return solutions[laptops]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate sum of arithmetic sequence:\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for i in range(1, 130):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100  # concentration in percentage\n    return concentration\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    from sympy import symbols, Eq, solve, lcm\n\n    # Declare the variables for remainders\n    r1, r2, r3, r4 = symbols('r1 r2 r3 r4')\n    \n    # Define the equations based on the problem conditions\n    # Arithmetic sequence increasing pattern means r2 - r1 == r3 - r2 == r4 - r3\n    # We also know that the remainders when M is divided by 7, 9, and 28 have to be less than 7, 9, and 28 respectively\n    equation1 = Eq(r2 - r1, r3 - r2)\n    equation2 = Eq(r3 - r2, r4 - r3)\n    equation3 = Eq(r1, r4 % 7)\n    equation4 = Eq(r2, r4 % 9)\n\n    # Solve the system of equations for the remainders\n    remainder_solution = solve((equation1, equation2, equation3, equation4), (r1, r2, r3, r4), dict=True)\n\n    # The least common multiples of 7, 9, and 28\n    lcm_values = lcm(7, 9, 28)\n\n    # Find the set of possible 'a' values, which must be a divisor of the lcm that is not 7, 9, or 28\n    possible_a_values = [i for i in range(1, lcm_values) if lcm_values % i == 0 and i not in [7, 9, 28]]\n\n    # Find the smallest M that satisfies the conditions for each 'a' and choose the smallest 'M' across all 'a'\n    min_M = float('inf')\n    for a_value in possible_a_values:\n        for sol in remainder_solution:\n            # Check if this solution is valid for the current value of 'a'\n            if sol[r4] % a_value == sol[r3] and all(r < div for r, div in zip(sol.values(), [7, 9, a_value, 28])):\n                M = sol[r4] + lcm_values - a_value\n                # Update the minimal M\n                if M < min_M:\n                    min_M = M\n\n    return min_M\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # first calculate the work rate (trench per man per day)\n    rate_per_man_per_day = 120 / (3 * 2)\n    \n    # then based on that, calculate the number of days four men would take\n    days_for_880_metres = 880 / (4 * rate_per_man_per_day)\n    \n    return days_for_880_metres\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n\n    # Total work done by Ellie during the 4 weeks\n    ellie_work = combined_weeks * ellie_rate\n\n    # Total remaining work for Gloria\n    gloria_work = total_people - ellie_work\n\n    # Rate at which Gloria and Ellie together finish the work\n    combined_rate = total_people / combined_weeks\n\n    # Gloria's individual rate\n    gloria_rate = combined_rate - ellie_rate\n\n    # Time taken for Gloria to do the work by herself\n    gloria_time = gloria_work / gloria_rate\n\n    # Gloria will take 10 weeks to finish the interviews by herself\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # Let the side length of the square array be n (boys have an even number of layers).\n    # This means there are n rows of n boys each on the outermost layer,\n    # (n-2) rows of (n-2) each on the next layer, and so on.\n    # The total number of boys B and girls G can be calculated by summing the squares of\n    # even and odd numbers respectively, from 1 up to n, considering n an even number.\n   \n    # We will search for the correct n where the difference between B and G is 36.\n    for n in range(2, 1000, 2):  # Start from 2 to have boys on the outside, increment by 2\n        boys = sum((2*i)**2 for i in range(1, n//2 + 1))\n        girls = sum((2*i - 1) ** 2 for i in range(1, n//2 + 1))\n        \n        if boys - girls == 36:\n            # Once we found the right n, calculate the total number of students.\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = (2 / 5) * 15\n    return numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books moved from the first shelf to the second shelf.\n    # After moving the books, the first shelf will have (18 - x) books\n    # and the second shelf will have (24 + x) books.\n\n    # We want the second shelf to have twice as many books as the first shelf.\n    # So, we set up the equation: 24 + x = 2 * (18 - x)\n    # Solving for x gives us the number of books to be moved.\n\n    x = (24 - 18) / (2 - 1)  # Simplified version of the equation: (24 - 18) / (2 - 1) = x\n    return int(x)\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    mixed_numbers = [(285, 6, 7), (181, 10, 11), (153, 12, 13)]\n    fractions = [7, 11, 13]\n\n    # Convert mixed numbers to improper fractions and sum them up\n    numerator_sum = sum([a * c + b for a, b, c in mixed_numbers])\n    denominator_product = 1\n    \n    # Calculate the denominator for the sum of fractions on the right side of the division\n    for fraction in fractions:\n        denominator_product *= fraction\n    \n    right_side_sum = sum([denominator_product // fraction for fraction in fractions])\n    \n    # Calculate final result\n    ans = numerator_sum / right_side_sum\n    \n    return ans\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_taken = 20  # in seconds\n    distance = 300  # in meters\n\n    speed = distance / time_taken  # in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # We will search for a number of lollipops that satisfies both conditions\n    for lollipops in range(32, 1000):  # We start at 32 because it's the smallest number of leftover lollipops\n        if (lollipops - 32) % 4 == 0 and (lollipops - 3) % 7 == 0:\n            return lollipops\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils in the class.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') \n\n    # Setting up the equation according to the problem statement:\n    # 5 pupils are in the band, so remaining pupils are x - 5\n    # 3/4 of the remaining pupils are in the choir, hence (3/4)*(x - 5) are in the choir\n    # 2/9 of the class are neither in the band nor the choir, so (2/9)*x are neither\n    # The sum of pupils in the band, choir and neither should be the total number of the class, x\n    \n    equation = Eq(5 + (3/4)*(x - 5) + (2/9)*x, x)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # The solution x needs to be an integer number of pupils, so we return the integer value\n    return int(solution[0])\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum(x**3 for x in numbers)\n    return ans\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    # Let x be the number of long tubes and y be the number of short tubes.\n    # Then, we have the following equations:\n    # 8x + 5y = 47, since the total number of balls is 47.\n    # We want to find x such that the equation is satisfied and both x and y are integers.\n    \n    total_balls = 47\n    long_tube_capacity = 8\n    \n    # The maximum possible number of long tubes can be found by dividing\n    # the total balls by the long tube capacity.\n    max_long_tubes = total_balls // long_tube_capacity\n    \n    # Now, we need to find a valid combination where the remaining balls fit into short tubes\n    for x in range(max_long_tubes, -1, -1):  # Start from max and go down to 0\n        remaining_balls = total_balls - (long_tube_capacity * x)\n        if remaining_balls % 5 == 0:  # Check if the remainder can be divided by the short tube capacity\n            return x  # We found the number of long tubes\n\n    # If no solution is found, return None (although there should be an answer according to the problem statement)\n    return None\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # The common difference (d) of the arithmetic sequence can be calculated using the formula:\n    # an = a1 + (n-1)d\n    # Where an is the nth term, a1 is the first term, and d is the common difference\n    # For the 9th term: a9 = a1 + 8d\n    # For the 3rd term: a3 = a1 + 2d\n    # Therefore, we have two equations:\n    # 26 = a1 + 8d\n    # 8 = a1 + 2d\n    # By subtraction, we can find d:\n    common_difference = (ninth_term - third_term) / (9 - 3)\n\n    # Now we need to find the first term (a1):\n    first_term = third_term - (3 - 1) * common_difference\n\n    # Finally, we calculate the 11th term:\n    eleventh_term = first_term + (n - 1) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let's denote the initial number of bracelets Felicia had as F.\n    # After selling 3/5 of her bracelets, Felicia has 2/5 F left.\n    # Let J denote the initial number of bracelets Janice had, which is given as 96.\n    # Janice buys 2/5 of the 3/5 F bracelets sold by Felicia, which is (2/5) * (3/5) * F = (6/25) * F.\n    # After the transaction, Felicia has (2/5) * F bracelets, and Janice has 96 + (6/25) F bracelets.\n    # The ratio of the number of Felicia's bracelets to the number of Janice's bracelets becomes 5:7.\n    # Therefore, (2/5) * F / (96 + (6/25) * F) = 5/7\n    # Solving for F (Felicia's initial number of bracelets) gives us F = (5/7) * (96 + (6/25) * F) * (5/2)\n    \n    from sympy import symbols, Eq, solve\n\n    F = symbols('F')  # Felicia's initial number of bracelets\n    J = 96  # Janice's initial number of bracelets\n\n    # Equation representing the final ratio\n    eq = Eq((2/5) * F / (J + (6/25) * F), 5/7)\n    \n    # Solving the equation for F\n    F_value = solve(eq, F)[0]\n    \n    # Number of bracelets Janice bought from Felicia = (6/25) * F\n    bracelets_bought = (6/25) * F_value\n\n    return bracelets_bought\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15 / 100\n    discount_amount = original_price * discount_percentage\n    reduced_price = original_price - discount_amount\n\n    return reduced_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # The multiplication result without the decimal point\n    incorrect_result = 432 * 2138.4\n\n    # Divide by 100 to correct the decimal position (since 4.32 is 432/100)\n    correct_result = incorrect_result / 100\n\n    # Subtract the difference mentioned in the question\n    ans = correct_result - 2138.4\n\n    return ans\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    remainders = []\n    for a in range(2, min(2017, 2758 - 2017, 3670 - 2758)):\n        if (2017 % a) == (2758 % a) == (3670 % a):\n            remainders.append(a)\n    ans = sum(remainders)\n    return ans\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    equation2 = Eq(girls - boys, 8)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    B = symbols('B')\n    equation1 = Eq(B % 3, 1)\n    equation2 = Eq(B % 5, 2)\n    B_sol = solve((equation1, equation2), B)\n    minimum_B = min([val.evalf() for val in B_sol if val.is_integer and val > 0])\n    return int(minimum_B)\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age in 2008\n    grandmother_age_2008 = 80\n\n    # Mum's age in 1996\n    mum_age_1996 = 40\n\n    # Calculate grandmother's age when mum was born\n    # Number of years from mum's 40th birthday in 1996 to grandmother's 80th birthday in 2008\n    years_between = 2008 - 1996\n\n    # Mum was 40 years old 40 years after she was born, so we subtract 40 years to find her birth year\n    mum_birth_year = 1996 - 40\n\n    # Calculate the grandmother's age at mum's birth by subtracting the years between from grandmother's age in 2008\n    grandmother_age_when_mum_born = grandmother_age_2008 - years_between - 40\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of milk candy\n    # Let y be the original amount of fruit candy\n    x, y = symbols('x y')\n    \n    # Original ratio: 7x = 9y\n    equation1 = Eq(7*x, 9*y)\n    \n    # After eating 8 milk candies: (x - 8) / y = 2/3\n    # 3*(x - 8) = 2y\n    equation2 = Eq(3*(x - 8), 2*y)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x, y))\n    \n    # We want the value of x from the solution\n    return solution[x]\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    # Initialize variable to keep track of occurrences of the digit '3'\n    count_3 = 0\n\n    # Watson's sequence from 4 to 51\n    for number in range(4, 52):\n        # Convert the number to a string and count the occurrences of '3'\n        count_3 += str(number).count('3')\n\n    return count_3\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    initial_apples_per_friend = 4\n    additional_apples_per_friend = 1\n    total_initial_apples = 60\n    \n    num_friends = total_initial_apples // initial_apples_per_friend\n    total_apples_needed = (initial_apples_per_friend + additional_apples_per_friend) * num_friends\n    \n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # You need to take one from each of the other colors first to ensure worst case scenario.\n    red_socks = 10\n    black_socks = 10\n    # Now taking two white socks to make a pair.\n    white_socks_pair = 2\n    \n    # The most socks Yohan must take to guarantee a pair of white socks is the sum:\n    ans = red_socks + black_socks + white_socks_pair\n    return ans\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n    \n    for groups_of_6 in range(total_groups + 1):\n        groups_of_4 = total_groups - groups_of_6\n        if 6 * groups_of_6 + 4 * groups_of_4 == total_students:\n            return groups_of_6\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Let x be the number of lemonade bottles sold\n    # Let y be the number of 1000 Plus bottles sold\n    # Total bottles sold is x + y, which should be <= 350 (not all sold)\n    # Each lemonade sold for $4, so income from lemonade is 4x\n    # Each 1000 Plus sold for $7, so income from 1000 Plus is 7y\n    # Total income is $2012, so 4x + 7y = 2012\n    # We need to minimize y while fulfilling the condition 4x + 7y = 2012\n    # Since we're looking for the minimum y, let's start with y = 0 and increase until we find a solution that fits all conditions\n\n    y = 0\n    while True:\n        # Calculate the number of lemonade bottles sold\n        x = (2012 - 7 * y) / 4\n        # Check if x is an integer and x + y <= 350\n        if x.is_integer() and x + y <= 350:\n            return y\n        y += 1\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    metres = 0.52\n    centimetres_in_a_metre = 100\n    centimetres = metres * centimetres_in_a_metre\n    return centimetres\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0: # as A is the first digit of a 3-digit number, it cannot be 0\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    average_final = 90\n\n    # Total sum of first three numbers\n    sum_of_three = average_initial * 3\n    \n    # Total sum of all four numbers\n    sum_of_four = average_final * 4\n    \n    # The fourth number\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen to Oscar: 3 fish for 2 rabbits (3 fish / 2 rabbits)\n    owen_to_oscar_ratio = 3 / 2\n    \n    # Oscar to Dennis: 3 rabbits for 4 packs of wheat (3 rabbits / 4 packs of wheat)\n    oscar_to_dennis_ratio = 3 / 4\n    \n    # We want to find the direct ratio of fish to packs of wheat.\n    # So we multiply the two ratios to get a single ratio of fish to packs of wheat.\n    fish_to_wheat_ratio = owen_to_oscar_ratio * oscar_to_dennis_ratio\n    \n    # Now we find how many fish for 8 packs of wheat by setting up a proportion:\n    # fish_to_wheat_ratio = x fish / 8 packs of wheat\n    # Solving for x gives us:\n    x = fish_to_wheat_ratio * 8\n\n    return int(x)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' be the original price of the purse\n    purse_price_original = symbols('purse_price_original')\n    \n    # Given:\n    handbag_price_discounted = 428  # price after 20% discount\n    handbag_price_original = handbag_price_discounted / (1 - 0.20)  # original price = discounted price / (1 - discount rate)\n    \n    # 28% discount on purse price\n    purse_price_discounted = purse_price_original * (1 - 0.28)\n    \n    # Total discount for handbag and purse\n    total_discount = handbag_price_original * 0.20 + purse_price_original * 0.28\n    equation = Eq(total_discount, 121)\n\n    # Solve the equation\n    solution = solve(equation, purse_price_original)\n\n    return solution[0]\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    climb_distance = 4\n    slide_distance = 1\n    net_distance_per_day = climb_distance - slide_distance\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n  \n    return days\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # 0.A22A2... two digits repeating, each repeat contributes A+2 to the sum\n    repeats = 20 // 2 # number of complete sets of repeats in the first 20 digits\n    sum_of_digits = 80 # given sum of first 20 digits after the decimal point\n    sum_per_set = 10 * repeats # each complete set of A and 2 contributes 10\n    remainder_digits = 20 % 2 # remainder after complete sets\n    remainder_sum = A * remainder_digits\n\n    # Now set up the equation sum_per_set + remainder_sum = sum_of_digits\n    A = (sum_of_digits - sum_per_set) // repeats\n\n    return A\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate jogging time from 6:30 a.m. to 7:00 a.m. which is 0.5 hours\n    jogging_time = (7 - 6) - (30 / 60)\n    # Calculate jogging distance at speed of 6 miles per hour\n    jogging_distance = jogging_time * 6\n    \n    # Calculate walking time from 7:00 a.m. to 8:00 a.m. which is 1 hour\n    walking_time = (8 - 7)\n    # Calculate walking distance at speed of 5 miles per hour\n    walking_distance = walking_time * 5\n    \n    # Calculate total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let 'x' be the original amount of money Elvin had\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(x - 120 - 0.4 * (x - 120), 0.3 * x)\n\n    # Solve the equation for 'x'\n    original_amount = solve(equation, x)\n\n    # Return the solution\n    return original_amount[0]\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Applying the Pigeonhole Principle, where books are pigeons and layers are pigeonholes\n    # At least one layer (pigeonhole) will have:\n    # Ceiling of (total_books / layers) books\n    # In other words, you divide the books equally and the remaining ones go one each into the layers\n    min_books_in_most_filled_layer = (total_books + layers - 1) // layers\n\n    return min_books_in_most_filled_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    # Initialize a counter for the number of ways\n    count = 0\n    \n    # Loop over each place of the three-digit number\n    for hundreds in range(1, 4): # hundreds place can be 1, 2, or 3 (can't be 0)\n        for tens in range(0, 4): # tens place can be 0, 1, 2, or 3\n            for ones in range(0, 4): # ones place can also be 0, 1, 2, or 3\n                # Check that all digits are different\n                if len(set([hundreds, tens, ones])) == 3:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # Negative since the sequence is decreasing\n    # an = a1 + (n-1)d where an < 0 for the first negative term\n    # 0 > 50 + (n-1)(-4)\n    # (n-1)(-4) < -50\n    # n-1 > 12.5\n    # n > 13.5, since n must be an integer, we take the ceiling value\n    n = 14  # the term after the 13th will be the first negative one\n    return n\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30-a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            count += 1\n            i = i / 5\n    return count\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    # Let x be the number of books bought initially at $3.50 each.\n    # Let T be the total cost of the initial x books.\n    # Initial average price = T/x = $3.50\n    # After buying 2 more books at $6 each:\n    # New total cost = T + 2 * $6\n    # New total number of books = x + 2\n    # New average price = (T + 2 * $6) / (x + 2) = $4\n    \n    # We can set up the equations based on the above information:\n    # T = x * $3.50\n    # (T + $12) / (x + 2) = $4\n    \n    # Substituting the first equation into the second gives us:\n    # ($3.50x + $12) / (x + 2) = $4\n    # Multiplying both sides by (x + 2) to get rid of the denominator yields:\n    # $3.50x + $12 = $4(x + 2)\n    # $3.50x + $12 = $4x + $8\n    # $12 - $8 = $4x - $3.50x\n    # $4 = $0.50x\n    # x = $4 / $0.50\n    # x = 8\n    \n    # Thus, Ahmad bought 8 books initially.\n    # Adding the other 2 books he bought later, the total is:\n    ans = 8 + 2\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_in_kg = 1.2\n    piece_weight_in_g = 30\n    \n    total_pieces = (weight_in_kg * 1000) / piece_weight_in_g\n\n    return int(total_pieces)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 quart is approximately 0.946353 liters\n    coke_liters = 2.5\n    cup_quarts = 0.5\n    cup_liters = cup_quarts * 0.946353\n\n    # Calculate the number of cups\n    num_cups = coke_liters / cup_liters\n    return round(num_cups)\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of sweet wrappers Belle has as 'b'\n    # According to the problem, Angel had 5/6 as many sweet wrappers as Belle initially\n    # Then Angel threw away 58 sweet wrappers, and she had 75% as many sweet wrappers as Belle\n    angel, belle = symbols('angel belle')\n\n    # Initial state: Angel has 5/6 of Belle's sweet wrappers\n    equation1 = Eq(angel, 5/6 * belle)\n\n    # Final state: After throwing away 58, Angel has 75% (3/4) as many as Belle\n    equation2 = Eq(angel - 58, 3/4 * belle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Star jogs from 6:30 AM to 7:30 AM, which is 1 hour\n    jogging_time = 1\n\n    # Star walks from 7:30 AM to 9:30 AM, which is 2 hours\n    walking_time = 2\n    \n    # Star's speed while jogging is 6 miles per hour\n    jogging_speed = 6\n\n    # Star's speed while walking is 5 miles per hour\n    walking_speed = 5\n    \n    # Calculate distance jogged\n    distance_jogged = jogging_speed * jogging_time\n    \n    # Calculate distance walked\n    distance_walked = walking_speed * walking_time\n    \n    # Total distance is the sum of distances jogged and walked\n    total_distance = distance_jogged + distance_walked\n    \n    return total_distance\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares / 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    # If there was 20p more, each child would receive 70p\n    equation1 = Eq(children * 70, (children * 60) + 20)\n    # If each child receives 60p, 2.10 pounds would be left over\n    equation2 = Eq(children * 60, (children * 70) - 210)\n\n    solutions = solve((equation1, equation2), (children))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n    \n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n    \n    return bank_charge\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current_age, son_current_age = symbols('dad_current_age son_current_age')\n\n    # Let's define the equations based on the problem statement\n    # Six years ago, dad's age was 5 times the son's age\n    equation1 = Eq(dad_current_age - 6, 5 * (son_current_age - 6))\n    \n    # The sum of the dad's and son's ages is 78\n    equation2 = Eq(dad_current_age + son_current_age, 78)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (dad_current_age, son_current_age))\n\n    return solutions[dad_current_age]\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    initial_amount = -76.20\n    payment_amount = 120.75\n    final_amount = initial_amount + payment_amount\n    return final_amount\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Known values\n    B, D = 2, 0\n    # Range of possible digits for A, C, E, F\n    digits = set(range(10)) - {B, D}\n    \n    for A in digits:\n        for C in digits - {A}:\n            for E in digits - {A, C}:\n                for F in digits - {A, C, E}:\n                    ABCDEF = A*100000 + B*10000 + C*1000 + D*100 + E*10 + F\n                    EFABCD = E*100000 + F*10000 + A*1000 + B*100 + C*10 + D\n                    # Check if the given condition is satisfied\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        # Return the number represented by \"FACE\"\n                        return A * 1000 + C * 100 + A * 10 + E\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len({vase1, vase2, vase3}) == 3:\n                    count += 1\n    return count // 6  # Dividing by 6 because of the permutations of vases\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # Iterate through possible numbers with 9 in the units column\n    for i in range(1, 10**6):  # Assume number is less than a million\n        original_number = i * 10 + 9\n        modified_number = int(str(9) + str(i))\n        \n        # Check if the modified number is four times the original number\n        if modified_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is at the left end, Avril is next to Eddie, so treat Eddie and Avril as one unit\n    # Now we have 6 units to arrange (5 students + the Eddie-Avril unit)\n    units = 5  \n\n    # Calculate the permutations for these 6 units\n    units_permutations = factorial(units)\n\n    # Avril can be on either side of Eddie, so there are 2 ways to arrange Eddie and Avril within their unit\n    avril_permutations = 2  \n\n    # Apply the multiplication principle\n    total_permutations = units_permutations * avril_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2 Mar', '%d %b')\n    end_date = datetime.strptime('15 Apr', '%d %b')\n    delta = end_date - start_date\n\n    # Adjusting the end date for the year difference by adding days of March and Leap Year check\n    days_in_march = 31 - start_date.day + 1  # Adding one day because the start date is inclusive\n    leap_year_adjustment = 1 if ((end_date.year % 4 == 0 and end_date.year % 100 != 0) or (end_date.year % 400 == 0)) else 0\n    total_days = days_in_march + delta.days + leap_year_adjustment\n\n    return total_days\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    base_price = 200\n    percentage_increase = 45\n\n    price_2021 = base_price * (1 + percentage_increase / 100)\n\n    return price_2021\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # We use the pigeonhole principle to determine the smallest number of gloves required.\n    # There are two categories of gloves: blue and green.\n    # For blue gloves, there's 1 left and 3 right, so a maximum of 4 blue gloves could be all of different types.\n    # For green gloves, there's 2 left and 4 right, so a maximum of 5 green gloves could be all different.\n    # Hence, if Dilly takes 5 green gloves, there's a certainty of at least 1 matching green pair,\n    # but to be absolutely sure of a matching pair (whether blue or green),\n    # Dilly should take one more glove than the maximum from all different gloves.\n    \n    max_different_gloves = 5  # maximum of different green gloves\n    ans = max_different_gloves + 1  # taking 1 more to ensure a matching pair\n    return ans\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # First, calculate the number of holes needed to be dug based on 3m intervals\n    original_interval = 3\n    circumference = 300\n    number_of_holes_at_3m = 30  # already dug\n\n    # Calculate number of holes after changing to 5m intervals\n    new_interval = 5\n    # The total number of holes is the circumference divided by the new interval\n    total_number_of_holes = int(circumference / new_interval)\n\n    # Calculate the additional holes needed after the change\n    additional_holes_needed = total_number_of_holes - number_of_holes_at_3m\n\n    return additional_holes_needed\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    num_pastas = 2\n    num_sauces = 3\n    num_toppings = 2\n\n    ans = num_pastas * num_sauces * num_toppings\n\n    return ans\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Calculate the number of ways to reach the 5th step\n    # It's similar to Fibonacci sequence\n    def ways_to_reach(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_reach(n-1) + ways_to_reach(n-2)\n\n    # Ways to reach the 5th step\n    ways_to_5 = ways_to_reach(5)\n    # Ways to reach the 10th step from the 5th step (like starting from the first step to reach the 6th as there are 5 more steps)\n    ways_from_5_to_10 = ways_to_reach(6)\n\n    # The total number of ways to climb to the 10th step, stepping on the 5th step\n    total_ways = ways_to_5 * ways_from_5_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the number of sweets for Rachel and Alice\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 sweets, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If they both eat 8 sweets, Rachel has 3 times as many as Alice\n    equation2 = Eq((rachel - 8) / 3, (alice - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # The total originally is the sum of Rachel's and Alice's sweets\n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i) for i in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    num_cookies = 1\n    while True:\n        if num_cookies % 3 == 1 and num_cookies % 4 == 3 and num_cookies % 5 == 4:\n            return num_cookies\n        num_cookies += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for number in range(1, 51):\n        if '3' in str(number):\n            erased_sum += number\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits = 792\n    total_pages = 0\n    num_digits = 1\n\n    while digits > total_pages * num_digits:\n        digits -= total_pages * num_digits\n        total_pages += 9 * (10 ** (num_digits - 1))\n        num_digits += 1\n\n    num_full_pages = digits // num_digits\n    total_pages += num_full_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_first_four = 89\n    billy_target = ivan_average + 10  # Billy wants 10 more than Ivan's average\n\n    # Ivan's total score for 5 assignments\n    ivan_total = ivan_average * 5\n\n    # Billy's total score for first 4 assignments\n    billy_total_first_four = billy_average_first_four * 4\n\n    # Billy's total target score after 5 assignments\n    billy_target_total = billy_target * 5\n\n    # Score Billy needs in the fifth assignment\n    score_needed = billy_target_total - billy_total_first_four\n\n    return score_needed\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    first = 39 - (7 - 1) * 5\n    hundredth = first + (100 - 1) * 5\n    return hundredth\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    sum_to_reach = 1000\n    # We can start from 1 since 0 + 1000 is considered trivial and does not follow\n    # the format of (number) + (number) since one number would be 0.\n    # We can go up to 499, because after that the pairs would start repeating,\n    # e.g., 500+500, 501+499, 502+498... are the same as their counterparts below 500.\n    count = sum_to_reach // 2\n    return count\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + (2 * peaches)\n    return apples\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Without brackets, the original expression is evaluated as follows:\n    # 15 + 5*5 + 15 - 6 + 7 = 15 + 25 + 15 - 6 + 7 = 56\n    # To maximize the result, we want to maximize the multiplication and addition part.\n    # We should put one pair of the brackets around \"5*5\" to ensure it's evaluated first,\n    # and we can either add brackets to include the first 15 or the last two terms.\n    # Let's evaluate both options:\n    \n    # Option 1: (15 + 5) * (5 + 15) - 6 + 7 => 20 * 20 - 6 + 7 => 400 + 1 => 401\n    option_1 = (15 + 5) * (5 + 15) - 6 + 7\n    \n    # Option 2: 15 + (5 * (5 + 15)) - 6 + 7 => 15 + 5 * 20 - 6 + 7 => 15 + 100 + 1 => 116\n    option_2 = 15 + (5 * (5 + 15)) - 6 + 7\n    \n    # Option 3: 15 + 5 * (5 + (15 - 6) + 7) => 15 + 5 * 21 => 15 + 105 => 120\n    option_3 = 15 + 5 * (5 + (15 - 6) + 7)\n    \n    # We do not need to check options with brackets around subtraction or around a single term, \n    # as they will not lead to a larger result than multiplication by a larger sum.\n    # Therefore, the largest result comes from the first option:\n    ans = max(option_1, option_2, option_3)\n    \n    return ans\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(3, 28*7, 28):\n        if i % 4 == 3 and i % 7 == 3:\n            return i % 28\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import isqrt\n\n    m = 1260\n    factors = [2, 3, 5, 7]  # Prime factors of 1260\n    powers = [0, 0, 0, 0]  # Powers of prime factors to make `m` a perfect square\n\n    # Calculate prime factors of `m` and their powers\n    for i in range(len(factors)):\n        while m % factors[i] == 0:\n            powers[i] += 1\n            m = m // factors[i]\n\n    # Multiply `m` by missing factors to make it a perfect square\n    for i in range(len(powers)):\n        if powers[i] % 2 != 0:  # Check if the power is odd\n            m *= factors[i]\n\n    return m\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = -(-students // boat_capacity)\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    from sympy import lcm\n\n    # Find the least common multiple of 8 and 11\n    lcm_8_11 = lcm(8, 11)\n\n    # Check two-digit numbers that when divided by the lcm give a remainder of 6\n    number = 6  # starting with the remainder\n    while number < 100:  # checking only two-digit numbers\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n        number += lcm_8_11\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base_one_digit = 9  # The ones digit of the base (9)\n    pattern = [base_one_digit]\n    current = base_one_digit\n\n    # Find the pattern of ones digits when base is raised to consecutive powers\n    for i in range(1, 10):  # Calculate up to an arbitrary cycle limit\n        current = (current * base_one_digit) % 10  # Only keep the ones digit\n        if current in pattern:  # If the pattern is repeating, stop\n            break\n        pattern.append(current)\n\n    # Length of the repeating pattern\n    pattern_length = len(pattern)\n    \n    # Since 99 is the power, modulo by the pattern length to find underlying pattern index\n    index = (99 - 1) % pattern_length  # Subtract 1 because the pattern is 0-indexed\n\n    # The ones digit of the final result\n    ones_digit = pattern[index]\n\n    return ones_digit\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = pow(2, 2015) % 3\n    return remainder\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    stickers_given = 9\n\n    stickers_left = (animal_stickers + fruit_stickers) - stickers_given\n\n    return stickers_left\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    result += 50  # Reverse of step (5)\n    \n    # Reverse of step (4), we need to find the day modulo 100 because step (4) involves adding the day twice\n    day = result % 100\n    result //= 100  # This is the result after step (3)\n\n    # Since the result of step (3) was multiplied by 50, we reverse that operation\n    result //= 50  # Reverse of step (3)\n\n    # Now we reverse step (2)\n    result -= 1\n\n    # Finally we reverse step (1) by dividing by the multiplier 4\n    month = result // 4\n\n    # According to the problem, the month is a number between 1 and 12, and the day is between 1 and 31\n    # We must ensure that these values are valid, otherwise there is some mistake\n    if 1 <= month <= 12 and 1 <= day <= 31:\n        return (month, day)\n    else:\n        return \"Invalid result\"\n\n# Store the answer by calling the function\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n    \n    # Consider the four pupils who insist on standing together as a single unit.\n    # Now we have 5 units to arrange (the single unit + 4 individual pupils)\n    units_arrangement = factorial(5)\n    \n    # The four pupils can be permuted among themselves in the single unit.\n    pupils_permutation = factorial(4)\n    \n    # The total number of ways is the product of the arrangements of units\n    # and the permutations within the single unit.\n    total_ways = units_arrangement * pupils_permutation\n    \n    return total_ways\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # If x is the smallest number, then the consecutive numbers are x, x+1, and x+2.\n    # Their sum is 3x + 3 = 60.\n    # Thus, 3x = 57, x = 19.\n    # The largest number is then x+2.\n    x = (60 - 3) // 3\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g represent the number of gold medals\n    # Let s represent the number of silver medals\n    # Create a system of equations based on the problem statement\n    # g + s = 80\n    # 5g + 4s = 331\n\n    # We can solve for g by substituting s from the first equation into the second\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    g = (331 - 320) // 1  # Solve for the number of gold medals\n\n    return g\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total value of the five other ponies\n    x = symbols('x')\n    \n    # Rein Beau's value\n    rein_beau_value = 250000\n    \n    # Initially, the small stable's average value = (x + rein_beau_value) / 3\n    # Initially, the large stable's average value = x / 3\n    \n    # After Rein Beau moves to the large stable:\n    # New small stable's average value = x / 2\n    # New large stable's average value = (x + rein_beau_value) / 4\n    \n    # The average value of the ponies in each stable rose by Â£10,000 after the move\n    equation = Eq((x + rein_beau_value) / 4 - x / 3, 10000)\n    \n    # Solve for x to find the value of the five other ponies\n    total_value_of_other_ponies = solve(equation, x)[0]\n    \n    # Total value of all the ponies\n    total_value = total_value_of_other_ponies + rein_beau_value\n    \n    return total_value\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb_per_kg = 8.70\n    cost_of_beef_per_kg = 9.40\n    total_cost = cost_of_lamb_per_kg * 7 + cost_of_beef_per_kg * 30\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 // 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    men_portion_of_remainder = 5/8\n    children_portion = 1/3\n    remainder_portion = 1 - children_portion\n\n    men_and_women_portion_of_remainder = 1 - men_portion_of_remainder\n    women_portion_of_remainder = remainder_portion * men_and_women_portion_of_remainder\n\n    total_spectators = women / women_portion_of_remainder\n\n    return int(total_spectators)\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work rate of a master per day and a be the work rate of an apprentice per day\n    m, a = symbols('m a')\n\n    # Formulate the equations based on the given information\n    # 1 master and 3 apprentices working for 4 days to complete 1 task\n    equation1 = Eq(1 * m * 4 + 3 * a * 4, 1)\n    # 2 masters and 1 apprentice working for 3 days to complete 1 task\n    equation2 = Eq(2 * m * 3 + 1 * a * 3, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Find how long it will take 1 apprentice to complete the task alone\n    time_for_apprentice_alone = 1 / solutions[a]\n\n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    ans = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return ans\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Since we have 5â2 = 8, which is 5 (larger number) multiplied by 2 (smaller number) minus 2,\n    # and we have 2â5 = 5, which is 5 (larger number) divisible by 2 (smaller number) then add 3,\n    # it seems like the operation \"â\" is defined by:\n    # aâb = a * b - min(a, b) if a != b\n    # aâb = a / b + 3 if a == b\n    # However, none of the provided operations have the same number for both operands,\n    # so we do not have an example of the second case.\n    # By applying the logic to 11â10, assuming \"â\" is defined as a * b - min(a, b):\n\n    a, b = 11, 10\n    if a == b:\n        return a / b + 3\n    else:\n        return a * b - min(a, b)\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # As per the given question, refer the position of dolls related to each other:\n    # (number of dolls to the left of Elephant) + 1 (for Elephant) + 5 (between Elephant and Rabbit) + 1 (for Rabbit) + (number of dolls to the right of Rabbit) = total number of dolls\n    # According to the statement, Elephant is at the 10th position from the left and Rabbit is at the 9th position from the right.\n    # Since there is no overlap of positions mentioned, Elephant being at the 10th position implies there are 9 dolls to its left.\n    # Similarly, Rabbit being at the 9th position from the right implies there are 8 dolls to its right.\n    # Thus, the total number of dolls can be calculated as follows:\n    total_dolls = 9 + 1 + 5 + 1 + 8\n    return total_dolls\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    prime_sum = sum(primerange(50, 61))\n\n    return prime_sum\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses, d be the original number of daisies\n    # r + d = 300 (total flowers now)\n    # r + t = 280 (roses after t months)\n    # d + t = 180 (daisies after t months)\n    r, d, t = symbols('r d t')\n    equation1 = Eq(r + d, 300)\n    equation2 = Eq(r + t, 280)\n    equation3 = Eq(d + t, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, d, t))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    \n    non_english_books = total_books - english_books\n    comics = non_english_books / 3\n    \n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n\n    # Find the common difference in the sequence\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n\n    # Calculate the first number in the sequence\n    first_number = tenth_number - common_difference * (10 - 1)\n\n    # Calculate the 102nd number in the sequence\n    one_hundred_second_number = first_number + common_difference * (102 - 1)\n\n    return one_hundred_second_number\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    def boys_and_girls_in_layer(n):\n        if n % 2 == 0:  # even layer number => boys\n            boy_count = 4 * (n - 1)\n            girl_count = 0\n        else:  # odd layer number => girls\n            boy_count = 0\n            girl_count = 4 * (n - 1)\n        return boy_count, girl_count\n    \n    students = 0\n    layer = 0\n    total_boys = 0\n    total_girls = 0\n    \n    while True:\n        boys, girls = boys_and_girls_in_layer(layer + 1)\n        total_boys += boys\n        total_girls += girls\n        students += boys + girls\n        \n        if total_boys - total_girls == 32:\n            # Add the boys from the outermost layer and return\n            students += (layer + 1) * 4\n            return students\n            \n        layer += 1\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    \n    coffee_amount = 6\n    total_amount = coffee_amount * (total_ratio / coffee_ratio)\n    \n    return total_amount\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_shots = accurate_shots + missed_shots\n    \n    total_score = accurate_shots * score_per_accurate_shot\n    average_score = total_score / total_shots\n    \n    return average_score\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = ((1/30 + 1/6) / (2/25)) + ((2 - 2/3) / (8/3))\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Initial distribution of 1 apple to each child\n    min_apples = 8\n    remaining_apples = 50 - min_apples\n    # Number of children\n    children = 8\n    # Distribute remaining apples one by one to avoid duplicates\n    for i in range(children - 1):\n        remaining_apples -= i\n\n    # The child with the most apples will get the remaining apples plus one\n    max_apples = remaining_apples + 1\n    return max_apples\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    # Iterate over possible ways to split the number 8\n    for i in range(1, 8):\n        for j in range(1, 8 - i):\n            k = 8 - (i + j)\n            if k > 0:\n                if (i != j) and (i != k) and (j != k):\n                    count += 1\n    # Divide by 6 for the unique arrangements of three numbers (3! = 6)\n    return count // 6 + 7  # Add 7 for the cases where 8 is split into two numbers\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    per_box = 12\n    \n    boxes_needed = (total_eggs + per_box - 1) // per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n    \n    # Assuming all men with bow ties also wear spectacles, we subtract from total\n    min_wearing_both = max(0, bow_ties + spectacles - total_men)\n    \n    # Subtract the total number of men by those wearing either and get the maximum not wearing any\n    max_neither = total_men - (bow_ties + spectacles - min_wearing_both)\n    \n    return max_neither\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.5 * 0.2 * 350\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return 414 * (1/3)\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols\n    red, blue, green = symbols('red blue green')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(red + blue + green, 112)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, blue, green))\n    \n    # Returning the number of blue marbles\n    return solutions[blue]\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Ratio of fish to rabbit\n    fish_to_rabbit = 3 / 2\n    # Ratio of rabbit to packs of wheat\n    rabbit_to_wheat = 3 / 4\n\n    # Combined ratio of fish to packs of wheat\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Calculate how many fishes for 8 packs of wheat\n    fishes_for_8_wheat = 8 / fish_to_wheat\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Treat Ali and Bala as one person since they must stand together,\n    # so there are effectively 4 \"people\" to arrange\n    arrangements_of_4 = factorial(4)\n\n    # Ali and Bala can switch places between themselves\n    ali_bala_switches = factorial(2)\n\n    # Since Dan must stand at the furthest left\n    # We consider that position fixed, reducing the number of arrangements\n    # But Ali and Bala must stand together, so they can stand in 3 different positions (after Dan)\n    ali_bala_positions = 3\n\n    total_arrangements = arrangements_of_4 * ali_bala_switches * ali_bala_positions\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since the distribution is unique and each child must get at least one apple,\n    # let's start by giving each child one apple.\n    # We have now 19 - 5 = 14 apples left to distribute.\n    # We want to maximize the number of apples for the child who gets the most\n    # while keeping the distribution unique (no two children can get the same number of apples).\n    # To do this, we should give the next highest possible number of apples to the remaining children.\n    # If we have 5 children and they must have different amounts, we can look at the situation as follows:\n    # Child 1 gets 1 (minimum), Child 2 gets 2, Child 3 gets 3, and Child 4 gets 4 apples.\n    # This is the minimum unique distribution to the first 4 children. We have 1+2+3+4 = 10 apples given away.\n    # We started with 14 apples after giving away 1 to each child.\n    # 14 - 10 = 4 apples remaining for the child who gets the most.\n    # Adding these 4 apples to Child 5 who already has 5, we have 5 + 4 = 9 apples.\n    # Therefore, the most number of apples the child who gets the most can get is 9.\n\n    return 9\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    \n    # Digits for 1-9 (1 digit each)\n    total_digits += 9\n    \n    # Digits for 10-99 (2 digits each)\n    total_digits += 2 * (99 - 10 + 1)\n    \n    # Digits for 100-139 (3 digits each)\n    total_digits += 3 * (140 - 100)\n    \n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for tens in range(10):\n        for ones in range(10):\n            correct_number = tens * 10 + ones\n            mistaken_number = (tens * 10 + ones) - (53 - 32)\n            if mistaken_number - correct_number == 36:\n                correct_difference = (tens * 10 + ones) - (tens * 10 + 2) - (30)\n                return correct_difference\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = list(range(2, 36, 3))\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Drawing all balls of one color and then one more guarantees at least two colors:\n    first_two_colors = 15 + 1\n    \n    # Drawing all balls of the second color too guarantees all three colors:\n    all_three_colors = first_two_colors + 9\n    \n    return all_three_colors\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fences = 3.2\n    used_woods = 6.5\n    remaining_length = total_length - (used_fences + used_woods)\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 7, 8]\n    all_possible_numbers = list(permutations(digits, 3))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    tax_for_first_50000 = 0.06 * 50000\n    tax_for_remaining = 0.06 + T/100\n    remaining_income = 120000 - 50000\n    total_tax = tax_for_first_50000 + (tax_for_remaining * remaining_income)\n    \n    tax_paid_equation = Eq(total_tax, 10000)\n    solution_T = solve(tax_paid_equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ellen, lenny = symbols('ellen lenny')\n    \n    # Ellen's equation after giving away 12 sweets\n    eq_ellen = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    # Lenny's equation after giving away 12 sweets\n    eq_lenny = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    # Solve the system of equations\n    solutions = solve((eq_ellen, eq_lenny), (ellen, lenny))\n    \n    # Find the sum of their sweets\n    total_sweets = solutions[ellen] + solutions[lenny]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # To minimize the difference, we need to make sure the two numbers\n    # are as close to each other as possible.\n    # This is achieved by creating two numbers with the digits distributed \n    # as uniformly as possible.\n    # Since we have 10 digits (0 to 9), we can place the smaller half \n    # (0, 1, 2, 3, 4) in one number and the larger half (5, 6, 7, 8, 9)\n    # in the other number.\n    # We should put '0' in the second largest place to avoid making the number\n    # a 4-digit number.\n    # So the smallest possible number is 10234 and the largest is 98765.\n    smallest_num = int(\"10234\")\n    largest_num = int(\"98765\")\n\n    ans = largest_num - smallest_num\n    return ans\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_gifts = 7\n    total_children = 5\n    # Richard wants toy car (1) or puzzle (2)\n    # Kevin wants toy car (1) or calculator (3)\n    # Assign numbers to gifts: 1 (toy car), 2 (puzzle), 3 (calculator), and 4, 5, 6, 7 for other gifts\n    # Create list of all gift numbers\n    gifts = list(range(1, total_gifts + 1))\n    \n    # Count the valid permutations\n    count = 0\n    for perm in permutations(gifts, total_children):\n        # Check if Richard and Kevin got what they wanted\n        if (1 in perm[:2] or 2 in perm[:1]) and (1 in perm[:2] or 3 in perm[:1]):\n            count += 1\n\n    # Multiply by permutations of unassigned gifts (i.e., gifts that the other 3 children can receive)\n    count *= len(list(permutations(gifts, total_children - 2)))\n\n    return count\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    buzz_weight = symbols('buzz_weight')\n    equation = Eq(buzz_weight, 3 * (buzz_weight - 450))\n    solutions = solve(equation, buzz_weight)\n    return solutions[0]\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    speed = 10  # in meters per second\n\n    # The entire train is in the tunnel when the front of the train enters\n    # and until the end of the train exits, which is train_length + tunnel_length\n    total_distance = train_length + tunnel_length\n\n    # Duration is distance divided by speed\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    total_cost = 49 * 2  # cost for 2 pounds in pence\n    money_paid = 100      # Â£1 is 100 pence\n\n    change = money_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    sugar_concentration = 0.15\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum([(2*i + 2)**2 - (2*i)**2 for i in range(1, 1011)])\n    return ans\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15  # Jack's speed in km/h\n    speed_rose = 10  # Rose's speed in km/h\n    time_meet = 10   # Time until they meet in hours\n\n    # Relative speed is the speed at which Jack is getting closer to Rose\n    relative_speed = speed_jack - speed_rose\n\n    # The distance they are apart is the relative speed times the time until they meet\n    distance_apart = relative_speed * time_meet\n\n    return distance_apart\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    total_cost = 19.70  # total cost in pounds\n\n    # The second rabbit costs Â£2 more than the first\n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    # The third rabbit costs 80p less than the second (convert pence to pounds)\n    equation2 = Eq(third_rabbit, second_rabbit - 0.80)\n    # The total cost of the three rabbits\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, total_cost)\n\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef solution():\n    n = 1\n    found = False\n    while not found:\n        if is_prime(n) and is_prime(n + 4) and is_prime(n + 6) and is_prime(n + 132) and is_prime(n + 250):\n            found = True\n        else:\n            n += 1\n    return n\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    remainder = 48739 % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    mult_7 = 5000 // 7\n    mult_13 = 5000 // 13\n    mult_7_and_13 = 5000 // (7 * 13)\n\n    ans = mult_7 + mult_13 - mult_7_and_13\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n    \n    boys = total_pupils - girls\n    difference = boys - teachers\n    \n    return difference\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation 4.6x - 0.35 = 0.57\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n*(n+1)//2)**2\n    sum_of_integers = n*(n+1)//2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # David completes 1/10 of the work per day\n    # Emma completes 1/18 of the work per day\n    \n    # Let the number of days that David worked alone be x\n    # Then Emma worked for (14 - x) days\n    \n    # The total work done by David and Emma can be written as an equation\n    # David: (1/10) * x\n    # Emma: (1/18) * (14 - x)\n    # Total work done: (1/10) * x + (1/18) * (14 - x) = 1 (since the whole journal is one complete work)\n    \n    # We solve for x using the equation\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((1/10) * x + (1/18) * (14 - x), 1)\n    days_david_worked = solve(equation, x)[0]\n    \n    # Number of days Emma worked on the journal\n    days_emma_worked = 14 - days_david_worked\n\n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # Let x be the money Josephine had at first\n    # Josephine bought 138 T-shirts, and had $56 left, so she spent x - 56 dollars on T-shirts\n    # The price per T-shirt is (x - 56) / 138\n    # Since Josephine had just enough money to buy 145 T-shirts, the price of 145 T-shirts is x\n    # Therefore, (x - 56) / 138 * 145 = x\n    \n    # We solve the equation:\n    # (x - 56) * 145 = 138 * x\n    # 145x - 8120 = 138x\n    # 145x - 138x = 8120\n    # 7x = 8120\n    # x = 8120 / 7\n    x = 8120 / 7\n    return x\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The average is the middle number in a sequence of consecutive even numbers,\n    # so the 7th number in the sequence is 119 as it's the middle number.\n    # Each step in the even number sequence changes by 2.\n    \n    middle_term = 119\n    steps_to_first_term = (14 // 2)\n    \n    # Calculate the first (smallest) term in the sequence\n    first_term = middle_term - (steps_to_first_term * 2)\n    \n    return first_term\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    old_pay_per_hour = 6.50\n    percentage_increase = 12\n    increase_amount = old_pay_per_hour * (percentage_increase / 100)\n    new_pay_per_hour = old_pay_per_hour + increase_amount\n\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "def solution():\n    from math import factorial\n    from itertools import permutations\n\n    # Total number of S in SUCCESS is 3\n    num_S = 3\n\n    # Other letters in SUCCESS are 'U', 'C', 'C', 'E'\n    # U, C, C, E can be rearranged in 4! ways, but we need to divide by 2! because there are 2 Cs which are indistinguishable\n    other_letters_arrangements = factorial(4) // factorial(2)\n\n    # Places to insert S's such that no two S are next to each other (- represents other letters U, C, C, E):\n    # _U_C_C_E_, _U_CC_E_, _U_C_CE_, _U_CC_E_, U_C_C_E_, ...\n    # There are 5 positions to insert the first S, then 4 to insert the second S, and 3 for the last S\n    # This doesn't depend on the order of insertion, so we divide by the factorial of num_S to correct for overcounting\n    S_insertions = factorial(5) // factorial(5 - num_S)\n\n    # The total number of arrangements is the product of the other letters arrangements and the S insertions\n    total_arrangements = other_letters_arrangements * S_insertions\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    time_per_cut = 12 / (5 - 1)\n    time_for_5_cuts = time_per_cut * 5\n    return time_for_5_cuts\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # Using the Pigeonhole principle\n    # Total number of different heights possible\n    total_heights = 132 - 124 + 1  # from 124 to 132 inclusive\n    \n    # At least 4 students should have the same height (worst case)\n    # The worst case scenario would mean to have the maximum number of groups of 3 students with different heights\n    # and one group with at least 4 students. This is the minimum class size where the condition is met.\n    min_students_per_height = 4\n    \n    # Calculating the minimum size of the class required\n    # (number of different heights - 1) groups of 3 students + 1 group with at least 4 students\n    class_size = (total_heights - 1) * (min_students_per_height - 1) + min_students_per_height\n\n    return class_size\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount = 126 # Total amount in pence\n    # Let x be the number of each type of coin.\n    # equation: 2x (for 2p) + 5x (for 5p) = 126\n    for x in range(1, total_amount // 2):\n        if 2 * x + 5 * x == total_amount:\n            return x * 3 # Total number of coins is 3 times x\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    i = 1\n    while True:\n        num = (5 * i) ** 2\n        if num % 2 == 0:\n            return num\n        i += 1\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Since we only care about the ones digit, we can look at the pattern\n    # of the ones digit of powers of 3.\n    \n    # The pattern repeats every 4 powers as follows: 3, 9, 7, 1.\n    # Therefore, we can take the power (2009) modulo 4 to find the position\n    # in the pattern that corresponds to 3^2009\n    \n    pattern = [3, 9, 7, 1]\n    position = 2009 % 4\n    \n    # The position in the pattern would actually be 2009 % 4 - 1\n    # because the list is 0-indexed, but since our power is so large\n    # it will always be one cycle ahead (3^1 has the same ones digit as 3^5).\n    \n    ones_digit = pattern[position - 1]\n    \n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people at the party be 'p'.\n\n    # Fraction of adults is 2/5, therefore, the remaining people are 1 - 2/5 = 3/5 of 'p'.\n    # Of the remaining, 5/9 are boys, so the remaining are girls: 1 - 5/9 = 4/9 of the remaining people.\n    # According to the problem, the number of girls is 36.\n\n    # The number of girls = (4/9) * (3/5) * p = 36\n\n    # Now we need to solve for 'p':\n    p = 36 / ((4/9) * (3/5))\n\n    return int(p)\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy import symbols, factorial\n\ndef solution():\n    books, kids = symbols('books kids')\n    books = 20\n    kids = 4\n\n    # Using the Stars and Bars Theorem from combinatorics for distributing n identical items into k bins.\n    # Formula for ways: (books + kids - 1) choose (kids - 1)\n    ways = factorial(books + kids - 1) // (factorial(kids - 1) * factorial(books))\n\n    return ways\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_original = 3\n    days_original = 30\n    men_new = 2\n\n    work_per_man_original = days_original / men_original\n    total_work = work_per_man_original * men_original\n\n    days_new = total_work / men_new\n    \n    return days_new\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Will's current age as 'w'\n    w = symbols('w')\n    \n    # The equation based on Will's statement is:\n    # in 8 years, w + 8 = 4 times the age 4 years ago (w - 4)\n    equation = Eq(w + 8, 4 * (w - 4))\n\n    # Solving the equation will give us Will's current age\n    current_age = solve(equation, w)\n\n    return current_age[0]\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_to_finish = total_pages / pages_per_day\n\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each kid must get at least two books, so we start by giving out two books to each\n    remaining_books = 30 - 5 * 2  # 5 kids times 2 books each\n\n    # Now we need to distribute the remaining books to the 5 kids\n    # This is equivalent to partitioning the remaining_books into 5 parts, which can be\n    # done with stars and bars method: comb(n+k-1, k-1) where n is the remaining_books\n    # and k is the number of kids.\n    ans = comb(remaining_books + 5 - 1, 5 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_balance = 1000\n    interest_rate = 0.06\n    number_of_years = 2\n\n    balance_after_years = initial_balance * (1 + interest_rate) ** number_of_years\n    \n    return balance_after_years\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    # Mason's portion is 2/3 of Chewy's portion\n    equation1 = Eq(mason, 2/3 * chewy)\n    \n    # Chewy's portion is 40% of Mike's portion\n    equation2 = Eq(chewy, 0.40 * mike)\n    \n    # Mason's portion is 550ml less than Mike's\n    equation3 = Eq(mike - mason, 550)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    \n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000\n    \n    return total_soup_litres\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be the cost of one jug and 'c' be the cost of one cup\n    j, c = symbols('j c')\n\n    # Create equations based on the given information\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Get the cost of one cup\n    cost_of_cup = solutions[c]\n\n    return cost_of_cup\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # List the coins available in the UK in descending order (in pence)\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Set Susan's bus fare\n    susans_fare = 44\n    \n    # We try to pay with a Â£1 coin (100p)\n    amount_to_return = 100 - susans_fare # we pay with a coin bigger than Susan's fare\n    \n    # Initialize variables\n    num_coins_to_return = 0\n    idx = 0\n    \n    # Go through the possible coins and calculate the minimum number of coins needed for change\n    while amount_to_return > 0:\n        coin = coins[idx]\n        if amount_to_return >= coin:\n            num_coins_to_return += amount_to_return // coin\n            amount_to_return %= coin\n        idx += 1\n    \n    # Total number of coins that change hands is 1 (Susan's payment) plus the number of coins returned\n    total_coins = 1 + num_coins_to_return\n    \n    return total_coins\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    max_sum = 0\n    second_largest_term = (0, 1)  # represents zero as a fraction\n\n    # All possible operations\n    operations = ['+', '-', '*', '/']\n\n    for perms in permutations(operations, 4):\n        term1 = eval(f\"Fraction(1, 2) {perms[0]} Fraction(1, 9)\")\n        term2 = eval(f\"Fraction(1, 3) {perms[1]} Fraction(1, 8)\")\n        term3 = eval(f\"Fraction(1, 4) {perms[2]} Fraction(1, 7)\")\n        term4 = eval(f\"Fraction(1, 5) {perms[3]} Fraction(1, 6)\")\n\n        current_sum = term1 + term2 + term3 + term4\n        terms = sorted([term1, term2, term3, term4])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term = terms[-2]  # Second largest term\n\n    A, B = second_largest_term.numerator, second_largest_term.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    pupils_A = 235\n    pupils_B = 567\n    total_pupils = pupils_A + pupils_B\n\n    # Both rooms will have the same number of pupils after the transfer\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n\n    inequality = ((x + 3) / (2 * x + 5)) > 0.505\n    solutions = solve(inequality, x)\n\n    # Since x must be less than 47.5 and represents whole matches won, we take the floor of 47.5\n    max_wins = int(solutions[0].evalf()) - 1\n\n    return max_wins\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    initial_amount = spent + left\n    return initial_amount\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_position_difference = 15 - 10\n    \n    common_difference = (fifteenth_term - tenth_term) / term_position_difference\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [(1, 1, 2)]\n    an = 1\n    for n in range(2, 9):\n        an += (n - 1) * 3\n        if n != 8:\n            terms.append((n, an, an + (n * 2 - 1)))\n        else:\n            terms.append((n, an, 1))\n    \n    ans = sum(n / (a * b) for n, a, b in terms)\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_a = 24\n    class_b = 36\n    class_c = 42\n\n    # Finding the GCD of the three class sizes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4 * i if i % 2 else - (4 * i) for i in range(1, 51)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_lunch_cost * days\n\n    return total_cost\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    # For a right-angled triangle on a circle, the hypotenuse must be the\n    # diameter of the circle and this happens only when two points are\n    # diametrically opposite.\n\n    # Choose any one point (as vertex opposite to right angle).\n    # There are 12 options for this.\n\n    # The remaining two points must be at the ends of one of the diameters to form the right angle.\n    # As there are total 12 points, there are 12/2 = 6 diameters.\n\n    # So for each of the 12 starting points, there are 6 ways to choose a diameter,\n    # which will determine the other two points.\n\n    # Hence, the number of right-angled triangles is:\n    right_angle_triangles = total_points * (total_points // 2)\n\n    return right_angle_triangles\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    return (3/8) * 16\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    points_for_correct = 5\n    points_for_wrong = -3\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_for_correct + wrong * points_for_wrong == 76:\n            return correct\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = total_sheep * (5/8)\n    white_sheep = total_sheep * (1/4)\n    brown_sheep = total_sheep - (black_sheep + white_sheep)\n    \n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.90\n    profit = selling_price - cost_price\n    \n    equation = Eq(profit, 120)\n    cost_price_solution = solve(equation, cost_price)\n    \n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    balls_in_6_boxes = balls_per_box * 6\n    return balls_in_6_boxes\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "from sympy import symbols, Eq, solve, Abs\n\ndef solution():\n    x = symbols('x')\n    eq = Eq(Abs(x + 1), 2*x + 5)\n    solutions = solve(eq, x)\n    \n    # Filter out non-valid solutions (since it's an absolute value equation, we reject any solution that doesn't satisfy the original equation)\n    valid_solutions = [s for s in solutions if s >= -1 or s <= -(5/2)]\n    \n    return valid_solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks in a row\n    different_colored_socks = factorial(4) \n\n    # For two different colored pairs of socks in a row\n    two_pairs_same_color = factorial(4) // (factorial(2) * factorial(2))\n\n    ans = (different_colored_socks, two_pairs_same_color)\n    return ans\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 11 * (10 * a + b) + b == 1000 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    people = 4\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_triangles = comb(num_points, 3)\n    return num_triangles\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Initially, Andre and Beth have a total of 24 sweets\n    # After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    initial_total_sweets = Eq(andre + beth, 24)\n    post_gift_difference = Eq(andre + 4, beth + 10)\n    \n    # Solve the system of equations\n    solutions = solve((initial_total_sweets, post_gift_difference), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_men_over_180 = 4500\n    men_over_190 = 750\n    men_between_180_and_190 = total_men_over_180 - men_over_190\n    \n    return men_between_180_and_190\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The winning strategy involves making sure that at the end of\n    # each of your turns, the number of apples left is a multiple of 4.\n    # This forces your opponent to leave you with a non-multiple of 4 after their turn,\n    # allowing you to continue the strategy.\n    \n    # Since there are 18 apples, we want to leave 16 apples for Ben\n    # so that we are back to a multiple of 4.\n    # To do this, Anthea should take 2 apples on her first turn.\n\n    apples_to_take_first_turn = (18 % 4) or 4  # Ensure we don't take 0 apples\n\n    return apples_to_take_first_turn\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the mass of a chair and t represent the mass of a table\n    c, t = symbols('c t')\n\n    # 3 tables have the same mass as 4 chairs\n    equation1 = Eq(3 * t, 4 * c)\n\n    # A table is 2 kg heavier than a chair\n    equation2 = Eq(t, c + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, t))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    total_cost_for_5_bars = cost_per_bar * 5\n    return round(total_cost_for_5_bars, 2)\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    # There are two positions for Judy to stand - either end of the line.\n    judy_positions = 2\n    # The number of ways her friends can arrange themselves in line is the\n    # permutations of the remaining 5 people.\n    friend_permutations = math.factorial(5)\n    # By the multiplication principle, multiply the possibilities for Judy by\n    # the permutations of her friends to get the total arrangements.\n    total_arrangements = judy_positions * friend_permutations\n    return total_arrangements\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # After receiving 4 sweets each, the total becomes 24 + 4 + 4\n    total_sweets_with_extra = 24 + 4 + 4\n\n    # Andre has 6 more sweets than Beth\n    equation1 = Eq(andre, beth + 6)\n\n    # Total number of sweets they have now\n    equation2 = Eq(andre + beth, total_sweets_with_extra)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    result_after_operations = 2\n    original_number = (result_after_operations * 12) + 6\n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # The Ferrari driver finished in second place\n    final_position = 2\n    # The driver overtook 5 cars to get to the second place\n    overtakes = 5\n    # To find out how many cars were originally in front of the Ferrari driver,\n    # we add the number of overtakes to the final position of the Ferrari driver.\n    cars_in_front_initially = final_position + overtakes\n    # Since the driver was initially in the last place, the total number of cars\n    # is the number of cars that were in front of him plus 1 (the Ferrari itself).\n    total_cars = cars_in_front_initially + 1\n    \n    return total_cars\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The total sum of the four numbers is 4 * average = 4 * 130\n    total_sum = 4 * 130\n    \n    # The total sum of the three remaining numbers is 3 * new_average = 3 * 110\n    remaining_sum = 3 * 110\n    \n    # The number removed is the difference between the total sum and the remaining sum\n    removed_number = total_sum - remaining_sum\n    \n    return removed_number\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # If Leo picks 1 apple, Mia can then pick 2 apples, and they will simply alternate in this way until Mia takes the last apple.\n    # If Leo picks 2 apples, they alternate too and Leo will be the one who takes the last apple given that both play optimally.\n    # Therefore, Leo must take away 2 apples to ensure victory.\n    return 2\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n\n    # Convert all time to seconds for easier calculation\n    first_light = 60          # 1 minute in seconds\n    second_light = 90         # 1.5 minutes in seconds\n    third_light_min = 30      # 30 seconds is the minimum for the third light\n    \n    total_time = 540          # 9 minutes in seconds\n\n    # Calculate the least common multiple of the first two lights cycle times\n    lcm_first_and_second = lcm(first_light, second_light)\n\n    # We need to find a cycle time for the third light that is a divisor of total_time\n    # and is also greater than or equal to third_light_min (30 seconds)\n    # and the LCM of all three cycle times is the total_time (540 seconds)\n    \n    third_light_options = [i for i in range(third_light_min, total_time + 1) if total_time % i == 0]\n\n    # Now, determine the shortest valid cycle time for the third light\n    for third_light in third_light_options:\n        if lcm(lcm_first_and_second, third_light) == total_time:\n            return third_light\n\n    return None  # In case there is no solution\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let x be the value of one silver spoon and y be the value of one gold ring.\n    # According to the problem statement:\n    # 12x = (3/4) * 6y  => simplifying we get 2x = (1/4) * 2y => x = y / 6\n    # We are asked how many silver spoons have the same value as 3 gold rings:\n    # Let's denote n as the number of silver spoons equivalent to 3 gold rings: n * x = 3 * y\n    # replacing x with y/6 (from our first equation): n * (y/6) = 3 * y => n/6 = 3\n    # Solving for n gives us: n = 18\n    n = 18\n    return n\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    younger_math, younger_english = symbols('younger_math younger_english')\n\n    # elder_math = younger_math + 10, so the elder sister spends younger_english + 10 on math\n    # elder_english = younger_english - 4, so the elder sister spends younger_english - 4 on English\n    # Elder sister spends 88 minutes in total: younger_english + 10 + younger_english - 4 = 88\n    # Younger sister spends 12 minutes less on math than English: younger_english - younger_math = 12\n\n    # Formulate the equations based on the information provided\n    equation1 = Eq(younger_math + younger_english + 10 - 4, 88)  # Equation for the elder sister's total time\n    equation2 = Eq(younger_english - younger_math, 12)            # Equation for the younger sister's difference in time\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger_math, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # starting from the smallest possible square and increasing the size\n    # by 2 on each iteration to maintain the alternating pattern of boys and girls\n    for side_length in range(1, 100, 2):\n        boys = side_length**2 + (side_length - 2)**2  # counts for outer boys and inner if exists\n        if side_length > 2:\n            girls = (side_length - 1)**2 + (side_length - 3)**2\n        else:\n            girls = 0\n        if boys - girls == 55:  # condition given in the problem\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = solutions[pencils] * 7 + solutions[markers] * 7\n\n    return total_cost\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    cost_marker = 3\n    cost_brush = 1\n    \n    # Assume all items are paintbrushes initially\n    all_brush_cost = total_items * cost_brush\n    remaining_cost = total_cost - all_brush_cost\n    marker_price_difference = cost_marker - cost_brush\n    \n    # Calculate the number of markers by dividing the remaining cost with price difference\n    num_markers = remaining_cost / marker_price_difference\n    \n    return int(num_markers)\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'f' be the number of female teachers and 't' be the total number of teachers.\n    f, t = symbols('f t')\n    \n    # Given that average weight of all teachers is 65\n    # 65 * t = 75 * 3 + 60 * f where 3 is the number of male teachers\n    equation1 = Eq(65 * t, 75 * 3 + 60 * f)\n    \n    # Total number of teachers is sum of male and female teachers\n    # t = f + 3\n    equation2 = Eq(t, f + 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, t))\n\n    # Return the number of female teachers\n    return solutions[f]\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    # Since each plate has at least 2 pieces, subtract 2 pieces that are \n    # guaranteed to be on each plate. Then divide the remaining 2 pieces.\n    for x1 in range(2, 7):  # for the first plate\n        for x2 in range(2, 7):  # for the second plate\n            x3 = 8 - (x1 + x2)  # remaining for the third plate\n            if x3 >= 2:  # confirm the third plate has at least 2 pieces\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n\n    # Since Star must be the first runner, the arrangement is only for the remaining 4 teammates.\n    # The number of ways to arrange 4 people is the factorial of 4.\n    ans = factorial(4)\n    \n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position from the front gives the total number of rows from the front to her position\n    rows_front_to_cora = 5\n    # Cora's position from the back gives the total number of rows from her position to the back, adding 1 because she is included in the count\n    rows_cora_to_back = 7\n    \n    # Cora's position from the left gives the total number of columns from the left to her position\n    columns_left_to_cora = 2\n    # Cora's position from the right gives the total number of columns from her position to the right, adding 1 because she is included in the count\n    columns_cora_to_right = 4\n\n    # Total number of rows is the sum of rows in front of Cora and behind her, minus 1 because Cora is counted twice\n    total_rows = rows_front_to_cora + rows_cora_to_back - 1\n    # Total number of columns is the sum of columns to the left of Cora and to the right, minus 1 because Cora is counted twice\n    total_columns = columns_left_to_cora + columns_cora_to_right - 1\n\n    # The total number of students is the product of the number of rows and columns\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "import math\n\ndef solution():\n    num = 33 * 55\n    m = 1\n\n    # Factorize num and count the number of each prime number\n    prime_factors = {}\n    for i in range(2, int(math.sqrt(num)) + 1):\n        while num % i == 0:\n            num = num // i\n            if i in prime_factors:\n                prime_factors[i] += 1\n            else:\n                prime_factors[i] = 1\n\n    # If num is still greater than one, it must be a prime number\n    if num > 1:\n        prime_factors[num] = 1\n\n    # Find the smallest m by making sure each prime factor's count is even\n    for prime in prime_factors:\n        count = prime_factors[prime]\n        if count % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    time_per_cut = 60 / (31 - 1)  # Subtract 1 from number of segments to get number of cuts\n    time_for_50_segments = time_per_cut * (50 - 1)  # Calculate time for 50 segments\n    return time_for_50_segments\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Iterate all 4-digit increasing integers\n    for i in range(1234, 9877):\n        digits = str(i)\n        if (digits[0] < digits[1] < digits[2] < digits[3]):\n            reversed_digits = digits[::-1]\n\n            # Create the third integer by considering all permutations of the digits\n            from itertools import permutations\n            perms = set(permutations(digits))\n            for perm in perms:\n                third_int = int(''.join(perm))\n                if third_int != i and third_int != int(reversed_digits):\n                    if i + int(reversed_digits) + third_int == 26352:\n                        return min(i, int(reversed_digits), third_int)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + (a + b) * 2\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The provided congruence conditions\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    \n    # Solve the system of linear congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Continue adding the least common multiple of the moduli (3*5*7) \n    # until the number is between 100 and 200\n    while number < 100:\n        number += 3 * 5 * 7\n    if number > 200:\n        return None  # No solution if the number exceeds 200\n\n    return number\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    # Let the number be x\n    # According to the question: x - 30% of x = 210\n    # Which can be written as: x - 0.30x = 210\n    # Simplifying: 0.70x = 210\n    # To find x, we divide both sides by 0.70\n    x = 210 / 0.70\n    return x\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = \"ARRANGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return numerator // denominator\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables representing the number of flowers each had after sharing\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n    \n    # Original number of flowers before sharing\n    candy_original = 11\n    nancy_original = 9\n    \n    # Equation: Nancy now has 8 more flowers than Candy\n    equation1 = Eq(nancy_now, candy_now + 8)\n    \n    # Equation: Candy gave some flowers to Nancy,\n    # Therefore, the total number of flowers has not changed\n    equation2 = Eq(candy_now + nancy_now, candy_original + nancy_original)\n    \n    # Solve the equations to find how many flowers Candy has now\n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    base_price = 200\n    increase_percentage = 45 / 100\n    increased_price = base_price + (base_price * increase_percentage)\n    return increased_price\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    daily_amount_from_mum = 60  # Pence from Mum each day\n    daily_amount_from_dad = 40  # Pence from Dad each day\n\n    total_days = 3  # Monday, Tuesday, Wednesday\n\n    total_amount_from_mum = daily_amount_from_mum * total_days\n    total_amount_from_dad = daily_amount_from_dad * total_days\n\n    total_amount = total_amount_from_mum + total_amount_from_dad\n\n    return total_amount\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    current_term = 1\n    additional = 1\n    while current_term <= 50:\n        additional += 1\n        current_term += additional\n    return current_term\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_midnight_friday = -5\n    temperature_midday_saturday = 17\n\n    overall_temperature_change = temperature_midday_saturday - temperature_midnight_friday\n\n    return overall_temperature_change\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    return 5384342\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pens_cost_p = 43           # cost of one pen in pence\n    booklets_cost_p = 185      # cost of one booklet in pence (1 pound = 100 pence)\n    total_money_p = 10 * 100   # total money in pence (Â£10 = 1000 pence)\n\n    cost_of_pens = 3 * pens_cost_p\n    cost_of_booklets = 4 * booklets_cost_p\n    total_cost = cost_of_pens + cost_of_booklets\n\n    change = total_money_p - total_cost\n\n    # Convert the change back to pounds (as change is currently in pence)\n    change_in_pounds = change / 100\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_i = str(i)\n        if abs(int(str_i[0]) - int(str_i[1])) >= 7 and abs(int(str_i[1]) - int(str_i[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for n in range(5000, 10000):\n        thousands_digit = n // 1000\n        hundreds_digit = (n // 100) % 10\n        tens_digit = (n // 10) % 10\n        units_digit = n % 10\n        \n        if hundreds_digit == 0 or tens_digit == 0 or units_digit == 0:\n            continue\n            \n        if (thousands_digit % hundreds_digit == 0 and\n            thousands_digit % tens_digit == 0 and\n            thousands_digit % units_digit == 0):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return (22 - 4) * 2\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    from itertools import product\n\n    # All possible combinations of four digits\n    all_combinations = product(range(10), repeat=4)\n    \n    def check_combination(comb):\n        if len(set(comb).intersection(set([1, 2, 5, 8]))) > 0:\n            return False\n        if sum(a == b for a, b in zip(comb, (5, 6, 4, 8))) != 2:\n            return False\n        if sum(a == b for a, b in zip(comb, (3, 6, 2, 8))) != 2:\n            return False\n        if sum(a == b for a, b in zip(comb, (3, 1, 4, 7))) != 2:\n            return False\n        if sum(a == b for a, b in zip(comb, (5, 6, 2, 9))) != 2:\n            return False\n        return True\n    \n    # Find the correct combination\n    for comb in all_combinations:\n        if check_combination(comb):\n            ans = ''.join(map(str, comb))\n            return ans\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the tilde symbol value\n    tilde = symbols('tilde')\n\n    # Set up the equation based on the given expression\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve for the tilde value\n    solution = solve(equation, tilde)\n\n    # Return the solution which is the value of the tilde symbol\n    return solution[0]\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    total_weeks = 10\n\n    # Using arithmetic series sum formula: S_n = n/2 * (2a + (n - 1)d), where\n    # S_n is the sum of n terms\n    # n is the number of terms\n    # a is the first term\n    # d is the common difference\n\n    total_coins = (total_weeks / 2) * (2 * first_week_coins + (total_weeks - 1) * common_difference)\n    return int(total_coins)\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years = 0\n    amount = principal\n    while amount < final_amount:\n        amount += amount * rate\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarter_full_mass = 350\n    one_quarter_full_mass = 250\n    half_full_mass_difference = three_quarter_full_mass - one_quarter_full_mass\n\n    empty_jar_mass = one_quarter_full_mass - half_full_mass_difference\n    return empty_jar_mass\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, E = symbols('A B C D E')\n\n    equation1 = Eq((A + B + C) / 3, 95)  # Average of A, B, C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average of B, C, D\n    equation3 = Eq(E, 96)                # E's mark\n    equation4 = Eq(B, D)                 # B and D have the same score\n\n    # A has the highest mark and all marks are above 91.\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91, A > E, E > B, E > C, E > D)\n\n    solutions = solve((equation1, equation2, equation3, equation4) + constraints)\n\n    # Get the score of D.\n    return solutions[D]\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the total number of female teachers\n    total_avg_weight = 65\n    male_teachers = 3\n    male_avg_weight = 75\n    female_avg_weight = 60\n\n    # The total weight of male teachers\n    total_male_weight = male_teachers * male_avg_weight\n\n    # Equation to find total number of teachers based on average weight\n    # total_avg_weight = (total_male_weight + female_avg_weight * x) / (male_teachers + x)\n    # Rearrange the equation to solve for x\n    x = (total_avg_weight * male_teachers - male_avg_weight * male_teachers) / (female_avg_weight - total_avg_weight)\n\n    return int(x)\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda = 13.15  # Total soda in liters\n    bottle_fraction = 1/7\n    bottle_capacity = 9.1  # Bottle capacity in liters\n    cup_capacity_ml = 350  # Cup capacity in milliliters\n    ml_in_liter = 1000  # Number of milliliters in one liter\n\n    # Calculate the liters of soda used to fill the bottle\n    soda_for_bottle = bottle_capacity * bottle_fraction\n    # Calculate the liters of soda used to fill the cups\n    soda_for_cups = (4 * cup_capacity_ml) / ml_in_liter\n\n    # Calculate the remaining soda in the bucket\n    remaining_soda = total_soda - (soda_for_bottle + soda_for_cups)\n\n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father_current, son_current = symbols('father_current son_current')\n\n    # Equation based on the father's age 6 years ago being 5 times the son's age at that time.\n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n    \n    # Equation based on the sum of their current ages.\n    equation2 = Eq(father_current + son_current, 78)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    return solutions[father_current]\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = -a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Since each player can take either 1 or 2 marbles,\n    # the player who begins the turn with a state where the number of marbles is a multiple of 3 will always lose,\n    # given both players play optimally.\n    # That is because no matter if the player takes 1 or 2 marbles,\n    # the other player can always make the total marbles taken in that round sum up to 3.\n\n    # We want Rose to win, so we need to ensure that Kylie is left with a multiple of 3 on her turn.\n    # If Rose takes 1 marble in the first turn, 13 will be left, which is not a multiple of 3.\n    # If Rose takes 2 marbles in the first turn, 12 will be left, which is a multiple of 3,\n    # and would therefore ensure Rose's victory if they play optimally.\n\n    return 1 if 14 % 3 != 1 else 2\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from sympy import symbols, Eq, solve, pi\n\n    m = 2.0  # Mass in kilograms\n    k = 500  # Force constant in N/m\n    A = 0.08  # Amplitude in meters\n    x = 0.04  # Displacement from equilibrium in meters\n\n    # Total energy (E) of the oscillator is given by (1/2)*k*A^2\n    E = (1/2)*k*A**2\n\n    # The speed (v) of the block can be found using the energy conservation\n    # Total energy (E) = kinetic energy (K) + potential energy (U)\n    # Where K = (1/2)*m*v^2 and U = (1/2)*k*x^2\n    # E = (1/2)*m*v^2 + (1/2)*k*x^2\n    # Solve for v: v = sqrt((E - (1/2)*k*x^2) * (2/m))\n\n    v = ((E - (1/2)*k*x**2) * (2/m))**0.5\n\n    return E, v\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pence = 45 * 100  # Convert pounds to pence\n    coin_value_pence = 5\n    number_of_coins = total_pence // coin_value_pence\n\n    return number_of_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    return hex((0x2A3 + 0x17B)).upper()[2:]\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the distance Bud runs in one minute.\n    x = symbols('x')\n    \n    # Pip runs 20 metres more than Bud each minute.\n    equation = Eq(3 * x + 3 * (x + 20), 540)\n    \n    # Solve the equation to find how far Bud runs in one minute.\n    bud_distance_per_minute = solve(equation, x)[0]\n    \n    # Calculate how far Pip runs in one minute.\n    pip_distance_per_minute = bud_distance_per_minute + 20\n    \n    # Calculate how far Pip has run in 3 minutes.\n    pip_total_distance = 3 * pip_distance_per_minute\n    \n    return pip_total_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c = symbols('a b c')\n    \n    # defining equations\n    equation1 = Eq(a, 4*b)              # Box A has 4 times coins as Box B\n    equation2 = Eq(0.06*a + 0.20*b, 1220)     # Coins removed from boxes A and B\n    equation3 = Eq(c + 1220, 1.22*c)    # Box C now has 1220 coins, which is 22% more than original\n    \n    # solving equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2*x + 1), 75)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 25 / 100 * 30 / 100 * 40 / 100 * 300\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Assume Sally originally had X bottles of drinks, Y of which were tea.\n    # Initially, 60% were coffee, so 40% were tea.\n    # After purchasing more tea, 40% of the total (X + additional tea) are coffee.\n    # So the original tea (which is 40% of X) equals 60% of the new total.\n    # If X is the original total number of bottles, then tea is 40% * X = 0.4X\n    # Let Z be the additional tea bottles bought. Then, the new total is X + Z\n    # The new percentage of coffee is 40%, which means tea is now 60% of X+Z.\n    # We set up this equation: 0.4X + Z = 0.6(X + Z)\n    # Simplifying the equation to find Z in terms of X:\n    # Z = 0.2X / 0.4 = 0.5X\n    # This means that the amount of tea Sally bought is half the original total number of bottles.\n    # The percentage increase in the number of bottles of tea is Z divided by the initial number of tea bottles (0.4X) times 100.\n    # Percentage increase = (Z / 0.4X) * 100 = (0.5X / 0.4X) * 100 = 125%\n    \n    percentage_increase = (0.5 / 0.4) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n\n    average_price = total_price / total_flowers\n    \n    return average_price\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    times = [1, 3, 4, 1]\n\n    ans = sum(times)\n\n    return ans\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # Lewis has 60p which is 0.60 pounds\n    james_money_pound = 1.10  # James has 1.10 pounds\n    total_money = lewis_money_p / 100 + james_money_pound  # Convert pence to pounds and sum\n\n    return total_money\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('WINNING')  # Total number of letters\n    unique_letters = {'W': 1, 'I': 2, 'N': 3, 'G': 1}  # Frequency of each unique letter\n\n    # Calculate permutations taking into account the repetitions\n    numerator = factorial(total_letters)\n    denominator = 1\n    for count in unique_letters.values():\n        denominator *= factorial(count)\n\n    num_ways = numerator // denominator\n    \n    return num_ways\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    # Let t be the number of tricycles and c be the number of cars.\n    # You have two equations:\n    # t + c = 24 (The total number of tricycles and cars is 24)\n    # 3t + 4c = 86 (The total number of wheels is 86)\n    # You can solve this system of equations to find t and c.\n\n    # Total number of vehicles\n    total_vehicles = 24\n\n    # Total number of wheels\n    total_wheels = 86\n\n    # Hypothesis: Assume all vehicles are tricycles, with 3 wheels each\n    all_tricycles = total_vehicles * 3\n\n    # Calculate the excess wheels when assuming all are tricycles\n    # This excess is due to the cars, which have 1 extra wheel compared to tricycles\n    excess_wheels = total_wheels - all_tricycles\n\n    # The number of cars can be calculated by dividing the excess wheels by the difference\n    # in number of wheels between cars and tricycles (which is 1, as cars have 4 and tricycles have 3)\n    cars = excess_wheels // 1  # Integer division\n\n    # The number of tricycles is the total vehicles minus number of cars\n    tricycles = total_vehicles - cars\n\n    return tricycles\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    return 7 * 0.4\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "from sympy import *\n\ndef solution():\n    # Define factorial function\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n        \n    # Define subfactorial function for derangement\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    # Calculate the number of ways six papers can be mixed up\n    # so that none of the students gets their own paper\n    ways = subfactorial(6)\n    \n    return ways\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Each stack must have at least 3 books.\n    # Since there are 13 books, after assigning 3 books to each stack,\n    # we'll have 4 books left to distribute.\n\n    # The remaining 4 books can be distributed in the following ways:\n    # 0, 0, 4\n    # 0, 1, 3\n    # 0, 2, 2\n    # 1, 1, 2\n    # Each distribution can occur in different orders, so we need to\n    # count permutations where order matters because stacks are distinct.\n    # For each case, we calculate the permutations where similar counts are treated as identical.\n    \n    from math import factorial as f\n    \n    # Calculate permutations where order matters but identical counts are treated as identical:\n    def perms(a, b, c):\n        if a == b == c:\n            return f(3) // (f(a) * f(b) * f(c))\n        elif a == b or b == c or a == c:\n            return f(3) // (f(2))\n        else:\n            return f(3)\n\n    # 0, 0, 4\n    count += perms(0, 0, 4)\n    # 0, 1, 3\n    count += perms(0, 1, 3)\n    # 0, 2, 2\n    count += perms(0, 2, 2)\n    # 1, 1, 2\n    count += perms(1, 1, 2)\n\n    return count\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial number of pens\n    total_pens = 96\n\n    # Initial ratio\n    blue_ratio = 3\n    red_ratio = 5\n\n    # Initial number of blue and red pens\n    initial_blue = (blue_ratio / (blue_ratio + red_ratio)) * total_pens\n    initial_red = total_pens - initial_blue\n\n    # Additional red pens\n    additional_red = 60\n\n    # New total after adding 60 red pens\n    new_total = total_pens + additional_red\n\n    # 40% of the new total are blue\n    new_total_blue = 0.4 * new_total\n\n    # Additional blue pens required to make 40% of the new total\n    additional_blue = new_total_blue - initial_blue\n\n    return int(additional_blue)\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kg\n    final_velocity = 8  # final velocity in m/s\n    time = 4  # time in seconds\n\n    acceleration = final_velocity / time  # acceleration = change in velocity / time\n    force = mass * acceleration  # force = mass * acceleration (Newton's second law)\n\n    return force\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "from sympy import symbols, solve\n\ndef solution():\n    lemonade_price = 4\n    plus1000_price = 7\n    total_income = 2012\n    total_bottles = 350\n\n    lemonade, plus1000 = symbols('lemonade plus1000', integer=True)\n\n    # Income equation: 4*lemonade + 7*plus1000 = 2012\n    income_eq = lemonade_price * lemonade + plus1000_price * plus1000 - total_income\n\n    # Bottles equation: lemonade + plus1000 = 350\n    bottles_eq = lemonade + plus1000 - total_bottles\n\n    # We are looking for the minimum number of bottles of '1000 Plus'\n    # that could be sold, so lemonade should be maximized\n    # Thus, we solve for lemonade and get the maximum possible value consistent with the constraints\n    solutions = solve((income_eq, bottles_eq), (lemonade, plus1000))\n\n    # Return the minimum number of '1000 Plus' which will the second element of the first solution\n    min_plus1000_sold = min(solutions, key=lambda x: x[1])[1]\n\n    return min_plus1000_sold\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(0, 101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n    from sympy import factorint\n\n    numbers = set(range(1, 14))\n    \n    # Find the numbers with a unique count of factors, which the two students might have.\n    unique_factors = {}\n    for number in numbers:\n        factors_count = len(factorint(number))\n        if factors_count not in unique_factors:\n            unique_factors[factors_count] = {number}\n        else:\n            unique_factors[factors_count].add(number)\n    unique_factors = {k: v for k, v in unique_factors.items() if len(v) == 1}\n    \n    # Possible combinations of 9 numbers\n    possible_combinations = combinations(numbers, 9)\n    \n    for combo in possible_combinations:\n        # Convert the combo to a sorted list\n        sorted_combo = sorted(combo)\n        # Check if we have numbers with unique factor count\n        hands_raised = [n for n in sorted_combo if len(factorint(n)) in unique_factors] \n\n        # If exactly two students know their numbers, proceed\n        if len(hands_raised) == 2:\n            for i in range(1, len(sorted_combo)):\n                # Alice's number is odd, hence index i must contain an odd number\n                alice = sorted_combo[i]\n                # May's number is smaller than Alice's by 2\n                may = alice - 2\n                # May's number should be bigger than Mark's by 1, so Mark is may - 1\n                mark = may - 1\n                \n                # Check if May and Mark's numbers are in the combo (sorted list)\n                if may in sorted_combo and mark in sorted_combo:\n                    # Get the 4 numbers which are not picked\n                    not_picked = numbers - set(sorted_combo)\n                    # Product of the four numbers not picked\n                    return prod(not_picked)\n    \n    return None\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # We solve this problem using the Frobenius Coin Problem or Chicken McNugget Theorem.\n    # For two numbers a and b, where gcd(a, b) = 1, the largest number n that cannot be expressed as\n    # ax + by (where x, y are non-negative integers) is given by ab - a - b.\n\n    # Here, we have two box sizes 3 and 7, they are coprime.\n    a = 3\n    b = 7\n\n    largest_non_purchasable = a * b - a - b\n\n    return largest_non_purchasable\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_distance = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * total_distance\n    cost_per_person = total_cost / num_friends\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert numbers from base 10 to base 7 and add them\n    sum_base_10 = 45 + 66\n    # Convert the sum to base 7\n    ans = ''\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of correct answers and 'i' be the number of incorrect answers\n    c, i = symbols('c i')\n\n    # Points for correct answers (5 points each)\n    correct_points = 5 * c\n    # Points lost for incorrect and unanswered questions (-2 points each)\n    incorrect_points = -2 * i\n    # Total points that Jane got\n    total_points = 151\n    # The number of correct answers that Jane got is 12 more than three times the number of incorrect answers\n    correct_incorrect_eq = Eq(c, 3 * i + 12)\n\n    # Solving the two equations to find the number of correct and incorrect answers\n    # correct_points - incorrect_points = total_points\n    total_points_eq = Eq(correct_points + incorrect_points, total_points)\n\n    # Solve the system of equations\n    answers = solve((correct_incorrect_eq, total_points_eq), (c, i))\n\n    return answers[c]\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Iterate through the first 20 natural numbers to find two consecutive numbers\n    for i in range(1, 20):\n        if 20 % (i + 1) != 0 and 20 % i != 0:\n            # The sum of two consecutive numbers that cannot divide N\n            ans = i + (i + 1)\n            return ans\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Total matches played by all the players (A+B+C+D+E+F+G) should be even because each match includes two players\n    # A + A's opponents = 4 matches\n    # B + B's opponents = 6 matches\n    # C + C's opponents = 2 matches\n    # D + D's opponents = 1 match\n    # E + E's opponents = 3 matches\n    # G + G's opponents = 5 matches\n    # The sum of matches played by A+B+C+D+E+F+G is currently 21.\n    # Since F has not been counted yet, and the total must be even, F must have played an odd number of matches.\n    # The smallest odd number that can be added to 21 to make it even is 1.\n    # Therefore, F has played 1 match to make the total sum of matches even (22).\n\n    matches_F = 1\n    return matches_F\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cici_age, linda_age = symbols('cici_age linda_age')\n\n    equation1 = Eq(cici_age, linda_age - 11)\n    equation2 = Eq(cici_age + 4 + linda_age + 4, 37)\n    \n    solutions = solve((equation1, equation2), (cici_age, linda_age))\n    linda_future_age = solutions[linda_age] + 3\n    \n    return linda_future_age\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    # Looping from 161, since we want numbers greater than 160\n    i = 161\n    while True:\n        # Calculate quotient and remainder\n        quotient, remainder = divmod(i, 15)\n        # Break out of the loop if remainder starts to exceed the quotient\n        if remainder > quotient:\n            break\n        # Check if quotient and remainder are equal\n        if quotient == remainder:\n            sum_of_numbers += i\n        i += 1\n    return sum_of_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number = 5\n    second_number = 2\n    least_sum = first_number + second_number\n    return least_sum\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let j be the number of Jamie's stamps and n be the number of Natasha's stamps\n    # According to the problem, j / n = 5 / 3 and j = n + 18\n    # We will solve these two equations to find the values of j and n\n\n    # Equation (1): j = 5/3 * n\n    # Equation (2): j = n + 18\n    # We can find n by substituting the value of j from equation (2) into equation (1)\n    \n    # 5/3 * n = n + 18\n    # Multiply both sides by 3 to get rid of the denominator\n    # 5n = 3n + 54\n    # Solve for n\n    n = 54 / (5 - 3)\n    j = (5/3) * n\n\n    # Total number of stamps they have together\n    total_stamps = j + n\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    # There are 5 choices for each of the 4 people, and they can choose independently.\n    num_ways = 5 ** 4\n    return num_ways\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance = 300  # distance from home to school or school to home\n    speed_uphill = 10  # speed going to school\n    speed_downhill = 30  # speed coming back home\n\n    time_uphill = distance / speed_uphill  \n    time_downhill = distance / speed_downhill  \n\n    total_time = time_uphill + time_downhill  \n    total_distance = 2 * distance  # round trip distance\n\n    average_speed = total_distance / total_time  \n\n    return average_speed\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    bags_needed = peaches // peaches_per_bag\n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # The number of apples, pears, and oranges that can be distributed equally\n    apples_distributed = 226 - 10\n    pears_distributed = 352 - 28\n    oranges_distributed = 157 - 13\n    \n    # The greatest common divisor (GCD) will give the biggest possible number of students\n    ans = gcd(apples_distributed, gcd(pears_distributed, oranges_distributed))\n    \n    return ans\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    total_friends = 5  # Judy's friends\n    # Judy can stand either at the beginning or at the end, so we have 2 options for Judy\n    # The remaining friends can stand in any order, which is a permutation of 5 people\n    ways_for_friends = factorial(total_friends)\n\n    # Two options for Judy (first or last) and permutations for friends\n    ans = 2 * ways_for_friends\n    return ans\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    given_number = 6\n    lcm = 12\n    \n    # Since 6 is one of the numbers and the LCM is 12, the other number must be a factor of 12 that is also relatively prime to 6 (sharing only 1 and 2 as common factors)\n    for i in range(1, lcm + 1):\n        if (lcm % i == 0) and (i != 6) and (i & given_number) <= 2:\n            other_number = i\n            break\n            \n    return other_number\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    number = 1\n    while digit_count < 200:\n        digit_count += len(str(number))\n        if digit_count >= 200:\n            break\n        number += 1\n    \n    # Find the exact digit that is the 200th\n    digit_index = digit_count - 200\n    return int(str(number)[digit_index])\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    eq1 = Eq(daniel - 2, 6 * (daughter - 2))\n    eq2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((eq1, eq2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the cost of the shirt as 'c'\n    c = symbols('c')\n    \n    # The price of the shirt is $40 more than the cost\n    price = c + 40\n    \n    # With 20% off, the customer pays 80% of the price\n    sale_price = 0.8 * price\n    \n    # The profit is the sale price minus the cost\n    profit = sale_price - c\n    \n    # We know the profit is $12\n    equation = Eq(profit, 12)\n    \n    # Solving the equation to find the cost of the shirt\n    cost = solve(equation, c)[0]\n    \n    return cost\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_tvs = 500 * total_days\n    total_points = 9931\n\n    # Let's assume all TVs are qualified, which means the maximum points we can get\n    max_points = total_tvs * 5\n\n    # Now, we find the points lost due to unqualified TVs\n    points_lost = max_points - total_points\n\n    # Since 18 points are lost for every unqualified product,\n    # we can find the number of unqualified products by dividing the points lost by 18\n    unqualified_tvs = points_lost / 18\n\n    # Finally, we find the number of qualified TVs by subtracting unqualified from total TVs\n    qualified_tvs = total_tvs - unqualified_tvs\n\n    return int(qualified_tvs)\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    mean_original = 12\n    total_original = mean_original * 7\n    mean_new = 11\n    total_new = mean_new * 8\n\n    eighth_number = total_new - total_original\n\n    return eighth_number\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the distance from P to the meeting point when April runs back as x meters.\n    # Therefore, Baye walked (1800 - x) meters when April met Baye.\n    # April ran x meters to meet Baye and then another 1800 - x meters to get back to P,\n    # which means she ran a total of 2 * (1800 - x) meters.\n\n    # The time it took for Baye to walk (1800 - x) meters is the same time it took April to walk 1800 meters and run x meters.\n    # Since April runs at 4 times her walking speed, running x meters takes 1/4 the time of walking x meters.\n    # So, we can set up the following relationship using the times:\n    # Baye's walking time for (1800 - x) = April's walking time for 1800 + April's running time for x\n    # (1800 - x) / b = 1800 / a + x / (4a)\n    # where a is April's walking speed and b is Baye's walking speed.\n\n    # When April met Baye, Baye was 800 meters from Q, which means the meeting point is at x = 1800 - 800 = 1000 meters from P.\n    x = 1000\n    baye_distance_from_q_when_april_back_at_p = (1800 - x) * 2\n    \n    return baye_distance_from_q_when_april_back_at_p\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n    \n    # Original number of hens is 6 times that of roosters.\n    original_ratio = Eq(hens, 6 * roosters)\n\n    # After increase, the number of hens is 4 times that of roosters.\n    increased_ratio = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solving the system of equations for the original number of hens and roosters.\n    solutions = solve((original_ratio, increased_ratio), (hens, roosters))\n\n    # The total number of chickens before the increase.\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Calculate the sum of the sequence\n    # Create a list with the sequence\n    sequence = list(range(1, 9)) + list(range(7, 0, -1)) + [1, 2]\n    # Sum the elements of the list\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    repeating_sequence = \"538462\"\n    position = 2021\n    sequence_length = len(repeating_sequence)\n    index = (position - 1) % sequence_length\n\n    return int(repeating_sequence[index])\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    position = (100 - 1) % len(sequence)\n    return sequence[position]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    term2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # For two-digit palindromic numbers\n    for num in range(1, 10):  # The tens digit goes from 1 to 9\n        count += 1  # The ones digit must be the same as the tens digit\n\n    # For three-digit palindromic numbers\n    for num in range(1, 10):  # The hundreds digit goes from 1 to 9\n        for mid_num in range(0, 10):  # The middle digit goes from 0 to 9\n            count += 1  # The ones digit must be the same as the hundreds digit\n\n    return count\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    # Let x be the total amount of money Bud had originally.\n    # According to the problem, 1/3 of it was spent on a book and 2/5 of it on a bag.\n    # Hence, the cost of the book and bag together is 132 pounds, which gives us the equation:\n    # (1/3)x + (2/5)x = 132\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Set up the equation\n    equation = Eq((1/3)*x + (2/5)*x, 132)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Parcel A, Parcel B, and Parcel C\n    A, B, C = symbols('A B C')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(A, 5 * B)            # A is 5 times B\n    equation2 = Eq(C, B - 75)           # C is 75g less than B\n    equation3 = Eq(A + B + C, 835)      # The total mass is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the mass of Parcel A\n    return solutions[A]\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_by_5 = 105 // 5\n    count_by_7 = 105 // 7\n    count_by_35 = 105 // (5 * 7)\n\n    # Apply the inclusion-exclusion principle \n    ans = count_by_5 + count_by_7 - count_by_35\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    for i in range(1, 216):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell can draw all blue and white beads first before getting enough green beads.\n    # So, in the worst case, he must draw all the blue and white beads and then 5 green beads.\n    # Therefore, the answer is the number of blue beads + white beads + 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n    \n    ans = blue_beads + white_beads + green_beads_needed\n    return ans\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) * 3 == int(str(num) + \"1\"):\n            return num\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 82):\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # If John needs 12 minutes to walk from first to fourth floor,\n    # that means he walks three floor-heights in 12 minutes.\n    # To walk from the first floor to eighth floor, he needs to walk seven floor-heights.\n    # The relationship between floors and time is linear, so we can calculate the time needed.\n\n    floors_walked = 3    # From first floor to fourth floor\n    time_for_floors = 12 # Time it takes to walk these 3 floors\n\n    # Calculate the time for one floor\n    time_per_floor = time_for_floors / floors_walked\n\n    # Calculate the time for walking from the first to the eighth floor (7 floors)\n    total_time = time_per_floor * 7\n\n    return total_time\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    # Way to solve it is by using stars and bars theorem (n+k-1 choose k-1)\n    # Here n is the number of items (6 apples) and k is the number of baskets (3 baskets)\n    from math import comb\n    n = 6  # number of apples\n    k = 3  # number of baskets\n    ans = comb(n+k-1, k-1)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    total = 40\n    remainder = 3\n    unique_div_quo_pairs = set()\n\n    for divisor in range(1, total):\n        for quotient in range(1, total // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == total:\n                unique_div_quo_pairs.add(dividend / quotient)\n\n    return len(unique_div_quo_pairs)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels = 8 : 5\n    # Let's assume initial number of birds = 8x, squirrels = 5x\n    # 20% increase in the number of squirrels = 5x * 1.20 = 6x\n    # The total number of birds and squirrels remains the same, so the new number of birds = 8x - 6x = 2x\n    \n    # So initial total animals = 8x + 5x = 13x\n    # Final total animals after increase in squirrels and birds flew away = 2x + 6x = 8x\n    # As the total remains the same, 13x must be equal to 8x, which means x is a fictional variable and has no effect on our calculation.\n    \n    # Initial number of birds = 8x\n    # Final number of birds = 2x, which means 6x birds flew away.\n    # Percentage of birds that flew away = (6x / 8x) * 100%\n\n    percentage_flew_away = (6/8) * 100\n    return percentage_flew_away\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_days = ((last_term - first_term) // difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Define a custom operation based on given patterns\n    def custom_operation(a, b):\n        return (a - 1) + (b // a)\n    \n    # Use the custom operation to find 9 â 20\n    ans = custom_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice_liters = 8 * 3\n    juice_after_drinking = total_juice_liters - 9\n    containers_needed = -(-juice_after_drinking // 5)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7  # Common difference between terms\n    last_term = 31  # Last given term of the sequence\n    next_term = last_term + common_difference  # Next term formula for arithmetic sequence\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * (52 // 2)\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    total_loafs_required = 35\n    cups_needed = total_loafs_required / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    digits = range(1, 10)  # Use digits 1 through 9 since no letter can be 0\n    max_value = 0\n\n    for combo in permutations(digits, 5):\n        D, A, R, T, C = combo\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            max_value = max(max_value, A + R + T)\n\n    return max_value\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(10, 100):  # Starting from 10 because 9/9 = 1 and we need less than 1\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to every other friend which is (friends - 1) cards per friend\n    cards_per_friend = friends - 1\n    # Total number of cards sent is friends * cards_per_friend\n    # But since every transaction is counted twice (A->B and B->A), we divide by 2\n    total_cards = (friends * cards_per_friend) // 2\n    return total_cards\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya = 1\n\n    total_members = members_left_of_Tanya + Tanya + members_right_of_Tanya\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    total_students = 39\n    equation1 = Eq(boys + girls, total_students)\n    equation2 = Eq(1/4 * boys, 2/5 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    # Define the number to factor\n    num = 87878\n\n    # Set the start of prime range as the smallest 4-digit number\n    lower_bound = 1000\n    # Set the end of prime range as the highest 4-digit number\n    upper_bound = 9999\n\n    # Generate all prime numbers in this range\n    primes = list(primerange(lower_bound, upper_bound + 1))\n\n    # Starting with the largest primes first, find the largest prime factor\n    for prime in reversed(primes):\n        if num % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Daniel gave away 24 stickers\n    daniel_after = daniel - 24\n    # Patrick bought another 10 stickers\n    patrick_after = patrick + 10\n    # In the end, Patrick had twice as many stickers as Daniel\n    equation = Eq(patrick_after, 2 * daniel_after)\n    # Daniel and Patrick had an equal number of stickers at first\n    equation_initial = Eq(daniel, patrick)\n\n    solutions = solve((equation, equation_initial), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # First segment of the race\n    distance1 = 280\n    speed1 = 7  # metres per second\n    time1 = distance1 / speed1  # time = distance / speed\n\n    # Second segment of the race\n    distance2 = 400\n    speed2 = 5  # metres per second\n    time2 = distance2 / speed2\n\n    # Final sprint of the race\n    distance3 = 800 - (distance1 + distance2)  # The total distance minus the first two distances\n    speed3 = 8  # metres per second\n    time3 = distance3 / speed3\n\n    # Total time taken to finish the race\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    van_capacity = 12\n    total_crates = 24\n\n    total_weight = crate_weight * total_crates\n    vans_needed = -(-total_weight // van_capacity)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry = 17\n    jack = 10 + 3 * henry\n    return jack\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82\n    plane_height = 569\n    vertical_distance = plane_height - whale_depth\n    return vertical_distance\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    # Using dynamic programming approach to count the partitions of the number\n    def count_partitions(n):\n        # Create an array to store the number of partitions for each number up to n\n        partitions = [0] * (n + 1)\n        partitions[0] = 1  # There is one way to partition 0 (no number)\n\n        # For each number from 1 to n, determine the number of partitions\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                partitions[j] += partitions[j - i]\n        \n        # As we consider partitions that include the number itself as adding zero, \n        # we subtract 1 to exclude it and consider only sums of two or more positive integers\n        return partitions[n] - 1\n    \n    # Calculate the number of partitions for the number 5\n    ans = count_partitions(5)\n    return ans\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # Since we want the smallest possible difference, we must arrange the\n    # digits such that the most significant digits are as close as possible.\n    # We start with the smallest 9-digit number with unique digits (123456789),\n    # and to get the closest larger number, we should increase the least\n    # significant digit as little as possible. Swapping the last two digits will\n    # achieve this (123456798). The difference is then 798 - 789 = 9.\n    smallest_number = 123456789\n    closest_larger_number = 123456798\n\n    ans = closest_larger_number - smallest_number\n\n    return ans\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum(skirts_per_day * (day + 1) for day in range(9))\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    division_result = 234000 / 520\n    return division_result\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Using the principle of inclusion-exclusion,\n    # the smallest number of right-handed girls will occur when all right-handed pupils\n    # that are not girls are included, thus:\n    # right_handed_non_girls + right_handed_girls = right_handed\n    # Since girls could potentially all be right-handed, we have to check if there are enough\n    # right-handed spots available after accounting for right-handed boys (the complement of girls in class)\n    right_handed_boys = total_pupils - girls  # Maximum possible right-handed boys\n    \n    # Now to find the smallest number of right-handed girls,\n    # we need to subtract the maximum possible right-handed boys from total right-handed.\n    right_handed_girls = right_handed - right_handed_boys\n    \n    # However, if this number is negative, it means that there are more right-handed spots\n    # available than there are boys, so the minimum number of right-handed girls in that\n    # case would be 0 (as not all girls have to be right-handed). But since the problem states\n    # that \"Not all the girls are right-handed\", the minimum right-handed girls should be 1 less\n    # than the total number of girls to satisfy this condition.\n    right_handed_girls = max(0, right_handed_girls)\n    right_handed_girls = min(right_handed_girls, girls - 1)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_fruits = symbols('total_fruits')\n    \n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - (apples_fraction + bananas_fraction)\n    \n    apples = apples_fraction * total_fruits\n    lemons = lemons_fraction * total_fruits\n    \n    equation = Eq(apples, lemons + 12)\n    \n    total_fruits_solution = solve(equation, total_fruits)\n    \n    lemons_number = lemons_fraction * total_fruits_solution[0]\n    \n    return lemons_number\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Calculate the rate at which each tap fills the jug\n    total_rate = 1 / 2 # 1 litre in 2 minutes\n    single_tap_rate = total_rate / 5 # the rate of one tap\n\n    # Calculate the time it takes for one tap to fill a 500ml jug\n    time_for_500ml = 0.5 / single_tap_rate\n\n    return time_for_500ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    \n    equation1 = Eq(john + brother, 246)\n    equation2 = Eq(john, brother + 32)\n    \n    solutions = solve((equation1, equation2), (john, brother))\n    \n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference  # Calculate Sally's height\n\n    return sally_height\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n\n    for perm in permutations(digits, 3):\n        remaining = set(digits) - set(perm)\n        max_num = int(''.join(map(str, sorted(perm, reverse=True))))\n        second_num = int(''.join(map(str, sorted(remaining, reverse=True))))\n        current_sum = max_num + second_num\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000  # Total volume in millilitres\n    volume_drank_ml = 350   # Volume drank in millilitres\n    volume_left_ml = total_volume_ml - volume_drank_ml\n    return volume_left_ml\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    # Let x be the total number of visitors at the fair\n    # children: 3/5 * x\n    # remaining visitors: 2/5 * x\n    # men: 1/2 of the remaining visitors, which is (1/2) * (2/5) * x = 1/5 * x\n    # number of children - number of men = 140\n    # (3/5 * x) - (1/5 * x) = 140\n    # Solve for x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3/5 * x) - (1/5 * x), 140)\n    total_visitors = solve(equation, x)[0]\n\n    return total_visitors\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 0.40 * 3280\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    seq = [1, 8, 16, 23, 46, 53]\n    next_num = 0\n    \n    if len(seq) % 2 == 0:  # Even index (1-based), follows the pattern: n * 2 + 1\n        next_num = seq[-1] + (seq[1] - seq[0])\n    else:                   # Odd index (1-based), follows the pattern: n + 7\n        next_num = (seq[-1] // 2) + 1\n    \n    return next_num\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    payment_per_match = 500\n    payment_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_game = 2\n\n    total_payment_for_matches = payment_per_match * number_of_matches\n    total_payment_for_goals = payment_per_goal * average_goals_per_game * number_of_matches\n\n    total_earnings = total_payment_for_matches + total_payment_for_goals\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_kilograms = 8\n    total_cost = 26.8\n\n    cost_per_kilogram = total_cost / total_kilograms\n\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for tonnage\n    A, B, C = symbols('A B C')\n\n    # Since flow rate of B is twice that of A, we have the equation B = 2A\n    equation_flow_rate = Eq(B, 2 * A)\n\n    # When A and C are used, the pool fills with 18 tons from A\n    # So the total capacity of the pool is A + C, but A contributes 18 tons\n    equation_A_and_C = Eq(A, 18)\n\n    # When B and C are used, the pool fills with 27 tons from B\n    # The total capacity of the pool is then B + C, but B contributes 27 tons\n    equation_B_and_C = Eq(B, 27)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation_flow_rate, equation_A_and_C, equation_B_and_C), (A, B, C))\n\n    # The total tonnage the pool can be filled with is the sum of A and C or B and C\n    total_tonnage = solutions[A] + solutions[C]\n\n    return total_tonnage\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    x = 1\n    y = 10\n    ans = sum(x + 2*i for i in range(y))\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let the amount of grass grown per day be G\n    # The amount of grass a horse eats per day be H\n    # The amount of grass a sheep eats per day be S\n    \n    # From the given, we can create two equations:\n    # 20H * 12 = G (The total amount of grass 20 horses eat in 12 days)\n    # 60S * 24 = G (The total amount of grass 60 sheep eat in 24 days)\n    \n    # Since 1 horse eats the same amount as 4 sheep per day, we have:\n    # H = 4S\n    \n    # By equating the grass eaten by horses and sheep, we get the total grass G\n    # 20H * 12 = 60S * 24\n    # Substitute H with 4S and simplify the equation:\n    # 20 * 4S * 12 = 60S * 24\n    # 960S = 1440S\n    # Dividing both sides by S\n    # S = (960 / 1440) * G (amount of grass 1 sheep eats per day)\n    \n    # Now, let's find out how long 12 horses and 88 sheep can finish the grass.\n    # 12H + 88S = G (grass finished per day by 12 horses and 88 sheep)\n    # Replace H with 4S again:\n    # 12 * 4S + 88S = G\n    \n    # Simplify and solve for the number of days (D):\n    # (48S + 88S) * D = G\n    # (136S) * D = G\n    # Substitute the value of S from earlier to find D\n    # (136 * (960 / 1440)) * D = 1 * G\n    # (960/10) * D = G\n    # D = G / (960/10)\n    # D = G / 96\n\n    # Now we know that both sides of the equality represent the amount of grass G:\n    # 20 horses eat in 12 days (20H*12) and 12 horses & 88 sheep eat in D days ((12H+88S) * D)\n    # 20H * 12 = (12 * 4S + 88S) * D\n    # Substitute H with 4S, which gives us 20 * 4S * 12 = (12 * 4S + 88S) * D\n    # 960S = 960S * D\n    # Simplify to solve for D\n    # D = 1\n\n    # Therefore, 12 horses and 88 sheep can eat all the grass in 1 day.\n    return int(1)\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "def solution():\n    for M in range(1, 10):  # M cannot be 0 because it's the first digit\n        for A in range(10):\n            for T in range(10):\n                for H in range(10):\n                    if len({M, A, T, H}) == 4:  # All digits must be different\n                        MATH = 1000 * M + 100 * A + 10 * T + H\n                        HTAM = 1000 * H + 100 * T + 10 * A + M\n                        if MATH + HTAM == 12221:\n                            return A + M + T + H\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr. Spencer sits between his 2 children: 3 spots are occupied.\n    # There are 3 spots left for the others to sit in. \n    # We need to consider the permutations for the children and Mr. Spencer and the others separately\n    # because Mr. Spencer has a fixed position once his children have chosen theirs.\n\n    # The children can be seated in 2! ways around Mr. Spencer.\n    children_permutations = factorial(2)\n\n    # The remaining 3 people can then occupy the 3 free seats in 3! ways.\n    other_permutations = factorial(3)\n\n    # Total seating arrangements: Mr. Spencer's children permutations \n    # multiplied by the permutations of the 3 other people.\n    arrangements = children_permutations * other_permutations\n\n    return arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    initial_sweets = 60\n    sweets_eaten_by_bill = initial_sweets / 2\n    sweets_left = initial_sweets - sweets_eaten_by_bill\n    sweets_given_away = sweets_left * (1/3)\n    sweets_remaining = sweets_left - sweets_given_away\n    return sweets_remaining\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    return (1.9 + 1.99) / 2\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 and $5 notes\n    num_2_notes, num_5_notes = symbols('num_2_notes num_5_notes')\n\n    # Equation representing the initial total number of notes\n    eq1 = Eq(num_2_notes + num_5_notes, 55)\n\n    # Cindy spent 1/3 of the $2 notes\n    remaining_2_notes = num_2_notes - (num_2_notes / 3)\n\n    # Cindy received another 8 pieces of $5 notes\n    new_num_5_notes = num_5_notes + 8\n\n    # After transaction, the number of $5 notes is 3/7 of the remaining number of notes\n    # Remaining notes = remaining $2 notes + new number of $5 notes\n    eq2 = Eq(new_num_5_notes, 3/7 * (remaining_2_notes + new_num_5_notes))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (num_2_notes, num_5_notes))\n\n    # Total money initially = number of $2 notes * $2 + number of $5 notes * $5\n    total_money = solutions[num_2_notes] * 2 + solutions[num_5_notes] * 5\n\n    return total_money\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    questions = 6\n\n    for correct_answers in range(questions + 1):\n        incorrect_answers = questions - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # distance to friend's house in meters\n    speed = 7      # running speed in meters per minute\n    time = distance / speed  # time taken to reach friend's house in minutes\n    return time\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # factorizations of 24 = 2^3 * 3\n    factors_24 = [(1, 24), (2, 12), (3, 8), (4, 6)]\n    # factorizations of 52 = 2^2 * 13\n    factors_52 = [(1, 52), (2, 26), (4, 13)]\n    \n    # Looking for the common factor 'B' in both factorizations\n    # And calculating the sum of A+C for each case and finding the minimum sum\n    min_sum = float('inf')\n    for a, b_24 in factors_24:\n        for b_52, c in factors_52:\n            if b_24 == b_52:\n                min_sum = min(min_sum, a + c)\n    return min_sum\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    original_number = (result - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    first_odd_number = 1\n    common_difference = 2\n    nth_term = first_odd_number + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Consider A, B, C as a single entity (ABC) and E, F as another (EF).\n    # There are 3! arrangements for A, B and C within the entity.\n    arrangements_ABC = factorial(3)\n    \n    # There are 2! arrangements for E and F within the entity.\n    arrangements_EF = factorial(2)\n    \n    # We now have 6 students/entities in total: ABC, EF, D, G, H, I\n    # There are 6! arrangements for these 6 entities.\n    arrangements_total = factorial(6)\n    \n    # Multiply the different arrangements for a total.\n    ans = arrangements_ABC * arrangements_EF * arrangements_total\n    return ans\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    scarfs_per_day, total_scarfs = symbols('scarfs_per_day total_scarfs')\n\n    # Original plan: finish in 6 days\n    # New plan: 24 more scarfs per day and finish 2 days earlier (6 - 2 = 4 days)\n    equation1 = Eq(scarfs_per_day * 6, total_scarfs)\n    equation2 = Eq((scarfs_per_day + 24) * 4, total_scarfs)\n\n    solutions = solve((equation1, equation2), (scarfs_per_day, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let's say there are \"x\" students and \"y\" sweets.\n    # If Mr. Lim gives each student 6 sweets, he's short of 26 sweets -> 6x = y + 26\n    # If Mr. Lim gives each student 5 sweets, he's short of 5 sweets -> 5x = y + 5\n    # Now we can set up two equations and solve for x and y:\n    # 6x - y = 26...(1)\n    # 5x - y = 5....(2)\n    # Subtracting equation (2) from equation (1) gives us:\n    # x = 21\n    # Now we substitute the value of x in equation (2):\n    # 5 * 21 - y = 5 -> y = 5 * 21 - 5\n    \n    x = 21\n    y = 5 * x - 5\n    \n    return y\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    initial_ratio = Eq(boys / girls, 5 / 3)\n    final_ratio = Eq((boys - 15) / girls, 5 / 6)\n\n    solutions = solve((initial_ratio, final_ratio), (boys, girls))\n\n    total_initial_pupils = solutions[boys] + solutions[girls]\n\n    return total_initial_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(1, 15):\n            for x3 in range(1, 15):\n                if x1 + x2 + x3 == 15 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # Since the order doesn't matter, we divide by the number of permutations (3!) of 3 numbers\n    return count // 6\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum([2, 4, 6, 8, 10, 12, 14])\n    return series_sum\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_percentage = 1/3\n    original_price = sale_price / (1 - discount_percentage)\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_current_age = (3/5) * (shelby_current_age - 5) + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 to get its prime factors and their exponents\n    factors = factorint(675)\n\n    # Initialize B as 1\n    B = 1\n\n    # For each factor, if the exponent is odd, multiply B by the factor\n    # This will make the exponent even when multiplied by 675, resulting in a perfect square\n    for prime, exp in factors.items():\n        if exp % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695\n    single_can_cost_pence = 65\n    cost_for_12_individual_cans = 12 * single_can_cost_pence\n    savings = cost_for_12_individual_cans - multipack_cost_pence\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total_count = 0\n    for i in range(3267, 5121):\n        num_str = str(i)\n        # Check if the number is within the allowed digits and has no repeated digits\n        if len(set(num_str)) == len(num_str) and all(digit in '123456' for digit in num_str):\n            total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    # Since we want to find the total weight, we add all the equations,\n    # effectively counting Adam and Ben and Carl's weight twice:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl).\n    total_weight_twice = Eq((adam + ben) + (ben + carl) + (adam + carl), (102 + 97 + 93))\n\n    # To get the total actual weight, we divide by 2\n    # because each person's weight has been counted twice.\n    total_weight = solve(total_weight_twice, (adam + ben + carl))\n\n    # Extract the total weight value from the dictionary.\n    return total_weight[adam + ben + carl] / 2\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # 1 room can be painted by both Alan and Bob in 4 hours\n    combined_rate = 1 / 4\n    # 1 room can be painted by Bob alone in 6 hours\n    bob_rate = 1 / 6\n    # Alan's rate is the difference between the combined rate and Bob's rate\n    alan_rate = combined_rate - bob_rate\n    # Alan's time taken is the reciprocal of his rate\n    alan_time = 1 / alan_rate\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a = cost of one apple and b = cost of one banana\n    a, b = symbols('a b')\n\n    # System of equations:\n    # 3a + b = 32\n    # 6a + b = 53\n    equation1 = Eq(3*a + b, 32)\n    equation2 = Eq(6*a + b, 53)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500  # initial amount\n    rate = 0.08  # interest rate\n    time = 10  # number of years\n\n    # compound interest formula\n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    return 10024 + 3968\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    num_weeks = 26\n    \n    total_food = weekly_food * num_weeks\n\n    return total_food\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's stamps\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Define the equations based on the problem\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew + kim + shaun, 256)\n    equation3 = Eq(andrew, shaun - 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    # Return the number of stamps Andrew has\n    return solutions[andrew]\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_score = symbols('original_score')\n    \n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    result = solve(equation, original_score)\n    \n    return result[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    result = 250 - (6*6) - (8*6)\n    return result\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    current_votes_mark = 22\n    current_votes_nicole = 27\n    current_votes_peter = 35\n\n    # To be elected without fail, Peter needs one more vote than half the total votes,\n    # since if he has exactly half, it's not a win, it's a tie.\n    votes_needed_for_majority = (total_votes // 2) + 1\n\n    # The number of additional votes Peter needs to secure the position\n    additional_votes_needed = votes_needed_for_majority - current_votes_peter\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Alex and Nicholas both start with the same amount of money, say 'm'\n    m = symbols('m')\n\n    # Alex spends $58, so he has m - 58 left\n    # Nicholas spends $13, so he has m - 13 left, which is supposed to be 6 times of Alex's remaining amount\n    equation = Eq(m - 13, 6 * (m - 58))\n\n    # Solve for m\n    money_at_start = solve(equation, m)[0]\n\n    # They both had 'm' originally, so together they had 2 * m\n    return 2 * money_at_start\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    value = 9**1.5  # Since a^(2/3) = 9, then a = 9^(3/2)\n    return value\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_after = 28\n    days_in_week = 7\n\n    # Calculate the remainder when 28 is divided by 7\n    remainder = days_after % days_in_week\n\n    # Since 28 is a multiple of 7, it will be the same day of the week\n    if remainder == 0:\n        ans = '0001'  # Monday -> 0001\n    elif remainder == 1:\n        ans = '0002'  # Tuesday -> 0002\n    elif remainder == 2:\n        ans = '0003'  # Wednesday -> 0003\n    elif remainder == 3:\n        ans = '0004'  # Thursday -> 0004\n    elif remainder == 4:\n        ans = '0005'  # Friday -> 0005\n    elif remainder == 5:\n        ans = '0006'  # Saturday -> 0006\n    elif remainder == 6:\n        ans = '0007'  # Sunday -> 0007\n\n    return ans\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    position_value = 6 * 0.001\n    return position_value\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    # Let the number of rulers be r and the number of pencils be p.\n    # We are given that p = r + 10.\n    # We also know that p + r = total_items.\n    # Substituting p = r + 10 into p + r, we get (r + 10) + r = total_items.\n\n    # Solving for r, we get:\n    r = (total_items - difference) / 2\n\n    return int(r)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    # mean = sum of all items / number of items\n    # sum of all items = mean * number of items\n    # x = sum of all items - sum of known items\n\n    mean = 11\n    known_sum = 11 + 13 + 17 + 12\n    total_items = 5\n    total_sum = mean * total_items\n    x = total_sum - known_sum\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    high_seven_value = 7 * 1000  # The value of the 7 in the thousands place\n    low_seven_value = 7 * 10     # The value of the 7 in the tens place\n    difference = high_seven_value - low_seven_value\n\n    return difference\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    # subtract the first and last 12m from the road length to exclude poles at the road ends\n    adjusted_length = road_length - (2 * interval)\n\n    # divide the adjusted length by the interval to get the number of poles\n    num_poles = adjusted_length // interval\n\n    return num_poles\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    ratio_boys = 5\n    ratio_girls = 6\n\n    # calculate total parts in the ratio\n    total_ratio_parts = ratio_boys + ratio_girls\n    \n    # calculate number of girls\n    girls = (ratio_girls * boys) / ratio_boys\n    \n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is 0.333... (repeating)\n    # Since the digits are repeating, the first 1000 digits will all be the digit 3.\n    digit_sum = 3 * 1000\n    return digit_sum\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    total_amount = 29\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Initial marbles needed to ensure one of each color is 1 each + 1 to ensure at least one duplicate\n    initial_marbles = 3 + 1\n    \n    # Now, for the worst-case scenario, we can take an additional 2 marbles of each of the remaining two colors\n    # This will ensure that the next marble we pick will have to be the 4th of the same color.\n    additional_marbles = 2 * 2\n\n    # Total marbles to ensure 4 of the same color\n    marbles_needed = initial_marbles + additional_marbles\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    max_number = 100\n    multiples_of_two = max_number // 2\n    return multiples_of_two\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    conc_A = symbols('conc_A')  # The concentration in container A\n    \n    # Equations based on problem statement\n    # The amount of pure substance in container C after all operations\n    pure_C = 50 * 0 + 10 * (40 / 50) * (30 / 40) * conc_A\n\n    # The final concentration in container C is 0.5%\n    equation = Eq(pure_C, (50 + 10) * 0.005)\n    \n    # Solve for the original concentration in container A\n    solution_conc_A = solve(equation, conc_A)\n    \n    return float(solution_conc_A[0])\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    # Total boxes sold in the first three days\n    total_first_three_days = 33\n    \n    # Average boxes sold in the last four days\n    average_last_four_days = 18\n\n    # Total boxes sold in the last four days\n    total_last_four_days = average_last_four_days * 4\n    \n    # Total boxes sold in the week\n    total_week = total_first_three_days + total_last_four_days\n\n    # Average per day over the week (7 days)\n    average_per_day = total_week / 7\n\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    # Calculate the amount of nickel in each metal\n    nickel_in_first_metal = 12 * 0.40\n    nickel_in_second_metal = 13 * 0.60\n    \n    # Calculate the total amount of nickel and the total mass of the new metal\n    total_nickel = nickel_in_first_metal + nickel_in_second_metal\n    total_mass = 12 + 13\n    \n    # Calculate the percent concentration of nickel in the new metal\n    percent_nickel = (total_nickel / total_mass) * 100\n    \n    return percent_nickel\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    total_people = 5\n    grouped_people = 2\n    \n    # Treat the two people who want to stand next to each other as one unit\n    remaining_people = total_people - grouped_people + 1\n    \n    # Arrange the remaining people (including the grouped pair as one unit)\n    ways_to_arrange_remaining = math.factorial(remaining_people)\n    \n    # Arrange the two people who want to stand next to each other\n    ways_to_arrange_grouped = math.factorial(grouped_people)\n    \n    # Multiply the two possibilities\n    ans = ways_to_arrange_remaining * ways_to_arrange_grouped\n    return ans\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    number1 = -3\n    number2 = 8\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Let the current ages of the cousins be a, b, and c\n    a, b, c = symbols('a b c', integer=True)\n    \n    # Today their ages multiply to 2016\n    eq1 = a * b * c - 2016\n    \n    # Last year their ages multiplied to 1377\n    eq2 = (a - 1) * (b - 1) * (c - 1) - 1377\n    \n    # We need to find the product of their ages 2 years ago\n    # Assume a > b > c and a, b, c > 0\n    solutions = solve((eq1, eq2), (a, b, c))\n    \n    # Filter valid solutions where a, b, and c are positive integers\n    valid_solutions = [(sa, sb, sc) for sa, sb, sc in solutions if sa > 0 and sb > 0 and sc > 0]\n    \n    # Since the problem does not restrict the ages to be distinct or in a specific order,\n    # any permutation of the ages that satisfies the conditions would be a valid solution.\n    # Therefore, we consider all valid solutions found.\n\n    # Calculating the product of their ages 2 years ago for all valid solutions\n    products = [(sa - 2) * (sb - 2) * (sc - 2) for sa, sb, sc in valid_solutions]\n\n    # The product from 2 years ago should remain constant across all valid solutions,\n    # So we take the first one assuming the solution exists\n    return products[0] if products else None\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # Since everyone scores a different number of wins and no ties occurred,\n    # the champion must have won every match to ensure a unique number of wins for each player.\n    # There are 7 other players, so the champion must win 7 matches to be the champion.\n    return 7\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        total = (n * (n + 1)) // 2\n        if total > 3405:\n            break\n        diff = 3405 - total\n        if diff <= n:\n            ans = diff\n            break\n        n += 1\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club = 146 + 94\n    history_club_ratio = 7\n    math_club_ratio = 8\n    history_club = (math_club * history_club_ratio) // math_club_ratio\n    \n    return history_club\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of chickens in each pen\n    x = symbols('x')\n\n    # Equations based on the problem statement\n    # Total_chickens = original_number_of_pens * original_chickens_per_pen\n    # Total_chickens = (original_number_of_pens + 6) * (original_chickens_per_pen - 6)\n    equation = Eq(24 * x, (24 + 6) * (x - 6))\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    # Since we only care about the positive solution which makes sense in the context\n    chickens_per_pen = max(solutions)\n\n    # Calculate the total number of chickens based on the original scenario\n    total_chickens = 24 * chickens_per_pen\n\n    return total_chickens\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    from sympy import symbols, divisors, solve, Eq\n\n    divisor, dividend, quotient = symbols('divisor dividend quotient', integer=True)\n    remainder = 3\n    total_sum = 40\n    equation = Eq(divisor + dividend + quotient + remainder, total_sum)\n\n    solutions = solve(equation)\n\n    possible_values = set()\n    for sol in solutions:\n        div, divid, quot = sol[divisor], sol[dividend], sol[quotient]\n        if divid % div == remainder and div > 0 and quot > 0:\n            possible_values.add(divid / quot)\n            \n    return len(possible_values)\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the digits of the given numbers on planet Zog to get their equivalent on Earth\n    num1 = int(str(729)[::-1])  # Reverse order of 729 to get 927\n    num2 = int(str(26)[::-1])   # Reverse order of 26 to get 62\n\n    # Perform subtraction on Earth\n    result_earth = num1 - num2\n\n    # Reverse the subtraction result to get the answer as it would be written on planet Zog\n    result_zog = int(str(result_earth)[::-1])\n\n    return result_zog\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given: S_6 = 64 and S_12 = 156\n\n    # The sum of the first n terms of an arithmetic progression can be calculated as:\n    # S_n = n/2 * (2*a + (n-1)*d)\n    # Assuming a is the first term and d is the common difference\n\n    # From S_6, we have the equation:\n    # 64 = 6/2 * (2*a + (6-1)*d)\n    # Simplifying, we get:\n    # 64 = 3 * (2*a + 5*d) => Equation (1)\n\n    # From S_12, we have the equation:\n    # 156 = 12/2 * (2*a + (12-1)*d)\n    # Simplifying, we get:\n    # 156 = 6 * (2*a + 11*d) => Equation (2)\n\n    # We can solve these 2 equations to find 'a' and 'd'.\n\n    # Divide Equation (2) by 2 to find a relation between it and Equation (1):\n    # 78 = 3 * (2*a + 11*d) => Divide by 2:\n    # Subtract Equation (1) from this new equation:\n    # 78 - 64 = 3 * (2*a + 11*d - 2*a - 5*d)\n    # 14 = 3 * (6*d)\n    # d = 14 / (3 * 6)\n    d = 14 / 18\n\n    # Now we can find 'a' using Equation (1):\n    # 64 = 3 * (2*a + 5*d)\n    # a = (64 / 3 - 5*d) / 2\n    a = (64 / 3 - 5 * d) / 2\n\n    # Now calculate the sum of the first 18 terms using the values for 'a' and 'd':\n    # S_18 = 18/2 * (2*a + (18-1)*d)\n    S_18 = 18 / 2 * (2 * a + (18 - 1) * d)\n\n    return S_18\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_then = ashley_age_now - 3\n    brother_age_then = ashley_age_then - 2\n    brother_age_now = brother_age_then + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    speed = 20  # meters per second\n    time = 30  # seconds\n    \n    # Distance = Speed * Time\n    distance_covered = speed * time\n    \n    # Length of the bridge is the total distance covered minus the length of the train\n    bridge_length = distance_covered - train_length\n    \n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    marks_difference = hebe_score - emily_score\n\n    return marks_difference\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 possibilities for the first digit (3 or 4, cannot be 0),\n    # and each of the second and third digits have 3 possibilities (0, 3, 4).\n    # Thus we have 2 * 3 * 3 = 18 different three-digit numbers.\n    return 2 * 3 * 3\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    won = symbols('won')\n    lost = symbols('lost')\n\n    equation1 = Eq(won, 2 * lost)\n    equation2 = Eq(won + lost, 63)\n\n    solutions = solve((equation1, equation2), (won, lost))\n\n    return solutions[lost]\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Star jogs from 6:30am to 7:00am, which is a duration of 0.5 hour\n    jog_speed = 9  # km per hour\n    jog_distance = jog_speed * 0.5\n\n    # Star walks from 7:00am to 8:00am, which is a duration of 1 hour\n    walk_speed = 7.5  # km per hour\n    walk_distance = walk_speed * 1\n\n    # Total distance Star travels every morning\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    result = (55 - 44) * common_factor\n    return result\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    # According to the sequence of operations given, we have to follow order of operations.\n    # The double minus (--) turns into plus, thus the operation becomes\n    # 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n    ans = 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    cows_initial, goats_initial = symbols('cows_initial goats_initial')\n    \n    # Create equations based on the problem\n    total_initial = cows_initial + goats_initial\n    eq1 = Eq(cows_initial, 0.65 * total_initial)\n    eq2 = Eq(cows_initial + 240, 0.85 * (total_initial + 240))\n    eq3 = Eq(goats_initial * 2, goats_initial + (total_initial - cows_initial))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (cows_initial, goats_initial))\n    \n    # Get the number of goats initially\n    goats_initial_solution = solutions[goats_initial]\n    \n    return goats_initial_solution\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Area of an equilateral triangle = (sqrt(3)/4) * side^2\n    from math import sqrt\n    \n    # Calculate the areas of triangle X and Y\n    area_x = (sqrt(3)/4) * (3 ** 2)\n    area_y = (sqrt(3)/4) * (9 ** 2)\n    \n    # Calculate how many times triangle X can fit into triangle Y\n    ans = area_y / area_x\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n    \n    # There are 3 girls and we treat them as a single unit plus 3 teachers and 3 boys\n    single_units = 3 + 3 + 1  # 3 boys, 3 teachers, 1 group of girls\n    \n    # Calculate the permutations of these single units\n    total_permutations = factorial(single_units)\n    \n    # Now we need to multiply by permutations of girls among themselves\n    girls_permutations = factorial(3)\n    \n    # Boys can be placed in the 4 positions between girls/teachers or at the beginning and the end\n    # (T represents teachers and girls group)\n    # Positions: T _ T _ T _ T\n    boys_positions = 4\n    \n    # We calculate the permutations for placing 3 boys in these 4 positions\n    boys_permutations = factorial(boys_positions) // factorial(boys_positions - 3)\n    \n    # The total arrangements:\n    ans = total_permutations * girls_permutations * boys_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    # Let the total amount spent on pens be represented by 5x and spent on pencils be 3x\n    # According to the problem, the total amount spent is $120, so we have the equation:\n    # 5x + 3x = 120\n    # which simplifies to:\n    # 8x = 120\n\n    # We solve for x\n    x = 120 / 8\n\n    return x\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_to_choose = 2\n    ways = comb(num_students, num_to_choose)\n    return ways\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_num = 8 * 9 * 10\n    smaller_num = 1 * 2 * 3\n    ans = larger_num - smaller_num\n    return ans\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup_options = 2  # 1 soup of the day and 1 option not to have soup\n    desserts_options = 3  # 2 desserts and 1 option not to have dessert\n\n    total_combinations = appetisers * main_courses * soup_options * desserts_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for i in range(100, 201):\n        if i % 8 == 3 and i % 9 == 1:\n            return i\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # 1 dog = 8 rabbits\n    dog_to_rabbit = 8\n    # 1 rabbit = 2 chickens\n    rabbit_to_chicken = 2\n\n    # 1 dog = 8 rabbits * 2 chickens/rabbit\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n    \n    # Since the product of digits is 2^27, the only possible digits are 2, 4, and 8 (2^1, 2^2, 2^3).\n    # We need to find combinations of these that give 2^27 when multiplied.\n    # 2^27 can be expressed as 2 * (2^3)^9, which means one possibility is having nine 8s and one 2 as the digits.\n    # Let's find how many unique permutations are there for this arrangement.\n\n    total_digits = 10\n    num_eights = 9\n    num_twos = 1\n\n    permutations = factorial(total_digits) // (factorial(num_eights) * factorial(num_twos))\n\n    return permutations\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # The given sequence is an arithmetic sequence where:\n    # a = first term = 6\n    # d = common difference = 11 - 6 = 5\n    # To find the number of terms (n), we notice that the sequence ends at 41. \n    # We can use the formula for the nth term of an arithmetic sequence:\n    # an = a + (n - 1) * d\n    # 41 = 6 + (n - 1) * 5\n    # Solving for n gives us n = (41 - 6) / 5 + 1 = 8\n    a = 6\n    d = 5\n    n = (41 - a) // d + 1\n    \n    # The sum of an arithmetic sequence is given by the formula:\n    # Sum = n/2 * (2a + (n - 1) * d)\n    sum_of_terms = n/2 * (2*a + (n - 1) * d)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    numbers = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the original number of slices\n    # According to the problem, her family ate 3/5 of the cake, so 2/5 of the cake is left\n    # She then gave 2 slices to her friends, and had 4 slices left\n    # Hence, 2/5 of the original cake - 2 slices = 4 slices\n    # (2/5)*x - 2 = 4\n    # Solve for x\n    x = (4 + 2) * 5 / 2\n    return int(x)\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    position_difference = 10**3 - 10**1\n    return position_difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n\n    min_pencils = (total_pencils + pencil_cases - 1) // pencil_cases\n\n    return min_pencils\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for Mike to finish the job alone\n    # Let y be the time it takes for Danny to finish the job alone\n    x, y = symbols('x y')\n\n    # The rate of work Mike and Danny do together is 1/10 per hour\n    # The rate of work Mike does is 1/x per hour\n    # The rate of work Danny does is 1/y per hour\n\n    # When Mike and Danny work together, the combined work rate is 1/x + 1/y = 1/10\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # According to the problem statement,\n    # Mike types for 8 hours and Danny for 13 hours to finish the job\n    # So Mike does 8/x of the job and Danny does 13/y of the job\n    # Together, they do 1 job, so 8/x + 13/y = 1\n    equation2 = Eq(8/x + 13/y, 1)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We are interested in the time it takes for Danny to finish the job by himself\n    return solutions[y]\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_op(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    # Create a Python function to find m using the equation m â 10 = 66\n    for m in range(66):\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54  \n    distance_between_chess = 3  \n    # Every corner is counted twice (once for each side), thus subtract 4 to correct\n    chess_per_side = side_length // distance_between_chess\n    total_chess = 4 * chess_per_side - 4\n    return total_chess\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_balls = symbols('blue_balls', integer=True)\n\n    # Total balls in the bag\n    total_balls = blue_balls + 4\n\n    # Probability of getting two red balls one after another without replacement:\n    # (Number of ways to choose two red balls) / (Number of ways to choose any two balls)\n    probability = (4/total_balls) * (3/(total_balls-1))\n\n    # Equation based on the given probability 2/7\n    equation = Eq(probability, 2/7)\n\n    # Solve for the number of blue balls\n    number_of_blue_balls = solve(equation, blue_balls)\n\n    # As we're looking for the number of blue balls, and we want a natural number, filter the results\n    number_of_blue_balls = [int(s) for s in number_of_blue_balls if s.is_real and s > 0]\n\n    return number_of_blue_balls[0]\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This is -4 as the sequence is decreasing\n    n = 1  # The first term is not negative, so start counting from the second term\n\n    while first_term + (n - 1) * common_difference >= 0:\n        n += 1\n\n    return n - 1  # Subtract 1 because we are looking for the term just before the first negative term\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    father_gave = 4/5\n    \n    remaining_amount = initial_amount - spent_amount + father_gave\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "from math import comb\n\ndef solution():\n    # Any digit must be repeated at most 4 times so it doesn't get painted red.\n    max_repeats = 4\n    # We need to distribute 100 squares with numbers 0-9 without any digit repeating 5 times or more.\n    # The optimal distribution would be to have each digit repeated exactly 4 times, which would be 4*10 = 40 squares.\n    # However, since 4*10 = 40 doesn't equal to 100, the remaining 100 - 40 = 60 squares must have different digits from one another.\n    # Since there are 10 possible digits, we can fill 60 squares with each digit repeating a maximum of 6 times and 4 more squares with each digit 4 times.\n\n    # Calculate the number of ways to choose 6 digits from the 10 options for the 60 squares.\n    ways_1 = comb(10, 6)\n    # Calculate the number of ways to fill 60 squares with 6 digits such that no digit is used more than 6 times.\n    ways_2 = comb(60, 10)\n    \n    # Since we are calculating the smallest possible number of red squares,\n    # we focus on the case with the minimum red squares which is 40.\n    min_red_squares = 40\n\n    # The number of ways to have the minimum red squares is equal to\n    # ways to choose 6 digits from the 10 options multiplied by the \n    # ways to fill 60 squares with 6 digits such that no digit is used more than 6 times.\n    num_ways = ways_1 * ways_2\n    \n    return min_red_squares, num_ways\n\nans, num_ways = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # Only check 32-99, to avoid 5-digit results\n        square = i * i\n        if (square // 1000 == (square // 100) % 10) and ((square // 10) % 10 == square % 10):\n            return square\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3*m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    zeros_needed = 28\n    n = 1\n    five_count = 0\n    \n    while five_count < zeros_needed:\n        n += 1\n        temp_n = n\n        \n        while temp_n % 5 == 0:\n            five_count += 1\n            temp_n //= 5\n\n    return n\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    remaining_distance = 130\n    speed_tim = 56\n    speed_bob = 74\n    # Combined speed per hour\n    combined_speed = speed_tim + speed_bob\n    # Distance covered until they are 130 km apart\n    distance_covered = initial_distance - remaining_distance\n    # Time taken for Tim and Bob to drive until they are 130 km apart\n    time_taken = distance_covered / combined_speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    effective_distance = day_distance - night_distance\n    days = 0\n    distance = 0\n    \n    while True:\n        days += 1\n        distance += day_distance\n        if distance >= total_distance:\n            break\n        distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    numbers_sum = 5 * 5  # mean * number of values\n    known_sum = 3 + 4 + 6 + 10  # sum of known numbers\n    fifth_number = numbers_sum - known_sum  # total sum - sum of known numbers\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n    \n    ans = reduce(lcm, [akon_cycle, ben_cycle, cris_cycle])\n    \n    return ans\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "def solution():\n    from itertools import permutations\n\n    lucky_years_count = 0\n    \n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:  # Ensure there are 4 distinct digits\n            for perm in permutations(digits):\n                consecutive = sorted(perm)\n                if consecutive[3] == str(int(consecutive[0]) + 3) and \\\n                   consecutive[2] == str(int(consecutive[0]) + 2) and \\\n                   consecutive[1] == str(int(consecutive[0]) + 1):\n                    lucky_years_count += 1\n                    break\n    \n    return lucky_years_count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    repeating_digits = [8, 3, 5, 4]\n    sum_of_digits = 0\n    for i in range(84):\n        sum_of_digits += repeating_digits[i % 4]\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    \n    total_distance = eddie + jenny + jason\n    num_runners = 3\n    \n    average_distance = total_distance / num_runners\n    \n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # For 6 strikes:\n    # Time between each strike + sound duration of each strike = total duration\n    # Let the time between each strike be x seconds, hence for 6 strikes, there are 5 intervals between them.\n    # 5x + 6*3 = 43\n    # 5x + 18 = 43\n    # 5x = 43 - 18\n    # 5x = 25\n    # x = 25 / 5\n    # x = 5 seconds is the time between each strike.\n\n    x = 5\n\n    # For 12 strikes, there are 11 intervals.\n    # Total time = time between strikes * number of intervals + sound duration * number of strikes\n    # = x * (12 - 1) + 3 * 12\n    total_time = x * (12 - 1) + 3 * 12\n\n    return total_time\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import comb\n\ndef solution():\n    # We have to ensure that each kid gets at least one pen.\n    # So we initially give 1 pen to each of the 6 kids,\n    # which leaves us with 20 - 6 = 14 pens to distribute.\n    \n    # Now, this is a problem of partitioning 14 pens into 6 parts\n    # which can be done using the \"stars and bars\" method.\n    \n    # We need to place 5 bars to create 6 parts for 6 kids.\n    # Number of ways to choose positions for the bars is the combination of 14 + 5 choose 5.\n    \n    number_of_ways = comb(14 + 5, 5)\n    return number_of_ways\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    minutes_per_quiz = 30\n    num_quizzes = 4\n    total_minutes = minutes_per_quiz * num_quizzes\n    hours = total_minutes / 60\n    return hours\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Assuming m and m^2 are close to the root of the original number of students\n    # and n^2 - m^2 = 18 + 5\n    # So, we are looking for two perfect squares that differ by 23\n    \n    # Start with a guess for m (since we need m^2 + 5 to be just smaller than a perfect square)\n    m = 1\n    while True:\n        # Calculate the square of m\n        m_squared = m * m\n        # Calculate the next square (n^2) which would have been perfect if 18 more students joined\n        n_squared = m_squared + 18 + 5\n        # Check if n_squared is a perfect square\n        n = int(n_squared ** 0.5)  # Take the square root of n_squared\n        if n * n == n_squared:  # Check if the square root squared is the original number (i.e. if it's perfect square)\n            break  # If we found the perfect square, we break the loop\n        m += 1  # Otherwise, increment m and continue looking\n\n    # Calculate original number of students, which is m^2 + 5\n    original_students = m_squared + 5\n\n    return original_students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people = 6\n    hours_needed_by_six_people = 15\n    hours_needed_by_x_people = 2\n\n    # Assume work_done is the total work done in building the bridge\n    work_done = people * hours_needed_by_six_people\n\n    # Since all people build at the same rate, if we want the bridge to be built in 2 hours,\n    # we divide the total amount of work by the number of hours.\n    people_needed = work_done / hours_needed_by_x_people\n\n    return people_needed\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass in kilograms\n    speed = 30    # speed in meters per second\n\n    # Kinetic energy formula is (1/2) * mass * speed^2\n    kinetic_energy = 0.5 * mass * speed ** 2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if all([num % 3 == 1, num % 4 == 1, num % 5 == 1, num % 7 == 2]):\n            return num\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Since the first digit can't be zero, there are 9 possibilities for the first digit and 10 for each of the next two digits.\n    \n    non_zero_numbers = 9 * 9 * 8  # Here, none of the digits can be zero, which gives 9 options for the first digit (1-9), 9 for the second (1-9, excluding the first digit), and 8 for the third (1-9, excluding the first two digits).\n\n    numbers_with_at_least_one_zero = total_three_digit_numbers - non_zero_numbers  # Subtract non_zero_numbers from total possibilities to get numbers with at least one zero.\n    \n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for number in range(100, 300):\n        if number % 5 == 2 and number % 6 == 2 and number % 7 == 2:\n            return number\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    # The pieces will be cuts + 1, since the first cut  creates two pieces\n    pieces = cuts + 1\n    length_each_piece = total_length / pieces\n\n    return length_each_piece\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def smallest_number_with_clues():\n    # The greatest odd number for the ones place (1-9)\n    ones = 9\n    \n    # Possible digits for hundreds and tens place\n    possible_digits = list(range(10))\n    \n    # Removing the ones place digit as it is already used\n    possible_digits.remove(ones)\n    \n    # Find the smallest number by iterating over possible values for hundreds and tens place\n    for hundreds in possible_digits:\n        for tens in possible_digits:\n            if hundreds != tens and (hundreds + tens) == 13:\n                # The smallest digit for the thousands place is 1, since 0 is not allowed\n                # as it would make the number a 3-digit number.\n                # Also, we can't repeat the digits used in other places.\n                thousand = min(set(possible_digits) - {hundreds, tens, ones})\n                \n                # Return the number formed by the digits found\n                return thousand * 1000 + hundreds * 100 + tens * 10 + ones\n\n# Set the final answer variable ans to the result of the function call\nans = smallest_number_with_clues()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let Jerry's speed be x and Kevin's speed be 1.5x.\n    # t being the time when they meet\n    # The sum of the distances they drove should equal 225 miles\n    # Jerry's distance = speed * time => x * t\n    # Kevin's distance = 1.5x * t\n    # The sum of the distances is x * t + 1.5x * t = 225\n    \n    # Calculate the meet time first\n    # (x + 1.5x) * t = 225 => 2.5x * t = 225\n    # Because the ratio of the speeds is 1:1.5, we can use this to distribute the 225 miles.\n    # The ratio of their combined speed to Jerry's speed is 2.5:1\n    # Therefore, the ratio of the distances is the same 2.5:1\n    # So, the distance Jerry has driven when they meet is 225 / 2.5 = 90 miles\n    \n    return 90\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solved_x = solve(equation, x)\n\n    return solved_x[0]\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height = 100  # original height in percentage\n    bounce_factor = 75  # rebound bounce is 75% of the previous height\n    threshold = 25  # the height threshold is 25% of the original height\n    bounces = 0  # the number of bounces\n\n    while height >= threshold:\n        height *= (bounce_factor / 100)\n        bounces += 1\n\n    return bounces\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    # Let uncle_age be the current age of her uncle.\n    uncle_age = symbols('uncle_age')\n    # When Doris reaches her uncle's age, the age difference between them will be the same.\n    # So, her uncle's age at that time will be uncle_age + (uncle_age - doris_age).\n    equation = Eq(uncle_age + (uncle_age - doris_age), 40)\n\n    # Solve the equation to find the uncle's current age.\n    uncle_current_age = solve(equation, uncle_age)\n\n    return uncle_current_age[0]\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    # Since the pictures on the extreme ends, the space to equally distribute is between them\n    # Subtract the width of two pictures, because they are at the extreme ends\n    usable_width = total_width - 2 * picture_width\n    \n    # We have 8 pictures left and 9 spaces between those pictures when lined up in a row\n    space_between_pictures = usable_width / 9\n    \n    # The center of the wall\n    wall_center = total_width / 2\n    \n    # Distance from the left end to the centre of the third picture:\n    # It's the sum of (space between first two pictures + one picture width + one space + half of the second picture's width)\n    distance_to_third_picture_centre = picture_width + space_between_pictures + (picture_width / 2) + space_between_pictures\n    \n    # Distance from the centre of the wall to the centre of the third picture\n    distance_from_wall_centre_to_third_picture = abs(wall_center - distance_to_third_picture_centre)\n    \n    return distance_from_wall_centre_to_third_picture\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a banana (b) and an apple (a)\n    b, a = symbols('b a')\n\n    # Set up equations based on the problem statement\n    # Ellie's equation: 2 bananas + 3 apples = 1.50\n    eq1 = Eq(2*b + 3*a, 1.50)\n    # Beth's equation: 3 bananas + 2 apples = 1.45\n    eq2 = Eq(3*b + 2*a, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, a))\n\n    # Calculate the cost of 1 banana + 1 apple using the solutions\n    cost = solutions[b] + solutions[a]\n\n    return cost\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Timothy's reasoning says: 8 + blank = 15.\n    # Let's check if 7 is the correct number to fill the blank.\n    blank = 15 - 8\n    \n    # If the answer to the blank is 7, Timothy's reasoning is correct.\n    # Otherwise, we return the correct number that solves the riddle.\n    return blank\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Jerry had\n    original_money = symbols('original_money')\n\n    # Equation representing the money spent on the watch\n    watch_expense = 200\n\n    # Equation representing the remaining money after buying the watch\n    remaining_money_after_watch = original_money - watch_expense\n\n    # Equation representing the money spent on the shirt\n    shirt_expense = (2/7) * remaining_money_after_watch\n\n    # Equation representing the remaining money after buying the shirt\n    remaining_money = remaining_money_after_watch - shirt_expense\n\n    # Equation representing that remaining money is 1/3 of the original amount of money\n    final_equation = Eq(remaining_money, original_money / 3)\n\n    # Solve the equation to find the original amount of money\n    solution = solve(final_equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial as fact\n    \n    # Ronda must stand at the furthest right, so there are 6 positions left for the other 6 students\n    # Tom and Harry must stand together, we can consider them as a single entity, so we have 5 entities to arrange\n    num_entities = 5\n    \n    # Calculate permutations for these 5 entities in 5 positions\n    permutations_entities = fact(num_entities)\n    \n    # Now, Tom and Harry as a single entity can be arranged in 2! ways\n    permutations_tom_harry = fact(2)\n    \n    # Total permutations is the product of permutations of entities and permutations of Tom and Harry\n    total_permutations = permutations_entities * permutations_tom_harry\n    \n    return total_permutations\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n\n    # Interest rates\n    interest_first_period = 0.05\n    interest_second_period = 0.08\n\n    # Compound the investment for the first three years\n    value_after_three_years = initial_investment * (1 + interest_first_period)**3\n\n    # Compound the value after three years for the next two years\n    final_value = value_after_three_years * (1 + interest_second_period)**2\n\n    # Round the result to the nearest tenth\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    # When rounded off to the nearest $100, the price is $125 000.\n    # This means the original price could be anywhere from $124 950 to $125 049.\n    # Ryna thinks the lowest possible price is $125 001 but this is incorrect.\n    # The lowest possible price of the car to the nearest dollar, \n    # being greater than $124 950 and rounding off to $125 000, is actually $124 950.\n    \n    lowest_price = 124950\n    return lowest_price\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    # Initial conditions\n    current_avg = 89\n    current_tests = 4\n    desired_avg = 95\n    max_score_per_test = 100\n    \n    # Calculating the total points Paul has so far\n    current_points = current_avg * current_tests\n    \n    # Initialising the number of additional tests needed\n    additional_tests = 0\n    \n    # Calculating points to reach the desired average\n    while True:\n        # Incrementing additional tests\n        additional_tests += 1\n        \n        # New total tests taken\n        total_tests = current_tests + additional_tests\n        \n        # New total points needed to achieve desired average\n        required_points = total_tests * desired_avg\n        \n        # Points Paul needs to score in all next tests\n        # assuming he scores 100 in each\n        points_required_in_additional_tests = required_points - current_points\n        \n        if points_required_in_additional_tests <= max_score_per_test * additional_tests:\n            break\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Speed and distance for each segment\n    speed1 = 9  # metres per second\n    speed2 = 6  # metres per second\n    speed3 = 10 # metres per second\n    distance1 = 540  # metres\n    distance2 = 300  # metres\n    distance3 = 1000 - (distance1 + distance2)  # metres, total - sum of the other two segments\n\n    # Time for each segment\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time for the race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n    return uncle_current_age\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r = usual speed in km/h, d = distance from P to Q, and t = usual time to travel without increase\n    r, d, t = symbols('r d t')\n\n    # If the speed is increased by 20%, the new speed is r + 0.2r = 1.2r\n    # The time it takes with the new speed is d / (1.2r)\n    # The difference in time is t - d / (1.2r) = 1 hour\n    equation1 = Eq(t - d / (1.2 * r), 1)\n\n    # If the car travels the first 200 km at its usual speed r, it takes 200 / r hours\n    # For the remaining distance (d - 200) km, the speed is increased by 25%, so the new speed is r + 0.25r = 1.25r\n    # The time it takes for the remaining distance with the new speed is (d - 200) / (1.25r)\n    # The total time with the change in speed for the last part is 200 / r + (d - 200) / (1.25r)\n    # The difference in time is t - (200 / r + (d - 200) / (1.25r)) = 12 minutes = 0.2 hours\n    equation2 = Eq(t - (200 / r + (d - 200) / (1.25 * r)), 0.2)\n\n    # We solve the two equations to find the distance d\n    solution = solve((equation1, equation2), (r, d, t))\n\n    # Returning the distance between P to Q\n    return solution[d]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # in meters per second\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    difference = polly_stamps - chloe_stamps\n    return difference\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n    # Two equations based on the given problem\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_difference = (9 * 60 + 25) - (8 * 60 + 30)\n    return time_difference\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sheep_start, cows_start = symbols('sheep_start cows_start', positive=True, integer=True)\n    \n    # Sheep were 5/7 the number of cows at the beginning\n    initial_condition = Eq(sheep_start, (5/7) * cows_start)\n    \n    # 21 new sheep were brought into the farm and 7 cows were removed\n    sheep_end = sheep_start + 21\n    cows_end = cows_start - 7\n    \n    # At the end, the number of cows became 3/4 the number of sheep\n    final_condition = Eq(cows_end, (3/4) * sheep_end)\n    \n    # Solving the simultaneous equations\n    solutions = solve((initial_condition, final_condition), (sheep_start, cows_start))\n    \n    return solutions[sheep_start]\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # The sum of their ages increases by 2 each year as they both get one year older.\n    # So, we need to find out after how many years the sum of their ages will increase by (30 - 22)\n    age_difference = 30 - 22\n    # Each year, the sum of their ages increases by 2\n    years_needed = age_difference // 2\n    return years_needed\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_to_work = debt / monthly_salary\n\n    return months_to_work\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 2\n    b_efficiency = 1\n    a_days_to_complete = 6\n\n    # A's work done in one day is 1/6 of the job\n    a_work_per_day = 1 / a_days_to_complete\n    \n    # Since A's efficiency is twice B's, B will take twice as long as A to complete the job alone\n    b_work_per_day = a_work_per_day / a_efficiency\n\n    # Together A and B's work done in one day\n    together_work_per_day = a_work_per_day + b_work_per_day\n\n    # The days they need to complete the job working together is the reciprocal of the work they do per day.\n    days_to_complete_together = 1 / together_work_per_day\n    \n    return days_to_complete_together\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_candies = symbols('total_candies')\n    \n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_dawn = total_candies - anna - belle\n    equation = Eq(anna + belle, cathy_dawn + 90)\n    \n    solution = solve(equation, total_candies)\n    return solution[0]\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50  # cost of haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # cost of mamee is 30 cents less\n    big_jelly_cost = 6 * mamee_cost  # big packet of jelly is 6 times the cost of mamee\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    ans = (18 / 36) * 32\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_after_joel = 4\n    half_before_joel = (remaining_after_joel + 2) * 2\n    remaining_after_valerie = half_before_joel\n    half_before_valerie = (remaining_after_valerie + 3) * 2\n    remaining_after_ethan = half_before_valerie\n    initial_plants = (remaining_after_ethan + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    books_to_give = (beck_books - chris_books) / 2\n\n    return int(books_to_give)\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total number of fish balls made at first\n    x = symbols('x')\n\n    # after selling 3/4 in the morning, 1/4 is left\n    # after selling 1/3 of the remaining in the afternoon, (1 - 1/3) of 1/4 of x is left\n    remaining = x * (1/4) * (2/3)\n\n    # he made another 506 fish balls and had twice the number he made at first\n    equation = Eq(remaining + 506, 2 * x)\n\n    # solve for x\n    fish_balls_made_first = solve(equation, x)[0]\n\n    return fish_balls_made_first\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 * (1/100)\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boy_ratio = 2\n    girl_ratio = 7\n    boys = 14\n\n    total_ratio = boy_ratio + girl_ratio\n    total_students = (boys / boy_ratio) * total_ratio\n\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_price = 3\n    marble_price = strawberry_price + 2\n    cheese_price = 3 * marble_price\n    price_for_two_cheesecakes = 2 * cheese_price\n    \n    return price_for_two_cheesecakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle_plus_seventeen = 6 * 6 + 2 - 17\n    circle_value = circle_plus_seventeen / 3\n    return circle_value\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((1, 3), (3, 5), (5, 7))\n    result = solve_congruence(*congruences)\n    number = result[0]\n\n    while number < 400:\n        number += result[1]\n\n    if number >= 500:\n        return None  # Number is not within the given range\n\n    return number\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    import math\n    \n    number = 36\n    sqrt_number = int(math.sqrt(number))\n    factors = set()\n\n    for i in range(1, sqrt_number + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    # Number of pigs\n    pigs = 8\n    # Farmer John gave each pig one green apple\n    green_apples = pigs \n    # He also gave one red apple to every two pigs to share.\n    red_apples = pigs // 2\n    # Total apples given\n    total_apples = green_apples + red_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    seeds_died = total_seeds / 4\n    seeds_grown = total_seeds - seeds_died\n    return int(seeds_grown)\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define variables for the number of cupcakes.\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Form the equations based on the given information.\n    equation1 = Eq(chocolate, vanilla + 72)  # 72 more chocolate cupcakes than vanilla.\n    equation2 = Eq(blueberry, vanilla - 36)  # 36 lesser blueberry cupcakes than vanilla.\n\n    # After selling cupcakes, Sally had 427 left.\n    equation3 = Eq((chocolate - chocolate / 6) + (vanilla - 2 * vanilla / 3) +\n                   (blueberry - 7 * blueberry / 9), 427)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold (1/6 of the total chocolate cupcakes).\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the price of one shirt and p be the price of one pair of pants\n    s, p = symbols('s p')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * s + 2 * p, 81)\n    equation2 = Eq(5 * s + 4 * p, 147)\n\n    # Solve the system of equations for s and p\n    solutions = solve((equation1, equation2), (s, p))\n\n    # Calculate the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[s] + solutions[p]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:\n            money += 10\n        else:\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 5),  # remainder 3 when divided by 5\n        (4, 7),  # remainder 4 when divided by 7\n        (5, 9),  # remainder 5 when divided by 9\n    ]\n    \n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = (\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5)\n    )\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n\n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 178) / 4, 54)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let d be the distance between Nini's home and the countryside.\n    # Let s be the original speed.\n    # According to the problem, we know:\n    # d = s * 8 (since she will arrive in 8 hours with the original speed)\n    \n    # If she wants to arrive one hour earlier, she has to travel at s + 5 km/h,\n    # and the time taken will be 8 - 1 = 7 hours, thus:\n    # d = (s + 5) * 7\n    \n    # Setting the two equations equal to each other, we get:\n    # s * 8 = (s + 5) * 7\n    # 8s = 7s + 35\n    # s = 35\n    \n    # Now we can find the distance (d) by substituting s back into either equation:\n    # d = 35 km/h * 8 h = 280 km\n    \n    # Return the calculated distance\n    return 280\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # Total ways to arrange 4 people\n    ways_with_claire_tony_opposite = 2 * 1 * 2 * 1  # Ways with Claire and Tony sitting across each other\n\n    return total_ways - ways_with_claire_tony_opposite\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one banana and one pear\n    banana_price, pear_price = symbols('banana_price pear_price')\n\n    # Create equations based on the information given\n    equation1 = Eq(banana_price + 2 * pear_price, 94)  # Max's purchase\n    equation2 = Eq(banana_price + pear_price, 62)      # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana_price, pear_price))\n\n    # Return the cost of one banana\n    return solutions[banana_price]\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let x be the total number of stickers Charlotte originally had\n    # Let y be the total number of stickers Marry originally had\n    # Let z be the total number of stickers Alexis originally had\n    # y / z = 7 / 5 => y = 7z / 5\n    # Charlotte gets 20% of y and 20% of z, which is 0.2y + 0.2z\n    # This increases Charlotte's stickers by 80%, so 0.2y + 0.2z = 0.8x => y + z = 4x\n    # After giving away stickers, Marry has y - 0.2y = 0.8y, Charlotte has x + 0.2y + 0.2z\n    # Marry had 20 stickers more than Charlotte in the end: 0.8y = x + 0.2y + 0.2z + 20\n    # Substitute y with 7z / 5 in the equations:\n    # 7z / 5 + z = 4x => 12z / 5 = 4x => z = 5x / 3\n    # 0.8 * 7z / 5 = x + 0.2 * 7z / 5 + 0.2z + 20\n    # Simplify and solve for x:\n    # 7z / 5 - 0.2 * 7z / 5 - 0.2z = 20\n    # (5 * 7z - 7z - z) / 5 = 20\n    # (28z - z) / 5 = 20\n    # 27z / 5 = 20\n    # z = 100 / 27\n    \n    # Since we need the initial number of stickers Alexis had, and we determined z = 100 / 27, we round it since original number of stickers cannot be a fraction:\n    z = round(100 / 27)\n    \n    # Returning the number of stickers Alexis had originally\n    return z\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 0\n    while (1 << test_tubes) < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance_with_10_chairs = 36\n    number_of_chairs_removed = 3\n    number_of_gaps_with_10_chairs = 10 - 1\n    number_of_gaps_with_7_chairs = (10 - number_of_chairs_removed) - 1\n\n    gap_distance_with_10_chairs = total_distance_with_10_chairs / number_of_gaps_with_10_chairs\n\n    total_distance_with_7_chairs = gap_distance_with_10_chairs * number_of_gaps_with_7_chairs\n\n    new_gap_distance = total_distance_with_7_chairs / number_of_gaps_with_7_chairs\n\n    return new_gap_distance\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    for b1 in range(2, 10):\n        for b2 in range(2, 10):\n            b3 = 10 - b1 - b2\n            if b3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the four angles\n    angle1, angle2, angle3, angle4 = symbols('angle1 angle2 angle3 angle4')\n    \n    # Given that two angles are right angles\n    right_angle = 90\n    \n    # Equation for the right angles\n    equation1 = Eq(angle1, right_angle)\n    equation2 = Eq(angle2, right_angle)\n    \n    # Equation for one angle being five times larger than the other\n    equation3 = Eq(angle3, 5 * angle4)\n    \n    # The sum of angles in a quadrilateral is 360 degrees\n    equation4 = Eq(angle1 + angle2 + angle3 + angle4, 360)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (angle1, angle2, angle3, angle4))\n    \n    # Since we are looking for the largest angle, we compare angle3 and angle4 (angle1 and angle2 are right angles)\n    largest_angle = max(solutions[angle3], solutions[angle4])\n    \n    return largest_angle\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorization of 7007\n    factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    # Candidates for the two 2-digit multiples of 7\n    candidates = [f for f in factors if 10 <= f < 100 and f % 7 == 0]\n    \n    # Calculate the sum of the two multiples\n    return sum(candidates)\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the minimum number of boxes to a large number\n    min_boxes = float('inf')\n    \n    # Search through all possible combinations\n    for small_boxes in range(54//5+1):\n        for medium_boxes in range(54//7+1):\n            for large_boxes in range(54//10+1):\n                if 5*small_boxes + 7*medium_boxes + 10*large_boxes == 54:\n                    total_boxes = small_boxes + medium_boxes + large_boxes\n                    min_boxes = min(min_boxes, total_boxes)\n    \n    return min_boxes\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index] if len(sequence) % 2 else (sequence[median_index - 1] + sequence[median_index]) / 2\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    # The equation is (x + 6) / 3 = 5\n    # To solve for x we can do the following steps\n    \n    # Multiply both sides by 3 to get rid of the denominator\n    # (x + 6) / 3 * 3 = 5 * 3\n    # x + 6 = 15\n    \n    # Subtract 6 from both sides to solve for x\n    # x + 6 - 6 = 15 - 6\n    x = 15 - 6\n    \n    return x\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # define a dictionary to keep track of the number of ways to reach each step\n    ways_to_step = {0:1}  # There is 1 way to be at the 0th step (starting position)\n    # Fill in the ways_to_step\n    for step in range(1, 11):\n        if step == 5:\n            ways_to_step[step] = 0\n        else:\n            # If step is not 5, the number of ways to get to this step is\n            # the sum of the ways to get to the three preceding steps (if they exist)\n            ways_to_step[step] = ways_to_step.get(step-1, 0) + ways_to_step.get(step-2, 0) + ways_to_step.get(step-3, 0)\n\n    # The ways to jump over the muddy step (step 5) are the ways to step 4\n    # multiplied by the ways from step 6 onwards\n    ways_to_avoid_muddy = ways_to_step[4] * (ways_to_step[6] + ways_to_step[7] + ways_to_step[8])\n\n    # Adding the ways to avoid the muddy step to the original number of ways to reach steps 6, 7, 8 and 9\n    for step in range(6, 10):\n        ways_to_step[step] += ways_to_avoid_muddy\n\n    # Now calculate the number of ways to reach the 10th step considering the previous steps\n    ans = ways_to_step[7] + ways_to_step[8] + ways_to_step[9]\n    \n    return ans\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6 / 7) * 42\n    return result\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60  # Convert minutes to hours\n    distance_miles = miles_per_hour * hours\n\n    conversion_factor = 1.60934  # 1 mile is approximately 1.60934 kilometers\n    distance_kilometers = distance_miles * conversion_factor\n\n    return distance_kilometers\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    \n    # With one entrance\n    total_check_in_time_one_entrance = 16\n    # Total number of visitors checked in with one entrance\n    visitors_checked_in_one_entrance = total_check_in_time_one_entrance * check_in_per_entrance\n    \n    # With two entrances\n    check_in_per_minute_two_entrances = check_in_per_entrance * 2\n    # Time required for all the visitors to check in with two entrances\n    # Since visitors join at a constant rate, the number of visitors stays the same\n    total_check_in_time_two_entrances = visitors_checked_in_one_entrance / check_in_per_minute_two_entrances\n\n    return total_check_in_time_two_entrances\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - cookies_given_away\n    num_bottles = cookies_left // cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for frogs and dragonflies before the show\n    frogs_before, dragonflies_before = symbols('frogs_before dragonflies_before')\n\n    # Equation 1: frogs_before = dragonflies_before + 9\n    equation1 = Eq(frogs_before, dragonflies_before + 9)\n\n    # Equation 2: frogs_before - dragonflies_after + dragonflies_before = frogs_after\n    # Since after the show there are 11 frogs and 10 dragonflies, we use these values directly.\n    equation2 = Eq(frogs_before - 10 + dragonflies_before, 11)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frogs_before, dragonflies_before))\n\n    return solutions[frogs_before]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_progress = 5\n    night_slip = 3\n    net_progress = day_progress - night_slip\n    total_distance = 16\n\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_progress\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_slip\n\n    return days\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    # Find the largest three-digit number\n    largest_three_digit_number = 999\n    \n    # Find the greatest multiple of 25 less than or equal to 999\n    # Since 25 * 4 = 100, a multiple of 25 with three digits will end with '00', '25', '50', or '75'\n    # Starting from 999, we decrement until we find a number that is a multiple of 25\n    while largest_three_digit_number % 25 != 0:\n        largest_three_digit_number -= 1\n    \n    ans = largest_three_digit_number\n    return ans\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the unknowns, cost for each item\n    metro_ticket, coffee, entry_fee, friends_count = symbols('metro_ticket coffee entry_fee friends_count', integer=True)\n    \n    # We are given 40 dollars, so the total cost should be equal to that\n    total_money = 40\n\n    # Equation representing the total cost\n    # We multiply each individual cost by the respective quantity, and add Richard's cost too\n    total_cost_eq = Eq(metro_ticket * 2 * (friends_count + 1) + coffee * (friends_count + 1) + entry_fee * (friends_count + 1), total_money)\n    \n    # To solve this equation we need some additional information, \n    # let's assume some standard prices for metro, coffee, and entry fee\n    # We will define them arbitrarily as we don't have the exact numbers from the problem\n    # Let's assume metro_ticket = $2, coffee = $3, entry_fee = $10\n    prices_eq = [metro_ticket - 2, coffee - 3, entry_fee - 10]\n\n    # Now we can solve the equation with our assumptions\n    solutions = solve((total_cost_eq, *prices_eq), (metro_ticket, coffee, entry_fee, friends_count))\n    \n    # Returning the number of friends Richard can invite\n    return solutions[friends_count]\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq(3/4*muffins + 5/8*cookies, 74)\n\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    return solutions[cookies]\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        num_str = f'123{A}456{A}789{A}0'  # last digit is 0 to make the number even\n        num = int(num_str)\n        if num % 9 == 0 and num % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let the time taken by the driver to reach the destination be x minutes\n    # So, the time taken by the cyclist will be x + 143 minutes\n\n    # Given the speed ratio of the driver to the cyclist is 13:2\n    # We know distance = speed * time\n    # Hence, the time ratio of the driver to the cyclist will be 2:13\n    # We can set up the proportion as 2/13 = x / (x + 143)\n\n    # Solving the proportion for x\n    x = symbols('x')\n    equation = Eq(2/13, x / (x + 143))\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum([i**3 for i in range(2, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Let's analyze each statement:\n    # If (1) is correct, then all statements are correct, including (2) which states none are correct, which is a contradiction.\n    # So (1) cannot be correct.\n    \n    # If (2) is correct, then all statements should be incorrect, including (2) itself, which is a contradiction.\n    # So (2) cannot be correct.\n    \n    # If (3) is correct, it implies either (1) or (2) is correct. We already determined that both are incorrect.\n    # So (3) cannot be correct.\n    \n    # If (4) is correct, it would mean that (1), (2), and (3) are also correct. We've shown they cannot all be correct.\n    # So (4) cannot be correct.\n    \n    # Then (5) has to be correct because all the other statements are shown to be incorrect.\n    # Also, if (5) is incorrect, that would imply one of the above statements is correct which we have shown not to be the case.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_coins = symbols('total_coins', integer=True)\n\n    # initial condition\n    equation1 = Eq(1/4 * total_coins + 2, 1/3 * total_coins)\n\n    num_coins_solution = solve(equation1, total_coins)\n\n    return num_coins_solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef count_ways_to_insert_m_between_n(n, m):\n    # Total slots around n elements where m elements can be placed is (n + 1)\n    # We choose m slots from these to insert the m elements\n    return factorial(n + 1) // (factorial(m) * factorial(n + 1 - m))\n\ndef solution():\n    singing_shows = 5\n    comedy_shows = 3\n    \n    # First, we find the number of ways to arrange the singing shows with \"slots\" in between\n    # where the comedy shows can be inserted such that they are not consecutively performed\n    ways_to_insert_comedy = count_ways_to_insert_m_between_n(singing_shows, comedy_shows)\n    \n    # We need to multiply this with the number of ways to arrange the singing and comedy shows themselves\n    total_arrangements = ways_to_insert_comedy * factorial(singing_shows) * factorial(comedy_shows)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    num_trains = 4\n    num_cars = 3\n    num_flights = 2\n    \n    total_ways = num_trains + num_cars + num_flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    road_per_day = total_road / total_days\n\n    return road_per_day\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_values = sorted(values)\n    middle_index = len(sorted_values) // 2\n    return sorted_values[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let x be the original number\n    # According to the problem, we have:\n    # (x / 2) - 9 = 12\n    # Now we solve for x:\n\n    # Move 9 to the other side\n    x_halved = 12 + 9\n    # Multiply by 2 to get the original number\n    original_number = x_halved * 2\n\n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for number_of_chocolates in range(41, 60):\n        if number_of_chocolates % 4 == 2 and number_of_chocolates % 6 == 2:\n            return number_of_chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    # For a circular table, we fix one person's position to avoid counting rotations as different orders\n    # We then arrange the remaining 5 people in the remaining seats\n    total_orders = factorial(5)\n    return total_orders\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    sum_digits = 0\n    recurring_sequence = '23456789012345678901234567890123456789012345678901234567890'\n    length_sequence = len(recurring_sequence)\n    total_digits = 2100\n\n    for i in range(total_digits):\n        digit = recurring_sequence[i % length_sequence]\n        sum_digits += int(digit)\n    \n    return sum_digits\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [d for d in digits if d % 2 == 0]\n    smallest_even_number = float('inf')\n\n    for digit in even_digits:\n        remaining_digits = digits.copy()\n        remaining_digits.remove(digit)\n        for perm in permutations(remaining_digits):\n            num = int(''.join(map(str, perm)) + str(digit))\n            if num % 2 == 0 and num < smallest_even_number:\n                smallest_even_number = num\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    return int(3.5 * 4)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n    \n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    numbers = [3, 4, 10]\n    ans = reduce(lcm, numbers)\n    \n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45 / 100\n    total_distance = 2000\n\n    distance_covered = percentage * total_distance\n\n    return distance_covered\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_price_p = 72\n    balloon_price_p = 20\n    amount_paid_p = 1000  # ï¿¡10 note in pence\n    change_received_p = 388  # ï¿¡3.88 change in pence\n\n    amount_spent_p = amount_paid_p - change_received_p\n    amount_spent_on_balloons_p = amount_spent_p - chocolate_price_p\n    \n    number_of_balloons = amount_spent_on_balloons_p // balloon_price_p\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity = 4\n\n    kayaks_needed = (students + capacity - 1) // capacity\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a = 4 * (3 ** 0.5)\n    x = symbols('x')\n    equation = Eq(3 * a, (3 * x) ** 0.5)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # let's denote the number of steps of the escalator as 's'\n    # and the speed of the escalator as 'e' steps per second\n\n    # When Peter walks at 1 step per second for 10 seconds, he covers 10 steps.\n    # In the meantime, the escalator moves 'e' steps per second for 10 seconds, so 10*e steps.\n    # The total number of steps covered by Peter and the escalator is thus 10 + 10*e,\n    # which should equal the total number of steps 's' that the escalator has.\n\n    # Equation 1:\n    # s = 10 + 10*e\n\n    # When Peter walks at 2 steps per second for 8 seconds, he covers 16 steps.\n    # In the meantime, the escalator moves 'e' steps per second for 8 seconds, so 8*e steps.\n    # The total number of steps covered by Peter and the escalator is thus 16 + 8*e,\n    # which should again equal the total number of steps 's'.\n\n    # Equation 2:\n    # s = 16 + 8*e\n\n    # We can use these two equations to solve for 's' and 'e'\n    # Equation 1 - Equotion 2 gives us:\n    # 10 + 10*e = 16 + 8*e\n    # 2*e = 16 - 10\n    # e = 3\n\n    # Now we use the value of 'e' to find 's'\n    # s = 10 + 10*3\n    e = 3\n    s = 10 + 10*e\n\n    return s\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    return 42 + 3 * 7\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    fraction_spent = 2 / 9\n    money_spent = total_money * fraction_spent\n    cost_per_pizza = (money_spent / 6)\n    cost_per_cupcake = (3 * cost_per_pizza) / 2\n    money_left = total_money - money_spent\n    max_cupcakes = money_left // cost_per_cupcake\n    \n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    for cut_pieces in range(11):\n        if 10 - cut_pieces + (cut_pieces * 3) == 16:\n            return cut_pieces\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    parts_per_worker_per_minute = (120 / 6) / 4\n    total_parts_for_3_workers_in_10_minutes = parts_per_worker_per_minute * 3 * 10\n    return total_parts_for_3_workers_in_10_minutes\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    numbers = [2, 3, 5]\n    count = 0\n    for i in numbers:\n        for j in numbers:\n            for k in numbers:\n                if i != j and j != k and i != k:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "from sympy import isqrt, is_square\n\ndef solution():\n    count = 0\n    num = 2\n    for i in range(1, 6):\n        if is_square(num):\n            count += 1\n        num = num * 10 + 5\n    return count\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples / 4\n    non_rotten_apples = total_apples - rotten_apples\n    return non_rotten_apples\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimmers = 0.7 * total_pupils\n    girls_swimmers = 200\n\n    boys_swimmers = swimmers - girls_swimmers\n    boys_non_swimmers = (boys_swimmers / 0.6) - boys_swimmers\n    total_boys = boys_swimmers + boys_non_swimmers\n\n    total_girls = total_pupils - total_boys\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    \n    percentage_increase = ((final_value - initial_value) / initial_value) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "from sympy import divisors, sqrt\n\ndef solution():\n    # Get all divisors of 2240\n    divs = divisors(2240)\n    \n    # Check if (2240 / divisor) is a perfect square\n    n_values = [d for d in divs if sqrt(2240 / d).is_integer()]\n    \n    # Since we need the value of n that makes 2240/n a square, we return the smallest\n    ans = min(n_values)\n    return ans\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n    \n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n    \n    solutions = solve((equation1, equation2), (rice, oatmeal))\n    \n    return solutions[rice]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    A = (n * (n + 1) // 2) ** 2\n    return A\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation for the sugar concentration in the final mixture\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n\n    # Solving the equation for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount_percentage = ((original_price - final_price) / original_price) * 100\n    return total_discount_percentage\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n    \n    ans = custom_op(custom_op(2, 3), 4)\n    \n    return ans\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    import math\n\n    number = 200\n    count = 0\n\n    # Find all divisors of the number\n    for i in range(1, math.isqrt(number) + 1):\n        if number % i == 0:\n            # For each divisor, find its pair\n            divisor = i\n            pair = number // i\n\n            # If the divisor and its pair are the same, this represents\n            # the number itself (e.g., 144 = 144), which we should not count\n            if divisor != pair:\n                # If the divisor and pair are different, they represent\n                # a sum of equal parts (e.g., 144 could be 48 + 48 + 48)\n                # The pair itself represents another possible sum\n                count += 2\n            else:\n                # If the divisor and its pair are the same, it can only be counted once\n                count += 1\n\n    # Subtract one for the number itself since it is not counted as a sum of equal parts\n    return count - 1\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let's denote the mass of the empty jar as j and the mass of one chocolate as c.\n    # According to the problem we have two equations:\n    # j + 5c = 185g (1)\n    # j + 17c = 317g (2)\n    \n    # Now, we can solve these two linear equations to find the values of j and c.\n\n    # Subtracting equation (1) from equation (2) to eliminate j\n    # (j + 17c) - (j + 5c) = 317g - 185g\n    # 12c = 132g\n    c = 132 / 12  # mass of one chocolate\n\n    # Now substitute the value of c back into either equation (1) or (2) to find the value of j.\n    # Using equation (1):\n    # j + 5c = 185g\n    j = 185 - (5 * c)  # mass of the empty jar\n\n    # Now we want to find mass of the jar with 10 chocolates:\n    # j + 10c = ?\n    mass_with_10_chocolates = j + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    \n    solutions = solve((equation1, equation2), (timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let lana's sweets be 'l' and mark's sweets be 'm'\n    l, m = symbols('l m')\n\n    # Lana gave away 1/3 of her sweets\n    # Mark ate 34 sweets\n    # After this, Lana and Mark have the same amount of sweets\n    equation1 = Eq(l - l / 3, m - 34)\n\n    # Lana's sweets and Mark's sweets add up to 674\n    equation2 = Eq(l + m, 674)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (l, m))\n\n    # Calculate how many more sweets did Lana have than Mark at first\n    return solutions[l] - solutions[m]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    total_days = 14 + 4  # 2 weeks left and 4 days at friend's house\n    # since half of the remaining time is spent after the 4 days,\n    # we need to double the days accounted for so far\n    total_days *= 2\n    # since half the total holiday is spent working,\n    # we need again to double the days accounted for\n    total_days *= 2\n    return total_days\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # As the number of cats and the number of fishes to be caught are same,\n    # they would still take the same amount of time to catch one fish each.\n    time_per_cat_per_fish = 10  # minutes\n    return time_per_cat_per_fish\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Number of wheat along the longer side (excluding corners)\n    longer_side_count = (204 // 116) - 1\n    # Number of wheat along the shorter side (excluding corners)\n    shorter_side_count = (144 // 116) - 1\n\n    # Total number of wheat along the perimeter (including corners)\n    total_wheat_perimeter = 2 * (longer_side_count + shorter_side_count + 2)\n\n    # As total number of wheat is given as 116, we can form the equation:\n    # 2 * (longer_side_count + shorter_side_count + 2) = 116\n    # We already found the count of wheat on the longer and shorter sides,\n    # now we can deduce the distance between each wheat\n    distance_longer_side = 204 / (longer_side_count + 1)\n    distance_shorter_side = 144 / (shorter_side_count + 1)\n\n    # Since the field is rectangular, the distances should be the same\n    # for uniform distribution of wheat. So, both distances should be equal.\n    # We will check and return one of them as the distance between every 2 wheat.\n    if distance_longer_side == distance_shorter_side:\n        return distance_longer_side\n    else:\n        # If distances are not the same, there might be an error in the question or method.\n        return \"Error in calculation or question.\"\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    distance = perimeter / (116 - 1)\n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    eq1 = Eq(watermelon, 5 * pineapple)\n    eq2 = Eq(watermelon, pineapple + 5.6)\n\n    ans = solve((eq1, eq2), (watermelon, pineapple))\n\n    return ans[watermelon]\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remainder_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n\n    bracelets_needed = total_bracelets - bracelets_made\n     \n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total work to be done\n    total_people = 200\n    \n    # Ellie's work rate per week\n    ellie_rate = 40\n    \n    # Combined work rate of Ellie and Gloria per week to finish in 4 weeks\n    combined_rate = total_people / 4\n    \n    # Gloria's work rate per week, assuming both work at constant rates\n    gloria_rate = combined_rate - ellie_rate\n    \n    # Total time for Gloria to finish the work by herself\n    gloria_time = total_people / gloria_rate\n    \n    return gloria_time\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    amount_of_rice_in_A = 15 * 0.40\n    percentage_of_rice_in_mix = 0.28\n\n    amount_of_rice_in_mix = total_weight * percentage_of_rice_in_mix\n    amount_of_rice_in_B = amount_of_rice_in_mix - amount_of_rice_in_A\n    percentage_of_rice_in_B = (amount_of_rice_in_B / 60) * 100\n\n    return percentage_of_rice_in_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters\n    total_minutes = 2 * 60  # 2 hours into minutes\n    total_leakage = leak_rate_per_minute * total_minutes\n    total_leakage_liters = total_leakage / 1000  # converting milliliters to liters\n    \n    return total_leakage_liters\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    digits = set(range(10))\n    B, D = 2, 0  # Given values\n    ans = None\n    \n    # Loop through all permutations of the remaining digits.\n    for A, C, E, F in permutations(digits - {B, D}, 4):\n        # Form the numbers ABCDEF and EFABCD\n        ABCDEF = A * 100000 + B * 10000 + C * 1000 + D * 100 + E * 10 + F\n        EFABCD = E * 100000 + F * 10000 + A * 1000 + B * 100 + C * 10 + D\n        \n        # Check for the condition in the problem statement.\n        if 5 * ABCDEF == 6 * EFABCD:\n            ans = F * 1000 + A * 100 + C * 10 + E\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n    num_trees = (road_length // tree_distance) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + pen, 12)\n    equation2 = Eq(book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_change = (2 * 10) + (5 * 5) + (4 * 0.20)\n    total_spent = 100 - total_change\n    return total_spent\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the total distance to the shopping mall.\n    d = symbols('d')\n\n    # Barbara's speed is 60 m/min, Catherine's is 45 m/min.\n    # Time taken by Barbara to reach the shopping mall will be the same as Catherine's time when Catherine has 60m left to go\n    # Barbara's distance to speed ratio equals Catherine's (distance - 60) to speed ratio\n    equation = Eq((d / 60), ((d - 60) / 45))\n    \n    # Solve for d\n    distance = solve(equation, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation = Eq(3 * x + y + 21, 2 * (0.5 * y + x))\n    solution = solve(equation, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A / B, 4 / 3)\n    equation2 = Eq(A, C + 20)\n    equation3 = Eq(A + B + C, 200)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d with a > b > c > d\n    \n    # We have two equations:\n    # d + (a + b + c)/3 = 39\n    # a + (b + c + d)/3 = 51\n    \n    # First we express a in terms of d\n    # a = 51*3 - b - c - d = 153 - b - c - d\n    \n    # then we substitute a in the first equation\n    # d + (153 - d - b - c)/3 = 39\n    # 3d + 153 - d - b - c = 117\n    # 2d + 153 - b - c = 117\n    # d + 76.5 - b/2 - c/2 = 58.5\n    # d = 58.5 + b/2 + c/2 - 76.5\n    # d = -18 + b/2 + c/2\n    \n    # To maximize the largest number 'a', we want to minimize 'd'.\n    # Since the numbers are distinct positive whole numbers, and in descending order, we will consider the smallest values for b and c (while ensuring they are greater than d).\n    # Thus, let's start with the smallest possible value for d which is 1, then incrementally check greater values for d until we find the largest possible value for a.\n\n    for d in range(1, 100):\n        for c in range(d + 1, 100):\n            for b in range(c + 1, 100):\n                if d == -18 + b/2 + c/2:\n                    a = 153 - b - c - d\n                    if a > b:  # Making sure we maintain a > b > c > d\n                        return a\n    \n    return None  # In case no solution is found\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    return 471471471471 // 157157157157\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n    \n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2/5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7/9\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0 \n    for i in range(1, 51):\n        # Student initially faces the teacher unless they report a multiple of 4 or 6\n        facing_teacher = True\n        if i % 4 == 0:  # If student reports a multiple of 4\n            facing_teacher = not facing_teacher\n        if i % 6 == 0:  # If student reports a multiple of 6\n            facing_teacher = not facing_teacher\n        if facing_teacher:  # If still facing the teacher\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick = boys * girls\n    return ways_to_pick\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    return 462 + 268\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(10, 100):  # Check for all two-digit numbers\n        if isprime(i):\n            reverse_i = int(str(i)[::-1])  # Reverse the digits\n            if reverse_i != i and isprime(reverse_i):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent green balls and b represent blue balls at first\n    g, b = symbols('g b')\n\n    # Setup the equation\n    # g + b = 140 (Initial total)\n    # (g - 28) = (1 - 2/5)*b (Equal number of green and blue balls left after removal)\n    \n    equation1 = Eq(g + b, 140)\n    equation2 = Eq(g - 28, b * (3/5))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # The probability of not being in each of the two bars is 90%,\n    # which means there is a 10% chance for each of those bars that the alcoholic would be there.\n    # Since the alcoholic goes to three fixed bars at random, we assume equal probability for each bar.\n    # If he is not at two of the bars, the only remaining possibility is that he is at the third bar.\n\n    # The probability of being at the third bar is therefore 100% given the information\n    # that he is not at the first two bars.\n    probability = 1.0\n    return probability\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Let x represent the number of students in the class.\n    x = symbols('x')\n\n    # According to the Pigeonhole principle, to ensure that there is at least one student\n    # who gets at least 3 apples, we can first distribute 2 apples to each student. After doing\n    # this, the number of remaining apples will be what guarantees that at least one student has more than 2.\n    \n    # The equation for this scenario would be:\n    # 29 (total apples) = 2x (2 apples for each student) + remaining apples\n    # Since we know that there needs to be at least 1 remaining apple to satisfy\n    # the condition, (29 - 2x) must be greater than or equal to 1, i.e., 29 - 2x >= 1.\n    \n    # In essence, dividing 29 apples by 2 gives us the maximum number of students\n    # that can have only 2 apples before one student must receive more.\n    # We then subtract 1 from this value to ensure at least one student gets 3 apples.\n\n    equation = Eq(29 - 2*x, 1)\n    class_size = solve(equation, x)\n\n    return class_size[0]\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    eliot_future_age = 16\n    eliot_current_age = eliot_future_age - 4\n    cousin_current_age = eliot_current_age // 2\n    cousin_future_age = cousin_current_age + 4\n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    return (num1 + num2) // 2\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish_first_catch = 100\n    caught_fish_second_catch = 100\n    marked_fish_second_catch = 16\n\n    # Estimate total number of fish using the Capture-Recapture method\n    estimated_total_fish = (marked_fish_first_catch * caught_fish_second_catch) / marked_fish_second_catch\n\n    return int(estimated_total_fish)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Nancy walks x\n    # Randy walks x + 10\n    # For every 2m Nancy walks, Randy walks 3m\n    # This can be described with the ratio 2:3\n    # 2/5 * (x + x + 10) = x\n    # 3/5 * (x + x + 10) = x + 10\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    eq = Eq(2/5 * (x + x + 10), x)\n    sol = solve(eq, x)\n\n    # Total distance is Nancy's distance plus Randy's distance\n    total_distance = sol[0] + sol[0] + 10\n\n    return total_distance\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    series1 = sum(range(10, 21, 2))\n    series2 = sum(range(9, 20, 2))\n    ans = series1 - series2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alice and her sister's current ages\n    alice, sister = symbols('alice sister')\n\n    # Create the equations based on the problem\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    equation2 = Eq(alice + 10 + sister + 10, 53)  # In 10 years, their total age is 53\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let's represent the recurring decimal as a geometric series\n    # 0.2014141414... = 0.2 + 0.0014 + 0.0014 * (1/100) + 0.0014 * (1/100)^2 + ...\n    # Let's call 0.0014 as a, and 1/100 as r (the common ratio for the geometric series)\n    \n    a = 14 / (10**4)  # 0.0014\n    r = 1 / 100       # 1/100\n    \n    # The sum of this infinite geometric series is given by: S = a / (1 - r)\n    S = a / (1 - r)\n    \n    # We already have the non-repeating part of the decimal, which is 0.2.\n    # Now let's add that to the sum of the repeating part\n    total_decimal = 0.2 + S\n    \n    # Now we can convert this into a fraction by solving for x in the equation x / 9900 = total_decimal\n    x = total_decimal * 9900\n    \n    # Return the value of the whole number x\n    return int(x)\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    # Loop through all possible hundreds, tens and ones digits\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 8 and len({hundreds, tens, ones}) == 3 and ones % 2 == 0:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 2  # Six-digit number with 2 in units column\n        new_number = int(str(2) + str(i))  # Number formed after moving 2 to the beginning\n        if new_number == original_number / 3:\n            return original_number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    cereal_bars = 43\n    people = 4\n    \n    remainder = cereal_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    # Students who passed both exams = Students who passed the first exam - Students who passed the second exam but failed the first\n    passed_both = passed_first - passed_second_failed_first\n    \n    # Students who passed only the first exam = Students who passed the first exam - Students who passed both exams\n    passed_only_first = passed_first - passed_both\n\n    return passed_only_first\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 500:\n        ans += 5 * 8 * 9  # Increment by the least common multiple until the answer is in the specified range\n        \n    if ans >= 1000:\n        return None  # The number isn't in the specified range\n    \n    return ans\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if ab * ba % 100 == 0:\n                return ab\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # Since we can form 6 different three-digit numbers using digits a, b, and c (without repetition),\n    # we can consider the permutations of a, b, and c in the hundreds, tens, and ones places.\n    # Each digit will appear in the hundreds place twice, tens place twice, and ones place twice.\n    \n    # For example, suppose we have a = 1, b = 2, c = 3.\n    # The six permutations would be 123, 132, 213, 231, 312, 321.\n    # We can see that each number 1, 2, and 3 appears exactly twice in each place value.\n    # So the calculation can be generalized to any values of a, b, and c.\n    \n    sum_hundreds_place = 2 * (a + b + c) * 100\n    sum_tens_place = 2 * (a + b + c) * 10\n    sum_ones_place = 2 * (a + b + c) * 1\n    \n    # Total sum of all three-digit numbers\n    total_sum = sum_hundreds_place + sum_tens_place + sum_ones_place\n    \n    return total_sum\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction_value = 5/9\n    decimal_value = round(fraction_value, 2)\n    return decimal_value\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of potatoes in the small sack\n    small_sack = symbols('small_sack')\n    \n    # The large sack holds 20% more potatoes than the small sack\n    large_sack = 1.20 * small_sack\n    \n    # Equation representing the total number of potatoes\n    total_potatoes = Eq(small_sack + large_sack, 77)\n    \n    # Solve the equation\n    num_potatoes_small_sack = solve(total_potatoes, small_sack)[0]\n    num_potatoes_large_sack = 1.20 * num_potatoes_small_sack\n    \n    return int(num_potatoes_large_sack)\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n    \n    # Total fruits is the sum of the oranges and apples\n    total_fruits = Eq(oranges + apples, 125)\n    \n    # She sold half of the apples, so remaining apples is apples/2\n    # She sold 35 oranges, so remaining oranges is oranges - 35\n    # Remaining oranges and apples are equal in number\n    remaining_fruits = Eq(oranges - 35, apples / 2)\n    \n    # Solve the system of equations\n    solutions = solve((total_fruits, remaining_fruits), (oranges, apples))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins = -(-students // cabin_capacity)  # Ceiling division\n\n    return min_cabins\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (smallest 5-digit number that reads the same forwards and backwards)\n    least_5_digit_palindrome = 10001\n\n    # The greatest 6-digit palindrome is 999999 (largest 6-digit number that reads the same forwards and backwards)\n    greatest_6_digit_palindrome = 999999\n\n    # The difference between the two\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = 0\n    for i in range(1, 59):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_term = 50 // 5 * 5  # Find the greatest multiple of 5 less than or equal to 50\n    num_terms = last_term // 5  # Count the number of terms in the sequence\n    \n    # Sum of arithmetic sequence formula: n/2 * (first term + last term)\n    sum_of_multiples = num_terms / 2 * (5 + last_term)\n    \n    return int(sum_of_multiples)\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n    # Calculate the total number of digits when writing out all numbers from 1 to 1200\n    for i in range(1, 1201):\n        total_digits += len(str(i))\n    \n    # Counting from the right, we want to find the position from the left\n    position_from_left = total_digits - 2011 + 1\n    \n    current_number = 1\n    current_digit_sum = 0\n    # Find the number that contains the position_from_left digit\n    while current_digit_sum + len(str(current_number)) < position_from_left:\n        current_digit_sum += len(str(current_number))\n        current_number += 1\n    \n    # Find the exact digit within the current number\n    digit_index = position_from_left - current_digit_sum - 1\n    ans = str(current_number)[digit_index]\n    \n    return int(ans)\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins\n    x = symbols('x')\n\n    # One quarter of the coins showing heads is x/4\n    # Turning over two more coins is x/4 + 2\n    # Then, one third of the coins showing heads is x/3\n\n    # Equation representing the situation after turning 2 more coins to show heads\n    equation = Eq((x / 4) + 2, x / 3)\n\n    # Solve the equation to find the number of coins\n    num_coins = solve(equation, x)\n\n    # We're assuming that there is a positive number of coins\n    return num_coins[0]\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes ago\n\n    # Calculate the distance each planet has travelled in 5 minutes\n    distance_planet1 = speed_planet1 * time\n    distance_planet2 = speed_planet2 * time\n\n    # The total distance between them 5 minutes ago is the sum of the distances each planet travelled\n    total_distance = distance_planet1 + distance_planet2\n\n    return total_distance\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.20\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Count for digits in tens place (1 to 5 because it cannot be 0)\n    tens_count = 5\n    \n    # Count for digits in ones place (0 to 5, excluding the one used in tens, so 5 possibilities remain)\n    ones_count = 5\n    \n    # Total number of two-digit numbers = tens_count * ones_count\n    total_numbers = tens_count * ones_count\n    \n    return total_numbers\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let's denote the number of cars as 'c' and motorbikes as 'm'.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations based on the problem statement:\n    # c + m = 140 (total number of vehicles)\n    # 4c + 2m = 490 (total number of tyres)\n    \n    # We can solve these equations to find the values of 'c' and 'm'.\n    # Let's express 'm' from the first equation and substitute it into the second equation:\n    # m = 140 - c\n    # Now substitute 'm' into the second equation:\n    # 4c + 2(140 - c) = 490\n    \n    # Once we substitute 'm', we solve for 'c':\n    # 4c + 280 - 2c = 490\n    # 2c = 490 - 280\n    # 2c = 210\n    # c = 105\n    \n    # The number of cars 'c' is 105.\n    return 105\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litre = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n    \n    apple_juice_litres = (apple_juice_ratio / ratio_sum) * total_litre\n    \n    return apple_juice_litres\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    progress_per_day = climb_per_day - slide_per_night\n    days = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += climb_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    # Let x be the number thought of\n    # According to the problem statement:\n    # 2 * x + 12 = 26\n\n    # Solve for x\n    x = (26 - 12) / 2\n    return x\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n\n    # Setting up the equations based on the problem statement\n    equations = [\n        Eq(190 % n, a),\n        Eq(137 % n, a + 4),\n        Eq(101 % n, a + 6),\n    ]\n\n    # Solve the equations to find the values of 'a' and 'n'\n    solutions = solve(equations, (a, n))\n\n    # We need to find the positive integer solutions for the number 'n'\n    # Since we might get multiple solutions, we filter out the positive ones\n    positive_solutions = [sol[n] for sol in solutions if sol[n] > 0 and sol[a] >= 0]\n\n    # Assuming the problem has a unique solution, we take the first valid solution for 'n'\n    n_value = positive_solutions[0]\n\n    # Calculating the remainder when 299 is divided by the calculated number 'n'\n    remainder = 299 % n_value\n\n    return remainder\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    two_count = 2\n    three_count = 2\n    four_count = 1\n    five_count = 1\n\n    # Calculate the total number of permutations\n    permutations = factorial(total_digits)\n    \n    # Divide by the factorial of the count of each repeated element\n    permutations //= (factorial(two_count) * factorial(three_count) * factorial(four_count) * factorial(five_count))\n\n    return permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Let the total amount of money Bud has be x.\n    # According to the problem, 1/4 of x is spent (2p).\n    # We set up the equation: (1/4)x = 2p\n    # We need to solve for x, which will represent the total amount of money Bud started with.\n\n    # Multiply both sides by 4 to solve for x:\n    x = 4 * 2  # x = 8p, which is the total money Bud had.\n\n    # Return the result as the final answer\n    return x\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    rounds = (teams * (teams - 1)) // 2\n    return rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    equation4 = Eq(doc + sleepy, dopey + sneezy)\n    # Dopey, Sneezy, Bashful and Grumpy are all the same height, so they are represented by the same symbol 'dopey'\n    total_height = doc + happy + 4 * dopey + sleepy\n\n    solutions = solve((equation1, equation2, equation3, equation4), (doc, happy, dopey, sneezy, sleepy))\n    total = total_height.subs(solutions)\n\n    return total\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    # Iterate over possible prime values for y, noting that y must be odd since all primes other than 2 are odd\n    # and x(2+y) = 200+y implies x cannot be even if y were to be 2, because that would make the left side even\n    # and the right side would be odd (203), which is not possible.\n    # So we can safely ignore y = 2 as a candidate.\n\n    # We are looking for the largest x + y, so we iterate backwards from a possible max value of y\n    # Prime numbers leading up to 200/2=100 would be good candidates, as the equation x(2+y) = 200+y gives\n    # x = (200+y)/(2+y). For x to be largest, y should be smaller; however, y must also be prime.\n    # We can set an arbitrary starting max prime (less than 100) as 97, and iterate downwards.\n\n    # Importing the sympy library to check for prime numbers\n    from sympy import isprime\n\n    largest_sum = 0\n    for y in range(97, 1, -2):\n        if isprime(y):\n            x = (200 + y) // (2 + y)\n            # x has to be an integer and a prime number\n            if (200 + y) % (2 + y) == 0 and isprime(x):\n                # Check if the new sum is larger than previous\n                if x + y > largest_sum:\n                    largest_sum = x + y\n                break\n\n    return largest_sum\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7/9) * 27\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    all_numbers = sorted([''.join(map(str, p)) for p in permutations(digits)])\n    fifth_number = all_numbers[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    first_fraction = Fraction(31, 6)\n    second_fraction = Fraction(31, 5)\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n    result = (first_fraction + second_fraction) / denominator\n    return result\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    speed = 250 / 5  # speed in miles per hour\n    distance_3_hours = speed * 3  # distance traveled in 3 hours\n    return distance_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    \n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    number_of_trees = 30\n    distance_apart = 5\n    total_distance = (number_of_trees - 1) * distance_apart\n    return total_distance\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 10):\n        product *= Fraction(1, i) + 1\n    return product\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    total_numbers = 90 - 12 + 1\n    if total_numbers % 2 == 0:\n        # If there is even number of terms, the sum is even because the sequence pair up elements as odd+odd or even+even,\n        # which both give even result\n        ans = 'even'\n    else:\n        # If there is an odd number of terms, then the sum would be odd.\n        middle_number = (12 + 90) // 2\n        if middle_number % 2 == 0:\n            ans = 'even'\n        else:\n            ans = 'odd'\n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the three numbers on the hats.\n    Qiang, Rory, Sophia = symbols('Qiang Rory Sophia')\n\n    # Set up the equations based on the problem statement.\n    equation1 = Eq(Qiang + Rory, 11) # Qiang adds the numbers on Rory's and Sophia's hats.\n    equation2 = Eq(Qiang + Sophia, 17) # Rory adds the numbers on Qiang's and Sophia's hats.\n    equation3 = Eq(Rory + Sophia, 22) # Sophia adds the numbers on Qiang's and Rory's hats.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (Qiang, Rory, Sophia))\n\n    # Find the largest number, which is the max of the solutions.\n    largest_number = max(solutions[Qiang], solutions[Rory], solutions[Sophia])\n\n    return largest_number\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(1, 21):\n        if isprime(num):\n            if isprime(num + 6) or isprime(num - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_capacity = 25\n    bus_count = -(-total_people // max_capacity)  # Ceiling division\n    return bus_count\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n        \n    total_digits = 0\n    for page in range(1, 346):  # As the book has 345 pages\n        total_digits += count_digits(page)\n        \n    return total_digits\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_prize_money = symbols('total_prize_money')\n\n    # Define equations\n    equation = Eq((1/5 + 1/15) * total_prize_money, 360)\n\n    # Solve equation\n    solution = solve(equation, total_prize_money)\n\n    # Return the answer\n    return solution[0]\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define symbol for x\n\n    # Since Andy drives for 30 minutes at each speed and there are 60 minutes in an hour, we divide the distances by 2\n    # Distance covered in first 30 minutes: x mph * 0.5h\n    first_30_distance = x * 0.5\n\n    # Distance covered in second 30 minutes: (x - 20) mph * 0.5h\n    second_30_distance = (x - 20) * 0.5\n\n    # Distance covered in last 30 minutes: (x + 10) mph * 0.5h\n    last_30_distance = (x + 10) * 0.5\n\n    # Total distance covered in 90 minutes is the sum of distances in each 30-minute segment, which is 70 miles\n    total_distance = first_30_distance + second_30_distance + last_30_distance\n\n    # Setup the equation for total distance covered in terms of x and solve it\n    equation = Eq(total_distance, 70)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    factorial = lambda n: 1 if n == 0 else n * factorial(n-1)\n\n    # The coach can only stand in the middle, so this is fixed.\n    # There are two choices for the captain to stand next to the coach (left or right).\n    captain_choices = 2\n\n    # The remaining 5 players can be arranged in any order.\n    # 5 factorial ways to arrange the remaining players.\n    remaining_players_permutations = factorial(5)\n\n    # Applying the principle of multiplication.\n    return captain_choices * remaining_players_permutations\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    power_of_neg_number = (-1.2) ** 2\n    ans = cube_root + power_of_neg_number\n    return ans\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = 0.25 * 20 + (1/5) * 30 + (2/3) * 18\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    # Initialize sum\n    sum_of_terms = 0\n    \n    # Loop through sequence and add each term\n    for i in range(1, 31):    \n        # Determine the value of the term by using integer division\n        term_value = (i + 1) // 2 \n        sum_of_terms += term_value\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    # Let 'p' be the number of penguins\n    # Let 'f' be the total amount of fish\n    # If we give 3 fish to each penguin, we have 25 fish left: 3p + 25 = f\n    # If we give 6 fish to each, one penguin gets only 1 fish: 6(p - 1) + 1 = f\n    # This leads to two equations:\n    # 3p + 25 = f\n    # 6p - 6 + 1 = f\n    # Equating them, we get:\n    # 3p + 25 = 6p - 5\n    # Solving for p:\n    # 3p = 30\n    # p = 10\n    # There are 10 penguins in total.\n\n    p = (30) // 3\n    return p\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    # Divisibility rule for 11: difference between the sum of digits at odd places and the sum of digits at even places has to be divisible by 11\n    \n    # Number broken down: 1a7731, so odd position digits are 1,7,3 and even position digits are a,7,1\n\n    odd_sum = 1 + 7 + 3  # Sum of the digits at odd positions\n    even_sum = 7 + 1      # Sum of the digits at even positions without 'a'\n\n    # Find 'a' such that the total difference is divisible by 11\n    for a in range(10):\n        if abs((odd_sum + a) - even_sum) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    cindy_votes = 47\n\n    # To ensure Cindy wins, she needs to have more votes than the sum of votes for Alice and Betty\n    alice_betty_votes = 31 + 41\n    # Cindy needs one more vote than Alice and Betty combined to ensure she wins\n    votes_needed = (alice_betty_votes + 1) - cindy_votes\n\n    return votes_needed\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let's denote the total number of students as S, the number of boys as B, and the number of girls as G.\n    # According to the problem, B = G + 20.\n    # We also know that the students are arranged in a square array, which means the total number of students\n    # is some square number, and the difference between the number of boys and girls would be equal to the difference\n    # between successive squares (as each layer that is added to the square adds one gender).\n    \n    # Iterate over possible side lengths of the square, starting with 1.\n    side_length = 1\n    while True:\n        # Calculate the total number of students if the side_length is the side of the square.\n        S = side_length ** 2\n        # Calculate the number of boys and girls from the relationship B = G + 20.\n        # Use the fact that with each layer added (i.e., with each increase in side length by 2), the difference\n        # between the number of boys and girls also increases by the new perimeter minus the shared corner (i.e.,\n        # new side length * 4 - 4)\n        if side_length == 1:\n            G = 0\n            B = S\n        else:\n            B = G + (side_length * 4 - 4)\n            G = S - B\n        \n        # If we have found the correct configuration where there are 20 more boys than girls.\n        if B - G == 20:\n            break\n        \n        # Increment the side_length to check the next possible square size.\n        side_length += 2  # Increase by two because we only consider squares with alternating boy/girl layers.\n\n    # Calculate the total number of students\n    return S\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # If Gina was 50 on May 10, 2005, subtract 50 to find the year she was born.\n    gina_birth_year = 2005 - 50\n\n    # If James was 20 on May 10, 1997, subtract 20 to find the year he was born.\n    james_birth_year = 1997 - 20\n\n    # Now find out how old Gina was when James was born by subtracting James's birth year from Gina's birth year.\n    gina_age_when_james_born = james_birth_year - gina_birth_year\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculating the first expression, where -3.33... is -10/3 and -0.027 is (-3/1000)\n    expr1 = (7 / (-10 / 3)) / ((-3 / 1000) ** (1 / 3))\n    \n    # Calculating the second expression\n    expr2 = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    \n    # Calculating the third expression, where 0.142857... is 1/7 and 2 * 0.3 is 0.6\n    expr3 = (0.1 / (1 / 7)) + (2 * 0.3)\n    \n    # Summing up the expressions\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    # Straighforward approach with sympy\n    from sympy import symbols, Eq, solve\n    \n    # Let chelsia's money be x and brian's money be y\n    chelsia, brian = symbols('chelsia brian')\n\n    # Given equations based on the problem statement\n    # 3/4 of Chelsia's money is equal to 5/6 of Brian's money\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    # Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Calculate the total amount of money they've got together\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    team_average_height = 150\n    subgroup_average_height = team_average_height - 2\n    subgroup_total_height = subgroup_average_height * 4\n    total_height = team_average_height * 6\n    remaining_total_height = total_height - subgroup_total_height\n    remaining_average_height = remaining_total_height / 2\n\n    return remaining_average_height\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on first test\n    P_first = 0.4\n    # Probability of failing the first test but passing the second\n    P_second = (1 - 0.4) * 0.5\n    # Probability of failing the first and second test but passing the third\n    P_third = (1 - 0.4) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before fourth attempt\n    total_probability = P_first + P_second + P_third\n\n    return total_probability\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial ratio\n    equation1 = Eq(ryan / audrey, 2/7)\n\n    # New ratio after transactions\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    # Return the number of marbles Audrey had at first\n    return solutions[audrey]\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    sales = symbols('sales')\n    salary = 2500\n    total_salary = 3300\n    commission_1_rate = 0.02\n    commission_2_rate = 0.05\n    commission_threshold = 25000\n    \n    # Commission for the first 25000\n    commission_1 = commission_threshold * commission_1_rate\n    \n    # Commission for sales over 25000\n    commission_2_func = commission_2_rate * (sales - commission_threshold)\n    \n    # Condition: Sales over commission threshold.\n    expression_over_threshold = Eq(salary + commission_1 + commission_2_func, total_salary)\n\n    # Condition: Sales equal or under commission threshold.\n    expression_under_threshold = Eq(salary + sales * commission_1_rate, total_salary)\n\n    # Solving both conditions and taking the positive and logical solution.\n    solutions_over_threshold = solve(expression_over_threshold, sales)\n    solutions_under_threshold = solve(expression_under_threshold, sales)\n    \n    # Choosing the solution based on the threshold\n    if solutions_under_threshold[0] > 0 and solutions_under_threshold[0] <= commission_threshold:\n        solution_sales = solutions_under_threshold[0]\n    else:\n        solution_sales = solutions_over_threshold[0]\n\n    return solution_sales\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    pages = 0\n    digits = 1\n    while total_digits > 0:\n        max_page = 10**digits - 1\n        current_range_pages = max_page - 10**(digits - 1) + 1\n        current_range_total_digits = current_range_pages * digits\n        if total_digits >= current_range_total_digits:\n            total_digits -= current_range_total_digits\n            pages += current_range_pages\n        else:\n            pages += total_digits // digits\n            total_digits = 0\n        digits += 1\n    return pages\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    n = 30\n    a1 = 50\n    d = -1\n    \n    sum_of_n_terms = n / 2 * (2 * a1 + (n - 1) * d)\n    \n    return sum_of_n_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_to_complete = total_pieces / pieces_per_hour\n\n    return hours_to_complete\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age / 4 + 32, age - 22)\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 15\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(1, n + 1):\n        # Count the factors of 2\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        # Count the factors of 5\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n        \n    # The number of trailing zeros is determined by the minimum of the count of factor 2 or factor 5\n    ans = min(count_2, count_5)\n    \n    return ans\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second = 0\n    for i in range(1, 48):\n        for j in range(i+1, 48):\n            for k in range(j+1, 48):\n                if i + j + k < 48:\n                    max_apples_for_second = max(max_apples_for_second, j)\n    return max_apples_for_second\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Let n be the size of the square array\n    # If n is odd, the innermost layer will be boys\n    # If n is even, the innermost layer will be girls\n    # The difference in the number of boys and girls will be 4 times the number\n    # of layers minus 4, because for every layer except the last one,\n    # there will be 4 more boys than girls.\n    \n    # Let's try squares of different sizes and check their difference in boys and girls\n    for n in range(2, 100):  # We start from 2, as a single student doesn't make up a layer\n        # Number of layers\n        layers = (n + 1) // 2\n        # Number of boys more than girls from the pattern\n        diff = 4 * (layers - 1)\n        if n % 2 != 0:  # If n is odd, add the center boy\n            diff += 1\n        \n        if diff == 44:  # 44 more boys than girls\n            # Total students = n^2\n            total_students = n * n\n            return total_students\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climb = 0\n    day_count = 0\n\n    while total_climb < 18:\n        day_count += 1\n        if day_count != 6:\n            total_climb += 7\n        else:\n            total_climb += 3\n\n        if total_climb < 18:\n            # Here we assume the snail slides down a certain amount\n            # Since we do not know that yet, let's call it slide_down\n            slide_down = symbols('slide_down')\n            # At the end of the day, after sliding down, it should be less than 18\n            total_climb -= slide_down\n\n    # When the loop exits, we've reached or exceeded 18 meters\n    # the height before sliding on the sixth night should be:\n    height_sixth_night = total_climb - 3\n\n    # slide_down is the difference between the height at the end of the 6th day and the height at the beginning of the 6th day\n    slide_down = solve(Eq(height_sixth_night, 18))[0]\n\n    return slide_down\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length be L and the width be W, with the perimeter being P\n    # Perimeter of a rectangle is given by P = 2 * (L + W)\n    # The new length after increasing 12 cm is L + 12\n    # The perimeter of the new rectangle is then P_new = 2 * (L + 12 + W) = 38\n    \n    # We'll establish a relationship between P and P_new\n    # P_new = P + 2 * 12 (Because only the length is increased by 12 on both sides)\n    # 38 = P + 24\n    # So, P = 38 - 24\n    P = 38 - 24\n    \n    return P\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum(i**2 if i % 2 != 0 else -i**2 for i in range(1, 90))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n    num_students = 4\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # A helper function to calculate the total time for a given strategy\n    def calculate_time(strategy):\n        time_taken = 0\n        left_side = strategy.copy()\n        right_side = []\n        boat = []\n\n        while len(left_side) > 0:\n            # Always sort the left side to optimize who should go next\n            left_side.sort()\n            \n            if len(right_side) == 0:\n                # At the start, send the two fastest across first\n                boat.extend([left_side.pop(0), left_side.pop(0)])\n                time_taken += max(boat)\n                right_side.extend(boat)\n                boat.clear()\n            else:\n                # Send the fastest on the right back with the boat\n                boat.append(right_side.pop(0))\n                time_taken += boat[0]\n                left_side.append(boat.pop())\n                left_side.sort()\n                \n                # If only one person left on the left side, send the boat for final trip\n                if len(left_side) == 1:\n                    boat.append(left_side.pop())\n                    time_taken += boat[0]\n                    right_side.extend(boat)\n                    boat.clear()\n                else:\n                    # Send the two slowest on the left side across\n                    boat.extend([left_side.pop(), left_side.pop()])\n                    time_taken += max(boat)\n                    right_side.extend(boat)\n                    boat.clear()\n                    \n                    # Send the fastest on the right back with the boat\n                    right_side.sort()\n                    boat.append(right_side.pop(0))\n                    time_taken += boat[0]\n                    left_side.append(boat.pop())\n        return time_taken\n    \n    # All possible crossing strategies\n    possible_strategies = [\n        # Fastest rowers are always Eddie and Jack:\n        [1, 2, 5, 10],  # Eddie, Jack, Rose, Mary in the order of speed\n    ]\n\n    # Find the strategy with the minimum time\n    minimum_time = min(calculate_time(strategy) for strategy in possible_strategies)\n    \n    return minimum_time\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Possible choices for each day\n    choices = ['chocolate', 'peaches', 'strawberries']\n    count = 0\n\n    # First day Jenny eats chocolate\n    first_day = 'chocolate'\n    \n    # For the second day, she can choose either peaches or strawberries\n    for second_day in choices:\n        if second_day != first_day:\n            # For the third day, she cannot choose the same as the second day\n            for third_day in choices:\n                if third_day != second_day:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "from math import factorial\n\ndef solution():\n    # There are 7 people to sit in a circular order,\n    # so we fix one person and arrange the remaining 6\n    # We have 6! ways to arrange the 6 people\n    return factorial(6)\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    result = 50 / (5/3)\n    return result\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Since 8 is an even number, we consider 8 / 2 = 4. \n    # Half of the ways would have larger first number and smaller second number,\n    # the other half would be just the reverse of the first half.\n    # So we just need to consider 1 way for each pair.\n    # The possible pairs are (1,7), (2,6), (3,5) and (4,4), which makes 4 ways.\n    # We will not consider (0,8) or (8,0) since we require positive numbers.\n    # The pair (4,4) should be counted as one way, so we need to subtract this from our total count.\n\n    ans = (8 // 2) - 1\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, emma = symbols('john emma')\n\n    future_sum = Eq(john + 3 + emma + 3, 27)\n    age_difference = Eq(emma, john - emma)\n\n    solutions = solve((future_sum, age_difference), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbol total_salary represent Almaz's total salary\n    total_salary = symbols('total_salary')\n\n    # Almaz spent 5/9 of her salary on a television\n    television_cost = (5/9) * total_salary\n\n    # The remainder of her salary after buying the television\n    remainder = total_salary - television_cost\n\n    # She then spent 3/4 of the remainder on a table\n    table_cost = (3/4) * remainder\n\n    # She finally has $160 left\n    left = remainder - table_cost\n\n    # Equation representing the final amount left\n    equation = Eq(left, 160)\n\n    # Solve the equation to find the total salary\n    total_salary_solution = solve(equation, total_salary)[0]\n\n    # Calculate and return the cost of the television using the total salary found\n    ans = television_cost.subs(total_salary, total_salary_solution)\n    return ans\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked_in_a_week = 6\n\n    total_weekly_earnings = average_daily_earnings * days_worked_in_a_week\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "def solution():\n    from math import comb\n\n    # Number of non-collinear points\n    points = 15\n    # Number of points needed to form a triangle\n    triangle_points = 3\n\n    # Calculate the number of combinations\n    ans = comb(points, triangle_points)\n\n    return ans\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of Jones children (c) and the number of dogs (d)\n    c, d = symbols('c d')\n\n    # We know there are 3 times as many dogs as children\n    equation1 = Eq(d, 3 * c)\n\n    # Each child has 2 legs and each dog has 4 legs; together they have 56 legs\n    # Hence, 2 legs/child * number of children + 4 legs/dog * number of dogs = 56 legs\n    equation2 = Eq(2 * c + 4 * d, 56)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, d))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 1 - 2/5\n    present_pupils = 18\n    total_pupils = present_pupils / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    # Jack's speed is 50 km/h\n    # Jack starts 3 hours later than Tom\n    # After 5 more hours, they are 15 km apart\n\n    # Calculate the distance Tom travels until they are 15 km apart\n    # This includes the 3 hours head start plus 5 hours until they are 15 km apart\n    tom_travelled = 48 * (3 + 5)  # Tom's distance\n\n    # Calculate the distance Jack travels in the 5 hours until they are 15 km apart\n    jack_travelled = 50 * 5  # Jack's distance\n\n    # The total distance is the sum of both distances plus the 15 km gap\n    total_distance = tom_travelled + jack_travelled + 15\n\n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Since the 'Water' section is 36 degrees, it represents 36/360 = 1/10 of the total\n    water_fraction = 1/10\n    \n    # This implies that 1/4 chose tea, 7 chose coffee, and 30% chose cola\n    tea_fraction = 1/4\n    coffee_count = 7\n    cola_fraction = 0.30\n    \n    # The sum of the fractions for tea, coffee, and cola and water\n    total_fraction = tea_fraction + cola_fraction + water_fraction\n    \n    # Since coffee is not a fraction, we consider it as fraction of the whole by\n    # Assuming that the total number of people is x and the known count is 7\n    # 7 coffee out of x total people is 7/x\n    \n    # We know the fractions should add up to 1, hence we have the following equation\n    # 1/4 (tea) + 30/100 (cola) + 36/360 (water) + 7/x (coffee) = 1\n    # Given that 7/x is the fraction for coffee out of x people total\n    \n    # Solve for x:\n    # (1/4 + 30/100 + 1/10) + 7/x = 1\n    # 7/x = 1 - (1/4 + 30/100 + 1/10)\n    \n    # Calculate the fraction for coffee\n    coffee_fraction = 1 - total_fraction\n    \n    # Calculate number of people (x)\n    number_of_people = coffee_count / coffee_fraction\n    \n    return int(number_of_people)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    ans = 5.2 + 6.7 + 4.8\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36  # Katie's height in meters\n    height_cm = height_m * 100  # Converting meters to centimeters\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax_paid = income * tax_rate\n    final_income = income - tax_paid\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    for adults in range(2, 110 // 20 + 1):\n        for children in range(0, 110 // 15 + 1):\n            if 20 * adults + 15 * children == 110:\n                return children\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n    \n    perimeter = 2 * (length + width)\n    num_trees = perimeter // spacing\n\n    # As the trees start from a corner, the starting tree is counted for both sides.\n    # Hence, we need to subtract one to avoid counting it twice.\n    return num_trees - 1\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people_count = 3\n\n    sweets_per_person = total_sweets // people_count\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    ans = (180/0.6)/100\n    return ans\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    # Loop through all possible 2 to n digit numbers with 9 in the units place\n    for num in range(19, 10000, 10):\n        # create the new number by moving 9 to the beginning\n        new_num = int('9' + str(num)[:-1])\n        # check if the new number is 4 times the original number\n        if new_num == 4 * num:\n            return num\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    squash_ratio = 1\n    water_ratio = 9\n    total_ratio = squash_ratio + water_ratio\n\n    squash_quantity_ml = 750\n    total_quantity_ml = squash_quantity_ml * total_ratio / squash_ratio\n\n    bottle_volume_ml = 1000\n    num_bottles = total_quantity_ml // bottle_volume_ml\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    # We'll use the concept of congruence and the fact that the remainders cycle\n    # (this is sometimes referred to as Fermat's Little Theorem or just modular properties)\n    \n    base = 221\n    exponent = 2020\n    modulo = 7\n    \n    # Since we are only interested in the remainder (mod 7),\n    # we can simplify this problem by evaluating 221 mod 7\n    base_remainder = base % modulo  # This simplifies 221 to 3 modulo 7\n    \n    # 3^2020 mod 7 can now be computed. Since 3^6 = 729 which is 1 mod 7,\n    # we can reduce 2020 by a multiple of 6 and use the result as the exponent, due to cyclic properties.\n    reduced_exponent = exponent % 6\n    \n    # Now we calculate the remainders\n    remainder = pow(base_remainder, reduced_exponent, modulo)\n    \n    return remainder\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # According to the problem, Li Yan spent 1/3 of her money on a book\n    # Let's say the total money Li Yan had initially is x\n    # So, the cost of the book is (1/3) * x\n    \n    # The remaining money after buying the book is x - (1/3) * x = (2/3) * x \n    # She then spent 1/2 of the remaining money on a bag\n    # So, the cost of the bag is (1/2) * (2/3) * x = (1/3) * x\n    \n    # According to the problem, the book and the bag cost $132 altogether\n    # So, (1/3) * x + (1/3) * x = $132\n    # That means (2/3) * x = $132\n    # So, x = $132 * (3/2) = $198\n    \n    # Thomas calculated 5/6 of the total money as the cost, which is incorrect.\n    # He also wrongly added the fractions of the spending, rather than considering the remainder.\n    \n    # The correct calculation is done above, finding the initial total money x.\n\n    money_spent_on_book_and_bag = 132\n    # Calculate the total initial money\n    total_initial_money = money_spent_on_book_and_bag * (3/2)\n\n    return total_initial_money\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Calculate the last two digits of each term separately.\n    last_two_digits_6_pow_2015 = pow(6, 2015, 100)\n    last_two_digits_2015_times_6 = (2015 * 6) % 100\n    last_two_digits_2015_pow_6 = pow(2015, 6, 100)\n\n    # Sum up the last two digits of each term.\n    ans = (last_two_digits_6_pow_2015 + last_two_digits_2015_times_6 + last_two_digits_2015_pow_6) % 100\n\n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # We know from the problem that B = 2 and D = 0\n    B = 2\n    D = 0\n\n    # Define remaining unknown digits as symbols\n    A, C, E, F = symbols('A C E F')\n\n    # Original number is ABCDEF and shifted number is EFABCD\n    ABCDEF = 100000 * A + 10000 * B + 1000 * C + 100 * D + 10 * E + F\n    EFABCD = 100000 * E + 10000 * F + 1000 * A + 100 * B + 10 * C + D\n\n    # Set up the equation given in the problem statement\n    equation = Eq(5 * ABCDEF, 6 * EFABCD)\n\n    # We know that each letter represents a distinct digit, so the possible digits are 0-9.\n    # Since B is 2 and D is 0, they cannot be used again. Thus we have to include these constraints.\n    constraints = (A != E, A != F, A != C, A != 2, A != 0,\n                   C != E, C != F, C != 2, C != 0,\n                   E != F, E != 2, E != 0,\n                   F != 2, F != 0,\n                   A > 0, E > 0)  # A and E cannot be 0 because they're digits of a 6-digit number\n\n    solutions = solve((equation,) + constraints)\n    \n    # Returning only the solution that forms a 4-digit number \"FACE\"\n    return [sol[A] * 1000 + sol[C] * 100 + sol[E] * 10 + sol[F] for sol in solutions][0]\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percent = 10\n    discount_amount = (discount_percent / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since the number has 8 factors and we know the first 5, the number must be the fifth factor multiplied by the last factor\n    # because in an ordered list of factors, the first factor (1) times the last (8th) factor equals the number,\n    # and similarly the second times the second-to-last equals the number, and so on.\n    # Given that we have: 1, 2, 4, 7, 8, the last factor (which we're looking for) must pair with 1 to form the number.\n    # Consequently, 7 (as one of the factors) multiplied by another unknown factor must give us the number.\n    # Since 7 is a prime number, the number must be a multiple of 7. Also, the another unknown factor must be double of 7 to account for 2, 4 and 8.\n    # Therefore, the number is 7 multiplied by 2 * 7 (since we must have 2 & 4 as factors as well).\n    # This gives us 7 * 14, which makes the number 98.\n\n    return 98\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the initial number of cows as c and goats as g\n    c, g = symbols('c g')\n\n    # initially, 65% of the animals were cows, so cows are 65% of the total\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # after adding 240 animals, cows became 85% of the total, and goats doubled\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation3 = Eq(g * 2, g + 240)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position_from_front = 6\n    amy_position_from_back = 8\n\n    # Since Amy is directly behind Jolene, we can simply add their positions to find the total.\n    # We subtract 1 because we counted Jolene's position twice: once from the front and once from the rear.\n    total_children = jolene_position_from_front + amy_position_from_back - 1\n\n    return total_children\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    reached_height = 0\n    \n    while reached_height < total_height:\n        jumps += 1\n        reached_height += jump_up\n        if reached_height >= total_height:\n            break\n        if jumps % 2 == 0:\n            reached_height -= fall_down\n    \n    return jumps\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x = 1 (mod 5), x = 2 (mod 6), x = 9 (mod 11)\n    congruences = [(1, 5), (2, 6), (9, 11)]\n\n    # The smallest number that satisfies all congruences\n    smallest_number, _ = solve_congruence(*congruences)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the number of cookies in the box.\n    # He sold 1680 cookies from the first box, thus he kept (x - 1680).\n    # In the second month, he sold 7/20 more than 1680, which is equal to 1680 + (7/20 * 1680).\n    # The number of cookies kept is decreased by 3/20, meaning he kept (x - 1680) - (3/20 * x).\n    \n    # Therefore, the equation for the second box would be:\n    # Number of cookies he sold from the second box = x - ((x - 1680) - (3x/20))\n    # We know he sold 7/20 more for the second month compared to the first month (1680 cookies),\n    # so we can set up the equation:\n    # x - ((x - 1680) - (3x/20)) = 1680 + (7/20 * 1680)\n    \n    # Rearranging terms ...\n\n    # Full equation:\n    # x - (x - 1680 + (3/20 * x)) = 1680 + (1680 * 7/20)\n    # Simplify:\n    # x - x + 1680 - (3/20 * x) = 1680 + (1680 * 7/20)\n    # Combine like terms:\n    # -1680 - (3/20 * x) = (1680 * 7/20)\n    # Multiply both sides by 20 to get rid of the fraction:\n    # -1680*20 - 3x = 1680*7\n    # Continue to solve for x:\n    # -33600 - 3x = 11760\n    # -3x = 11760 + 33600\n    # -3x = 45360\n    # x = 45360 / -3\n\n    x = 45360 / -3\n\n    return int(x)\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    # The length of each side of the pentagon is 432 meters.\n    side_length = 432\n    \n    # A regular pentagon has 5 sides.\n    total_pentagon_length = 5 * side_length\n    \n    # Sunflowers are placed 4 meters apart.\n    distance_apart = 4\n    \n    # Calculate the number of sunflowers on the sides, subtracting the corner sunflowers\n    # as they are counted twice.\n    corner_sunflowers = 5\n    side_sunflowers = (total_pentagon_length // distance_apart) - (corner_sunflowers - 1)\n    \n    # Add the corner sunflowers back to get the total number of sunflowers.\n    total_sunflowers = side_sunflowers + corner_sunflowers\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    total_pence = 3 * 100  # Since Â£1 = 100p, Â£3 = 300p\n    stamp_cost = 46  # cost of one stamp in pence\n\n    num_stamps = total_pence // stamp_cost\n\n    return num_stamps\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time Ryan would take at his usual speed\n    t = symbols('t')\n\n    # Distance remains the same, so speed1 * time1 = speed2 * time2\n    equation = Eq(45 * t, 30 * (t + 2))\n\n    # Solve for t\n    time_usual_speed = solve(equation, t)\n\n    return time_usual_speed[0]\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2\n    \n    # Each trip can take 7 people across, except for the last trip.\n    # For the last trip, there may be fewer than 7 people if the total\n    # number of adventurers isn't a multiple of the boat capacity.\n\n    # One way to find the total time is by using full trips for (adventurers - 1)\n    # (because we need to keep 1 person to bring the boat back), and then add\n    # one trip for the last batch.\n    \n    # However, we consider the last batch as well. If the last batch exactly fills the boat,\n    # we do not need to count the return time for the boat on the last trip.\n    full_trips = (adventurers - 1) // boat_capacity\n    last_trip_adventurers = (adventurers - 1) % boat_capacity\n    # Determine if the last trip is a full trip (which will not have a return trip)\n    is_last_trip_full = last_trip_adventurers == 0\n    \n    # Calculate the total time including return trips for all but the last trip, and then\n    # add time for the last trip (if it isn't full, it needs no return trip).\n    total_time = full_trips * trip_time * 2 # Each full trip requires a return trip\n    if not is_last_trip_full or full_trips == 0:\n        total_time += trip_time # Add time for the last (partial or the only) trip across the river\n\n    return total_time\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum from 3 to 10\n    sum_ascending = sum(range(3, 11))\n    # Calculate the sum from 3 to 6 (excluding 10)\n    sum_descending = sum(range(3, 7))\n    # Double the sum to account for ascending and descending parts,\n    # then subtract the peak number (10) which is counted twice\n    total_sum = 2 * (sum_ascending + sum_descending) - 10\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def partitions(n):\n        # Base case: there's only one way to partition 0\n        if n == 0:\n            return 1\n        # Iterate through numbers to build partition counts\n        parts = [0] * (n + 1)\n        parts[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                parts[j] += parts[j - i]\n        return parts[n]\n\n    return partitions(5) - 1  # subtract 1 for the number itself\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = 4.219**2 / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    # Calculate the remainders of the sequence when divided by 3\n    # Since the pattern will repeat after a certain number of terms.\n    remainders = [3 % 3, 10 % 3]\n    i = 2\n    while True:\n        # The next integer in the sequence is the sum of the previous two.\n        next_remainder = (remainders[i - 1] + remainders[i - 2]) % 3\n        # Since we only need the remainder, we can take modulus with 3 directly.\n        \n        # Check if the pattern has started repeating\n        if (next_remainder, remainders[i - 1]) == (remainders[1], remainders[0]):\n            break\n        \n        remainders.append(next_remainder)\n        i += 1\n    \n    # Find the length of the repeating pattern.\n    pattern_length = len(remainders) - 2\n\n    # Since the pattern repeats, find the position of the 1997th term in the pattern.\n    remainder_pos = (1997 - 1) % pattern_length  # -1 because the sequence is 1-indexed\n    \n    # Get the remainder of the specific term.\n    ans = remainders[remainder_pos]\n\n    return ans\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin = 329\n    jessica = amin + 97\n    mary = jessica - 58\n    return mary\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    sweets_per_student_a = 6\n    shortfall_a = 26\n    sweets_per_student_b = 5\n    shortfall_b = 5\n\n    # Calculate number of students from the shortfall information\n    students = (shortfall_a - shortfall_b) / (sweets_per_student_a - sweets_per_student_b)\n\n    # Calculate total number of sweets\n    total_sweets = sweets_per_student_b * students + shortfall_b\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # The sum of an even number of consecutive numbers will always be even.\n    # Since there are 8 trees and the difference between each neighboring tree is 1,\n    # we have an even number of integers and their sum can only be even.\n    # However, 225 is an odd number.\n    # Therefore, it is not possible for the sum of the fruits of 8 trees to be 225.\n    \n    # No need to find an equation since the scenario is not possible.\n    return False\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n    \n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    # Heidi's current age\n    heidi_age = 8\n    # Dad's current age\n    dad_age = 50\n    # Number of years later\n    years_later = 0\n\n    # Loop until dad's age is 4 times Heidi's age\n    while not (dad_age + years_later == 4 * (heidi_age + years_later)):\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Since there needs to be at least one singing performance between every two dancing performances,\n    # we can represent the dancing performances as D and singing as S, like this: SDS or SDSDS or SDSDSDS\n    # We have to place 3 dancing performances in such a structure.\n    # The total number of slots available for the singing performances is 4 (since we need at least 1 S between D's, and 1 at the beginning or end).\n    # We will consider that we have 4 S slots to be filled between 3 D slots (DS|DS|DS|S, where | represents a potential division between S)\n    # Number of ways to arrange the D's and the S's is combinations of the slots which is calculated as C(n+k-1, k-1) where n=S, k=D\n    # So here n = 4, k = 3 should be calculated as C(4+3-1, 3-1) = C(6, 2)\n\n    n = 4  # singing performances\n    k = 3  # dancing performances\n\n    # The function for combination C(n, k) is factorial(n) / (factorial(k) * factorial(n - k))\n    # Calculate the number of ways to arrange the singing performances\n    comb = factorial(n + k - 1) // (factorial(k - 1) * factorial(n))\n\n    # Since the singing performances are distinct, we need to multiply by the number of permutations of singing, which is factorial(4)\n    ans = comb * factorial(n)\n\n    return ans\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    result = 11 * 14 + 26\n    ans = result / 15\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    factorial_number = 60\n    zeros_count = 0\n    \n    # Factor of 10 is created by 2*5, so count the pairs of 2's and 5's in the prime factorization\n    # of the factorial. The lesser count of either 2 or 5 will be the number of zeros.\n    num_twos = 0\n    num_fives = 0\n\n    for i in range(2, factorial_number + 1):\n        while i % 2 == 0:\n            num_twos += 1\n            i /= 2\n        while i % 5 == 0:\n            num_fives += 1\n            i /= 5\n\n    zeros_count = min(num_twos, num_fives)\n\n    return zeros_count\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    leo_current_age, son_current_age = symbols('leo_current_age son_current_age')\n    \n    # Create the equations based on the problem statement\n    # When Leo was the current age of his son, the son was 4 years old.\n    # Therefore, (leo_current_age - son_current_age) years ago, son was 4 years old\n    equation1 = Eq(leo_current_age - son_current_age, son_current_age - 4)\n    \n    # When the son reaches Leo's current age, Leo will be 70 years old.\n    # Therefore, after (leo_current_age - son_current_age) years, Leo will be 70 years old.\n    equation2 = Eq(leo_current_age + (leo_current_age - son_current_age), 70)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_current_age, son_current_age))\n    \n    # Return Leo's current age\n    return solutions[leo_current_age]\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    original_average = 120\n    new_average = 150\n\n    total_original = original_average * 3\n    total_new = new_average * 4\n\n    fourth_number = total_new - total_original\n\n    return fourth_number\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import solve, symbols, Eq\n\n    r = symbols('r')\n    eq = Eq(216 * r, r**2)\n    solutions = solve(eq, r)\n    \n    valid_solutions = [sol.evalf() for sol in solutions if sol.is_real and sol > 0]\n    ans = min(valid_solutions)  # Assuming we want the smallest positive real solution\n\n    return ans\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3 / 13) * 52\n    return result\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    net_climb = daily_climb - nightly_slip\n    days_to_climb_without_last_day = 9 - 1  # Since on the 9th day it climbs out without slipping\n\n    distance_climbed_without_last_day = net_climb * days_to_climb_without_last_day\n    total_climb_on_last_day = distance_climbed_without_last_day + daily_climb\n    \n    return total_climb_on_last_day\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = 1  # Start with the smallest possible divisor which is 1\n\n    while True:\n        dividend = smallest_divisor * quotient + remainder\n        if dividend % smallest_divisor == remainder:\n            return dividend\n        smallest_divisor += 1\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n    \n    # Total ways to arrange 6 people in a line\n    total_ways = factorial(6)\n    \n    # Ways to arrange 6 people with Teddy on the furthest left\n    ways_with_teddy_first = factorial(5)\n    \n    # Total ways minus the ways with Teddy on the furthest left\n    ans = total_ways - ways_with_teddy_first\n    \n    return ans\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one bag of sweets and one can of drink\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n    \n    # Create equations based on the given information\n    eq1 = Eq(3*bag_of_sweets + 5*can_of_drink, 4.90)\n    eq2 = Eq(bag_of_sweets + 3*can_of_drink, 2.70)\n    \n    # Solve the system of equations for the cost of a bag of sweets\n    solutions = solve((eq1, eq2), (bag_of_sweets, can_of_drink))\n    \n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n    ans = total_pence * fraction\n    return ans\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # The common difference is negative\n    \n    # The formula for the nth term of an arithmetic sequence is:\n    # a_n = a_1 + (n - 1) * d, where a_n < 0 for the first negative term\n    # Solve for n when a_n < 0:\n    # 0 > 50 + (n - 1) * (-4)\n    # Divide both sides by -4 (and flip inequality because of the negative sign):\n    # 0 < 50/4 + (n - 1)\n    # Subtract (50/4) from both sides:\n    # -50/4 < (n - 1)\n    # Add 1 to both sides:\n    # (1 - 50/4) < n\n    \n    n = 1 - (50 / 4)\n    \n    return int(n)\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    n = 7  # Number of consecutive numbers\n    total_sum = 280  # Total sum of the consecutive numbers\n    average = total_sum // n\n    largest_number = average + (n // 2)\n\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two unknown numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of the two numbers is 49\n    equation1 = Eq(x + y, 49)\n\n    # Equation 2: The difference of the two numbers is 9\n    equation2 = Eq(x - y, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the bigger number\n    return solutions[x]\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    # Iterate over all possible two-digit numbers\n    for num in range(10, 100):\n        # Sum the digits of the number\n        sum_digits = sum(int(digit) for digit in str(num))\n        # Check if the sum is a multiple of 7\n        if sum_digits % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    sum_of_squares = [n**2 for n in range(1, 10)]\n    modified_sums = [8 * s for s in sum_of_squares]\n    ans = sum(modified_sums)\n    return ans\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):\n        for b in range(a+1, 1000):  # B should be greater than A\n            if a % 75 == 0 and b % 75 == 0:  # Highest common factor is 75\n                str_a = str(a)\n                str_b = str(b)\n                common_digits_a = set(str_a) & set(str_a)\n                common_digits_b = set(str_b) & set(str_b)\n                if len(common_digits_a) != 1 and len(common_digits_b) != 1:\n                    # Count the common digits in A and B excluding the common digit in each number itself\n                    common_digits_in_a_and_b = set(str_a) & set(str_b)\n                    if len(common_digits_in_a_and_b) == 2:\n                        max_sum = max(max_sum, a + b)\n\n    return max_sum\n\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    next_throw = False\n\n    for throw in throws:\n        if next_throw:\n            position -= throw\n            next_throw = False\n        elif throw != 6:\n            position += throw\n        else:\n            next_throw = True\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    # Alex and Brayden have $756 altogether\n    equation1 = Eq(alex + brayden, 756)\n    \n    # After Alex gave $65 to Brayden, Alex had three times as much money as Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    # Solving the system of equations for Alex and Brayden\n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Insert the magazines between storybooks\n    # There are 6 possible positions for magazines (before the 1st storybook,\n    # between the 1st and 2nd, ..., and after the 5th), and we need to choose\n    # 5 out of them for the magazines, which is a combination.\n    positions_for_magazines = factorial(6) // (factorial(5) * factorial(6 - 5))\n    \n    # Calculate permutations for storybooks and magazines separately since they are\n    # distinguishable among themselves.\n    perm_magazines = factorial(5)\n    perm_storybooks = factorial(5)\n    \n    # Multiply the number of ways to insert magazines with the permutations\n    # of magazines and storybooks to get the total number of arrangements.\n    total_arrangements = positions_for_magazines * perm_magazines * perm_storybooks\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n\n    money_transferred = (james - kate)/2\n\n    return money_transferred\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # Assuming a realistic upper bound for the number of gums\n        remaining_after_music = gums - 2  # Ate 2 in music\n        shared_at_break = remaining_after_music // 3\n        if remaining_after_music % 3 == 0:  # Ensure a whole number of gums was shared\n            remaining_after_break = remaining_after_music - shared_at_break\n            if remaining_after_break % 4 == 0:  # Ensure equal amount in each of the next four lessons\n                return gums  # Found the smallest number of gums\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_initial = 10 * 10  # Initial sum based on the average of 10.\n    total_sum_remaining = 9 * 9  # Sum of the remaining 9 numbers after removing one.\n\n    removed_number = total_sum_initial - total_sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # Speed in kilometers per hour\n    time_seconds = 300  # Time in seconds\n\n    # Convert speed to meters per second (1 km/h = 1000m/3600s)\n    speed_mps = speed_kmh * (1000/3600)\n\n    # Calculate distance travelled in meters\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = 21 // 2  # Since we are taking odd numbers only, the sequence is 1, 3, 5, ..., 21 which has (21//2)+1 terms\n    sum_of_sequence = (n * (n + 1)) // 2  # Sum of first n natural numbers\n    ans = sum_of_sequence ** 2  # The square of the sum\n    return ans\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume 's' is the amount each sibling receives when shared equally among all.\n    # When the brothers share among themselves, they receive 's + 20' each.\n    s = symbols('s')\n\n    # When split equally, there are 4 siblings. So the total amount is 4*s.\n    # When only the brothers share, there are 3 siblings. So each gets 's + 20' which means total is 3*(s + 20).\n    # Both scenarios refer to the same total amount of money.\n\n    equation = Eq(4*s, 3*(s + 20))\n\n    # Solving the equation for 's'\n    solved = solve(equation, s)\n\n    # The original sum is the amount when split among 4 siblings\n    original_sum = 4 * solved[0]\n    return original_sum\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, g, b = symbols('r g b')  # red, green, and blue beads left after giving some away\n\n    # Equation 1: Total beads after giving some away is 350\n    equation1 = Eq(r + g + b, 350)\n\n    # Equation 2: 2 times as many red beads as green beads after giving some away\n    equation2 = Eq(r, 2 * g)\n\n    # Equation 3: Blue beads left is 50 fewer than red beads left\n    equation3 = Eq(b, r - 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, g, b))\n\n    # Calculate the original number of blue beads\n    # Original number of blue beads = blue beads left + 112\n    original_blue_beads = solutions[b] + 112\n\n    return original_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # four groups of numbers with their sums\n    sum_36 = 36 * 4 \n    sum_38 = 38 * 4\n    sum_39 = 39 * 4\n    sum_45 = 45 * 4\n    sum_49 = 49 * 4\n    \n    # sum of all the numbers (each number is counted 4 times since itâs the sum of 4 groups)\n    total_sum = sum_36 + sum_38 + sum_39 + sum_45 + sum_49\n    \n    # the sum of the four smallest numbers (because the largest number was not included)\n    sum_smallest = total_sum - 49 * 4\n    \n    # the largest number is the total sum of all numbers divided by 5 (each number counted once) minus the sum of the four smaller numbers\n    largest_number = total_sum / 5 - sum_smallest\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4 / 5\n    art_books_fraction = 1 / 3\n    science_books = art_books * art_books_fraction / science_books_fraction\n    \n    return int(science_books)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n    equation1 = Eq(jared, 2/5 * katelyn)\n    equation2 = Eq(jared - katelyn, 60)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return int(total_stickers)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(n, -2) for n in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 1.05\n    second_interest_rate = 1.10\n    \n    # Compound for the first 3 years at 5%\n    amount_after_first_period = initial_investment * (first_interest_rate ** 3)\n    \n    # Compound for the next 2 years at 10%\n    final_amount = amount_after_first_period * (second_interest_rate ** 2)\n    \n    # Rounding the result to the nearest tenth\n    ans = round(final_amount, 1)\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # If we cut each sausage into 1.5 pieces, we can get 24 pieces from 16 sausages.\n    # However, we can't cut sausages into 1.5 pieces without first cutting them into half.\n    # So we first cut each sausage in half making 16 cuts.\n    # Now, we have 32 half-sausages, and we need to make 8 more cuts to turn 16 of these half-sausages into 24 pieces.\n    # So each of these 16 half-sausages will be cut into one whole piece and one half piece (total 24 whole pieces when combined).\n    # So the total number of cuts is 16 (to make halves) + 8 (additional cuts to make 1.5 pieces).\n    total_cuts = 16 + 8\n    return total_cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # Volumes of each type of textbook\n    chinese_volumes = 42\n    math_volumes = 63\n    nature_volumes = 28\n\n    # Greatest common divisor function\n    def find_gcd(x, y):\n        return gcd(x, y)\n\n    # Find the greatest common divisor among all types\n    gcd_all = find_gcd(find_gcd(chinese_volumes, math_volumes), nature_volumes)\n\n    # This is the greatest possible number of textbooks each stack can have\n    return gcd_all\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Speeds in m/min\n    speed_qiqi = 60\n    speed_weiling = 72\n\n    # Delay in the start time between Qiqi and Weiling in minutes\n    delay = 2\n\n    # Time difference at the end in minutes\n    time_difference = 4\n\n    # Let x be the travel time of Qiqi in minutes\n    # We can then say that Qiqi traveled for (x - delay) minutes when Weiling started, \n    # and (x - time_difference) is Weiling's travel time.\n    # We can set up an equation based on the distances traveled, since they both cover the same distance:\n    # speed_qiqi * x = speed_weiling * (x - time_difference - delay)\n    \n    # After rearranging the equation, it becomes a linear equation that can be solved for x:\n    # speed_qiqi * x = speed_weiling * x - (speed_weiling * (time_difference + delay))\n    # (speed_weiling - speed_qiqi) * x = speed_weiling * (time_difference + delay)\n\n    # Solving for x (Qiqi's travel time):\n    x = speed_weiling * (time_difference + delay) / (speed_weiling - speed_qiqi)\n\n    # Now calculate the distance using Qiqi's speed and travel time\n    distance = speed_qiqi * x\n    return distance\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # One company builds 900m in 4 * 5 = 20 days\n    days_for_one_company_to_build_900m = 4 * 5\n\n    # Thus, for 2700m, the same company would take 3 times as much time\n    days_for_one_company_to_build_2700m = days_for_one_company_to_build_900m * 3\n\n    return days_for_one_company_to_build_2700m\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # St Petersburg is 3 hours ahead of Manchester.\n    time_difference = timedelta(hours=3)\n    \n    # Richard meets the plane at 12 noon St Petersburg time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    \n    # Calculate the time the plane left Manchester\n    manchester_departure_time = st_petersburg_time - time_difference\n    \n    # Format the answer as a string in the format \"HH:MM\"\n    ans = manchester_departure_time.strftime('%H:%M')\n    return ans\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # star's work + nini's work = 1 job\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    # star's work + nini's work = 1 job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    nini_time_to_finish = 1 / solutions[nini_rate]  # time = work/rate\n\n    return nini_time_to_finish\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg = 5\n    lbs_per_kg = 2.2\n    ans = kg * lbs_per_kg\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130  # Jane's height in cm\n    height_difference = 45  # Difference in height between Jane and Ben in cm\n\n    # Calculate Ben's height\n    ben_height = jane_height - height_difference\n\n    return ben_height\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    ans = sum((-1)**(i+1) * (34 - 2*i) for i in range(1, 17))\n    return ans\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position when counting from the front\n    ben_front = 6\n    # Frank's position when counting from the back\n    frank_back = 9\n    # Number of people between Ben and Frank\n    people_between = 10\n\n    # Since the queue is the same from both ends, if we add Ben's position from the front,\n    # the number of people between them, and Frank's position from the back, we should be\n    # able to figure out the total number of people in the queue.\n    total_people = ben_front + people_between + frank_back\n\n    # Ben's answer was correct if it matches our total_people calculation\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72\n    total = 140\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    present_value = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663 ** 2) % 9\n    return remainder\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total = 0\n    number = 0\n    for i in range(1, 2016):\n        number = number * 10 + 1\n        total += number\n    return total % 10000\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbol for the total number of marbles\n    total_marbles = symbols('total_marbles')\n\n    # Since 2/5 are red, 1/3 are green and 96 are yellow, we can write the following equations:\n    # (2/5)*total_marbles + (1/3)*total_marbles + 96 = total_marbles\n    \n    # We rearrange the above to: (2/5 + 1/3)*total_marbles = total_marbles - 96\n    # And simplify to get total_marbles in terms of 96\n    \n    # This creates the equation we will solve\n    equation = Eq((2/5 + 1/3)*total_marbles, total_marbles - 96)\n\n    # Solving the equation yields the total number of marbles\n    solutions = solve(equation, total_marbles)\n\n    # Return only the positive solution as the number of marbles cannot be negative\n    return solutions[0]\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n\n    # Iterate over all even three-digit numbers\n    for num in range(100, 1000, 2):\n        # Sum the digits of the number\n        digit_sum = sum(int(digit) for digit in str(num))\n        \n        # Check if the sum of the digits is 8\n        if digit_sum == 8:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Worst case scenario: taking one marble of each color first.\n    marbles_to_take = 2 # one of each color: 1 blue + 1 yellow\n    \n    # Now, no matter which marble we take next, it will guarantee two of the same color.\n    marbles_to_take += 1 # one more marble, which will ensure a pair\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculating unit digit of 13^242\n    unit_digit_13_242 = (13 ** 242) % 10\n\n    # Calculating unit digit of 17^379\n    unit_digit_17_379 = (17 ** 379) % 10\n\n    # Calculating unit digit of 4^2012\n    unit_digit_4_2012 = (4 ** 2012) % 10\n\n    # Finding unit digit of the sum\n    unit_digit_sum = (unit_digit_13_242 + unit_digit_17_379 * unit_digit_4_2012) % 10\n\n    return unit_digit_sum\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    for mary_age in range(1, 100):\n        john_age = mary_age + 1\n        for first_child_age in range(1, 100):\n            second_child_age = first_child_age + 2\n            third_child_age = first_child_age + 4\n            if (john_age * mary_age < 2019) and (first_child_age * second_child_age * third_child_age < 2019):\n                if ( (john_age + 1) * (mary_age + 1) > 2020) and ( (first_child_age + 1) * (second_child_age + 1) * (third_child_age + 1) > 2020):\n                    all_ages_sum = john_age + mary_age + first_child_age + second_child_age + third_child_age\n                    return all_ages_sum\n    return None\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Bicyclist travel time per mile in seconds\n    time_per_mile = 2 * 60 + 30  # 2 minutes and 30 seconds converted to seconds\n    \n    # Total time for 1 hour in seconds\n    total_time_seconds = 1 * 60 * 60  # 1 hour converted to seconds\n    \n    # Number of miles the bicyclist can travel in 1 hour\n    miles_in_one_hour = total_time_seconds / time_per_mile\n    \n    return miles_in_one_hour\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let the original sum of money be X\n    # Then after spending $36 on plates, she had (X - 36) left\n    # She spent 3/4 of the remaining money on cups, so she spent 3/4*(X - 36)\n    # She had 1/6 of the original sum left, so 1/6 of the original sum is equal to the money left after buying cups\n    # Hence, X - $36 - 3/4*(X - 36) = 1/6*X\n    # Now we solve the equation for X\n    \n    # Rearrange the equation:\n    # X - 36 - (3/4)X + (3/4)*36 = (1/6)X\n    # (1 - 3/4 - 1/6)X = 36 - (3/4)*36\n    # (1/4 - 1/6)X = 36 - 27\n    # (1/4 - 1/6)X = 9\n    # (3/12 - 2/12)X = 9\n    # (1/12)X = 9\n    # X = 9 * 12\n    \n    money_at_first = 9 * 12\n\n    return money_at_first\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Number of single digit numbers starting with 8: 1 (which is just 8)\n    single_digit_count = 1\n\n    # Numbers starting with 8:\n    # From 80 to 89 (inclusive) - 10 two-digit numbers\n    # From 800 to 899 (inclusive) - 100 three-digit numbers\n    # From 8000 to 8999 (inclusive) - 1000 four-digit numbers\n    # Hence, for n-digit numbers (n > 1), we have 10^(n-1) such numbers.\n\n    # We need to find the corresponding number for the 2012th place.\n    remaining = 2012 - single_digit_count  # Subtract the single-digit count\n\n    # Initialize the digit counter starting from two-digit numbers\n    digit = 2\n\n    # Loop to find the number of digits of the 2012th number\n    while remaining - (10 ** (digit - 1)) > 0:\n        remaining -= (10 ** (digit - 1))\n        digit += 1\n\n    # After the loop, 'remaining' corresponds to the position within the range of 'digit' digits number\n    # As Python counts from 0, we adjust 'remaining' by subtracting 1\n    remaining -= 1\n\n    # The number is constructed as follows:\n    # - '8' is the leftmost digit\n    # - The rest of the number corresponds to 'remaining'\n    number = int(\"8\" + str(remaining).zfill(digit - 1))\n\n    return number\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    # The largest value for A would occur when the largest digits are in the\n    # overlapping sections of each number segment (abc, bcd, cde, etc.).\n    # To maximize A, we should place the largest numbers in the 'overlapping' positions\n    # such that they are counted the most number of times.\n    digits = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    # Assigning the values to each segment\n    b, c, d, e, f, g, h = digits[:7]\n    a, i = digits[7], digits[8]\n    # Calculating the value of A\n    A = (a*100 + b*110 + c*111 + d*111 + e*111 + f*111 + g*110 + h*10 + i)\n    return A\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle term of the five consecutive natural numbers be x.\n    # Therefore, the total number of balls is (x-2) + (x-1) + x + (x+1) + (x+2) = 5x\n    # According to the problem, the total number of balls is 160.\n    # 5x = 160 => x = 160 / 5 => x = 32\n    # x is the middle term of the five consecutive natural numbers.\n    # The student with the most balls will have x+2 balls.\n    x = 160 // 5\n    return x + 2  # The number of balls owned by the student with the most balls.\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    min_envelopes = [2, 4, 3]\n    remaining_envelopes = 15 - sum(min_envelopes)\n    count = 0\n    for combo in combinations_with_replacement(range(remaining_envelopes+1), 3):\n        if sum(combo) == remaining_envelopes:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * (1/10)\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n\n    tax_equation = Eq(0.15 * 20000 + 0.20 * (income - 20000), 7000)\n\n    income_value = solve(tax_equation, income)\n\n    return income_value[0]\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "from math import gcd\n\ndef solution():\n    lengths = [28, 14, 56]\n    ans = gcd(gcd(lengths[0], lengths[1]), lengths[2])\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    for chickens in range(41):\n        rabbits = 40 - chickens\n        if 2 * chickens + 4 * rabbits == 100:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of packs at stores A and B\n    x = symbols('x')\n    \n    # Store A sold 290 packs, so it has x - 290 left\n    # Store B has 3 times the remaining packs of Store A\n    equation = Eq(3 * (x - 290), x)\n    \n    # Solve the equation for x\n    initial_packs = solve(equation, x)[0]\n    \n    # The total number of packs they had at first is twice the initial packs of one store\n    total_initial_packs = 2 * initial_packs\n    \n    return total_initial_packs\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # 1/13 is a recurring decimal, let's get the recurring cycle\n    remainder = 1\n    decimals = []\n    remainders = {}\n    index = 0\n    while True:\n        remainder *= 10\n        digit = remainder // 13\n        remainder = remainder % 13\n\n        # If the remainder repeats, we have our recurring cycle\n        if remainder in remainders:\n            break\n        remainders[remainder] = index\n        index += 1\n        decimals.append(digit)\n    \n    # Find the digit in the 2022th decimal place\n    cycle_length = len(decimals)\n    position = (2022 - 1) % cycle_length  # -1 because the position is 0-indexed\n\n    ans = decimals[position]\n    return ans\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    strawberry_chocolate_price = 4\n\n    dark_chocolates = 20\n    milk_chocolates = 20\n    strawberry_chocolates = 20\n\n    total_cost = (dark_chocolates * dark_chocolate_price) + (milk_chocolates * milk_chocolate_price) + (strawberry_chocolates * strawberry_chocolate_price)\n    total_chocolates = dark_chocolates + milk_chocolates + strawberry_chocolates\n\n    average_cost = total_cost / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n    days_needed = (total_sets_needed / sets_made_in_5_days) * 5\n    return days_needed\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n    boys_school_lunch = boys - boys_packed_lunch - boys_home_lunch\n    girls_home_lunch = students_home_lunch - boys_home_lunch\n    girls_packed_lunch = girls - girls_school_lunch - girls_home_lunch\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n    \n    return total_packed_lunch\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return len(range(12, 100, 12))\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 10*(x+1) - 5*(x+1) - 28 - 2\n\n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time taken to pass the tree in seconds\n\n    length_of_train = speed * time  # distance formula: distance = speed * time\n    \n    return length_of_train\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n\n    friends_count = 6\n\n    pears_per_friend = total_pears // friends_count\n    strawberries_per_friend = total_strawberries // friends_count\n    chocolates_per_friend = total_chocolates // friends_count\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the number of days the wife will take to finish drinking\n    # the orange juice on her own.\n\n    # The man finishes 1/15 of the orange juice per day.\n    # Together, they finish 1/12 of the orange juice per day.\n\n    # The wife's daily rate of drinking orange juice is:\n    # 1/x (where x is the number of days the wife would take).\n\n    # According to the problem statement:\n    # The man's daily rate + the wife's daily rate = Together daily rate\n    # 1/15 + 1/x = 1/12\n    # Solving for x gives us the number of days the wife would take.\n\n    # Rearrange the equation to solve for x:\n    # 1/x = 1/12 - 1/15\n    # 1/x = (15 - 12) / (12 * 15)\n    # 1/x = 3 / (12 * 15)\n    # x = (12 * 15) / 3\n    x = (12 * 15) // 3\n\n    return x\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    books_to_pay_for = 5 // 3 * 2 + 5 % 3  # for every 3 books, 2 are paid for, plus any remainder\n    total_cost = books_to_pay_for * price_per_book\n    return total_cost\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_number = symbols('sam_number')\n\n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n\n    solution = solve(equation, sam_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # Below sea level\n    mount_fuji_tip = 3776  # Above sea level\n\n    distance = mount_fuji_tip - turpan_depression_base  # Since turpan is below, subtract the negative number\n\n    return distance\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for women, men, children, and total people\n    women, men, children, total = symbols('women men children total')\n\n    # Set up the equation based on the given information\n    equation1 = Eq(women, 2/5 * total)\n    equation2 = Eq(men, 3 * children)\n    equation3 = Eq(women, children + 190)\n    \n    # Since women are 2/5 of the total, the remaining 3/5 must be men and children\n    equation4 = Eq(men + children, 3/5 * total)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (women, men, children, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    total_pencils = total_pupils * 35\n    boys_avg = 20\n    girls_avg = 60\n\n    # Let the number of boys be b and girls be g\n    # We know that b + g = total_pupils and\n    # boys_avg * b + girls_avg * g = total_pencils\n\n    # Solving the two linear equations to find the number of boys b\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')\n    equation1 = Eq(b + g, total_pupils)\n    equation2 = Eq(boys_avg * b + girls_avg * g, total_pencils)\n\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = sum(int('1' * i) for i in range(1, 51))\n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the cost of an apple and banana\n    a, b = symbols('a b')\n    \n    # Create two equations based on the information given\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n    equation2 = Eq(a, b)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Find out how many bananas Einstein can buy with the same amount of money\n    # used to buy either 6 apples and 7 bananas or 8 apples and 4 bananas\n    num_bananas = (6 + 7) / solutions[b]\n    \n    return int(num_bananas)\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from math import comb\n\ndef solution():\n    count = 0\n    total_envelopes = 15\n    # Iterate through the number of envelopes for each mailbox within the constraints\n    for A in range(2, total_envelopes-4-3+1):  # A has at least 2 envelopes\n        for B in range(4, total_envelopes-3-A+1):  # B has at least 4 envelopes\n            for C in range(3, total_envelopes-A-B+1):  # C has at least 3 envelopes\n                D = total_envelopes - A - B - C\n                # Since all constraints are met if we reach this point, we count that combination\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # Let's denote the dividend as x and the divisor without the decimal point as 211\n    # Leo's incorrect division result is x / 211\n    # The true result should be x / 2.11\n    # According to the question, the true result is 98.01 more than the incorrect result\n    # So, we can write the equation as: x / 2.11 - x / 211 = 98.01\n    # Solving for x, we get: x = 98.01 * 2.11 * 211\n    \n    incorrect_divisor = 211\n    correct_divisor = 2.11\n    difference = 98.01\n\n    x = difference * correct_divisor * incorrect_divisor\n    true_result = x / correct_divisor\n\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    both_competitors = math_competitors + art_competitors - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be the initial amount of money John and Choon Mui both had\n    j = symbols('j')\n\n    # John spent $30\n    john_left = j - 30\n\n    # Choon Mui spent $150\n    choon_mui_left = j - 150\n\n    # John had four times as much as Choon Mui after spending\n    equation = Eq(john_left, 4 * choon_mui_left)\n\n    # Solve for the initial amount of money\n    solution = solve(equation, j)\n\n    # Calculate how much money John had left\n    john_money_left = solution[0] - 30\n    \n    return john_money_left\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_time = (remaining_eggs // 2) - 4\n    remaining_after_first_sale = remaining_eggs + sold_second_time\n    sold_first_time = (remaining_after_first_sale // 2) + 5\n    initial_eggs = remaining_after_first_sale + sold_first_time\n    return initial_eggs\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934  # 1 mile = 1.60934 kilometers\n    return kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10 / 100\n    increase_amount = original_amount * percentage_increase\n    new_amount = original_amount + increase_amount\n    return new_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1/20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of male and female visitors\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # Equation 1: The number of male visitors was 450 more than the female visitors on the first day\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    \n    # Equation 2: On the second day, the number of female visitors increased by 15%\n    # The number of male visitors decreased by 18%\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(female_first_day * 1.15 + male_first_day * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    # Calculate the number of derangements for 4 objects.\n    # This is a subfactorial problem and can be solved using !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n\n    from math import factorial\n\n    n = 4  # number of objects/people\n    return int(factorial(n) * sum((-1)**i / factorial(i) for i in range(n+1)))\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n    balloons_per_pupil = total_balloons // num_pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = distance_per_day - slide_per_night\n    day_count = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += distance_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n    \n    return day_count\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(95 / 100 * x - 2 / 5 * x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    number = -1  # Initialize number to an invalid solution\n    for i in range(100):  # Loop through numbers less than 100\n        if i % 7 == 2 and i % 13 == 2:  # Check the remainders\n            number = i  # Assign the number if conditions are met\n            break  # Break out of the loop as we found our answer\n    return number\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_weekly_pay = hourly_rate * 8 * 5\n    \n    remaining_debt = 700 - total_weekly_pay\n    \n    return remaining_debt\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n\n    difference = air_ticket - train_ticket\n\n    return difference\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    for A in range(10):\n        if (A + A) % 10 == A:\n            return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # 2 weeks\n    yahya_period = 10  # 10 days\n\n    # Find least common multiple to get the next occurrence\n    days_until_next_haircut = lcm(arjun_period, yahya_period)\n\n    return days_until_next_haircut\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    # Remaining distance for the sprint stage\n    distance3 = 800 - (distance1 + distance2)\n\n    # Calculating times for each stage in seconds\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    # Total time\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    length_of_highway = 42\n    distance_apart = 7\n    # Since trees are NOT planted at the two ends, we subtract twice the distance from the highway's length\n    effective_length = length_of_highway - 2 * distance_apart\n    # Number of trees is the number of intervals of 7 meters in the effective length\n    num_trees = effective_length // distance_apart  \n\n    return num_trees\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):  # Possible digits for the first square (0-9)\n        for digit2 in range(10):  # Possible digits for the second square (0-9)\n            number = int(f\"2{digit1}9{digit2}\")\n            if number % 3 == 0 and number % 5 == 0:  # Check divisibility by 3 and 5\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    final_stamps = 34\n    stamps_after_sending = final_stamps + 2\n    stamps_after_buying = stamps_after_sending - 11\n    initial_stamps = stamps_after_buying + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note_value = 50\n    shoes_cost = 30\n    lucas_loss = fake_note_value + shoes_cost\n\n    return lucas_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    \n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    ans = num_terms / 2 * (first_term + last_term)\n    return int(ans)\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    num_str = ''.join(str(i) for i in range(1, 31))\n    min_num = int('1' + '0' * (len(num_str) - 46))\n    return min_num\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B and C as one single unit since they are always together.\n    # Now we have 8 units to arrange (7 individual students and 1 group of ABC).\n    units_to_arrange = 8\n\n    # There are factorial(8) ways to arrange the 8 units.\n    unit_arrangements = factorial(units_to_arrange)\n\n    # Within the ABC group, there are factorial(3) ways to arrange A, B, and C.\n    abc_arrangements = factorial(3)\n\n    # The total number of ways is the product of unit arrangements and abc arrangements.\n    total_ways = unit_arrangements * abc_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_pick = 4\n    ways_to_pick = comb(total_students, students_to_pick)\n    return ways_to_pick\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    \n    total_marbles = james + linda + ben\n    \n    return total_marbles\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, one must consider the worst-case scenario:\n    # taking out all blue balls without taking a white ball.\n    # Since there are 6 blue balls, after taking all of them out,\n    # the next ball taken out must be a white ball.\n    # Therefore, you need to take out 6 + 1 = 7 balls to guarantee a white ball.\n    return 6 + 1\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_value\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20\n    overlap_length = 3\n    num_rulers = 3\n    \n    total_length = (num_rulers * short_ruler_length) - (overlap_length * (num_rulers - 1))\n    \n    return total_length\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used = 721\n    new_cups = 0\n    while total_used >= 7:\n        new_from_used = total_used // 7\n        new_cups += new_from_used\n        total_used = new_from_used + total_used % 7\n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    return 2000 - 222\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate distance covered when jogging\n    jogging_time_hours = 1  # from 6:30 AM to 7:30 AM\n    jogging_speed_mph = 6\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Calculate distance covered when walking\n    walking_time_hours = 2  # from 7:30 AM to 9:30 AM\n    walking_speed_mph = 5\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Calculate the total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Number of pages used in the first 3 days\n    first_3_days_pages = 14 * 3\n    # Number of pages used in the following 2 days\n    next_2_days_pages = 9 * 2\n    # Number of pages used on the sixth day\n    sixth_day_pages = 12\n    \n    # Total number of pages used in 6 days\n    total_pages = first_3_days_pages + next_2_days_pages + sixth_day_pages\n    \n    # Average number of pages used per day\n    average_pages_per_day = total_pages / 6\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    common_gcd = gcd(gcd(class_A, class_B), class_C)\n\n    return common_gcd\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert plot length from meters to cm\n    cauliflower_spacing = 15  # spacing between cauliflowers in cm\n    first_cauliflower_offset = 20  # first cauliflower offset from start in cm\n    cauliflower_width = 45  # width of a cauliflower in cm\n\n    # Calculate the total space each cauliflower occupies (including the space between them)\n    total_space_per_cauliflower = cauliflower_spacing + cauliflower_width\n\n    # Calculate the usable length of the plot by subtracting the space before the first cauliflower\n    usable_length = plot_length_cm - first_cauliflower_offset\n\n    # The number of cauliflowers is the usable length divided by the total space per cauliflower\n    num_cauliflowers = usable_length // total_space_per_cauliflower\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # in meters per second\n    distance = 1.5 * 10**3  # converting kilometers to meters\n    time = distance / speed_of_sound  # time = distance / speed\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    num = 72\n    factors_count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of members\n    badminton, bowling = symbols('badminton bowling')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(badminton, 3 * bowling)\n    equation2 = Eq(badminton - 36, bowling - 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (badminton, bowling))\n    \n    # Get the number of members after the members left\n    badminton_end = solutions[badminton] - 36\n    bowling_end = solutions[bowling] - 4\n    \n    return badminton_end, bowling_end\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n    \n    # Calculate the number of cards\n    number_of_cards = total_value // average_value\n\n    # Since there's a difference of 6 between the greatest and the smallest\n    # and the average value of all the numbers is 126, \n    # we can infer that the numbers are evenly spread around the average.\n    # Thus the numbers are [average - 3*step, average - step, average + step, average + 3*step]\n    # where step is the distance between consecutive numbers (which is half the difference).\n    step = difference // 2\n    \n    # The smallest number is then average_value - 3*step\n    smallest_number = average_value - 3 * step\n\n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Equation 1: Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Equation 2: 10 years ago, Vivien was 1/4 as old as Wendy\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_future_age = solutions[wendy] + 5\n    \n    return wendy_future_age\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        return count\n    \n    def prime_factors_product_end_zeros(start, end, prime_factor):\n        count = 0\n        for number in range(start, end + 1):\n            count += count_factors(number, prime_factor)\n        return count\n\n    count_2s = prime_factors_product_end_zeros(301, 999, 2)\n    count_5s = prime_factors_product_end_zeros(301, 999, 5)\n    return min(count_2s, count_5s)\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    return int(sum(1/i for i in range(10, 20)))\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and (number - 1) % 13 == 0:\n            return number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    girls, boys_swim = symbols('girls boys_swim')\n    total_students = 1690\n\n    # boys = girls + 90\n    boys = girls + 90\n\n    # girls_swim / girls_not_swim = 31 / 49\n    # Let's take x as the common multiplier for the girls ratio\n    girls_swim = 31 * girls / (31 + 49)\n    girls_not_swim = 49 * girls / (31 + 49)\n\n    # boys_swim / boys_not_swim = (boys_not_swim - 120) / boys_not_swim\n    # Here boys_not_swim is (boys - boys_swim), and boys_swim is (boys_not_swim - 120)\n    boys_not_swim = boys_swim + 120\n\n    # The total swimmers and non-swimmers for both boys and girls should add up to total_students\n    equation1 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, total_students)\n\n    # Use the equations derived from the problem to create a second equation to solve the system\n    equation2 = Eq(girls + boys, total_students)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (girls, boys_swim))\n\n    # Calculate the total number of pupils who cannot swim\n    total_not_swim = girls_not_swim.subs(girls, solutions[girls]) + boys_not_swim.subs(boys_swim, solutions[boys_swim])\n\n    return int(total_not_swim)\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speed of the rabbit and turtle\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    \n    # The rabbit sleeps after 10 minutes\n    rabbit_runs_for = 10  # min\n\n    # Distance covered by the rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * rabbit_runs_for\n\n    # Time when rabbit is sleeping\n    rabbit_sleep_time = 215  # min\n\n    # Total time for the turtle to finish the race\n    race_distance = 6990  # m\n    turtle_total_time = race_distance / turtle_speed  # min\n\n    # Remaining race distance for rabbit after waking up\n    remaining_distance_for_rabbit = race_distance - rabbit_distance_before_sleep\n\n    # Remaining time for rabbit to finish the race after waking up\n    rabbit_time_after_sleep = remaining_distance_for_rabbit / rabbit_speed\n\n    # Total time for rabbit to reach the finish line\n    rabbit_total_time = rabbit_runs_for + rabbit_sleep_time + rabbit_time_after_sleep\n\n    # Finding out who reached the finish line first\n    if rabbit_total_time < turtle_total_time:\n        winner = \"rabbit\"\n        # Distance the turtle has run when the rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_total_time * turtle_speed\n        distance_between_them = race_distance - turtle_distance_when_rabbit_finishes\n    else:\n        winner = \"turtle\"\n        # Distance the rabbit has run when the turtle finishes\n        rabbit_distance_when_turtle_finishes = rabbit_distance_before_sleep + (turtle_total_time - rabbit_runs_for - rabbit_sleep_time) * rabbit_speed\n        distance_between_them = race_distance - rabbit_distance_when_turtle_finishes\n\n    return winner, distance_between_them\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_only = 20 - 15\n    math_only = 35 - 15\n    both = 15\n    total_students = english_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    money_2020 = 484\n    # Each year there is a 10% increase, so the multiplier for each year is 1 + 10/100 = 1.1\n    multiplier = 1.1\n\n    # To find the money Euan received in 2018, we need to divide the money he received in 2020 by the multiplier twice,\n    # because the pocket money increased over two years (2018 to 2019, 2019 to 2020).\n    money_2018 = money_2020 / (multiplier ** 2)\n    \n    return money_2018\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt - boris, 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(7)  # Total ways without restrictions\n    together_ways = factorial(5) * factorial(3)  # Ways in which 3 specific people stand together\n    \n    ans = total_ways - together_ways\n    return ans\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    difference = (fourth_term - first_term) // (4 - 1)  # common difference\n    total_rows = 25\n\n    # Sum of arithmetic series formula: n/2 * (2a + (n-1)d)\n    total_athletes = total_rows * (2 * first_term + (total_rows - 1) * difference) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_zeros(n, base):\n        p = base\n        count = 0\n        while p <= n:\n            count += n // p\n            p *= base\n        return count\n\n    num_zeros_2 = count_zeros(789, 2)\n    num_zeros_5 = count_zeros(789, 5)\n    \n    ans = min(num_zeros_2, num_zeros_5)\n    return ans\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    total_participants = 100\n    min_participants_in_max_school = 4\n\n    max_schools = total_participants // min_participants_in_max_school\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    average_A = 76\n    average_B = 67\n    average_combined = 70\n    students_A = 20\n\n    # Total score for team A\n    total_score_A = average_A * students_A\n\n    # Let's denote the number of students in team B as students_B\n    # We set up the equation for the combined average\n    # (total_score_A + total_score_B) / (students_A + students_B) = average_combined\n    # total_score_B = average_B * students_B\n    # (total_score_A + average_B * students_B) = average_combined * (students_A + students_B)\n    # Rearrange the equation to solve for students_B:\n    # students_B = (total_score_A - average_combined * students_A) / (average_combined - average_B)\n\n    students_B = (total_score_A - average_combined * students_A) / (average_combined - average_B)\n\n    return int(students_B)\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perm = permutations(digits, 6)\n    min_product = float('inf')\n    \n    for p in perm:\n        num1 = p[0]*100 + p[1]*10 + p[2]\n        num2 = p[3]*100 + p[4]*10 + p[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n            \n    return min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps_per_roll = 6\n    target_position = 25\n    min_rolls = (target_position - 1) // min_steps_per_roll + 1\n    \n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    difference = -50\n    n = (19 - first_term) // difference + 1  # Calculate number of terms\n    \n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    ans = n * (first_term + 19) // 2\n    return ans\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):  # The tens digit must be in range 1 to 9 for a 2-digit number\n        ones_digit = 15 - tens_digit  # Sum of digits is 15\n        if ones_digit < 10:  # Since ones_digit must be a single digit\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    max_product = 0\n    min_product = float('inf')\n    \n    for perm in permutations(range(1, 10), 7):\n        ABCD = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        EFG = perm[4] * 100 + perm[5] * 10 + perm[6]\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n\n    return max_product - min_product\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    max_prime = 0\n    # Search for prime numbers less than 30, starting from 29 and going backwards\n    for num in range(29, 1, -1):\n        if isprime(num):\n            max_prime = num\n            break\n    return max_prime\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    climb_per_hour = 40\n    slip_per_rest = 10\n    net_distance_per_hour = climb_per_hour - slip_per_rest\n    \n    hours = 0\n    distance_covered = 0\n    \n    while distance_covered < total_distance:\n        hours += 1\n        distance_covered += climb_per_hour\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slip_per_rest\n    \n    return hours\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    cabbage_price_each = 0.96\n    cabbages_bought = 8\n    lettuces_bought = 6\n\n    total_cost = cabbage_price_each * cabbages_bought\n    lettuce_price_each = total_cost / lettuces_bought\n\n    return lettuce_price_each\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    initial_number_of_plants = 11\n    remaining_plants_after_removal = 11 - 8\n    \n    # Calculate the initial interval between the plants\n    # There are (initial_number_of_plants - 1) intervals between the plants\n    initial_interval = total_distance / (initial_number_of_plants - 1)\n    \n    # The new interval will be increased by the (initial_number_of_plants - remaining_plants_after_removal) times the old one\n    new_interval = initial_interval * (initial_number_of_plants - remaining_plants_after_removal)\n    \n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # Convert start time to minutes past midnight (13:52)\n    end_time = 14 * 60 + 5     # Convert end time to minutes past midnight (14:05)\n    \n    duration = end_time - start_time  # Calculate duration of the phone call in minutes\n    cost_per_minute = 14   # Cost per minute in pence\n    \n    total_cost = duration * cost_per_minute  # Calculate total cost of the phone call\n    \n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "from sympy import divisors\n\ndef solution():\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Number of typists initially\n    initial_typists = 5\n    # Number of words initially typed\n    initial_words = 6000\n    # Time taken initially (in minutes)\n    initial_time = 20\n    # Words to be typed now\n    new_words = 9000\n    # Number of typists fell sick\n    sick_typists = 2\n    # Remaining typists\n    remaining_typists = initial_typists - sick_typists\n    \n    # Words typed per minute by 1 typist\n    words_per_minute_per_typist = initial_words / (initial_typists * initial_time)\n\n    # New time required to type new_words (in minutes) by remaining typists\n    new_time = new_words / (words_per_minute_per_typist * remaining_typists)\n    \n    # Check if the declared time is correct or not\n    declared_time = 45\n    is_correct = new_time == declared_time\n    \n    return new_time if not is_correct else \"Correct, 45 minutes\"\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percentage = 40 / 100\n    number = 320\n    ans = percentage * number\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = set(str(i))\n        if digits.issubset({'2', '3'}) and '2' in digits and '3' in digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17 Oct 2023', '%d %b %Y')\n    end_date = datetime.strptime('20 Dec 2023', '%d %b %Y')\n    current_date = start_date\n\n    sundays_count = 0\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    \n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n    # There are 5 people and 5 unique skiboards. Each person can receive a unique skiboard\n    # This is a permutation problem where we calculate the number of ways to assign \n    # 5 unique skiboards to 5 people.\n    ans = factorial(5)  # 5! = 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of strawberry tarts, hence 2x is the number of apple tarts.\n    # a is the cost of one apple tart and (a+0.4) is the cost of one strawberry tart.\n    x, a = symbols('x a')\n\n    # Equation 1: Cost of strawberry tarts + Cost of apple tarts = Total cost\n    # x*(a+0.4) + 2x*a = 40\n    equation1 = Eq(x * (a + 0.4) + 2 * x * a, 40)\n\n    # Equation 2: A strawberry tart costs $0.40 more than an apple tart\n    # Since the lady spent equal amounts on each type, we have: \n    # x*(a+0.4) = 2x*a\n    equation2 = Eq(x * (a + 0.4), 2 * x * a)\n\n    # Solve the equations for x and a\n    solutions = solve((equation1, equation2), (x, a))\n\n    # Calculate the total number of tarts\n    total_tarts = solutions[x] + 2 * solutions[x]\n\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # The first traffic light changes lights every 0.5 minute (30 seconds)\n    t1 = 0.5\n    # The second traffic light changes lights every 0.75 minute (45 seconds)\n    t2 = 0.75\n    # All three traffic lights turn green every 9 minutes, so we find the LCM of the first two\n    lcm_two_lights = lcm(int(t1 * 60), int(t2 * 60))\n\n    # Now we look for the smallest time for the third light.\n    # It must be at least 30 seconds or longer and must fit into the 9-minute cycle.\n    t3 = 30\n    while lcm_two_lights % t3 != 0 or (lcm_two_lights // t3) * t3 / 60 > 9:\n        t3 += 1\n\n    return t3 / 60  # convert seconds to minutes for result\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres = metres * 1000\n    return millimetres\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n    \n    # On the first day, 20% of the pieces are fitted\n    day1_fitted = 0.20 * total_pieces\n    \n    # On the second day, 60 more pieces are fitted\n    day2_fitted = day1_fitted + 60\n\n    # The ratio of the number of fitted pieces to the number of unfitted pieces becomes 2:5\n    fitted = 2 / (2 + 5) * total_pieces\n    unfitted = 5 / (2 + 5) * total_pieces\n\n    # Create an equation based on the above information\n    equation = Eq(day2_fitted, fitted)\n\n    # Solve for the total number of pieces\n    solution = solve(equation, total_pieces)\n\n    return solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    tony_position_from_left = total_children - tony_position_from_right + 1\n    children_between_henry_and_tony = abs(tony_position_from_left - henry_position_from_left) - 1\n    \n    return children_between_henry_and_tony + 2  # Include Henry and Tony\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    amount_paid = initial_loan * 0.30\n    amount_owed = initial_loan - amount_paid\n    \n    return amount_owed\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    count_multiples_of_10 = 0\n    for i in range(1, 101):\n        if i % 10 == 0:\n            count_multiples_of_10 += 1\n    not_multiples_of_10 = 100 - count_multiples_of_10\n    percentage = (not_multiples_of_10 / 100) * 100\n    return percentage\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # We have already known the legs count of cats, dogs, and the rabbit:\n    # 2 cats with 4 legs each, 2 dogs with 4 legs each, 1 rabbit with 4 legs.\n    legs_of_cats_dogs_rabbit = (2 * 4) + (2 * 4) + (1 * 4)  # 20 legs\n\n    # Now, we will find out how many legs are left for birds.\n    legs_left_for_birds = 28 - legs_of_cats_dogs_rabbit  # 8 legs\n\n    # Since each bird has 2 legs, the number of birds can be calculated as follows:\n    number_of_birds = legs_left_for_birds // 2  # 4 birds\n\n    return number_of_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    speed_jack = 15  # Jack's speed in km per hour\n    speed_rose = 10  # Rose's speed in km per hour\n    meeting_time = 10  # The time after which they meet in hours\n\n    distance = (speed_jack + speed_rose) * meeting_time\n\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_original = 40\n    melvin_gained_first = (5/8) * melvin_original\n    melvin_after_first_gain = melvin_original + melvin_gained_first\n    cards_lost_each = (1/4) * melvin_original\n    melvin_after_losses = melvin_after_first_gain - cards_lost_each\n    nelson_after_losses = melvin_gained_first - cards_lost_each\n    oliver_gained = 2 * cards_lost_each\n    melvin_gained_final = (1/8) * melvin_original\n    melvin_final = melvin_after_losses + melvin_gained_final\n    nelson_final = nelson_after_losses - melvin_gained_final\n    oliver_final = oliver_gained\n\n    # After the final round, all have the same number of cards\n    # Therefore, we can add the original number of cards Melvin had with \n    # the cards Nelson started with, to get the total original number of cards\n\n    nelson_original = melvin_final - melvin_gained_first + cards_lost_each + melvin_gained_final\n    total_cards = melvin_original + nelson_original + oliver_final\n\n    return total_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorize all the numbers\n    factors = {number: factorint(number) for number in [6, 12, 35, 175, 245, 300]}\n    \n    # Function to calculate the product of prime factor exponents for a selection of numbers\n    def product_of_factors(selected_numbers):\n        product_factors = {}\n        for number in selected_numbers:\n            for prime, exponent in factors[number].items():\n                if prime in product_factors:\n                    product_factors[prime] += exponent\n                else:\n                    product_factors[prime] = exponent\n        return product_factors\n\n    # Iterate through all combinations to find the matching products\n    cards = [6, 12, 35, 175, 245, 300]\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            # Get product of factors for Candy's choice\n            candy_factors = product_of_factors([cards[i], cards[j]])\n            for k in range(len(cards)):\n                if k == i or k == j:\n                    continue\n                for l in range(k+1, len(cards)):\n                    if l == i or l == j:\n                        continue\n                    for m in range(l+1, len(cards)):\n                        if m == i or m == j:\n                            continue\n                        # Get product of factors for Candice's choice\n                        candice_factors = product_of_factors([cards[k], cards[l], cards[m]])\n                        # Compare the product of factors\n                        if candy_factors == candice_factors:\n                            # Get the number not picked\n                            not_picked = set(cards) - {cards[i], cards[j], cards[k], cards[l], cards[m]}\n                            return not_picked.pop()\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25):\n        if 24 % i == 0 and i % 2 != 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let polly_age be the age of Polly when the sum of her children's ages equals her age.\n    # At this point, her first child's age is polly_age - 20,\n    # her second child's age is polly_age - 22, and\n    # her third child's age is polly_age - 24.\n    # The sum of the children's ages is (polly_age - 20) + (polly_age - 22) + (polly_age - 24).\n    # This must be equal to polly_age.\n    # Hence, polly_age = (polly_age - 20) + (polly_age - 22) + (polly_age - 24)\n    # Simplifying the equation: polly_age = 3 * polly_age - 66\n    # Therefore, 2 * polly_age = 66\n    polly_age = 66 // 2\n    return polly_age\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n\n    num_terms = (last_term - first_term) // common_difference + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    # Using the law of addition and multiplication to compute\n    first_eq = (2 * 5) + (1 * 5)\n    second_eq = (2 + 1) * 5\n    \n    ans = first_eq == second_eq\n    \n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20  # presents weight\n    multiple = 5  # the suitcase weighed 5 times as much as before\n\n    # Let x be the weight of the suitcase\n    # The total weight of the suitcase with presents is x + 20\n    # This is 5 times the original weight of the suitcase, so 5 * x\n    # Therefore, x + 20 = 5 * x\n\n    # Solve for x\n    x = total_weight / (multiple - 1)\n\n    return x\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    # max possible big boxes is 50 // 6\n    # start with the maximum number of big boxes and try to fill the rest with small boxes\n    for big_boxes in range(50 // 6, -1, -1):\n        remaining_cakes = 50 - (big_boxes * 6)\n        # check if the remaining can be filled by small boxes\n        if remaining_cakes % 4 == 0:\n            small_boxes = remaining_cakes // 4\n            # check if the total number of boxes is less than 10\n            if small_boxes + big_boxes < 10:\n                return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # If four years ago the combined age was 10, then currently the combined age is 10 + 4 * 2 = 18\n    current_combined_age = 10 + 4 * 2\n    \n    # In two years, the combined age would be the current combined age plus 2 * 2 = 4 years\n    future_combined_age = current_combined_age + 2 * 2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # x + y = 59 (Sum of the two numbers is 59)\n    # y - x = 39 (The difference between two numbers is 39)\n    # Adding the two equations gives us: 2y = 98\n    # Dividing both sides by 2 gives us: y = 49\n    # Now we can find x by rearranging x + y = 59: x = 59 - y\n    y = 98 / 2\n    x = 59 - y\n    return int(x)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers = x - 12 + y\n    return passengers\n\n# Replace x and y with the actual numbers of passengers in the beginning and who get on the subway\n# Example values for demonstration; the actual values would come from the specific problem context\nx = 0  # Placeholder value, replace with actual starting passengers\ny = 0  # Placeholder value, replace with actual passengers getting on\n\nans = solution(x, y)"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    m = symbols('m')\n    \n    # Equation given: 14m = 8 * (1m) - 3\n    # Translates to: 10*m + 4*m = 8*m + 8 - 3\n    equation = Eq(10*m + 4*m, 8*m + 8 - 3)\n    \n    # Solve the equation\n    solved_m = solve(equation, m)\n    \n    # Return the solution for m\n    return solved_m[0]\n\n# Call the solution function to find m\nans = solution()"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percent_value = 15 \n    amount = 340\n    \n    result = (percent_value / 100) * amount\n    return result\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Prime factorization of numbers\n    AB_factors = 30 # Factors are 2, 3, 5\n    BC_factors = 35 # Factors are 5, 7\n    CA_factors = 42 # Factors are 2, 3, 7\n\n    # Find the common factor for each pair to determine A, B, and C\n    A = (AB_factors * CA_factors) // (BC_factors)  # A is common in AB and CA\n    B = (AB_factors * BC_factors) // (CA_factors)  # B is common in AB and BC\n    C = (BC_factors * CA_factors) // (AB_factors)  # C is common in BC and CA\n\n    # Since A*B = AB_factors and B*C = BC_factors and C*A = CA_factors,\n    # We have A^2 * B^2 * C^2 = AB_factors * BC_factors * CA_factors\n    # Therefore, (A * B * C) must be the square root of AB_factors * BC_factors * CA_factors\n    ABC = (AB_factors * BC_factors * CA_factors) ** 0.5\n    A, B, C = A // ABC, B // ABC, C // ABC\n    \n    # The sum of the numbers A, B, and C\n    ans = A + B + C\n    return int(ans)\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the years in the future\n    years = symbols('years')\n    \n    # Justin's age in the future will be his current age plus the years in the future\n    justin_future = 8 + years\n    \n    # Justin's mother's age in the future will be her current age plus the years in the future\n    mother_future = 32 + years\n    \n    # Create the equation where mother is three times older than Justin\n    equation = Eq(mother_future, 3 * justin_future)\n    \n    # Solve the equation\n    solution = solve(equation, years)\n    \n    # Return the solution for the number of years\n    return solution[0]\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cora, qingle = symbols('cora qingle')\n    # After giving away 8 sweets, Cora has 'cora - 8' and Qingle has 'qingle + 8'\n    # Qingle will have 4 more sweets than Cora: (qingle + 8) = (cora - 8) + 4\n    equation = Eq(qingle + 8, cora - 4)\n    # Solve for the amount of sweets Qingle has in terms of Cora's sweets\n    qingle_sweets = solve(equation, qingle)[0]\n    # Calculate the difference in the number of sweets they have at first\n    difference = cora - qingle_sweets\n    \n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n    equation = Eq((100 * a + 10 * b + c) * (a + b + c), 1926)\n\n    solutions = solve(equation, (a, b, c))\n    for solution in solutions:\n        if all(0 <= digit <= 9 for digit in solution):\n            return sum(solution)\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_add = 20\n    naida_subtract = 1\n    while warren_add > 0:\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtract\n        warren_add -= 1\n        naida_subtract += 1\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n\n    hours_to_fill = 1 / total_rate\n    return hours_to_fill\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, b = 0\n    # We can then use the point (4, 8) to find the slope m\n    x1, y1 = 0, 0  # origin\n    x2, y2 = 4, 8  # given point\n\n    # Calculate the slope m\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since the line passes through the origin, the y-intercept b is 0, thus the equation is y = mx\n    return f\"y={m}x\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, eric = symbols('jane eric')\n    \n    equation1 = Eq(jane, (5/7) * eric)\n    equation2 = Eq((jane + 6) / (eric - 6), 11/13)\n    \n    solutions = solve((equation1, equation2), (jane, eric))\n    \n    total_seashells = solutions[jane] + solutions[eric]\n    \n    return total_seashells\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count_0s = 0\n    while product % 10 == 0:\n        count_0s += 1\n        product //= 10\n    return count_0s\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8] \n    perm = permutations(digits)\n\n    even_numbers = [int(''.join(map(str, p))) for p in perm if p[-1] % 2 == 0]\n    \n    return min(even_numbers)\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_violin = piano_pupils // 4\n\n    both_instruments = piano_violin\n    neither = total_pupils - (piano_pupils + violin_pupils - both_instruments)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n    \n    # The hypotenuse of the isosceles right triangle can be calculated using Pythagoras theorem.\n    # Given the waist lengths are 2, hypotenuse will be 2 times sqrt(2).\n    hypotenuse = 2 * sp.sqrt(2)\n    \n    # The area of the full triangle\n    full_triangle_area = (2 * 2) / 2\n\n    # The quarter circle's radius is 1, and the center is at the right angle vertex.\n    quarter_circle_area = (sp.pi * (1**2)) / 4  \n\n    # The desired probability is the ratio of the quarter circle's area to the full triangle's area.\n    probability = quarter_circle_area / full_triangle_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == 4 * D:\n                B = A - 1\n                for C in range(0, 10):\n                    if len(set([A, B, C, D])) == 4:  # Ensure all digits are distinct\n                        ABCD = A * 1000 + B * 100 + C * 10 + D\n                        DCBA = D * 1000 + C * 100 + B * 10 + A\n                        if ABCD * 4 == DCBA:\n                            return ABCD\n                        \nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    A_in_Maths = 10\n    A_in_English = 15\n    A_in_Both = 2\n\n    A_in_Either = A_in_Maths + A_in_English - A_in_Both\n\n    return A_in_Either\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    # Let's denote the initial number of passengers as x.\n    # After the first stop, two fifths of the passengers got off, so the remaining passengers are 3/5 of x.\n    # At the next stop, one third of the remaining passengers got off, leaving 2/3 of (3/5 of x).\n    # Finally, we are told that this is equal to 22.\n    # Therefore, we have 2/3 * 3/5 * x = 22\n    # Solving for x gives us the initial number of passengers.\n    x = 22 * (5/3) * (5/2)  # Multiplying by the inverse to find the initial number\n    return int(x)\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 3 + 10, 25)\n    initial_number = solve(equation, x)\n\n    return initial_number[0]\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    numbers = range(1, 9)\n    return sum(numbers)\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Hannah left school at 15:22\n    leave_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    \n    # Caught the bus at 16:01\n    caught_bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    \n    # Time spent walking to the bus stop\n    walking_to_bus = (caught_bus_time - leave_school_time).total_seconds() / 60\n    \n    # The bus trip took 18 minutes, so arrival at bus drop off point\n    bus_trip_duration = timedelta(minutes=18)\n    drop_off_time = caught_bus_time + bus_trip_duration\n    \n    # Eventually getting in at 16:35\n    get_home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Time spent walking from the bus drop off point to home\n    walking_from_bus = (get_home_time - drop_off_time).total_seconds() / 60\n    \n    # Total walking time\n    total_walking_time = walking_to_bus + walking_from_bus\n    \n    return total_walking_time\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_numbers  # Total sum of all numbers\n    sum_of_known = sum(numbers)  # Sum of known numbers\n    a_value = total_sum - sum_of_known  # Value of 'a' is the remaining part to reach the total sum\n\n    return a_value\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    remaining = total - 30000 - 452\n    missing_number = remaining // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 20 / 100 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    # Since 1 meter = 100 cm, we'll divide by 100 to convert cm to meters\n    length_per_piece_m = (total_length_cm / 2) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_row = 6 + 1 + 7 # pupils to the left, Victoria, pupils to the right\n    rows_of_pupils = 1 + 1 + 8 # row in front, Victoria's row, rows behind\n\n    total_pupils = pupils_in_row * rows_of_pupils\n\n    return total_pupils\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # There are three colors so regardless of the combination, she will\n    # have at least one pair after taking out 4 socks at most (worst case: all different colors first).\n    # This is an application of the Pigeonhole Principle.\n\n    # For the first color (suppose white), Lina takes out 1 sock\n    # For the second color (suppose grey), Lina takes out another sock\n    # For the third color (suppose black), Lina takes out yet another sock\n    # Now, for the fourth sock that Lina takes out, it must be one of the previously chosen colors,\n    # ensuring Lina a pair of socks of the same color.\n\n    return 4  # This is the minimum number of socks to ensure at least one pair.\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal_amount = 400000\n    interest_rate = 0.012\n    time_period = 1\n\n    interest = principal_amount * interest_rate * time_period\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 3 * 75  # The total marks for 3 tests if the average is 75\n    marks_in_two_tests = 172          # The total marks he scored in two of the tests\n\n    # The marks scored in the remaining test is the difference between the total marks for \n    # 3 tests and the marks scored in two tests\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests  \n\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the number to find\n    x = symbols('x')\n\n    # Create the equation: ((x + 3) / 4) * 9 = 81\n    equation = Eq(((x + 3) / 4) * 9, 81)\n\n    # Solve for 'x'\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator = sum(1/(i*(20-i+1)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = remaining_candy * (1/3)\n    candy_now = remaining_candy - candy_to_brother\n    return int(candy_now)\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Distance covered from 8.00 to 8.30\n    distance_covered = 6300 - 1800  # in meters\n    \n    # Time spent to cover that distance\n    time_spent = timedelta(minutes=30)  # 30 minutes\n    \n    # Calculate the speed in meters per minute\n    speed = distance_covered / time_spent.total_seconds() * 60\n    \n    # Remaining distance to cover\n    remaining_distance = 1800  # in meters\n    \n    # Time required to cover the remaining_distance\n    time_to_reach = remaining_distance / speed\n    \n    # Time when Peter started jogging (8.00 am)\n    start_time = datetime.strptime(\"08:00\", \"%H:%M\")\n    \n    # Time when Peter was 1800m away (8.30 am)\n    time_at_1800m = start_time + time_spent\n    \n    # Time when Peter will reach his friend's house\n    reach_time = time_at_1800m + timedelta(minutes=time_to_reach)\n    \n    # Format the result to return only the time\n    ans = reach_time.strftime(\"%H:%M\")\n    \n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    # Calculate the amount of sugar in Mr. Smith's drink\n    mr_smith_sugar = 300 * 0.50 + 600 * 0.20\n    # Total volume of Mr. Smith's drink\n    mr_smith_volume = 300 + 600\n    # Sugar concentration in Mr. Smith's drink\n    mr_smith_concentration = mr_smith_sugar / mr_smith_volume\n    \n    # Calculate the amount of sugar in Mrs. Smith's drink\n    # 700mL at 10% and 300mL at x%\n    mrs_smith_sugar = 700 * 0.10 + 300 * (x / 100)\n    # Total volume of Mrs. Smith's drink\n    mrs_smith_volume = 700 + 300\n    # Sugar concentration in Mrs. Smith's drink is the same as Mr. Smith's concentration\n    equation = Eq(mrs_smith_sugar / mrs_smith_volume, mr_smith_concentration)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    # Return x rounded to two decimal places\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_when_10 = 10\n    kenny, brother = symbols('kenny brother')\n    # Kenny is 2 years older than his younger brother\n    equation1 = Eq(kenny, brother + 2)\n    # When May is 10, the sum of Kenny's and his brother's age will be 3 times May's age\n    equation2 = Eq(kenny + brother, 3 * may_age_when_10)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (kenny, brother))\n\n    # May's age now is 7, we need to find out Kenny's current age\n    # If we find his age when May is 10, we subtract 3 to find his current age\n    kenny_current_age = solutions[kenny] - 3\n    \n    # The difference in age between Kenny and May this year\n    age_difference = kenny_current_age - 7\n    \n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let's define the prices of each muffin and donut\n    price_donut = 10 / 7\n    price_muffin = 6 / 3\n\n    # Now we know that: \n    # donuts = muffins + 54\n    # total_cost = (muffins * price_muffin) + ((muffins + 54) * price_donut) = 2 * (muffins * price_muffin)\n    # We can write the above equation and solve for muffins since we know the prices\n\n    muffins = symbols('muffins')\n\n    # Define the equation based on the logic above\n    equation = Eq((muffins + 54) * price_donut + muffins * price_muffin, 2 * muffins * price_muffin)\n\n    # Solve the equation for muffins\n    muffins_num = solve(equation, muffins)[0]\n\n    # Calculate the original total amount of money Amy had based on the muffins she bought\n    # and the fact that she spent half on donuts\n    total_money = 2 * (muffins_num * price_muffin)\n\n    return total_money\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10  # Renee's cost for 5 kg of sweets\n    selling_price_per_bag = 0.65  # Price at which Renee sells each 250 g bag\n    bag_weight = 0.25  # Weight of sweets in each bag in kg\n    total_weight = 5  # Total weight of sweets in kg\n\n    # Calculate the number of bags\n    num_bags = total_weight / bag_weight\n    \n    # Calculate the total selling price for all the bags\n    total_selling_price = num_bags * selling_price_per_bag\n    \n    # Calculate the profit\n    profit = total_selling_price - cost_price\n    \n    # Calculate the percentage profit\n    percentage_profit = (profit / cost_price) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n\n    # Minimum apples that can be given to each child\n    min_apples_per_child = 1\n\n    # Subtract the minimum apples for each child to find the remainder\n    remainder = total_apples - (min_apples_per_child * children)\n    \n    # The child with the most apples gets the remainder plus the minimum\n    max_apples_for_a_child = min_apples_per_child + remainder\n\n    return max_apples_for_a_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_per_gap = 30 / (9 - 4)  # Distance between two adjacent teeth\n    total_length_mm = (100 - 1) * distance_per_gap  # Length of comb in mm (99 gaps)\n    total_length_cm = total_length_mm / 10  # Convert length from mm to cm\n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    \n    # Mum's age on 1st December 1996\n    mum_age_1996 = 40\n    \n    # Calculate the difference in years between 1996 and 2008\n    year_difference = 2008 - 1996\n    \n    # Grandmother's age in 1996\n    grandmother_age_1996 = grandmother_age_2008 - year_difference\n    \n    # Mum's age when she was 25\n    mum_age_when_25 = 25\n    \n    # Calculate the difference in Mum's age between 25 and 1996\n    age_difference = mum_age_1996 - mum_age_when_25\n    \n    # Calculate Grandmother's age when Mum was 25\n    grandmother_age_when_mum_25 = grandmother_age_1996 - age_difference\n    \n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(5)  # Total ways for 5 people to line up\n    together_ways = 2 * factorial(4)  # Ways in which the two who refuse to stand next can stand together\n\n    ans = total_ways - together_ways\n    return ans\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = (2 / 3) * total_vegetables\n    tuesday_sales = (2 / 5) * (total_vegetables - monday_sales)\n    total_sales = monday_sales + tuesday_sales\n    return total_sales\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # In the worst case, we pick up all the balls except those that we want to have 16 and 13.\n    # We want to ensure we have 16 of one color and 13 of another.\n    # So we pick the balls in a way that we are left with fewer than 16 balls from each color.\n    # We pick 15 from each color at most:\n    # So, 15 from first color, 15 from second, 15 from third, 15 from fourth, and 15 from fifth.\n    # Afterwards we start picking one more from each color to ensure we hit 16 of any color,\n    # but as we want 13 of another color we can end up picking 12 more.\n    # We add these and then add 1 more to ensure we hit the count we want.\n\n    total_balls_picked = (15 * 5) + 12 + 1  \n    return total_balls_picked\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend must get at least 1 ice-cream cone, we can\n    # start by giving 1 cone to each friend. This leaves us with\n    # 5 - 3 = 2 cones to distribute.\n    # The number of ways to distribute these 2 cones can be found\n    # by the \"stars and bars\" method (combinatorics). We have 2 \"stars\"\n    # (the cones) and 2 \"bars\" to divide them between 3 people, equivalent\n    # to the problem of placing 2 indistinguishable items into 3 distinguishable\n    # bins, where the order does not matter.\n    \n    # The formula for this is \"n+k-1 choose k\", where n is the number\n    # of stars (items) and k is the number of bars (dividers), which in\n    # this case translates to \"4 choose 2\".\n    \n    from math import comb\n    remaining_cones = 2\n    dividers = 3 - 1  # we need one less divider than the number of friends\n    return comb(remaining_cones + dividers, dividers)\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    p, q = symbols('p q')\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p, q + 2700)\n    \n    solutions = solve((equation1, equation2), (p, q))\n    \n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given = total_biscuits / 4\n    remaining_biscuits = total_biscuits - biscuits_given\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(2 * table + 5 * chair, 220)  # Total cost equation\n    equation2 = Eq(table, 3 * chair)            # Relationship between table and chair costs\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4/5\n    initial_money = spent / (1 - remaining_fraction)\n    \n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 0.0381\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    num = 40 / 100 * 75\n    return num\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk = 20\n    lily_walk = hook_walk - 5\n    return lily_walk\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    Joann = 3\n    Sana = 6\n    Nancy = 8\n    total_coins = Joann + Sana + Nancy\n    return total_coins\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    # Calculate the number of pizzas needed per person\n    pizzas_per_person = pizzas_initial / people_initial\n    \n    # Calculate the number of pizzas needed for 35 people\n    pizzas_needed = pizzas_per_person * people_final\n    \n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    from math import log2\n\n    teams = 16\n    rounds = int(log2(teams))\n\n    return rounds\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Lucas and his mother initially are 20 miles apart.\n    total_distance = 20\n    # They are 4 miles apart after walking, so they have covered 20 - 4 = 16 miles together.\n    distance_covered_together = total_distance - 4\n    # The ratio of the speeds of Lucas to his mother is 3:5.\n    # So, Lucas covers 3 parts of the distance while his mother covers 5 parts.\n    # Together they cover 3 + 5 = 8 parts.\n    total_parts = 3 + 5\n    \n    # Lucas' distance covered is 3 parts out of the total 8 parts of the 16 miles they covered together.\n    lucas_distance = (3 / total_parts) * distance_covered_together\n\n    return lucas_distance\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = sum(solutions.values())\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5\n    return ans\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)  # Total apples\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)  # Total oranges\n\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    from math import isqrt\n    \n    # Perfect square numbers when multiplied by 72\n    # can be found by checking if 72x is a perfect square from 1 to 2016 inclusive.\n    count = 0\n    for x in range(1, 2016 + 1):\n        number = x * 72\n        sqrt_number = isqrt(number)\n        if sqrt_number * sqrt_number == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # System of congruences (group_size, remainder):\n    congruences = [(5,0), (7,1), (8,1)]\n    children_at_party = solve_congruence(*congruences)\n\n    return children_at_party[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years until their ages have a ratio of 5:3\n    x = symbols('x')\n\n    # Let E be Efron's current age and D be Danny's current age.\n    # From the problem statement, we know that D = E + 30\n    # Also, we are given that the current ratio of D to E is 8:3.\n    # Setting up the equations based on the given information:\n    # Equation 1: D = E + 30 (Danny is 30 years older)\n    # Equation 2: D/E = 8/3 => 3D = 8E (Current ratio of their ages)\n    # Equation 3: (D+x)/(E+x) = 5/3 (Ratio in x years)\n    \n    # To find Efron's current age and Danny's current age:\n    E, D = symbols('E D')\n    equation1 = Eq(D, E + 30)\n    equation2 = Eq(3*D, 8*E)\n    solutions = solve((equation1, equation2), (E, D))\n    \n    E_current = solutions[E]\n    D_current = solutions[D]\n    \n    # Now let's find x by setting up equation 3:\n    equation3 = Eq((D_current + x) / (E_current + x), 5/3)\n    x_solution = solve(equation3, x)\n    \n    return x_solution[0]\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    butter_for_100_cookies = 40\n    cookies_needed = 150\n    butter_per_cookie = butter_for_100_cookies / 100\n    butter_needed = butter_per_cookie * cookies_needed\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    # Number of ways to choose a pencil and a ruler.\n    pencils_and_rulers = 15 * 20\n    # Number of ways to choose a pencil and a pen.\n    pencils_and_pens = 15 * 10\n    # Number of ways to choose a ruler and a pen.\n    rulers_and_pens = 20 * 10\n\n    # Total number of ways to choose any two items (one colour from each item).\n    total_ways = pencils_and_rulers + pencils_and_pens + rulers_and_pens\n\n    return total_ways\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(0, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit >= 10:  # since first_digit must be a single digit\n            break\n        for third_digit in range(0, 10):\n            if 9 < (first_digit + second_digit + third_digit) < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    # Simplify the left side by dividing -6 by 6\n    left_side = -6 / 6\n    # Since left_side should equal to 6, we compare if they are equal\n    answer = left_side == 6\n    # The answer is a boolean, if True it satisfies the equation, otherwise it doesn't.\n    # In this case, it doesn't since -1 cannot equal 6.\n    return answer\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Group stage: each team plays 3 matches in a single round-robin within a group of 4 teams\n    group_games_per_group = (4 * 3) // 2\n    total_group_games = group_games_per_group * 8 # there are 8 groups\n\n    # Knockout round: Round of 16, Quarterfinals, Semifinals, Finals, and Third Place Match\n    round_of_16 = 8\n    quarterfinals = 4\n    semifinals = 2\n    finals = 1\n    third_place_match = 1\n    \n    total_knockout_games = round_of_16 + quarterfinals + semifinals + finals + third_place_match\n    \n    # Total games played throughout the World Cup\n    total_games = total_group_games + total_knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from math import factorial\n\n    # Using the formula for total matches in a round-robin tournament: n * (n - 1) / 2 = 15\n    # So, n * (n - 1) = 30\n    # Find the n that satisfies this equation\n    n = 1\n    while factorial(n) / (factorial(2) * factorial(n - 2)) != 15:\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import divisors\n\n    num_factors = len(divisors(224))\n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / (1 - 0.3)\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    ans = pencils * rulers * pens\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    for correct_answers in range(11):\n        wrong_answers = 10 - correct_answers\n        points = correct_answers * 6 - wrong_answers * 2\n        if points == 44:\n            return correct_answers\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n    pentagons = 2  # Given number of pentagons\n\n    equation = Eq(3 * triangles + 4 * quadrilaterals + 5 * pentagons, 394)\n    quadrilaterals = triangles + 82  # Number of quadrilaterals is 82 more than that of triangles\n\n    # Replace quadrilaterals with triangles + 82 in the equation\n    substituted_eq = equation.subs(quadrilaterals, triangles + 82)\n    # Solve for the number of triangles\n    solutions = solve(substituted_eq, triangles)\n    triangles = solutions[0]\n    # Calculate the number of quadrilaterals based on the number of triangles\n    quadrilaterals = triangles + 82\n\n    return quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define rachel and alice's original number of sweets as r and a\n    r, a = symbols('r a')\n\n    # Equation for if Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # Equation for if they both eat 8 sweets, Rachel has 3 times as many as Alice left\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # since there are 4 lamp posts, there will be 3 gaps between them\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of all-girl teams and all-boy teams\n    all_girl_teams, all_boy_teams = symbols('all_girl_teams all_boy_teams')\n\n    # Equation for all-boy teams being twice the number of all-girl teams\n    equation1 = Eq(all_boy_teams, 2 * all_girl_teams)\n\n    # Total teams calculation\n    total_teams = 150 / 3\n\n    # Equation for the total number of teams\n    equation2 = Eq(15 + 27 + all_girl_teams + all_boy_teams, total_teams)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (all_girl_teams, all_boy_teams))\n\n    # Calculate the number of girls\n    girls = solutions[all_girl_teams] * 3\n\n    return girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # Calculate the least common multiple (LCM) of 3, 5, and 7\n    lcm = 3 * 5 * 7\n\n    # Iterate through multiples of LCM that are three-digit numbers starting with 6\n    for i in range(lcm, 1000, lcm):\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    weight_ratio_rabbit_to_chicken = 2\n    weight_ratio_dog_to_rabbit = 8\n\n    weight_ratio_dog_to_chicken = weight_ratio_dog_to_rabbit * weight_ratio_rabbit_to_chicken\n\n    return weight_ratio_dog_to_chicken\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12\n    total_students = 5 + 1  # One more student joins\n    candies_per_student = total_candies // total_students\n    return candies_per_student\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the numbers from base 7 to base 10\n    num1 = int(str(61), 7)\n    num2 = int(str(34), 7)\n    \n    # Perform the subtraction in base 10\n    difference = num1 - num2\n    \n    # Convert the result back to base 7\n    ans = ''\n    while difference > 0:\n        ans = str(difference % 7) + ans\n        difference //= 7\n    if ans == '':\n        ans = '0'  # If the difference is 0, set ans to '0' in base 7.\n    \n    return ans\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Time traveling at 10 km/h is at 10 am\n    # Time traveling at 15 km/h is at 8 am\n    \n    # Calculate the time taken for both scenarios\n    time_at_10kmph = 10  # Reaching at 10:00 AM is considered 0 hours of travel\n    time_at_15kmph = 8  # Reaching at 8:00 AM is considered 2 hours of travel\n    \n    # Using the formula: Speed = Distance / Time\n    # The distances for both scenarios are the same, \n    # we can equate the two expressions for distance\n    # Distance = 10 km/h * (time_at_10kmph - time_at_15kmph)\n    # Distance = 15 km/h * (time_at_15kmph - time_at_10kmph)\n    \n    # Since the time for 10 km/h is 10 am and for 15 km/h is 8 am,\n    # the difference in time is 2 hours.\n    # We can solve for Distance (D) using either expression:\n    time_difference = 2  # The difference in time of arrival is 2 hours\n    distance = 10 * time_difference  # D = 10 * 2\n    \n    # To find the speed required to reach by 9:00 AM, \n    # we need to calculate the time at that speed\n    desired_arrival_time = 9  # Reaching at 9 AM\n    time_to_travel_at_desired_speed = time_at_10kmph - desired_arrival_time\n    \n    # We can now calculate the required speed using the distance and the new time\n    # Speed = Distance / Time\n    required_speed = distance / time_to_travel_at_desired_speed\n    \n    return required_speed\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # To maximize the chance of not getting a matching pair, Dilly should first pick the gloves in a way that avoids getting a matching pair.\n    # She can pick up to:\n    # - 1 left-hand blue glove\n    # - 2 left-hand green gloves\n    # Picking any more would guarantee a pair of left-handed gloves of some color.\n    # Now, Dilly can continue to avoid a matching pair by picking:\n    # - 3 right-hand blue gloves\n    # At this point, she has picked 6 gloves without getting a matching pair.\n    # If she picks one more glove, no matter what it is, she will have a matching pair.\n    # Therefore, she needs to pick 6 + 1 = 7 gloves to be sure to have a matching pair.\n\n    return 7\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    # We need to find the smallest number that\n    # gives a remainder of 3 when divided by 4,\n    # gives a remainder of 4 when divided by 5,\n    # gives a remainder of 6 when divided by 7.\n    \n    # This is a classical Chinese remainder theorem problem,\n    # but we can solve it using a brute-force approach for simplicity.\n    \n    x = 0\n    while True:\n        x += 1\n        if x % 4 == 3 and x % 5 == 4 and x % 7 == 6:\n            return x\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    final_value = initial_value * depreciation_factor\n    return final_value\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    # Initial boy-girl difference\n    boy_girl_diff = 52\n    \n    # Initialize total number of students\n    total_students = 0\n    \n    # We try different sizes of squares until the difference matches the given boy-girl difference.\n    # We increase the square size by 2 to alternate between boys and girls.\n    for size in range(2, 1000, 2):  # The upper bound 1000 is arbitrary to prevent an infinite loop.\n        # Calculate the number of boys and girls assuming boys are on the outside\n        boys = size*4 + (size-2)*4\n        girls = total_students - boys\n        \n        # Check if the difference is as required\n        if boys - girls == boy_girl_diff:\n            # If we found the correct difference, return the total number of students\n            return total_students\n        \n        # Update the total number of students for the next iteration (add another layer of students)\n        total_students += size*4 + (size+2)*4\n\n# Call the function and store the answer\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    eugene, yuna = symbols('eugene yuna')\n    # Eugene had 3 times as many pins as Yuna\n    equation1 = Eq(eugene, 3 * yuna)\n    # After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene\n    equation2 = Eq(yuna + 76, (7 / 9) * eugene)\n\n    solutions = solve((equation1, equation2), (eugene, yuna))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Check the divisibility rule for 9, which is that the sum of the digits must be divisible by 9\n    A = -1  # Initialize A with an invalid value\n    # Find the value of A such that the sum of digits of the number is divisible by 9\n    for digit in range(10):\n        if (1 + 2 + 3 + 4 + 5 + digit) % 9 == 0:\n            A = digit\n            break\n    # Now we check the divisibility of the last two digits by 4, as the number formed by the last two digits (5A) determines divisibility by 4\n    last_two_digits = 10 * 5 + A\n    remainder_by_4 = last_two_digits % 4\n    return remainder_by_4\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    hundreds = 2\n    tens = 8\n    \n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 * remaining_flowers / 7\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = 5 + Fraction(1, 7) + 3 + Fraction(3, 11) + 1 + Fraction(13, 23)\n    denominator = 3 + Fraction(3, 7) + 2 + Fraction(2, 11) + 1 + Fraction(1, 23)\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "from math import factorial\n\ndef solution():\n    num_kids = 3\n    arrangements = factorial(num_kids)\n\n    return arrangements\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n\n    equation = Eq(4 * square - 3, 65)\n\n    solved = solve(equation, square)\n\n    return solved[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Let's assume all vehicles are motorcycles initially (2 wheels each)\n    motorcycles = total_vehicles\n    wheels_with_all_motorcycles = motorcycles * 2\n\n    # Now let's convert some motorcycles to cars until we reach the total wheels\n    cars = 0\n    while wheels_with_all_motorcycles != total_wheels:\n        # For each car, we add 2 more wheels (since car has 4 wheels and motorcycle has 2)\n        motorcycles -= 1\n        cars += 1\n        wheels_with_all_motorcycles += 2\n\n    return cars\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure victory, Kelly must leave a number of matches such that\n    # Dan cannot win in the following turn regardless of whether he\n    # picks 1 or 2 matches.\n    # If Kelly leaves a multiple of 3 matches after her turn\n    # Dan cannot win because:\n    # - if Dan picks 1 match, Kelly can pick 2\n    # - if Dan picks 2 matches, Kelly can pick 1\n    # So to ensure victory, Kelly has to make sure the number of matches\n    # after her turn is a multiple of 3.\n    # We start from the end state (1 match that Kelly has to pick to win)\n    # and go backwards, trying to find the number that is a multiple of 3\n    # and is reachable by Kelly in her first turn by taking either 1 or 2 matches.\n    \n    remaining_matches = 11  # Starting number of matches\n    # Kelly wants to leave a multiple of 3 for Dan.\n    # Since if Kelly leaves 9 matches (which is a multiple of 3),\n    # Dan can take either 1 or 2 matches, leaving Kelly with 8 or 7 matches,\n    # which is not a multiple of 3 allowing Kelly to make her move to reach\n    # a multiple of 3 in next turn again. Therefore, leaving 9 matches\n    # after first turn ensures Kelly's victory.\n    matches_to_leave = 9\n\n    # The number of matches Kelly must take away in the first turn\n    kellys_move = remaining_matches - matches_to_leave\n    \n    return kellys_move\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_initial = 20\n    # Let's denote the initial amount of stickers Nicole had as nicole_initial\n    # After giving away 18 stickers, Nicole would have nicole_initial - 18 stickers\n    # Jason would have jason_initial + 18 stickers after receiving them\n    # According to the problem, after the exchange, Jason has 5 fewer stickers than Nicole\n    # So: jason_initial + 18 + 5 = nicole_initial - 18\n    # Simplify the equation to find the initial amount of stickers Nicole had\n    nicole_initial = jason_initial + 18 + 5 + 18\n    return nicole_initial\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume of the cuboid = length * breadth * height = 1 * 1 * 1 (for simplicity)\n    original_volume = 1\n\n    # New dimensions:\n    # Length increased by 10% => new_length = 1 * (1 + 10/100) = 1.1\n    new_length = 1.1\n    # Breadth reduced to 4/5 => new_breadth = 1 * (4/5) = 0.8\n    new_breadth = 0.8\n    # Height ratio 11:10 => new_height = 1 * (11/10) = 1.1\n    new_height = 1.1\n\n    # New volume of the cuboid = new_length * new_breadth * new_height\n    new_volume = new_length * new_breadth * new_height\n\n    # New volume as a percentage of its original volume\n    new_volume_percentage = (new_volume / original_volume) * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        for three_gram_weights in range(0, 77 // 3 + 1):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    ans = ways\n    return ans\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance = 5000  # Total distance in metres\n    num_intervals = 9 + 1  # Number of intervals is one more than the number of marshals\n\n    distance_between_marshals = total_distance / num_intervals\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed1 = 180  # meters per minute\n    time1 = 6     # minutes\n    speed2 = 120  # meters per minute\n    time2 = 8     # minutes\n    \n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n    \n    total_distance = distance1 + distance2\n    \n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_sum = 74 * 7\n    correct_sum = incorrect_sum - (81 - 18)\n    correct_average = correct_sum / 7\n    return correct_average\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n\n    ans = total_time // time_per_picture\n    return ans\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    red_tiles = 0\n    green_tiles = 0\n    \n    for layer in range(1, (side_length // 2) + 1):\n        if layer % 2 == 1:  # Odd layers are red\n            red_tiles += (side_length - (layer - 1) * 2)**2\n        else:  # Even layers are green\n            green_tiles += (side_length - (layer - 1) * 2)**2\n    \n    if side_length % 2 == 1:  # The center tile for odd side_length is red\n        red_tiles += 1\n    else:  # The center tile for even side_length is green\n        green_tiles += 1\n    \n    # Calculate the dominant color and how many more tiles it has\n    if red_tiles > green_tiles:\n        color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        color = 'green'\n        more_tiles = green_tiles - red_tiles\n    \n    return color, more_tiles\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    \n    # Interest after the first year\n    first_year_interest = principal * rate\n    # Principal for the second year\n    new_principal = principal + first_year_interest\n    # Interest after the second year\n    second_year_interest = new_principal * rate\n\n    return second_year_interest\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    index = (69 - 1) % len(recurring_sequence)  # Subtract 1 because indices start at 0\n\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    # Convert 1 4/7 to a decimal\n    ans = 1 + 4/7\n    # Round to 1 decimal place\n    ans = round(ans, 1)\n    return ans\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)  # Replace y with the actual number if needed"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n\n    # Vastco's sales in 2014 were 68% more than Megacorp's\n    vastco_2014 = x * 1.68\n\n    # Vastco's sales rose by 32% in 2015\n    vastco_2015 = vastco_2014 * 1.32\n\n    # In 2015, Vastco sold 44% more than Megacorp\n    # This means vastco_2015 = megacorp_2015 * 1.44\n    # Thus, megacorp_2015 = vastco_2015 / 1.44\n    megacorp_2015 = vastco_2015 / 1.44\n    \n    # Calculate the percentage increase for Megacorp from 2014 to 2015\n    percentage_increase_megacorp = ((megacorp_2015 - x) / x) * 100\n\n    return percentage_increase_megacorp\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_salt_dylan = 300 * 0.35\n    total_salt_daisy = 200 * 0.50\n    total_salt_mixed = total_salt_dylan + total_salt_daisy\n    total_solution_weight = 300 + 200\n    concentration_resulting_solution = (total_salt_mixed / total_solution_weight) * 100\n    return concentration_resulting_solution\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Define the variables\n    planned_profit_percent = 50\n    sold_first_day_percent = 70\n    actual_total_profit_percent = 82\n    profit_first_day_percent = 50\n\n    # Calculate the actual total profit percent on the first day\n    actual_profit_first_day_percent = (sold_first_day_percent / 100) * (profit_first_day_percent / 100) * planned_profit_percent\n    remaining_profit_to_achieve_percent = actual_total_profit_percent - actual_profit_first_day_percent\n\n    # Calculate the remaining goods percent\n    remaining_goods_percent = 100 - sold_first_day_percent\n    \n    # Calculate the profit earned on the second day as a percentage of the planned profit\n    profit_second_day_percent = (remaining_profit_to_achieve_percent / remaining_goods_percent) * 100\n    \n    # The discount rate on the second day would be the difference between the expected profit (50%)\n    # and the profit made on the second day\n    discount_rate_second_day = planned_profit_percent - profit_second_day_percent\n    \n    return discount_rate_second_day\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits for 1 to 9\n    digits_1_to_9 = 9 * 1\n    # Calculate the number of digits for 10 to 99\n    digits_10_to_99 = (99 - 10 + 1) * 2\n    # Calculate the number of digits for 100 to 113\n    digits_100_to_113 = (113 - 100 + 1) * 3\n    \n    # Add all the digits together\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_113\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the original number of pearls\n    pearls = symbols('pearls')\n\n    # Define the equation based on the given information\n    equation = Eq(pearls / 2 + pearls / 4 + pearls / 6 + 3, pearls)\n\n    # Solve the equation\n    original_pearls = solve(equation, pearls)\n\n    # Assuming there's one solution, return the value\n    return original_pearls[0]\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    bought_bottles = 48\n    empty_bottles = bought_bottles\n    total_bottles = bought_bottles\n    \n    # Customers can borrow 1 empty bottle.\n    empty_bottles += 1\n    \n    while empty_bottles >= 4:\n        # Exchange 4 empty bottles for 1 new bottle of tea\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n\n        # Calculate the remaining empty bottles\n        empty_bottles = empty_bottles % 4 + new_bottles\n\n        # Customers have to return the borrowed bottle if they have used it\n        if empty_bottles == 3 and new_bottles > 0:\n            empty_bottles += 1  # borrowed bottle is returned as an empty for exchange\n            total_bottles -= 1  # corresponding deduction from the total\n     \n    return total_bottles\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n    \n    # Based on the problem statement,\n    # older son - younger son = 3\n    # older daughter - younger daughter = 2\n    # older son + younger son + older daughter + younger daughter = 55\n    # younger son - 2 * older daughter = 0 (since younger son is twice older daughter's age)\n\n    # Create equations based on the above information\n    equation1 = Eq(older_son - younger_son, 3)\n    equation2 = Eq(older_daughter - younger_daughter, 2)\n    equation3 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation4 = Eq(younger_son - 2 * older_daughter, 0)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n    \n    # Extract the ages of each child\n    ages = [solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter]]\n    \n    # The youngest child will have the minimum age\n    youngest_age = min(ages)\n\n    return youngest_age\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    \n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n    \n    solutions = solve((equation1, equation2), (john, brother))\n    \n    return solutions[brother]\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit = 92\n    safe_glass_profit = 1\n    broken_glass_cost = 1\n\n    # Let x be the number of glasses broken\n    # Therefore, (total_glasses - x) is the number of glasses delivered safely\n    # profit = (safe_glass_profit * (total_glasses - x)) - (broken_glass_cost * x)\n    # Rearrange the equation to find x\n    # 0 = total_glasses - profit - 2x\n    # x = (total_glasses - profit) / 2\n    x = (total_glasses - profit) // 2\n\n    return x\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    mayanks_number = (40 - 4) / 2\n    return mayanks_number\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "from math import sqrt\n\ndef solution():\n    # In a round-robin competition, each team plays against every other team once.\n    # The total number of matches (M) is given by the formula: M = n(n - 1) / 2\n    # where n is the number of teams.\n    # We know that M = 45, so we can set up the equation and solve for n:\n    # n(n - 1) / 2 = 45 => n^2 - n - 90 = 0\n\n    # Calculate discriminant to solve the quadratic equation a*n^2 + b*n + c = 0\n    a, b, c = 1, -1, -90*2\n    discriminant = b**2 - 4*a*c\n    # We only consider the positive solution for the number of teams\n    n = (sqrt(discriminant) - b) / (2*a)\n\n    return int(n)\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    num_people_per_boat_less = 9\n    num_people_per_boat_more = 6\n    \n    for num_boats in range(1, 100):\n        total_people_less = num_people_per_boat_less * (num_boats - 1)\n        total_people_more = num_people_per_boat_more * (num_boats + 1)\n        \n        if total_people_less == total_people_more:\n            return total_people_less\n    return None\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import combinations\n\ndef solution():\n    total_entrances = 3\n    people = 4\n    ways = 0\n    \n    # Choose 1 entrance for the first person and find combinations for the remaining 3\n    for combo in combinations(range(total_entrances), 1):\n        remaining = total_entrances - len(combo)\n        ways += remaining ** (people - 1)\n    \n    # Choose 2 entrances for the first 2 people and find combinations for the remaining 2\n    for combo in combinations(range(total_entrances), 2):\n        remaining = total_entrances - len(combo)\n        ways += remaining * (people - len(combo) + 1)\n        \n    return ways\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 15\n    change_from_12_pounds = 1200 - total_cost\n    return change_from_12_pounds\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # Let's denote the three consecutive odd integers as x, x+2, x+4\n    # Their sum is x + (x+2) + (x+4) = 57\n    # Solving for x, we get 3x + 6 = 57\n    # 3x = 51\n    # x = 17\n    # So the smallest integer is x, which is 17\n\n    smallest_integer = (57 - 6) // 3\n    return smallest_integer\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for number in [2, 6, 1, 10, 5, 3]:\n        if number * 3 == 2:\n            return number\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the same combination\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    greatest_common_divisor = gcd(pencils, pens)\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    perms = permutations(digits, 4)\n    min_sum = float('inf')\n    for perm in perms:\n        number1 = perm[0] * 10 + perm[1]\n        number2 = perm[2] * 10 + perm[3]\n        min_sum = min(min_sum, number1 + number2)\n    return min_sum\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, peter = symbols('john peter')  # Define john and peter as variables\n    \n    # Initially, John had 180 more cookies than Peter\n    equation1 = Eq(john - 180, peter)\n    \n    # After selling, John had 4/5 of her cookies, Peter had 3/10 of his cookies\n    # John had 1/2 as many cookies as Peter left\n    equation2 = Eq(john * (4/5), (peter - peter * (3/10)) / 2)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (john, peter))\n    \n    return solutions[john]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60\n    new_test_score = 70\n    total_tests_now = 5\n    total_marks_now = total_marks_before + new_test_score\n    new_average = total_marks_now / total_tests_now\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples_eaten = (total_horses * apples_per_horse) + \\\n                         (total_pigs * apples_per_pig) + \\\n                         (total_rabbits * apples_per_rabbit)\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_per_animal = total_apples_eaten / total_animals\n\n    return average_apples_per_animal\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            if i + j < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    num_cups = 6\n    discount_1_threshold = 3 * full_price_per_cup  # Spend $12 and save $2\n    discount_2_threshold = 5 * full_price_per_cup  # Spend $20 and save $5\n    \n    full_price = full_price_per_cup * num_cups\n    \n    if full_price >= discount_2_threshold:\n        full_price -= 5\n    elif full_price >= discount_1_threshold:\n        full_price -= 2\n        \n    return full_price\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    spent_benson = 74\n    spent_jayden = 120\n    combined_total = 590\n\n    left_total = combined_total - (spent_benson + spent_jayden)\n    # Let x be the amount Jayden had left.\n    # Then 3x is the amount Benson had left.\n    # We have x + 3x = left_total\n    x = left_total / 4\n\n    return x\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A and b be the number of students in class B\n    # Let p be the number of peaches\n    a, b, p = symbols('a b p')\n\n    # According to problem statement\n    equation1 = Eq(p, 5*a + 10)\n    equation2 = Eq(p, 8*b - 2)\n    equation3 = Eq(a, b + 3)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (a, b, p))\n\n    # Returning the number of peaches\n    return solutions[p]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_drink = 12\n    water_fraction = 3/4\n    water_in_drink = total_drink * water_fraction\n    return water_in_drink\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    # Calculate the summation of the series\n    S = sum(int('2' * i) for i in range(1, 2018))\n\n    # Extract the last 5 digits of S\n    last_5_digits = str(S)[-5:]\n\n    # Calculate the sum of the last 5 digits\n    ans = sum(int(digit) for digit in last_5_digits)\n\n    return ans\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n    \n    neither_owners = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3  # Sum of the ratio parts\n    total_volume = 300  # Total volume of the drink\n    raspberry_ratio = 1  # Ratio part of raspberry juice\n\n    # Calculate the volume of raspberry juice based on the ratio\n    raspberry_volume = (raspberry_ratio / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    # Since all squares must contain the same whole number and their product plus one of them is 380,\n    # we can represent the number in the square as 'n'. Therefore:\n    # n * n + n = 380 => n^2 + n - 380 = 0.\n    # We can solve this quadratic equation to find the value of 'n'.\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(n**2 + n - 380, 0)\n    solutions = solve(equation, n)\n    \n    # We only need the positive solution since we are looking for a whole number.\n    for sol in solutions:\n        if sol.is_real and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Assumptions based on the problem statement:\n    # Let `b` be the speed of Betty in metres per minute.\n    # Let `k` be the speed of Kevin in metres per minute.\n    # Let 't' be the time in minutes Betty leaves before Kevin.\n    # From the information given:\n    # 1. Betty reaches the grocery store in 6 minutes (her speed times 6 minutes)\n    # 2. Kevin has walked 150 metres in the same time, so `k * t = 150`.\n    # 3. After another 3 minutes, Betty will be 900 metres away from the cinema.\n    #    Hence, b*(6 + 3 + t) = 900 => b*(9 + t) = 900.\n    # 4. Kevin arrives at the store in 3 minutes after the initial time, so `k * (t + 3) = b * 6`.\n\n    # From point 3: b * (9 + t) = 900 => b = 900 / (9 + t)       (Equation 1)\n    # Replace `b` in point 4 from Equation 1: k * (t + 3) = 900 / (9 + t) * 6\n    # Use point 2 to replace `k` with `150 / t`: (150 / t) * (t + 3) = 900 / (9 + t) * 6\n    # Simplify the equation: 150 * (t + 3) = 5400 / (9 + t)\n    # Multiply both sides by (9 + t) to get rid of the denominator: 150 * (t + 3) * (9 + t) = 5400\n    # Distribute 150 into (t + 3): 150t + 450 = 5400 / (9 + t)\n    # Multiply both sides by (9 + t) again: (150t + 450) * (9 + t) = 5400\n    # Further simplify the equation: 1350t + (150t^2 + 450t + 4050) = 5400\n    # Combine like terms: 150t^2 + 1800t + 4050 = 5400\n    # Subtract 5400 from both sides: 150t^2 + 1800t - 1350 = 0\n    # Divide by 150 to simplify: t^2 + 12t - 9 = 0\n    # Use the quadratic formula to solve for t: t = (-12 +/- sqrt(12^2 - 4*1*(-9))) / (2*1)\n    from math import sqrt\n\n    # Calculate discriminant\n    discriminant = 12**2 - 4 * 1 * (-9)\n\n    # Calculate two possible solutions for t\n    t1 = (-12 + sqrt(discriminant)) / (2 * 1)\n    t2 = (-12 - sqrt(discriminant)) / (2 * 1)\n\n    # Since time cannot be negative, take the positive root as the solution for t\n    t = t1 if t1 > 0 else t2\n    \n    return int(t)\n\nans = solution()"
    ]
}