{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    m = 4\n    result = sum([i**2 for i in range(m, n+1)])\n    return result\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9\n    end_time = 10\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 0.8  # She has 80% of her money left after buying the bag\n    remaining_after_skirt = 0.6  # She spends 40% of the remainder so she has 60% of that remaining\n    money_left = 90  # The amount of money she has left\n\n    # Calculate the original amount of money\n    original_money = money_left / (remaining_after_bag * remaining_after_skirt)\n\n    return original_money\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples\n    # John will have (john + x) apples\n    # According to the problem, Amy will have 4 more apples than John\n    # So, (amy - x) = (john + x) + 4\n    # Solving for x\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n\n    ways_to_arrange = factorial(total_plants) // factorial(total_plants - plants_to_arrange)\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n\n    # Let the cost of the first house be x\n    # Profit on the first house is 10%, so selling price is 1.1x\n    # Then x = sale_price / 1.1\n    cost_first_house = sale_price / 1.1\n\n    # Let the cost of the second house be y\n    # Loss on the second house is 10%, so selling price is 0.9y\n    # Then y = sale_price / 0.9\n    cost_second_house = sale_price / 0.9\n\n    # Total cost is the sum of the costs of the two houses\n    total_cost = cost_first_house + cost_second_house\n\n    # Total sales is twice the sale_price, as he sold two houses\n    total_sales = 2 * sale_price\n\n    # Profit or loss is the difference between total sales and total cost\n    profit_or_loss = total_sales - total_cost\n    \n    # Return the profit or loss\n    return profit_or_loss\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # Suppose the number of students in one row of the initial square array is n\n    # Then the total number of students is n^2 + 5\n    # After adding one row and one column, the new array should be (n+1) by (n+1)\n    # So the number of the students in the larger square array is (n+1)^2\n    # According to the problem, (n+1)^2 - (n^2 + 5) = 26\n    # So we get the equation: n^2 + 2n + 1 - n^2 - 5 = 26\n    # Simplifying the equation: 2n + 1 - 5 = 26, so 2n = 30, n = 15\n    # And finally, the number of students in Year 4 is n^2 + 5 = 15^2 + 5 = 225 + 5 = 230\n    \n    # Now we need to find n such that our equation holds true\n    n = 1\n    while True:\n        if (n+1)**2 - (n**2 + 5) == 26:\n            break\n        n += 1\n    \n    number_of_students = n**2 + 5\n    return number_of_students\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    blouse_pants_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n    \n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure victory, Fred wants the number of oranges left after his turn\n    # to be a multiple of 4 (since George can take at most 3 oranges, this would prevent George\n    # from winning, and Fred can always keep the number of remaining oranges as a multiple of 4).\n\n    # Hence, to make the total number 15 become a multiple of 4 after Fred's turn,\n    # we subtract a certain number (Fred's move) from 15 to get the nearest smaller multiple of 4.\n    # This multiple is 12 (since 15 - 12 = 3, and 12 % 4 = 0).\n\n    # Fred's first move should be taking 15 - 12 = 3 oranges to leave 12 on the table.\n    # After that, no matter how many oranges George takes (1, 2, or 3),\n    # Fred can always take enough oranges to leave a multiple of 4 on the table, ensuring his win.\n\n    oranges_to_take = 15 % 4\n\n    return oranges_to_take\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    equation = Eq(4 * tom_age - 5, 43)\n    tom_age_solution = solve(equation, tom_age)\n\n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    return common_factor * (2 + 3 + 5)\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping_rope = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping_rope - both_events) + (total_long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n    return \"3/20\" if fraction > decimal else \"0.16\" if decimal > fraction else \"equal\"\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    \n    # Generate all permutations\n    all_perms = list(permutations('ABCDE'))\n    \n    for perm in all_perms:\n        # Find the position of A\n        pos_A = perm.index('A')\n        \n        # B is to the left of A and C is to the right of A or vice versa\n        if ('B' in perm[:pos_A] and 'C' in perm[pos_A+1:]) or ('C' in perm[:pos_A] and 'B' in perm[pos_A+1:]):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for i in range(1, 280):\n        if 5 * i + 10 * i + 20 * i == 280:\n            return 3 * i  # total number of notes (each denomination * number of notes)\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Calculate the distance Sara jogged from 6:30 AM to 8:30 AM\n    jogging_time_hours = 2  # from 6:30 AM to 8:30 AM\n    jogging_speed_kmph = 8  # jogging speed\n    jogging_distance_km = jogging_speed_kmph * jogging_time_hours\n\n    # Calculate the distance Sara walked from 8:30 AM to 9:30 AM\n    walking_time_hours = 1  # from 8:30 AM to 9:30 AM\n    walking_speed_kmph = jogging_speed_kmph / 2  # walking speed is half the jogging speed\n    walking_distance_km = walking_speed_kmph * walking_time_hours\n\n    # Calculate the total distance travelled\n    total_distance_km = jogging_distance_km + walking_distance_km\n\n    return total_distance_km\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n    \n    def square(M, N):\n        return 8 * M - N * N\n    \n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    for biggest_pile in range(1, 17):\n        for s2 in range(1, biggest_pile):\n            for s3 in range(1, s2):\n                for s4 in range(1, s3):\n                    if biggest_pile + s2 + s3 + s4 == 16:\n                        return biggest_pile\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # Start with the lowest prime number\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1  # Only need to test the next prime\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return int(A)\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # since we are considering only odd numbers till 19.\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)  # using the formula for the sum of squares.\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    buses_needed = (students + capacity - 1) // capacity\n    return buses_needed\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number after multiplication solely depends on the last digits\n    # of the numbers being multiplied.\n    # Since raising any number to any power only cycles through a set of possible last digits,\n    # we can focus on the cyclic pattern for last digits of powers of 2, 7, and 9.\n\n    # For 2: 2^1=2, 2^2=4, 2^3=8, 2^4=16 (last digit 6), and then cycles every 4 powers\n\n    # Since 100 is a multiple of 4, the last digit of 2^100 will be the same as 2^4, which is 6\n\n    # For 7: 7^1=7, 7^2=49 (last digit 9), 7^3=343 (last digit 3), 7^4=2401 (last digit 1),\n    # and then cycles every 4 powers\n\n    # Since 100 is a multiple of 4, the last digit of 7^100 will be the same as 7^4, which is 1\n\n    # For 9: 9^1=9, 9^2=81 (last digit 1), and then cycles every 2 powers\n\n    # Since 100 is a multiple of 2, the last digit of 9^100 will be the same as 9^2, which is 1\n\n    # Therefore, we only need to multiply the last digits: 6 (from 2^100) * 1 (from 7^100) * 1 (from 9^100)\n    last_digit = (6 * 1 * 1) % 10  # The % 10 is to get the last digit\n\n    return last_digit\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    s = 0\n    for n in range(1, 2008):\n        s += (n**2 + (n+1)**2) / (n * (n+1))\n    # Simplifying the above expression (n^2 + (n+1)^2) / (n * (n+1))\n    # We get 2n + 1 after simplification.\n    # Hence s is simply the summation of (2n + 1) for n = 1 to 2007.\n    \n    return round(s)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    incorrect_avg = 159\n    correct_avg = 163\n    incorrect_height = 126\n    correct_height = 162\n    \n    # Difference in height due to the error\n    height_diff = correct_height - incorrect_height\n    \n    # Calculate the number of girls based on the change in average height\n    num_girls = height_diff / (correct_avg - incorrect_avg)\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_time = 12\n    # Assuming each floor interval takes the same amount of time,\n    # the time to go from the first floor to the fourth floor covers three intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    intervals = 3\n    # Therefore, the time needed for one interval (from one floor to the next) is\n    time_per_floor = total_time / intervals\n    return time_per_floor\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    # Perform the calculation step by step\n    ans = (2**5) * (5**2) // 10\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for i in range(199, 0, -1):\n        ans = hash_op(ans, i)\n\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + (1 / i))\n    return product\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2  # n is the number of terms in the sequence 1, 3, 5, ..., 13\n    sum_of_n = n * (n + 1) // 2  # Sum of the first n natural numbers\n    return sum_of_n ** 2  # Square of the sum\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    import math\n\n    # lengths of the ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Find the greatest common divisor of the lengths\n    gcd12 = math.gcd(ribbon1, ribbon2)\n    gcd123 = math.gcd(gcd12, ribbon3)\n\n    return gcd123\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of seashells Beth (b) and Ken (k) have.\n    b, k = symbols('b k')\n\n    # Define the equations based on the problem statement.\n    equation1 = Eq(k, b + 75)                      # Ken had $75 more seashells than Beth\n    equation2 = Eq(4/5 * b, 2/5 * k)               # 4/5 of Beth's seashells equal to 2/5 of Ken's seashells\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (b, k))\n\n    # Calculate the total number of seashells they have together.\n    total_seashells = solutions[b] + solutions[k]\n\n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_number = 9876543\n    ans = original_number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root**3\n        square_candidate = cube - 2\n        \n        if int(square_candidate**0.5) == square_candidate**0.5:\n            return int(square_candidate)\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    return sum(range(1, 10)) + 7\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    a, b = symbols('a b')\n    \n    # Original equation for sum of the two numbers\n    eq1 = Eq(a + b, 11.63)\n    \n    # Equation when decimal is shifted one place to the left for one number\n    eq2 = Eq(a + b/10, 5.87)\n\n    # Solve the system of equations\n    sol = solve((eq1, eq2), (a, b))\n    \n    # Calculate 100 times the difference between the two numbers\n    difference = 100 * abs(sol[a] - sol[b])\n    \n    return difference\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # each child must get at least two oranges, so we start by taking away the six oranges\n    # that will be distributed among the children first (2 for each).\n    oranges_to_distribute = 13 - 6\n    \n    # Now, we have to distribute 7 oranges to 3 children, there might be a case where a child will not get an orange.\n    # For that reason, we will use stars and bars method - but using only 2 bars (for 3 kids) and 7 stars (oranges).\n    # The number of ways to arrange these is the same as choosing 2 positions for the bars out of 9 positions (7 stars + 2 bars).\n    # So, we need to calculate \"9 choose 2\".\n    \n    ans = len(list(combinations_with_replacement(range(7 + 1), 2))) - 1  # 1 less because no child can end up with zero oranges\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of $10 notes and f be the number of $2 notes.\n    t, f = symbols('t f')\n\n    # Create the equations based on the problem statement\n    # David had a total of 40 notes\n    total_notes_eq = Eq(t + f, 40)\n\n    # He spent 40% of the $10 notes and 25% of the $2 notes\n    spent_t = 0.40 * t\n    spent_f = 0.25 * f\n\n    # After spending, he had 4/5 as many $10 notes as $2 notes\n    remaining_ratio_eq = Eq((t - spent_t) * (4/5), (f - spent_f))\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, remaining_ratio_eq), (t, f))\n\n    # Calculate the value spent on the gift\n    gift_cost = spent_t * 10 + spent_f * 2\n    gift_cost_value = gift_cost.subs({t: solutions[t], f: solutions[f]})\n\n    return gift_cost_value\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Each term in the product (1 + 1/(2^k)) can be written as (2^k + 1)/(2^k)\n    # The entire product is then a telescoping product, and most terms will cancel out.\n    # The remaining terms will be from the first and the last fraction.\n    # The result of the product is 2^(2^2009) + 1 over 2^(2^0) which simplifies to 2^(2^2009) + 1\n    # Equating this to 2 * (1 - 1/(2^(2^n))) and solving for n gives us 2^(2^2009) + 1 = 2 * (2^(2^n)) - 1\n    # Simplify to get 2^(2^n) = 2^(2^2009)\n\n    # Therefore, n must be 2009\n    return 2009\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    cupcakes = 90\n    eggs_per_cupcakes = 3 / 15\n    total_eggs = cupcakes * eggs_per_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):  # Since we need a three-digit integer\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # Skip if P is zero, since we want a 4-digit number\n            continue\n\n        paso = p * 1000 + a * 100 + s * 10 + o  # Construct the 4-digit number\n        soap = s * 1000 + o * 100 + a * 10 + p\n        posa = p * 1000 + o * 100 + s * 10 + a\n\n        # Check for the conditions given in the problem\n        if paso - soap == posa:\n            return paso  # Return the found 4-digit number PASO\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Man's rate of drinking the orange juice per day\n    man_rate = 1 / 15\n    # Combined rate of drinking the orange juice per day\n    combined_rate = 1 / 12\n    # Wife's rate of drinking the orange juice per day\n    wife_rate = combined_rate - man_rate\n    # Wife's days to finish the orange juice on her own\n    wife_days = 1 / wife_rate\n    \n    return wife_days\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    # Initial condition equation\n    equation1 = Eq(harry + liam, 640)\n\n    # After transfer, Harry has thrice the water Liam has\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day_questions = 3  # Number of questions solved on Monday\n    daily_increase = 3\n    days = 7  # Monday to Sunday\n\n    # Total questions is the sum of an arithmetic sequence starting from 'first_day_questions'\n    # with a common difference of 'daily_increase' for 'days' terms.\n    total_questions = sum(first_day_questions + daily_increase * (day - 1) for day in range(1, days + 1))\n    \n    return total_questions\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):        # hundreds place (1-9)\n        for j in range(0, 10):    # tens place (0-9)\n            for k in range(0, 10):# units place (0-9)\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # Iterating through all possible combinations of balls picked \n    for white, red, black in product(range(10), repeat=3):\n        if white <= 9 and red <= 5 and black <= 6:  # Picking cannot exceed available balls\n            white_left = 9 - white\n            red_left = 5 - red\n            black_left = 6 - black\n            # Checking the conditions after balls are picked\n            if 3 <= white_left <= 8 and 2 <= red_left and black_left <= 3:\n                if white + red + black == 10:  # Must pick exactly 10 balls\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = (77.5 * 0.52) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # The numbers of beans peeled form an arithmetic sequence: a, a+d, a+2d, a+3d, ...\n    # Given values in the sequence are: a+2d = 20, a+3d = 28, a+4d = 36\n    # We need to find 'a' which represents the number of beans peeled in the first hour\n    \n    # From the given sequence we can form two equations to find 'd'\n    # (a+3d) - (a+2d) = d = 28 - 20\n    # (a+4d) - (a+3d) = d = 36 - 28\n    \n    d = 28 - 20  # The common difference of the sequence\n    \n    # Now using the value of 'd', calculate 'a'\n    # We use a+2d = 20, to find 'a'\n    a = 20 - 2*d\n    \n    return a\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return (2**10) % 3\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100  # Convert snake length to cm\n\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    num = 1\n    difference = 2\n    while num < 100:\n        num += difference\n        difference += 2\n        if num >= 100:\n            break\n    return num - difference\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_of_three = 120\n    mean_of_four = 150\n\n    sum_of_three = mean_of_three * 3\n    sum_of_four = mean_of_four * 4\n\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the original number of pearls on the strand.\n    # According to the problem statement, we have:\n    # x/2 (half fell onto the floor) + x/4 (a fourth rolled under a chair) \n    # + x/6 (a sixth fell into her lap) + 3 (remaining on the strand) = x\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x / 2 + x / 4 + x / 6 + 3, x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = half_full_weight - (full_weight / 2)\n    empty_basket_weight = full_weight - 2 * half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front\n    # Bud is 6th from the end\n    # There are 5 children between Pip and Bud\n    # Hence, Pip's position is also 6 + 5 = 11th from the front\n    \n    # The total number of children is Bud's position from the end plus 11 - 1\n    # (since Bud is also counted in Pip's position from the front)\n    total_children = 11 + 6 - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    average_age_family = 29\n    total_age_family = average_age_family * 6\n    total_age_children = 64\n    total_age_parents = total_age_family - total_age_children\n        \n    # Since there are two parents, we calculate the average\n    average_age_parents_now = total_age_parents / 2\n    # The average age of the parents 3 years ago\n    average_age_parents_3_years_ago = average_age_parents_now - 3\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The number divided by 5 has a remainder of 3\n    con1 = (3, 5)\n    # The number divided by 6 has a remainder of 4\n    con2 = (4, 6)\n    # The number divided by 7 has a remainder of 1\n    con3 = (1, 7)\n    \n    ans, _ = solve_congruence(con1, con2, con3)\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Chinese Remainder Theorem\n    # x % 7 == 0 -> x = 7k (k is some integer)\n    # (x+2) % 8 == 0 -> x+2 = 8m (m is some integer)\n    # (x+4) % 9 == 0 -> x+4 = 9n (n is some integer)\n\n    # However, because we are looking for even numbers\n    # we actually have to make sure that the remainders\n    # are corresponding to even numbers\n    # so we need the following equations\n    # x % 14 == 0\n    # (x+2) % 16 == 0\n    # (x+4) % 18 == 0\n\n    # Find the least x that satisfies these congruences\n    # Using Chinese Remainder Theorem to solve:\n    congruences = [(0, 14), (14, 16), (16, 18)]\n    x, _ = solve_congruence(*congruences)\n\n    # Now find the sum of the three numbers\n    ans = x + (x+2) + (x+4)\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    # Given values\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n\n    # Calculate last term using the formula for nth term of an Arithmetic sequence:\n    # nth_term = first_term + (n-1)*common_difference\n    last_term = first_term + (total_rows - 1) * common_difference\n\n    # Calculate the sum using the formula for the sum of the first n terms of an Arithmetic sequence:\n    # sum = n/2 * (first_term + last_term)\n    total_athletes = total_rows * (first_term + last_term) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_done = 5\n    total_paintings = 56\n    \n    paintings_per_day = paintings_done / days_done\n    paintings_left = total_paintings - paintings_done\n    more_days_needed = paintings_left / paintings_per_day\n    \n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    ans = 8\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    # The number of leaves inserted is equal to the number of times we complete a cycle of 3 pieces of paper\n    pieces_of_paper = 18\n    cycle = 3\n    \n    # Calculate the number of full cycles of 3 pieces that can be made with 18 pieces\n    num_leaves = pieces_of_paper // cycle\n\n    return num_leaves\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Using the distributive property of multiplication over addition:\n    # a(b + c + d) = ab + ac + ad\n    # Here, a = 95, b = 37, c = 42, d = 21\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # Given terms in the question\n    a5 = 8\n    a12 = 50\n\n    # The common difference d can be calculated using the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n-1)d, where a1 is the first term and d is the common difference. Hence for n=5 and n=12:\n    # a5 = a1 + 4d\n    # a12 = a1 + 11d\n    # Subtracting the first equation from the second gives:\n    # (a12 - a5) = (a1 + 11d) - (a1 + 4d) => 50 - 8 = 11d - 4d => 42 = 7d\n    # Therefore, the common difference d is:\n    common_difference = (a12 - a5) / (12 - 5)\n\n    return common_difference\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    minimum_time = float('inf')  # start with infinite time\n\n    # There are only three trips needed: two trips to get three people across and one return trip\n    for first_crossing in combinations(times, 2):\n        for second_crossing in combinations([time for time in times if time not in first_crossing], 2):\n            time_taken = (\n                max(first_crossing) +          # maximum of first two crossing\n                min(times) +                   # fastest person returns\n                max(second_crossing) +         # maximum of next two crossing\n                min([time for time in times if time not in second_crossing and time != min(times)])  # second fastest person returns\n            )\n            minimum_time = min(minimum_time, time_taken)\n    \n    return minimum_time\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest = min(numbers, key=lambda x: abs(x - 0.1))\n    return closest\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    difference = 3\n    last_term = 242\n    sum_of_three_terms = first_term*3 + 3*difference\n\n    # Calculate number of terms in initial arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # The process of replacing the first three numbers with their sum reduces the sequence by 2 terms each iteration.\n    # Therefore, we can find out how many iterations it would take to reduce the sequence to 3 terms.\n    iterations = (num_terms - 3) // 2\n\n    # Update the first term after these iterations. Each iteration the new starting term is increased by 3 * difference.\n    new_first_term = first_term + iterations * sum_of_three_terms\n\n    # The second number is simply one difference more than the new first term\n    second_term = new_first_term + difference\n\n    return second_term\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Construct the equation\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let pip, bud, and bob denote the weights of Pip, Bud, and Bob respectively.\n    # According to the problem statement, we have the following equations for the averages:\n    # (pip + bud) / 2 = 30\n    # (pip + bob) / 2 = 33\n    # (bud + bob) / 2 = 36\n\n    # Multiplying each equation by 2 to eliminate the denominator.\n    # Equation 1: pip + bud = 30 * 2\n    # Equation 2: pip + bob = 33 * 2\n    # Equation 3: bud + bob = 36 * 2\n\n    # Translate the word problem into algebraic equations.\n    # Equation 1: pip + bud = 60\n    # Equation 2: pip + bob = 66\n    # Equation 3: bud + bob = 72\n\n    # Solve the system of equations.\n    # Subtract equation 1 from equation 2:\n    # (pip + bob) - (pip + bud) = 66 - 60\n    # bob - bud = 6\n\n    # Get bob in terms of bud:\n    # bob = bud + 6\n\n    # Substitute the value of bob into equation 3:\n    # bud + (bud + 6) = 72\n    # 2 * bud + 6 = 72\n    # 2 * bud = 72 - 6\n    # 2 * bud = 66\n    # bud = 66 / 2\n    bud = 33\n\n    # Now we can find pip using equation 1:\n    # pip + bud = 60\n    # pip + 33 = 60\n    # pip = 60 - 33\n    pip = 60 - 33\n\n    return pip\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1  # Jacob himself\n    sisters = 4  # Jacob's younger sisters\n    brothers = 3  # Jacob's younger brothers\n    num_children = jacob + sisters + brothers  # Total number of children\n    return num_children\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    depreciated_value = initial_value * (1 - depreciation_rate) ** years\n    return depreciated_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let's denote the original speed as V (in meters per minute)\n    # Let's denote the distance ran before rain as X (in meters)\n    # Therefore, the distance ran after rain is 2400 meters\n    # Distance of the journey is D = X + 2400\n    \n    # Original time to cover distance X at speed V is X/V minutes\n    # Time to cover distance 2400 at reduced speed (0.8 * V) is 2400/(0.8 * V)\n    \n    # According to the problem:\n    # X/V + 2400/(0.8 * V) = 30 + 5\n    # X/V - X/(0.8 * V) = 5\n    # Therefore, we can extract X from this equation to find the distance before it starts raining\n\n    # Simplify the second equation:\n    # X * 0.8 - X = 5 * V * 0.8\n    # -0.2X = 4V\n    # X = -4V / -0.2\n    # X = 20V\n    # Now we know that she usually covers the distance V * 30 in 30 minutes\n    # So, V * 30 = D, so X + 2400 = 30V\n    # X = 20V\n    # we substitute the X in the equation: D = X + 2400 = 20V + 2400\n\n    # From equation V * 30 = D\n    # We can substitute D from the previous equation, and solve for V:\n    # V * 30 = 20V + 2400\n    V = 2400 / 10\n    # The length of the journey is D = V * 30\n    D = V * 30\n    return D\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    base_people = 5\n    base_days = 15\n    target_days = 7\n    \n    # Work is constant, so base_people * base_days = (base_people + x) * target_days\n    # x represents the additional people needed\n    # Rearrange the equation x = (base_people * base_days) / target_days - base_people\n    additional_people = (base_people * base_days) / target_days - base_people\n\n    # Since we can't have a fraction of a person, we need to round up to the nearest whole number\n    import math\n    additional_people = math.ceil(additional_people)\n\n    return additional_people\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # Temperature at 5:00 am\n    rate_of_increase = 2  # Temperature increase per hour\n    hours_passed = 5.5  # Hours passed from 5:00 am to 10:30 am\n\n    # Calculate the temperature at 10:30 am\n    final_temp = initial_temp + (rate_of_increase * hours_passed)\n\n    return final_temp\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let x be the original number of students in school A\n    # Let y be the original number of students in school B\n    # We know that:\n    # x + y = 1050 (total number of students)\n    # x - 20 = y + 10 (school A will have 10 more students than school B after 20 students transfer)\n    \n    # Solving the system of equations\n    # x - y = 20 + 10 (from the second equation)\n    # x - y = 30\n    # Add this equation to the first equation\n    # x + y = 1050\n    # 2x = 1080\n    # x = 540\n\n    x = (1050 + 30) // 2  # Integer division since number of students must be an integer\n\n    return x\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell can draw all blue and white pencils without getting a green one\n    # The worst case is getting all blue and white pencils first\n    max_blue_and_white = 3 + 3\n\n    # To ensure he gets at least 1 green pencil, he needs to draw one more\n    min_pencils_for_one_green = max_blue_and_white + 1\n\n    return min_pencils_for_one_green\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbol for the money Mrs Chan had initially\n    x = symbols('x')\n\n    # create the equation based on the problem statement\n    equation = Eq(1/2 * (1/2 * (1/3 * (x - 1) - 2) - 3) - 49, 0)\n\n    # solve the equation\n    money_initially = solve(equation, x)\n\n    return money_initially[0]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def is_square(n):\n    return n == int(n**0.5) ** 2\n\ndef solution():\n    n = 1\n    while not is_square(2240 / n):\n        n += 1\n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    return lcm(3, 5, 9, 21)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_students = (math_students + art_students) - total_students\n\n    return both_students\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of books on the top shelf be x\n    x = symbols('x')\n\n    # Since each shelf contains 3 fewer books than the one below,\n    # The total number of books is the sum of an arithmetic series:\n    # x + (x-3) + (x-6) + ... + (x-18).\n    # This is an arithmetic series with 7 terms, first term x, and common difference -3\n\n    # The sum of an n-term arithmetic series is given by: n/2 * (2a + (n-1)d)\n    # Where a is the first term and d is the common difference\n    # In this case, n = 7, a = x, and d = -3\n\n    # The equation for the total books is:\n    equation = Eq(7/2 * (2*x + (7-1)*(-3)), 280)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]  # Only one solution will be valid\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote c as the number of candies and k as the number of kids.\n    c, k = symbols('c k')\n\n    # Every kid eats 18 candies, then 12 more candies are needed.\n    equation1 = Eq(c, k * 18 - 12)\n\n    # Every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids.\n    equation2 = Eq(c, (k + 2) * 15)\n\n    # Now we solve the two equations for c and k.\n    solutions = solve((equation1, equation2), (c, k))\n\n    # Return the number of candies.\n    return solutions[c]\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import sqrt, pow\n    expression = 16.7 - pow(((-4.56)**2 - (8.1)**3) / (7.2**3) / (-sqrt(27/4) - (-30.15)), 1/3)\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let 'x' be the number of years later\n    # Oliver's age in x years will be 20 + x\n    # Lin's age in x years will be 26 + x\n    # The sum of their ages will be: (20 + x) + (26 + x) = 48\n\n    # Now we solve for x\n    x = symbols('x')\n    equation = Eq((20 + x) + (26 + x), 48)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Ratio of Jayden's speed to Carter is 7:4\n    ratio_jayden = 7\n    ratio_carter = 4\n    total_ratio = ratio_jayden + ratio_carter\n\n    # Jayden travels this ratio of the distance when they meet the first time\n    distance_when_meet_first_time = (ratio_jayden / total_ratio) * 440\n\n    # Since they meet while Jayden is still going on to place A, Carter has to cover\n    # the rest of the distance when Jayden arrives at place A\n    remaining_distance_for_carter = 440 - distance_when_meet_first_time\n    \n    # This remaining distance corresponds to the ratio of 4 (Carter's speed) + 7 (Jayden's speed)\n    # Jayden will meet Carter after travelling the following distance:\n    distance_jayden_travels_again = (ratio_jayden / total_ratio) * remaining_distance_for_carter\n\n    # Total distance from A is the sum of the distance when they first meet \n    # and the distance Jayden travels again\n    total_distance_from_A = distance_when_meet_first_time + distance_jayden_travels_again\n\n    return total_distance_from_A\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_for_9_items = 6.30\n    price_per_item = cost_for_9_items / 9\n    cost_for_11_items = price_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    equation1 = Eq(mr_age - 7, 6/5 * (mrs_age - 7))\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    students_without_jim = 5\n    mean_without_jim = 87\n    total_mean_with_jim = 88\n    total_students_with_jim = 6\n\n    total_score_without_jim = students_without_jim * mean_without_jim\n    total_score_with_jim = total_students_with_jim * total_mean_with_jim\n\n    jim_score = total_score_with_jim - total_score_without_jim\n\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # cm\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the initial quantity of stickers Sam, Peter, and John had as s, p, and j respectively.\n    s, p, j = symbols('s p j')\n    \n    # We have the following equations based on the problem statement:\n    # 1. Sam and Peter had stickers in the ratio 7:5\n    equation1 = Eq(s/p, 7/5)\n    \n    # 2. Sam and Peter each gave 20% of their stickers to John\n    # So, Sam will have 80% of s left, and Peter will have 80% of p left.\n    # Meanwhile, John's stickers increased by 80%: j + 0.2s + 0.2p = 1.8j\n    equation2 = Eq(0.2*s + 0.2*p, 0.8*j)\n    \n    # 3. After giving away the stickers, Sam had 20 stickers more than John\n    # s - 0.2s (Sam's remaining stickers) equals to j + 0.2*s + 0.2*p (John's new count) + 20\n    equation3 = Eq(0.8*s, j + 0.2*s + 0.2*p + 20)\n    \n    # Solve the equations to find the number of stickers each had originally\n    solutions = solve((equation1, equation2, equation3), (s, p, j))\n    \n    # Return the number of stickers Peter had initially\n    return solutions[p]\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    new_price_after_first_discount = initial_price - first_discount\n    second_discount = new_price_after_first_discount * 0.20\n    final_price = new_price_after_first_discount - second_discount\n\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bats = symbols('bats')\n\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    extra_profit = 2945\n\n    # total cost price equation\n    eq_cost = Eq(bats * cost_price_per_bat, (bats - remaining_bats) * selling_price_per_bat + extra_profit)\n\n    # solve for the number of bats\n    total_bats = solve(eq_cost, bats)\n\n    return total_bats[0]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    minibusses_needed = (boys + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    eldest_boy = 1\n    younger_sisters = 4\n    younger_brothers = 3\n\n    total_children = eldest_boy + younger_sisters + younger_brothers\n\n    return total_children\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair = symbols('chair')\n    equation = Eq(1 * chair + 160 + 5 * chair, 328)\n    solutions = solve(equation, chair)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original amount of money Raja had\n    # Let k represent the original amount of money Kumar had\n    # Since they both had the same amount of money at first, r = k\n    r, k = symbols('r k')\n    \n    # After spending their respective amounts, we have:\n    # Raja's remaining amount: r - 286\n    # Kumar's remaining amount: k - 109\n    \n    # According to the problem, Kumar now has 4 times as much as Raja.\n    # Therefore, (k - 109) = 4 * (r - 286)\n    # And since r = k (they had the same original amount), we can substitute k for r in the equation.\n    equation = Eq(k - 109, 4 * (k - 286))\n\n    # Solve the equation\n    solutions = solve((equation), (k))\n\n    # Since r = k, they both had the same amount of money initially\n    return solutions[k]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    ans = 879 + 268\n    return ans\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the hot tap to fill the bath alone\n    # and y be the time it takes for the cold tap to fill the bath alone\n    x, y = symbols('x y')\n    \n    # The rates of the taps are inversely proportional to the time they take\n    # 1/x is the rate of the hot tap\n    # 1/y is the rate of the cold tap (twice the rate of the hot tap)\n    # Together, their combined rate fills the bath in 10 minutes, so:\n    # 1/x + 1/y = 1/10\n    equation1 = Eq(1/x + 1/y, 1/10)\n    \n    # Since the cold tap's rate is twice that of the hot tap's rate:\n    # 1/y = (2 * 1/x) --> y = x / 2\n    equation2 = Eq(y, x / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We need the time for the cold tap only\n    return solutions[y]\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_numbers = 10\n    mean_of_all = 1111\n    difference_in_means = 240\n\n    # Calculate the total sum of all numbers\n    total_sum = mean_of_all * total_numbers\n\n    # Let's denote the mean of the last 6 numbers as x.\n    # According to the problem, the mean of the first 4 numbers will be x - difference_in_means.\n    # The sum of the first 4 numbers will be 4 * (x - difference_in_means)\n    # The sum of the last 6 numbers will be 6 * x\n    # And the sum of all numbers will be the sum of the first 4 numbers plus the sum of the last 6 numbers:\n    # 4 * (x - difference_in_means) + 6 * x = total_sum\n    # Solve for x:\n\n    x = (total_sum + 4 * difference_in_means) / total_numbers\n\n    return x\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_pounds = 60 / 100  # Converting pence to pounds\n    bud_money_pounds = 1.10  # Bud's money is already in pounds\n\n    total_money = pip_money_pounds + bud_money_pounds\n    return total_money\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let rachel's candy be r and alice's candy be a\n    r, a = symbols('r a')\n\n    # if Rachel gives Alice 10 pieces, they will have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # if Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # calculate total\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for i in range(10):\n        for s in range(10):\n            for p in range(1, 10):\n                if i != s and i != p and s != p:\n                    IS = int(str(i)+str(s))\n                    PI = int(str(p)+str(i))\n                    if IS * 4 == PI:\n                        return PI\n    return None\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate time spent for each segment of the race\n    time1 = 280 / 7  # Time for the first 280 meters\n    time2 = 400 / 5  # Time for the middle 400 meters\n    time3 = (800 - 280 - 400) / 8  # Time for the last sprint segment\n\n    # Total time spent\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    # Given ratio of Joyce's speed to Lori's speed is 3:2\n    joyce_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # Lori's speed in meters per second\n\n    # Calculate Joyce's speed based on the given ratio\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n\n    # Calculate the distance Joyce can run in 10 seconds\n    time = 10  # time in seconds\n    distance_jocye_runs = joyce_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000 # The cost of the bike initially\n    depreciation_rate = 0.12 # The depreciation rate per year\n    years = 8 # After how many years\n\n    final_value = initial_value * (1 - depreciation_rate) ** years # Depreciation calculation\n\n    return round(final_value, 1) # Round the result to the nearest tenth\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    # Number of teams\n    teams = 5\n    # Each team plays every other team once, so calculate combination of 2 teams out of 5\n    total_games = comb(teams, 2)\n    return total_games\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_A_over_20 = 0.6\n    prob_A_over_25_given_over_20 = 0.3\n\n    # According to the definition of conditional probability:\n    # P(A|B) = P(A and B) / P(B)\n    # Here, P(A|B) is the probability of living over 25 given it is already over 20, which is 0.3\n    # P(B) is the probability of living over 20, which is 0.6\n    # We need to find P(A and B), which is the probability of living over 25 (and also over 20, implicitly).\n    \n    prob_A_over_25 = prob_A_over_25_given_over_20 * prob_A_over_20\n\n    return prob_A_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # Distance from house where they meet in metres\n    distance_library = 780  # Distance from house to the library in metres\n    \n    # Don walked for a certain time, let that time be t.\n    # In the same time, Danny meets him at 360m from the house.\n    # Distance Don walked is 'don_speed * t'.\n    # Distance Danny walked is 'distance_library - distance_met'.\n    # So, Danny's speed is '(distance_library - distance_met) / t'.\n    # Don's time (t) can be calculated as 'distance_met / don_speed'.\n    \n    don_time = distance_met / don_speed\n    danny_speed = (distance_library - distance_met) / don_time\n\n    return danny_speed\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping + long_jump) - 2 * both_events\n\n    return only_one_event\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_used = 792\n    pages = total = 0\n    \n    for i in range(1, digits_used+1):\n        if total + i * 9 * 10**(i-1) < digits_used:\n            total += i * 9 * 10**(i-1)\n            pages += 9 * 10**(i-1)\n        else:\n            remaining = (digits_used - total) // i\n            pages += remaining\n            break\n    \n    return pages\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour_g = 1000 + 500  # convert kg to g and add\n    sugar_g = 1000 + 200  # convert kg to g and add\n    butter_g = 900  # already in g\n\n    total_g = flour_g + sugar_g + butter_g  # total weight in g\n    per_tin_g = total_g / 8  # divide equally into 8 tins\n    \n    return per_tin_g\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j/i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can be in 2 positions: far left or far right => 2 possibilities\n    # Once A and B are placed, there are 2 positions left for C and D => 2 possibilities\n    # So, we can place A and B in 2 ways, and C and D in 2 ways.\n    # Total number of ways to line up A, B, C, and D considering the constraint is 2 * 2.\n    \n    total_ways = 2 * 2\n    return total_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq((20/30), square / 27)\n\n    sol = solve(equation, square)\n    return sol[0]\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    red_marbles = 10\n    blue_marbles = 5\n    green_marbles = 8\n    \n    # To ensure she gets at least 4 marbles of the same colour, we have to consider the worst case scenario.\n    # Take out 3 marbles of each colour, which is not enough to ensure 4 of the same colour,\n    # then take out one more marble, which will ensure at least 4 of some colour.\n    min_marbles = (3 * 3) + 1\n\n    return min_marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n    \n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                number = digit1 + digit2\n                two_digit_numbers.add(number)\n    \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    digits.sort()\n\n    for number in digits:\n        if number % 2 == 0:\n            even_digit = number\n            break\n\n    digits.remove(even_digit)\n\n    smallest = digits[0]\n    for number in digits[1:]:\n        smallest = smallest*10 + number\n    smallest = smallest*10 + even_digit\n\n    return smallest\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):  # Starting from the largest two-digit number\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    # Assuming the work done by one worker is the same every day,\n    # the total work done is proportional to the product of workers and days.\n    total_work = workers * days\n    # For one worker, the number of days required is the total work divided by the number of workers (which is 1).\n    days_required = total_work / 1\n    return days_required\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y', integer=True)\n\n    # According to the problem, B is 25 more than six times of A.\n    equation = Eq(6 * (10 * x + y) + 25, 200 * x + 10 * y)\n\n    # Solve for x and y\n    solutions = solve(equation, (x, y))\n    \n    # Validate solutions within the range of 0 to 9 for each digit\n    for sol in solutions:\n        if 0 <= sol[x] <= 9 and 0 <= sol[y] <= 9:\n            A = 10 * sol[x] + sol[y]\n            return A\n    return \"No solution in the digit range\"\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    expressions = [\n        '(285+15)÷5-2',\n        '285+(15÷5)-2',\n        '(285+15÷5)-2',\n        '285+15÷(5-2)',\n        '(285+15)÷(5-2)'\n    ]\n\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr.replace('÷', '/')))\n\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2*a + b, 18)\n    \n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    locked = [False] * 101  # Index 0 unused, lockers numbered from 1 to 100\n\n    # Lock lockers for every number divisible by 3\n    for i in range(3, 101, 3):\n        locked[i] = True\n\n    # Toggle lockers for every number divisible by 5\n    for i in range(5, 101, 5):\n        locked[i] = not locked[i]\n\n    # Count how many lockers are unlocked\n    unlocked_count = locked.count(False) - 1  # Subtract 1 because index 0 is unused\n\n    return unlocked_count\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            if abs(perm.index('D') - perm.index('E')) != 1:\n                if abs(perm.index('F') - perm.index('G')) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current_level = 4\n    yiding_current_level = 3\n    \n    nicolas_reach_level = 16\n    speed_ratio = nicolas_current_level / yiding_current_level\n    \n    yiding_reach_level = nicolas_reach_level / speed_ratio\n    \n    return int(yiding_reach_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the price of one cake\n    equation1 = Eq(10 * x - 11, 0)\n    equation2 = Eq(13 * x - 26, 0)\n\n    solutions = solve((equation1, equation2), (x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    scores = [37, 53, 29, 41]\n    total_matches = 5\n    mean_score = 40\n    total_score = mean_score * total_matches\n    x = total_score - sum(scores)\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    ans = 4336 // 8\n    return ans\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    # Total letters: 6 (C, H, E, E, S, E)\n    total_letters = factorial(6)\n    # Repeating letters: E appears 3 times\n    repeating_e = factorial(3)\n    # Dividing the total permutations by the permutations of the repeating letters\n    ans = total_letters // repeating_e\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        if str(number).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    # Iterate through all possible 5-digit numbers\n    for i in range(10000, 100000):\n        # Original number as a six-digit number with 9 in the units column\n        original_number = i * 10 + 9\n        # New number with the 9 moved to the beginning\n        new_number = int(str(9) + str(i))\n        # Check if the new number is four times the original number\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    \n    smallest_divisor = 1\n    minimum_dividend = quotient * smallest_divisor + remainder\n    \n    return minimum_dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # meters per second\n    time = 10  # seconds\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_jocye_runs = jocye_speed * time\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total number of animals as 'total', and the initial number of goats as 'goats'\n    total, goats = symbols('total goats')\n    \n    # 65% of the animals were cows initially, so 35% were goats\n    # the initial number of goats is 35% of the total\n    # equation1 represents this relationship\n    equation1 = Eq(goats, 0.35 * total)\n    \n    # When 240 more animals are added, the number of cows becomes 85% of the new total (total + 240),\n    # which equals the original number of cows (65% of total) plus 240 additional cows\n    # equation2 represents this relationship\n    equation2 = Eq(0.65 * total + 240, 0.85 * (total + 240))\n    \n    # Additionally, we know that the initial goats (represent by 'goats') doubled.\n    # This gives us a third equation which is the new number of goats is twice the original number\n    # equation3 represents the relationship after adding animals\n    equation3 = Eq(goats * 2, (1 - 0.85) * (total + 240))\n    \n    # We solve the equations to find the initial number of goats\n    solutions = solve((equation1, equation2, equation3), (total, goats))\n    \n    return solutions[goats]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_op(a, b):\n        return a * b + a - b\n\n    ans = custom_op(4, 3) - custom_op(3, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if ABA + CDC == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from itertools import combinations\n\n    teams = 5\n    num_games = len(list(combinations(range(teams), 2)))\n    \n    return num_games\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n\n    # Total work rates combined\n    total_work_rate = alice_work_rate + bob_work_rate\n\n    # Number of days they worked together without break\n    days_worked_together = 27\n\n    # Calculate the total work done by Bob alone\n    work_done_by_bob = bob_work_rate * days_worked_together\n    \n    # Amount of work that needs to be done\n    total_work = 1\n\n    # Calculate the number of days Alice needs to work to finish the job\n    days_alice_needs_to_work = (total_work - work_done_by_bob) / alice_work_rate\n\n    # Calculate the days Alice takes off\n    days_off = days_worked_together - days_alice_needs_to_work\n\n    return days_off\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase_amount = final_amount - initial_amount\n    percentage_increase = (increase_amount / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = 36 * 37 * 38 * 39 * 40 * 41\n    remainder = product % 7\n    return remainder\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages_per_day_slow, days_late, pages_per_day_fast, days_early, total_days = symbols('pages_per_day_slow days_late pages_per_day_fast days_early total_days')\n    pages_per_day_slow = 30\n    days_late = 2\n    pages_per_day_fast = 39\n    days_early = 4\n\n    eq1 = Eq(pages_per_day_slow * (total_days + days_late), pages_per_day_fast * (total_days - days_early))\n    \n    solutions = solve(eq1, total_days)\n    \n    total_days_solution = solutions[0]\n    \n    total_pages = pages_per_day_slow * (total_days_solution + days_late)\n    \n    return total_days_solution, total_pages\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020202020202020'  # one complete cycle in the sequence\n    cycle_length = len(sequence)\n    digit_count = 535\n    \n    # Find how many complete cycles there are\n    complete_cycles = digit_count // cycle_length\n    \n    # Count 2s in one complete cycle\n    twos_per_cycle = sequence.count('2')\n    \n    # Find remainder digits to consider after complete cycles\n    remaining_digits = digit_count % cycle_length\n    \n    # Count the number of 2s in the remainder of the sequence\n    twos_in_remainder = sequence[:remaining_digits].count('2')\n    \n    # Total number of 2s written\n    total_twos = (complete_cycles * twos_per_cycle) + twos_in_remainder\n    \n    return total_twos\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Analyze the pattern based on the given examples\n    # 4 Δ 1 = 4^2 + 1 = 17\n    # 5 Δ 4 = 5^2 + 4 = 29\n    # 8 Δ 16 = 8^2 + 16 = 80\n    \n    # From the above analysis, it seems like the operation Δ can be defined as:\n    # a Δ b = a^2 + b\n    \n    # Now let's apply this to the given problem\n    # 10 Δ 9 = 10^2 + 9\n    ans = 10**2 + 9\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n\n    women = total_passengers - men - children\n\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if 5 * adults + 3 * children == 75:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n    \n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n    \n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fifty-cent coins and y be the number of one-dollar coins Owen had at first\n    x, y = symbols('x y', integer=True)\n    \n    # Initial condition: 2/7 of the coins are fifty-cent coins\n    eq1 = Eq(x, 2/7 * (x + y))\n    \n    # After receiving coins from his mother\n    # Owen receives 10 one-dollar coins and 5 dollars worth of fifty-cent coins, meaning 10 fifty-cent coins\n    eq2 = Eq(x + 10, 1/2 * (y + 10))\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (x, y))\n    \n    # The total initial number of coins is x + y\n    total_coins_initial = solution[x] + solution[y]\n    return total_coins_initial\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass_children = total_mass_boys + total_mass_girls\n    number_of_children = 4 + 6\n\n    average_mass_children = total_mass_children / number_of_children\n\n    return average_mass_children\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    # Let the number of correct answers be x\n    for x in range(total_questions + 1):\n        # Incorrect answers would then be total_questions - x\n        incorrect_answers = total_questions - x\n        # Calculate the total points Eddie could have got\n        score = (x * points_correct) + (incorrect_answers * points_incorrect)\n        # If the calculated score matches the total points, we found the solution\n        if score == total_points:\n            return x\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Equation 1: total marbles\n    eq1 = Eq(anna + betsy + charlene, 168)\n    \n    # Equation 2: Charlene gave 15 marbles to Betsy\n    eq2 = Eq(charlene - 15 - betsy - 15, 0)\n    \n    # Equation 3: Betsy gave 8 marbles to Anna\n    eq3 = Eq(betsy - 15 + 8 - anna + 8, 0)\n    \n    # Equation 4: Ratio of Anna:Betsy:Charlene is 2:5:7\n    eq4 = Eq(anna / (betsy - 7), 2/5)\n    eq5 = Eq((betsy - 7) / (charlene - 15), 5/7)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5), (anna, betsy, charlene))\n    return solutions[betsy]\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    ways = factorial(8) // factorial(8 - 3)\n\n    return ways\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    # Define the individual elements in the sequence\n    numbers = [30, 40, 50]\n    \n    # Calculate the sum of the sequence repeated three times\n    ans = sum(numbers) * 3\n    \n    return ans\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60  # 60% completed, so 40% remaining\n    total_masks = 360 / (remaining_work_percentage / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    balance_mushrooms = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, balance_mushrooms), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    result = 52.8 * 7\n    return result\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # There are 5 students and 40 questions\n    # To maximize the number of questions Noa solves, we need to minimize the number for other students.\n    # Assign 1, 2, 3, and 4 questions to the other students, which sums up to 10 questions.\n    # Now we subtract these 10 questions from the total.\n    total_questions = 40\n    other_students = 1 + 2 + 3 + 4\n\n    # The remaining number of questions can be solved by Noa.\n    noa_questions = total_questions - other_students\n\n    return noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan_age, ted_age = symbols('scan_age ted_age')\n    \n    # Equations based on current age ratio 1:4\n    equation1 = Eq(scan_age, ted_age / 4)\n    \n    # Equations based on age ratio 4 years from now 1:3\n    equation2 = Eq(scan_age + 4, (ted_age + 4) / 3)\n\n    # Solve the system of equations\n    current_ages = solve((equation1, equation2), (scan_age, ted_age))\n    scan_current_age = current_ages[scan_age]\n    ted_current_age = current_ages[ted_age]\n    \n    # Look for 'x' years ago when the ratio was 1:9\n    years_ago = symbols('years_ago')\n    equation3 = Eq(scan_current_age - years_ago, (ted_current_age - years_ago) / 9)\n    \n    # Solve for the number of years ago\n    years_ago_solution = solve(equation3, (years_ago))\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n\n    difference = hottest_temperature - coldest_temperature\n\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    jogging_time = 1  # hours from 6:30 AM to 7:30 AM\n    walking_time = 2  # hours from 7:30 AM to 9:30 AM\n    \n    jogging_speed = 6.5  # miles per hour\n    walking_speed = 4.5  # miles per hour\n    \n    distance_jogged = jogging_time * jogging_speed\n    distance_walked = walking_time * walking_speed\n    \n    total_distance = distance_jogged + distance_walked\n    \n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    multiple = 1000\n    ans = round(number / multiple) * multiple\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    mollies = 276\n    goldfish = mollies // 2\n    guppies = goldfish // 2\n    \n    difference = mollies - guppies\n    return difference\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio_cm_to_m = 2 / 3\n    real_tree_height_m = 12\n\n    model_tree_height_cm = (real_tree_height_m * scale_ratio_cm_to_m)\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n    total_bicycles = 476\n    sold_bicycles = 208\n\n    equation1 = Eq(foldable + non_foldable, total_bicycles)\n    equation2 = Eq(foldable * (5/9) + non_foldable * (4/7), total_bicycles - sold_bicycles)\n\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n    \n    foldable_sold = solutions[foldable] - solutions[foldable] * (5/9)\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    daily_climb = 10\n    daily_slide = 1\n    current_height = 0\n    day = 0\n\n    while current_height < height:\n        day += 1\n        current_height += daily_climb\n        if current_height >= height:\n            break\n        current_height -= daily_slide\n        daily_slide += 1\n\n    return day\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # According to the Pigeonhole Principle, if Valeria distributes (students * (pieces - 1)) + 1 pieces of candy,\n    # there is always at least one student who gets at least 'pieces' of candy.\n    students = 20\n    pieces = 3\n    min_candy = (students * (pieces - 1)) + 1\n    return min_candy\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 0.60 * 765\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To ensure getting a pair of white socks, Yohan could pick all socks of the other colors\n    red_socks = 10  # All red socks\n    black_socks = 10  # All black socks\n    # After picking all red and black socks, he just needs one more white sock to make sure he has a pair\n    white_socks = 1  # Only one white sock needed for a pair after all red and black are picked\n    \n    # Hence, the sum gives the maximum number of socks Yohan must take to get a pair of white socks\n    max_socks = red_socks + black_socks + white_socks\n    return max_socks\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamp_posts = 3\n    total_distance = 50\n    \n    # Calculate the number of intervals between lamp posts based on the flowers planted\n    number_of_intervals = total_flowers // flowers_between_lamp_posts\n    \n    # Calculate the distance between two lamp posts\n    distance_between_lamp_posts = total_distance / (number_of_intervals + 1)\n    \n    return distance_between_lamp_posts\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    # Total marks for all questions if answered correctly: 20 questions * 8 marks each\n    total_marks = 20 * 8\n\n    # Let x be the number of correct answers, then the number of wrong answers is (20 - x).\n    # Marks obtained = 8x - 4(20 - x) = 100 (since Isabelle scores 100 marks)\n    # Simplify the equation: 8x - 80 + 4x = 100\n    # 12x = 180\n    # x = 180 / 12\n    correct_answers = 180 // 12\n\n    return correct_answers\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    books_left = 6\n    position_from_right = 14\n    total_books = books_left + position_from_right\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease = 17\n\n    final_temp = initial_temp - decrease\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    \n    number_of_trees = (road_length // tree_spacing) + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    n = 5\n\n    fifth_number = first_number * (ratio ** (n - 1))\n\n    return fifth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10 ** 7) * (5.4 * 10 ** -12)\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n    \n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // num_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    # Calculate the new dimensions as a proportion of the original\n    new_length_prop = 1.10  # 10% increase\n    new_breadth_prop = 4 / 5  # reduced to 4/5 of the original breadth\n    new_height_prop = 11 / 10  # new height to original height is 11:10\n\n    # Calculate the volume ratio of the new cuboid to the original\n    volume_ratio = new_length_prop * new_breadth_prop * new_height_prop\n\n    # Express the new volume as a percentage of the original volume\n    new_volume_percentage = volume_ratio * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    edge_distance = 1.5\n    distance_between_bushes = 3\n\n    # Calculate the available length for rosebushes by removing the distance from edges twice (both sides).\n    available_length = side_length - 2 * edge_distance\n\n    # The number of rosebushes that fit in one side is obtained by dividing the available length by the distance between bushes.\n    # Since the rosebushes start at edge_distance from the corner, the first interval also measures edge_distance.\n    number_of_bushes_per_side = (available_length + edge_distance) // distance_between_bushes\n\n    # The total number of rosebushes is four times the number on one side since we have four sides of the square.\n    total_number_of_bushes = number_of_bushes_per_side * 4\n\n    return int(total_number_of_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_rate_per_hour = 1 / (12 * 8)\n    q_rate_per_hour = 1 / (8 * 10)\n\n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n    combined_rate_per_day = combined_rate_per_hour * 8\n\n    days_to_complete_job = 1 / combined_rate_per_day\n\n    return days_to_complete_job\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    faster_van_speed = 132  # speed of the faster van in km/h\n    slower_van_speed = 78   # speed of the slower van in km/h\n    time_in_hours = 8       # time after which we need to find the distance apart\n\n    # The distance apart after 8 hours will be the sum of the distances covered by both vans\n    # since they are moving in opposite directions.\n    distance_apart = (faster_van_speed + slower_van_speed) * time_in_hours\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x + 1), 1/6)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since the apples need to be distributed so that no two children get the same number of apples\n    # and each of them gets at least one apple, we can start by giving each child one apple.\n    # This means we have distributed 5 apples, one to each child, and are left with 19 - 5 = 14 apples to distribute.\n    \n    # Then, to maximize the number of apples the child with the most can get, we can give the remaining apples to the child.\n    # However, we must do so while still ensuring no two children get the same number of apples.\n    # We use the smallest possible differences, starting with 2, 3, etc.\n    # So the next minimum distribution can be 1 (base apple), 2 (base apple + 1), 3 (base apple + 2), 4 (base apple + 3).\n    # After we distribute these, we are left with 14 - (1 + 2 + 3 + 4) = 14 - 10 = 4 apples to give to the fifth child.\n  \n    # Therefore, the child with the most can get 1 (base apple) + 4 (additional apples) = 5 apples.\n    # However, we must check if there's still room to give one more to the child who has the most without breaking the unique apple count rule.\n    # The next sequence would be 1, 2, 3, 4, 6 (since 5 is already given), and that adds up to 16,\n    # leaving 19 - 16 = 3 apples, which is fewer than the largest number 6. Therefore, 6 is the maximum possible.\n    \n    max_apples = 1 + 4  # Base apple + additional apples\n    return max_apples\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Pinkie's original score\n    original_score = symbols('original_score')\n\n    # Create the equation based on the problem statement\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    # Solve the equation for Pinkie's original score\n    solutions = solve(equation, original_score)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of the number of apples\n    apple_divisors = divisors(78)\n    # Filter out the even divisors, because the number of bags must be even\n    even_divisors = [d for d in apple_divisors if d % 2 == 0]\n    # The number of ways to divide the apples is the number of even divisors\n    return len(even_divisors)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    scored_marks = 168\n    not_attempted = 3\n    correct_mark = 4\n    wrong_mark = -1\n\n    attempted_questions = total_questions - not_attempted\n    # Let x be the number of correct answers\n    # Then, attempted_questions - x is the number of wrong answers\n    # The total score is then 4x - (attempted_questions - x) = scored_marks\n    # Simplify to 4x - attempted_questions + x = scored_marks\n    # Which is 5x - attempted_questions = scored_marks\n    # Therefore, x = (scored_marks + attempted_questions) / 5\n    correct_answers = (scored_marks + attempted_questions) / (correct_mark - wrong_mark)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let the original number of pencils be 4x and pens be 5x\n    # After taking out a pen and replacing it with a pencil, the pencils become 4x+1 and pens become 5x-1\n    # We know that the new ratio of pencils to pens is 7:8\n    # Thus (4x+1)/(5x-1) = 7/8\n    # Cross multiplying we get 8(4x+1) = 7(5x-1)\n    # Simplifying, 32x + 8 = 35x - 7\n    # So 3x = 15\n    # Therefore x = 5\n    # Now we can calculate the total number of pencils and pens which is 9x (since 4x pencils and 5x pens)\n    x = 5\n    total_items = 9 * x\n    return total_items\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    # Calculate the number of seats using the arithmetic progression sum formula\n    total_seats = (num_rows / 2) * (2 * first_term + (num_rows - 1) * common_difference)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    ans = custom_operation(10, 9)\n    ans = custom_operation(ans, 8)\n    ans = custom_operation(ans, 7)\n    ans = custom_operation(ans, 6)\n    ans = custom_operation(ans, 5)\n    ans = custom_operation(ans, 4)\n\n    return ans\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Worst case scenario to get a pair of white socks:\n    # Yohan takes out all red and black socks.\n    # After taking out 20 socks (10 red and 10 black), the next sock will be white for sure.\n    # Since he needs a pair, he has to take one more white sock out.\n    max_socks = 10 + 10 + 1\n\n    return max_socks\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Let's assume that Mike bought the books for $100 (for simplicity).\n    cost_price = 100\n    \n    # He planned to earn a 60% profit\n    planned_profit = cost_price * 0.6\n\n    # On the first day he sold 70% of the books at a 60% profit\n    first_day_profit = cost_price * 0.7 * 0.6\n\n    # Total profit was 80% of the planned profit\n    total_profit = planned_profit * 0.8\n\n    # Profit from the second day\n    second_day_profit = total_profit - first_day_profit\n\n    # Mike sold 30% of the books on the second day\n    # Let's find the selling price of the remaining 30% of books\n    second_day_selling_price = cost_price * 0.3 + second_day_profit\n\n    # Cost price of the remaining 30% of the books\n    second_day_cost_price = cost_price * 0.3\n\n    # The discount rate is the percentage reduction from the expected selling price\n    expected_selling_price_on_second_day = second_day_cost_price * 1.6  # He wanted a 60% profit\n    \n    discount_rate = ((expected_selling_price_on_second_day - second_day_selling_price) /\n                     expected_selling_price_on_second_day) * 100\n    \n    return discount_rate\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    return 8**2 + 27\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for tens in digits:\n        for ones in digits:\n            if tens != ones and (10 * tens + ones) % 2 != 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the costs of tuna puff and curry puff\n    t, c = symbols('t c')\n\n    # Given data translates to two equations:\n    # 1. The total cost for tuna puffs and curry puffs is $39.60\n    # 2. Each curry puff costs $0.20 less than a tuna puff\n    equation1 = Eq(12*t + 19*c, 39.60)\n    equation2 = Eq(c, t - 0.20)\n\n    # Solving the system of equations gives us the value for t and c\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    \n    # Assume all children are boys first, giving 2 balloons each\n    boys = total_children\n    balloons_given_if_all_boys = boys * 2\n    \n    # Calculate the surplus of balloons when assuming all children are boys\n    surplus = total_balloons - balloons_given_if_all_boys\n    # Each girl receives 2 more balloons than each boy, so divide the surplus by 2\n    # to find the number of girls\n    girls = surplus // 2\n    \n    # Subtract the number of girls from the total number of children to find the number of boys\n    boys -= girls\n    \n    return boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_number = 10\n    end_number = 25\n    numbers_counted = end_number - start_number + 1\n    return numbers_counted\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36  # Speed in meters per minute\n    time_seconds = 200\n    time_minutes = time_seconds / 60  # Convert seconds to minutes\n\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    prod = 1  # Initialize product to 1\n    for i in range(3, 20, 2):  # Iterate through odd numbers from 3 to 19\n        frac = (i + 2) / i  # Calculate each fraction\n        prod *= frac  # Update product\n\n    return prod\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals be 'total'\n    # Let the number of goats be 'goats'\n    total, goats = symbols('total goats')\n\n    # 65% of the animals were cows, so 35% were goats\n    equation1 = Eq(goats, 0.35 * total)\n\n    # 240 more cows and goats were added, cows increased by 20%\n    # which makes it 85% cows and 15% (total + 240) goats\n    # Also, number of goats doubled, so now goats = 2 * goats (original goat count)\n    equation2 = Eq(2 * goats, 0.15 * (total + 240))\n\n    solutions = solve((equation1, equation2), (total, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    total_length_needed_cm = 400 * 85\n    roll_length_cm = 20 * 100\n\n    rolls_needed = total_length_needed_cm / roll_length_cm\n    if rolls_needed != int(rolls_needed):\n        rolls_needed = int(rolls_needed) + 1  # If not a whole number, round up to the next whole roll\n\n    return rolls_needed\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    donation = salary / 4\n    remainder = salary - donation\n    food = (5 / 6) * remainder\n    savings = remainder - food\n\n    equation = Eq(food, donation + 78)\n\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Emma's current age\n    john_age, emma_age = symbols('john_age emma_age')\n\n    # Equation 1: In 3 years, the sum of the ages of John and Emma will be 27\n    equation1 = Eq((john_age + 3) + (emma_age + 3), 27)\n\n    # Equation 2: John is 7 years older than Emma\n    equation2 = Eq(john_age, emma_age + 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    # Solution for Emma's age\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time in minutes he walks at the increased speed\n    t = symbols('t')\n    \n    # Distance covered in the first 10 minutes at the original speed\n    distance_initial = 150 * 10\n    \n    # Distance covered at the increased speed\n    distance_increased = (150 + 50) * t\n    \n    # Total distance is the sum of both parts\n    equation = Eq(distance_initial + distance_increased, 3700)\n    \n    # Solve the equation for t\n    time_increased = solve(equation, t)[0]\n    \n    # Total time spent is the sum of the initial 10 minutes and the time at increased speed\n    total_time = time_increased + 10\n    \n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given 7th term, a7 = 57 and 15th term, a15 = 89 in an arithmetic sequence.\n    # The formula for the nth term of an arithmetic sequence is a_n = a_1 + (n - 1)d, where d is the common difference\n    # We have two equations:\n    # a_7 = a_1 + 6d = 57\n    # a_15 = a_1 + 14d = 89\n\n    # Lets find a_1 from a_7:\n    # a_1 + 6d = 57 --> Equation (1)\n    # Lets find a_1 from a_15:\n    # a_1 + 14d = 89 --> Equation (2)\n\n    # Subtract Equation (1) from Equation (2) to eliminate a_1 and find d\n    # a_1 + 14d - (a_1 + 6d) = 89 - 57\n    # a_1 + 14d - a_1 - 6d = 32\n    # 8d = 32\n    # d = 32 / 8\n    d = (89 - 57) / (15 - 7)\n\n    return d\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences based on the problem description\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n\n    # Solve the system of congruences using Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n\n    # Only return the number if it's less than 400\n    return ans[0] if ans[0] < 400 else None\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len({A, B, C, 4, 7, 1, 9}) == 7:  # all digits are different\n                    number = 4700000 + A * 1000 + 100 + B * 10 + 9 * 1 + C\n                    if number % 9 == 0:  # divisible by 9\n                        return (A, B, C), A + B + C\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    # Initial sweets Ellie has\n    initial_sweets = 240\n    # Sweets gained each week\n    sweets_bought_each_week = 45\n    # Sweets eaten each week\n    sweets_eaten_each_week = 60\n    # Final number of sweets she wants to have left\n    final_sweets = 150\n\n    # Calculate the difference in the number of sweets each week\n    sweets_diff_each_week = sweets_bought_each_week - sweets_eaten_each_week\n\n    # Calculate the number of weeks needed\n    weeks = (initial_sweets - final_sweets) / sweets_diff_each_week\n\n    return int(weeks)\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    choices_per_position = 3  # Since there are 3 digits to choose from: 5, 6, and 7\n    # Each of the three positions (hundreds, tens, ones) can be any of the 3 digits.\n    # Since each digit can be used more than once, we have:\n    total_numbers = choices_per_position ** 3  \n    return total_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    num_sweets = 2  # Start from the remainder when divided by 3, 4, 5, or 6\n    while True:\n        # Check if our current number of sweets satisfies all conditions\n        if (num_sweets % 3 == 2 and num_sweets % 4 == 2 and\n                num_sweets % 5 == 2 and num_sweets % 6 == 2):\n            # We found the smallest number satisfying our conditions\n            return num_sweets\n        num_sweets += 1  # Try the next number\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    total_rackets_price = 2 * racket_price\n    remaining_money = total_money - total_rackets_price\n    num_balls = remaining_money // ball_price\n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # In the worst case, we will pick all balls of two colors first.\n    # Since there are 4 balls of each color, we might pick 4 purple and 4 white,\n    # which means we have to draw 4 + 4 = 8 balls.\n\n    # To ensure we have 3 different colored balls, we must draw one more ball.\n    # That ball will definitely be red, giving us at least 3 different colors.\n\n    num_balls = 4 + 4 + 1\n\n    return num_balls\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_rate = 4\n    jed_chocolates = 137\n    jed_rate = -6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        week += 1\n    \n    return week\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Each right-angled triangle has one side that is a diameter of the circle.\n    # There are 12 choose 2 ways to choose endpoints of a diameter.\n    # For each diameter, there are 10 remaining points that can form a right angle with it.\n    from math import comb\n    diameters = comb(12, 2)\n    remaining_points = 10\n    right_angled_triangles = diameters * remaining_points\n\n    return right_angled_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes of donuts, each with 6 donuts\n    eaten_donuts = 3\n    remaining_donuts = total_donuts - eaten_donuts\n    return remaining_donuts\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    durians_sold = total_durians * (4/6)\n    durians_left = total_durians - durians_sold\n\n    return int(durians_left)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # 3 boxes of apples and 5 boxes of oranges weigh 270kg\n    equation1 = Eq(3 * apples + 5 * oranges, 270)\n\n    # 3 boxes of apples and 7 boxes of oranges weigh 342kg\n    equation2 = Eq(3 * apples + 7 * oranges, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost_cents = 50\n    mamee_cost_cents = haribo_cost_cents - 30\n    big_jelly_cost_cents = 6 * mamee_cost_cents\n    big_jelly_cost_dollars = big_jelly_cost_cents / 100\n    return big_jelly_cost_dollars\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    roses_initially_divided = 24\n    vases_initially = 3\n    roses_per_vase_initially = roses_initially_divided / vases_initially\n    \n    vases_after_mother_brings_more = 4\n    total_roses_after_mother_brings_more = roses_per_vase_initially * vases_after_mother_brings_more\n    \n    return int(total_roses_after_mother_brings_more + roses_initially_divided)\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    from num2words import num2words\n    \n    number_sum = 2405 + 1827\n    ans = num2words(number_sum)\n\n    return ans\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences can be written as:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    number = solve_congruence(*congruences)\n    \n    # Since we are considering only numbers less than 100, we need the smallest positive solution\n    ans = number[0] % number[1]\n    while ans > 100:\n        ans -= number[1]\n    \n    return ans\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    # Will hates to eat candy in mint flavour, so he won't eat it.\n    # Calculate the maximum number of candies he can eat, excluding mint flavour.\n    max_candies = lemon_candies + cherry_candies\n\n    return max_candies\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    number1 = -18\n    number2 = -2\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            if (10*A + B) % 2 == 0:\n                for C in range(10):\n                    if (10*B + C) % 3 == 0:\n                        for D in range(1, 10):\n                            if (10*C + D) % 5 == 0:\n                                if (100*A + 10*B + C) % 9 == 0:\n                                    if (100*B + 10*C + D) % 11 == 0:\n                                        return 1000*A + 100*B + 10*C + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    \n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if all(num % divisor == divisor - 1 for divisor in [2, 3, 4, 5]):\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_to_determine_winner = num_teachers - 1\n    return games_to_determine_winner\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = 20 + 19 + 18 + 17 + 16 - 15 - 14 - 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the children's ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Equations based on the problem statement\n    eq1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    eq2 = Eq(younger_son, older_son + 3)\n    eq3 = Eq(younger_daughter, older_daughter + 2)\n    eq4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Get the youngest child's age\n    youngest_child_age = min(solutions.values())\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the wallet and the watch\n    wallet, watch = symbols('wallet watch')\n\n    # Create equations based on the given information\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    decimal_part = '428571'\n    length = len(decimal_part)\n    total_digits = 58\n\n    sum_of_digits = sum(int(decimal_part[i % length]) for i in range(total_digits))\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    total_distance = eddie + jenny + jason\n    average_distance = total_distance / 3\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n    \n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    # Number of ways to arrange books considering duplicates \n    ways = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n    \n    return ways\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string_length = 13\n    difference_in_length = 25\n\n    nicks_string_length = toms_string_length + difference_in_length\n\n    return nicks_string_length - toms_string_length\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_total = 50\n    students_chicken_tenders = 18\n\n    percentage = (students_chicken_tenders / students_total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # The amount of solution to exchange\n\n    # Equation based on the sugar mass conservation\n    # A: 0.11 * (50 - x) + 0.47 * x = B: 0.47 * (50 - x) + 0.11 * x\n    equation = Eq(0.11 * (50 - x) + 0.47 * x, 0.47 * (50 - x) + 0.11 * x)\n\n    # Solve the equation for x\n    solution_exchange = solve(equation, x)\n\n    return solution_exchange[0]\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    from itertools import permutations\n    \n    cards = ['1', '3', '6']\n    three_digit_numbers = set(permutations(cards, 3))  # get all permutations of length 3, remove duplicates\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_of_plot = 20 * 100  # converting meters to centimeters\n    distance_apart = 40\n    first_cauliflower_distance = 20\n\n    # The available length for planting is reduced by the distance of the first plant from the end\n    available_length = length_of_plot - first_cauliflower_distance\n\n    # The number of cauliflowers is the available length divided by the distance apart + 1 for the first cauliflower\n    num_cauliflowers = available_length // distance_apart + 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    # Get all combinations of 4 unique numbers that sum to 15.\n    # The range goes from 1 to 12 (inclusive) as the minimum number for a pile of candies is 1 and\n    # the maximum number when having 4 different piles is 12.\n    # 12 is chosen to allow the minimum numbers for the remaining piles (1, 2, 3).\n    all_combinations = combinations(range(1, 12), 4)\n    \n    count = sum(1 for combination in all_combinations if sum(combination) == 15)\n    return count\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_numbers = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 < 51:\n            prime_numbers.append(num)\n        elif isprime(num) and isprime(num - 6) and num - 6 > 1:\n            prime_numbers.append(num)\n    return list(set(prime_numbers))\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_metres = 3.7 + 64 / 100\n    total_metres -= 2 + 7 / 100\n    return total_metres\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max buys 1 banana and 2 pears\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    # Emily buys 1 banana and 1 pear\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    # fibonacci sequence is defined as F(n) = F(n-1) + F(n-2)\n    # The sequence given seems to be a fibonacci sequence starting at 1\n    # We continue the sequence to find the next number after 21\n\n    a, b = 1, 2  # initialize the first two numbers of the sequence\n    while True:\n        a, b = b, a + b  # apply fibonacci rule\n        if a > 21:  # we stop as soon as we go beyond 21\n            break\n    return a\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    total_rabbits = 59\n    for white_rabbits in range(total_rabbits + 1):\n        black_rabbits = white_rabbits - 9\n        grey_rabbits = total_rabbits - white_rabbits - black_rabbits\n        if (black_rabbits + white_rabbits) == grey_rabbits + 11:\n            return white_rabbits\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is a geometric sequence where each term is 2 times the previous term\n    # The nth term of a geometric sequence can be calculated as a * r^(n-1) where a is the first term and r is the common ratio\n    # In this sequence, a = 1 and r = 2\n    # We can find the 20th and 17th terms by using the formula for the nth term of a geometric sequence\n\n    # 20th term is 2^(20-1) = 2^19\n    term_20 = 2 ** 19\n\n    # 17th term is 2^(17-1) = 2^16\n    term_17 = 2 ** 16\n\n    # Divide the 20th term by the 17th term\n    ans = term_20 // term_17\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_integers = 35\n    max_product = 0\n    for i in range(1, sum_of_integers // 2 + 1):\n        j = sum_of_integers - i\n        max_product = max(max_product, i * j)\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    num_days_worked = 6 \n    total_weekly_earnings = average_daily_earnings * num_days_worked\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    # Smallest two-digit prime number\n    smallest_prime = 11\n    # Largest two-digit square number, as the square root of 100 is 10,\n    # we take the previous integer square which is 9^2\n    largest_square = 81\n    \n    # Calculate the product\n    product = smallest_prime * largest_square\n    \n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    distance_per_flag = distance_1_to_4 / 3\n    distance_1_to_9 = distance_per_flag * 8\n    return distance_1_to_9\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Total number of books Alice, Becky, and Crystal have together\n    total_books_abc = 3 * 60\n    \n    # New average when Dennis is included\n    new_average = 60 + 10\n\n    # Total number of books all four have together\n    total_books_abcd = 4 * new_average\n\n    # Dennis's number of books\n    dennis_books = total_books_abcd - total_books_abc\n\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n    \n    num_necklaces = total_beads // beads_per_necklace\n    \n    return num_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Since the number of students is greater than 1 and less than 233,\n    # the question is essentially asking if 233 is a prime number.\n    # A prime number has exactly two distinct positive divisors: 1 and itself.\n    # Therefore, if 233 is prime, it cannot be evenly divided among the students.\n\n    # Check if 233 is prime\n    if 233 > 1:\n        for i in range(2, int(233 ** 0.5) + 1):\n            if (233 % i) == 0:\n                return False  # 233 is not a prime number\n        else:\n            return True  # 233 is a prime number\n    else:\n        return False  # 233 is not a prime number (since it's not greater than 1)\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Assign the respective values to each place\n    hundredths = 7 * 0.01\n    tenths = 6 * 0.1\n    ones = 4 * 1\n\n    # Sum the values to get the number\n    number = ones + tenths + hundredths\n\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    speed_downstream = speed_ship + speed_current\n    distance = 200\n    time = distance / speed_downstream\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    return 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a_students, b_students, peaches = symbols('a_students b_students peaches')\n\n    equation1 = Eq(peaches, 5 * a_students + 10)\n    equation2 = Eq(peaches, 8 * b_students - 2)\n    equation3 = Eq(a_students, b_students + 3)\n\n    solutions = solve((equation1, equation2, equation3), (a_students, b_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_pen = pen_cost // pencil_cost\n    \n    return pencils_for_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 36\n    \n    for correct_questions in range(total_questions + 1):\n        incorrect_questions = total_questions - correct_questions\n        if points_correct * correct_questions + points_incorrect * incorrect_questions == total_points:\n            return correct_questions\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n    ways_to_go_to_france = trains + buses + flights\n    return ways_to_go_to_france\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the 7 dancing performances: DDDDDDD\n    # There are 6 spaces between them, and we want to place the 3 playing a sketch performances in those spaces\n    # ways_to_place_sketch = number of ways to choose 3 spaces from 6\n    ways_to_place_sketch = factorial(6) // factorial(3) // factorial(6 - 3)\n    \n    # Calculate the factorial for the number of dancing performances\n    dancing_factorial = factorial(7)\n    \n    # The total number of arrangements is the product of the two\n    total_arrangements = ways_to_place_sketch * dancing_factorial\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Initialize variable h\n    h = symbols('h')\n\n    # We want to find h such that 28512/h is a perfect cube\n    equation = Eq(28512/h - h**2, 0)\n\n    # Solve for h such that the equation holds true\n    solutions = solve(equation)\n\n    # Loop through solutions to find which one is an integer and a factor of 28512\n    for sol in solutions:\n        if sol.is_integer and 28512 % sol == 0:\n            return sol\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Logic: To ensure he gets 2 M&M's of different colors, he has to pick \n    # at least one of each color. Once he has one of each color, the very next \n    # M&M will ensure that he has two of different colors.\n    \n    # Count the total number of colors\n    total_colors = 3\n    \n    # One of each color\n    one_of_each_color = total_colors\n    \n    # The next M&M ensures two of different colors\n    next_m_and_m = 1\n    \n    # Minimum M&M's to take out\n    min_m_and_m_chips = one_of_each_color + next_m_and_m\n    \n    return min_m_and_m_chips\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # The problem described is a classic example of a derangement problem,\n    # also known as the subfactorial or !n, which gives the number of derangements for n elements.\n    # A derangement is a permutation of the elements of a set such that none of the elements appear in their original position.\n    # The formula for finding the subfactorial of n (denoted as !n) is:\n    # !n = (n - 1) * (!(n - 1) + !(n - 2))\n    \n    # Base cases for derangement of 0 and 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    \n    # Recursive function to find derangement\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        \n        return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    # The number of friends we have is 7\n    num_friends = 7\n    \n    # Calculate the number of ways to derange 7 friends\n    num_ways = subfactorial(num_friends)\n    \n    return num_ways\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    num_families = 10\n    people_per_family = 3  # father, mother, child\n\n    # Each father shakes hands with everyone else except his own family members\n    handshakes_fathers = num_families * (num_families - 1) * people_per_family\n\n    # Each mother shakes hands with all fathers and children from other families but not with other mothers or her own family members\n    handshakes_mothers = num_families * (num_families - 1) * (people_per_family - 1)\n\n    # Each child shakes hands with all fathers and mothers from other families but not with other children or his/her own family members\n    handshakes_children = handshakes_mothers\n\n    # Total handshakes\n    total_handshakes = handshakes_fathers + handshakes_mothers + handshakes_children\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415927\n    c = 31415925\n    ans = (a ** 2) - (b * c)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    total_meters = 3.7          # 3.7 meters\n    total_meters += 64 / 100    # 64 cm to meters and add to total\n    total_meters -= 2           # subtract 2 meters\n    total_meters -= 7 / 100     # 7 cm to meters and subtract from total\n    \n    return total_meters\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # The given decimal is a repeating decimal: 0.852784\n    # The repeating sequence: 852784\n    # Calculate the position of the 79th digit in the repeating sequence\n    sequence = \"852784\"\n    position = (79 - 1) % len(sequence)  # Subtract 1 because indexing starts at 0\n\n    # Find the 79th digit in the sequence\n    digit = sequence[position]\n    return int(digit)\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for number in range(999, 99, -1):\n        if (number + 2009) % 17 == 0 and (number + 2009) % 19 == 0:\n            return number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill_amount = 82\n    hours_free = 40\n    cost_after_free_up_to_50 = 5\n    cost_after_50_up_to_60 = 8\n    cost_after_60 = 15\n    \n    # Calculate bill without the free hours\n    bill_amount -= cost_after_free_up_to_50 * 10  # 10 hours at $5 per hour\n    bill_amount -= cost_after_50_up_to_60 * 10     # 10 hours at $8 per hour\n    \n    # Calculate hours after 60\n    hours_after_60 = bill_amount // cost_after_60\n    \n    # Total hours parked\n    total_hours_parked = hours_free + 20 + hours_after_60  # Free hours + 20 paid hours + additional\n    return total_hours_parked\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    actual_sum = 1939\n    missing_page_number = total_sum - actual_sum\n    return missing_page_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # You need 3 + 1 draws from the most populous color + all draws from other colors to ensure that\n    # the fourth color is included in worst case scenario using Pigeonhole Principle.\n    red, green, blue, orange = 4, 7, 6, 2\n\n    # In the worst case, we pick all but one of the three most common marbles and all marbles of the least common color\n    worst_case_draws = (green - 1) + (blue - 1) + (red - 1) + orange\n\n    # But we need one more draw to ensure the fourth color is included\n    ans = worst_case_draws + 1\n\n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket in range(0, 999):\n        next_ticket = ticket + 1\n        if ticket + next_ticket == 777:\n            return next_ticket + 1\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define the recursive function to count the ways to climb stairs\n    def count_ways(steps_left, can_step_on_fifth):\n        if steps_left < 0:\n            return 0\n        elif steps_left == 0:\n            return 1\n        # If stepping on fifth step is not allowed and there's only 1 step left to it\n        elif steps_left == 1 and not can_step_on_fifth:\n            return 0\n        else:\n            # If currently on the fourth step and the next step is the fifth\n            if steps_left == 5 and can_step_on_fifth:\n                # Avoid the next step - the muddy fifth step\n                return count_ways(steps_left - 1, False)\n            else:\n                # Sum the ways to climb 1, 2 or 3 steps at a time\n                return (count_ways(steps_left - 1, True) +\n                        count_ways(steps_left - 2, True) +\n                        count_ways(steps_left - 3, True))\n\n    # Calculate the number of different ways to climb up the stairs\n    ans = count_ways(10, True)\n\n    return ans\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    primes = list(primerange(10, 100))\n    smallest_two_digit_prime = primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(10, 32):  # since 32^2 is greater than 99\n        square = i**2\n        if square < 100:\n            largest_two_digit_square = square\n        else:\n            break\n\n    return smallest_two_digit_prime * largest_two_digit_square\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n\n    total_earnings = average_earnings_per_day * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x - 2 * x + 7, 6 * x + 4 * x - 14)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    one_hundred_less = number - 100\n    \n    return one_hundred_less\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Since we need the maximum value for the largest number,\n    # we should minimize the sum of the other four numbers.\n    # Given they are positive odd numbers, the smallest such numbers are 1, 3, 5, and 7.\n\n    # The sum of the first four smallest positive odd numbers\n    sum_of_smallest_four = 1 + 3 + 5 + 7\n\n    # Subtracting this from the total to find the largest number\n    largest_number = 85 - sum_of_smallest_four\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    tax_eq1 = Eq(T/100 * 30000 + (T + 3)/100 * (income - 30000), (T + 1)/100 * income)\n    income_eq = solve(tax_eq1, income)\n\n    return income_eq[0]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of students in each class\n    students_A, students_B, peaches = symbols('students_A students_B peaches')\n\n    # Create the equations based on the problem\n    equation1 = Eq(peaches, 5 * students_A + 10)  # If all peaches given to Class A\n    equation2 = Eq(peaches, 8 * students_B - 2)  # If all peaches given to Class B but short of 2 peaches\n    equation3 = Eq(students_A, students_B + 3)  # Class A has 3 more students than Class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (students_A, students_B, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes = 2.5\n    seconds_per_minute = 60\n    n = minutes * seconds_per_minute\n    return int(n)\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for distances\n    distance = symbols('distance')\n\n    # Phillip walks the whole distance in 12 minutes\n    phillip_speed = distance / 12\n\n    # Alan walks the same distance but takes 3 minutes more\n    alan_speed = distance / (12 + 3)\n\n    # Phillip walks 15 meters more than Alan per minute\n    equation = Eq(phillip_speed, alan_speed + 15)\n\n    # Solve for the distance\n    solution = solve(equation, distance)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)  # C(8, 4)\n    ways_to_pick_boys = comb(12, 3)   # C(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of 50-cent coins, and y be the number of 20-cent coins.\n    x, y = symbols('x y')\n\n    # Set up the equations based on the problem statement:\n    # x + y = 21 (total number of coins)\n    equation1 = Eq(x + y, 21)\n    # 0.50x + 0.20y = 6.30 (total value of coins)\n    equation2 = Eq(0.50*x + 0.20*y, 6.30)\n\n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want the number of 50-cent coins\n    return solutions[x]\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import sqrt, floor\n\n    count = 0\n    number = 2\n\n    for _ in range(5):\n        if floor(sqrt(number)) == sqrt(number):\n            count += 1\n        number = number * 10 + 5\n\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_original, tom_original = symbols('alice_original tom_original')\n\n    equation1 = Eq(alice_original - 36, tom_original - 25.40)\n    equation2 = Eq(tom_original, 68.10)\n\n    solutions = solve((equation1, equation2), (alice_original, tom_original))\n\n    return solutions[alice_original]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    # Mean of first five numbers\n    mean1 = 28\n    # Mean of second set of twelve numbers\n    mean2 = 11\n    \n    # Total of first five numbers\n    total1 = mean1 * 5\n    # Total of second set of twelve numbers\n    total2 = mean2 * 12\n    \n    # Total numbers in both sets\n    total_numbers = 5 + 12\n    \n    # Calculating the combined mean\n    combined_mean = (total1 + total2) / total_numbers\n    \n    return combined_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = 0.20\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_gaps = 9 - 1  # As there are 9 benches, there will be 8 gaps between them\n    \n    total_length_of_gaps = distance_between_benches * number_of_gaps\n    bench_length = (total_distance - total_length_of_gaps) / 9\n    \n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in class A as 'a' and class B as 'b'\n    # Let 'c' be the total number of candies that Miss Jenny has.\n    a, b, c = symbols('a b c')\n\n    # From the problem description, we have two equations:\n    # Equation 1: 4*a = c - 20 -> Each student in class A gets 4 candies, 20 more are needed\n    # Equation 2: 6*b = c + 16 -> Each student in class B gets 6 candies, with 16 left over\n\n    # We also know that:\n    # Equation 3: a = 2*b -> The number of students in class A is twice the number of students in class B\n\n    # Now we can create our equations based on the problem description\n    equation1 = Eq(4*a, c - 20)\n    equation2 = Eq(6*b, c + 16)\n    equation3 = Eq(a, 2*b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Return the value of 'c' which represents total number of candies\n    return solutions[c]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Initialize the number of arms originally and the number of arms cut\n    original_arms = 0\n    cut_arms = 0\n    \n    # loop until the number of arms cut reach 21\n    while cut_arms < 21:\n        # cut one arm\n        original_arms += 1\n        cut_arms += 1\n        \n        # if 5 arms are cut, then one arm grows back\n        if cut_arms % 5 == 0:\n            original_arms -= 1\n    \n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    total_sum = 2021\n    third_greatest = 246\n    \n    # The sum of the three greatest numbers is at least 3 times the third greatest number\n    sum_three_greatest = third_greatest * 3\n    \n    # Subtract the sum of the three greatest from the total\n    remaining_sum_for_seven_numbers = total_sum - sum_three_greatest\n    \n    # If the remaining 7 numbers are 1, 2, ..., 7, the sum is minimized for the fourth greatest\n    min_sum_seven_numbers = sum(range(1, 8))\n    \n    # The fourth greatest is then the remaining sum minus this minimum possible sum\n    fourth_greatest_min = remaining_sum_for_seven_numbers - min_sum_seven_numbers\n \n    return fourth_greatest_min\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Assuming the worst case where we take out all coins of one color first\n    # 6 gold + 1 silver or 6 silver + 1 gold\n    # We need to take out one more to ensure we have 2 different colored coins\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Distance between 1st to 5th tree involves 4 intervals (5 - 1)\n    # 4 intervals = 20 cm\n    # 1 interval = 20 cm / 4\n    interval_distance = 20 / 4\n    \n    # Distance between 8th to 14th tree involves 6 intervals (14 - 8)\n    # 6 intervals = 6 * interval_distance\n    distance_8th_to_14th = 6 * interval_distance\n    \n    return distance_8th_to_14th\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    ans = 0\n    for i in range(1, 25):\n        is_coprime = True\n        for j in range(2, min(i, 25 - i) + 1):\n            if i % j == 0 and (i + 1) % j == 0:\n                is_coprime = False\n                break\n            if i % j == 0 and (i - 1) % j == 0:\n                is_coprime = False\n                break\n        if is_coprime:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    length = 5\n    width = 3\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip = 7\n    kevin = pip * 3\n    qing_qing = kevin + 6\n    total_sweets = pip + kevin + qing_qing\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    devi, jerry = symbols('devi jerry')\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    grey_birth_age = 0\n    father_birth_age = 30\n\n    # When Grey was born, his father was 30 years old.\n    # Let's consider the difference in their ages.\n    age_difference = father_birth_age - grey_birth_age\n\n    # This year, the age of Grey's father is three times that of Grey's age.\n    equation = Eq(father_age, 3 * grey_age)\n\n    # The difference in age between Grey and his father would always be the same.\n    equation2 = Eq(father_age - grey_age, age_difference)\n\n    # Solve the system of equations.\n    solutions = solve((equation, equation2), (grey_age, father_age))\n\n    # Father's age this year is what we want to find.\n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    return \"This problem cannot be solved using a Python code block because it requires drawing a 'parts' graph which involves visual representation.\"\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    value = 10 * (numerator / denominator)\n    return value\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n\n    # Using the Pigeonhole Principle, we add one to the quotient of the total books divided by\n    # the number of layers because dividing the books evenly will leave a remainder, hence\n    # at least one layer will have more books than a simple division would suggest.\n    min_books_most_layer = (total_books // total_layers) + 1\n\n    return min_books_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate the number of rows\n    num_rows = ((last_term - first_term) / difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum_seats = (num_rows / 2) * (first_term + last_term)\n\n    return int(sum_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    import itertools\n    digits = [3, 6, 9]\n    permutations = list(itertools.permutations(digits, 3))\n    count = len(permutations)\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    numbers = [0.12, 0.345, 0.6789]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    digit_1_options = 2  # Can be either 1 or 2 (can't be 0)\n    digit_2_options = 3  # Can be 0, 1, or 2\n    digit_3_options = 2  # Can be 0, 1, or 2, but one has already been used up\n\n    return digit_1_options * digit_2_options * digit_3_options\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    ans = cows - pigs\n    return ans\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n\n    # Iterate through values in the range [100, 200] to find a possible match\n    for num in range(100, 201):\n        if num % ans[1] == ans[0]:\n            return num\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    divisor = 12 + 1  # since the quotient is 12, the next number is the smallest divisor\n    remainder = 3\n    dividend = divisor * 12 + remainder  # The formula for the dividend is divisor*quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Hazel's current age and Jessica's current age\n    h_current = symbols('h_current') # Hazel's age now\n    j_current = h_current - 3 # Jessica's age now, which is 3 years less than Hazel's age\n\n    # Express their ages in 3 years\n    h_in_3_years = h_current + 3\n    j_in_3_years = j_current + 3\n\n    # Express their ages next year\n    h_next_year = h_current + 1\n    j_next_year = j_current + 1\n\n    # Calculate their total age next year\n    total_age_next_year = h_next_year + j_next_year\n\n    # Since Jessica is 3 years younger than Hazel and we're looking at ages in the future,\n    # we don't need to solve for an actual number, just transform the expression\n    total_age_next_year = total_age_next_year.subs(h_current, h_in_3_years - 3)\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_animals = symbols('initial_animals')\n    initial_goats = symbols('initial_goats')\n    \n    # initial percentage of cows, so 65% of initial animals were cows\n    initial_cows = 0.65 * initial_animals\n    \n    # the rest were goats before additional animals were added\n    equation1 = Eq(initial_goats, initial_animals - initial_cows)\n    \n    # after 240 more cows and goats were added\n    new_total_animals = initial_animals + 240\n    \n    # percentage of cows increased by 20% to 85%\n    new_cows = 0.85 * new_total_animals\n    \n    # number of goats doubled\n    new_goats = 2 * initial_goats\n    \n    # The equation to relate initial cows and new cows\n    equation2 = Eq(new_cows, initial_cows + 240 - (new_goats - initial_goats))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2))\n    \n    return solutions[initial_goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    section1_cm = 30\n    section2_cm = 1.5 * 100\n    section3_cm = 150 / 10\n\n    total_width_cm = section1_cm + section2_cm + section3_cm\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n\n    uncle_age = uncle_future_age - (uncle_future_age - melanie_age)\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pounds = 3.00 * 100\n    percentage = (15 / pence_in_pounds) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students_facing_teacher = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            students_facing_teacher -= 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(2, 1) + Fraction(3, 8) + Fraction(6, 1) + Fraction(9, 12) + Fraction(1, 1) + Fraction(14, 16)\n    return float(result)\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_in_3_years = amy_age_5_years_ago\n    sister_age_now = sister_age_in_3_years - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of all variables\n    # In the monomial -x^3y^(2n), the degree is 3 (from x^3) plus 2n (from y^(2n))\n    # According to the question, the degree of the monomial is 5\n    # Therefore, 3 + 2n = 5\n    # Solving for n\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # According to the pigeonhole principle, if there are n pigeonholes and m > n\n    # pigeons to be put into the pigeonholes, at least one pigeonhole must contain\n    # more than one pigeon. Here, the \"pigeonholes\" are the card numbers/letters\n    # (1, 2, 3, ... , 10, J, Q, K), which makes a total of 13 pigeonholes.\n\n    # There are 4 suits, so for each number/letter, there are 4 cards.\n\n    # To ensure that we have at least two cards of the same number/letter,\n    # we need to draw one card more than the number of pigeonholes.\n\n    num_pigeonholes = 13\n    ans = num_pigeonholes + 1  # Drawing one more card to ensure at least a pair\n\n    return ans\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "from itertools import product\n\ndef solution():\n    smallest = float('inf')\n    for digits in product(range(10), repeat=3):\n        if sum(digits) == 21 and 100 * digits[0] + 10 * digits[1] + digits[2] > 99 and digits[2] % 2 == 0:\n            number = 100 * digits[0] + 10 * digits[1] + digits[2]\n            smallest = min(smallest, number)\n    return smallest\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21)) + sum(2 / i for i in range(3, 21)) + \\\n          sum(3 / i for i in range(4, 21)) + sum(4 / i for i in range(5, 21)) + \\\n          sum(5 / i for i in range(6, 21)) + sum(6 / i for i in range(7, 21)) + \\\n          sum(7 / i for i in range(8, 21)) + sum(8 / i for i in range(9, 21)) + \\\n          sum(9 / i for i in range(10, 21)) + sum(10 / i for i in range(11, 21)) + \\\n          sum(11 / i for i in range(12, 21)) + sum(12 / i for i in range(13, 21)) + \\\n          sum(13 / i for i in range(14, 21)) + sum(14 / i for i in range(15, 21)) + \\\n          sum(15 / i for i in range(16, 21)) + sum(16 / i for i in range(17, 21)) + \\\n          sum(17 / i for i in range(18, 21)) + sum(18 / i for i in range(19, 21)) + \\\n          sum(19 / i for i in range(20, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    speed_per_minute = 60  # meters per minute\n    time_in_seconds = 150  # seconds\n    time_in_minutes = time_in_seconds / 60  # convert seconds to minutes\n\n    distance = speed_per_minute * time_in_minutes  # distance = speed * time\n    \n    return distance\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_amount = 156\n    price_cactus = 2\n    price_sunflower = 7\n    for sunflowers in range(total_amount // price_sunflower + 1):\n        cacti = sunflowers + 6\n        if price_cactus * cacti + price_sunflower * sunflowers == total_amount:\n            return cacti\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book = symbols('book')\n    pencil_price = 40 / 100  # converting pence to pounds\n\n    equation = Eq(8 * book + 3 * pencil_price, 3 * book + 8 * pencil_price + 1)\n\n    book_price = solve(equation, book)[0]\n\n    return book_price\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    result = 10 * (numerator / denominator)\n    return result\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    poured_water_per_jug = 2\n    number_of_jugs = 6\n\n    water_left = total_water - (poured_water_per_jug * number_of_jugs)\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    liverpool_fans_initial, manchester_fans_initial = symbols('liverpool_fans_initial manchester_fans_initial')\n\n    equation1 = Eq(liverpool_fans_initial, manchester_fans_initial + 1000)\n    equation2 = Eq(manchester_fans_initial * 3, liverpool_fans_initial + 472 - 4836)\n\n    solutions = solve((equation1, equation2), (liverpool_fans_initial, manchester_fans_initial))\n\n    return solutions[liverpool_fans_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    ans = 12.5 * 32\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknown variables\n    book_price = symbols('book_price')\n\n    # Define the equation based on the problem statement\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1)\n\n    # Solve the equation for the price of the book\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew = 20\n    jack = andrew + 18\n    return jack\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ways_to_choose = comb(total_players, players_needed)\n    return ways_to_choose\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining = 3 + 2  # Money after giving $2 to Mike\n    remaining *= 2  # Money before giving to Nini\n    remaining *= 2  # Money before giving to Bob\n    remaining *= 2  # Money before giving to mother\n    return remaining\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define unknowns\n    peaches = symbols('peaches')\n    classB_students = symbols('classB_students')\n\n    # Given conditions\n    equation1 = Eq(peaches - (5 * (classB_students + 3) + 10), 0)\n    equation2 = Eq(8 * classB_students + 2 - peaches, 0)\n\n    # Solve for the number of peaches and number of students in class B\n    solutions = solve((equation1, equation2), (peaches, classB_students))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number = 1\n    digit_place = 0\n\n    # Compute number of digits in groups of same length\n    while True:\n        next_number = current_number * 10\n        digits_in_group = (next_number - current_number) * len(str(current_number))\n\n        if digit_place + digits_in_group >= 2023:\n            break\n\n        digit_place += digits_in_group\n        current_number = next_number\n\n    # Find the exact number where the 2023rd digit is\n    remaining_digits = 2023 - digit_place\n    num_digits_in_number = len(str(current_number))\n    full_numbers_to_pass = (remaining_digits - 1) // num_digits_in_number\n    target_number = current_number + full_numbers_to_pass\n    digit_in_target_number = (remaining_digits - 1) % num_digits_in_number\n\n    # Find the exact digit\n    ans = int(str(target_number)[digit_in_target_number])\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    current_year = 1\n\n    age_on_next_birthday = 11\n    years_passed_since_birth = current_year - birth_year\n\n    # If the current_year is less than birth_year, it indicates a century change,\n    # hence we add 100 years to account for the previous century.\n    if current_year < birth_year:\n        years_passed_since_birth += 100\n\n    # Age on the date 31/12/01 would be one less than the age on the next birthday\n    age_on_31_12_01 = age_on_next_birthday + years_passed_since_birth - 1\n\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "def solution():\n    from itertools import permutations\n\n    digits = [4, 6, 2, 5]\n    all_numbers = sorted(int(''.join(map(str, perm))) for perm in permutations(digits))\n    for num in all_numbers:\n        if num % 2 != 0:  # checking if the number is odd\n            return num\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals in the farm initially be x\n    x = symbols('x')\n    \n    # Initial number of cows: 0.65 * x\n    # Initial number of goats: x - 0.65 * x = 0.35 * x\n    initial_goats = 0.35 * x\n\n    # After adding 240 animals, the new total is x + 240\n    # The percentage of cows increased by 20%, so now it is 65% + 20% = 85%\n    # Number of goats doubled: 2 * initial_goats = 2 * 0.35 * x\n\n    # Now, the number of cows is 0.85 * (x + 240)\n    # Hence, the number of goats after adding animals is (x + 240) - 0.85 * (x + 240)\n    # Since the number of goats doubled, we have the equation:\n    # 2 * (0.35 * x) = (x + 240) - (0.85 * (x + 240))\n\n    equation = Eq(2 * (0.35 * x), (x + 240) - (0.85 * (x + 240)))\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    # Number of goats initially\n    initial_goats = 0.35 * solutions[0]\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n\n    trips = total_students // boat_capacity\n    if total_students % boat_capacity != 0:\n        trips += 1\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    target_term = 36\n\n    ordinal_number = ((target_term - first_term) // difference) + 1\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe, eric = symbols('joe eric')\n    equation1 = Eq(joe, 7 * eric)\n    equation2 = Eq(joe - eric, 168 * 2)\n    \n    solutions = solve((equation1, equation2), (joe, eric))\n\n    joe_cards = solutions[joe]\n    eric_cards = solutions[eric]\n    \n    cards_to_give = joe_cards - 168\n\n    return cards_to_give\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:  # The tens digit must be a prime number less than 10\n        for ones_digit in [2, 3, 5, 7]:  # The ones digit must also be a prime number less than 10\n            N = 10 * tens_digit + ones_digit  # Construct the number N\n            if isprime(N):  # Check if N is a prime number\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    library_catch = 9\n\n    ans = initial_catch - run_away + library_catch\n\n    return ans\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20  # converting hours and minutes to total minutes\n    number_of_pictures = total_minutes / minutes_per_picture\n\n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for num_people in range(1, 100):  # Search a reasonable range of numbers\n        if num_people % 2 == 0 and (num_people // 2) == (19 - 6):\n            return num_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    # Since the two groups must have different numbers of apples and there are 10 apples,\n    # one group must have 1 to 9 apples, because having 0 or 10 in one group would make the groups equal.\n    for apples_in_first_group in range(1, 10):\n        apples_in_second_group = 10 - apples_in_first_group\n        # Ensure the two groups have different numbers of apples\n        if apples_in_first_group != apples_in_second_group:\n            count += 1\n    # Since there's no order in groups, i.e., splitting into (1,9) or (9,1) is the same,\n    # we should divide the count by 2\n    return count // 2\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    # There are 5 students, hence 5! (factorial of 5) different ways to arrange them in a line\n    return factorial(5)\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    more_times = amy_swims - joanne_swims\n    return more_times\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n\n    solutions = solve(equation, (a, b, c, d))\n\n    abcd = 1000*solutions[a] + 100*solutions[b] + 10*solutions[c] + solutions[d]\n\n    return abcd\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    # Sachin's work rate\n    sachin_rate = 1 / 3\n    # Peter's work rate\n    peter_rate = 1 / 6\n    # Combined work rate\n    combined_rate = sachin_rate + peter_rate\n    # Time taken when working together\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of stamps for Isaac and Joseph\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Equation 1: Isaac had 5 times as many stamps as Joseph\n    equation1 = Eq(isaac, 5 * joseph)\n    \n    # Equation 2: After receiving 154 stamps, Joseph had 9/10 as many stamps as Isaac\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n    \n    # Solve the system of equations\n    solved_values = solve((equation1, equation2), (isaac, joseph))\n    \n    # Return the number of stamps Isaac had\n    return solved_values[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    fact_value = factorial(29)  # 1*2*3*...*29\n    n_zeroes = 0\n\n    while fact_value % 10 == 0:\n        n_zeroes += 1\n        fact_value //= 10\n\n    return n_zeroes\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of fans\n    liverpool_fans_initial, manchester_fans_initial = symbols('liverpool_fans_initial manchester_fans_initial')\n\n    # Create equations based on the problem\n    equation1 = Eq(liverpool_fans_initial - manchester_fans_initial, 1000)      # Initial difference in number of fans\n    equation2 = Eq(manchester_fans_initial * 3,                                  # 3 times the number of Liverpool fans after 30 mins\n                   liverpool_fans_initial + 472 + (manchester_fans_initial + 4836))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (liverpool_fans_initial, manchester_fans_initial))\n\n    return solutions[liverpool_fans_initial]\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the total length of the path be x meters.\n    # According to the problem, when Linda jogged 1200m, she met Ted.\n    # This implies that Ted jogged (x - 1200)m at that time.\n\n    # The speed ratio of Linda to Ted is 3:4.\n    # Therefore, the distance traveled by Linda to the distance traveled by Ted is also 3:4.\n    # We can set up a ratio equation: 1200 / (x - 1200) = 3 / 4\n    # Cross-multiplying gives: 4 * 1200 = 3 * (x - 1200)\n\n    # Solving for x:\n    x = (4 * 1200) / 3 + 1200\n\n    # Return the length of the path.\n    return x\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        number = int(f\"2018{A}\")\n        if number % 9 == 0:\n            return number % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Squirrel Ryan has 5 squirrels in front of him\n    squirrels_in_front_ryan = 5\n    # Squirrel Elvis has 7 squirrels behind him\n    squirrels_behind_elvis = 7\n    # There is 1 squirrel between Squirrel Ryan and Squirrel Elvis\n    squirrels_between = 1\n\n    # Since Ryan is in front of Elvis, the total is:\n    # squirrels in front of Ryan + Ryan himself + squirrel between + Elvis himself + squirrels behind Elvis\n    total_squirrels = squirrels_in_front_ryan + 1 + squirrels_between + 1 + squirrels_behind_elvis\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    def count_derangements(n):\n        if n == 0: return 1\n        elif n == 1: return 0\n        elif n == 2: return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    return count_derangements(6)\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Define the equation in terms of x\n    equation = 6*x + 3*x + 2 - (38 + 5*x - 8*x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work_done_by_3_workers = workers * days_for_3_workers\n\n    # Since one worker will do 1/3 of the work done by 3 workers in a day\n    days_for_1_worker = work_done_by_3_workers / 1\n\n    return days_for_1_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_p, initial_q = symbols('initial_p initial_q')\n\n    # equation based on the initial ratio\n    equation1 = Eq(initial_p/initial_q, 2/3)\n\n    # equation based on the final ratio after adding the primary one pupils\n    equation2 = Eq((initial_p + 240)/(initial_q + 240), 3/4)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (initial_p, initial_q))\n\n    return solutions[initial_p]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30 / 100\n    total_amount = 45\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    ans = sum(i for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'j' be Jack's current age\n    j = symbols('j')\n\n    # Equation: Jack's age 5 years ago (j - 5) was half of what his age will be in 8 years (j + 8)\n    equation = Eq(j - 5, (j + 8) / 2)\n\n    # Solve for Jack's current age 'j'\n    age_now = solve(equation, j)\n    \n    # Return Jack's age as an integer\n    return age_now[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    bag_percentage = 70  # Percentage spent on the bag\n    purse_fraction = 3/8  # Fraction of the remainder spent on the purse\n\n    remaining_after_bag = 100 - bag_percentage  # Remaining money after buying the bag\n    purse_percentage = purse_fraction * remaining_after_bag  # Percentage spent on the purse\n\n    return purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for ten_digit in [2, 3, 5, 7]:  # Tens-digit prime numbers\n        for one_digit in [2, 3, 5, 7]:  # Ones-digit prime numbers\n            N = 10 * ten_digit + one_digit  # Construct two-digit number\n            if isprime(N):  # Check if the constructed number is prime\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total = factorial(len('EDUCATION'))\n    vowels = 'AEIOU'\n    \n    vowel_perms = list(permutations(vowels))\n    vowel_perms_count = len(vowel_perms)\n\n    # There are 10-5+1 = 6 positions where the block of vowels could be placed\n    consonants = 'EDCTN'\n    consonant_perms = list(permutations(consonants))\n    consonant_perms_count = len(consonant_perms)\n\n    # Total permutations where vowels are always together\n    together_perms_count = vowel_perms_count * consonant_perms_count * 6\n\n    # Subtracting from total permutations to find permutations where vowels are not together\n    not_together_perms_count = total - together_perms_count\n    \n    return not_together_perms_count\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    new_student_count = 5 + 1\n    candies_per_student_after_redistribution = total_candies // new_student_count\n    return candies_per_student_after_redistribution\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11\n    wrappers = 11\n    total_sweets = sweets_bought\n\n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        wrappers = wrappers % 3 + new_sweets\n        total_sweets += new_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:40\", \"%H:%M\")\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given m∠BAC = 50°\n    angle_BAC = 50\n\n    # Since BP bisects ∠ABC and CP bisects ∠ACB, let's denote:\n    # ∠ABP = x and ∠ACP = y\n    # Then ∠ABC = 2x and ∠ACB = 2y\n\n    # The sum of angles in any triangle is 180°.\n    # Hence, angle_BAC + ∠ABC + ∠ACB = 180\n    # 50 + 2x + 2y = 180\n    # 2x + 2y = 180 - 50\n    # x + y = (180 - 50) / 2\n    angle_sum_x_y = (180 - 50) / 2\n\n    # Now, in triangle BPC:\n    # m∠BPC = 180 - (x + y)\n    angle_BPC = 180 - angle_sum_x_y\n\n    return angle_BPC\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    two_tail, three_tail, six_tail, eight_tail = symbols('two_tail three_tail six_tail eight_tail')\n\n    # The number of two-tailed birds is 5 more than twice as many as the number of eight-tailed birds.\n    equation1 = Eq(two_tail, 2 * eight_tail + 5)\n\n    # The number of three-tailed birds is 2 more than half the number of six-tailed birds.\n    equation2 = Eq(three_tail, six_tail / 2 + 2)\n\n    # Total number of tails is 2 less than four times as many as the total number of their heads.\n    # total_tails = 2*TT + 3*TT + 6*ST + 8*ET\n    # total_heads = TT + TT + ST + 2*ET\n    # total_tails = 4*total_heads - 2\n    equation3 = Eq(2*two_tail + 3*three_tail + 6*six_tail + 8*eight_tail, 4 * (two_tail + three_tail + six_tail + 2*eight_tail) - 2)\n\n    # The difference between the total number of their heads and their tails is 241.\n    # total_heads - total_tails = 241\n    equation4 = Eq(two_tail + three_tail + six_tail + 2*eight_tail - (2*two_tail + 3*three_tail + 6*six_tail + 8*eight_tail), 241)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tail, three_tail, six_tail, eight_tail))\n\n    return solutions[three_tail]\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Given data\n    total_weight_kg = 5\n    cost_per_kg = 10\n    weight_per_bag_g = 250\n    price_per_bag_p = 65\n\n    # Total cost of sweets\n    total_cost = total_weight_kg * cost_per_kg\n\n    # Conversion from kg to g\n    total_weight_g = total_weight_kg * 1000\n\n    # Number of bags of sweets\n    number_of_bags = total_weight_g / weight_per_bag_g\n\n    # Total revenue from selling all the bags\n    total_revenue = number_of_bags * price_per_bag_p / 100  # Convert pence to pounds\n\n    # Profit is revenue minus cost\n    profit = total_revenue - total_cost\n\n    # Percentage profit formula: profit/cost * 100\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    # Setup the proportion\n    a = 15\n    b = 20\n    c = 3\n\n    # Solve for d using the property of proportions (cross multiplication)\n    # a/b = c/d  => d = (b * c) / a\n    d = (b * c) / a\n\n    return int(d)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Using the multiplication rule (for independent events)\n    ayton_beeton = 4       # Roads from Ayton to Beeton\n    beeton_ceeton = 5      # Roads from Beeton to Ceeton\n    ceeton_deeton = 6      # Roads from Ceeton to Deeton\n    ayton_deeton_direct = 3 # Direct roads from Ayton to Deeton\n\n    # Number of ways going from Ayton -> Beeton -> Ceeton -> Deeton\n    ayton_beeton_ceeton_deeton = ayton_beeton * beeton_ceeton * ceeton_deeton\n\n    # Total ways = ways through all towns + direct ways\n    total_ways = ayton_beeton_ceeton_deeton + ayton_deeton_direct\n\n    return total_ways\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # Given arithmetic sequence information\n    tenth_num = 23\n    fifteenth_num = 38\n    \n    # Calculate the common difference\n    common_difference = (fifteenth_num - tenth_num) / (15 - 10)\n    \n    # Calculate the 12th number in the sequence\n    twelfth_num = tenth_num + common_difference * (12 - 10)\n\n    return twelfth_num\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally = 3.75\n    joe = symbols('joe')\n    \n    # Equation representing the total money left after they both spend $2.50\n    equation = Eq(sally - 2.50 + joe - 2.50, 5)\n\n    joe_initial_amount = solve(equation, joe)\n\n    return joe_initial_amount[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    # Average trees planted in the first 3 days\n    avg_first_3_days = 135\n    # Average trees planted in the last 5 days\n    avg_last_5_days = 151\n\n    # Total trees planted in the first 3 days\n    total_first_3_days = avg_first_3_days * 3\n    # Total trees planted in the last 5 days\n    total_last_5_days = avg_last_5_days * 5\n\n    # Total number of days\n    total_days = 8\n\n    # Total trees planted\n    total_trees = total_first_3_days + total_last_5_days\n\n    # Average number of trees planted per day\n    avg_trees_per_day = total_trees / total_days\n\n    return avg_trees_per_day\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    ans = 876 * 3\n    return ans\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    \n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[magic_number]\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    total_numbers = 2016\n    count_twice_underlined = 0\n\n    # Calculate the least common multiple (LCM) of 2 and 3, and 2 and 4\n    lcm_2_3 = (2 * 3) // math.gcd(2, 3)  # LCM of 2 and 3\n    lcm_2_4 = (2 * 4) // math.gcd(2, 4)  # LCM of 2 and 4, which is actually just 4\n    lcm_3_4 = (3 * 4) // math.gcd(3, 4)  # LCM of 3 and 4\n\n    # All multiples of 2 and 3 will be red and blue\n    count_twice_underlined += total_numbers // lcm_2_3\n    # All multiples of 2 and 4 will be red and green, still all multiples of 4 are green\n    # No need to count since multiples of 4 are already accounted for in red as well\n    # All multiples of 3 and 4 will be blue and green\n    count_twice_underlined += total_numbers // lcm_3_4\n\n    # Subtract numbers that are underlined three times (multiples of 2, 3, and 4),\n    # which is the LCM of 2, 3, and 4\n    lcm_2_3_4 = (lcm_2_3 * 4) // math.gcd(lcm_2_3, 4)\n    count_twice_underlined -= total_numbers // lcm_2_3_4\n\n    return count_twice_underlined\n\nimport math\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            # Sum the individual digits\n            digits_sum = sum(map(int, str(i)))\n            if digits_sum == 7:  # Check if the sum of digits is 7\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 202 + magic_number\n    second_number = 22 + magic_number\n    \n    equation = Eq(first_number, 6 * second_number)\n    \n    magic_number_value = solve(equation, magic_number)[0]\n    \n    return magic_number_value\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    # Number of ways to choose 2 salads out of 15\n    salad_comb = comb(15, 2)\n    # Number of ways to choose 2 soups out of 20\n    soup_comb = comb(20, 2)\n    # Number of ways to choose 2 vegetable dishes out of 12\n    vegetable_comb = comb(12, 2)\n    # Number of ways to choose 2 sandwiches out of 6\n    sandwich_comb = comb(6, 2)\n\n    # Eddie can choose 2 out of the 4 options, use combination formula for this\n    option_comb = comb(4, 2)\n\n    # Apply the multiplication principle for each combination of options selected\n    ans = option_comb * (salad_comb + soup_comb + vegetable_comb + sandwich_comb)\n\n    return ans\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    total_students = 0\n    diff = 32\n    side_length = 1  # starting with a 1x1 square\n\n    while True:\n        boys = 4 * side_length - 4  # Boys occupy the perimeter of the square\n        girls = total_students - boys  # Girls occupy the rest\n        if boys - girls == diff:\n            return total_students  # Return the total when the difference is met\n        side_length += 2  # Increase the side length to form the next layer of square\n        total_students = side_length ** 2\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    # Increment n until the condition is met\n    while True:\n        # Check if n, n+2, n+4, n+106 and n+308 are all prime numbers\n        if all(isprime(n + i) for i in [0, 2, 4, 106, 308]):\n            # Once found, return the current n\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    \n    return int(days_last)\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    strawberries, mangoes = symbols('strawberries mangoes')\n\n    equation1 = Eq(mangoes, strawberries + 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    total_items_solution = solve(equation, total_items)\n    lemons_number = total_items_solution[0] - (2/3) * total_items_solution[0] - (1/9) * total_items_solution[0]\n\n    return int(lemons_number)\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def nCk(n, k):\n        return factorial(n) // (factorial(k) * factorial(n-k))\n    \n    # Using stars and bars theorem: (n - 1)C(k - 1)\n    ans = nCk(20 - 1, 6 - 1)\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    # Unit digit of a power of 4 follows a pattern: 4, 6, 4, 6, ...\n    # Since the pattern repeats every 2 iterations, we only need to know if\n    # the exponent is even or odd to determine the unit digit.\n    # For exponent 2022, which is even, the unit digit is 6.\n    \n    return 6\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Max's money as m and Anthony's money as a.\n    m, a = symbols('m a')\n\n    # If Max bought the chocolates, Max would have m - 12 left and the ratio to Anthony's amount would be 2:5.\n    equation1 = Eq((m - 12) / a, 2 / 5)\n\n    # If Anthony bought the chocolates, Anthony would have a - 12 left and the ratio to Max's amount would be 8:13.\n    equation2 = Eq(m / (a - 12), 8 / 13)\n\n    # We can now solve the equations for m and a.\n    solutions = solve((equation1, equation2), (m, a))\n\n    # The question asks for how much Max had originally, so we return the value of m.\n    return solutions[m]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    red, blue, total = symbols('red blue total')\n    \n    # Let red stickers and blue stickers be equal in number initially\n    equation1 = Eq(red, blue)\n    \n    # Given that 2/3 of red stickers were given away\n    given_away_red = 2 * red / 3\n\n    # She was left with 1/4 of her stickers\n    left_stickers = total / 4\n\n    # Total stickers she had initially\n    equation2 = Eq(red + blue, total)\n\n    # Total stickers she was left with after giving away\n    # Red stickers given away are known, blue stickers\n    # given away need to be calculated, left_stickers known\n    equation3 = Eq(red - given_away_red + blue - left_stickers, left_stickers)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, blue, total))\n\n    # Since red and blue are equal, we can take either\n    red_stickers = solutions[red]\n\n    # Total blue stickers given away\n    blue_stickers_given = solutions[blue] - left_stickers\n\n    # Fraction of blue stickers Liz gave away\n    fraction_blue_given = blue_stickers_given / solutions[blue]\n\n    return fraction_blue_given\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    lengths_in_metres = {\n        '10 millimetres': 10 / 1000,\n        '100 centimetres': 100 / 100,\n        '10 metres': 10,\n        '2 kilometres': 2 * 1000,\n        '2800 centimetres': 2800 / 100,\n        '2500 metres': 2500,\n        '100 millimetres': 100 / 1000,\n        '100 metres': 100\n    }\n    \n    smallest_length_label = min(lengths_in_metres, key=lengths_in_metres.get)\n    smallest_length_value = lengths_in_metres[smallest_length_label]\n\n    ans = f'{smallest_length_label} which is equal to {smallest_length_value} metres'\n    return ans\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the total number of days it took Dave to finish the book\n    days = (last_day_pages - first_day_pages) / difference + 1\n\n    # Calculate the total number of pages in the book using arithmetic series sum formula\n    total_pages = (first_day_pages + last_day_pages) * days / 2\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    ans = smallest_6_digit_number - largest_5_digit_number\n    return ans\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    only_swim = 20 - 10\n    only_basketball = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = only_swim + only_basketball + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # We need to split the number of marbles into four piles\n    # such that each pile has a different number of marbles.\n    # To minimize the largest pile, we should try to distribute the marbles\n    # as evenly as possible starting from the smallest pile.\n    \n    # Let's start with the smallest possible non-zero number of marbles in the first pile.\n    # Then we continue to the next pile with one more marble than the previous pile, and so on.\n    \n    for x1 in range(1, 16):  # The first pile can have 1 to 15 marbles.\n        for x2 in range(x1 + 1, 16):  # The second pile has more than the first.\n            for x3 in range(x2 + 1, 16):  # The third pile has more than the second.\n                for x4 in range(x3 + 1, 16):  # The fourth pile has more than the third.\n                    if x1 + x2 + x3 + x4 == 16:\n                        return x4  # The largest pile is what we are looking for.\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Initialize the variable to count the total odd numbers\n    count = 0\n\n    # Iterate over all possible hundreds digit (can be 1-6)\n    for hundreds in range(1, 7):\n        # Iterate over all possible tens digit (can be 1-6 but not the hundreds digit)\n        for tens in range(1, 7):\n            if tens != hundreds:\n                # Iterate over all possible units digit, it should be odd (1, 3, or 5 here)\n                for units in [1, 3, 5]:\n                    if units != hundreds and units != tens:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindrome(steps):\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    legs_per_cow = 4\n    legs_per_duck = 2\n    \n    for ducks in range(total_animals + 1):\n        cows = total_animals - ducks\n        if (cows * legs_per_cow) + (ducks * legs_per_duck) == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    triangles = 5\n    parts = 1 + triangles * (triangles + 1) // 2\n    return parts\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    # Create equations\n    # Avg height of group = (Avg height of girls * No. of girls + Avg height of boys * No. of boys) / Total no. of children\n    equation_group_avg = Eq((girls * 11 + boys * 5) / (11 + 5), 122.5)\n    \n    # Avg height of girls = Avg height of boys + 3.2\n    equation_girls_boys = Eq(girls, boys + 3.2)\n    \n    # Solve equations\n    solutions = solve((equation_group_avg, equation_girls_boys), (girls, boys))\n    \n    # Get the average height of the girls\n    return solutions[girls]\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    position_32 = 32\n    position_108 = 108\n\n    # Calculate the common difference\n    difference = (term_108 - term_32) / (position_108 - position_32)\n    \n    # Calculate the first term\n    first_term = term_32 - (position_32 - 1) * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    # Total marks for all students\n    total_marks = 70 * 66\n    \n    # Let g be the number of girls\n    # Then 70 - g is the number of boys\n    # Girls' total marks would be g * 70\n    # Boys' total marks would be (70 - g) * 63\n    # Now we setup the equation for total marks combining boys and girls\n    # g * 70 + (70 - g) * 63 = total_marks\n    \n    # Now solving for g\n    from sympy import symbols, Eq, solve\n    \n    g = symbols('g')\n    equation = Eq(g * 70 + (70 - g) * 63, total_marks)\n    \n    girls_count = solve(equation, g)[0]\n    \n    return girls_count\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Let the middle term of this arithmetic sequence be 'a'\n    # Since there are an odd number of terms (9), and they are consecutive odd numbers,\n    # the sum of these numbers would be 9 * a\n    # We are given the sum of these terms is 1503\n    # 9 * a = 1503\n    # a = 1503 / 9\n    a = 1503 // 9\n\n    # Now, to find the smallest term, we need to subtract 4 times the common difference (which is 2) from 'a'\n    # because the sequence is symmetric around the middle term\n    # smallest term = a - 4 * 2\n    smallest_term = a - 4 * 2\n\n    return smallest_term\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number of candies\n    original_candies = symbols('original_candies')\n\n    # Define the equations based on the given information\n    donna_kept = (original_candies / 2) + 3\n    jane_received = original_candies - donna_kept\n    jane_ate = (jane_received / 3) + 4\n    kate_received = jane_received - jane_ate\n    kate_ate = kate_received / 4\n\n    # Create the equation based on what Kate left\n    equation = Eq(kate_received - kate_ate, 42)\n\n    # Solve the equation for the original number of candies\n    solutions = solve(equation, original_candies)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Total individuals are 4 (A, B, C, and D)\n    # A can pass to 3 (B, C, or D)\n    # Next, it can be passed to 2 others (excluding A and the one who passed it)\n    # Finally, to return to A, there is only 1 choice\n    \n    # Total number of different methods\n    num_methods = 3 * 2 * 1\n\n    return num_methods\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    from itertools import permutations\n\n    # There are 10 possible digits (0-9) and we need to assign them uniquely to each letter\n    possible_digits = range(10)\n    \n    # We iterate over all permutations taking two digits at a time since we're interested in QP\n    for Q, P in permutations(possible_digits, 2):\n        # Q can't be 0 because it's the first digit in a 2-digit number\n        if Q == 0:\n            continue\n        \n        # Calculate the 2-digit number QP\n        number = Q * 10 + P\n        \n        # Since the problem does not provide any other conditions, this is our answer\n        return number\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    jason_books = 30\n    jason_gives = 4\n\n    # After giving the books, both will have the same number of books\n    anthea_books = jason_books - jason_gives  # Books left with Jason\n    # Since now both have same number of books, this is also the number of books Anthea has after receiving\n\n    # Number of books Anthea had at first\n    anthea_books_at_first = anthea_books - jason_gives\n\n    # The difference in the number of books at first\n    difference = jason_books - anthea_books_at_first\n\n    return difference\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    for i in range(1, 4*10 + 1):\n        if i % 4 == 0 and i % 10 == 0:\n            return i\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's jogging speed in meters per second\n    time_s = 12 * 60   # Convert 12 minutes to seconds\n    distance = speed_m_per_s * time_s  # Distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = (2020 * 68) + (505 * 128)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_money = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissues_cost = total_money - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the efficiency of B as 1 job/day, so A's efficiency is 2 jobs/day\n    A_efficiency = 2\n    B_efficiency = 1\n\n    # Let B takes x days to finish the job, so A will take (x - 12) days\n    x = symbols('x')\n\n    # Now we set up our equation\n    # A's work + B's work should equal to 1 job when they both finish\n    equation = Eq((x - 12) * A_efficiency + x * B_efficiency, 1)\n\n    # Solve the equation to find x\n    days_B = solve(equation, x)[0]\n\n    # Now we know the amount of days B takes to finish the job alone\n    days_A = days_B - 12\n\n    # Working together they complete A_efficiency + B_efficiency part of the job per day\n    days_together = 1 / (A_efficiency + B_efficiency)\n\n    return days_together\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from math import factorial\n\ndef solution():\n    digits = 3  # Number of available unique digits (1, 2, 3)\n    ans = 0\n\n    # Calculate permutations for each possible length\n    for length in range(1, digits + 1):\n        ans += factorial(digits) // factorial(digits - length)\n\n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + (3 * baskets_of_tomatoes)\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n\n    # Let the number of boys (and girls) at the exhibition be represented by boys\n    # After 3/5 of the boys left, 2/5 of the boys are still at the exhibition\n    boys_left = 2/5 * boys\n\n    # 42 girls left the exhibition\n    girls_left = boys - 42\n\n    # There were 12 more boys than girls at the exhibition\n    equation = Eq(boys_left - girls_left, 12)\n\n    # Solve the equation\n    num_boys = solve(equation, boys)[0]\n\n    # The total number of students at first is double the number of boys\n    total_students = 2 * num_boys\n\n    return total_students\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Let the distance be 'd' km\n    # Let the correct time be 't' hours\n    \n    # Speed = Distance / Time\n    # Time = Distance / Speed\n    \n    # When travelling at 3 km/h, Mike is 12 min (12/60 hours) late\n    # So the time taken at 3 km/h is t + 12/60 hours\n    # d = 3 * (t + 12/60)\n    \n    # When travelling at 5 km/h, Mike is 4 min (4/60 hours) early\n    # So the time taken at 5 km/h is t - 4/60 hours\n    # d = 5 * (t - 4/60)\n    \n    # Now we have two equations:\n    # 1) d = 3 * (t + 1/5)\n    # 2) d = 5 * (t - 1/15)\n    \n    # Equate both expressions for 'd' to find 't'\n    # 3 * (t + 1/5) = 5 * (t - 1/15)\n    \n    # Solve for 't'\n    # 3t + 3/5 = 5t - 1/3\n    # 2t = 3/5 + 1/3\n    # 2t = 18/15 + 5/15\n    # 2t = 23/15\n    # t = 23/30\n    \n    # Use 't' to solve for 'd'\n    # d = 3 * (23/30 + 1/5)\n    # d = 3 * (23/30 + 6/30)\n    # d = 3 * (29/30)\n    # d = 87/30\n    # d = 2.9 km\n    \n    return 2.9\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_last_night = -8\n    temperature_today = 13\n\n    change_in_temperature = temperature_today - temperature_last_night\n\n    return change_in_temperature\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio expression\n    initial_ratio = Eq(boys/girls, 3/2)\n    # Ratio after 12 boys and 12 girls joined\n    new_ratio = Eq((boys + 12) / (girls + 12), 19/14)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (boys, girls))\n    \n    # Calculate the total number of children in the afternoon\n    total_children_afternoon = solutions[boys] + solutions[girls] + 12 + 12\n    \n    return total_children_afternoon\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A // 2\n    C = B // 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks\n    different_colored_socks = factorial(4)\n    \n    # For two different colored pairs of socks\n    # For each color there are 2! arrangements, and for the pairs there are 2! arrangements\n    pair_colored_socks = factorial(2) * factorial(2) * factorial(2)\n\n    return different_colored_socks, pair_colored_socks\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length1 = 23\n    length2 = 37\n    welded_part = 3\n\n    full_length = length1 + length2 - welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    # Total number of tiles\n    total_tiles = 400\n    # Since the wall is square, we find the square root to get the dimension of the side of the wall\n    side_length = int(total_tiles**0.5)\n\n    # Initialize counts for red and green tiles\n    red_count = 0\n    green_count = 0\n\n    # Loop through the layers\n    for layer in range(1, (side_length // 2) + 1):\n        # Calculate the number of tiles in current layer (4 sides minus 4 corners)\n        tiles_in_layer = (side_length - (layer - 1) * 2) * 4 - 4\n        if layer % 2 != 0:\n            # Odd layers are red\n            red_count += tiles_in_layer\n        else:\n            # Even layers are green\n            green_count += tiles_in_layer\n\n    # We must account for the center tile if the side length is odd\n    if side_length % 2 != 0:\n        red_count += 1\n\n    # Calculate the difference\n    difference = abs(red_count - green_count)\n    # Dominant colour\n    dominant_colour = \"red\" if red_count > green_count else \"green\"\n\n    # Return count of dominant colour and how many more tiles it has\n    return (dominant_colour, difference)\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    trip_duration = end_date - start_date\n\n    return trip_duration.days + 1\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "import math\n\ndef solution():\n    # Period of a simple pendulum formula: T = 2 * pi * sqrt(L/g)\n    # T1 is the period on Earth\n    # T2 is the period on the Moon\n    # g_moon is one-sixth of g_earth\n\n    # Assuming length of pendulum (L) is the same on Earth and Moon.\n    # T1 = 2 * pi * sqrt(L/g_earth)\n    # T2 = 2 * pi * sqrt(L/g_moon)\n    # But we know that g_moon = g_earth / 6\n    # So, T2 = 2 * pi * sqrt(L / (g_earth / 6))\n    # T2 = 2 * pi * sqrt(6 * L/g_earth)\n    # T2 = sqrt(6) * T1 because T1 = 2 * pi * sqrt(L/g_earth) \n\n    T1 = 1 # Period on Earth in seconds\n    T2 = math.sqrt(6) * T1\n\n    return T2\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let x be the number of questions William answers correctly.\n    # Then Justin answers correctly (x + 24 / 6) questions since he scores 24 points more.\n    # Points scored by William: 6x - 2(10 - x) = 4x + 20\n    # Points scored by Justin: 6(x + 24 / 6) - 2(10 - (x + 24 / 6)) = 4(x + 24 / 6) + 20\n    # Together they score 96 points.\n    # So, 4x + 20 + 4(x + 24 / 6) + 20 = 96\n    # Simplify and solve for x:\n\n    x = (96 - 40 - 4 * (24 / 6)) / 8\n    return int(x)\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since we have no context for what A refers to, we can't determine its value.\n    # Normally, A would be defined by a number puzzle, equation, or sequence, but\n    # without that information, we cannot solve for A. Thus, I'll return a placeholder\n    # value since the actual problem statement is missing.\n\n    A = \"Undefined\"  # Placeholder for the undefined 'A'\n    return A\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    import math\n    \n    people = 100\n    side_length = int(math.sqrt(people))\n    if side_length ** 2 == people:\n        outermost_people = 4 * side_length - 4  # Subtract 4 for the corners counted twice\n    else: \n        outermost_people = 0  # If not a full square, outermost layer cannot be determined uniquely\n\n    return outermost_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        term += common_difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    work_rate_a = 1 / 15\n    # B's work rate per day\n    work_rate_b = 1 / 10\n\n    # total work done by A and B in 3 days\n    total_work_done = 3 * (work_rate_a + work_rate_b)\n\n    # remaining work\n    remaining_work = 1 - total_work_done\n\n    # days for B to finish the remaining work\n    days_for_b = remaining_work / work_rate_b\n\n    return days_for_b\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    required_loafs = 24\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # After giving 3/7 of his cash to his sister, he has 4/7 of his cash left.\n    # After giving 1/8 of the remaining cash to his mum, he has 7/8 of the remaining cash left.\n    # Let the initial amount of cash be x.\n    # We have the equation: x * (4/7) * (7/8) = 280\n    # Solving for x gives us the initial amount of cash.\n\n    remaining_after_sister = 4 / 7\n    remaining_after_mum = 7 / 8\n    final_amount = 280\n\n    initial_amount = final_amount / (remaining_after_sister * remaining_after_mum)\n\n    return initial_amount\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    diff = max(temperatures) - min(temperatures)\n    return diff\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    apples = 80\n    # Since at least one student gets at least 3 apples,\n    # the maximum number of students that can be present in the class would be\n    # when the rest of the students get 1 apple each, and one student gets 3 apples.\n    # In that case, one student with 3 apples and the rest with 1 apple each: 80 - 3 apples = 77 apples for the rest of the students.\n    # Each of these students can get 1 apple. So, the total class size would be the rest of the students plus the one with 3 apples.\n    max_students_with_1_apple = 77\n\n    # Total class size is the rest of the students plus the one that received 3 apples:\n    class_size = max_students_with_1_apple + 1\n\n    return class_size\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    number_of_people = 8\n    \n    amount_per_person = total_amount / number_of_people\n    \n    return amount_per_person\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the number of red balls be r, white balls be w, and black balls be b.\n    # According to the question:\n    # r/w = 1/2 => w = 2r\n    # w/b = 3/4 => b = 4w/3\n    # r + w + b = 34\n\n    # Substituting w and b in terms of r:\n    # r + 2r + (4/3)*(2r) = 34\n    # r + 2r + (8/3)*r = 34\n    # Multiply by 3 to get rid of the fraction:\n    # 3r + 6r + 8r = 102\n    # 17r = 102\n    # r = 102/17\n    r = 102 // 17\n\n    return r\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Any factorial greater than 4! will have 0 as the last digit \n    # because it will include the factors 2 and 5 at least once each\n    # which when multiplied give 10 as a factor\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    return (4 / 50) * 100\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # For this game, the winning strategy involves making sure that the opponent is always left with a \n    # situation where the piles have a total number of cards that is a power of 2 minus 1 (that is, \n    # 1, 3, 7, 15, 31, 63, etc.).\n    # Since 88 is already a power of 2 minus 1 (127 - 1 = 127), and 52 is also such a number (63 - 11 = 52),\n    # Tom's winning strategy is to mirror Jane's moves in the pile that hasn't been touched.\n\n    # What Tom has to do:\n    # If Jane picks from Pile A, Tom also picks from Pile A in such a way that the total number of cards \n    # left in Pile A is still a power of 2 minus 1.\n    # If Jane picks from Pile B, Tom does the same with Pile B.\n    # Tom keeps doing this until he is the one to pick the last card.\n\n    # Winning move for Tom in the first round\n    # Tom can initially make any valid move and retain parity with Jane.\n    # Since numbers are already in power of 2 minus 1, let's ensure he takes only one card to adhere to this rule.\n    if 88 % 2 == 1 and 52 % 2 == 0:  # Check if A is power of 2 minus 1, and B is not\n        pile_a = 88 - 1  # Tom's initial move to make from A: take 1 card\n        pile_b = 52\n    else:\n        pile_a = 88\n        pile_b = 52 - 1  # Tom's initial move to make from B: take 1 card\n\n    # Since the game is sequential and the strategy is to mirror Jane's moves,\n    # Tom's strategy cannot be reduced to a single answer to return from this function.\n    # So, let's return the initial move as Tom's answer.\n    return pile_a, pile_b\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    sum_series = sum(i * (2 * i - 1) for i in range(1, 11))\n    return sum_series\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    return pen_cost // pencil_cost\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_side_length = 5  # cm\n    hole_side_length = 1  # cm\n    volume_with_hole = 480  # cm^3\n    \n    # Calculate the base area of the prism\n    base_area = base_side_length ** 2  # cm^2\n    \n    # Calculate the area of the hole\n    hole_area = hole_side_length ** 2  # cm^2\n    \n    # The effective base area after the hole is subtracted\n    effective_base_area = base_area - hole_area  # cm^2\n    \n    # Calculate the height of the prism\n    height = volume_with_hole / effective_base_area  # cm\n\n    return height\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2  # There are 2 sisters\n    marbles_left_with_henry = 16\n\n    total_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left_with_henry\n    return total_marbles\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of yellow and green beads initially\n    yellow_initial, green_initial = symbols('yellow_initial green_initial', integer=True)\n\n    # Initial ratio equation: yellow_initial / green_initial = 3 / 2\n    equation1 = Eq(yellow_initial / green_initial, 3 / 2)\n\n    # After buying more beads, the new ratio equation: (green_initial + 20) / (yellow_initial + 5) = 3 / 2\n    equation2 = Eq((green_initial + 20) / (yellow_initial + 5), 3 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (yellow_initial, green_initial))\n\n    # Calculate the total number of beads he had at first\n    total_initial = solutions[yellow_initial] + solutions[green_initial]\n\n    return total_initial\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 13):\n        for y in range(1, 13):\n            z = 13 - x - y\n            if z > 0 and z <= 12 and z not in (x, y):\n                count += 1\n    return count // 3  # account for permutations of (x, y, z)\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum((2 * i - 1) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # palindromic numbers between 10 and 1000 can be 2-digit or 3-digit\n    # for 2-digit palindromic numbers (11, 22, ..., 99):\n    count += 9  # because there are 9 possibilities (1-9) for the tens digit\n    # for 3-digit palindromic numbers (101, 111, ..., 999):\n    for i in range(1, 10):  # hundreds digit (1-9)\n        for j in range(0, 10):  # tens and units digit can be the same (0-9)\n            # no need to iterate over the ones place as it must be equal to the hundreds place\n            count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meeting_time = 4\n    \n    christen_distance_to_meeting_point = christen_speed * meeting_time\n    total_distance = amy_speed * meeting_time + christen_distance_to_meeting_point\n    time_for_christen_to_reach_amy_start = total_distance / christen_speed\n    \n    return time_for_christen_to_reach_amy_start\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    correct = symbols('correct')\n    total_questions = 50\n    equation = Eq(4*correct - (total_questions - correct), 110)\n    solutions = solve(equation, correct)\n    return solutions[0]\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    # Ratio lemon : chocolate = 4 : 5\n    # Total parts = 4 + 5 = 9\n    lemon_cakes = (4 / 9) * remaining_cakes\n    \n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    for perm in permutations(digits, 4):\n        # Check if the permutation is an even number and does not start with 0\n        if perm[3] in even_digits and perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # First pass: Lily can pass to either Cici or April (2 options)\n    # Second pass: Whoever receives the ball can pass it to the one who\n    # hasn't received the ball yet (1 option, as there will be only one person left)\n    # Total number of passing ways: 2 (for the first pass) * 1 (for the second pass)\n    ans = 2 * 1\n    return ans\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    fifth_assignment_score = 94\n    total_score_five_assignments = total_score_first_four + fifth_assignment_score\n    average_score_five_assignments = total_score_five_assignments / 5\n    return average_score_five_assignments\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of books Lily had and y be the initial number of books Judy had\n    x, y = symbols('x y')\n\n    # If Lily gives n books to Judy, they will both have the same amount\n    # After giving n books: Lily will have (x - n) and Judy will have (y + n)\n    # Therefore, the equation is x - n = y + n\n    equation1 = Eq(x - y, 2 * symbols('n'))\n\n    # We are interested in finding the difference between x and y\n    # Which is x - y, Therefore, we resolve in terms of n and substitute n = 1, because the difference doesn't change with n\n    solutions = solve(equation1.subs(symbols('n'), 1), (x, y))\n\n    # We return the difference x - y which is the number of more books Lily had initially\n    return solutions[x] - solutions[y]\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # A three-digit number has hundreds, tens, and units place\n    # First, we choose which two of the three places will have the same digit\n    two_places_same = 3\n\n    # Next, we choose which digit will be repeated (from 1 to 9, not 0)\n    digit_repeated = 9\n\n    # Then, we choose the digit for the third place (9 options, excluding the already chosen digit)\n    third_place_digit = 9\n\n    # Finally, we count how many ways the two same digits can be arranged in the two chosen places\n    # Since they are the same, there's only one way to arrange them\n\n    # Multiply the choices according to the multiplication rule\n    ans = two_places_same * digit_repeated * third_place_digit\n\n    # We multiplied the amount for the first two, but we also need to consider that the third digit\n    # could be zero, which adds a different case because we cannot have a repeating zero in the hundreds\n    # So, we have 1 (hundreds place cannot be zero) * 9 (possible digits for the repeating one) * 10 (all digits for the last place)\n    zero_case = 1 * 9 * 10\n\n    # Add both cases together\n    ans += zero_case\n\n    return ans\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibbles = 11\n    wibble_arms = 6\n    total_arms = 81\n    \n    wibble_total_arms = wibbles * wibble_arms\n    wobble_arms = total_arms - wibble_total_arms\n    \n    wobble_arms_each = 5\n    wobbles = wobble_arms // wobble_arms_each\n    \n    return wobbles\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):  # hundreds place must be between 1 and 9\n        for tens in range(0, 10):  # tens place can be between 0 and 9\n            for ones in range(0, 10):  # ones place can also be between 0 and 9\n                # Check the given conditions\n                if (hundreds + tens + ones == 15 and\n                    tens == 2 * hundreds and \n                    hundreds == ones + 1):\n                    # If all conditions are met, return the 3-digit number\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    minutes = 32\n    fraction = 1/4 * 1/6 * 1/8\n    total_seconds = minutes * 60 * fraction\n    return int(total_seconds)\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Define the custom operation\n    def custom_op(a, b):\n        return a + b - (a * b) / 910\n\n    # Initially set the result to the last term\n    result = 1\n\n    # Perform the operation in reverse from 2 to 2016\n    for num in range(2, 2017):\n        result = custom_op(num, result)\n\n    return result\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import primerange\n\ndef solution():\n    max_b = 179 // 9  # Since 9b cannot exceed 179 and b has to be a prime\n    primes = list(primerange(1, max_b + 1))\n    for b in primes:  # Iterate over all possible primes for b\n        a = (179 - 9 * b) / 7  # Solve for a\n        if a.is_integer() and a in primes:  # Check if a is a prime number\n            return int(a + b)  # Return the sum of a and b\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10    # km/h\n    distance_ahead = 10  # km\n\n    maverick_catch_up_time = 24 / 60  # converted to hours\n\n    # Distance covered by Maverick in the catch up time\n    maverick_distance = maverick_speed * maverick_catch_up_time  \n\n    # Distance covered by Kelvin in the catch up time\n    kelvin_distance = kelvin_speed * maverick_catch_up_time  \n\n    # The difference in distance should be equal to the distance Kelvin was ahead\n    # if Maverick's assertion is correct.\n    if maverick_distance - kelvin_distance == distance_ahead:\n        return maverick_catch_up_time * 60  # To return the time in minutes\n\n    # If not, we need to calculate the time it takes for Maverick to catch up to Kelvin.\n    # We solve the relative speed equation: (Maverick's speed - Kelvin's speed) * time = distance ahead\n    catch_up_time = distance_ahead / (maverick_speed - kelvin_speed)  # time in hours\n\n    return catch_up_time * 60  # Convert the catch up time to minutes\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * 5 - wrong_answers * 2\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Calculate the total length of the road using the distance between plum trees\n    total_length = (41 - 1) * 4  # 40 intervals of 4m each\n    \n    # Calculate the number of pine trees by dividing the total length by the distance between pine trees\n    # and adding 1 for the first tree at the beginning of the road\n    num_pine_trees = (total_length // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the younger person, y be the current age of the older person\n    x, y = symbols('x y')\n\n    # When the older person was the current age of the younger person, the younger was 4\n    equation1 = Eq(x - (y - x), 4)\n    \n    # When the younger person is the current age of the older person, the younger will be 61\n    equation2 = Eq(x + (y - x), 61)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want to find the age of the younger person, which is 'x'\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    cost_of_bag = 120\n    # Let's call the original amount of money Bud had as 'x'.\n    # According to the problem, 2/5 of the remaining money (which is 2/3 of the original amount) was spent on the bag.\n    # So, we have 2/5 * (2/3 * x) = 120\n\n    fraction_spent_on_bag = (2/5) * (2/3)\n    original_amount = cost_of_bag / fraction_spent_on_bag\n\n    return original_amount\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since there are 3 kids and each has to get at least one eraser,\n    # we'll subtract 3 from the total erasers to ensure each kid gets one.\n    total_erasers = 6 - 3\n    \n    # After giving 1 eraser to each kid, we have to distribute the remaining erasers.\n    # The problem now is equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = total_erasers\n    # where x1, x2, x3 are non-negative integers.\n\n    # This is a problem of distributing 'total_erasers' indistinguishable items into 3 distinct bins.\n    # The formula for this is (n+k-1) choose (k-1), where n is the total items and k is the bins.\n\n    # Here, we have 'total_erasers' items (total_erasers=3) and 3 bins, so the formula becomes:\n    # (total_erasers+3-1) choose (3-1) = 5 choose 2.\n    \n    from math import comb\n    ways = comb(total_erasers + 3 - 1, 3 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    # Assume the amount of work to build the bridge is W\n    # 10 people can build the bridge in 9 hours, so the rate of work per person is W / (10 * 9)\n    # We want to find the number of people (P) required to build the bridge in 3 hours\n    # The rate of work per person remains the same, so we have W = P * 3 * (W / (10 * 9))\n    # We can solve for P with a simple equation because W cancels out\n    \n    # Rate per person = W / (10 * 9)\n    # Total rate to finish in 3 hours = W / 3\n    # So we need to equal the total rate to finish in 3 hours with P times the rate per person:\n    # W / 3 = P * (W / (10 * 9))\n    # P = (10 * 9) / 3\n    \n    P = (10 * 9) / 3\n    return int(P)\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n\n    nancy_weight = candy_weight - weight_difference\n\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining = 48\n    second_day_factor = (100 - 60) / 100\n    first_day_factor = 2/3\n\n    total = remaining / (second_day_factor * first_day_factor)\n    \n    return int(total)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            for k in range(1, 9):\n                if i < j < k and i + j + k == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    \n    desks_between_jessica_and_judy = 1  # Since Jessica sits in front of Judy, there is only one position between them\n    \n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 2  # +2 for Jessica's and Judy's own desks\n    \n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    square_sum = (1/6) * n * (n + 1) * (2*n + 1) - (1/6) * 4 * (4 + 1) * (2*4 + 1)\n    return int(square_sum)\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - boys / 11, girls - 5)\n    equation2 = Eq(boys + girls, 152)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    # Following the sequence of operations\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    # Define the equation: 75% * x - 5 = 2.5\n    # Convert 75% to 0.75 and move all terms involving x to the left side of equation and constants to the right.\n    x = (2.5 + 5) / 0.75\n\n    return x\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtraction_amount = 11\n    term = 0\n    while initial_amount > 0:\n        term += 1\n        initial_amount -= subtraction_amount\n    return -(subtraction_amount - (initial_amount + subtraction_amount))\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    one_number = 0.11\n    other_number = (midpoint - one_number) + midpoint\n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    unit_rate = 7 / 12\n    toffees = chocolates * unit_rate\n\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(i for i in range(1, num + 1) if num % i == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes_cost_per_box = 56\n    total_cost = 2826\n    number_of_mangoes_boxes = 24\n\n    mangoes_total_cost = mangoes_cost_per_box * number_of_mangoes_boxes\n    lychees_total_cost = total_cost - mangoes_total_cost\n    number_of_lychees_boxes = 19\n\n    lychees_cost_per_box = lychees_total_cost / number_of_lychees_boxes\n\n    return lychees_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    counts = set()\n    for coin1 in [1, 2, 5]:\n        for coin2 in [1, 2, 5]:\n            for coin3 in [1, 2, 5]:\n                total = coin1 + coin2 + coin3\n                counts.add(total)\n    return len(counts)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 3):\n        A, B, C = int(p[0]), int(p[1]), int(p[2])\n        if int(f\"{A}{B}6\") * 2 == int(f\"{B}{C}8\"):\n            return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage_value = 65 / 100\n    decimal_value = 0.507\n    fraction_value = 1 / 4\n\n    ans = percentage_value + decimal_value + fraction_value\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    unique_numbers = set()\n\n    for perm in permutations(cards, 3):\n        number = int(''.join(perm))\n        if number >= 100:\n            unique_numbers.add(number)\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Time jogged in hours\n    time_jogged = 1  # from 7:30 am to 8:30 am\n    # Time walked in hours\n    time_walked = 2  # from 8:30 am to 10:30 am\n\n    # Speeds\n    speed_jogging = 5  # miles per hour\n    speed_walking = 3  # miles per hour\n\n    # Distance = speed * time\n    distance_jogged = time_jogged * speed_jogging\n    distance_walked = time_walked * speed_walking\n\n    # Total distance travelled\n    total_distance = distance_jogged + distance_walked\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the smallest number be n, so the five consecutive numbers are n, n+1, n+2, n+3, n+4\n    # Their sum is n + (n+1) + (n+2) + (n+3) + (n+4) = 5n + 10\n    # We know that the sum is 100, so we can write the equation: 5n + 10 = 100\n    # Solving for n gives us n = (100 - 10) / 5\n    \n    n = (100 - 10) // 5\n\n    return n\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Every digit in P, Q, R must be a single digit from 0 to 9\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Expression for the multiplication\n                if (400 + 10*P + Q) * (20 + R) == (8000 + 10*P + 200*Q + 10*R + Q * R):\n                    return P + Q + R\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15 to have their name put on the shirts\n    # Total children: x + y = 50\n    # Total amount paid: 10x + 15y = 555\n\n    for x in range(51):\n        y = 50 - x\n        if 10 * x + 15 * y == 555:\n            return y\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    q = 1\n    cube_num = q\n    while True:\n        cube_root = round((44000 / q) ** (1/3))\n        if cube_root ** 3 == 44000 / q:\n            return q\n        q += 1\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 10 * 3\n    oranges_in_small_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    \n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # You must draw at least one card from each of the four patterns to have some cards\n    # with potentially the same number, which means 4 cards in the worst case scenario.\n    \n    # After having one card of each pattern, drawing a fifth card guarantees \n    # that at least one pattern will be a repeat, but it does not guarantee at least 3 cards with the same number.\n    \n    # You can draw 2 cards of each number without fulfilling the condition (2 cards in each pattern for a single number)\n    # That is 4 patterns * 2 cards = 8 cards without having 3 with the same number. \n    \n    # As soon as you draw the next card (which will be the 9th card overall), you are forced to have \n    # at least one number repeated 3 times, fulfilling the condition.\n    \n    ans = 2 * 4 + 1  # 2 cards of each pattern + 1 more to guarantee three of the same number.\n    \n    return ans\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    # Subtract 1 from num_trees because the distance will be between trees, which is num_trees - 1\n    intervals = num_trees - 1\n    \n    distance = total_length / intervals\n    \n    return distance\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    \n    andy_final = andy_notebooks - andy_gives\n    sister_final = andy_gives\n    \n    # Since after giving away the notebooks both will have the same number\n    sister_initial = andy_final - sister_final\n    \n    correctness = sister_initial == 130  # Joey's claim\n    correct_sister_initial = sister_initial\n    \n    return correctness, correct_sister_initial\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = {\n        'spades': ['A', 'J', 'K'],\n        'hearts': ['3', '5', 'K'],\n        'diamonds': ['2', '7', 'J'],\n        'clubs': ['A', '7'],\n    }\n\n    # From Eddie's statement, we deduce that the suit cannot be unique across all options,\n    # because then he would know the card (if it was clubs, as it only has two possibilities).\n    # So the card cannot be clubs. Removing clubs.\n    possible_cards.pop('clubs')\n\n    # From Eddie's statement, we also deduce that the card number is not unique,\n    # because then Avril would know the card. Removing unique numbers ('3', '5', '2').\n    numbers_to_remove = ['3', '5', '2']\n    for suit, numbers in possible_cards.items():\n        possible_cards[suit] = [number for number in numbers if number not in numbers_to_remove]\n\n    # Now considering Avril's statement, she must have heard a number that, after Eddie's statement,\n    # is uniquely associated with one suit. Hence, the card cannot have a number that is present in\n    # more than one remaining suit. Since 'K' is in two suits, we remove it as well.\n    numbers_to_remove.append('K')\n    for suit, numbers in possible_cards.items():\n        possible_cards[suit] = [number for number in numbers if number not in numbers_to_remove]\n\n    # At this point, the remaining possibilities should give the answer directly,\n    # because Eddie is then able to know as well.\n    for suit, numbers in possible_cards.items():\n        if len(numbers) == 1:\n            return suit, numbers[0]\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_trees = 9\n    number_of_intervals = number_of_trees + 1\n\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let's denote the smaller number as x. So the bigger number is 2x.\n    # According to the problem statement, we know that x + 2x = 72.\n\n    # Let's solve for x.\n    x = 72 / 3\n\n    return x\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    numbers = [3, 4, 6, 10]\n    sum_of_four_numbers = sum(numbers)\n    mean_value = 5\n    total_numbers = 5\n    \n    total_sum = mean_value * total_numbers\n    fifth_number = total_sum - sum_of_four_numbers\n    \n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n\n    # Emily is directly behind Danny, so their relative positions don't change the total count\n    # People in front of Emily\n    people_in_front_of_danny = people_in_front_of_emily + 1\n\n    # People behind Danny, including Danny\n    people_behind_danny_including_danny = danny_position_from_back\n\n    # Total people in the queue\n    total_people = people_in_front_of_danny + people_behind_danny_including_danny\n\n    return total_people\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(10):\n        # Change the hundreds place\n        if i != 2 and isprime(i * 100 + 0 * 10 + 0):\n            count += 1\n        # Change the tens place\n        if isprime(2 * 100 + i * 10 + 0):\n            count += 1\n        # Change the units place. Notice primes > 2 are odd.\n        if i % 2 != 0 and isprime(2 * 100 + 0 * 10 + i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    sections_per_piece = 4  # The number of sections the piece is cut into\n    time_per_cut = 12 / sections_per_piece  # Time per each cut\n    total_cuts_needed = 5 * (sections_per_piece + 1) - 1  # Total number of cuts to cut the piece 5 times\n    total_time = time_per_cut * total_cuts_needed  # Total time needed\n    return total_time\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_deadline, total_pages = symbols('days_deadline total_pages')\n    \n    # Vanessa reads 30 pages a day, she will finish 2 days later\n    equation1 = Eq(30 * (days_deadline + 2), total_pages)\n    \n    # Vanessa reads 39 pages a day, she will finish 4 days ahead\n    equation2 = Eq(39 * (days_deadline - 4), total_pages)\n\n    solutions = solve((equation1, equation2), (days_deadline, total_pages))\n    \n    deadline_days = solutions[days_deadline]\n    book_pages = solutions[total_pages]\n\n    return deadline_days, book_pages\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count_5s, pages = 0, 0\n    while count_5s < 30:\n        pages += 1\n        count_5s += str(pages).count('5')\n    return pages\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n    cost_per_cup = total_cost / num_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum_first_half = sum(range(6, 11))  # Sum of numbers from 6 to 10\n    sum_second_half = sum(range(1, 6))  # Sum of numbers from 1 to 5\n    ans = sum_first_half - sum_second_half\n    return ans\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n    \n    days = (total_rooms / rooms_per_worker_per_day) / workers\n    \n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Equations based on the problem statement\n    equation1 = Eq(apple + 2 * orange, 48)\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = str(i)\n        if digits.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one tennis ball and y be the pocket money\n    x, y = symbols('x y')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(4 * x + 27, y)  # 4 tennis balls + 27p = pocket money\n    equation2 = Eq(2 * x + 151, y)  # 2 tennis balls + £1.51 = pocket money\n\n    # Solving the equations to find the values of x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Pocket money is represented by y in the equation\n    return solutions[y]\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jason, will, tom = symbols('jason will tom')\n    \n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n    \n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n    \n    return solutions[tom]\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let g be the number of pieces Gerald eats\n    # Thomas eats 5/3 times what Gerald eats\n    # Together they eat 104 pieces\n    # g + 5/3 * g = 104\n    # Solve for g\n    g = 104 / (1 + 5/3)\n    \n    # Calculate the number of pieces Thomas eats\n    t = (5/3) * g\n    \n    # Calculate the difference in the number of pieces they ate\n    difference = t - g\n    \n    return int(difference)\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    elias, aileen = symbols('elias aileen')\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Extract the number of stickers they each have in the end\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n\n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)  # Generate numbers from 11 to 31 with a step of 2\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    return total_sum\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the base 8 numbers to base 10\n    base10_number1 = int(str(25), 8)\n    base10_number2 = int(str(37), 8)\n\n    # Add the numbers in base 10\n    base10_sum = base10_number1 + base10_number2\n\n    # Convert the sum back to base 8\n    base8_sum = oct(base10_sum)[2:]  # [2:] is used to remove the '0o' prefix\n\n    return int(base8_sum)\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b, girls be g, and adults be a.\n    # From the question we have:\n    # b = (2/7) * g ...(1)\n    # a = (2/3) * (b + g) ...(2)\n    # a - b = 1228 ...(3)\n    \n    # From equation (1):\n    # b = (2/7) * g\n    # g = (7/2) * b\n    \n    # From equation (2):\n    # a = (2/3) * (b + (7/2) * b)\n    # a = (2/3) * (9/2) * b\n    # a = 3 * b\n    \n    # Substitute a from equation (2) into equation (3):\n    # 3 * b - b = 1228\n    # 2 * b = 1228\n    # b = 1228 / 2\n    b = 1228 / 2\n    \n    # Now find g using b:\n    g = (7/2) * b\n    \n    # And find a using b:\n    a = 3 * b\n    \n    # Total number of people at the park:\n    total_people = b + g + a\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    initial_cost_per_racket = 150\n    sell_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the initial number of rackets purchased\n    # The equation to solve is: sell_price_per_racket * (x - remaining_rackets) = initial_cost_per_racket * x + profit\n    # Rearrange the equation to solve for x:\n    # sell_price_per_racket * x - sell_price_per_racket * remaining_rackets = initial_cost_per_racket * x + profit\n    # (sell_price_per_racket - initial_cost_per_racket) * x = sell_price_per_racket * remaining_rackets + profit\n    # x = (sell_price_per_racket * remaining_rackets + profit) / (sell_price_per_racket - initial_cost_per_racket)\n\n    x = (sell_price_per_racket * remaining_rackets + profit) / (sell_price_per_racket - initial_cost_per_racket)\n    return int(x)\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the initial amount of money Chloe and Gordon had.\n    # Chloe's remaining amount is x - 20d, where d is the number of days passed.\n    # Gordon's remaining amount is x - 25d.\n    # According to the problem, Chloe has $157 left and Gordon has $82 left.\n  \n    # Set up the equations based on the information given:\n    # Chloe's equation: x - 20d = 157\n    # Gordon's equation: x - 25d = 82\n  \n    # Since the equations are equal to each other when they had the same amount:\n    x_minus_20d = 157\n    x_minus_25d = 82\n  \n    # Subtract the second equation from the first equation to find out how many days have passed:\n    d = (x_minus_20d - x_minus_25d) // 5\n  \n    # Use the value of d to find out how much money Gordon had initially by substituting d back into Gordon's equation:\n    initial_amount = x_minus_25d + 25 * d\n\n    return initial_amount\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    result = 813 * 72\n    return result\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    # Number of circles\n    n = 10\n    # Calculate number of regions using formula: R(n) = 1 + n(n+1)/2 + n(n-1)(n-2)/6\n    regions = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return regions\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14-1):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    # Since the number of trailing zeros in a factorial (in this case, 10!) is determined\n    # by the number of 2-5 pairs in its prime factorization (since 10=2*5),\n    # we need to count the number of times 5 divides into 10!.\n\n    n = 10\n    count = 0\n    \n    while n >= 5:\n        n //= 5\n        count += n\n        \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost = 15\n    bad_melons = total_melons // 5\n    good_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    revenue = good_melons * selling_price_per_melon\n    profit = revenue - cost\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n    \n    oranges_leftover = 17\n    apples_leftover = 5\n    total_oranges = 150\n    total_apples = 100\n    \n    oranges_per_neighbour = total_oranges - oranges_leftover\n    apples_per_neighbour = total_apples - apples_leftover\n    \n    # Find the greatest common divisor (GCD) of the oranges and apples distributed\n    neighbours = gcd(oranges_per_neighbour, apples_per_neighbour)\n    \n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # the line measures 10cm\n    distance_between_crosses = 1  # a cross every 1cm\n    crosses = (line_length // distance_between_crosses) + 1  # adding the initial cross\n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial total value of jewels in P, and y be in Q\n    x, y = symbols('x y')\n\n    # Since transferring a 5000 jewel from P to Q increases the average value by 1000,\n    # we set up two equations based on the given conditions.\n\n    # Before the transfer: average in P is x/3 and in Q is y/3\n    # After transfer: average in P is (x-5000)/3 and in Q is (y+5000)/3\n\n    # The increase in average by 1000 after the transfer results in the following equations:\n    equation1 = Eq((x - 5000)/3, x/3 + 1000)\n    equation2 = Eq((y + 5000)/3, y/3 + 1000)\n    \n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Total value of all 6 jewels is the sum of the initial total values of P and Q\n    total_value = solutions[x] + solutions[y]\n    return total_value\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    matches = comb(num_teams, 2)\n    return matches\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    total_balloons = 75\n    green_per_pattern = 2\n\n    full_patterns = total_balloons // pattern_length\n    remaining_balloons = total_balloons % pattern_length\n\n    greens_in_full_patterns = full_patterns * green_per_pattern\n\n    additional_greens = 0\n    if remaining_balloons >= 3:\n        additional_greens += 1\n    if remaining_balloons == 6:\n        additional_greens += 1\n\n    total_green_balloons = greens_in_full_patterns + additional_greens\n\n    return total_green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, jessica = symbols('sandra jessica')\n\n    # After Sandra gave Jessica 13 marbles\n    equation1 = Eq(sandra - 13, jessica + 13 - 6)\n\n    # Sandra had more marbles than Jessica at first\n    equation2 = Eq(sandra, jessica + (sandra - jessica))\n\n    solutions = solve((equation1, equation2), (sandra, jessica))\n\n    # The difference in the number of marbles they originally had\n    diff_original = solutions[sandra] - solutions[jessica]\n\n    return diff_original\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1st_and_6th = 60  # distance between the 1st and 6th lamp posts\n    number_of_intervals_between_1st_and_6th = 6 - 1  # number of intervals between 1st and 6th lamp posts\n    distance_per_interval = distance_between_1st_and_6th / number_of_intervals_between_1st_and_6th  # distance for each interval\n\n    number_of_intervals_between_1st_and_9th = 9 - 1  # number of intervals between 1st and 9th lamp posts\n    distance_between_1st_and_9th = distance_per_interval * number_of_intervals_between_1st_and_9th  # total distance between 1st and 9th lamp posts\n    \n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    strawberries = 15 + 27 + 19\n    remainder = strawberries % 8\n    return remainder\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    candy_shared_each_friend = 26\n    number_of_friends = 7\n    candy_left_with_kate = 22\n\n    candy_brought_to_school = (candy_shared_each_friend * number_of_friends) + candy_left_with_kate\n    total_candy = candy_brought_to_school * 3  # since she ate 1/3, the rest 2/3 is what she brought to school\n\n    return total_candy\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3 / 2)\n    return ans\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Initialize a counter for each digit\n    count_1 = 0\n    count_2 = 0\n    # Iterate through numbers to find when the digits are used the required number of times\n    i = 1\n    while True:\n        # Convert number to string to count occurrences of each digit\n        num_str = str(i)\n        count_1 += num_str.count('1')\n        count_2 += num_str.count('2')\n        # Check if the digit counts match the condition\n        if count_1 == 15 and count_2 == 14:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Let x be the total number of steps to the top for Andy\n    # Let y be the total number of steps to the top for Bob when Andy reaches the top\n    # We know that Andy and Bob start at the same time and climb at a constant speed\n    # Therefore, the following ratio holds for their speeds:\n    # Speed of Andy / Speed of Bob = x / y = (x - 9) / (y - 5)\n    # This is because when Andy is at the 9th floor, Bob is at the 5th.\n    # Also, since Andy will reach 25th floor (let's assume top floor is 25th)\n    # the total number of steps to the top for Andy (x) is 25 when Andy reaches the top.\n    x = 25\n    ratio = (x - 9) / (5)\n    y = ratio * x\n    return int(y)\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    W = symbols('W')  # total number of words to type\n    original_rate = W / 3  # original speed (words per minute)\n    increased_rate = W / 2  # increased speed when typing 30 more words per minute\n\n    # Equation representing the relationship between the original rate and the increased rate\n    equation = Eq(original_rate + 30, increased_rate)\n\n    # Solve the equation for W\n    total_words = solve(equation, W)\n\n    return total_words[0]\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B', real=True, positive=True)\n\n    # Initial condition A has 2/3 of B\n    equation1 = Eq(A, (2/3) * B)\n    \n    # After transfer of 4 liters, A has 7/8 of B - 4\n    equation2 = Eq(A + 4, (7/8) * (B - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total amount of water in both pails\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    climbed_distance = 0\n    day_count = 0\n\n    while climbed_distance < depth:\n        day_count += 1\n        climbed_distance += climb_up\n        if climbed_distance >= depth:\n            break\n        climbed_distance -= slip_down\n    \n    return day_count\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initially, all lights are off (0: off, 1: on)\n\n    # Ms. Lily changes the state of every other light, starting with 1\n    for i in range(1, 11, 2):\n        lights[i-1] = 1  # Change the state of the light\n\n    # Sam presses each even-numbered light switch 7 times\n    for i in range(2, 11, 2):\n        lights[i-1] = (lights[i-1] + 7) % 2  # Pressing 7 times toggles the state\n\n    # Count the number of lights that are on\n    ans = lights.count(1)\n    return ans\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900\n    initial_sugar_percentage = 0.06\n    final_sugar_percentage = 0.10\n\n    initial_sugar = initial_volume * initial_sugar_percentage\n    final_sugar = initial_volume * final_sugar_percentage\n\n    sugar_to_add = final_sugar - initial_sugar\n    return sugar_to_add\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    total_parts_needed = 100\n    hours_taken = 2\n    speed_per_hour = parts_already_made / hours_taken\n    remaining_parts = total_parts_needed - parts_already_made\n    hours_needed = remaining_parts / speed_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    total_cost = 4 * cost_per_bar\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # If we take two balls of each color, we can still end up with only two different colors.\n    # To ensure we have three different colors, we need to take one more ball.\n    balls_needed = (2 * 3) + 1\n    return balls_needed\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 4 + 2 * grade4)\n    equation2 = Eq(grade6, 8 + 3 * grade4)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    colors = 5\n    balls_per_person = 2\n\n    # Calculate the number of combinations for selecting 2 balls out of 5 colors\n    total_combinations = comb(colors, balls_per_person)\n\n    # If each person takes a unique pair of balls, the next person will surely take a pair that has already been taken.\n    # Therefore, we need total_combinations + 1 people to ensure that at least 2 people have the same kind of balls.\n    ans = total_combinations + 1\n\n    return ans\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    # Since it's an arithmetic sequence and the difference is constant:\n    # third_term = first_term + 2 * common_difference\n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let the number of cards Hisham has be h\n    # Melissa has twice as many cards, so she has 2h\n    # The total is 3h since h (Hisham's cards) + 2h (Melissa's cards) = 876\n    # We can solve for h\n    h = total_cards / 3\n    # The number of cards Melissa should give Hisham is the difference\n    # between what Melissa has and what they would have if they had the same number\n    cards_to_give = (2*h - h)\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = number_of_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Numbers divisible by 4 from 10 to 41 are 12, 16, 20, ..., 40\n    div_by_4 = len(range(12, 42, 4))\n\n    # Numbers that give a remainder of 2 when divided by 4 are 10, 14, 18, ..., 38, 42\n    div_by_4_remainder_2 = len(range(10, 43, 4))\n\n    # Total numbers not divisible by 4 (even numbers)\n    not_div_by_4 = (41 - 10 + 1) - div_by_4 - div_by_4_remainder_2\n\n    # To ensure two numbers whose product is divisible by 4, we need\n    # at least one number from the set of numbers that are divisible by 4 (this is certain with one pick)\n    # and we want to avoid picking numbers from the set of numbers that give a remainder of 2\n    # We can pick all numbers not divisible by 4 first, and then one more to ensure we have one that is divisible by 4\n    draws = not_div_by_4 + 1\n\n    return draws\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    sum = 0\n    for i in range(46, 51):\n        sum += i * (100 - i)\n    ans = sum\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n    \n    # Find the smallest two-digit prime number\n    smallest_two_digit_prime = next(primerange(10, 100))\n    \n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for num in range(10, 100):\n        if num**0.5 == int(num**0.5):\n            largest_two_digit_square = num\n\n    # Calculate Product\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Initial ages of Brian and his father\n    father_age = 41\n    brian_age = 14\n    \n    # Age difference remains constant\n    age_diff = father_age - brian_age\n    \n    # Loop to find the next time their ages are the reverse of each other\n    while True:\n        # Increment their ages\n        brian_age += 1\n        father_age += 1\n        \n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_usd = euro_to_usd * cost_in_euros\n    return cost_in_usd\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = float('-inf')\n    digits = range(1, 10)\n    \n    for p in permutations(digits):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + (b/c) + ((d/e)*f) - (g + (h/j))\n        if N % 1 == 0 and N > max_N:\n            max_N = N\n    \n    return int(max_N)\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, combined age of the dogs\n    combined_age_four_years_ago = 10\n    \n    # Current combined age of the dogs\n    current_combined_age = combined_age_four_years_ago + 2 * 4\n    \n    # Combined age of the dogs in 2 years\n    combined_age_in_two_years = current_combined_age + 2 * 2\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    total_participants = 20\n    avg_juniors = 10\n    avg_total = 14\n\n    total_score_juniors = total_juniors * avg_juniors\n    total_score_all = total_participants * avg_total\n\n    total_score_seniors = total_score_all - total_score_juniors\n    total_seniors = total_participants - total_juniors\n    avg_seniors = total_score_seniors / total_seniors\n\n    return avg_seniors\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Let total number of books initially be 3900\n    total_books_initially = 3900\n    \n    # Ratio of books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    \n    # Total ratio\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    # Initial number of books\n    chinese_books_initially = (ratio_chinese / total_ratio) * total_books_initially\n    malay_books_initially = (ratio_malay / total_ratio) * total_books_initially\n    english_books_initially = (ratio_english / total_ratio) * total_books_initially\n    \n    # The school bought 510 new books\n    new_books = 510\n    \n    # Chinese books increased by 20%\n    chinese_books_increased = chinese_books_initially * 1.20\n    \n    # Malay books increased by 10%\n    malay_books_increased = malay_books_initially * 1.10\n    \n    # New number of Chinese and Malay books together after increase\n    new_chinese_malay_books = chinese_books_increased + malay_books_increased\n    \n    # Since total books also increased by 510, remaining increase is for English books\n    new_english_books = total_books_initially + new_books - new_chinese_malay_books\n    \n    # The percentage increase in the number of English books\n    percentage_increase_english = ((new_english_books - english_books_initially) / english_books_initially) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2022)\n    denominator = 92 / (10 ** 2023)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 24  # Rex answered all but one of the 25 questions\n    score = 66\n    \n    # Let correct be the number of correct answers.\n    # If Rex got all questions right, he would have gotten 4 * total_questions points.\n    max_score = 4 * total_questions\n    # The loss for each incorrect answer is 4 (for not scoring 4 points) + 2 (for losing 2 points), which is 6 points.\n    \n    incorrect = (max_score - score) // 6\n    correct = total_questions - incorrect\n    \n    return correct\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    answered_questions = int(0.60 * total_questions)\n    unanswered_questions = total_questions - answered_questions\n    unanswered_marks = unanswered_questions\n\n    correct_marks = 5\n    wrong_marks = -2\n    total_marks = 264 - unanswered_marks\n\n    # Let x be the number of correct answers\n    # Then (answered_questions - x) would be the wrong answers\n    # 5x - 2(answered_questions - x) = total_marks after subtracting unanswered_marks\n    # Combine like terms\n    # 5x - 2answered_questions + 2x = total_marks\n    # 7x = total_marks + 2answered_questions\n    # x = (total_marks + 2answered_questions) / 7\n    correct_answers = (total_marks + 2 * answered_questions) / (correct_marks + abs(wrong_marks))\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_gram_of_butter = 160 / 50\n    butter_needed_for_300_cookies = 300 / cookies_per_gram_of_butter\n    return butter_needed_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # Using the Pigeonhole Principle, if we have n containers and we want to\n    # ensure that at least one container has at least m apples, we can calculate\n    # the minimum number of apples needed as (containers - 1) * (m - 1) + 1.\n    # For this problem, m = 2 apples, and n = 10 containers.\n\n    containers = 10\n    minimum_apples_per_container = 2\n\n    # First, we fill (containers - 1) with (minimum_apples_per_container - 1) apples.\n    # Then we add 1 more apple to ensure that there is at least one container with 2 apples.\n    least_number_of_apples = (containers - 1) * (minimum_apples_per_container - 1) + 1\n\n    return least_number_of_apples\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    total_digits = 0\n    current_number = 1\n    while total_digits < 1000:\n        total_digits += len(str(current_number))\n        if total_digits < 1000:\n            current_number += 1\n        else:\n            break\n\n    digit_over = total_digits - 1000\n    last_number_str = str(current_number)\n    unit_digit = last_number_str[len(last_number_str) - 1 - digit_over]\n    \n    return int(unit_digit)\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square = symbols('square')\n    equation = Eq(3 * square - 2, 19)\n    solution = solve(equation, square)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Dedra had 4 times as much money as Timm at first.\n    equation1 = Eq(dedra, 4 * timm)\n\n    # Both received $72 each.\n    # Now, Dedra has twice as much money as Timm.\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane, jack + 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using Inclusion-Exclusion Principle\n    total = A + C + E - AC - AE - CE + ACE\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    behind_louis = 14\n    louis_position = total_people - behind_louis\n    in_front_of_louis = louis_position - 1  # Louis himself is not counted\n    \n    return in_front_of_louis\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    num_pupils = 18\n    seats = 3\n\n    ans = permutations(num_pupils, seats)\n\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age = 4\n    jason_age, bruce_age, willie_age = symbols('jason_age bruce_age willie_age')\n\n    equation1 = Eq(jason_age, bruce_age)\n    equation2 = Eq(jason_age, willie_age)\n    equation3 = Eq(jack_age + jason_age + bruce_age + willie_age, 19)\n\n    solutions = solve((equation1, equation2, equation3), (jason_age, bruce_age, willie_age))\n\n    return solutions[jason_age]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let John's current age be `john` and Jake's current age be `jake`\n    john, jake = symbols('john jake')\n    \n    # Equation 1: The sum of their ages is 44\n    equation1 = Eq(john + jake, 44)\n    \n    # Equation 2: In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (john, jake))\n\n    # John's age in 14 years\n    john_future_age = solutions[john] + 14\n    \n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the total number of erasers Andy had and y be the number of friends\n    x, y = symbols('x y')\n    \n    # system of equations given by the problem statement\n    equation1 = Eq(x - 5*y, 3)\n    equation2 = Eq(6*y - x, 2)\n    \n    # solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # we need to return the total number of erasers Andy had\n    return solutions[x]\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the children's ages\n    ages = symbols('a1:10')\n    \n    # Create a list of equations based on the problem statement\n    equations = [\n        Eq(ages[0] + (i * 15/12), ages[i]) for i in range(1, 9)\n    ]\n    \n    # Add the equation that the oldest is 6 times the age of the youngest\n    equations.append(Eq(ages[8], 6 * ages[0]))\n    \n    # Solve the system of equations\n    solutions = solve(equations, ages)\n    \n    # The youngest child's age\n    youngest_age = solutions[ages[0]]\n    \n    return youngest_age\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        rotated_num = int(str(i % 10) + str(i)[:-1])\n        if rotated_num - i == 5877:\n            return i\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += ((n ** 2) + ((n + 1) ** 2)) / (n * (n + 1))\n    return round(total)\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11 + 1) * 11\n    last_multiple = 150 // 11 * 11\n\n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let J's number of sweets be x. Then C has x + 5 sweets.\n    # After C gives J 10 sweets, C will have (x + 5) - 10 sweets, and J will have x + 10 sweets.\n    # The difference D in their numbers of sweets will then be:\n    # D = |(x + 5 - 10) - (x + 10)|\n    # This simplifies to:\n    # D = |(x - 5) - (x + 10)|\n    # D = |-15| = 15\n    difference = 15\n    return difference\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from sympy import symbols, Min\n\ndef solution():\n    # Create a symbol for a possibly unknown result\n    result = symbols('result')\n    \n    # List to store all possible results with different pairs of brackets\n    results = []\n    \n    # Compute all possible results with different bracket placements and append them to results list   \n    results.append((15 + 5) * (5 + 15) - 6 + 7)  # ((15 + 5) * (5 + 15)) - 6 + 7\n    results.append(15 + (5 * (5 + 15)) - 6 + 7)  # 15 + ((5 * (5 + 15)) - 6) + 7\n    results.append(15 + 5 * ((5 + 15) - 6) + 7)  # 15 + 5 * ((5 + 15) - 6) + 7\n    results.append((15 + 5 * 5) + (15 - 6) + 7)  # (15 + 5 * 5) + ((15 - 6) + 7)\n    results.append(15 + ((5 * 5) + (15 - 6)) + 7)# 15 + (((5 * 5) + 15) - 6) + 7\n    \n    # Find the smallest result\n    smallest_result = Min(*results)\n    \n    return smallest_result\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + 75 * 0.01 * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n    \n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # The greatest 3-digit odd number is 999. \n    # We'll go backwards to find the greatest number fulfilling the conditions.\n    for number in range(999, 99, -1):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Five pupils scored an average of 72%\n    total_score_5_pupils = 5 * 72\n\n    # Including Mary, the average score for 6 pupils increased to 75%\n    total_score_6_pupils = 6 * 75\n\n    # Mary's score is the difference between the total scores\n    marys_score = total_score_6_pupils - total_score_5_pupils\n\n    return marys_score\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48  # meters from Auntie Lina's house to the wet market\n    speed = 8  # meters per minute Auntie Lina can walk\n    \n    # Calculate time taken by dividing the distance by the speed\n    time = distance / speed\n    \n    # Return the correct time\n    return int(time)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # If she had the worst luck, she could draw all of one color first before getting a different color marble.\n    max_single_color = max(4, 7, 6, 2)  # The maximum number of a single color\n    # To guarantee she has all four colors, she must have drawn the maximum number of any color plus 3 more\n    # (one for each of the remaining colors).\n    ans = max_single_color + 3  \n    return ans\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from sympy import symbols, binomial\n\n    # Define the problem as a \"stars and bars\" combinatorial problem.\n    # There are 11 identical items (stars) to place into 4 distinct bins (students).\n    # Since each student must get at least one doughnut, we distribute one to each,\n    # leaving us with 11 - 4 = 7 doughnuts to distribute freely.\n\n    remaining_doughnuts = 11 - 4\n\n    # Now the problem is equivalent to placing 7 indistinguishable items into 4 bins,\n    # which is a problem we can solve with the \"stars and bars\" technique.\n    # The number of ways to do this is C(n+k-1, k-1) where\n    # n is the number of items to distribute and k is the number of bins.\n\n    # In this case, n = remaining_doughnuts and k = 4 (four students).\n    # Substitute and calculate the binomial coefficient.\n\n    n = symbols('n')\n    ans = binomial(n + 4 - 1, 4 - 1).subs(n, remaining_doughnuts)\n\n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    \n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    total_change = 500  # total change in pence\n    coins = [5, 10, 20, 50, 100, 200]  # possible coins in pence\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                for c4 in coins:\n                    for c5 in coins:\n                        if c1 != c2 and c1 != c3 and c1 != c4 and c1 != c5 and \\\n                           c2 != c3 and c2 != c4 and c2 != c5 and \\\n                           c3 != c4 and c3 != c5 and \\\n                           c4 != c5 and \\\n                           c1 + c2 + c3 + c4 + c5 == total_change:\n                            spend = 500 - (c1 + c2 + c3 + c4 + c5)\n                            return spend\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    for x in range(1, 38):  # since the total number of notes is 38\n        y = 38 - x\n        if x * 0.2 == 3 * (y * 0.25):\n            # Calculate the total amount spent on the fan\n            cost = x * 10 * 0.8 + y * 2 * 0.75\n            return cost\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    honey_per_hive = 50 / 5\n    required_honey = 90\n    required_hives = required_honey / honey_per_hive\n    additional_hives = required_hives - 5\n    return int(additional_hives)\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n    \n    # Calculate the total horizontal distance\n    horizontal_distance = 15 - 9  # East - West\n    \n    # Calculate the total vertical distance\n    vertical_distance = 3 + 5  # Sum of North movements\n    \n    # Calculate the shortest distance using Pythagorean theorem\n    shortest_distance = sqrt(horizontal_distance**2 + vertical_distance**2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    eq1 = Eq(banana + 3 * pear, 84)\n    eq2 = Eq(banana + pear, 48)\n    \n    solutions = solve((eq1, eq2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of erasers Ali and Kumar originally have\n    ali, kumar = symbols('ali kumar')\n    \n    # Create the equations based on the problem statement\n    # Equation for the original ratio\n    equation1 = Eq(ali / kumar, 7 / 5)\n    # Equation after Ali gives Kumar 10 erasers\n    equation2 = Eq((ali - 10) / (kumar + 10), 1 / 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, kumar))\n    \n    # Calculate the total number of erasers they have altogether\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20\n    activity_and_break_time = 45 + 20\n\n    activities = total_time_in_minutes // activity_and_break_time\n\n    # Check if there is extra time left after the last activity for another break\n    remaining_time_after_activities = total_time_in_minutes % activity_and_break_time\n    if remaining_time_after_activities >= 45:\n        activities += 1\n\n    return activities\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days B takes to finish the work\n    x = symbols('x')\n\n    # A's efficiency is twice B's, so A takes x/2 days to finish the work\n    # A takes 5 days less than B to finish the work\n    equation = Eq(x/2, x - 5)\n\n    # Solve for x\n    days_B = solve(equation, x)[0]\n    \n    return days_B\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100.0  # final length converted to meters\n\n    melted_length_m = initial_length_m - final_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Adam and Ben weigh 102kg\n    # Ben and Carl weigh 97kg\n    # Adam and Carl weigh 92kg\n    \n    # Sum of individual weights (Adam + Ben) + (Ben + Carl) + (Adam + Carl)\n    total_weight_individuals = 102 + 97 + 92\n    \n    # Since Adam's weight is counted twice, Ben's weight is counted twice, and Carl's weight is counted twice,\n    # we need to divide the total by 2 to get their total weight.\n    total_weight = total_weight_individuals / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    str_num = str(number)\n    sum_even_digits = sum(int(str_num[i]) for i in range(1, len(str_num), 2))\n    sum_odd_digits = sum(int(str_num[i]) for i in range(0, len(str_num), 2))\n    remainder = abs(sum_even_digits - sum_odd_digits) % 11\n    \n    is_divisible = (remainder == 0)\n    correct_remainder = remainder if not is_divisible else 0\n    \n    return is_divisible, correct_remainder\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    passengers = 35\n    first_stop_get_off = passengers * 2 // 5\n    passengers -= first_stop_get_off\n    passengers += 7\n    \n    second_stop_get_off = passengers // 4\n    passengers -= second_stop_get_off\n    passengers += 13\n\n    return passengers\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    ways = [0] * 10\n    ways[0], ways[1], ways[4] = 1, 1, 1\n\n    for i in range(2, 10):\n        if i - 1 >= 0:\n            ways[i] += ways[i - 1]\n        if i - 4 >= 0:\n            ways[i] += ways[i - 4]\n\n    return ways[9]\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # If Mr Jones estimates to the nearest £5, then the least amount his shopping bill could actually be\n    # is half of £5 less than his estimate.\n    estimated_amount = 35\n    rounding_error = 5 / 2\n    \n    least_amount = estimated_amount - rounding_error\n    return least_amount\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            for x3 in range(98, 103):\n                if x1 + x2 + x3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Define the sum of an arithmetic series formula\n    def sum_series(n, a1, d):\n        return (n / 2) * (2 * a1 + (n - 1) * d)\n    \n    # Calculate the number of terms\n    first_term = 0.5\n    last_term = 10\n    difference = 0.5\n    num_terms = int((last_term - first_term) / difference + 1)\n    \n    # Calculate the sum of consecutive numbers 0.5, 1, 1.5, ..., 10\n    sum_consecutive_numbers = sum_series(num_terms, first_term, difference)\n    \n    # According to the given formula: 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    # Calculate the square of the sum\n    ans = sum_consecutive_numbers ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left = 10\n    toys_between_rabbit_elephant = 5\n\n    rabbit_position_left = elephant_position_left - toys_between_rabbit_elephant - 1\n    rabbit_position_right = total_toys - rabbit_position_left\n\n    return rabbit_position_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Nancy completes the book in 6 days, so her work rate is 1/6 of the book per day\n    rate_nancy = 1 / 6\n\n    # Together, they complete the book in 4 days, so their combined work rate is 1/4 of the book per day\n    rate_together = 1 / 4\n\n    # The rate at which Tim works is the combined rate minus Nancy's rate\n    rate_tim = rate_together - rate_nancy\n\n    # The time it takes for Tim to complete the book is the inverse of his work rate\n    time_tim = 1 / rate_tim\n\n    return time_tim\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 0\n    while True:\n        pencils += 1\n        if pencils % 2 == 1 and pencils % 3 == 2 and pencils % 4 == 3 and pencils % 5 == 4:\n            return pencils\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan and his 3 sisters\n\n    biscuits_each = total_biscuits / people\n\n    return biscuits_each\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let x be the number of years from now when the sum of their ages will be 40\n    # Age sum now is 22, age sum in x years is 22 + x + x = 40\n\n    # we get the equation: 22 + 2x = 40\n    # solving for x\n    x = (40 - 22) // 2\n\n    return x\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3/7) * 385\n    return result\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]  # Given numbers without 'a'\n    mean_value = 12  # Given mean value\n\n    # Calculate the sum of the given numbers\n    sum_numbers = sum(numbers)\n    \n    # The number of terms including 'a'\n    num_terms = len(numbers) + 1\n\n    # Calculate the total sum including 'a' based on the mean formula\n    total_sum_with_a = mean_value * num_terms\n\n    # Solve for 'a' by subtracting sum of given numbers from total sum\n    a = total_sum_with_a - sum_numbers\n\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for consistent units\n    light1_interval = 60  # 1 minute\n    light2_interval = 90  # 1.5 minutes\n\n    # LCM of the first two traffic lights in seconds\n    lcm_first_two = lcm(light1_interval, light2_interval)\n\n    # Time traffic lights take to change in seconds\n    all_three_lights_interval = 9 * 60  # 9 minutes\n\n    # Division to find the time the third light takes to change lights\n    light3_interval = all_three_lights_interval // lcm_first_two\n    \n    # Convert back to minutes for the answer\n    ans = light3_interval / 60\n    return ans\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert 172 kg to grams\n    total_mass_grams = 172 * 1000\n    \n    # Ratios\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n    \n    # Masses of individual packets in grams\n    mass_p = 300\n    mass_q = 400\n    mass_r = 500\n    \n    # Total ratio units\n    total_ratio_units = ratio_p + ratio_q + ratio_r\n    \n    # Mass per ratio unit\n    mass_per_ratio_unit = total_mass_grams / total_ratio_units\n    \n    # Calculate the number of packets for each ingredient\n    packets_p = (mass_per_ratio_unit * ratio_p) / mass_p\n    packets_q = (mass_per_ratio_unit * ratio_q) / mass_q\n    packets_r = (mass_per_ratio_unit * ratio_r) / mass_r\n    \n    # Total number of packets used\n    total_packets = packets_p + packets_q + packets_r\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    total_time = 10 + 15 + 5 + 15\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    paid_price = 75\n    discount_rate = 0.50\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to the same unit, for instance: centimeters\n    pink_length_cm = 2.5 * 100  # converting meters to centimeters\n    blue_length_cm = 220  # already in centimeters\n    orange_length_cm = 30.5  # already in centimeters\n\n    # Compare the lengths to find out which ribbon is the longest\n    longest_length_cm = max(pink_length_cm, blue_length_cm, orange_length_cm)\n\n    # Return which ribbon is the longest\n    if longest_length_cm == pink_length_cm:\n        return 'pink'\n    elif longest_length_cm == blue_length_cm:\n        return 'blue'\n    else:\n        return 'orange'\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_cars = 3 + 12 + 15\n    total_capacity = (3 * 10) + (12 * 15) + (15 * 20)\n    average_capacity = total_capacity / total_cars\n    return average_capacity\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    def odot(a, b):\n        return sum(a * (10**i) for i in range(b))\n\n    george_result = odot(4, 3)\n    is_correct = george_result == 3702\n    correct_result = None if is_correct else odot(4, 3)\n\n    return (is_correct, correct_result)\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    num_boys = 5\n    percent_boys = (num_boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    exchange_rate = 1.25\n    book_cost_cad = 64\n    book_cost_usd = book_cost_cad / exchange_rate\n    return book_cost_usd\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel's speed is 84 km/h\n    # Eleanor reached City G 1.5 hours after passing Rachel\n    # Therefore, Rachel would have traveled 1.5 hours * 84 km/h after they passed each other\n    rachel_distance_after = 1.5 * 84\n    \n    # Rachel is now 39 km away from City F\n    # Thus, the distance Rachel would have covered from the meeting point to City F is:\n    rachel_distance_from_f = rachel_distance_after + 39\n    \n    # Since Eleanor took 4 hours to travel from City F to City G, and they met 1.5 hours before Eleanor reached City G,\n    # it must mean Eleanor traveled for 4 - 1.5 hours before she met Rachel.\n    eleanor_time_before_meeting = 4 - 1.5\n    \n    # Because Eleanor and Rachel are traveling in opposite directions, the time it takes for Eleanor to meet Rachel equals\n    # the time it takes for Rachel to meet Eleanor before passing each other.\n    # Hence, Eleanor's speed is the distance Rachel covered until they passed each other divided by Eleanor's time before meeting.\n    eleanor_speed = rachel_distance_from_f / eleanor_time_before_meeting\n    \n    # Now, knowing Eleanor's speed, we can calculate the distance from City F to City G, which is\n    # the distance Eleanor covered in the total time of 4 hours.\n    distance_between_cities = eleanor_speed * 4\n    \n    return distance_between_cities\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    return (2 * max(numbers)) - (3 * min(numbers))\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    max_total_score = 5 * 90  # Maximum total score for 5 students with an average of 90\n    scores = []\n    # Iterate from the maximum possible score for a single student down to 0\n    for score1 in range(100, 0, -1):\n        for score2 in range(score1-1, 0, -1):\n            for score3 in range(score2-1, 0, -1):\n                for score4 in range(score3-1, 0, -1):\n                    score5 = max_total_score - (score1 + score2 + score3 + score4)\n                    # Ensure score5 is a different whole number, within bounds, and lower than score4\n                    if 0 < score5 < score4:\n                        scores.append((score1, score2, score3, score4, score5))\n    lowest_scores = [min(group) for group in scores]\n    ans = min(lowest_scores)\n    return ans\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the lengths of ropes\n    A, B, C = symbols('A B C')\n\n    # Equation 1: Ribbon A is 3 times as long as Rope B\n    equation1 = Eq(A, 3 * B)\n    \n    # Equation 2: Rope C is 56 cm longer than Rope B\n    equation2 = Eq(C, B + 56)\n\n    # Convert 1 m 30 cm into cm (1 m = 100 cm)\n    additional_length = 100 + 30\n    \n    # Equation 3: Rope A is 1 m 30 cm longer than Rope C\n    equation3 = Eq(A, C + additional_length)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the total length of the three ropes\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\nfrom itertools import combinations\n\ndef solution():\n    letters = 'ABCDE'\n    total_ways = factorial(len(letters)) / (factorial(3) * factorial(len(letters) - 3)) # nCr formula for combinations\n\n    combinations_with_A_and_B = list(combinations('CDE', 1)) # only need to choose 1 more letter as A and B are fixed\n    ways_with_A_and_B = len(combinations_with_A_and_B) * factorial(3) / factorial(3 - 2) # Need to account for arrangements of A and B\n    \n    probability = ways_with_A_and_B / total_ways\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    male_members = 50\n    female_members = 70\n    male_students_percentage = 16 / 100\n    female_students_percentage = 10 / 100\n\n    total_members = male_members + female_members\n    male_students = male_members * male_students_percentage\n    female_students = female_members * female_students_percentage\n\n    total_students = male_students + female_students\n    percentage_students = (total_students / total_members) * 100\n\n    return percentage_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_juice_first = 200 * 0.35\n    total_juice_second = 300 * 0.50\n    total_juice = total_juice_first + total_juice_second\n    \n    total_litres = 200 + 300\n    percentage_concentration = (total_juice / total_litres) * 100\n    \n    return percentage_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    # Calculate number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Use the arithmetic sum formula: n/2 * (first_term + last_term)\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    # Initial number of apples\n    amy_apples = 37\n    john_apples = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy has (amy_apples - x) apples\n    # John has (john_apples + x) apples\n    # Amy wants to have 4 more apples than John: (amy_apples - x) = (john_apples + x) + 4\n    # Solve for x: 2 * x = amy_apples - john_apples - 4\n    x = (amy_apples - john_apples - 4) // 2\n\n    # Return the number of apples Amy has to give to John\n    return x\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of papers be x\n    # Let the initial rate of marking papers per hour be r\n    x, r = symbols('x r')\n    \n    # The teacher plans to finish the work in 5 hours.\n    # So, she marks x/5 papers per hour.\n    \n    # After working for one hour, the remaining papers are x - r.\n    # The remaining time is 4 hours.\n    # She needs to mark 6 more papers per hour. So, the new rate is r + 6.\n    # (x - r) / 4 = r + 6\n    \n    # If she can mark 10 more papers per hour, she can finish in 4 hours instead of 5.\n    # Now the rate becomes r + 10, and the total time taken is (5 - 1) hours = 4 hours.\n    # x / 4 = r + 10\n    \n    # We have the two equations:\n    # 1. (x - r) = 4 * (r + 6)\n    # 2. x = 4 * (r + 10)\n    \n    equation1 = Eq(x - r, 4 * (r + 6))\n    equation2 = Eq(x, 4 * (r + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, r))\n    \n    # Return the value of x, the total number of papers\n    return solutions[x]\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_initial = 32\n    markers_given_away = 7\n    markers_left = markers_initial - markers_given_away\n    bags_packed = markers_left // 5\n    return bags_packed\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    # Number of chicken, vegetable, and fruit pies\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken = chicken_pies - vegetable_pies\n    fraction_more_chicken = Fraction(more_chicken, chicken_pies)\n\n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable = fruit_pies - vegetable_pies\n    fraction_less_vegetable = Fraction(less_vegetable, fruit_pies)\n\n    return fraction_more_chicken, fraction_less_vegetable\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    sales_tax_rate = 0.10\n\n    tip = bill * tip_rate\n    sales_tax = bill * sales_tax_rate\n    total_cost = bill + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n\n    ans = greatest_1_digit_even + smallest_2_digit_odd\n    return ans\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = 0\n    for i in range(1, 208):\n        total_sum += sum_of_digits(i)\n\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3/4\n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(int(digit) for digit in str(i)) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # first digit cannot be 0 in a three-digit number\n        for j in range(10):  # second digit can be 0-9\n            for k in range(10):  # third digit can be 0-9\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # For each pattern, there are 10 groups of 4 consecutive cards: (1, 2, 3, 4), (2, 3, 4, 5), ..., (10, 11, 12, 13)\n    # If we draw 3 cards from each group, we may not complete any consecutive set\n    # Therefore, we need to draw at least one more than 3 cards per group to ensure we complete at least one set of 4 consecutive cards\n    # Since there are 10 groups per pattern and 4 patterns, we draw one additional card from any group \n    cards_needed = 3 * 10 * 4 + 1\n\n    return cards_needed\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Digits to be permuted\n    digits = '0245689'\n\n    for perm in permutations(digits):\n        B, D, E, F, H, I, J = perm\n        if (int(B) % 2 == 0 and\n            int('3' + B + '1') % 3 == 0 and\n            int('3' + B + '1' + D) % 4 == 0 and\n            (int(E) % 5 == 0) and\n            int('3' + B + '1' + D + E) % 6 == 0 and\n            int('3' + B + '1' + D + E + F) % 7 == 0 and\n            int('3' + B + '1' + D + E + F + '7') % 8 == 0 and\n            int('3' + B + '1' + D + E + F + '7' + H) % 9 == 0 and\n            I == '5' and  # Divisible by 10\n            J == '0'):   # Divisible by 10 (last digit has to be 0)\n            return {'A': '3', 'B': B, 'C': '1', 'D': D, 'E': E, 'F': F, 'G': '7', 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from math import sqrt\n\n    # Assuming acceleration due to gravity (g) is 9.81 m/s^2\n    g = 9.81\n    \n    # Initial position (s1) is 3000 meters, final position (s2) is 2000 meters\n    s1 = 3000\n    s2 = 2000\n\n    # Initial velocity (u) is 0 m/s since skydiver starts from rest\n    u = 0\n\n    # Displacement (∆s) is s2 - s1\n    delta_s = s2 - s1\n\n    # Using kinematic equation  v^2 = u^2 + 2*g*∆s to find final velocity (v)\n    # ∆s is negative because the skydiver is falling towards the ground\n    v = sqrt(u**2 + 2 * g * -delta_s)\n\n    return v\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    \n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    actual_page = 1\n    printed_page = 1\n\n    while printed_page < 89:\n        actual_page += 1\n        if actual_page % 3 != 0:\n            printed_page += 1\n\n    return actual_page\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        if 5 * adults + 3 * children == 75:\n            return adults\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'w' be the price of each wristband.\n    # Each cap costs '3w'.\n    # Caleb spends 2/5 of his total money on 4 caps and 6 wristbands.\n    # Total money spent on caps and wristbands is 4*(3w) + 6*w = 18w.\n    # Let 'm' be the total amount of money Caleb started with.\n    # So, Caleb spends 2/5 * m = 18w\n\n    # After spending 2/5 of his money on 4 caps and 6 wristbands,\n    # he has 3/5 of his total money left.\n\n    # He then spends 1/3 of the remaining money on more caps.\n    # The remaining money after the first purchase is 3/5 * m.\n    # Therefore, money spent on additional caps is 1/3 * (3/5) * m = (1/5) * m.\n\n    # This money is used to buy only caps, so total money used on caps is equal to\n    # Total money spent on the first 4 caps + money spent on additional caps\n    # which is 2/5 * m (spent on the first set including wristbands) + 1/5 * m (additional caps)\n\n    # Thus, if the total money spent on caps is 3/5 * m, and each cap costs (3w),\n    # we can find out how many caps are bought with 3/5 * m by dividing the total\n    # money by the cost of each cap.\n\n    # Total caps = (3/5 * m) / (3w) = m / w\n\n    # However, we know that (2/5) * m = 18w from our first equation.\n    # So, m = 18w * (5/2)\n\n    # Let's set up the equation and solve for 'w'.\n    m, w = symbols('m w')\n    equation = Eq((2/5)*m, 18*w)\n    solutions = solve(equation, (m, w))\n    \n    # Calculate the total number of caps\n    total_caps_money = (3/5) * solutions[m][0]\n    cost_per_cap = 3 * solutions[w][0]\n    \n    # Number of caps bought altogether\n    total_caps = total_caps_money / cost_per_cap\n    \n    return int(total_caps)\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Number of multiples of 3\n    multiples_of_3 = 600 // 3\n    \n    # Number of multiples of 5\n    multiples_of_5 = 600 // 5\n    \n    # Number of multiples of both 3 and 5 (i.e., 15)\n    multiples_of_15 = 600 // 15\n    \n    # Using the inclusion-exclusion principle to find the result\n    ans = multiples_of_3 + multiples_of_5 - multiples_of_15\n    \n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n    age_difference = grandma_future_age - tom_future_age\n    grandma_current_age = tom_current_age + age_difference\n    return grandma_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, A_students, B_students = symbols('candies A_students B_students')\n\n    # Equation for class A: candies = 4 * A_students + 20\n    equation1 = Eq(candies, 4 * A_students + 20)\n\n    # Equation for class B: candies = 6 * B_students - 16\n    equation2 = Eq(candies, 6 * B_students - 16)\n\n    # Equation for the number of students: A_students = 2 * B_students\n    equation3 = Eq(A_students, 2 * B_students)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (candies, A_students, B_students))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    for ten_pence in range(6):\n        for twenty_pence in range(4):\n            for fifty_pence in range(2):\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Start taking one sticker of each color\n    # After taking one red and one green, you still do not have two of the same color\n    # But when you take the third sticker, you will necessarily have two of the same color, since\n    # it must be either red or green, both of which you already have one each\n    return 3\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # There are 5 blue, 4 orange and 2 yellow balls.\n    # In the worst case scenario, Sheila picks balls as follows:\n    # - She picks all the yellow balls (2 balls).\n    # - She then picks 3 orange balls, which is one less than needed to get four of the same color (2 + 3 balls).\n    # - Next, she picks 3 blue balls, which is one less than needed to get four of the same color (2 + 3 + 3 balls).\n    # Now, no matter the color of the next ball she picks, She will have 4 of that color.\n    # Therefore, she needs to take out 2 (yellow) + 3 (orange) + 3 (blue) + 1 (next ball of any color) balls.\n    ans = 2 + 3 + 3 + 1\n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duckling_legs = 4 * 2  # Each duckling has 2 legs and there are 4 ducklings\n    geese_legs = 2 * 2     # Each baby goose has 2 legs and there are 2 geese\n    total_legs = 36        # Total legs of all animals\n    remaining_legs = total_legs - (duckling_legs + geese_legs)  # Legs for lambs\n    lamb_legs = 4          # Each lamb has 4 legs\n    number_of_lambs = remaining_legs // lamb_legs\n    \n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_num = int(''.join(map(str, sorted(digits))))\n\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # The top layer has 1 box\n    top_layer = 1\n    # The second layer has a square of boxes, 2x2\n    second_layer = 2**2\n    # The third layer has a square of boxes, 3x3\n    third_layer = 3**2\n\n    # Total number of fruit boxes is the sum of the boxes in the three layers\n    total_boxes = top_layer + second_layer + third_layer\n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # since there were three times as many boys as girls: boys = 3 * girls\n    equation1 = Eq(boys, 3 * girls)\n\n    # each boy received $2 sweets and each girl received $4 sweets,\n    # and the total number of sweets is 570\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65  # convert pence to pounds and add up costs\n    change = 5 - total_cost  # subtract total cost from the £5 note\n    return round(change, 2)  # round to 2 decimal places to represent pence accurately\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_numbers = 1.2 + 1.23 + 1\n    product1 = sum_numbers * sum_numbers\n    product2 = sum_numbers * (1.2 + 1.23)\n    ans = product1 - product2\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time the son takes to harvest the crops by himself\n    son_time = symbols('x')\n\n    # Equation: 1/farmer_time + 1/son_time = 1/total_time\n    # Given that total_time_with_son_help = 16 hours,\n    # farmer_time = 24 hours, and son_works_alone_for 6 hours\n    \n    # The rate of work done by the farmer is 1/24 work/hour\n    # The rate of work when both are working is 1/16 work/hour\n    # The son works for 6 hours alone, contributing to 6/son_time work\n\n    # The equation based on work rates is:\n    equation = Eq((1/24) + 6/son_time, 1/16)\n\n    # Solving for son_time\n    son_hours = solve(equation, son_time)\n\n    return son_hours[0]\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies_required = 600\n\n    # Calculate the number of good copies for each photocopier\n    good_copies_A = (3/5) * total_good_copies_required\n    good_copies_B = (2/5) * total_good_copies_required\n\n    # Calculate total number of copies including bad ones for photocopier A\n    # For every 4 good copies, there's 1 bad copy, hence the ratio is 4:1\n    total_copies_A = good_copies_A * (5/4)\n\n    # Calculate total number of copies including bad ones for photocopier B\n    # For every 5 good copies, there's 1 bad copy, hence the ratio is 5:1\n    total_copies_B = good_copies_B * (6/5)\n\n    # Sum both totals to get the overall total copies including bad ones\n    total_copies_needed = total_copies_A + total_copies_B\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles = smiles_per_day * days_in_january\n    \n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + bounce_height + bounce_height\n\n    return total_distance\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    rolls = 30\n    probability_of_five = 1 / 6\n\n    expected_number_of_fives = rolls * probability_of_five\n\n    return expected_number_of_fives\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # total amount of solution\n    total_solution = 300 + 400 + 300\n    \n    # total amount of sugar in each solution\n    sugar_annie = 300 * 0.15\n    sugar_becky = 400 * 0.25\n    sugar_carol = 300 * 0.35\n    \n    # total amount of sugar mixed\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n    \n    # concentration of sugar in mixed solution\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy = 96\n    timmy = symbols('timmy')\n    kevin = symbols('kevin')\n\n    # Dorothy has 3 less than 9 times as many stickers as Timmy.\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    \n    # Kevin has 45 more stickers than Timmy.\n    equation2 = Eq(kevin, timmy + 45)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Find the total number of matches played\n    # Given the team lost 10 matches, which is 1 - (2/5 + 7/20) of the matches,\n    # So the total matches is 10 divided by (1 - (2/5 + 7/20))\n    total_matches = 10 / (1 - (2/5 + 7/20))\n    \n    # Calculate the number of won and drawn matches\n    won_matches = (2/5) * total_matches\n    drawn_matches = (7/20) * total_matches\n    \n    # Calculate the points\n    # 3 points for a win, 1 point for a draw\n    points = (won_matches * 3) + (drawn_matches * 1)\n    \n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's initial approach:\n    # quotient * divisor + remainder = dividend\n    # 9 * 2 = 18 (Here's the mistake, he should multiply with the divisor, not the remainder)\n    # 18 + 4 = 22 (This addition is incorrect based on the wrong multiplication)\n    \n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Correct approach:\n    # dividend = quotient * divisor + remainder\n    dividend = quotient * divisor + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5 # Total number of children\n    # Case 1: Hugh stands at one of the ends, Louise and Richard can't stand next to each other at the other end\n    # There are 2 possibilities for Hugh's position\n    # There will be 2 possibilities for choosing the end position for Louise or Richard\n    # There are 2 possibilities for arranging Louise and Richard in these positions\n    # There are factorial(3) ways to arrange the remaining children\n    case_1 = 2 * 2 * 2 * factorial(3)\n    \n    # Case 2: Hugh does not stand at one of the ends\n    # In this case, Louise and Richard will stand on either side of Hugh\n    # There are 3 positions for Hugh (2nd, 3rd, or 4th position)\n    # There are 2 ways to arrange Louise and Richard around Hugh\n    # There are factorial(3) ways to arrange the remaining children\n    case_2 = 3 * 2 * factorial(3)\n\n    # Total cases is the sum of the two cases\n    ans = case_1 + case_2\n    return ans\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (40 - 2*i) for i in range(20))\n    return ans\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)  # Total cost in pence\n    note_value = 1000  # £10 note in pence\n    change = note_value - total_cost  # Change in pence\n\n    return change / 100  # Change in pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m1 be the mean of the first 3 numbers,\n    # m2 be the mean of the last 5 numbers,\n    # and m be the mean of all 8 numbers.\n    m1, m2 = symbols('m1 m2')\n\n    # Given m (mean of all 8 numbers) is 555\n    m = 555\n\n    # Equation for the mean of all 8 numbers: (3m1 + 5m2) / 8 = m\n    equation1 = Eq((3 * m1 + 5 * m2) / 8, m)\n\n    # Given that the mean of the first 3 numbers is 296 less than the mean of the last 5 numbers\n    equation2 = Eq(m1, m2 - 296)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2), (m1, m2))\n\n    return solutions[m2]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    last_number = 100\n    step = 2\n    # Multiples of two from 2 to 100 are all even numbers\n    # Therefore, the count of multiples is essentially half the count of numbers from 1 to 100 inclusive\n    ans = last_number // step\n    return ans\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    # Since the rate of work is the same, we can use inverse proportions\n    required_people = initial_people * (initial_days / target_days)\n    \n    # Calculating how many more people are needed\n    additional_people = required_people - initial_people\n    \n    return int(additional_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    total_baskets = 7\n    ans = footballs_per_basket * total_baskets\n    return ans\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position_from_front = 3\n    children_between_pip_and_bud = 5\n    bud_position_from_front = pip_position_from_front + children_between_pip_and_bud + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq((1 - 3/5) * rasidah, (1 - 6/7) * chai_seng * 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of years ago we're looking for\n    years_ago = symbols('years_ago')\n    \n    # Isaac's age years ago\n    isaac_age_then = 53 - years_ago\n    \n    # Isaac's mother's age years ago\n    mother_age_then = 81 - years_ago\n    \n    # Equation where Isaac's age is one third his mother's age\n    equation = Eq(isaac_age_then, mother_age_then / 3)\n    \n    # Solve the equation\n    solution = solve(equation, years_ago)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Grandma's age mod 4 gives remainder 2, modulo 5 gives 3, modulo 9 gives 6\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_lb = 1 / 2.2\n    \n    kg = pounds * kg_per_lb\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(left, right):\n        return sum(range(left, right)) - right\n    \n    result = custom_op(5, 10) - custom_op(4, 9)\n    return result\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    return 35 + 18 + 26 + 22 - 16 + 25\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8  # Elena's speed in m/s\n    cat_speed = 3    # Cat's speed in m/s\n    distance_behind = 500  # Distance behind in meters\n\n    relative_speed = elena_speed - cat_speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    total_three_digit_numbers = len(list(permutations(digits, 3)))\n    \n    return total_three_digit_numbers\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(2, 21):\n        if isprime(num) and isprime(num + 6):\n            count += 1\n        elif isprime(num) and isprime(num - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i + 1] - differences[i] for i in range(len(differences) - 1)]\n\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    digits = '12345'\n    even_digits = '024'\n    count = 0\n\n    for p in permutations(digits):\n        if p[-1] in even_digits:  # check if the last digit is even\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):  # The tens digit cannot be 0 in a 2-digit number\n        ones_digit = 15 - tens_digit\n        if 0 <= ones_digit <= 9:     # The ones digit must be between 0 and 9\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean_weight = 50\n    final_mean_weight = 52\n    initial_total_apples = 8\n    final_total_apples = initial_total_apples + 1\n\n    initial_total_weight = initial_mean_weight * initial_total_apples\n    final_total_weight = final_mean_weight * final_total_apples\n\n    extra_apple_weight = final_total_weight - initial_total_weight\n\n    return extra_apple_weight\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    return -4**2\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    numbers = [99, 98, 97, 96]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pages = symbols('pages')\n    \n    # The original time taken\n    original_time = pages / 50\n    \n    # The time taken when the speed is increased by 20 pages per minute\n    new_time = pages / 70\n    \n    # The difference between the two times is 2 minutes\n    equation = Eq(original_time - new_time, 2)\n    \n    # Solve for the number of pages\n    solution = solve(equation, pages)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Count the number of lights that remain on after the 250th person leaves\n    # A light is toggled every time a person enters the room whose number is a divisor\n    # of the light's number. Therefore, a light is on if it has an odd number of divisors.\n    # Only perfect squares have an odd number of divisors because in pairs of divisors\n    # for non-square numbers, there's always a divisor and a corresponding larger divisor,\n    # but perfect squares have a middle divisor that is repeated (such as 4=2x2).\n    \n    count = 0\n    \n    for i in range(1, 251):\n        if i*i <= 250:  # Check if i is a square root of a number below or equal to 250\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = ((last_term - first_term) // 2) + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    initial_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    \n    while True:\n        initial_date += one_year\n        if initial_date.year % 4 == 0 and (initial_date.year % 100 != 0 or initial_date.year % 400 == 0):\n            # Leap year adjustment\n            initial_date += one_day\n        if initial_date.weekday() == 0:  # 0 means Monday\n            break\n\n    return initial_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges - apples, 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Arbitrary upper limit to search for the divisor\n        dividend = divisor * 8 + 7\n        if dividend % divisor == 7:\n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    jog_time = 1  # from 6:30 AM to 7:30 AM\n    walk_time = 2  # from 7:30 AM to 9:30 AM\n    jog_speed = 6  # miles per hour\n    walk_speed = 5  # miles per hour\n\n    jog_distance = jog_time * jog_speed\n    walk_distance = walk_time * walk_speed\n\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_saved = daily_saving * days_saved\n    total_amount = original_amount + amount_saved - lent_to_brother - spent_on_snacks\n\n    return total_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = total_expressway / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount = 0.10  # 10% discount\n    number_of_members = 30\n\n    discounted_cost = original_cost * (1 - discount)\n    cost_per_member = discounted_cost / number_of_members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    two_power_last_digit = (2 ** (2017 % 4)) % 10\n    three_power_last_digit = (3 ** (2017 % 4)) % 10\n\n    last_digit = (two_power_last_digit * three_power_last_digit) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Analyze the given pattern:\n    # 4◈7 = 21 implies that (4 * 7) - 7 = 21\n    # 6◈22 = 20 implies that (6 * 22) - 22 = 20\n    # 8◈30 = 26 implies that (8 * 30) - 30 = 26\n    # So the operation ◈ seems to be defined as a*b - b = a*(b-1)\n    # Now we use this pattern to calculate 9◈20\n    \n    a = 9\n    b = 20\n    ans = a * (b - 1)\n    return ans\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_cost = 0.80  # cost for calls up to 15 minutes\n    additional_cost_per_minute = 0.05  # cost for each additional minute\n    total_cost = 1.4  # Ryan's total cost\n    \n    if total_cost <= base_cost:\n        # If the total cost is less than or equal to the base cost,\n        # then the call lasted 15 minutes or less\n        minutes = 15\n    else:\n        # If the total cost is more than the base cost, calculate the additional cost\n        additional_cost = total_cost - base_cost\n        # Calculate the number of additional minutes\n        additional_minutes = additional_cost / additional_cost_per_minute\n        # Total minutes is the sum of the first 15 minutes plus additional minutes\n        minutes = 15 + additional_minutes\n        \n    return int(minutes)\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 4) / 2) + 11, 37)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n    \n    last_multiple = (120 // 5) * 5\n    if last_multiple > 120:\n        last_multiple -= 5\n    \n    num_multiples = ((last_multiple - first_multiple) // 5) + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when James was 20 years old on 10th May 1997\n    gina_age_when_james_20 = 50 - (2005 - 1997)\n    \n    # James's age when Gina was 35 years old\n    james_age_when_gina_35 = 20 - (gina_age_when_james_20 - 35)\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_dollar = 4\n    ans = total_amount * quarters_in_dollar\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position_from_back = 9\n    people_between = 2\n\n    total_people = (lucy_position + eddie_position_from_back + people_between) - 1\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f\"26{B}789\") % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                for d in primes:\n                    if len({a, b, c, d}) == 4:  # Check if remainders are different primes\n                        for i in range(1, 1000):  # Check numbers up to 1000\n                            if i % 3 == a and i % 5 == b and i % 7 == c and i % 8 == d:\n                                return i  # Return the first number that satisfies the conditions\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8    # convert meters to centimeters\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n    stripe_length_m = stripe_length_cm // 100  # convert centimeters to meters for the whole part\n    stripe_length_extra_cm = stripe_length_cm % 100  # the remainder in centimeters\n\n    return stripe_length_m, stripe_length_extra_cm\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x + 4) * 7) - 21, 35)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses', integer=True)\n\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    equation2 = Eq(orchids / tulips, 3 / 5)\n    equation3 = Eq(0.6 * orchids + 0.8 * tulips + 0.75 * roses, 2644)\n\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    total_cost = Eq(12*books + 9*files, 336)\n    book_file_difference = Eq(books, files + 14)\n\n    solutions = solve((total_cost, book_file_difference), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # To find the smallest number of right-handed girls, assume all boys are right-handed.\n    # The number of left-handed pupils is total_pupils - right_handed.\n    left_handed = total_pupils - right_handed\n    # The smallest number of right-handed girls would then be the total number of girls\n    # minus the number of left-handed pupils, assuming that all left-handed pupils are girls.\n    right_handed_girls = girls - left_handed\n    # However, since we cannot have a negative number of right-handed girls, we set the\n    # minimum to 0 if the calculated number is negative.\n    right_handed_girls = max(right_handed_girls, 0)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    # Let's denote the number of chickens as c and the number of rabbits as r.\n    for c in range(11):  # c can be from 0 to 10 as there can't be more than 10 chickens.\n        r = 10 - c  # The rest are rabbits.\n        \n        # Check if the total number of legs matches.\n        if (c * 2 + r * 4) == 34:\n            return c  # If the number of legs matches, return the number of chickens.\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    powers_last_digit = [(i ** 2013) % 10 for i in range(1, 10)]\n    total_last_digit = sum(powers_last_digit) % 10\n    return total_last_digit\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario: Peter takes one of each color first\n    worst_case = 3\n    \n    # Guaranteed next sock will be of the same color as one he already has\n    guaranteed_pair = 1\n    \n    # Total socks Peter must take out\n    socks_needed = worst_case + guaranteed_pair\n    \n    return socks_needed\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    departure_hour_japan = 20  # 8pm in 24-hour format\n    arrival_hour_france = 1   # 1am in 24-hour format\n    japan_to_france_time_difference = -7  # Japan is 7 hours ahead, so from Japan's perspective the time difference is negative\n\n    # Adjust France arrival time to Japan's timezone\n    arrival_hour_japan_time = (arrival_hour_france + 24 + japan_to_france_time_difference) % 24\n\n    # Calculate the duration of the flight\n    if arrival_hour_japan_time < departure_hour_japan:\n        # The flight crossed over to the next day\n        duration = (24 - departure_hour_japan) + arrival_hour_japan_time\n    else:\n        duration = arrival_hour_japan_time - departure_hour_japan\n\n    return duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    square, triangle, diamond = symbols('square triangle diamond')\n    \n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n    \n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n    \n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    # Initialize the count of digits to 0\n    count = 0\n    \n    # Loop through numbers from 1 to 131\n    for i in range(1, 132):\n        count += len(str(i))\n    \n    return count\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    correct_answer_score = 4\n    incorrect_answer_score = -1\n    unattempted_questions = 3\n    total_score = 168\n    \n    # Let x be the number of questions Amna answered correctly\n    # Let y be the number of questions Amna answered incorrectly\n    # x + y + unattempted_questions = total_questions\n    # We know that she didn't attempt 3 questions, so:\n    # x + y = total_questions - unattempted_questions\n    # Also, 4x - y = total_score\n    \n    # solving the system of equations:\n    x = (total_score + total_questions - unattempted_questions) / (correct_answer_score + 1)\n    \n    return int(x)\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    necklace, earring = symbols('necklace earring')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # a + (a+2) + (a+4) + (a+6) + (a+8) = 200\n    # 5a + 20 = 200\n    # 5a = 180\n    # a = 36\n    # Smallest number is a, which is 36\n    return 36\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of sugar solution transferred from A to B\n    x = symbols('x')\n\n    # Initial amount of sugar in A and B\n    sugar_A = 50 * 0.10\n    sugar_B = 30 * 0.20\n\n    # Final amount of sugar in A and B after transferring x grams\n    final_sugar_A = sugar_A - 0.10 * x\n    final_sugar_B = sugar_B + 0.10 * x # The concentration difference is 0.10x because it comes from 10% A and goes to 20% B\n\n    # The final volume of water in A and B after transferring x grams\n    final_volume_A = 50 - x\n    final_volume_B = 30 + x\n\n    # Setting up the equation final_sugar_A / final_volume_A = final_sugar_B / final_volume_B\n    # To solve for x\n    equation = Eq(final_sugar_A / final_volume_A, final_sugar_B / final_volume_B)\n\n    # Solving the equation\n    solution = solve(equation, x)\n    \n    # As we need a positive solution that is viable in this context\n    volume_transferred = max(solution)\n    \n    return volume_transferred\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are 3 possible digits: 0, 1, 2\n    # For the first digit, we can't use 0 as it's a 2-digit number\n    # So, there are 2 choices for the first digit: 1, 2\n    first_digit_options = 2\n    \n    # For the second digit, we can use 0, 1, or 2\n    # So, there are 3 choices: 0, 1, 2\n    second_digit_options = 3\n    \n    # Total number of 2-digit numbers using 0, 1, 2\n    # Apply the multiplication principle\n    total_numbers = first_digit_options * second_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    ans = sum(100 / 97 * (99 / 96) ** i for i in range(0, 96))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie cuts a piece of wood into 5 sections in 8 minutes\n    # To cut it into 5 sections, she makes 4 cuts (1 less than the number of sections)\n    cuts_for_5_sections = 4\n    time_for_5_sections = 8\n    \n    # Each cut therefore takes 8 / 4 minutes\n    time_per_cut = time_for_5_sections / cuts_for_5_sections\n    \n    # To cut the wood 6 times, she'll make 6 cuts\n    cuts_needed = 6\n    \n    # The total time for 6 cuts is:\n    total_time_for_6_cuts = cuts_needed * time_per_cut\n    return total_time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # Peter needs more than half of the total votes to win.\n    required_votes = total_votes // 2 + 1\n    additional_votes_needed = required_votes - peter_votes\n    \n    if additional_votes_needed <= remaining_votes:\n        return additional_votes_needed\n    else:\n        return -1  # Not possible if there are not enough remaining votes\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # Given numbers to compare\n    num1 = 31\n    num2 = 32\n    \n    # Compare and find the number with the highest unit value\n    if num1 % 10 > num2 % 10:\n        ans = num1\n    else:\n        ans = num2\n        \n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount_pence = 490  # Convert pounds to pence\n\n    # 5p = x, 10p = x, 20p = x\n    # 5x + 10x + 20x = total_amount_pence\n    # 35x = total_amount_pence\n    # x = total_amount_pence / 35\n    x = total_amount_pence // 35\n\n    # Total number of coins = 5p coins + 10p coins + 20p coins\n    # Which is 3 times the number of one kind of coin as they are equal\n    total_coins = 3 * x\n\n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    n = 9  # total number of terms\n    total_sweets = 135  # sum of the arithmetic sequence\n    difference = 3  # common difference between terms\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a1 + (n - 1)d)\n    # where:\n    # S_n is the sum of the first n terms,\n    # n is the number of terms,\n    # a1 is the first term,\n    # d is the common difference between terms.\n\n    # Rearrange the above formula to solve for a1 (the first term)\n    a1 = (total_sweets * 2 - n * (n - 1) * difference) / (2 * n)\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a1 + (n - 1)d\n    # we can find the last (9th) term which represents the sweets eaten on the last day.\n    last_day_sweets = a1 + (n - 1) * difference\n\n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    money_after_book = initial_money - (10 / 100 * initial_money)\n    money_after_dvd = money_after_book - (20 / 100 * money_after_book)\n    return money_after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # amount Annie had initially in dollars\n    cost_of_gift = 20  # cost of the gift in dollars\n    remaining_amount = initial_amount - cost_of_gift  # remaining amount in dollars\n    remaining_amount_cents = remaining_amount * 100  # remaining amount in cents\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    # Initial deposit amount\n    P = 1000\n    # Annual interest rate\n    r = 6 / 100\n    # Number of years\n    t = 5\n    # Compound interest formula: A = P * (1 + r) ^ t\n    A = P * (1 + r) ** t\n    return A\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    digits = 0\n    for page_number in range(1, 186):\n        digits += len(str(page_number))\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary_before_raise = 24000\n    pay_rise_percentage = 0.10\n\n    annual_salary_after_raise = annual_salary_before_raise * (1 + pay_rise_percentage)\n    monthly_salary_after_raise = annual_salary_after_raise / 12\n\n    return monthly_salary_after_raise\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solution = solve(equation, x)[0]\n\n    return solution\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    return (4.08 * 20 - 1.08 * 20) / 20\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(119, 98, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    day, month = symbols('day month')\n    equation = Eq(month * 31 + day * 12, 376)\n\n    # We know that the month cannot be greater than 12 and the day cannot be greater than 31\n    possible_solutions = [(d, m) for d, m in solve(equation, (day, month)) if 1 <= m <= 12 and 1 <= d <= 31]\n\n    # Format the result as \"ddmm\"\n    ans = \"\".join([f\"{d:02d}{m:02d}\" for d, m in possible_solutions])\n\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    def count_divisible_by(n, limit):\n        return (limit - 1) // n\n\n    total_numbers = 2022\n    divisible_by_7 = count_divisible_by(7, 2023)\n    divisible_by_17 = count_divisible_by(17, 2023)\n    divisible_by_both = count_divisible_by(7 * 17, 2023)\n\n    # Now, using the principle of inclusion-exclusion, calculate the answer\n    ans = total_numbers - (divisible_by_7 + divisible_by_17 - divisible_by_both)\n    return ans\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    \n    total_cost = cost_per_cooker * number_of_cookers\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n    tom_flour = 25\n\n    tom_milk = (milk_ratio / flour_ratio) * tom_flour\n\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    initial_sweets = sweets_left + sweets_taken\n    return initial_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_age_now = 18\n\n    # When the younger elephant is the current age of the older elephant,\n    # the older elephant will be 62 years old.\n    # Let's denote the current age of the older elephant as 'older_age_now'.\n    # The difference in age between them will always be the same.\n    # So, when the younger elephant reaches the current age of the older elephant,\n    # the older elephant will be 'older_age_now + (older_age_now - younger_age_now)'.\n\n    # We will set up an equation:\n    # older_age_now + (older_age_now - younger_age_now) = 62\n\n    # Solving the equation for 'older_age_now'\n    from sympy import symbols, Eq, solve\n\n    older_age_now = symbols('older_age_now')\n    equation = Eq(older_age_now + (older_age_now - younger_age_now), 62)\n    solutions = solve(equation, older_age_now)\n\n    # Assuming there is only one solution\n    return solutions[0]\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6  # in pounds\n    protractor_price = 30 / 100  # converting pence to pounds\n    \n    # Sale prices\n    sale_calculator_price = calculator_price * (3/4)  # a quarter off\n    sale_protractor_price = protractor_price / 2  # half price\n    \n    # David's purchase\n    calculators_bought = 8\n    protractors_bought = 20\n    \n    # Total cost\n    total_cost = (sale_calculator_price * calculators_bought +\n                  sale_protractor_price * protractors_bought)\n    \n    return total_cost\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let the total amount of grass be x\n    # 27 oxen eat x grass in 6 weeks, so one ox eats x/(27*6) grass per week\n    # Similarly, one ox eats x/(23*9) grass per week\n    # These rates should be the same since the grass grows at a constant rate\n    # Therefore, (x/(27*6)) = (x/(23*9))\n    # Now, we need to find out how many weeks (w) will it take for 21 oxen to finish the grass x\n    # 21 oxen eat 21 * (x/(27*6)) grass per week\n    \n    # Find x/(27*6)\n    rate_per_ox = 1 / (27*6)\n    # Using this rate, calculate the number of weeks for 21 oxen\n    weeks_for_21_oxen = 27*6 / 21\n\n    return weeks_for_21_oxen\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    fraction = numerator / denominator\n    return fraction\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_of_tonnes = (2/3) * tonnes\n    kilograms = two_thirds_of_tonnes * 1000  # 1 tonne = 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Calculate the distance Ellen rides on her bike\n    bike_speed = 10  # 10 miles per hour\n    bike_time = 1  # 1 hour of riding\n    bike_distance = bike_speed * bike_time\n\n    # Calculate the distance Ellen travels on the train\n    train_speed = 50  # 50 miles per hour\n    train_time = 2  # 2 hours of train travel\n    train_distance = train_speed * train_time\n\n    # Total distance traveled\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # Number of solutions of x1 + x2 + x3 = n for non-negative integers\n    # is equivalent to finding the coefficient of x^n in (1 + x + x^2 + ...)^k\n    # where k is the number of variables (boxes) and n is the number of balls\n    # Using the formula for coefficient of x^n in (1 + x + x^2 + ...)^k\n    # i.e., selecting n balls to go into k boxes with unlimited capacity and allowing for empty boxes\n    n = 5\n    k = 3\n    ans = (1/(k-1) + n) * (n+k-1) // (n*(k-2)+n) * (n+1) // 2\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    total = blue + red + green\n\n    equations = Eq(total, 112)\n    blue_marbles = solve(equations, blue)\n\n    return blue_marbles[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    unique_letters = set(word)\n    letter_counts = {letter: word.count(letter) for letter in unique_letters}\n    \n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n\n    return ans\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd from front and 2nd from back in a row, which means there are 3 - 1 people in front and 2 - 1 people in back of him\n    rows = (3 - 1) + (2 - 1) + 1  # +1 for Lucas himself\n    \n    # Lucas is 4th from left and 3rd from right in a column, which means there are 4 - 1 people to the left and 3 - 1 people to the right of him\n    cols = (4 - 1) + (3 - 1) + 1  # +1 for Lucas himself\n    \n    # Multiply rows and columns to get the total number of students\n    total_students = rows * cols\n    \n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ema, keng_wee = symbols('ema keng_wee')\n\n    equation1 = Eq(ema, keng_wee - 360)\n    equation2 = Eq(ema - ema / 4, keng_wee - (4 / 7) * keng_wee)\n\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    number = 217\n    while sum([int(digit) for digit in str(number)]) != 9:\n        number += 1\n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ans = one_fourth_of_36 * 10\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Positions from opposite sides will add up to one more than the numbers of students \n    # along that side, due to inclusive counting from both ends.\n    front_back_sum = 3 + 2\n    left_right_sum = 4 + 3\n\n    # The total number of students is then found by subtracting 1 from each of these \n    # sums (since Lucas is counted twice when summing from opposite sides) and multiplying \n    # the adjusted counts for each dimension of the rectangle.\n    total_students = (front_back_sum - 1) * (left_right_sum - 1)\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original ratio\n    equation1 = Eq(girls, (9/11) * boys)\n\n    # After the transfer\n    equation2 = Eq(girls + 2, (10/11) * boys)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # The number of students now is the sum of boys and the new girls number\n    total_students = solutions[boys] + solutions[girls] + 2\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 11):\n        for j in range(1, i + 1):\n            total_sum += j / i\n        for j in range(i - 1, 0, -1):\n            total_sum += j / i\n    return total_sum\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n\n    # Solve for y in terms of x\n    y_expr = solve(equation, y)[0]\n\n    # Substitute y in the second term\n    ans = (2 * x - y_expr).simplify()\n\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    total_paid_pence = 5 * 100  # convert pounds to pence\n\n    change_pence = total_paid_pence - total_cost_pence\n\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    lim, tan = symbols('lim tan')\n    \n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n    \n    solutions = solve((equation1, equation2), (lim, tan))\n    \n    difference = solutions[lim] - solutions[tan]\n    \n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current_age = symbols('zehan_current_age')\n\n    equation = Eq(zehan_current_age + 12, 3 * zehan_current_age)\n\n    zehan_age_solution = solve(equation, zehan_current_age)\n\n    return zehan_age_solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Number of ways of choosing 1 from A, B, or C\n    ways_to_choose_one = comb(3, 1)\n    \n    # Number of ways of choosing the remaining 4 from the other 12 students (15 - 3)\n    ways_to_choose_remaining = comb(12, 4)\n    \n    # Multiply these two to get the total number of combinations\n    total_combinations = ways_to_choose_one * ways_to_choose_remaining\n    \n    return total_combinations\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    tickets = 7\n    \n    cost_per_ticket = total_cost / tickets\n    \n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    decimal_value = 0.36\n    percent_value = decimal_value * 100\n    return percent_value\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    lemon_juice_initial, water = symbols('lemon_juice_initial water')\n    \n    # Initial ratio equation: lemon_juice_initial / water = 2 / 3\n    equation1 = Eq(lemon_juice_initial / water, 2 / 3)\n    \n    # After adding 80ml of lemon juice the new ratio is (lemon_juice_initial + 80) / water = 6 / 5\n    equation2 = Eq((lemon_juice_initial + 80) / water, 6 / 5)\n    \n    # Use sympy's solve to find values of unknowns\n    solutions = solve((equation1, equation2), (lemon_juice_initial, water))\n    \n    # Return the initial lemon juice content\n    return solutions[lemon_juice_initial]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + 6\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    equation = Eq(savings - (1/3)*savings - 177 - 129, (1/3)*savings / 2)\n\n    result = solve(equation, savings)\n\n    return result[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages_teachers = (french_teachers + japanese_teachers) - total_teachers\n    only_french_teachers = french_teachers - both_languages_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    # Define the usual speed of the car in mph\n    usual_speed = 60\n    \n    # Increase the speed by 30%\n    increased_speed = usual_speed * 1.3\n    \n    # Calculate the time saved by increasing the speed\n    # In this case, time saved is the time departed late\n    time_saved_in_hours = 9 / 60 # converting minutes into hours\n    \n    # Calculate the distance using the new speed\n    # Time = Distance / Speed\n    # Therefore, Distance = Time * Speed\n    distance = time_saved_in_hours * increased_speed\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(((((x + 8) * 8) - 8) / 8), 80)\n    answer = solve(equation, x)\n\n    return answer[0]\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = (total_skipping + total_long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the distance, v be the original speed, and t be the original time\n    d, v, t = symbols('d v t')\n    \n    # If speed increases by 25%, time taken decreases by 20 minutes\n    # Hence, d / (1.25 * v) = t - 20\n    equation1 = Eq(d, 1.25 * v * (t - 20))\n    \n    # If speed decreases by 45 meters/min, time taken increases by 75%\n    # Hence, d / (v - 45) = 1.75 * t\n    equation2 = Eq(d, (v - 45) * (1.75 * t))\n    \n    # Both equations represent the same distance\n    # Hence, 1.25 * v * (t - 20) = (v - 45) * (1.75 * t)\n    equation3 = Eq(1.25 * v * (t - 20), (v - 45) * (1.75 * t))\n    \n    # Solving the system of equations for distance d\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n    \n    # We get multiple solutions, but we want the one where all values are positive\n    for solution in solutions:\n        if all(value > 0 for value in solution):\n            return solution[0]\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    for red_ropes in range(11):\n        blue_ropes = 10 - red_ropes\n        total_length = red_ropes * 2 + blue_ropes * 3\n        if total_length == 26:\n            return red_ropes\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_first_half = 6\n    months_second_half = 6\n    \n    total_second_half = average_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / (months_first_half + months_second_half)\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 1\n    while True:\n        if children % 7 == 0 and children % 9 == 2:\n            return children\n        children += 1\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    ways = (22 - 1) // 2\n    return ways\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "def solution():\n    from fractions import Fraction\n\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    used_flour = brownies + cookies + muffins\n\n    return used_flour\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    factors = [i for i in range(1, 42) if 41 % i == 0]\n    A = factors[-1] * (41 + factors[-1])\n\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    ans = 1\n    for i in range(2, 12):\n        ans *= (1 + 1 / i)\n    return ans\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given height to width ratio and height in cm\n    ratio_height = 3\n    ratio_width = 4\n    height_cm = 21\n\n    # Find the width based on the ratio\n    width_cm = (ratio_width * height_cm) / ratio_height\n\n    # Calculate the perimeter of the screen\n    perimeter_cm = 2 * (height_cm + width_cm)\n    \n    return perimeter_cm\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    sum_of_numbers = 98\n    difference_of_numbers = 36\n    smaller_number = (sum_of_numbers - difference_of_numbers) / 2\n    return smaller_number\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, (3 / 5) * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    ans = number % 7\n    return ans\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    num_terms = ((last_term - first_term) // 2) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_answers = int(total_questions * 0.70)\n    wrong_answers = total_questions - correct_answers\n    score_correct = correct_answers * 3\n    score_wrong = wrong_answers * -1\n    total_score = score_correct + score_wrong\n\n    for correct in range(total_questions + 1):\n        if 3 * correct - (total_questions - correct) == 78:\n            return correct\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # 4 raised to any power will end with a last digit of 4 or 6.\n    # Since 100 is an even number, 4^100 will end in a 6.\n    last_digit_of_4 = 6\n\n    # 7 raised to the power of 1 has the last digit 7; \n    # raised to the power of 2 has the last digit 9; \n    # to the power of 3 has the last digit 3; \n    # and to the power of 4 has the last digit 1.\n    # This pattern repeats every 4, so 7^100 will end with the last digit as 1.\n    last_digit_of_7 = 1\n\n    # 9 raised to an odd power ends with the digit 9, \n    # and to an even power ends with the digit 1.\n    # Since 100 is even, 9^100 will end with a 1.\n    last_digit_of_9 = 1\n\n    # 11 raised to any power will have the unit digit as 1.\n    last_digit_of_11 = 1\n\n    # Multiplying all the last digits \n    last_digit = (last_digit_of_4 * last_digit_of_7 * last_digit_of_9 * last_digit_of_11) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, jessie = symbols('john jessie')\n    \n    # John had 5/13 of the money Jessie had\n    equation1 = Eq(john, 5 * jessie / 13)\n    \n    # Jessie transferred $600 to John\n    new_john = john + 600\n    new_jessie = jessie - 600\n    \n    # John's money became 50% of the Jessie's money after transfer\n    equation2 = Eq(new_john, new_jessie / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n    \n    total_money = solutions[john] + solutions[jessie]\n    \n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Initialize variables to count occurrences of 1 and 2\n    ones_count = 0\n    twos_count = 0\n    # Initialize N, considering that we should start checking from 1\n    N = 1\n    \n    # Loop until we find the number where 1 occurs 15 times and 2 occurs 14 times\n    while ones_count < 15 or twos_count < 14:\n        # Convert N to string to count digits\n        str_n = str(N)\n        # Count occurrences of 1 and 2 in the current number\n        ones_count += str_n.count('1')\n        twos_count += str_n.count('2')\n        # Move to next number\n        N += 1\n\n    # Loop overshoots by one iteration, decrement N to correct\n    return N - 1\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n\n    baking_duration = end_time - start_time\n\n    return baking_duration.seconds // 60  # convert seconds to minutes\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one file and y be the cost of one ruler\n    x, y = symbols('x y')\n    \n    # 6 files and 10 rulers cost $40\n    equation1 = Eq(6 * x + 10 * y, 40)\n    \n    # Solve for y in terms of x from equation1\n    solution_y = solve(equation1, y)[0]\n    \n    # Substitute y in the second equation for 9 files and 15 rulers\n    cost_9_files_15_rulers = 9 * x + 15 * solution_y\n    \n    # Simplify the expression by calculating the total cost\n    total_cost = cost_9_files_15_rulers.subs(y, solution_y)\n    \n    # The cost has a simple linear relationship, so we can scale directly from the first scenario\n    # If 6 files and 10 rulers cost $40, then 9 files and 15 rulers (which is 1.5 times the amount) cost 1.5 times $40\n    ans = 1.5 * 40\n    \n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_children = 7\n\n    harvir_age = youngest_age + (number_of_children - 1) * age_difference\n\n    return harvir_age\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')  # Total number of t-shirts and caps\n\n    # t_shirts to caps ratio\n    equation1 = Eq(t_shirts / caps, 8/5)\n\n    # Cost collected by selling 1/4 of t-shirts and 1/5 of caps\n    equation2 = Eq(t_shirts * (1/4) * 3 + caps * (1/5) * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t_shirts, caps))\n\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_bananas = 3 * 12  # 12p per banana\n    cost_apples = 5 * 11   # 11p per apple\n    total_cost_pence = cost_bananas + cost_apples\n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n\n    paid = 2  # £2 coin\n    change = paid - total_cost_pounds\n\n    return change\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    cost_calendar = 6.97\n    cost_ball = 2.99\n    total_spent = cost_calendar + cost_ball\n    return total_spent\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    n_people = factorial(4) # Number of permutations for 4 people\n    # Since they are sitting around a circular table, we need to divide by the number of people because circular permutations count as the same when rotated\n    ans = n_people // 4\n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left_kg = 360 / 1000  # Convert grams to kilograms\n    flour_used_total = (1 / 5) + (1 / 2)  # Sum kilograms of flour used for muffins and cookies\n    flour_initial = flour_left_kg + flour_used_total\n\n    return flour_initial\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    # Convert pounds to pence\n    total_cost = 500  # 5 pounds in pence\n\n    # Orange costs 26p and lemon costs 30p\n    equation = Eq(26 * oranges + 30 * lemons, total_cost)\n\n    # Since we can't have negative or fractional fruits, we iterate within reasonable bounds\n    possible_solutions = []\n    for o in range(total_cost // 26 + 1):\n        for l in range(total_cost // 30 + 1):\n            if solve(equation.subs(oranges, o).subs(lemons, l)):\n                possible_solutions.append((o, l))\n\n    # We only care about the total number of fruits\n    total_fruits = [sum(combo) for combo in possible_solutions]\n    \n    # Return the max number since the question asks for \"how many ... altogether\"\n    return max(total_fruits)\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = -(-cookies // box_capacity) # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    # Define the new operations as functions\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n    \n    # Perform the calculations step by step\n    step1 = delta(3, 4)  # Calculate (3 Δ 4)\n    step2 = star(step1, 5)  # Calculate the result of the previous step ※ 5\n    final_result = delta(step2, 6)  # Calculate the result of the previous step Δ 6\n\n    return final_result  # Return the final result\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of male and female visitors\n    males_first_day, females_first_day = symbols('males_first_day females_first_day')\n    \n    # Equation representing the relationship on the first day\n    first_day_eq = Eq(males_first_day, females_first_day + 450)\n    \n    # Equations representing the number of visitors on the second day\n    females_second_day = females_first_day * 1.15\n    males_second_day = males_first_day * 0.82\n    second_day_eq = Eq(females_second_day + males_second_day, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((first_day_eq, second_day_eq), (males_first_day, females_first_day))\n    \n    # Get the total number of visitors on the first day\n    total_first_day = solutions[males_first_day] + solutions[females_first_day]\n    \n    return total_first_day\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # sum up all books\n    same_books = factorial(3) * factorial(4) * factorial(2) * factorial(2)  # factorial for each type\n\n    # calculate permutations\n    ans = factorial(total_books) // same_books\n    return ans\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo - 220, jason)\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_a_week = 7\n\n    total_robots = robots_per_day * days_in_a_week\n\n    return total_robots\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        E, F, C, B, H = p\n        if E == 0 or C == 0:  # Ensuring the numbers are not leading with a zero\n            continue\n        if (E * 10000 + F * 1000 + C * 100 + B * 10 + H) % (C * 100 + B * 10 + H) == 0 and \\\n           (E * 10000 + F * 1000 + C * 100 + B * 10 + H) % (B * 10 + H) == 0 and \\\n           (E * 10000 + F * 1000 + C * 100 + B * 10 + H) % (H) == 0:\n            return E * 10000 + F * 1000 + C * 100 + B * 10 + H\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    step = 9\n    \n    # Using modulo to find the last positive number before reaching zero\n    last_number = start_number % step\n    \n    return last_number\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # This is a problem of partitioning 7 into at most 3 parts, where each part represents the number of pencils in a case.\n    # Since the cases are identical, we can't distinguish between them.\n    # The number of ways of partitioning 'n' into 'k' parts is given by the partition function P(n, k).\n    # We can consider this as a stars and bars problem with 6 stars (pencils) and 2 bars (separators for cases).\n    \n    # Number of partitions of 7 pencils into 3 parts (pencil cases) is equivalent to putting 2 bars between 7 pencils\n    pencils = 7\n    cases = 3\n    separators = cases - 1  # 2\n\n    # Total items to arrange: pencils + separators\n    total_items = pencils + separators\n\n    # Number of ways to arrange total_items, where pencils are identical and separators are identical\n    from math import factorial\n    ways = factorial(total_items) // (factorial(pencils) * factorial(separators))\n\n    return ways\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3000000\n    number_of_friends = 5\n    cost_per_friend = total_cost / number_of_friends\n    return cost_per_friend\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    return 2**((40 - 1).bit_length() - 1)\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    cost_without_name = 10\n    cost_with_name = 15\n    total_amount_paid = 555\n    \n    # Let x be the number of children who paid to have their name put on the shirt.\n    # Then, (total_children - x) will be the number of children who did not.\n    \n    # Set up the equation:\n    # cost_without_name * (total_children - x) + cost_with_name * x = total_amount_paid\n    \n    # Solve for x:\n    # 10 * (50 - x) + 15 * x = 555\n    # 500 - 10 * x + 15 * x = 555\n    # 5 * x = 555 - 500\n    # x = (555 - 500) / 5\n    \n    x = (total_amount_paid - (cost_without_name * total_children)) / (cost_with_name - cost_without_name)\n    \n    return int(x)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the speed of 200 metres per minute\n    t = symbols('t')\n    \n    # David walks 150 m/min for the first 10 minutes and increases his speed to 200 m/min for t minutes\n    # Total distance covered is 3700 metres\n    equation = Eq(150 * 10 + 200 * t, 3700)\n    \n    # Solve the equation for t\n    time_at_increased_speed = solve(equation, t)[0]\n    \n    # David walked for 10 minutes at the first speed and time_at_increased_speed at the second speed\n    total_time = 10 + time_at_increased_speed\n    \n    return total_time\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    departure_singapore = 5  # 05:00 AM\n    arrival_london = 11     # 11:00 AM\n\n    time_difference = 7      # Singapore is 7 hours ahead\n\n    if arrival_london < (departure_singapore - time_difference):\n        flight_time = (24 + arrival_london - departure_singapore + time_difference)\n    else:\n        flight_time = arrival_london - departure_singapore + time_difference\n\n    return flight_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    f, m = symbols('f m')\n\n    # Male visitors was 450 more than female visitors on the first day\n    equation1 = Eq(m, f + 450)\n\n    # On the second day, female visitors increased by 15%, male decreased by 18%\n    # Total number of visitors on the second day was 1354\n    equation2 = Eq((f * 1.15) + (m * 0.82), 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # Return the number of male visitors on the first day\n    return solutions[m]\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    ways_to_arrange = factorial(total_cards)  # Number of ways to arrange all cards\n    # Since cards of each type are indistinguishable, we divide by the factorial of the number of cards for each type\n    ways_to_arrange //= factorial(4)  # Divide by the number of ways to arrange the hearts\n    ways_to_arrange //= factorial(3)  # Divide by the number of ways to arrange the spades\n    ways_to_arrange //= factorial(7)  # Divide by the number of ways to arrange the diamonds\n    return ways_to_arrange\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    # Convert fractions to a common denominator\n    # 1/3 = 3/9, so we can directly subtract the fractions now\n    almonds = 4/9\n    cashews = 1/3\n\n    # Find the difference\n    difference = almonds - cashews\n\n    return difference\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of 5 that is a non-zero single digit.\n    first_digit = 5\n    # Second digit: the smallest odd number among the natural numbers.\n    second_digit = 1\n    # Third digit: the largest odd single digit number.\n    third_digit = 9\n    # Fourth digit: the smallest even number in nature (natural numbers).\n    fourth_digit = 2\n    # Fifth digit: the largest single digit that is a multiple of 2.\n    fifth_digit = 8\n    # Sixth digit: the smallest odd number greater than 1 in nature.\n    sixth_digit = 3\n    # Seventh digit: a multiple of 2 and 5, which means it must end in 0.\n    seventh_digit = 0\n\n    # Combine all digits to form the phone number\n    ans = int(f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\")\n    return ans\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_read = 80  # Pages read on the last day\n    day = 1  # Start from the first day\n    pages_per_day = 20  # Pages read on the first day\n\n    # Adding the pages read each day until the last day\n    while total_pages_read <= 80:\n        day += 1\n        pages_per_day += 5\n        total_pages_read += pages_per_day\n\n    return total_pages_read\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))  # Sum of all positive terms starting from 4 and ending at 54 (step of 4)\n    sum_negative = sum(range(2, 51, 4))  # Sum of all negative terms starting from 2 and ending at 50 (step of 4)\n    \n    return sum_positive - sum_negative  # Subtract the sum of negative terms from the sum of positive terms\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Correct calculation for the original number\n    original_number = (quotient * divisor) + remainder\n\n    # Johnny's incorrect calculation\n    johnny_calculation = (remainder * 2) + divisor\n\n    # Check if Johnny's answer is correct\n    is_correct = original_number == johnny_calculation\n\n    # If incorrect, provide the correct original number\n    if not is_correct:\n        correct_calculation = original_number\n    else:\n        correct_calculation = johnny_calculation\n\n    return is_correct, correct_calculation\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = g*10000 + a*1000 + m*100 + a*10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n            \nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    median_position = len(sequence) // 2\n    # For sequences with odd length, median is the middle number\n    if len(sequence) % 2 == 1:\n        ans = sequence[median_position]\n    # For sequences with even length, median is the average of the two middle numbers\n    else:\n        ans = (sequence[median_position - 1] + sequence[median_position]) / 2\n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x represents the length of the part that has been cut from both ropes\n\n    # After cutting, the length of rope A becomes (65 - x) and the length of rope B becomes (29 - x)\n    equation = Eq((65 - x), 3 * (29 - x))\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    # The probability of getting 5 on a fair die is 1/6, as there are 6 faces.\n    probability_of_five = 1/6\n    \n    # Expected value can be calculated by multiplying the probability of the event with the number of trials.\n    expected_number_of_fives = total_rolls * probability_of_five\n    \n    return expected_number_of_fives\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy distributed 4 bags\n    boys_bags = 4 * boys\n    # Each girl distributed 3 bags\n    girls_bags = 3 * girls\n    # The boys distributed 62 more bags than the girls\n    more_bags_equation = Eq(boys_bags - girls_bags, 62)\n    # There are 40 boys and girls in total\n    total_people_equation = Eq(boys + girls, 40)\n\n    # Solve the system of equations\n    solutions = solve((more_bags_equation, total_people_equation), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    numerator = 12\n    denominator = 18\n    target_denominator = 6\n\n    ans = (numerator * target_denominator) / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    total_cost = Eq((6 * (7 * x)) + (3 * 35), 441)\n    dress_cost = solve(total_cost, x)\n\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    digits = [1, 3, 5, 7, 9]  # odd digits\n    # 3 digit number abc => there are 5 possibilities for a, 5 for b, and 5 for c\n    count = len(digits) * len(digits) * len(digits)\n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the given ratios and average\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C)/3, 45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The given pattern indicates that the sum till 1/n*(n+1) is n/(n+1)\n    # So in this case the result will be 2011/2013\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder = 0\n    for i in range(1, 1000, 2):\n        remainder += (i ** 2) % 3\n    return remainder % 3\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy one to paint the house alone\n    x = symbols('x')\n    \n    # The energetic one can paint the house in 12 days, so his work rate is 1/12 house per day\n    energetic_rate = 1/12\n    \n    # The combined work rate of both decorators is 1 house per 8 days, so 1/8 house per day\n    combined_rate = 1/8\n\n    # The lazy one's work rate is 1/x house per day\n    lazy_rate = 1/x\n\n    # The combined work rate of both decorators is the sum of their individual rates\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11  # the 11th student\n\n    # the nth term of an arithmetic sequence is given by a_n = a_1 + (n-1)*d\n    coins_11th_student = first_term + (n - 1) * difference\n\n    return coins_11th_student\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    # Iterate through possible digit values for a and b\n    for a in range(0, 10):\n        for b in range(0, 10):\n            # Construct numbers based on digits a and b\n            ab = 10 * a + b\n            ba = 10 * b + a\n            aab = 100 * a + 10 * a + b\n            # Check if the equation is satisfied\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original length and width as l and w\n    l, w = symbols('l w')\n\n    # If you increase the length by 12 cm, then the new length is l + 12\n    # The perimeter of the new rectangle is 2*(new_length) + 2*w = 38\n    equation = Eq(2*(l + 12) + 2*w, 38)\n\n    # The values of l and w themselves will give us the perimeter of the original rectangle\n    # P_original = 2*l + 2*w\n    # We solve for l since we have one equation and 2 unknowns we consider w as a parameter\n    l_value = solve(equation, l)[0] - 12\n    # To find the value of w, we can plug in the l_value into the equation and solve for w\n    new_perimeter = 2*(l_value + 12) + 2*w\n    w_value = solve(Eq(new_perimeter, 38), w)[0]\n    # Now we can calculate the perimeter of the original rectangle\n    original_perimeter = 2*l_value + 2*w_value\n\n    return original_perimeter\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    students = 123\n    flour_per_student = 142\n    total_flour = students * flour_per_student\n    return total_flour\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sana's and Mina's original amount of coins\n    sana, mina = symbols('sana mina')\n\n    # Set up the initial equations based on the problem statement\n    total_coins = Eq(sana + mina, 234)\n    sana_coins = Eq(sana, 8 * mina)\n\n    # Solve the simultaneous equations to find the number of coins each had originally\n    solutions = solve((total_coins, sana_coins), (sana, mina))\n    original_mina_coins = solutions[mina]\n\n    # Mina then gave away 12 coins\n    mina_left = original_mina_coins - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    # Equation based on ratio\n    ratio_eq = Eq(jamie_anne, natasha * (5/3))\n\n    # Equation based on the difference in the number of stamps\n    difference_eq = Eq(jamie_anne - natasha, 18)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq), (jamie_anne, natasha))\n\n    # Calculate the total number of stamps\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    small_bag_weight = 3/4\n    num_bags = remaining_after_tuesday / small_bag_weight\n\n    return int(num_bags)\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    nth_term = 11\n\n    return first_term + (nth_term - 1) * difference\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for page in range(1, 121):\n        count += str(page).count('7')\n    return count\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Each corner is counted twice, once for each side that meets at that corner.\n    # Therefore, we subtract the 4 corner flowers that were counted twice.\n    total_flowers = (6 * 4) - 4\n\n    return total_flowers\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles from the first lamp post (1) to the eleventh (11) in 50 seconds\n    # As he cycles past 11 posts, he actually cycles past 10 intervals between them\n    # Therefore, the time to cycle past one lamp post is 50 seconds / 10 intervals\n    time_per_post = 50 / 10\n\n    # After 80 seconds, the number of lamp posts he will have cycled past is:\n    # (Time cycling) / (Time per post) + (The first lamp post he starts at)\n    posts_cycled = int(80 / time_per_post) + 1  # We add 1 because he starts at the first post\n\n    return posts_cycled\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of items be x\n    x = symbols('x')\n    # Number of apples\n    apples = 2/3 * x\n    # Number of bananas\n    bananas = 1/9 * x\n    # Number of lemons (the rest)\n    lemons = x - apples - bananas\n\n    # From the problem's statement, we know that Rena bought 12 more apples than lemons\n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equation to find the total number of items\n    total_items = solve(equation, x)\n\n    # Now we can calculate the number of lemons\n    num_lemons = lemons.subs(x, total_items[0])\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n\n    football_field_length = basketball_court_length + football_field_extra_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    ana_discount_percentage = ana_discount * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    r = 1\n    s = 16  # Start with the denominator from the second fraction, for efficiency\n\n    while True:\n        if 3/10 < r/s < 5/16:\n            return s\n        else:\n            s += 1\n            r = (3 * s) // 10  # Find the right numerator for the new denominator\n            \nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    total = total_two_days * 6 / 5\n    return int(total)\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Calculate the sum of all factors of 4\n    factors_of_4 = [i for i in range(1, 5) if 4 % i == 0]\n    sum_factors_4 = sum(factors_of_4)\n\n    # Digit in the ones place\n    ones_place = sum_factors_4\n\n    # Digit in the hundreds place\n    hundreds_place = 8\n\n    # Digit in the thousands place\n    thousands_place = hundreds_place + 1\n\n    # Digit in the tens place\n    tens_place = abs(hundreds_place - ones_place)\n\n    # Final 5-digit number\n    number = 4 * 10000 + thousands_place * 1000 + hundreds_place * 100 + tens_place * 10 + ones_place\n\n    return number\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_capacity_in_children = 40\n    adults_on_full_bus = 24\n    children_on_bus = 15\n\n    remaining_capacity_in_children = total_capacity_in_children - children_on_bus\n    adult_to_child_ratio = total_capacity_in_children / adults_on_full_bus\n\n    max_adults = remaining_capacity_in_children / adult_to_child_ratio\n\n    return int(max_adults)\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3\n    pancakes_in_12_minutes = (12 / time_for_2_pancakes) * 2\n    \n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3  # L, M, S\n\n    # Applying Pigeonhole Principle\n    min_students_same_size = (total_students // num_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd, sqrt\n\n    # Find the factors of 28\n    factor = 28\n    # Since we want the smallest number that can be multiplied to 28\n    # to get a perfect square, we need to find the prime factors of\n    # 28 and see what is missing for it to be a perfect square.\n\n    # Prime factors of 28 are 2, 2, and 7 (28 = 2^2 * 7)\n    # For 28 to become a perfect square, we need another 7\n    # Because 2^2 is already a square but 7 is not, so we need 7^2\n    # To make it a perfect square.\n    # Thus we need one more 7.\n    \n    # The smallest number that needs to be multiplied by 28 is therefore 7.\n    return 7\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 120 * 0.4\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    # Define the new operation\n    triangle_op = lambda a, b: (a + 2) / b\n    \n    # Calculate the value of 6 triangle 4\n    inner_value = triangle_op(6, 4)\n    \n    # Calculate the value of 8 triangle the result of 6 triangle 4\n    result = triangle_op(8, inner_value)\n    \n    return result\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the salary\n    salary = symbols('salary')\n\n    # Amount spent on DVD player\n    dvd_spend = 740\n\n    # The equation representing the problem\n    equation = Eq(salary - dvd_spend - 3/4 * (salary - dvd_spend), 1/5 * salary)\n\n    # Solving the equation\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'r' represent Russell's current age\n    r = symbols('r')\n    \n    # Create an equation based on the problem statement\n    # In 32 years, Russell's age will be r + 32\n    # 16 years ago, Russell's age was r - 16\n    # According to the problem, in 32 years, Russell's age is 4 times his age 16 years ago\n    equation = Eq(r + 32, 4 * (r - 16))\n    \n    # Solve the equation for Russell's current age\n    solutions = solve(equation, r)\n    \n    # Russell's current age is the only solution to the equation\n    return solutions[0]\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for total_people in range(1, 100):  # Assuming the number of people won't exceed 100\n        if (total_people // 2) == (19 - 6):\n            return total_people\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    return (5 - 1) * 2\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                Pip_number = 1000 * A + 100 * B + 10 * C + A\n                Bud_number = A * 10 + B * 1000 + C * 100 + A\n                if Pip_number + Bud_number == 5510:\n                    return Pip_number\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    \n    # Since we know all 15 shelves are full and only contain 4 math books or 9 spelling books,\n    # we can assume that the remaining books are all math books.\n    \n    # Calculate the number of shelves that must contain spelling books\n    # since we know the total number of spelling books and that each spelling book shelf contains 9 books.\n    shelves_with_spelling_books = total_spelling_books // 9\n    \n    # The remaining shelves must contain math books.\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    \n    # As each math book shelf contains 4 books, we can calculate the total number of math books.\n    total_math_books = shelves_with_math_books * 4\n    \n    return total_math_books\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuits_original = 100\n    chocolate_original = 40\n    biscuits_actual = 75\n    chocolate_actual = biscuits_actual * chocolate_original / biscuits_original\n    return chocolate_actual\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Let initial number of students in class 6A be x\n    # Then initial number of students in class 6B would be (9/4)*x\n    # After reshuffling, students in class 6A become x-3+18 => x+15\n    # Similarly, after reshuffling, students in class 6B become (9/4)*x + 3 - 18 => (9/4)*x - 15\n    # According to the problem, after reshuffling, both classes have equal number of students\n    # x + 15 = (9/4)*x - 15\n    # x - (9/4)*x = -15 - 15\n    # -(5/4)*x = -30\n    # x = (-30) / (-(5/4))\n    # x = 30 * (4/5)\n    # x = 24\n    return 24\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time taken to walk from 1st floor to 4th floor is given as 6 minutes.\n    minutes_per_floor = 6 / 3  # because 4th floor - 1st floor = 3 floors.\n    # Now, we need to find the time to get from 1st floor to 10th floor\n    time_to_10th_floor = minutes_per_floor * (10 - 1)  # because 10th floor - 1st floor = 9 floors.\n    return time_to_10th_floor\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_earnings_per_day = 90\n    number_of_days = 7  # From Monday to Sunday\n    total_earnings = average_earnings_per_day * number_of_days\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    num_pasta = 2\n    num_sauces = 3\n    num_toppings = 2\n\n    ans = num_pasta * num_sauces * num_toppings\n\n    return ans\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate time for each section\n    time1 = 280 / 7  # Distance divided by speed\n    time2 = 400 / 5\n    time3 = (800 - 280 - 400) / 8  # Remaining distance divided by speed\n\n    # Sum of all times is the total time\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    # Initial number\n    total = 180\n    # Subtractions of 9, six times\n    total -= 9 * 6\n    # Subtractions of 7, six times\n    total -= 7 * 6\n    # The result is stored in 'ans'\n    ans = total\n    return ans\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # For the 8th student to be directly opposite the 16th student, there must be 16 * 2 students in the circle initially.\n    initial_students = 16 * 2\n    \n    # For the 8th student to be directly opposite the 22nd student, there must be 22 * 2 students in the circle after more join.\n    new_total_students = 22 * 2\n    \n    # The difference in the number of students is how many new students joined.\n    new_students_joined = new_total_students - initial_students\n    \n    return new_students_joined\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Anna, Betsy, and Charlene's marbles\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Set up the equations based on the problem statement\n    total_marbles = Eq(anna + betsy + charlene, 168)\n    after_charlene_gives = Eq(betsy + 15, charlene - 15)\n    after_betsy_gives = Eq(anna + 8, betsy - 8)\n    ratio = Eq(anna / betsy, 2 / 5) & Eq(betsy / charlene, 5 / 7)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles, after_charlene_gives, after_betsy_gives, ratio), (anna, betsy, charlene))\n\n    # Betsy's marbles at first\n    betsy_initial = solutions[betsy] + 15 + 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # Original ratio\n    equation1 = Eq(lollipops/gum_drops, 5/7)\n    \n    # Ratio after adding 120 pieces of each candy\n    equation2 = Eq((lollipops + 120)/(gum_drops + 120), 4/5)\n    \n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n    \n    # Calculate the total number of pieces after adding 120 pieces to each\n    total = solutions[lollipops] + solutions[gum_drops] + 120 + 120\n\n    return total\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n    for d1 in digits:\n        for d2 in digits:\n            for d3 in digits:\n                if (d1 * 100 + d2 * 10 + d3) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the white paper\n    width = 136 # Convert from 1.36m to 136cm\n    height = 80 # Convert from 0.8m to 80cm\n\n    # Calculate the greatest common divisor (GCD) for the dimensions\n    side_length = gcd(width, height)\n\n    # Calculate the number of squares by dividing the area of the paper by the area of a square\n    num_squares = (width // side_length) * (height // side_length)\n\n    return num_squares\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    # Define the range of numbers\n    limit = 201\n\n    # Calculate the numbers divisible by 5\n    count_by_5 = (limit - 1) // 5\n\n    # Calculate the numbers divisible by 7\n    count_by_7 = (limit - 1) // 7\n\n    # Calculate the numbers divisible by both 5 and 7 (i.e., 35)\n    count_by_5_and_7 = (limit - 1) // (5 * 7)\n\n    # Use the inclusion-exclusion principle\n    ans = count_by_5 + count_by_7 - count_by_5_and_7\n\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    equation1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    teams = symbols('teams')\n    equation = Eq(teams * (teams - 1), 30 * 2)  # Each pair of teams plays twice\n    num_teams = solve(equation, teams)\n    \n    # solve gives us two solutions, we need the positive number of teams\n    for t in num_teams:\n        if t > 0:\n            return t\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 1351):  # it's 1351 because the highest possible number with a missing 0 is 1349 (i.e., 1350 - 1)\n        if i * 10 == i + 135:\n            return i * 10\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    # If the boat goes full, it takes 2 trips (forth and back) except the last one (only forth)\n    full_trips = (students // boat_capacity) * 2 - 1 \n    # Check if there are any students left for last trip\n    if students % boat_capacity > 0:\n        full_trips += 1\n    return full_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    ans = (49 * 57) + 7\n    return ans\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    both_subjects_percentage = (80 + 35 - 10) - 100\n    both_subjects = 75  # students choosing both Grade A and Grade B Math\n\n    total_students = (both_subjects * 100) / both_subjects_percentage\n\n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n    \n    ans = hundreds * 100 + tens * 10 + ones\n    \n    return ans\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    ans = 100 / (1 + 1/99)\n    return ans\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 4, 6, 9]\n    all_numbers = [''.join(p) for p in permutations(map(str, digits))]\n    sum_of_numbers = sum(int(number) for number in all_numbers)\n    average = sum_of_numbers / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for each person's age\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Create the equations based on the given information\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Return Alex's age\n    return solutions[alex]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens_digit in range(9):\n        for ones_digit in range(9):\n            if tens_digit != ones_digit and tens_digit + ones_digit == 15:\n                return 900 + tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define boys as b and girls as g\n    b, g = symbols('b g')\n\n    # Initial condition suggests that the number of boys is equal to the number of girls\n    equation1 = Eq(b, g)\n\n    # After 60 boys and 12 girls left, twice as many girls as boys remained at the gathering\n    equation2 = Eq(g - 12, 2 * (b - 60))\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    # 3 bowls of water = 1 jug\n    bowls_per_jug = 3\n    # 2 jugs of water = 1 pail\n    jugs_per_pail = 2\n\n    # Bowls needed to fill 1 pail\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from sympy import divisors\n\ndef solution():\n    all_numbers = set(range(1, 14))\n    # Since two students put up their hands, they must have the numbers whose number of factors could be determined uniquely\n    # We find such numbers within the given range\n    numbers_with_unique_number_of_factors = {number for number in all_numbers if sum(len(divisors(other)) == len(divisors(number)) for other in all_numbers) == 1}\n    \n    # Alice knows her number is odd, so we remove even numbers from all possibilities\n    possible_alice_numbers = {number for number in all_numbers if number % 2 == 1}\n    # May's number is smaller than Alice's by 2, and since Alice has an odd number, May's must be odd too.\n    # We consider the pair (May's number, Alice's number)\n    possible_pairs = {(num - 2, num) for num in possible_alice_numbers if num - 2 in all_numbers}\n    \n    # Now, we need to find a pair where both numbers have a unique number of factors, so they could raise their hands.\n    for may, alice in possible_pairs:\n        if may in numbers_with_unique_number_of_factors and alice in numbers_with_unique_number_of_factors:\n            # Now we remove May's and Alice's numbers from all numbers to find the unchosen ones\n            remaining_numbers = all_numbers - {may, alice}\n            # Among the remaining numbers, there should be Mark's number, which is May's number minus 1\n            mark_number = may - 1\n            if mark_number in remaining_numbers:\n                # Now we have May's, Alice's, and Mark's numbers, we eliminate them from the unchosen numbers\n                remaining_numbers.remove(mark_number)\n                # The product of the rest should be the answer\n                ans = 1\n                for num in remaining_numbers:\n                    ans *= num\n                return ans\n    return None\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80\n    speed_car = 120\n    lead_time = 3\n\n    # Distance covered by the van in the lead time\n    distance_van = speed_van * lead_time\n\n    # Relative speed\n    relative_speed = speed_car - speed_van\n\n    # Time required for the car to catch up\n    catch_up_time = distance_van / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the number of pages each printer can print in 1 minute\n    pages_per_minute_A = 300 / 12\n    pages_per_minute_B = 300 / 10\n\n    # Calculate the total number of pages both printers can print in 1 minute\n    pages_per_minute_both = pages_per_minute_A + pages_per_minute_B\n\n    # Calculate the total number of pages both printers can print in 1/2 hour (30 minutes)\n    pages_in_half_hour = pages_per_minute_both * 30\n\n    return pages_in_half_hour\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from math import comb\n\ndef solution():\n    # She can choose 0 to 4 hats, 1 to 3 shirts, 1 to 2 pairs of pants, and 1 skirt\n    # Use the law of addition for hats (since they are optional) and multiplication for the others\n    hat_combinations = sum([comb(4, i) for i in range(5)]) # 0 to 4 hats\n    shirt_combinations = sum([comb(3, i) for i in range(1, 4)]) # 1 to 3 shirts\n    pants_combinations = sum([comb(2, i) for i in range(1, 3)]) # 1 to 2 pants\n    skirt_combinations = comb(1, 1) # 1 skirt\n\n    # The total number of combinations\n    total_combinations = hat_combinations * shirt_combinations * pants_combinations * skirt_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # The length of the repetend in a product of two repeating decimals can be at most\n    # the least common multiple of the lengths of the two original repetends.\n    from math import lcm\n    length_repetend1 = 2  # Since 0.0101... has a repetend of length 2\n    length_repetend2 = 2  # Same for the second number as it is the same as the first one.\n\n    # The length of the repetend in the product is the LCM of the two lengths.\n    length_repetend_product = lcm(length_repetend1, length_repetend2)\n\n    return length_repetend_product\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n    \n    equation1 = Eq(durian/chocolate, 3/4)\n    equation2 = Eq(chocolate/strawberry, 4/2)\n    equation3 = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    return solutions[durian] * 5\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    \n    apples = (2 / 3) * total_items\n    bananas = (1 / 9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples, lemons + 12)\n    \n    solutions = solve((equation,), (total_items,))\n    \n    lemons_count = total_items - ((2 / 3) * solutions[total_items]) - ((1 / 9) * solutions[total_items])\n    \n    return lemons_count.evalf(subs={total_items: solutions[total_items]})\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Check if the day is valid for the month\n            if (month in [4, 6, 9, 11] and day <= 30) or (month == 2 and day <= 28) or (month in [1, 3, 5, 7, 8, 10, 12]):\n                date_str = f\"{day:02d}/{month:02d}/2019\"\n                # Count the occurrences of '3' in the date string\n                count += date_str.count('3')\n    return count\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            original_number = tens_digit * 10 + ones_digit\n            swapped_number = ones_digit * 10 + tens_digit\n            if swapped_number == 3 + original_number // 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.191\n    interest_last_two_years = 1.166\n\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Calculate the dimensions of a single small cube\n    cube_edge_length = (7 * 5 * 14) // 490\n    \n    # Calculate the number of cubes along each dimension\n    cubes_along_length = 7 // cube_edge_length\n    cubes_along_width = 5 // cube_edge_length\n    cubes_along_height = 14 // cube_edge_length\n    \n    # Only the cubes at the vertices of the cuboid have exactly three painted faces\n    # Since a cuboid has 8 vertices, the answer is 8\n    num_cubes_with_three_faces_painted = 8\n\n    return num_cubes_with_three_faces_painted\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roll, donut = symbols('roll donut')\n\n    equation1 = Eq(5 * roll + 6 * donut, 14.70)\n    equation2 = Eq(roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (roll, donut))\n\n    return solutions[roll]\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for levels\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n\n    # Define the conditions given in the problem as equations\n    conditions = [\n        A > C,            # A stays higher than C\n        A < D,            # A stays lower than D\n        B < Xavier,       # B stays lower than Xavier\n        D == 5 * Yvonne,  # D stays at a level that is 5 times Yvonne's level\n        Zachary + 2 - Xavier == Zachary - Waylon,  # Zachary's unit + 2 = Difference in levels between his unit and Xavier's = Difference with Waylon's\n        Zachary == Yvonne + Xavier,  # Zachary's level is the sum of Yvonne and Xavier's levels\n        # Levels are between 1 and 18\n        (A > 0) & (A <= 18),\n        (B > 0) & (B <= 18),\n        (C > 0) & (C <= 18),\n        (D > 0) & (D <= 18),\n        (Zachary > 0) & (Zachary <= 18),\n        (Yvonne > 0) & (Yvonne <= 18),\n        (Xavier > 0) & (Xavier <= 18),\n        (Waylon > 0) & (Waylon <= 18),\n    ]\n\n    # Solve the equations\n    solutions = solve(conditions)\n\n    # Extract the level at which A stays\n    for sol in solutions:\n        if all(map(lambda x: 0 < x <= 18, sol)):\n            return sol[A]\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n    \n    num_students_school_1 = 24\n    num_students_school_2 = 36\n    num_students_school_3 = 42\n\n    # Find the Greatest Common Divisor (GCD) of the three numbers\n    gcd_12 = gcd(num_students_school_1, num_students_school_2)\n    largest_team_size = gcd(gcd_12, num_students_school_3)\n    \n    return largest_team_size\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    all_possible_numbers = list(permutations(digits))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Total number of elements up to 12's would be 1+2+...+12.\n    # This is the sum of the first 12 natural numbers.\n    total_numbers = sum(range(1, 13))\n\n    # The median position in the sequence will be the average of\n    # the indexes of the middle two elements, as we have an even number of elements.\n    median_position = (total_numbers + 1) / 2\n\n    # Every number n appears n times in the sequence, so we need to\n    # figure out which number occupies the median position.\n\n    # Running total of the number counts from 1 to n\n    count = 0\n    for n in range(1, 13):\n        count += n\n        # As soon as we exceed the median position, we have found our number.\n        if count >= median_position:\n            median_value = n\n            break\n\n    return median_value\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # Hundreds digit goes from 1 to 9\n        for tens in range(1, 10): # Tens digit goes from 1 to 9\n            for units in range(1, 10): # Units digit goes from 1 to 9\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    single_digits = 10 - 7  # 7, 8, 9\n    double_digits = 40 - 9  # from 10 to 40, inclusive\n\n    return single_digits + len(str(10)) * double_digits\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let the first term be a and common difference be d\n    # Sum of first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n-1)d)\n    # where S_n = sum of first n terms, a = first term, and d = common difference\n    \n    # From the problem statement, we have the following two equations:\n    # S_9 = 9/2 * (2a + 8d) = 99\n    # S_27 = 27/2 * (2a + 26d) = 540\n\n    # Solve for a and d using the two equations\n    # 1) 9/2 * (2a + 8d) = 99\n    # 2) 27/2 * (2a + 26d) = 540\n\n    # From equation 1, we get:\n    # 9a + 36d = 99 * 2\n    a_plus_4d = 99 * 2 / 9  # a + 4d\n\n    # From equation 2, we get:\n    # 27a + 702d = 540 * 2\n    a_plus_26d = 540 * 2 / 27  # a + 26d\n    \n    # Now we have two equations using a, one with a + 4d and another with a + 26d\n    # (a + 26d) - (a + 4d) = 22d\n    d = (a_plus_26d - a_plus_4d) / 22\n\n    # Now find a using the value of d and a_plus_4d\n    a = a_plus_4d - 4 * d\n\n    # Now calculate the sum of the first 16 terms using the values of a and d\n    S_16 = 16 / 2 * (2 * a + (16 - 1) * d)\n    \n    return S_16\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let's denote the number I'm thinking of as 'x'.\n    # According to the problem statement, we have the equation:\n    # 3 * x + 1 = 22\n    # We need to find the value of 'x'.\n\n    # Solving the equation:\n    ans = (22 - 1) / 3\n    return int(ans)\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    red_flash_rate = 4\n    green_flash_rate = 6\n    total_minutes = 60\n\n    red_flash_times = total_minutes * red_flash_rate\n    green_flash_times = total_minutes * green_flash_rate\n    combined_flash_rate = red_flash_times // red_flash_rate\n\n    # greatest common divisor (gcd) will give us the frequency at which both lights flash together\n    from math import gcd\n    lcm = (red_flash_rate * green_flash_rate) // gcd(red_flash_rate, green_flash_rate)\n\n    # since both lights start at the same instant we add 1 to include the first instant\n    ans = (total_minutes * combined_flash_rate // lcm) + 1\n    \n    return ans\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink\n    max_volume_per_glass = total_volume // 9  # Find the greatest volume that can be poured into each glass equally\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes_percent = 0.40\n    landscapes_by_french = 25\n    total_by_french = 40\n\n    total_landscapes = total_paintings * landscapes_percent\n    still_lifes = total_paintings - total_landscapes\n    still_lifes_by_french = total_by_french - landscapes_by_french\n    still_lifes_not_french = still_lifes - still_lifes_by_french\n\n    return int(still_lifes_not_french)\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_s = 300\n    time_min = time_s / 60\n\n    distance_m = speed_m_per_min * time_min\n\n    return distance_m\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    group_stage_games = 0\n    # Each group of 4 teams plays a single round-robin tournament (each team plays every other team once)\n    for group in range(8):  # There are 8 groups\n        teams = 4\n        games_per_group = teams * (teams - 1) // 2  # Number of games in one group\n        group_stage_games += games_per_group\n    \n    # Knockout round games\n    knockout_round_games = 0\n    # Top 16, quarterfinals, semifinals, third place match, and final\n    knockout_round_games += 16 // 2  # Round of 16\n    knockout_round_games += 8 // 2   # Quarterfinals\n    knockout_round_games += 4 // 2   # Semifinals\n    knockout_round_games += 2 // 2   # Final and third place match\n    \n    total_games = group_stage_games + knockout_round_games\n\n    return total_games\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_rice = (100 * 0.50) + (400 * 0.80) # Calculate total rice from both mixtures\n    total_dogfood = 100 + 400 # Total weight of the new mixture\n\n    concentration_of_rice = (total_rice / total_dogfood) * 100 # Find the concentration in percentage\n\n    return concentration_of_rice\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Total amount of hay needed for 12 horses for 15 days.\n    total_hay = horses_initial * days_initial\n    \n    # Calculate how many days the same amount of hay will last for 20 horses.\n    days_final = total_hay / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    sum_of_ages_future = 48\n\n    # Let x be the number of years later for the sum of their ages to be 48.\n    # Equation: (oliver_age_now + x) + (lin_age_now + x) = sum_of_ages_future\n    # Simplifying the equation: 2x + oliver_age_now + lin_age_now = sum_of_ages_future\n\n    x = (sum_of_ages_future - (oliver_age_now + lin_age_now)) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    mod_val = 100000  # We want the last 5 digits, so we use modulo 100000\n    cum_sum = 0\n    current = 0\n    \n    # Sum each term in the sequence up to the 2017th term\n    for _ in range(2017):\n        current = current * 10 + 2  # This creates the sequence 2, 22, 222, ...\n        cum_sum = (cum_sum + current) % mod_val  # Only keep the last 5 digits\n    \n    return cum_sum\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for d1 in range(1, 10):  # The first digit cannot be 0\n        for d2 in range(0, 10):\n            for d3 in range(0, 10):\n                for d4 in range(0, 10):\n                    original_number = 1000 * d1 + 100 * d2 + 10 * d3 + d4\n                    new_number = 1000 * d2 + 100 * d3 + 10 * d4 + d1\n                    if new_number - original_number == 4707:\n                        return original_number\n                        \nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n    return closest_to_one\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    \n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    \n    return age_difference\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 10000):  # Iterate through multiples of 35\n        num = i * 35\n        if str(num).endswith('35') and sum(int(digit) for digit in str(num)) == 35:\n            return num\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99\n    divisible_by_3 = total_numbers // 3\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (3 * 7)\n\n    numbers_not_divisible = total_numbers - (divisible_by_3 + divisible_by_7 - divisible_by_both)\n    \n    return numbers_not_divisible\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_amount = 8 * y\n    watch_cost = 4 * y\n    handbag_cost = 20\n    each_child_amount = y - 5\n\n    # Mrs Lim gave the remainder of her money to her 2 children.\n    equation = Eq(total_amount, watch_cost + handbag_cost + 2 * each_child_amount)\n\n    # Solve the equation for y\n    solution_y = solve(equation, y)\n\n    return solution_y[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    for year in range(1901, 2000):\n        if year % 4 == 0:\n            total_days += 366  # Leap year\n        else:\n            total_days += 365  # Non-leap year\n    # Add the days of the year 2000 (leap year)\n    total_days += 366\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    days = 15\n    initial_amount = 100\n    deposit = 10\n    spend = 8\n    cycle_days = 2  # days for one complete deposit-spend cycle\n\n    # Calculate how many complete cycles there are in 15 days\n    complete_cycles = days // cycle_days\n\n    # Calculate money after complete cycles\n    money_after_cycles = initial_amount + (deposit - spend) * complete_cycles\n\n    # Check if there is an extra day after the complete cycles (odd number of days)\n    extra_day = days % cycle_days\n\n    # If there's an extra day, it's a deposit day\n    if extra_day > 0:\n        money_after_cycles += deposit\n    \n    return money_after_cycles\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    a = 16\n    b = 28\n    return gcd(a, b)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # Arithmetic sequence with nth term = n, first term a1 = 1, last term a12 = 12.\n    # Sum of first n terms of an arithmetic sequence is given by n/2 * (first term + last term)\n    n = 12\n    first_term = 1\n    last_term = n\n    sum_of_terms = n/2 * (first_term + last_term)\n    \n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    questions = 6\n    \n    for correct_answers in range(questions + 1):\n        wrong_answers = questions - correct_answers\n        if (correct_answers * correct_mark + wrong_answers * wrong_mark) == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total number of buttons\n    equation1 = Eq(james + nina, 22)\n    \n    # After Nina gives James 4 buttons, they have the same amount\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the variables for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Creating the equations based on the problem\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    # Returning the cost of a mango\n    return solutions[mango]\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = (ratio_adults / total_ratio) * total_people\n\n    return adults\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # Weight of one ten-pence coin in grams\n    total_pence = 40  # Total worth in pence\n    num_coins = total_pence / 10  # Number of ten-pence coins in 40 pence\n    total_weight = weight_per_coin * num_coins  # Total weight of the coins\n\n    return total_weight\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    seat_numbers = 9\n    \n    last_seat_number = (total_candies - 1 + 3) % seat_numbers\n\n    # If last_seat_number is 0, it means the last child is the one with seat number 9\n    if last_seat_number == 0:\n        last_seat_number = seat_numbers\n\n    return last_seat_number\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    # Let r be the mass of a tennis racket and b be the mass of a tennis ball.\n    from sympy import symbols, Eq, solve\n    \n    r, b = symbols('r b')\n    # System of equations based on the given information\n    equation1 = Eq(r + 3 * b, 536)  # r + 3b = 536 g\n    equation2 = Eq(2 * r + 3 * b, 904)  # 2r + 3b = 904 g\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, b))\n    \n    # Mass of a tennis racket\n    return solutions[r]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    g = 9.8  # acceleration due to gravity in m/s^2\n    angle = 37  # angle in degrees\n    initial_speed = 10  # in m/s\n    \n    # Convert angle to radians\n    angle_radians = math.radians(angle)\n    \n    # Calculate the vertical component of the initial velocity\n    vertical_speed = initial_speed * math.sin(angle_radians)\n    \n    # Calculate the time taken to reach the highest point (vertical velocity becomes 0)\n    time_to_highest_point = vertical_speed / g\n    \n    # Calculate the height using the kinematic equation: h = v_initial * t - 1/2 * g * t^2\n    height = vertical_speed * time_to_highest_point - 0.5 * g * time_to_highest_point**2\n    \n    # Calculate the distance along the ramp using the kinematic equation\n    # (considering the horizontal component of the initial velocity)\n    horizontal_speed = initial_speed * math.cos(angle_radians)\n    distance = horizontal_speed * time_to_highest_point\n    \n    return {'height': height, 'distance': distance}\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    # Since 4 players take part in each match, and only 1 player remains,\n    # there will be 1 match for every 4 players.\n    # So to find out the number of matches until we have an overall winner,\n    # we just need to subtract 1 from the total number of players (since the winner doesn't play a match against themselves).\n\n    players = 64\n    matches = players - 1  # Since in each match we find 1 winner and 3 players are knocked out.\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Since Sheila needs 2 groups of 4 balls of the same colour,\n    # and there are 3 colours, in the worst case scenario she \n    # would pick 3 blue balls, 3 orange balls, and 2 yellow balls without completing any group of 4.\n    \n    # Worst case without completing any group:\n    # 3 blue, 3 orange, 2 yellow (total 8 balls)\n    \n    # The next ball she takes, no matter the color, will complete a group of 4 of one color.\n    # But we need to continue until we get 2 groups of 4 of the same colour.\n    \n    # After the first group of 4, in the worst case, she would now take 3 balls of one of the two remaining colours.\n    # Then she's guaranteed to get a group of 4 of another colour in the next draw.\n    \n    # So the number of balls she must take out is the sum of:\n    # 3 blue + 3 orange + 2 yellow (worst case without a group of 4) = 8 balls\n    # +1 ball to complete the first group of 4\n    # +3 balls of the second colour (worst case again)\n    # +1 ball to complete the second group of 4\n    # = 8 + 1 + 3 + 1\n    # = 13 balls\n\n    return 13\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    sum_numbers = sum(numbers)\n    return sum_numbers\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for digit1 in range(1, 10):\n        for digit2 in range(0, 10):\n            for digit3 in range(0, 10):\n                for digit4 in range(0, 10):\n                    original_number = 1000 * digit1 + 100 * digit2 + 10 * digit3 + digit4\n                    new_number = 1000 * digit2 + 100 * digit3 + 10 * digit4 + digit1\n                    if new_number - original_number == 4707:\n                        return original_number\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    flour_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / flour_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    england_cd_price = 14  # in GBP\n    exchange_rate = 1.17    # GBP to Euro as of my last knowledge update\n    st_petersburg_cd_price = 10  # in Euro\n\n    money_in_euro = england_cd_price * exchange_rate\n    num_cds = money_in_euro // st_petersburg_cd_price\n\n    return int(num_cds)\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "from sympy import isprime\n\ndef solution():\n    # Iterate through the options and check the conditions for each\n    for age in [28, 39, 52, 84]:\n        if isprime(age + 1) and ((age -3) ** 0.5).is_integer():\n            future_age = age + 12\n            future_age_cubed = round(future_age ** (1/3))\n            if future_age == future_age_cubed ** 3:\n                return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # First, calculate the common difference and the first term of the sequence.\n    # Let's denote the first term as `a` and the common difference as `d`.\n    # We have the sum of the first n terms formula: S_n = n/2 * (2a + (n-1)d)\n    # For first 9 terms: S_9 = 9/2 * (2a + 8d) = 72\n    # For first 23 terms: S_23 = 23/2 * (2a + 22d) = 736\n    \n    # From S_9, we derive 9a + 36d = 144.\n    # From S_23, we derive 23a + 253d = 1472.\n    \n    # Solving these two equations, we get:\n    a, d = symbols('a d')\n    equation1 = Eq(9 * a + 36 * d, 144)\n    equation2 = Eq(23 * a + 253 * d, 1472)\n    solution = solve((equation1, equation2), (a, d))\n    \n    # Now we have the values of a and d, we want to find the sum of first 16 terms: S_16\n    a_value = solution[a]\n    d_value = solution[d]\n    S_16 = 16 / 2 * (2 * a_value + (16 - 1) * d_value)\n    \n    return S_16\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Take all M&M's of the most numerous color (5 brown) and one more from any color. \n    # This guarantees that the next one will be of a different color.\n    return 5 + 1  # 5 brown + 1 more to ensure the next one is different\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    num_full_patterns = 43 // len(pattern)\n    remainder = 43 % len(pattern)\n\n    # Sum of digits in the full pattern\n    sum_full_pattern = sum(int(digit) for digit in pattern)\n\n    sum_total = sum_full_pattern * num_full_patterns + sum(int(digit) for digit in pattern[:remainder])\n\n    return sum_total\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    # Define the new operation according to the given definition\n    def new_operation(a, b):\n        return a * b + a + b\n    \n    # Given equation: 2 ∨ (x ∨ 4) = 59\n    # To find x, we need to solve the inner operation first\n    # x ∨ 4 = y (we'll find y in the following step)\n    \n    # Replace the result back into the equation: 2 ∨ y = 59\n    # So we solve for y: 2y + 2 + y = 59 => 3y + 2 = 59 => y = (59 - 2) / 3\n    y = (59 - 2) / 3\n    \n    # Now, we solve for x using y: x * 4 + x + 4 = y\n    # x * 4 + x + 4 = (59 - 2) / 3\n    # 5x + 4 = (59 - 2) / 3\n    # 5x = (59 - 2) / 3 - 4\n    # x = ((59 - 2) / 3 - 4) / 5\n    x = ((y - 4) / 5)\n    \n    return x\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    num_quizzes = 4\n    time_total_minutes = time_per_quiz_minutes * num_quizzes\n    time_total_hours = time_total_minutes / 60\n    return time_total_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km_to_cm = 4.7 * 100000  # Since 1 km is 100000 cm\n    return km_to_cm\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's create symbols for the rates of Andrew, Bernice, and Cassandra\n    andrew_rate, bernice_rate, cassandra_rate, andrew_position = symbols('andrew_rate bernice_rate cassandra_rate andrew_position')\n    \n    # When Andrew reaches level 5, Bernice is at level 3, which means Andrew's rate compared to Bernice's rate is: (Bernice's position / Andrew's position)\n    eq1 = Eq(andrew_rate / bernice_rate, 3 / 5)\n    \n    # When Bernice reaches level 6, Cassandra is already at level 10, which means Bernice's rate compared to Cassandra's rate is: (Cassandra's position / Bernice's position)\n    eq2 = Eq(bernice_rate / cassandra_rate, 6 / 10)\n    \n    # Assume that everyone starts at level 1. Now when Cassandra reaches level 19:\n    # Andrew's next position is what we are looking for\n    # Bernice's position can be derived from Cassandra's position and eq2\n    # Cassandra's position will be 19\n    eq3 = Eq(andrew_rate / cassandra_rate, andrew_position / 19)\n    \n    # Combine eq1 and eq3 to find out Andrew's position when Cassandra is at level 19\n    eq4 = eq1.subs(andrew_rate / bernice_rate, andrew_position / (19 * 6 / 10))\n    \n    solution = solve((eq4, eq3), (andrew_rate, andrew_position))\n    \n    return solution[andrew_position]\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n\n    while True:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n\n        if sum(grandsons_ages) == grandpa_age:\n            break\n\n    return years\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    total_amount = 40\n    for five_p in range(0, total_amount // 5 + 1):\n        for ten_p in range(0, total_amount // 10 + 1):\n            if 5 * five_p + 10 * ten_p == total_amount:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    \n    term = first_term\n    num_terms = 0\n    while term > 0:\n        term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the cost of each table and chair.\n    cost_table, cost_chair = symbols('cost_table cost_chair')\n\n    # Eq1: 4 tables and 9 chairs cost $504.\n    # Eq2: Each table costs as much as 3 chairs.\n    eq1 = Eq(4 * cost_table + 9 * cost_chair, 504)\n    eq2 = Eq(cost_table, 3 * cost_chair)\n\n    # Solve the system of equations.\n    solved_values = solve((eq1, eq2), (cost_table, cost_chair))\n\n    return solved_values[cost_chair]\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert average speeds from km/h to km/min\n    speed_shafur_km_per_min = 54 / 60\n    speed_samuel_km_per_min = 66 / 60\n    \n    # Calculate the distance each driver travelled in the first 40 minutes\n    initial_time_min = 40\n    distance_shafur_initial = speed_shafur_km_per_min * initial_time_min\n    distance_samuel_initial = speed_samuel_km_per_min * initial_time_min\n    \n    # Samuel turns back, so the total distance he needs to cover to catch up to Shafur is twice the initial distance plus the distance between the towns.\n    # They reach the destination at the same time. Let the distance between Town X and Town Y be d km.\n    # Samuel's total distance = initial distance by Samuel + 2 * initial distance by Shafur + d - initial distance by Shafur\n    # Shafur's total distance = initial distance by Shafur + d - initial distance by Shafur (since Shafur goes directly)\n    \n    # Time taken for Shafur to travel from the point they were after 40 minutes till Town Y: t_shafur = (d - distance_shafur_initial) / speed_shafur_km_per_min\n    # Time taken for Samuel to travel to Town X and back to the same point and then till Town Y: t_samuel = (2 * distance_shafur_initial + d - distance_samuel_initial) / speed_samuel_km_per_min\n    \n    # They reach at the same time, so t_samuel = t_shafur\n    # (d - distance_shafur_initial) / speed_shafur_km_per_min = (2 * distance_shafur_initial + d - distance_samuel_initial) / speed_samuel_km_per_min\n    \n    # Solving the above equation for d:\n    d = (2 * distance_shafur_initial + distance_samuel_initial) / (1 / speed_shafur_km_per_min - 1 / speed_samuel_km_per_min) + distance_shafur_initial\n    \n    return d\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(digit) for digit in str(num)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if 100 <= product <= 999:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n    num_vases = (flowers + vase_capacity - 1) // vase_capacity\n    return num_vases\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n\n    ans = morning_fruit - afternoon_fruit\n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 // 3) * 3\n    if first_multiple < 38:\n        first_multiple += 3\n\n    last_multiple = (81 // 3) * 3\n\n    num_multiples = ((last_multiple - first_multiple) // 3) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_after_february = 78\n    remaining_after_january = (remaining_after_february - 13) * 2\n    initial_phones = (remaining_after_january + 22) * 2\n    \n    return initial_phones\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud\n    equation1 = Eq(pip - bud, 50)\n\n    # After spending, Pip's leftover is 20% of his original (1 - 0.8) and Bud's is 25% (1 - 3/4)\n    # The ratio of Pip's leftover to Bud's is 6:5\n    equation2 = Eq((pip * 0.2) / (bud * 0.25), 6 / 5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the sequence from 3 to 10, which is an arithmetic series\n    n1 = 10 - 3 + 1  # Number of terms from 3 to 10\n    sum_to_10 = n1 * (3 + 10) // 2  # Sum of the arithmetic series from 3 to 10\n\n    # Calculate the sum of the sequence from 3 to 6, which is an arithmetic series\n    n2 = 6 - 3 + 1  # Number of terms from 3 to 6\n    sum_to_6 = n2 * (3 + 6) // 2  # Sum of the arithmetic series from 3 to 6\n\n    # Since the sequence is symmetric around the highest number 10,\n    # the sum of the entire sequence is twice the sum from 3 to 10 minus the sum from 3 to 6\n    total_sum = 2 * sum_to_10 - sum_to_6\n\n    return total_sum\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Expression 1: 7 ÷ -3.3repeating is -2.1 (since -3.3 repeating is -10/3)\n    expr1_numerator = 7 / (-10 / 3)\n    expr1_denominator = (-0.027) ** (1/3) # cube root of -0.027 is -0.3\n\n    # Expression 2: 2^3 ÷ 4^2 is 8 / 16 which is 0.5\n    expr2_numerator = 2**3 / 4**2\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7)) # which is 0.125 * 0.4\n\n    # Expression 3: 0.1 / 0.142857 repeating is 0.1 / (1/7) which is 0.7\n    expr3 = 0.1 / (1/7) + (2 * 0.3) # which is 0.7 + 0.6\n\n    # Calculate the expression by combining the three parts\n    ans = (expr1_numerator / expr1_denominator) + \\\n          (expr2_numerator / expr2_denominator) - \\\n          expr3\n\n    return ans\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    number_of_players = 5\n    games_played = number_of_players - 1  # In a knockout tournament, each game eliminates one player until a winner is determined\n    return games_played\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n    \n    # let pencils = x, then pens = x + 50\n    # x + (x + 50) = 438\n    pencils = (total_items - more_pens) // 2\n\n    return pencils\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n    \n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_red_packets = 4\n    amount_short = 15\n    desired_amount_per_packet = 70\n\n    total_amount = (desired_amount_per_packet * total_red_packets) - amount_short\n\n    return total_amount\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    participants = 5\n    # One game played for each match, number of matches = number of participants - 1\n    num_games = participants - 1\n    return num_games\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of marbles Anna had at first,\n    # y be the number of marbles Betsy had at first,\n    # z be the number of marbles Charlene had at first.\n    x, y, z = symbols('x y z')\n    \n    # Given Anna and Betsy's final ratio of marbles is 2:5, we have:\n    equation1 = Eq(x + 8, 2*(y - 8 - 15))\n    \n    # Given Anna and Charlene's final ratio of marbles is 2:7, we have:\n    equation2 = Eq(x + 8, 2*(z - 15))\n    \n    # Given Betsy and Charlene's final ratio of marbles is 5:7, we have:\n    equation3 = Eq(y - 8, 5/7*(z - 15))\n    \n    # Given the total number of marbles initially was 168, we have:\n    equation4 = Eq(x + y + z, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, z))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Chris's position determines the number of rows and columns in the field\n    rows = 7 + 4 - 1\n    columns = 3 + 7 - 1\n\n    # Total number of students is the number of rows times the number of columns\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80 / 100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, the combined age of 2 dogs was 10.\n    combined_age_4_years_ago = 10\n    \n    # Since both dogs are 4 years older now, we add 4 years to each dog's age,\n    # which adds 8 years to the combined age.\n    current_combined_age = combined_age_4_years_ago + 2 * 4\n    \n    # In 2 years, both dogs will be 2 years older,\n    # so we add 2 years to each dog's age,\n    # which adds 4 years to the current combined age.\n    future_combined_age = current_combined_age + 2 * 2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8 \n    twelfth_term = 140\n    n = 12\n\n    common_difference = (twelfth_term - first_term) / (n - 1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 2016\n    factors_dict = factorint(2016)\n\n    # Flattening the factors into a list where each prime factor is repeated\n    # according to its power in the prime factorization\n    factors_list = []\n    for factor, power in factors_dict.items():\n        factors_list.extend([factor] * power)\n\n    # Since the children are of different ages and all under 10, we can try to group the factors\n    # into four groups, each group corresponding to an age, such that the product of factors in each\n    # group gives us an age under 10 and all ages are different.\n    # Prime factorization of 2016 is 2^5 * 3^2 * 7, so we can create the ages as follows:\n    # 2^3 * 3^0 * 7^0 = 8, 2^2 * 3^1 * 7^0 = 12 (not valid, as age must be under 10),\n    # so we must combine 3 with a 2 giving us 2^1 * 3^1 * 7^0 = 6 and 2^0 * 3^1 * 7^1 = 21 (not valid,\n    # as age must be under 10). Thus, we further break down 6 into 2 * 3.\n    # Now we have four ages: 8, 2, 3, 7 which are all under 10 and the product is 2016.\n\n    ages = [8, 2, 3, 7]\n\n    # Sum the ages\n    sum_of_ages = sum(ages)\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols - number of coins for 5p, 10p, and 20p\n    n5p, n10p, n20p = symbols('n5p n10p n20p')\n\n    # Define the equations based on the given relationships\n    equation1 = Eq(n20p, 2 * n10p)  # twice as many 20p coins as 10p coins\n    equation2 = Eq(n5p, n10p / 2)   # half as many 5p coins as 10p coins\n    # Total value equation converted to pence: 5*n5p + 10*n10p + 20*n20p = 1575p\n    equation3 = Eq(5 * n5p + 10 * n10p + 20 * n20p, 1575)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (n5p, n10p, n20p))\n\n    return solutions[n20p]\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the number of boys and g represent the number of girls\n    b, g = symbols('b g')\n    \n    # Each boy has as many sisters as brothers => sisters (g) = brothers (b - 1)\n    # Each girl has half as many sisters as brothers => sisters (g - 1) = 1/2 brothers (b)\n    equation1 = Eq(g, b - 1)\n    equation2 = Eq(g - 1, b / 2)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Total number of children in the family (boys + girls)\n    total_children = solutions[b] + solutions[g]\n    \n    return total_children\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3/5)\n    remaining_grams = 60\n    original_mass = remaining_grams / remaining_fraction\n\n    return original_mass\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Distance = Speed * Time\n    # Distance covered in the first 30 minutes (0.5 hours)\n    distance_first_30 = x * 0.5\n    # Distance covered in the second 30 minutes (0.5 hours)\n    distance_second_30 = (x - 20) * 0.5\n    # Distance covered in the last 30 minutes (0.5 hours)\n    distance_last_30 = (x + 10) * 0.5\n    \n    # Total distance covered in 90 minutes must equal 70 miles\n    equation = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Retrieve the solution (assuming only one solution)\n    return solution[0]\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6  # Derived from the difference between terms given (11-5 or 17-11)\n\n    # Calculate the total number of terms in the sequence\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number //= 6\n        base_6_number = str(remainder) + base_6_number\n\n    return base_6_number\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost = 6 * 5.50\n    tip = total_cost * 0.10\n    total_payment = total_cost + tip\n    change = 50 - total_payment\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    climb = 4\n    slide = 2\n    day = 0\n    current_height = 0\n\n    while current_height < depth:\n        day += 1\n        current_height += climb\n        if current_height >= depth:\n            break\n        current_height -= slide\n\n    return day\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # There are 5 children, so let's start by giving 1 apple to each child.\n    apples_distributed = 5\n    # Remaining apples to be distributed so that each child gets a different number.\n    remaining_apples = 27 - apples_distributed\n\n    # We will now distribute the remaining apples one by one to each child,\n    # starting from the child who received only 1 apple initially.\n    # This way we ensure that before the last child,\n    # no two children have the same number of apples.\n\n    # The maximum number of apples a child can get before the last one\n    # is the number a previous child has plus at least one.\n    # So the distribution before the last child will look like 1, 2, 3, 4,...\n    number_of_children = 5\n    max_apples_before_last_child = 1\n\n    # Distribute the remaining apples from the second child to the second-last child.\n    for child in range(2, number_of_children):\n        max_apples_before_last_child += 1 # Ensure no child has the same number of apples\n        remaining_apples -= 1 # Distribute one more apple to this child\n\n    # The child who gets the most will be the last one, so he gets all the remaining apples.\n    max_apples_last_child = max_apples_before_last_child + remaining_apples\n\n    return max_apples_last_child\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    n = 1\n    while True:\n        total = 5 * n * (n + 1) // 2  # sum of arithmetic series formula: n/2 * (first term + last term)\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Since the one who takes out the last marble loses\n    # The winner will want to force the opponent in a situation\n    # where only 4 marbles are left on the winner's turn.\n    # At that point, the winner can take 3, 2, or 1 marble(s)\n    # and leave the loser with the last marble.\n\n    # We need to think in terms of multiples or remainders of 4\n    # If you leave a multiple of 4 for your opponent, no matter if they take\n    # 1, 2, or 3 marbles, you can always take enough to make it back \n    # to a multiple of 4 on their turn.\n    \n    # Start from 26 and subtract multiples of 4 until you are in the range of 1-3\n    # This will be the amount Jason wants to take first to ensure a winning strategy.\n    marbles = 26\n    while marbles > 4:\n        marbles -= 4\n\n    # The remainder is how much Jason should take in the first turn.\n    return marbles\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    full_number = (three_sevenths * 7) / 3\n    five_sixths = (full_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # None of the three bars have observed the alcoholic, meaning the probability\n    # that the alcoholic is not at the first two bars.\n    prob_not_at_first_two_bars = 0.9 * 0.9\n    \n    # Since we know that the alcoholic is not at two of the bars, the probability\n    # that he is at the third bar is 100% given the condition described.\n    # Thus, the required probability is the same as the probability\n    # that he isn't at the first two bars.\n    return prob_not_at_first_two_bars\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)\n    days_worked = 21  # 3 weeks\n\n    end_date = start_date + timedelta(days=days_worked - 1)  # Subtract 1 since start day is included\n\n    ans = end_date.strftime('%Y-%m-%d')\n    return ans\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let R be the rate at which the pasture grows per week\n    # Let C be the amount of grass the pasture can sustain per week for one cow\n    # We have two equations based on the given information:\n    # 120 cows * 12 weeks = R * 12 + C * 120\n    # 150 cows * 8 weeks = R * 8 + C * 150\n\n    # From these two equations, we can solve for R and C\n    R, C = symbols('R C')\n\n    equation1 = Eq(R * 12 + C * 120, 120 * 12)  # pasture growth for 120 cows over 12 weeks\n    equation2 = Eq(R * 8 + C * 150, 150 * 8)    # pasture growth for 150 cows over 8 weeks\n\n    solutions = solve((equation1, equation2), (R, C))\n\n    # Now that we have R and C, we can calculate for 6 weeks\n    # Let X be the number of cows the pasture can sustain for 6 weeks\n    # We have the equation:\n    # X cows * 6 weeks = R * 6 + C * X\n\n    X = symbols('X')\n    equation3 = Eq(R * 6 + C * X, X * 6)\n\n    # Substitute R and C values in the third equation\n    X_solution = solve(equation3.subs(solutions), X)\n\n    return X_solution[X]\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    for x1 in range(1, 25):\n        for x2 in range(1, 25):\n            for x3 in range(1, 25):\n                for x4 in range(1, 25):\n                    for x5 in range(1, 25):\n                        for x6 in range(1, 25):\n                            for x7 in range(1, 25):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25 and len(set([x1, x2, x3, x4, x5, x6, x7])) == 7:\n                                    ways.append(sorted([x1, x2, x3, x4, x5, x6, x7]))\n    unique_ways = set(tuple(way) for way in ways)\n    return sorted(unique_ways)\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers = symbols('volunteers')\n    equation1 = Eq(4 * volunteers + 5, 7 * (volunteers - 1))\n\n    num_volunteers = solve(equation1, volunteers)\n\n    num_trees = 4 * num_volunteers[0] + 5\n\n    return (num_volunteers[0], num_trees)\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    eq1 = Eq(3 * pencil + 2 * marker, 13)\n    eq2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((eq1, eq2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers in Bag A and Bag B\n    stickers_a, stickers_b = symbols('stickers_a stickers_b')\n\n    # Equation for the total number of stickers\n    total_stickers_eq = Eq(stickers_a + stickers_b, 270)\n\n    # Equation after moving 56 stickers from A to B\n    moved_stickers_eq = Eq(stickers_b + 56, (3/2) * (stickers_a - 56))\n\n    # Solve the system of equations\n    solutions = solve((total_stickers_eq, moved_stickers_eq), (stickers_a, stickers_b))\n\n    return solutions[stickers_a]\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Assume the side length of the boys' square is b and the girls' square is g.\n    # The side length of the boys' square is always one more than the girls' due\n    # to the way they are arranged (boys, girls, boys, girls, ...)\n    # Therefore, we have the following relation:\n    # b^2 - (b - 1)^2 = 55\n    # b^2 - (b^2 - 2b + 1) = 55\n    # 2b - 1 = 55\n    # 2b = 56\n    # b = 28\n\n    # We found that the boys' side length is 28, so the number of boys is 28^2.\n    boys = 28 ** 2\n\n    # The girls' side length is one less, so their number is 27^2.\n    girls = 27 ** 2\n\n    # The total number of students is the sum of boys and girls.\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given ratio 10:x = 14:21, solve for x\n    # Cross multiply to solve for x\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    last_term = 41\n    difference = 6\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = (children + bars_per_packet - 1) // bars_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 180 * 0.05\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        sum = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum += i\n                if i != n // i:\n                    sum += n // i\n        return sum\n \n    for i in range(2, 10000):  # We can assume the smallest perfect number is not too large\n        if sum_of_factors(i) == i:\n            return i\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 30 - 28 + 26 - 24 + 22 - 20 + 18 - 16 + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25\n    first_term = nth_value - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    kept_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - kept_for_sister) // number_of_friends\n    return sweets_for_friends\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    # Let x be the total amount of money Irene had at first\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    # The cost of the book is 1/4 of the total money\n    book_cost = (1/4) * x\n    \n    # The cost of the bag is 2/7 of the total money\n    bag_cost = (2/7) * x\n    \n    # The total cost of the book and bag is 225\n    equation = Eq(book_cost + bag_cost, 225)\n    \n    # Solve for x\n    total_money = solve(equation, x)[0]\n\n    return total_money\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    return 30 // 2\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # maximum number a person can choose without certainly getting 10 of same colour\n    max_without_10_same = (10 - 1) * 4\n    \n    # at least one more to guarantee 10 of the same colour\n    min_to_get_10_same = max_without_10_same + 1\n\n    return min_to_get_10_same\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    Lovelle, Makayla = symbols('Lovelle Makayla')\n    \n    # Lovelle and Makayla had $3998 muffins altogether\n    eq1 = Eq(Lovelle + Makayla, 3998)\n    \n    # After Lovelle sold $462 muffins and Makayla sold 2/5 of her muffins, they had equal muffins left\n    eq2 = Eq(Lovelle - 462, Makayla - (2/5) * Makayla)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (Lovelle, Makayla))\n\n    return solutions[Lovelle]\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_gaps = 8 - 1  # Number of gaps is one less than the number of daffodils\n    gap_length = 1.1  # Length of each gap in metres\n    total_length = (number_of_gaps * gap_length) + 1  # Plus one daffodil at each end\n\n    return total_length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, jane = symbols('alex jane')\n    \n    equation1 = Eq(alex, jane * 1.5)\n    equation2 = Eq(alex + jane, 150)\n    \n    solutions = solve((equation1, equation2), (alex, jane))\n    \n    return solutions[alex]\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    time = distance / speed\n    return int(time)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    # Total number of students\n    total_students = 5 + 7\n    \n    # Number of girls and boys\n    num_girls = 5\n    num_boys = 7\n    \n    # Compute ways to choose 4 students without any restriction\n    total_ways = comb(total_students, 4)\n    \n    # Compute ways to choose 4 students with no boys (all girls) - this is not allowed\n    all_girls_ways = comb(num_girls, 4)\n    \n    # Subtract the number of all-girl groups from the total\n    ways_with_boys = total_ways - all_girls_ways\n    \n    return ways_with_boys\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    missing_number = (1/4 * 16) / (1/2)\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    total_friends = 6\n\n    fruits_per_friend = (total_pears + total_strawberries + total_chocolates) // total_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Cost of the bag represents 2/5 of the remaining money after buying the book\n    bag_cost = 60\n    remaining_after_book = bag_cost * (5/2)\n\n    # The remaining after buying the book is 3/4 of the initial money\n    initial_money = remaining_after_book * (4/3)\n\n    return initial_money\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    # Since the boxes are identical, the order in which the stickers are placed does not matter.\n    # What matters is the distribution of the stickers into the three boxes with each box having a unique count.\n    # The possible distributions of 9 distinct stickers into 3 identical boxes where each box has a unique number of stickers are:\n    # (1, 2, 6), (1, 3, 5) - There are no other combinations that satisfy the condition.\n    # For each of these distributions:\n    # The number of ways to distribute 'a' stickers in the first box, 'b' stickers in the second box, and 'c' stickers in the third box\n    # when the boxes are identical is given by the Multinomial Coefficient: 9! / (a! * b! * c!)\n\n    from math import factorial as fact\n\n    # First distribution: (1, 2, 6)\n    first_distribution = fact(9) // (fact(1) * fact(2) * fact(6))\n    # Second distribution: (1, 3, 5)\n    second_distribution = fact(9) // (fact(1) * fact(3) * fact(5))\n    \n    # Add up the number of ways for each distribution to get the final number of ways\n    total_ways = first_distribution + second_distribution\n\n    return total_ways\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    pages = 0\n    digits_used = 0\n\n    # Now we calculate the number of digits that would be used if the book had exactly 'pages' pages.\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n\n    # Since we exceeded the total_digits while adding the last page's digits,\n    # we need to subtract that last increment to pages to get the correct page count.\n    return pages - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    return (70 / 7 - 7) * 13\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Number of spaces between the peach trees\n    num_spaces = 41 - 1\n    # Total length of the road\n    total_length = num_spaces * 3\n    # Number of spaces between the lamp posts\n    lamp_post_spaces = total_length // 8\n    # Number of lamp posts is one more than number of spaces\n    num_lamp_posts = lamp_post_spaces + 1\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 1000):  # Iterate through all possible unit prices\n        total_price = unit_price * 72  # Calculate the total price for 72 units\n        str_price = str(total_price)\n        if len(str_price) == 6 and str_price[1:4] == '679' and str_price[-1] != ' ':  # Check if it matches the format\n            return unit_price\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a and b be the number of students in class A and class B respectively.\n    # Let c be the number of candies Miss Jenny has.\n    a, b, c = symbols('a b c')\n    \n    # If each student in class A get 4 candies, 20 more candies are needed.\n    # This means: 4*a + 20 = c\n    equation1 = Eq(4*a + 20, c)\n    \n    # If each student in class B get 6 candies, there will be 16 candies left.\n    # This means: 6*b = c - 16\n    equation2 = Eq(6*b, c - 16)\n    \n    # It is known that the number of students in class A is twice of class B.\n    # This means: a = 2*b\n    equation3 = Eq(a, 2*b)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # The number of candies Miss Jenny has.\n    return solutions[c]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360\n    speed = 40\n    time = train_length / speed\n    return time\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for number in range(10, 100):  # All 2-digit numbers range from 10 to 99\n        if (number // 10 + number % 10) % 5 == 0:  # Sum of digits should be a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    dvd_cost = total_savings / 3\n    remaining_after_dvd = total_savings - dvd_cost\n    book_cost = 0.25 * remaining_after_dvd\n    remaining_after_book = remaining_after_dvd - book_cost\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits = 32\n    for year in range(3):\n        rabbits *= 3  # Rabbits multiply by 3 each year\n        rabbits -= rabbits // 2  # Wolves eat half the rabbits\n    return rabbits\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    car_wash_payment = 1.40\n    desired_amount = 12\n    number_of_washes = desired_amount // car_wash_payment + 1\n    return int(number_of_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    base = 2\n    exponent = 4 - 1  # Starting from 0, so subtract 1 for the correct day\n    candies_eaten = base ** exponent\n    return candies_eaten\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_for_first_mile = 1 / 60  # Time taken to travel first mile at 60 mph\n    time_for_second_mile = 1 / 30  # Time taken to travel second mile at 30 mph\n\n    total_time = time_for_first_mile + time_for_second_mile  # Total time taken for both miles\n    total_distance = 2  # Total distance traveled is 2 miles\n\n    average_speed = total_distance / total_time  # Average speed in miles per hour\n\n    return average_speed\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    # The equations to solve\n    eq1 = Eq(290 % a, a)\n    eq2 = Eq(235 % a, a + 2)\n    eq3 = Eq(200 % a, a + 5)\n\n    # Use sympy's solve to find the possible values of a\n    possible_a_values = solve((eq1, eq2, eq3), a)\n\n    # Find the maximum possible value of a, which is the natural number we seek\n    natural_number = max([int(val) for val in possible_a_values if val > 1])\n    \n    return natural_number\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_earnings_per_day = 70\n    days_worked_in_week = 6\n    total_earnings = average_earnings_per_day * days_worked_in_week\n    return total_earnings\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for i in range(10):\n        for s in range(10):\n            for p in range(1, 10):  # P cannot be 0 as it is the first digit\n                is_val = int(f\"{i}{s}\")\n                pi_val = int(f\"{p}{i}\")\n                if 4 * is_val == pi_val and len(set([i, s, p])) == 3:\n                    return pi_val\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    num_members = 9\n    middle_member = (total_sum // num_members)\n    \n    return middle_member\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the smaller angle\n    x = symbols('x')\n    \n    # The other angle is twice as large\n    equation = Eq(x + 2*x, 90)  # The sum of angles in a triangle is 180, but there is a right angle (90 degrees).\n    \n    # Solve for the smaller angle x\n    smaller_angle = solve(equation, x)[0]\n    \n    # The larger angle is twice the size of the smaller angle\n    larger_angle = 2 * smaller_angle\n    \n    return larger_angle\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    # Total sunshine hours from Monday to Saturday\n    total_sunshine_mon_to_sat = 3 * 6  # 3 hours/day * 6 days\n    # Sunshine hours on Sunday\n    sunshine_sunday = 10\n    # Total sunshine hours for the whole week\n    total_sunshine_week = total_sunshine_mon_to_sat + sunshine_sunday\n    # Average sunshine hours for the whole week (7 days)\n    average_sunshine = total_sunshine_week / 7\n\n    return average_sunshine\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n    walking_time_to_school = 24  # min\n    total_distance = walking_speed * walking_time_to_school  # m\n    half_distance = total_distance / 2\n    walking_time_for_half = half_distance / walking_speed\n    running_time_for_half = half_distance / running_speed\n    total_time = walking_time_for_half + running_time_for_half\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    road_length = 320\n    # Since there are no trees in front of the house or the school, we consider 78 intervals\n    num_intervals = total_trees - 1\n    \n    distance_between_each_tree = road_length / num_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable 'savings' represent Kim's original savings\n    savings = symbols('savings')\n\n    # The amount Kim gave her mother: 1/3 of her savings\n    mother_part = savings / 3\n\n    # Kim's total expenditure\n    expenditures = 177 + 129\n\n    # Amount left after giving mother and buying items\n    amount_left = savings - mother_part - expenditures\n\n    # The Money left is also half of what she gave her mother\n    equation = Eq(amount_left, mother_part / 2)\n\n    # Solving for 'savings'\n    solved_savings = solve(equation, savings)\n\n    return solved_savings[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # The problem of dividing n identical items into k identical boxes\n    # is equivalent to the problem of finding the number of solutions\n    # to the equation x1 + x2 + x3 = 6, where xi represents the number of\n    # items in box i and xi can be 0.\n    # This problem can be solved through generating functions or the stars and bars\n    # theorem (the number of ways to put n identical objects into k distinct boxes).\n    \n    # Using stars and bars theorem, we have n+k-1 C k-1 ways to achieve the distribution.\n    n = 6 # number of apples\n    k = 3 # number of baskets\n    ans = math.comb(n+k-1, k-1)\n    return ans\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    piece_length = 15\n    leftover = total_length % piece_length\n    return leftover\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    # Using the Number of Handshake Problem formula: n*(n-1)/2\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    N_values = [i for i in range(1, 2018) if 2018 % i == 11]\n    return sum(N_values)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    daily_skirts_per_worker = 6\n    total_days = 9\n    total_skirts = 0\n    \n    for day in range(1, total_days + 1):\n        total_skirts += day * daily_skirts_per_worker\n\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    start = 11  # Sequence start\n    step = 3    # Difference between terms\n    ans = []    # List to hold numbers also in sequence\n\n    # Iterate from 30 to 60, inclusive, incrementing by step\n    for num in range(30, 61, step):\n        if (num - start) % step == 0:\n            ans.append(num)\n\n    return ans\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    digit_count = 0\n    num = 1\n\n    while digit_count < 2023:\n        num_digits = len(str(num))\n        if digit_count + num_digits >= 2023:\n            return int(str(num)[2023 - digit_count - 1])\n        digit_count += num_digits\n        num += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Class size is total sweets divided by minimum sweets per student.\n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for prices of apple and banana\n    apple, banana = symbols('apple banana')\n\n    # construct the system of equations based on the given information\n    eq1 = Eq(3 * apple + 2 * banana, 1.25)\n    eq2 = Eq(apple + banana, 0.48)\n\n    # solve the system of equations\n    sol = solve((eq1, eq2), (apple, banana))\n    \n    # calculate the cost to buy 5 bananas using the solved price for banana\n    cost_5_bananas = 5 * sol[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    total_score = 66\n    unanswered_questions = 1\n    \n    # Let's denote the number of correct answers as c.\n    # The total score can be calculated as 4c - 2(i) = 66,\n    # where i is the number of incorrect answers\n    # Since he answered all but one question, we know that c + i = 24\n    \n    for c in range(total_questions):\n        i = total_questions - 1 - c  # Subtract 1 to account for the unanswered question\n        if score_correct * c + score_incorrect * i == total_score:\n            return c\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare T as a symbol\n    T = symbols('T')\n\n    # Calculate the taxed amount for the first $50,000\n    tax_for_first_50k = 0.08 * 50000\n\n    # Create an equation representing the rest of the income taxed at (8 + T)%\n    income_above_50k = 150000 - 50000\n    tax_for_rest = (0.08 + T / 100) * income_above_50k\n\n    # The total tax paid is the sum of both parts, which is $15,000\n    equation = Eq(tax_for_first_50k + tax_for_rest, 15000)\n\n    # Find T\n    T_value = solve(equation, T)[0]\n    \n    return T_value\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    min_boys_per_day = total_boys // days_in_january\n    remainder = total_boys % days_in_january\n\n    if remainder > 0:\n        min_boys_per_day += 1\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they will have the same amount.\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If they both eat 8 candies, Rachel has 3 times as many pieces as Alice.\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Total pieces of candy originally.\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4 * (31 - 1)\n    total_spaces = 5 * (31 + 1)\n    \n    total_length = first_car_length + other_cars_length + total_spaces\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    term7 = 105\n    term8 = 120\n    term9 = 135\n    \n    common_difference = term8 - term7  # Find the common difference\n    \n    first_term = term7 - 6 * common_difference  # Calculate the first term\n\n    term100 = first_term + (100 - 1) * common_difference  # Find the 100th term\n\n    return term100\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # For a three-digit number, we cannot have 0 at the hundreds place. So, we have two choices for the first digit (2, 3).\n    # For the second digit, we can have all the three numbers (0, 2, 3) as repetition is allowed.\n    # For the third digit, we again have all the three numbers (0, 2, 3) as repetition is allowed.\n    # Therefore, the total number of different three-digit numbers is 2 (for the first digit) * 3 (for the second digit) * 3 (for the third digit).\n    \n    return 2 * 3 * 3\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    remaining_chocolates = total_chocolates - chocolates_given_away\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations([0, 3, 5, 8], 4):\n        if perm[0] != 0 and perm[0] >= 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDEFG'):\n        p = ''.join(p)\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C'):\n            if 'DE' in p or 'ED' in p:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 / 4\n    return int(ans)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    last_week_length = current_length / (1 + growth_rate)\n    return last_week_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Ratio parts for Sue, Sarah, and Ian respectively\n    ratio_sue = 2\n    ratio_sarah = 3\n    ratio_ian = 5\n\n    # Total ratio parts\n    total_ratio = ratio_sue + ratio_sarah + ratio_ian\n\n    # Given that Sarah received 12 sweets\n    sweets_sarah = 12\n\n    # Calculating the number of sweets per ratio part\n    sweets_per_ratio = sweets_sarah / ratio_sarah\n\n    # Total number of sweets\n    total_sweets = sweets_per_ratio * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuit_cost_p = 73\n    cake_cost_p = 113\n\n    total_biscuits_cost_p = biscuit_cost_p * 7\n    total_cakes_cost_p = cake_cost_p * 9\n\n    total_cost_p = total_biscuits_cost_p + total_cakes_cost_p\n\n    note_value_p = 2000  # 20 pounds in pence\n    change_p = note_value_p - total_cost_p\n\n    return change_p / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    \n    total_apples = piles * apples_per_pile\n    \n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    \n    total_combinations = tops * bottoms\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Benson finished lunch\n    time_finished_lunch = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # Total time spent before lunch\n    total_minutes_before_lunch = 10 + 20 + 20  # play, TV, and lunch\n\n    # Time when Benson reached home\n    time_reached_home = time_finished_lunch - timedelta(minutes=total_minutes_before_lunch)\n\n    # Format the time to required output as string\n    return time_reached_home.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leaving_time = arrival_time + duration\n    return leaving_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '2017'\n    three_digit_numbers = set(permutations(digits, 3))\n    four_digit_numbers = set(permutations(digits, 4))\n\n    # Remove combinations that start with '0' for three-digit numbers\n    three_digit_numbers = {num for num in three_digit_numbers if num[0] != '0'}\n\n    return len(three_digit_numbers) + len(four_digit_numbers)\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' be the number of Peter's stickers at first\n    p = symbols('p')\n\n    # Sam had 40 more stickers than Peter at first\n    s = p + 40\n\n    # Sam gave 20% of his stickers to Peter, so he will have 80% left\n    # Peter gave 25% of his stickers (after receiving from Sam) to Sam,\n    # So Peter will have 100 - 25% of the stickers he owned after Sam gave him 20% of his stickers\n    # Sam now has his 80% stickers + the 25% of stickers Peter gave him\n\n    # Equation representing the final number of stickers for Sam and Peter\n    final_s = (s * 0.8) + (p + s * 0.2) * 0.25\n    final_p = (p + s * 0.2) * 0.75\n\n    # Sam had 96 more stickers than Peter in the end\n    equation = Eq(final_s - final_p, 96)\n\n    # Solve for Peter's initial number of stickers\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    x = 1\n    while True:\n        if all(\n            x % 3 == 2,\n            x % 4 == 2,\n            x % 5 == 2,\n            x % 7 == 1\n        ):\n            return x\n        x += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    whole_number = 6\n    fraction = 1 / 2\n    divisor = 1 / 2\n\n    result = (whole_number + fraction) / divisor\n\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    difference = 3\n    num_terms = 14\n\n    last_term = first_term + (num_terms - 1) * difference\n    seq_sum = (num_terms * (first_term + last_term)) // 2\n\n    return seq_sum\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    pages = 0\n    nines = 0\n    while nines < 181:\n        pages += 1\n        nines += str(pages).count('9')\n    return pages - 1  # Subtract 1 because we increment before checking\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    eq = Eq((initial_crystals / 2) + 10 - 14 + 20, 35)\n    solutions = solve(eq, initial_crystals)\n    \n    return solutions[0]\n    \nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    sorted_numbers = sorted(numbers, reverse=True)\n    largest_number = int(''.join(map(str, sorted_numbers[:3])))\n    smallest_number = int(str(sorted_numbers[-1]) + ''.join(map(str, sorted_numbers[2:0:-1])))\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # Finding the greatest common divisor (GCD) for the three classes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    # The number of students each group will have is the GCD of the three class sizes\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = '1234'\n    # Generate all permutations of the four digits\n    permut = permutations(all_digits)\n    count = 0\n    for p in permut:\n        # Check if the last digit (unit place) is even for the number to be even\n        if int(p[-1]) % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_pattern = 2\n    total_pattern = 1 + 2 + 2  # black + white + grey\n\n    # Given there are 14 grey rabbits, we find out how many patterns are completed\n    full_patterns = 14 // grey_pattern\n\n    # Calculate the minimum number of rabbits based on full patterns\n    min_rabbits = full_patterns * total_pattern\n\n    # Check if there are any remaining grey rabbits that don't complete a pattern\n    remaining_grey_rabbits = 14 % grey_pattern\n\n    # If there are remaining grey rabbits, add another full pattern to the minimum rabbits\n    if remaining_grey_rabbits > 0:\n        min_rabbits += total_pattern\n\n    return min_rabbits\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    count = 0\n    for i in range(1, 181):\n        if 180 % i == 0 and i % 9 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable u\n    u = symbols('u')\n\n    # Define the equation 340 - 2u = 5u - 220\n    equation = Eq(340 - 2 * u, 5 * u - 220)\n\n    # Solve the equation for u\n    solution = solve(equation, u)\n\n    # Return the value of u\n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = int(f\"26{a}539\")\n        if number % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + interest_rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    \n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n\n    total_cost = price_per_box * number_of_boxes\n\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds_to_pence = 200\n    single_sweet_price = 12\n    three_sweet_deal = 30\n\n    # First, calculate how many three sweet deals can be bought with £2\n    deals = pounds_to_pence // three_sweet_deal\n    remaining_pence = pounds_to_pence % three_sweet_deal\n\n    # Next, calculate how many additional sweets can be bought with the remaining pence\n    additional_sweets = remaining_pence // single_sweet_price\n\n    # Calculate the total number of sweets\n    total_sweets = (deals * 3) + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age_future = 10\n    kenny_age_difference = 2\n    times_factor = 3\n    \n    # Age difference between the sum of Kenny's and his brother's age when May is 10\n    total_age_future = times_factor * may_age_future\n    \n    # The individual future age of Kenny's younger brother\n    younger_brother_age_future = (total_age_future - kenny_age_difference) / 2\n    \n    # Kenny's age when May is 10 years old\n    kenny_age_future = younger_brother_age_future + kenny_age_difference\n    \n    # Calculate the current age of Kenny's younger brother\n    younger_brother_age_now = younger_brother_age_future - (may_age_future - 7)\n    \n    # Since May is currently 7 and we know the future age of Kenny's younger brother, we can find Kenny's age now\n    kenny_age_now = younger_brother_age_now + kenny_age_difference\n    \n    # The age difference between Kenny and May now\n    age_difference = kenny_age_now - 7\n    \n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n\n    # This is a problem of distributing n identical items to r distinct groups\n    # with at least one item in each group. It can be solved using combinations\n    # with repetitions, also known as \"stars and bars\".\n    # General formula for n identical items into r distinct groups is:\n    # C(n - 1, r - 1)\n\n    n = 10  # identical balls\n    r = 7   # different boxes\n    # Since at least one ball in each box, we distribute one to each first\n    # Then we distribute the remaining balls (n - r) to r boxes\n    ways = comb(n - 1, r - 1)\n    return ways\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # Winning positions are when the remaining candies are 1, 2, 5, 6, 9...\n    # These positions occur every 4 candies (because 3 and 4 can be eaten in one go)\n\n    # Total candies is 10, which is a losing position.\n    # To win, Felix must force John into a losing position. \n    # If Felix eats 1 candy, 9 are left (a winning position for John).\n    # If Felix eats 2 candies, 8 are left (a losing position for Felix).\n    # Therefore, Felix should let John go first.\n    \n    # Felix's strategy is to always bring John to the next losing position:\n    # After any move by John, the number of candies left must be 1, 2, 5, 6, 9...\n    \n    # If John starts and Felix follows this strategy, Felix will always win.\n    \n    # Return who should start (0 for Felix, 1 for John) and the winning strategy sequence.\n    # Since Felix should let John start, John is 1. And the winning strategy sequence\n    # would be [1, 2, 5, 6, 9] (e.g., if John leaves 3 candies, Felix takes 1 to\n    # leave 2 which is a losing position for John, and so on).\n    winning_start = 1\n    strategy_sequence = [1, 2, 5, 6, 9]\n    return winning_start, strategy_sequence\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the capacity of the tank in liters\n    # If Mr Nelson uses a 5-litre pail, 4 litres overflow, so we have the equation x + 4 = 5n, where n is the number of 5-litre pails\n    # If he uses a 3-litre pail, he needs 4 more pails, so we have x = 3(m + 4), where m is the number of 3-litre pails used\n    # Now we need to find a common x that satisfies both conditions\n\n    # The tank's total capacity must be a multiple of 3 to be filled exactly with 3-litre pails\n    # Also, when filled with 5-litre pails, it must leave a remainder of 1 litre when divided by 5 (since 4 litres overflow)\n    # We start with 4 (since he needs at least 1 3-litre pail) and check multiples of 3 until we find one that satisfies both conditions\n    \n    x = 4\n    while True:\n        if (x + 4) % 5 == 0:\n            break\n        x += 3\n\n    return x\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1  # add one extra pipe if there's a remainder\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count, pages, digit = 0, 0, '3'\n    \n    while count < 28:\n        pages += 1\n        count += str(pages).count(digit)\n        \n    return pages\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount / 2 - coin):\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    total_numbers = 2016\n    multiples_of_two = total_numbers // 2\n    multiples_of_three = total_numbers // 3\n    multiples_of_four = total_numbers // 4\n    multiples_of_two_and_three = total_numbers // 6\n    multiples_of_two_and_four = total_numbers // 4\n    multiples_of_three_and_four = total_numbers // 12\n    multiples_of_two_three_four = total_numbers // 12\n\n    # Moritz underlines twice means we need to find numbers underlined for exactly two different multiples, i.e., (2&3), (2&4), or (3&4)\n    # However, as all multiples of 4 are also multiples of 2, we don't count (2&4) as it doesn't result in a double underline.\n    # Then subtract the numbers underlined for all three multiples to prevent overcounting\n    twice_underlined = (multiples_of_two_and_three + multiples_of_three_and_four) - 2 * multiples_of_two_three_four\n\n    return twice_underlined\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # Convert 16.35 to minutes\n    time_missed_first_bus = first_bus_time + 4  # 4 minutes late for the first bus\n    wait_time_for_second_bus = second_bus_time - time_missed_first_bus\n    return wait_time_for_second_bus\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    students = 152\n    boys_removed_fraction = 1/11\n    girls_removed = 5\n\n    # Let x be the original number of boys\n    # Therefore 152 - x is the original number of girls\n\n    # After removing 1/11 of the boys and 5 girls, equations will be:\n    # x - (1/11)*x = (152 - x) - 5\n\n    # Solving for x\n    # (10/11)*x = 152 - x - 5\n    # (21/11)*x = 147\n    # x = 147 * (11/21)\n    \n    original_boys = 147 * (11/21)\n    \n    return int(original_boys)\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # If the average of 4 out of 5 numbers is given, then the sum of those 4 numbers is 4 times the average.\n    sums_of_four = [4 * 36, 4 * 38, 4 * 39, 4 * 45, 4 * 49]\n    # The total sum of the 4 groups of numbers without the largest number included in the sum is the sum of the 4 smallest sums_of_four.\n    sum_without_largest = sum(sorted(sums_of_four)[:4])\n    # The sum when the largest number is included is the sum of all sums_of_four minus the smallest one.\n    sum_with_largest = sum(sums_of_four) - min(sums_of_four)\n    \n    # The largest number is the difference between these two sums.\n    largest_number = sum_with_largest - sum_without_largest\n    \n    return largest_number\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    \n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    import math\n    num_workers = 70\n    capacity = 8\n    num_lorries = math.ceil(num_workers / capacity)\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Andrew and Louise's ages\n    andrew, louise = symbols('andrew louise')\n\n    # Equation1: Andrew's age is three times Louise's age\n    equation1 = Eq(andrew, 3 * louise)\n    # Equation2: Sum of their ages is 84\n    equation2 = Eq(andrew + louise, 84)\n\n    # Solve the system of equations\n    solved_ages = solve((equation1, equation2), (andrew, louise))\n\n    # Return Louise's age\n    return solved_ages[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days = 20 * 4  # Average of 20 pages per day for 4 days\n    last_two_days = 60\n    total_pages = first_three_days + next_four_days + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 4 * 5 * 9\n    return ans\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    for students in range(1, 1000):  # Assumed reasonable upper bound for total students\n        if (students + 6) % 4 == 0 and (students - 1) % 5 == 0:\n            return students\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    sum_grandsons_ages = sum(grandsons_ages)\n\n    while bill_age != sum_grandsons_ages:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        sum_grandsons_ages = sum(grandsons_ages)\n    \n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_weight_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_weight_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial_sum = 7 * 9\n    total_final_sum = 6 * 10\n    removed_number = total_initial_sum - total_final_sum\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_leave_fraction = 1/3\n    people_leave = total_people * people_leave_fraction\n    people_still_at_party = total_people - people_leave\n\n    return int(people_still_at_party)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    wrong_deduct = 2\n    total_marks = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_marks - wrong_answers * wrong_deduct == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    max_two_sports = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    # Since we are looking for the LEAST number of students\n    # playing all three sports, we subtract this maximum possible number\n    # from the sum of students in each individual sport.\n    min_all_three_sports = swimmers + cyclists + table_tennis_players - 2 * max_two_sports\n\n    return min_all_three_sports\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    \n    interval_a = 15\n    interval_b = 12\n    interval_c = 8\n\n    lcm_value = lcm(interval_a, interval_b, interval_c)\n\n    hours, minutes = divmod(lcm_value, 60)\n    next_arrival_hour = 10 + hours\n    next_arrival_minute = minutes\n\n    return f\"{next_arrival_hour:02d}:{next_arrival_minute:02d}\"\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Calculate the value using the distributive property of multiplication over addition\n    # Factor out the common terms\n    common_factor = 3999 * 2014\n    ans = (common_factor * 1.2014 + common_factor * 3.999) / 12.0012\n    \n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time = 30  # in seconds\n    length = 360  # in meters\n\n    speed = length / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    climb_day = 3\n    slide_night = 1\n    effective_climb = climb_day - slide_night\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_night\n\n    return days\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4  # Law of Addition\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Assume there are 'n' people standing in the circle.\n    # From the problem, we know that the person with number 10 is directly opposite to the person with number 24.\n    # This means that the person with number 10 is halfway around the circle from the person with number 24.\n\n    # The difference of their numbers is 24 - 10 = 14\n    # This difference accounts for half of the people in the circle.\n    # Therefore, the total number of people is twice this difference.\n\n    num_difference_halfway = 24 - 10\n    total_people = 2 * num_difference_halfway\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_percentage = 20\n    books_expense = (books_percentage / 100) * pocket_money\n    \n    # Let transport cost be 't' and thus food cost will be '3t'\n    # Savings equals food cost minus 6\n    # pocket_money = books_expense + transport cost (t) + food cost (3t) + savings (3t - 6)\n    # 80 = (20/100)*80 + t + 3t + 3t - 6\n    # t = (80 - (20/100)*80 + 6) / 7\n    \n    transport_expense = (pocket_money - books_expense + 6) / 7\n    food_expense = 3 * transport_expense\n    savings = food_expense - 6\n\n    savings_percentage = (savings / pocket_money) * 100\n    return savings_percentage\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # The worst case scenario is when we draw all marbles of a single color first\n    # before we see a marble of different colors.\n    \n    # First, draw all red marbles (the largest quantity)\n    red_marbles = 12\n    \n    # Second, draw all blue marbles\n    blue_marbles = 9\n    \n    # Then, draw all yellow marbles\n    yellow_marbles = 8\n    \n    # Finally, we will get a marble of a different color on the next draw.\n    # That guarantees that we will have at least 4 marbles of different colors.\n    # Therefore, we need to draw 1 more marble to get the fourth color.\n    next_draw = 1\n    \n    # Add up all the draws\n    total_draws = red_marbles + blue_marbles + yellow_marbles + next_draw\n    \n    return total_draws\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [x for x in range(1, 67) if 66 % x == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return possible_ages[0] if possible_ages else None\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import gcd\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    a = 24\n    b = 64\n    \n    return lcm(a, b)\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [factor for factor in range(1, 76) if 75 % factor == 0]\n    for num in factors_of_75:\n        if num >= 10 and num < 100 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_result = 50\n    correct_subtrahend = 14\n\n    # Find the initial number before subtraction\n    initial_number = incorrect_subtrahend + incorrect_result\n\n    # Find the correct difference\n    correct_difference = initial_number - correct_subtrahend\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([(-1)**(i%2) * num for i, num in enumerate(range(40, 21, -2))])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate_each = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_ate + sisters_ate_each * sisters_count\n    total_apples_before = total_apples_eaten + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n    \n    # Count how many valid numbers of 4 digits can be formed that are greater than 3267\n    for thousands in range(3, 7):\n        for hundreds in range(1, 7):\n            for tens in range(1, 7):\n                for ones in range(1, 7):\n                    # Check if the digits are unique\n                    if len({thousands, hundreds, tens, ones}) == 4:\n                        # Form the number from digits and check if it's in the valid range\n                        number = thousands*1000 + hundreds*100 + tens*10 + ones\n                        if 3267 < number < 5120:\n                            total_count += 1\n    \n    # Count how many valid numbers of 3 digits can be formed that are between 3267 and 5120\n    for hundreds in range(1, 7):\n        for tens in range(1, 7):\n            for ones in range(1, 7):\n                if len({hundreds, tens, ones}) == 3:\n                    number = hundreds*100 + tens*10 + ones\n                    if 3267 < number < 5120:\n                        total_count += 1\n    \n    # Count how many valid numbers of 2 digits can be formed that are between 3267 and 5120\n    for tens in range(1, 7):\n        for ones in range(1, 7):\n            if len({tens, ones}) == 2:\n                number = tens*10 + ones\n                if 3267 < number < 5120:\n                    total_count += 1\n    \n    # Count how many valid numbers of 1 digit can be formed that are between 3267 and 5120\n    for ones in range(1, 7):\n        if 3267 < ones < 5120:\n            total_count += 1\n            \n    return total_count\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    final_amount = 7320.5\n    initial_amount = 5000\n    years = 4\n    # Use the formula A = P(1 + r)^n to find the interest rate (r)\n    # Where:\n    # A = final amount\n    # P = initial amount (principal)\n    # r = annual interest rate\n    # n = number of years\n    # Rearrange the formula to solve for r\n    r = (final_amount / initial_amount) ** (1/years) - 1\n    \n    return r\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # as the total soldiers formed a square, let the side of the square be x\n    # after adding 31 soldiers, the square has (x+1) side\n    # so the total soldiers now will be (x+1)^2 \n    for x in range(1, 100): # iterate through a reasonable range for the square side\n        if (x*x + (2*x + 1)) == (x+1)**2: # check if adding 31 soldiers\n            if x*x + (2*x + 1) - 31 == x*x: # check if initial configuration is a perfect square\n                return (x+1)**2 # return total number of soldiers now\n                \nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    total = 56\n    result = 21\n    fraction = result / total\n    denominator = 3 / fraction\n\n    return int(denominator)\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2 + 6.77 + 8.88\n    b = 6.77 + 8.88 + 6.3\n    c = 3.2 + 6.77 + 8.88 + 6.3\n    d = 6.77 + 8.88\n\n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    \n    february_saved = total_saved - january_saved - march_saved\n    \n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20\n    num_pictures = total_minutes // minutes_per_picture\n    \n    return num_pictures\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_in_minute = 60\n\n    return minutes * seconds_in_minute\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    number_of_years = 4\n\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total apples to distribute\n    total_apples = 30\n    # Number of other children (excluding Ann)\n    other_children = 5\n    # Each of the other children should get at least one apple\n    min_apples_per_child = 1\n    \n    # Calculate the maximum apples Ann can get\n    max_apples_for_ann = total_apples - (min_apples_per_child * other_children)\n    \n    return max_apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    # Number of ways to pair blouse and pants:\n    blouse_pants_combinations = 3 * 2\n    \n    # For each blouse-pants pair, she can choose from 4 pairs of shoes:\n    blouse_pants_shoes_combinations = blouse_pants_combinations * 4\n    \n    # Number of ways to wear a dress with shoes:\n    dress_shoes_combinations = 3 * 4\n    \n    # Number of ways to wear a dress with heels:\n    dress_heels_combinations = 3 * 2\n    \n    # Total combinations:\n    total_combinations = blouse_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, teddy_bear = symbols('book teddy_bear')\n    \n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n    \n    solutions = solve((equation1, equation2), (book, teddy_bear))\n    \n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors, gcd\n\n    # Since M and N only have prime factors 3 and 5, and their gcd is 75,\n    # they are of the form 3^a * 5^b, where a,b are non-negative integers.\n    # Also, gcd(3^a * 5^b, 3^c * 5^d) is 3^min(a,c) * 5^min(b,d).\n    # The highest common factor (gcd) is 75, which is 3^1 * 5^2.\n    # We'll find a and b that satisfy this property.\n\n    # Now, we need to find all the possible forms of M and N that have only\n    # 3 and 5 as prime factors, `gcd(M, N) = 75` and have 12 and 10 divisors respectively.\n\n    # The number of divisors function for a number of prime factors is (a+1)(b+1) because\n    # each exponent in the prime factorization can be 0 to its value.\n    \n    def find_possible_numbers(num_divisors, gcd_3_exponent, gcd_5_exponent):\n        possible_numbers = []\n        # Since gcd is 75, which is 3^1 * 5^2, the minimum exponents for 3 and 5 are 1 and 2, \n        # respectively, thus we start from these values and loop till we find a number with \n        # exactly num_divisors divisors.\n        for a in range(gcd_3_exponent, num_divisors):  # exponent for 3\n            for b in range(gcd_5_exponent, num_divisors):  # exponent for 5\n                if (a + 1) * (b + 1) == num_divisors:\n                    possible_numbers.append(3**a * 5**b)\n        return possible_numbers\n    \n    # Find M and N with given number of factors\n    M_factors = find_possible_numbers(12, 1, 2)\n    N_factors = find_possible_numbers(10, 1, 2)\n\n    # Now we need to find a pair (M, N) such that gcd(M, N) = 75\n    for M in M_factors:\n        for N in N_factors:\n            if gcd(M, N) == 75:\n                return M + N\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all to grams\n    total_mass_in_g = (total_mass_kg * 1000) + total_mass_g\n    soil_mass_in_g = (soil_mass_kg * 1000) + soil_mass_g\n\n    # Find the mass of the sand in grams\n    sand_mass_in_g = total_mass_in_g - soil_mass_in_g\n    \n    # Find the difference in mass between the soil and sand\n    difference_in_g = abs(soil_mass_in_g - sand_mass_in_g)\n\n    # Convert the difference back to kg and g\n    difference_kg = difference_in_g // 1000\n    difference_g = difference_in_g % 1000\n\n    # Combine the kg and g for the final answer\n    ans = (difference_kg, difference_g)\n    return ans\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    total_buttons = 22\n    # Let x be the number of buttons Nina originally had and y be the number James had\n    # Nina has more buttons than James, so x > y\n    # When Nina gave 4 buttons to James, they have the same amount, so x - 4 = y + 4\n    # Since the total is 22, x + y = 22\n    # From the equations: x - 4 = y + 4 and x + y = 22, we can solve for x\n\n    # Solving the system of equations\n    # x - y - 4 = 4\n    # x + y = 22 --> y = 22 - x\n\n    # Now plug the expression of y into the first equation\n    # x - (22 - x) - 4 = 4\n    # 2x - 22 - 4 = 4\n    # 2x = 30\n    # x = 15\n\n    nina_buttons_original = 15\n\n    return nina_buttons_original\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 1  # The series starts with 1\n    for i in range(2, 101):  # Starting from 2 to 100\n        for j in range(1, i):  # The numerator ranges from 1 to i-1\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    total_score = 29\n    correct_score = 4\n    incorrect_deduction = -2\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_score + incorrect_answers * incorrect_deduction == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    # The pattern 12345 repeats every 5 digits.\n    repeat_length = 5\n    total_digits = 52\n    full_repeats = total_digits // repeat_length  # Calculate number of full 12345 repeats within 52 digits\n    remaining_digits = total_digits % repeat_length  # Calculate remaining digits after full pattern repeats\n    \n    # Calculate the sum of digits in one full pattern\n    sum_of_one_pattern = sum(range(1, 6))\n    \n    # Multiply sum of one pattern by the number of full repeats to get sum of all fully repeated patterns\n    sum_of_full_repeats = sum_of_one_pattern * full_repeats\n    \n    # Sum up the remaining digits\n    sum_of_remaining_digits = sum(range(1, remaining_digits + 1))\n    \n    # The final sum is the sum of all full repeats and sum of remaining digits\n    total_sum = sum_of_full_repeats + sum_of_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n    num_kites = total_paper / paper_per_kite\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    # There are 79 trees planted at regular intervals\n    # and no trees in front of the school or her house.\n    # This means there are 80 intervals between 79 trees.\n    num_intervals = 79 + 1\n\n    # The road is 320m long.\n    road_length = 320\n\n    # The distance between each tree is the road length divided by the number of intervals.\n    distance_between_trees = road_length / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Given ratios\n    fish_to_rabbits = 10 / 4\n    rabbits_to_wheat = 5 / 6\n\n    # Combined ratio: fish to wheat\n    fish_to_wheat = fish_to_rabbits / rabbits_to_wheat\n\n    # Find how many fish for 12 packs of wheat by using the combined ratio\n    fish_for_12_wheat = fish_to_wheat * 12\n    \n    return fish_for_12_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    long_rod_length = Fraction(54, 5)  # 10 4/5 metres as an improper fraction\n    short_rod_length = Fraction(3, 10)\n    \n    num_short_rods = long_rod_length // short_rod_length\n    \n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price = 2800\n    deal_quantity = 30\n    required_quantity = 20\n\n    cost_without_deal = single_laptop_price * required_quantity\n    cost_per_laptop_on_deal = deal_price / deal_quantity\n    cost_with_deal = cost_per_laptop_on_deal * required_quantity\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "def solution():\n    from math import factorial\n\n    # Calculate the total permutations for the singing performances (S)\n    total_s_permutations = factorial(6)\n\n    # Places available for dancing after adding 1 S between each pair of D (D-S-D)\n    places_for_d = 5 + 1  # Since there will always be a S between every 2 Ds\n\n    # Choose 4 places from the available places to put the D performances\n    total_d_combinations = factorial(places_for_d) // (factorial(4) * factorial(places_for_d - 4))\n\n    # Calculate total number of ways by multiplying the permutations of S and combinations of D\n    total_ways = total_s_permutations * total_d_combinations\n\n    return total_ways\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    solutions = solve(equation1, penguins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    earnings = hourly_wage * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    subtracted_instead_of_adding = 26\n    original_number = incorrect_result + subtracted_instead_of_adding * 2\n    return original_number\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    return 322 - (95 - 87) * 16\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew_to_kelly = 4 / 5\n    kelly_height = matthew_height / ratio_matthew_to_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total_amount = 80\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    result = 689 // 13\n    return result\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    # Iterate over possible values for a and b to find a solution matching the condition\n    for a in range(10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Enumerate all possible scores for half time for one team\n    for team1_ht in range(4):\n        # Enumerate all possible scores for the other team\n        for team2_ht in range(3):\n            # Conditions for valid half-time score\n            if team1_ht <= 3 and team2_ht <= 2: # They cannot score more than the final\n                if (team1_ht <= team2_ht) or (team1_ht < 3 and team2_ht < 2): # Conditions for a valid game progression\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    emma = symbols('emma')\n    clara = 5 * emma\n    \n    equation = Eq(clara + emma, 1002)\n    solution = solve(equation, emma)\n    \n    return solution[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the total number of girls and b be the total number of boys\n    g, b = symbols('g b', integer=True)\n\n    # Using the given information to create our equations\n    # Equation for the number of girls who cannot swim\n    eq1 = Eq(g * (1 - 3/8), b * (1 - 3/5))\n    # Equation for the total number of pupils who cannot swim\n    eq2 = Eq(g * (1 - 3/8) + b * (1 - 3/5), 20)\n\n    # Solve the equations for g and b\n    solutions = solve((eq1, eq2), (g, b))\n\n    # Calculate the total number of pupils in the class\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    students = 0\n    for rows in range(1, 100):  # Assuming the number of students is less than 100 * 100\n        for cols in range(1, 100):\n            if rows * cols > students:  # We only care about larger rectangles as the count increases\n                # Mike can be second in line only if there's an exact place from all sides\n                if rows >= 2 and cols >= 2:\n                    if (rows - 1) * (cols - 1) == 1:  # 1 place remaining in the inner rectangle\n                        students = rows * cols\n    return students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    # Let x be the weight of the empty basket and y be the weight of the mangoes when the basket is full.\n    # We know that x + y = 80 (full basket with mangoes).\n    # When the basket is half full, it means half of y (which is y/2) is present, thus x + y/2 = 60.\n    # To find x, we need to solve the system of equations.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 80)  # Full basket \n    equation2 = Eq(x + (y/2), 60)  # Half-full basket\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    total_amount = 400\n    ans = percentage * total_amount\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Bud got 2/5 of the sweets since Pip ate 3/5 of them\n    bud_fraction = 2/5\n    # Number of sweets left for Bud is 16\n    sweets_left_for_bud = 16\n    # Calculate the total number of sweets in the box at the start\n    total_sweets = sweets_left_for_bud / bud_fraction\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    num = 6 * 5\n    ans = (num * 100) / 40\n    return ans\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_spent_for_3_cups = 30\n    number_of_cups_wanted = 5\n\n    cost_per_cup = total_spent_for_3_cups / 3\n    total_cost_for_5_cups = cost_per_cup * number_of_cups_wanted\n\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    big_house_capacity = 4\n\n    rabbits_in_big_houses = big_houses * big_house_capacity\n    rabbits_remaining = total_rabbits - rabbits_in_big_houses\n    small_house_capacity = rabbits_remaining // small_houses\n\n    return small_house_capacity\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_per_day = 60\n    days_in_week = 7\n\n    total_earnings = average_per_day * days_in_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum((i+1)**2 - i**2 for i in range(1, 8, 2))\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * 7\n    ways[0] = 1  # Initialize the base case\n    for i in range(1, 7):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n    ans = ways[6]\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_per_month = 15\n    number_of_months = 5  # From March to July inclusive is 5 months\n\n    total_pizzas = average_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    return (21+22+23) // (2*3)\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, ryan = symbols('abigail ryan')\n    \n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    solutions = solve((equation1, equation2), (abigail, ryan))\n    \n    ryan_age_in_2_years = solutions[ryan] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_ship - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n        \n    last_multiple = (92 // 4) * 4\n    if last_multiple > 92:\n        last_multiple -= 4\n\n    count = (last_multiple - first_multiple) // 4 + 1\n    \n    return count\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    common_difference = 2\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_of_series)\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum((-1) ** ((i + 1) // 4) * i for i in range(1, 61))\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 999\n    exponent = 99\n    ones_digit_base = base % 10  # We are interested in the last digit.\n    current_ones_digit = ones_digit_base\n\n    # Compute only the last digit in each iteration\n    for i in range(1, exponent):\n        current_ones_digit = (current_ones_digit * ones_digit_base) % 10\n\n    return current_ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Claire's current age as 'c'\n    c = symbols('c')\n\n    # In 6 years, Claire will be three times her current age\n    equation = Eq(c + 6, 3 * c)\n\n    # Solve for Claire's current age\n    current_age = solve(equation, c)[0]\n\n    # Claire's age two years from now will be her current age plus 2\n    age_two_years_from_now = current_age + 2\n\n    return age_two_years_from_now\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let the expected journey time be t minutes\n    # The actual journey time was (11/12) * t\n    # The train was 15 minutes late starting and arrived 5 minutes late\n    # So, the actual journey time is the expected time minus 10 minutes (15-5 minutes)\n    # Therefore, we set up the equation: t - 10 = (11/12) * t\n    # To solve for t, we rearrange the equation: t - (11/12) * t = 10\n    # Combine like terms: (1/12) * t = 10\n    # Finally, solve for t: t = 10 * (12/1)\n    t = 10 * (12/1)\n    return t\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number = (total_product - known_product) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # List of UK coins in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Start with the smallest number of coins (1 £2 coin)\n    smallest_number_of_coins = float('inf')  # Initialize to a very large number\n    for coin in coins:\n        remaining = 240  # Assuming Susan pays with a £2 coin which is 200 p + a 50p coin (total 250p)\n        number_of_coins = 1  # She's already handed over the £2 coin, starts at 1\n        if 240 - coin >= 44:\n            remaining -= coin\n            number_of_coins += 1  # Paying with another coin\n            # Calculate the change to give back\n            change = remaining - 44\n            # Iterate through the list of coins to give change\n            for c in coins:\n                while change >= c:\n                    change -= c\n                    number_of_coins += 1  # One more coin changes hands\n                \n            # Updating the smallest number of coins after checking each possibility\n            if number_of_coins < smallest_number_of_coins:\n                smallest_number_of_coins = number_of_coins\n\n    return smallest_number_of_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Since Jane wants to ensure she has 4 different colored marbles,\n    # she must go through the worst case scenario where she picks the maximum number\n    # of marbles from each color without getting all 4 colors.\n\n    # She could pick all red marbles first (4 red),\n    # then all green marbles (7 green, for a total of 4+7=11),\n    # and then all blue marbles (6 blue, for a total of 4+7+6=17).\n    # At this point, she has 3 colors. To be certain to have the 4th color,\n    # she must pick one more marble which, in the worst case, will be orange.\n\n    # So, 4 (red) + 7 (green) + 6 (blue) + 1 (to ensure orange) = 18.\n    ans = 4 + 7 + 6 + 1\n    return ans\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    day_progress = 3\n    night_regress = 1\n    total_distance = 9\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_progress\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_regress\n\n    return day_count\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "def solution():\n    from math import factorial as f\n    \n    def nCr(n, r):\n        return f(n) // f(r) // f(n-r)\n\n    # To ensure each child gets at least one book, we give one book to each child\n    # initially and then distribute the remaining books\n    remaining_books = 19 - 4\n    \n    # This is equivalent to placing 3 (which is 4-1) partitions in the remaining \n    # 15 positions to divide the books among the 4 kids\n    # which can be calculated using combinations as C(15+4-1, 4-1)\n    ans = nCr(remaining_books + 4 - 1, 4 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of motorbikes, y be the number of tricycles, z be the number of vans\n    x, y, z = symbols('x y z')\n    \n    # Each motorbike has 2 wheels, each tricycle has 3 wheels, and each van has 4 wheels\n    # The equations are based on the problem statement\n    equation1 = Eq(2*x + 4*z - 3*y, 35)  # 35 more motorbikes and van wheels than tricycle wheels\n    equation2 = Eq(3*y + 4*z - 2*x, 13)  # 13 more tricycle and van wheels than motorbike wheels\n    equation3 = Eq(2*x + 3*y + 4*z, 101)  # Total of 101 wheels\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Find the difference in the number of motorbikes and vans\n    motorbikes_vans_diff = solutions[x] - solutions[z]\n    \n    return motorbikes_vans_diff\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    term = 2  # First term\n    diff = 1  # Initial difference\n\n    while term < 100:  # Loop until the term has three digits\n        term += diff\n        diff += 1  # Increment the difference for the next term\n\n    return term\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    d = 41  # Tank D contains 41 litres of water\n\n    equation1 = Eq(a, 5 * b)          # Tank A contains 5 times as much water as Tank B\n    equation2 = Eq(b, c + 5)          # Tank B contains 5 more litres of water than Tank C\n    equation3 = Eq(c + d, a)          # The total amount of water in Tank C and Tank D equals Tank A\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((i**2 - (i-2)**2) for i in range(2, 41, 4))\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since each pencil case cannot be empty, we start by placing one pen in each\n    # which leaves us with 6 - 3 = 3 pens to distribute.\n    remaining_pens = 6 - 3\n    \n    # Now we need to distribute the remaining 3 pens in the 3 different cases\n    # This is equivalent to solving the equation x1 + x2 + x3 = 3, where each x can be 0 or more\n    # This is a problem of distributing indistinguishable items into distinguishable boxes\n    # The formula for such a distribution is (n+k-1) choose (k-1), where n is the remaining items\n    # and k is the number of boxes.\n\n    from math import comb\n\n    # n = remaining_pens = 3, k = pencil cases = 3\n    ans = comb(remaining_pens + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    cups_needed = 30\n    gallons_needed = cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    Pip_and_Bud = 2 # Pip and Bud themselves\n    \n    total_people = people_in_front_of_Pip + Pip_and_Bud + people_behind_Bud\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for i in permutations(\"2014\"*2, 8):\n        if i.count('0') == 2 and i.count('1') == 2 and i.count('2') == 2:\n            year = int(\"\".join(i[:4]))\n            month = int(\"\".join(i[4:6]))\n            day = int(\"\".join(i[6:]))\n            if year == 2014 and month > 0 and month <= 12:\n                if month in [1,3,5,7,8,10,12] and day > 0 and day <= 31:\n                    count += 1\n                elif month in [4,6,9,11] and day > 0 and day <= 30:\n                    count += 1\n                elif month == 2 and day > 0 and day <= 28:\n                    count += 1\n    return count // 24  # Dividing by 24 because of the permutation repetitions for the same day\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    total_sum = sum(numbers)  # Sum of the given numbers\n    average = 6\n    total_numbers = 8\n    total_sum_with_p_q = total_numbers * average  # Sum of all 8 numbers including p and q\n\n    sum_p_q = total_sum_with_p_q - total_sum  # Combined sum of p and q\n\n    # The difference between the highest value (q) and the lowest value is 6\n    # Since the lowest value in the existing numbers is 3, q could be at most 3 + 6\n    q_possible_max = 3 + 6\n\n    # Try to find the lowest possible value of q\n    q_min = q_possible_max\n    for p in range(1, q_possible_max):\n        q = sum_p_q - p\n        if q < q_possible_max and p < q:  # p < q constraint\n            q_min = q\n            break\n\n    return q_min\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) / difference) + 1\n\n    return int(term_number)\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both_sports = symbols('both_sports')\n\n    football_likes = 3 * both_sports\n    basketball_likes = 4 * both_sports\n    total_students = 36\n\n    equation = Eq(football_likes + basketball_likes - both_sports, total_students)\n\n    solutions = solve(equation, both_sports)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # Since 7, 11, and 13 are pairwise coprime, we can use the\n    # Chinese Remainder Theorem to find the smallest such number.\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 7), (7, 11), (9, 13)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 10000:  # Ensure it is a five-digit number\n        ans += 7 * 11 * 13\n    return ans\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed in km/h\n    adam_speed = 60\n    # Jacob's speed in km/h\n    jacob_speed = 80\n    # Jacob's travel time in hours\n    jacob_time = 3\n    # Adam's travel time in hours (3 hours + 30 minutes)\n    adam_time = 3 + 0.5\n\n    # Adam's distance to home\n    adam_distance = adam_speed * adam_time\n    # Jacob's distance to home\n    jacob_distance = jacob_speed * jacob_time\n    \n    # The distance between their homes\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2  # The first term of the sequence\n    common_difference = 7 - 2  # The common difference of the sequence\n    n = 21  # The term number we're looking for\n\n    # The formula for the nth term of an arithmetic sequence is:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def new_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    # perform the operation as defined (sequentially)\n    result = new_operation(new_operation(new_operation(1, 2), 3), 4)\n    # perform the operation with the result and 5\n    final_result = new_operation(result, 5)\n    # find the largest integer not exceeding the final_result\n    return int(final_result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    prime_factors = [2, 2, 3, 3, 7]  # corresponding to 36 * 7 factored into primes\n    counts = {x: prime_factors.count(x) for x in prime_factors}\n    num_factors = 1\n    for count in counts.values():\n        num_factors *= (count + 1)\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # The Pigeonhole Principle states that if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # Here, we need to find out at least how many cakes are there in the layer with the most cakes.\n    # Thus, we apply the Pigeonhole Principle by dividing the total number of cakes by the layers\n    # and take the ceiling of the result to find the minimum number in the fullest layer.\n    min_cakes_in_fullest_layer = (total_cakes + total_layers - 1) // total_layers\n\n    return min_cakes_in_fullest_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07  # 7% GST\n    total_paid = 0.91  # Total paid with GST\n    base_cost = total_paid / (1 + gst_rate)  # Cost before GST\n    \n    return round(base_cost, 2)\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case: Lucy takes all marbles of one color first\n    max_single_color = 2\n    # She needs to take one more to guarantee a pair of the same color\n    marbles_needed = max_single_color + 1 \n\n    return marbles_needed\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg_1 = 2.49  # kg\n    weight_g_2 = 670    # g\n    weight_kg_3 = 3     # kg\n    weight_g_3 = 80     # g\n\n    # Convert all weights to grams\n    weight_g_1 = weight_kg_1 * 1000\n    weight_g_3 = weight_kg_3 * 1000 + weight_g_3\n\n    # Sum of all weights in grams\n    total_weight = weight_g_1 + weight_g_2 + weight_g_3\n\n    return total_weight\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time = 60  # total exercise time in minutes\n    cycling_time = total_time / 3\n    jogging_time = total_time - cycling_time\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    justin_age = solve(equation, justin)\n    \n    return justin_age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18  # Calculate the common difference of the sequence\n    next_term = 2 - difference  # Find the next number in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple of the three times\n    lcm_time = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate hours and minutes\n    minutes = lcm_time // 60\n    seconds = lcm_time % 60\n    hours = minutes // 60\n    minutes = minutes % 60\n\n    # Start time is 10:00 AM\n    start_hours = 10\n    start_minutes = 0\n\n    # Calculate the time when they meet\n    end_hours = (start_hours + hours) % 24  # Account for potentially going past midnight\n    end_minutes = (start_minutes + minutes)\n\n    # Account for minutes overflow\n    if end_minutes >= 60:\n        end_hours += end_minutes // 60\n        end_minutes = end_minutes % 60\n\n    # Return time in 'HH:MM' format\n    return f\"{end_hours:02d}:{end_minutes:02d}:{seconds:02d}\"\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    total_apples = 30\n    num_children = 6\n    apples_for_largest = total_apples\n\n    # Since we want maximum apples for the largest, \n    # we distribute the rest from 1, 2, 3, ... to save apples for the largest\n    for i in range(1, num_children):\n        apples_for_largest -= i\n\n    return apples_for_largest\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_miles_per_gallon = 72.8\n    tom_extra_gallons = 6 + 3 / 4\n\n    # Calculate the gallons Sam's car would consume\n    sam_gallons = distance / sam_miles_per_gallon\n\n    # Calculate the total gallons Tom's car would consume\n    tom_gallons = sam_gallons + tom_extra_gallons\n\n    # Calculate the average rate (miles per gallon) of Tom's car\n    tom_miles_per_gallon = distance / tom_gallons\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To guarantee getting 2 M&M's of different colors, Bart has to pick enough\n    # to ensure he has at least 2 of the most abundant color. In the worst case,\n    # he might pick all of a less abundant color before getting a pair of different colors.\n\n    # Number of M&Ms for each color\n    red = 3\n    yellow = 4\n    brown = 5\n\n    # To ensure getting 2 different colors, take all of one color (4 yellow ones) and 1 more (which could be red or brown).\n    mms_needed = yellow + 1\n\n    return mms_needed\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum([i**2 for i in range(1, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda has two choices for shirts and two choices for skirts\n    # For each shirt, she can pair with either of the two skirts\n    # Using the Principle of Multiplication,\n    # the total number of ways to match a shirt with a skirt is\n    # the product of the number of choices for each\n\n    num_shirts = 2\n    num_skirts = 2\n    num_ways_to_match = num_shirts * num_skirts\n\n    return num_ways_to_match\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    nth_term = 7\n    nth_value = 105\n    common_difference = 120 - 105\n    \n    hundredth_term = nth_value + (100 - nth_term) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    base7_sum = int('45', 7) + int('66', 7)\n    ans = ''\n    while base7_sum > 0:\n        ans = str(base7_sum % 7) + ans\n        base7_sum //= 7\n    return ans\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # Given sequence: 1, 3, _, 27, 81\n    # Finding the pattern in the given sequence.\n    # Observing the sequence, the pattern appears to be each term is three times the previous term.\n    # Therefore to find the missing term which is the third term in the sequence, we multiply the second term by 3.\n    \n    second_term = 3\n    missing_term = second_term * 3\n    \n    return missing_term\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    # Number of Chinese restaurants\n    chinese_restaurants = 9\n    # Number of Mexican restaurants\n    mexican_restaurants = 3\n    # Number of fast food restaurants\n    fast_food_restaurants = 2\n\n    # Number of different choices they have to eat one meal\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    daily_carrots_per_rabbit = 4\n    number_of_rabbits = 8\n    days_to_eat_all_carrots = 5\n\n    total_carrots = daily_carrots_per_rabbit * number_of_rabbits * days_to_eat_all_carrots\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    combined_rate = horse_rate + cow_rate + sheep_rate\n    total_bales = 22\n\n    days = total_bales / combined_rate\n\n    return days\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let o be the original number of oranges and l be the number of lemons\n    o, l = symbols('o l')\n\n    # Initial ratio of oranges to lemons\n    initial_ratio = Eq(o/l, 3/5)\n\n    # New ratio after selling 48 oranges\n    new_ratio = Eq((o - 48)/l, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (o, l))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_age_now, daughter_age_now = symbols('mother_age_now daughter_age_now')\n\n    # \"When you reach my age, I will be 75 years old\"\n    equation1 = Eq(mother_age_now + (mother_age_now - daughter_age_now), 75)\n\n    # \"When you were at my age, I was only 3 years old.\"\n    equation2 = Eq(daughter_age_now - (mother_age_now - daughter_age_now), 3)\n\n    solutions = solve((equation1, equation2), (mother_age_now, daughter_age_now))\n\n    return solutions[mother_age_now]\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    green_apples = 11\n    yellow_apples = 7\n    total_non_red_apples = green_apples + yellow_apples\n\n    # To guarantee getting 3 red apples, one must take all non-red apples plus 3 red ones\n    apples_to_take = total_non_red_apples + 3\n    \n    return apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations of 0,1,2 repeated twice and two other digits\n    for perm in permutations(\"0011223456789\", 8):\n        yyyy, mm, dd = int(\"\".join(perm[:4])), int(\"\".join(perm[4:6])), int(\"\".join(perm[6:]))\n        \n        # Check if the generated date is a valid date of year 2014\n        if yyyy == 2014 and mm >= 1 and mm <= 12:\n            # Days per month consideration, including leap year check for February\n            if mm == 2:\n                if dd >= 1 and dd <= 28:  # Not a leap year\n                    count += 1\n            elif mm in [4, 6, 9, 11]:\n                if dd >= 1 and dd <= 30:\n                    count += 1\n            else:\n                if dd >= 1 and dd <= 31:\n                    count += 1\n    \n    # Permutations includes duplicates for repeated elements so we must divide by factorial of repetitions\n    factorial_2 = 2 * 2 # for 0s, 1s, and 2s repeated twice each\n    ans = count // factorial_2\n    return ans\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial = 200\n    final = 204\n    percentage_change = ((final - initial) / initial) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # Each team plays 5 games since there are 6 teams\n    total_games = 5 * 6 // 2 # Each game involves two teams\n\n    # There are three possible outcomes for a game: win, loss, or tie\n    # A win and a loss together contribute 2 points (2 for the winner, 0 for the loser)\n    # A tie contributes 2 points as well (1 point for each team)\n    # So for each game there are 2 points contributed in total\n\n    # Total points for all games\n    total_points = total_games * 2\n    \n    return total_points\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Since we need the smallest number of right-handed girls,\n    # we assume all the left-handed pupils are girls.\n    # This is the worst case scenario for the number of right-handed girls.\n    left_handed = total_pupils - right_handed\n    \n    # Number of girls that could have been left-handed at most.\n    max_left_handed_girls = min(left_handed, girls)\n    \n    # Minimum number of right-handed girls\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "import math\n\ndef solution():\n    total_children = 45\n    capacity_per_minibus = 8\n    minibus_count = math.ceil(total_children / capacity_per_minibus)\n    return minibus_count\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case scenario,\n    # Jane could pick all the marbles of one color, then all the marbles\n    # of another color and so on until she picks one from the next color.\n\n    # Total number of marbles for each of the three most abundant colors:\n    worst_case = 7 + 6 + 4 - 3  # Subtracting 3 because we want 4 different colors\n\n    # She needs to pick at least one more marble to ensure she has the fourth color\n    ans = worst_case + 1\n\n    return ans\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if (num % 2 == 0 and \n            num % 3 == 0 and \n            num % 5 == 0 and \n            num % 7 == 6):\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    zeros_needed = 28\n    n = 1\n    count_5 = 0\n    while count_5 < zeros_needed:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n //= 5\n    return n - 1\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 41):\n        if isprime(a):\n            for b in range(2, 41):\n                if (isprime(b)) and (3 * a + 7 * b == 41):\n                    return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_tender_4pc = 7 / 4\n    price_per_tender_6pc = 8.5 / 6\n\n    if price_per_tender_4pc < price_per_tender_6pc:\n        ans = \"4pc\"\n    else:\n        ans = \"6pc\"\n\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of girls who can swim to those who can't\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # The number of boys who can swim is 120 less than the number who can't\n    equation4 = Eq(girls + boys, 1690)  # Total number of pupils\n    equation5 = Eq(girls, girls_swim + girls_not_swim)  # Total number of girls\n    equation6 = Eq(boys, boys_swim + boys_not_swim)  # Total number of boys\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the total number of pupils who cannot swim\n    total_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    successful_rolls = 0\n    prize = 10\n    cost_per_roll = 1\n\n    # Calculating the number of successful outcomes (sum of dice > 10)\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 > 10:\n                successful_rolls += 1\n    \n    # Calculate probability of winning\n    total_combinations = 6 * 6  # Total possible combinations for two dice\n    probability_of_winning = successful_rolls / total_combinations\n\n    # Expected number of wins\n    expected_wins = total_rolls * probability_of_winning\n\n    # Expected gain from winning\n    expected_gain = expected_wins * prize\n\n    # Total cost of playing\n    total_cost = total_rolls * cost_per_roll\n\n    # Expected loss\n    expected_loss = total_cost - expected_gain\n\n    return expected_loss\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    weight_of_basket = weight_with_two_apples - 2 * weight_of_three_apples / 3\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    all_permutations = set(permutations(digits, 1)) | set(permutations(digits, 2)) | set(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # Let Kiera's total salary be x.\n    # She spent $740 on the new phone.\n    # Then she spent 75% of the remaining money (x - 740) on her rent.\n    # She had 1/5 of her salary left.\n    # This can be written as: (x - 740) - 0.75 * (x - 740) = x / 5\n    # Rearranging the equation: 0.25 * (x - 740) = x / 5\n    # Solve for x to find the total salary.\n    phone_expense = 740\n    rent_fraction = 0.75\n    remaining_fraction = 1/5\n\n    # Calculate the remaining salary after buying a phone\n    remaining_salary = 1 - rent_fraction\n\n    # Equation - remaining_salary * (x - phone_expense) = remaining_fraction * x\n    x = (phone_expense / (remaining_salary - remaining_fraction))\n\n    return x\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n    equation1 = Eq(mary - 58, 3 * (lynn - 160))\n    equation2 = Eq(lynn, mary)\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    current_time = 231  # Time is 02:31, so we convert it to an integer for easier calculations\n    while True:\n        current_time += 1  # Advance by 1 minute\n        if current_time == 240:  # After 02:39, it becomes 02:40\n            current_time = 240\n        if current_time == 300:  # After 02:59, it becomes 03:00\n            current_time = 300\n        if current_time == 1600:  # After 12:59, it becomes 01:00\n            current_time = 100\n\n        # Check if all required digits are present in the current time\n        digits = set(str(current_time))\n        if set('0123').issubset(digits):\n            return current_time - 231  # Subtract the initial time to get the difference\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    # Let the original amount of water in the bottle be x.\n    # According to the problem, after drinking half before class, x/2 ml remains.\n    # Then after class, he drank another 100ml, so x/2 - 100 ml remains.\n    # Finally, we are told that 150ml of water is left in the bottle.\n    # So, the equation is x/2 - 100 = 150\n    # Solving for x gives us the original amount of water in the bottle.\n    \n    x_over_2 = 150 + 100  # this is the amount before drinking after class\n    x = x_over_2 * 2       # this is the original amount of water\n    return x\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def diamond_operation(A, B):\n    return A * A - 3 * B\n\ndef triangle_operation(A, B):\n    return 5 * A - B * B\n\ndef solution():\n    result_diamond = diamond_operation(4, 2)\n    ans = triangle_operation(result_diamond, 6)\n    return ans\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    remaining_tickets_percentage = 100 - 60\n    remaining_tickets = 28\n\n    total_tickets = (remaining_tickets * 100) / remaining_tickets_percentage\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor_min = remainder + 1  # Minimum divisor must be greater than the remainder\n    dividend = (quotient * divisor_min) + remainder\n    return dividend\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3 / 7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3 / 8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    grapes_per_bag = (3 / 4)\n    bags_packed = remaining_after_tuesday / grapes_per_bag\n    \n    return int(bags_packed)\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([(64 - i) - (62 - i) for i in range(0, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    \n    # Deⅵ is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # In 4 years' time, the ratio of their age will be 5:7\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n    num_jugs = -(-total_juice_ml // jug_capacity_ml)  # Ceiling division to find the least number of jugs\n    return int(num_jugs)\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_subtrahend in range(1, 10):\n        for ones_subtrahend in range(10):\n            for tens_minuend in range(1, 10):\n                for ones_minuend in range(10):\n                    incorrect_subtrahend = tens_subtrahend * 10 + 3\n                    correct_subtrahend = tens_subtrahend * 10 + 2\n                    minuend = tens_minuend * 10 + ones_minuend\n                    if minuend - incorrect_subtrahend == 36 and tens_subtrahend == 3 and ones_subtrahend == 2:\n                        correct_difference = minuend - correct_subtrahend\n                        return correct_difference\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "from math import factorial\n\ndef solution():\n    ans = sum(factorial(100) / (factorial(97) * factorial(i)) for i in range(3, -1, -1))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    weight_of_matches = total_weight_with_matches - weight_of_empty_box\n    number_of_matches = 220\n    \n    weight_per_match = weight_of_matches / number_of_matches\n    \n    return weight_per_match\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50  # 49 red balls + 1 blue ball\n    target_percentage = 0.90\n\n    # Calculate the total number of balls remaining after some red balls are removed,\n    # such that red balls account for 90% of the total.\n    # The number of blue balls remains constant (1).\n    remaining_red_balls = target_percentage * (total_balls - 1) / (1 - target_percentage)\n    \n    # The number of red balls to be removed is the initial count minus the remaining.\n    red_balls_removed = 49 - remaining_red_balls\n\n    return int(red_balls_removed)\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of cows and b represent the number of birds.\n    c, b = symbols('c b')\n\n    # We have two equations based on the problem statement:\n    # 1. The total number of cows (c) and birds (b) is 1300.\n    equation1 = Eq(c + b, 1300)\n    # 2. Cows have 4 legs and birds have 2 legs, with a total of 3440 legs.\n    equation2 = Eq(4*c + 2*b, 3440)\n\n    # Solve the system of equations to find the values of c and b.\n    solutions = solve((equation1, equation2), (c, b))\n\n    # We are interested in the number of cows.\n    return solutions[c]\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    ben_given = 28\n    ben_pens = jenny_pens - ben_given * 2\n\n    return ben_pens\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # A 3-digit odd number divisible by 9 with the tens place divisible by 4.\n    # Start from the highest 3-digit number possible and go down.\n    # Since the number is odd, we go from 999 to 900 in steps of 2.\n\n    for num in range(999, 899, -2):\n        if num % 9 == 0:\n            # Check if the number is divisible by 9\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                # Tens place is divisible by 4\n                return num\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    import math\n\n    # Given values\n    mass1 = 500  # Mass of the first car in kg\n    mass2 = 500  # Mass of the second car in kg\n    velocity1 = 20  # Velocity of the first car in m/s (due north)\n    velocity2 = 30  # Velocity of the second car in m/s (due west)\n\n    # Conservation of Momentum\n    # Since momentum is a vector, we use the Pythagorean theorem to combine them\n    total_momentum_x = mass1 * 0 + mass2 * -velocity2  # due west is negative x-direction\n    total_momentum_y = mass1 * velocity1 + mass2 * 0  # due north is positive y-direction\n    total_mass = mass1 + mass2\n\n    # Velocity of the combined mass\n    velocity_x = total_momentum_x / total_mass\n    velocity_y = total_momentum_y / total_mass\n\n    # Calculate the magnitude of the velocity\n    velocity_magnitude = math.sqrt(velocity_x**2 + velocity_y**2)\n\n    # Calculate the direction of the velocity (angle in radians)\n    velocity_angle = math.atan2(velocity_y, velocity_x)\n\n    # Convert angle to degrees\n    velocity_angle_degrees = math.degrees(velocity_angle)\n\n    # We'll return both magnitude and direction (angle in degrees)\n    return (velocity_magnitude, velocity_angle_degrees)\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # The distance between the first and the last tree\n    distance = (21 - 1) * 2\n    # Since lamp posts are placed at opposite ends of the road and at regular intervals of 10m,\n    # The number of lamp posts required is calculated by dividing the distance by interval length plus 1\n    num_lamp_posts = (distance // 10) + 1\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # Equation 1: 5 laptops and 4 DVD players cost $14438\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    # Equation 2: 1 laptop and 1 DVD player cost $2960\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    pairs_count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                pairs_count += 1\n    return pairs_count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    pattern_sum = sum(range(1, pattern_length + 1))\n    full_patterns, partial_pattern_length = divmod(2000, pattern_length)\n\n    total_sum = full_patterns * pattern_sum + sum(range(1, partial_pattern_length + 1))\n    return total_sum\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the average weight before Aaron joined\n    # Let n be the number of people in the group before Aaron joined\n    x, n = symbols('x n')\n\n    # Equation 1: The total weight before Aaron joined\n    equation1 = Eq(n * x, n * x)\n\n    # Equation 2: When Aaron joins the group, the average weight becomes 61 kg\n    equation2 = Eq((n * x + 45) / (n + 1), 61)\n\n    # Equation 3: When Ben joins the group after Aaron, the average weight becomes 62 kg\n    equation3 = Eq((n * x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations for x and n\n    solutions = solve((equation2, equation3), (x, n))\n\n    # Returning the average weight before Aaron joined\n    return solutions[x]\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total = 5.15\n    coffee = 3.69\n    milk = 0.89\n\n    sugar = total - (coffee + milk)\n\n    return sugar\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):  # loop from 1 to 11 because those are the possible hours since midnight\n        hours_remaining = 12 - hours_passed\n        # check if the hours passed is twice the hours remaining\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # All the different letters stand for different digits,\n    # which means we're looking for a permutation of the digits 0-9\n    # that satisfy certain conditions based on the puzzle structure.\n    # Since we don't have the puzzle, I'll assume a simple structure where\n    # let's say:\n    #     A\n    #    B C\n    #   D E F\n    # It stands to reason each of these should have distinct values\n    # that satisfy some equation like A + B + C + D + E + F = some number.\n\n    # However, without the actual puzzle structure, we can't provide a solution.\n    # Thus, this is just an example structure to showcase Puzzles methodology,\n    # this won't actually solve any given puzzle without proper conditions.\n\n    for p in permutations(range(10), 6):\n        A, B, C, D, E, F = p\n        # Example condition: Let's say we want the sum of A, B, C, D, E, F equals 30\n        if A + B + C + D + E + F == 30:\n            # And also say we want A to be at the top of the triangle\n            # Let's return the value of one triangle, assuming it is A \n            return A  # This assumes 'triangle' is referring to A in our example\n    return None  # Return None if no permutation satisfies the condition\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Maximum balls Sheila can take without having 4 of same color:\n    # Worst case scenario taking the most without getting 4 of the same:\n    # 3 blue, 3 orange, and 2 yellow.\n\n    # Once she takes one more (any ball), she is guaranteed to have 4 of the same color.\n    # Therefore, she must take out 3 + 3 + 2 + 1 = 9 balls to ensure 4 of the same color.\n\n    ans = 3 + 3 + 2 + 1\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges = 1.5\n    price_mangoes = 2.3\n    weight_oranges = 4.1\n    weight_mangoes = 2\n\n    total_cost = (price_oranges * weight_oranges) + (price_mangoes * weight_mangoes)\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    ans = 4825 + 1754\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # Provided numbers without 'a'\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Total numbers including 'a'\n    total_sum_with_a = mean_value * total_numbers\n    sum_of_provided_numbers = sum(numbers)\n    a = total_sum_with_a - sum_of_provided_numbers\n    return a\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    difference = original_price - reduced_price\n    percentage_reduction = (difference / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A can do 1/15 of the job per day\n    # B can do 1/10 of the job per day\n\n    # For 4 days, they work together\n    work_done = 4 * (1/15 + 1/10)\n\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n\n    # Number of days B will take to finish the remaining job\n    days_for_B = remaining_work / (1/10)\n\n    return days_for_B\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the ascending sequence from 1 to 13\n    ascending_sum = sum(range(1, 14))\n    \n    # Calculate the sum of the descending sequence from 12 to 1\n    descending_sum = sum(range(1, 13))\n    \n    # Double-counting the peak of the pyramid, which is 13\n    double_counted_peak = 13\n    \n    # Total sum is the sum of both sequences minus the peak that was double-counted\n    total_sum = ascending_sum + descending_sum - double_counted_peak\n\n    return total_sum\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    import math\n    num_bottles = 1000\n    num_test_tubes = math.ceil(math.log(num_bottles, 2))\n    return num_test_tubes\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_more_than_girls = 52\n    total_students = 0\n\n    # Start searching from the minimum possible size of the square array where\n    # the outermost layer is filled with boys\n    # Since the difference between boys and girls must be an even number,\n    # we start with a square of side length 3 (boys) and increase by two each time\n    for side_length in range(3, 1000, 2):\n        boys = side_length * 4 - 4  # Calculate the number of boys (perimeter without corners)\n        inner_square_side = side_length - 2\n        girls = inner_square_side ** 2 if inner_square_side > 0 else 0  # Calculate the number of girls\n        if boys - girls == boys_more_than_girls:\n            total_students = side_length ** 2  # Calculate the total number of students\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres = 2.5\n    mililitres_per_litre = 1000\n    n = litres * mililitres_per_litre\n    return n\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for number in range(100, 1000):\n        if all(number % divisor == 1 for divisor in [5, 6, 7]):\n            return number\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Number of legs for each animal\n    duck_legs = 2\n    goose_legs = 2\n    lamb_legs = 4\n\n    # Given number of ducklings and baby geese\n    ducks_count = 4\n    geese_count = 2\n\n    # Total number of legs from ducks and geese\n    legs_from_ducks_geese = ducks_count * duck_legs + geese_count * goose_legs\n\n    # Total number of legs\n    total_legs = 36\n\n    # Calculation for number of lambs\n    lambs_count = (total_legs - legs_from_ducks_geese) // lamb_legs\n\n    return lambs_count\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_after_third_day = remaining_sweets * (4 / 3)\n    remaining_after_second_day = remaining_after_third_day * (5 / 4)\n    remaining_after_first_day = remaining_after_second_day * (6 / 5)\n    initial_sweets = remaining_after_first_day * (7 / 6)\n    \n    return int(initial_sweets)\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    # Let the number of cookies Hebe had before eating be x\n    # According to the problem, Hebe ate 1/4 of the cookies plus 42 cookies left\n    # So, we have the equation x - x/4 = 42\n    # solving for x gives us x = 42 / (3/4)\n    x = 42 / (3/4)\n    \n    # Emerald had x cookies, and then after eating 1/3 of them plus 4 cookies, she gave the rest to Hebe\n    # Let's denote the number of cookies Emerald had initially by y\n    # y - y/3 - 4 = x\n    y = (x + 4) / (2/3)\n    \n    # Charlene kept half of the total number of cookies plus 8\n    # Let's denote the total number of cookies by z\n    # z/2 + 8 = y\n    z = (y - 8) * 2\n    \n    return z\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    # Total uniforms to be made\n    total_uniforms = 3600\n    \n    # Uniforms made in the first 5 days\n    uniforms_made_first_5_days = 720\n    \n    # Calculate the uniforms made per day\n    uniforms_per_day = uniforms_made_first_5_days / 5\n    \n    # Calculate how many days are needed to complete the order\n    total_days_needed = total_uniforms / uniforms_per_day\n    \n    return total_days_needed\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def climb_ways(steps):\n        if steps == 1 or steps == 0:\n            return 1\n        elif steps == 2:\n            return 2\n        else:\n            return climb_ways(steps - 1) + climb_ways(steps - 2)\n    \n    # First find ways to reach the 5th step\n    ways_to_5th_step = climb_ways(5)\n    # Then find ways to reach from the 5th step to the 10th step\n    ways_from_5th_to_10th = climb_ways(10 - 5)\n    \n    # Total different ways is the product of ways_to_5th_step and ways_from_5th_to_10th\n    return ways_to_5th_step * ways_from_5th_to_10th\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 45\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solution = solve(equation, boys)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Number of matches is given by the formula M = n*(n-1) where n is the number of teams\n    # Since each match is played twice, we have to divide the total matches by 2 to get the matches for one round\n    # Therefore, the equation is 30 = n*(n-1)/2\n    # Now we need to solve this quadratic equation for positive n\n\n    # Importing the necessary function for solving equations\n    from sympy import symbols, Eq, solve\n\n    # Defining a symbol for the number of teams\n    n = symbols('n', integer=True, positive=True)\n\n    # Defining the equation based on the information provided\n    equation = Eq(n*(n-1)/2, 30)\n\n    # Solving the equation\n    teams = solve(equation, n)\n\n    # Filtering positive solutions since number of teams can't be negative\n    num_teams = [i.evalf() for i in teams if i.is_real and i > 0]\n\n    # There should only be one positive solution in the context of this question\n    if len(num_teams) == 1:\n        return num_teams[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    # Loop through the numbers from 40 to 50 to find the square number.\n    for i in range(40, 51):\n        if (i**0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    jug_initial = 150\n    cup_volume = 40\n    cups_poured = 3\n\n    water_left = jug_initial - (cup_volume * cups_poured)\n\n    return water_left\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    prime_factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    factor_2_count = sum(factor == 2 or factor % 2 == 0 for factor in prime_factors)\n    factor_5_count = sum(factor == 5 or factor % 5 == 0 for factor in prime_factors)\n\n    zero_count = min(factor_2_count, factor_5_count)\n    \n    return zero_count\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    equation2 = Eq(alice + sister + 10 + 10, 53)  # In 10 years, their total age will be 53\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import solve, Eq, symbols\n\n    # Define the symbols for four consecutive numbers x, x+1, x+2, x+3\n    x = symbols('x', integer=True)\n    \n    # Define the equation representing the product of four consecutive numbers equal to 3024\n    equation = Eq(x*(x + 1)*(x + 2)*(x + 3), 3024)\n    \n    # Solve the equation for x\n    solutions = solve(equation, x)\n    \n    # Find the largest solution and calculate the largest number\n    largest_x = max(solutions)\n    largest_number = largest_x + 3  # The largest of the four consecutive numbers\n    \n    return largest_number\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n    \n    # Find the least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Calculate the least number of packs he needs to buy\n    min_packs = -(-1000 // pack_lcm)\n    \n    return min_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    num_handshakes = num_students * (num_students - 1) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cards Alan has\n    # Then Bob has x + 15 cards\n    # After Colin gives Bob cards, Bob has x + 15 + 25\n    # At the end Bob has 3 times the cards Alan has, so 3 * x\n    # Setting up the equation: x + 15 + 25 = 3 * x\n    \n    x = symbols('x')\n    equation = Eq(x + 15 + 25, 3 * x)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    n1 = 0.1 + (1 / 90) + (9925 / 999000) + (1 / 90000) * (7 / 9)\n    n2 = 0.2 + (3 / 90) + (456 / 9990) + (1 / 9000) * (7 / 9)\n\n    # Convert fractions to decimals and find the pattern\n    n1_str = format(n1, '.60f')\n    n2_str = format(n2, '.60f')\n\n    # Find the smallest index n where the nth decimal places match\n    for n in range(len(n1_str)):\n        if n1_str[n] == n2_str[n] == '7':\n            return n - 1  # Subtract 1 because index starts at 0\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n    closest = min(numbers, key=lambda x: abs(x - target))\n    \n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    return abs((20 / 100) * 90 - (90 / 100) * 20)\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n    \n    total_ratio = orange_ratio + water_ratio\n    water_amount = (water_amount / orange_ratio) * water_ratio\n    \n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    desired_average = 8.5\n    num_judges = 5\n\n    total_current_scores = sum(scores)\n    total_required_scores = desired_average * num_judges\n    \n    final_judge_score = total_required_scores - total_current_scores\n\n    return final_judge_score\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    johnny_result = (quotient * remainder) + divisor\n    correct_result = (quotient * divisor) + remainder\n\n    if johnny_result == correct_result:\n        return (\"Johnny's answer is correct.\", correct_result)\n    else:\n        return (\"Johnny's answer is incorrect.\", correct_result)\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # Total pages read\n    total_pages = 550\n    # Pages read on the first day\n    first_day_pages = 30\n    # Pages read on the last day\n    last_day_pages = 70\n    \n    # Since he reads the same amount more each day than the day before,\n    # we know that the number of pages read forms an arithmetic sequence.\n    # Using the formula for the sum of an arithmetic sequence:\n    # S = n/2 * (a1 + an)\n    # where S is the total sum of the sequence, n is the number of terms,\n    # a1 is the first term, and an is the last term.\n    \n    # We know the total sum S (total_pages), the first term a1 (first_day_pages),\n    # and the last term an (last_day_pages). We need to find n (the total number\n    # of days Jason read the book) and d (the common difference - pages more each day).\n\n    # Rearrange the formula to solve for n:\n    # n = 2S / (a1 + an)\n    # Note: n must be an integer because you can't read for a fraction of a day\n    n = 2 * total_pages / (first_day_pages + last_day_pages)\n    \n    # The sum of the sequence also equals the sum of the first and last term:\n    # S = n/2 * (a1 + a1 + (n - 1)*d)\n    # Solve for d (the common difference):\n    # d = (an - a1) / (n - 1)\n    d = (last_day_pages - first_day_pages) / (n - 1)\n    \n    return int(d)\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    final_number = 43\n    original_number = (final_number - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    principal = 10000\n    total_interest = 816\n    # Compound interest for 2 years\n    # A = P(1 + r/n)^(nt) where A is amount, P is principal, r is interest rate, n is compunded number of times per year = 1 for annually, t is number of years\n    # Here, A = P + interest. We are given A and P.\n    # Rearrange the equation to find r.\n    # A = P + total_interest => P(1 + r)^2 = P + total_interest\n    # (1 + r)^2 = (P + total_interest) / P\n    # 1 + r = ((P + total_interest) / P) ** (1/2)\n    # r = ((P + total_interest) / P) ** (1/2) - 1\n    interest_rate = ((principal + total_interest) / principal) ** (1/2) - 1\n    # Convert rate to percentage\n    interest_rate_percent = interest_rate * 100\n    return interest_rate_percent\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    return 3.7 + 5.7\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    speed_hannah = symbols('speed_hannah')\n\n    # Given ratio of time taken by Peter to Hannah: Peter_time:Hannah_time = 3:4\n    # Since distance is the same for both, using the inverse ratio for speed: Peter_speed:Hannah_speed = 4:3\n    # Peter_speed is 15 cm/s faster than Hannah's speed: Peter_speed = speed_hannah + 15\n    \n    # Equation based on the inverse ratio of speed\n    equation = Eq((speed_hannah + 15)/speed_hannah, 4/3)\n\n    # Solve the equation\n    solution = solve(equation, speed_hannah)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_multiple_choice = 23\n    time_spent_fill_in_blank = 35\n    time_remaining = total_time - time_spent_multiple_choice - time_spent_fill_in_blank\n    return time_remaining\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # train speed in meters per second\n    time = 45  # time in seconds\n    train_length = 850  # train length in meters\n\n    # distance = speed * time\n    total_distance_covered = train_speed * time\n\n    # length of the tunnel = total distance - length of the train\n    tunnel_length = total_distance_covered - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    \n    # The maximum number of parts with n circles is given by n^2 + n + 2\n    max_parts_with_circles = circles**2 + circles + 2\n    \n    # Each additional line can intersect the plane and existing circles at most 2n+1 times, creating that many new regions\n    max_new_parts_with_line = 2 * circles + 1\n    \n    # The sum of parts from circles and the new parts from the line gives the total maximum parts\n    ans = max_parts_with_circles + max_new_parts_with_line\n    \n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the total number of coins Owen had initially\n    # let y be the number of fifty-cent coins Owen had initially\n    x, y = symbols('x y')\n    # Based on the given information,\n    # y = 2/7 * x (initial fifty-cent coins are 2/7 of total)\n    equation1 = Eq(y, 2/7 * x)\n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins,\n    # which means his mother gave him 10 fifty-cent coins.\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins:\n    # (x - y) + 10 (initial one-dollar plus the ten given) = 2 * (y + 10) (twice the fifty-cent coins)\n    equation2 = Eq((x - y) + 10, 2 * (y + 10))\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    entrances = 4\n    # Joe, Mike, and Tina are represented by 'J', 'M', and 'T'\n    people = ['J', 'M', 'T']\n\n    # Count the valid permutations\n    count = 0\n    for perm in permutations(range(entrances), len(people)):\n        # Joe and Mike must not use the same entrance, their index is 0 and 1\n        if perm[0] != perm[1]:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_savings = 32.50\n    total_spent = 55 - total_savings\n    # Let's denote the amount spent on transportation as x.\n    # Then the amount spent on food is 2x.\n    # Therefore, total_spent = x (transportation) + 2x (food) = 3x.\n    # Solve for x: total_spent = 3x\n    x_transportation = total_spent / 3\n    money_spent_on_food = 2 * x_transportation\n    return money_spent_on_food\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Initial costs and rates\n    fixed_fee = 4\n    first_3_tons_rate = 4\n    additional_rate = 3\n    \n    # Total money available to spend on water\n    total_money = 109\n    \n    # Money spent on the first 3 tons\n    first_3_tons_cost = 3 * first_3_tons_rate\n    \n    # Remaining money for additional water usage\n    money_for_additional_usage = total_money - fixed_fee - first_3_tons_cost\n    \n    # Tons of water with the remaining money (excluding the fixed fee and first 3 tons)\n    additional_tons = money_for_additional_usage // additional_rate\n    \n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n    \n    return int(total_tons)\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    smallest_dividend = quotient * (remainder + 1) + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, bala, daniel = symbols('carl bala daniel')\n\n    equation1 = Eq(bala, amelia / 2 + carl + daniel)\n    equation2 = Eq(carl, 3 / 4 * (amelia + bala + daniel))\n    equation3 = Eq(daniel, bala - 320)\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, bala, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    quick_gardener, lazy_gardener = symbols('quick_gardener lazy_gardener')\n\n    # Equation representing the rate at which the work is done\n    # 1 job (mowing the lawn) is done by both in 8 hours\n    equation1 = Eq(1 / quick_gardener + 1 / lazy_gardener, 1 / 8)\n\n    # Quick gardener can do the job on his own in 12 hours\n    equation2 = Eq(1 / quick_gardener, 1 / 12)\n\n    solutions = solve((equation1, equation2), (quick_gardener, lazy_gardener))\n\n    return solutions[lazy_gardener]\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of apples and oranges.\n    apples, oranges = symbols('apples oranges')\n\n    # Equation representing the relationship between apples and oranges.\n    equation1 = Eq(oranges, apples + 32)\n\n    # Equation representing the number of fruits Steve has after giving away some.\n    equation2 = Eq((apples - apples / 3) + (oranges - oranges / 2), 100)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Calculate the total number of fruits Steve had at first.\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Eve's candy + Alice's candy\n    number_of_girls = 3  # Eve, Alice, and Irene\n    \n    # Divide the total number of candy by the number of girls to get the amount each girl gets\n    candy_per_girl = total_candy // number_of_girls\n    \n    return candy_per_girl\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    given_tomatoes = 7\n\n    matthew_tomatoes = belinda_tomatoes - given_tomatoes\n    matthew_initial = matthew_tomatoes - given_tomatoes\n\n    return matthew_initial\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_money = 182\n    dress_cost = 5\n    skirt_cost = 3\n    remaining_money = 5 * x\n\n    equation = Eq(initial_money - (dress_cost * x + skirt_cost * x), remaining_money)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    import math\n    ans = math.floor(2017) - math.floor(201.7) + math.floor(20.17) - math.floor(2.017)\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 0\n    product = 1\n    for i in range(1, 15, 2):\n        product *= i\n        ans += product\n    ans += 14  # Adding the last term in the series >> 1 * 14\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # Jug capacity in mL\n    half_jug = jug_capacity / 2  # Half of the jug's capacity\n    capacity_per_cup = half_jug / 3  # Capacity of each cup\n    return capacity_per_cup\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import gcd\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    lcm = (green_line_interval * red_line_interval) // gcd(green_line_interval, red_line_interval)\n\n    hours = lcm // 60\n    minutes = lcm % 60\n\n    start_time = 5 * 60  # 5 am in minutes\n\n    next_meeting_time = start_time + lcm\n    meeting_hours = next_meeting_time // 60\n    meeting_minutes = next_meeting_time % 60\n\n    return f\"{meeting_hours}:{str(meeting_minutes).zfill(2)} am\"\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Assuming a constant walking speed, calculate the speed\n    distance = (101 - 1) * 3  # Distance from the first tree to the 101th tree\n    time_minutes = 3           # Time taken to walk this distance\n    speed_m_per_min = distance / time_minutes  # Speed in meters per minute\n    \n    # Total distance to the school is 4000 meters\n    total_distance_to_school = 4000\n    \n    # Time taken to travel 4000 meters at the calculated speed\n    time_to_school_minutes = total_distance_to_school / speed_m_per_min\n\n    return time_to_school_minutes\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    # Price of 100 grams of rabbit food\n    price_per_100g = 80\n\n    # Calculate the price of 250 grams\n    price_per_250g = (price_per_100g / 100) * 250\n\n    return price_per_250g\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    sum_of_squares = sum((4*i)**2 for i in range(1, (124//4)+1))\n    return sum_of_squares\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen trades 5 fish for 2 rabbits\n    fish_to_rabbits = 5 / 2\n\n    # Oscar trades 4 rabbits for 7 packs of wheat\n    rabbits_to_wheat = 4 / 7\n\n    # Calculate the fish-to-wheat ratio by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    # Dennis wants 14 packs of wheat, so we calculate how many fish Owen should give for 14 packs\n    fish_for_14_wheat = 14 / fish_to_wheat\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_marks = 23\n    correct_answer_mark = 5\n    wrong_answer_mark = -2\n    number_of_questions = 6\n    for correct_answers in range(number_of_questions + 1):\n        wrong_answers = number_of_questions - correct_answers\n        marks = correct_answers * correct_answer_mark + wrong_answers * wrong_answer_mark\n        if marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution = solve(equation, justin)\n\n    return solution[0]\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals originally be 'x'\n    x = symbols('x')\n\n    # 65% of them were cows\n    cows = 0.65 * x\n    # The rest were goats\n    goats = x - cows\n\n    # When 240 more cows and goats were added\n    new_total = x + 240\n    # The percentage of cows increased by 20% to 85%\n    new_cows = 0.85 * new_total\n    # The number of goats doubled\n    new_goats = 2 * goats\n\n    # The number of new cows is also the old number of cows plus 240 added animals\n    equation = Eq(new_cows, cows + 240)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    # Calculate the goats at the start\n    initial_goats = goats.subs(x, solution_x[0])\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    minutes_per_drawing = 124\n    number_of_drawings = 111\n    \n    total_minutes = minutes_per_drawing * number_of_drawings\n    \n    return total_minutes\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    # There are 3 scenarios:\n    # 1. All four people choose different entrances - this is not possible because there are not enough entrances\n    # 2. Three people choose the same entrance, one person chooses a different entrance - this cannot happen as each entrance must have at least one person\n    # 3. Two people choose one entrance, and the other two choose the remaining entrances - this can happen in several ways.\n\n    # Counting the ways for scenario 3:\n    # Choose 2 people to enter the same entrance - This can be done in C(4,2) ways.\n    # Those people can choose among 3 entrances - So multiply by 3.\n    # Remaining two people can choose between the 2 remaining entrances in 2! ways.\n    # Total ways = C(4,2) * 3 * 2!\n    \n    from math import comb, factorial\n\n    # Calculate combinations and permutations\n    ways_for_two_same = comb(4, 2)  # Choosing 2 out of 4\n    entrance_choices = 3             # They can choose any of the 3 entrances\n    permutations_for_two = factorial(2)  # Remaining two can enter the remaining entrances in 2! ways\n\n    # Calculate total number of ways\n    total_ways = ways_for_two_same * entrance_choices * permutations_for_two\n    return total_ways\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    # We need to find the smallest number\n    # of cookies that can be exactly divided by 8\n    # and leaves a remainder of 1 when divided by 9\n    cookies = 1\n    while True:\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_amount = total_cost - discount\n\n    return final_amount\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    return 828 + 191\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    ans, _ = solve_congruence(*congruences)\n\n    while ans < 100:\n        return ans\n        ans += 4 * 5 * 6  # LCM of 4, 5, and 6\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    for age in ages:\n        if age % 3 == 0 and age != 10:\n            adam_age = age\n            break\n    return adam_age\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    current_number = \"2023\"\n    n = 1\n\n    while True:\n        if int(current_number) % 11 == 0:\n            return n\n        else:\n            current_number += \"2023\"\n            n += 1\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    import math\n    # There are 2 boys and 3 girls\n    # Boys must be at the ends - 2 possible arrangements for 2 boys\n    boy_arrangements = math.factorial(2)\n    # Girls are in the middle - 3! possible arrangements for 3 girls\n    girl_arrangements = math.factorial(3)\n    # Applying the multiplication principle\n    total_arrangements = boy_arrangements * girl_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Pigeonhole principle: To ensure 3 different colors,\n    # draw all from one color + all but one from second color + 1 from third color\n    # This is worst case scenario to ensure 3 different colored balls are drawn.\n    # Therefore, drawing 5 (all red) + 4 (one less white, could've been all white) + 1 = 10 balls\n    ans = 5 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 / 21\n    return ans\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    # Define the symbols as variables\n    triangle = 1  # Since triangle + triangle = square, we can assume triangle is 1\n    square = 2 * triangle  # From the first equation triangle + triangle = square\n    circle = square + triangle  # From the second equation square + triangle = circle\n    diamond = circle + square + triangle  # From the third equation diamond = circle + square + triangle\n\n    # Calculate the number of triangles that are equal to diamond\n    num_triangles = diamond // triangle\n\n    return num_triangles\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    laptop_cost = total_money * fraction_used\n    return laptop_cost\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Because everyone gets a different number and at least one apple,\n    # we will give the minimum number of apples to the other children first.\n    # We start by giving 1 apple to the first child, 2 to the second, and so on.\n    # In total, for five other children, we distribute 1+2+3+4+5 apples.\n    apples_to_others = sum(range(1, 6))\n    \n    # Avril gets the remaining apples.\n    avril_apples = 28 - apples_to_others\n\n    return avril_apples\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_sum = original_average * 2\n    new_sum = new_average * 3\n\n    new_number = new_sum - original_sum\n\n    return new_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    last_term = 79\n\n    difference = second_term - first_term\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    # Given ratio of speeds Jocye's speed (J) to Lori's speed (L) is 3:2\n    speed_ratio = 3 / 2\n\n    # Given Lori's speed is 2 meters per second\n    lori_speed = 2\n\n    # Calculate Jocye's speed using the speed ratio\n    jocye_speed = lori_speed * speed_ratio\n\n    # Calculate the distance Jocye can run in 10 seconds\n    time = 10  # in seconds\n    distance = jocye_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    \n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the amounts of money Ken and Lisa have\n    ken_initial, lisa_initial, money_given = symbols('ken_initial lisa_initial money_given')\n\n    # Ken had $15 more than Lisa initially\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n\n    # After Ken gave some of his money to Lisa, he had $21 less than Lisa\n    equation2 = Eq(ken_initial - money_given, lisa_initial + money_given - 21)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, money_given))\n\n    # return the amount of money Ken gave to Lisa\n    return solutions[money_given]\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef time_diff(start_time, end_time):\n    fmt = '%H:%M'\n    tdelta = datetime.strptime(end_time, fmt) - datetime.strptime(start_time, fmt)\n    return tdelta\n\ndef solution():\n    time_left_school = '15:22'\n    time_caught_bus = '16:01'\n    time_bus_ride = timedelta(minutes=18)\n    time_got_home = '16:35'\n\n    walking_to_bus_stop = time_diff(time_left_school, time_caught_bus)\n    time_arrived_at_drop_off = (datetime.strptime(time_caught_bus, '%H:%M') + time_bus_ride).strftime('%H:%M')\n    walking_home = time_diff(time_arrived_at_drop_off, time_got_home)\n    \n    total_walking_time = walking_to_bus_stop + walking_home\n    \n    return total_walking_time.seconds // 60\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n    # Sum of an arithmetic series: n/2 * (first_term + last_term)\n    # Here, n = 5 days, first_term = x, last_term = x + 4*6\n    total_cookies = 100\n    # Equation for the sum of cookies eaten over 5 days\n    equation = Eq(5/2 * (x + (x + 4*6)), total_cookies)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    numbers = []\n    for i in range(1, 9):\n        numbers += [i] * (i + 1)  # Write i (i+1) times\n\n    median_index = len(numbers) // 2\n    # If the list length is odd, return the middle number\n    if len(numbers) % 2 != 0:\n        median = numbers[median_index]\n    # If the list length is even, take the average of the middle two numbers\n    else:\n        median = (numbers[median_index] + numbers[median_index - 1]) / 2\n        \n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    blue = 18\n    red = 6\n    orange = 8\n    \n    # Worst case: picking all marbles that are not red first\n    non_red = blue + orange\n    \n    # Then pick both red marbles\n    must_pick = non_red + 2\n\n    return must_pick\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = ['3', '1', '9', '2']\n    max_number = int(''.join(sorted(digits, reverse=True)))\n    min_number = int(''.join(sorted(digits)))\n    \n    return max_number - min_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students = [True] * 30  # True represents facing the teacher\n    for i in range(2, 31, 2):  # Multiples of 2\n        students[i - 1] = not students[i - 1]\n    for i in range(3, 31, 3):  # Multiples of 3\n        students[i - 1] = not students[i - 1]\n    return sum(students)  # Count how many are still facing the teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x)**0.5 + 36**0.5, 81**0.5)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n\n    # Calculate common difference (d) of arithmetic sequence\n    common_difference = (fourth_term - first_term) / (4 - 1)\n    \n    # Athletes in the last row (last term)\n    last_term = first_term + (number_of_rows - 1) * common_difference\n    \n    # Sum of n terms of arithmetic sequence: n/2 * (first term + last term)\n    total_athletes = number_of_rows / 2 * (first_term + last_term)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # If you initially choose a goat (which is a 2/3 chance), switching will win you the car.\n    # If you initially choose the car (which is a 1/3 chance), switching will get you a goat.\n    # Therefore, you should always switch, because switching gives you a 2/3 chance of winning the car.\n    # The variable \"ans\" should reflect your final choice.\n    # Since you always switch, \"ans\" should represent choosing gate 2.\n\n    ans = \"Choose gate 2\"\n    return ans\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    dividend = 2184\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total = sum(i * (i + 1) for i in range(1, 32))\n    return total\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    # Starting from 2, as we know the smallest number should have a remainder of 2 when divided by 3 and 4.\n    number = 2\n    while True:\n        if number % 4 == 2 and number % 3 == 2 and number % 7 == 1:\n            return number\n        # Increment by the LCM of 4 and 3 to maintain the remainders with 4 and 3,\n        # since any number that satisfies the condition will be of the form 12n + 2\n        number += 12\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # The problem is equivalent to choosing 1 book for each of the three students \n    # from the seven different books. After giving out 3 books, \n    # the order in which the students receive the books doesn't matter.\n    # This is a combination problem where we choose 3 books from 7:\n    # C(7, 3)\n    \n    n_books = 7\n    r_students = 3\n    \n    return factorial(n_books) // (factorial(r_students) * factorial(n_books - r_students))\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n\n    spent_on_CDs = 75\n    remaining_after_CDs = original_sum - spent_on_CDs\n    spent_on_batteries = remaining_after_CDs / 4\n\n    equation = Eq(remaining_after_CDs - spent_on_batteries, original_sum / 3)\n\n    ans = solve(equation, original_sum)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    number_of_friends = 12\n    tommy = 1\n    minutes_spent = 142\n    total_people = number_of_friends + tommy\n\n    total_minutes = total_people * minutes_spent\n\n    return total_minutes\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # In 7 minutes, 7 trainers can catch 7 Pokémon, which means\n    # each trainer catches 1 Pokémon in 7 minutes.\n\n    # To catch 49 Pokémon in 49 minutes, each trainer will still\n    # catch 1 Pokémon in 7 minutes. Since the time is also\n    # multiplied by 7 (49 minutes instead of 7), the number of\n    # Pokémon caught will be multiplied by the same factor (from\n    # 7 to 49) without needing to change the number of trainers.\n\n    # Hence, the number of trainers needed remains the same.\n    return 7\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Splitting the given number into a pattern \"928\" repeated 33 times \n    # as 99 digits will have \"928\" repeated 99/3 = 33 times.\n    pattern = \"928\"\n    repeats = 99 // len(pattern)  # we know len(pattern) is 3\n\n    # Converting the repeated pattern into an integer\n    number_str = pattern * repeats\n    number = int(number_str)\n\n    # Calculating the remainder when this number is divided by 9\n    remainder = number % 9\n\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol\n    oplus = symbols('oplus')\n\n    # Set up the equation\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    # Solve the equation\n    solution = solve(equation, oplus)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_number = min(numbers, key=lambda x: abs(x - 2.5))\n    return closest_number\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4]\n    min_value = float('inf')\n    for perm in permutations(digits):\n        # Check if the number is even by ensuring the last digit is even\n        if perm[-1] % 2 == 0:\n            value = int(''.join(map(str, perm)))\n            if 1000 <= value < min_value:\n                min_value = value\n    return min_value\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbolic variables for the three numbers\n    x, y, z = symbols('x y z')\n\n    # The sum of three numbers is 56\n    equation1 = Eq(x + y + z, 56)\n\n    # The average of the smallest two numbers is 14 -> (x + y) / 2 = 14\n    equation2 = Eq((x + y) / 2, 14)\n\n    # The average of the largest two numbers is 22 -> (y + z) / 2 = 22\n    equation3 = Eq((y + z) / 2, 22)\n\n    # As x is the smallest and z is the largest, solve the system for x, y, z\n    # However, to obtain just one possible solution we should assume x < y < z (or x > y > z). Let's assume x < y < z.\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Finding the suitable solution where x < y < z\n    for sol in solutions:\n        if sol[x] < sol[y] < sol[z]:\n            # The median will be y as it is the middle value when ordered\n            median = sol[y]\n            break\n\n    return median\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10\n    container_volume = 2\n\n    num_containers = total_volume // container_volume\n\n    return num_containers\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    sour_price = 12  # price of a 'Sour Sweets' bar in pence\n    chocolate_price = 17  # price of a 'Chocolate Drops' bar in pence\n    eliot_paid = 300  # Eliot paid with three £1 coins, which is 300p\n    maya_paid = 400  # Maya paid with four £1 coins, which is 400p\n    num_bars = symbols('num_bars')\n\n    # Set up the equations for Eliot and Maya's change\n    eliot_change = Eq(eliot_paid - sour_price * num_bars)\n    maya_change = Eq(maya_paid - chocolate_price * num_bars)\n\n    # Since they receive the same amount of change, the changes are equal\n    equation = Eq(eliot_change.rhs, maya_change.rhs)\n    \n    # Solve the equation for the number of bars\n    solutions = solve(equation, num_bars)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n\n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one pork dumpling and one bun\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    # The solution for the price of one pork dumpling\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    jackson, chloe = symbols('jackson chloe')\n    \n    # Equation 1: sum of their current ages\n    equation1 = Eq(jackson + chloe, 54)\n    \n    # Equation 2: Jackson's age in 3 years is 5 times Chloe's age in 3 years\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    # Select Jackson's age and add 3 years for the future age\n    jackson_age_in_3_years = solutions[jackson] + 3\n    \n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    return 297 + 198 + 204 + 99\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_cost = 8.5\n    base_km = 1.8\n\n    additional_cost = total_cost - base_fare\n    additional_km = additional_cost / additional_fare_per_km\n    total_km = base_km + additional_km\n\n    return total_km\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, red, blue = symbols('yellow red blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(yellow + red + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Let x be the number of students in the class\n    x = symbols('x')\n\n    # Applying Pigeonhole Principle, if at least one student gets 3 apples\n    # then the maximum number of students would be when all others get 2\n    # apples each (worst-case scenario for number of students)\n    # So, if there are x students and one gets 3 apples, the remaining \n    # (80 - 3) apples can be distributed as 2 per student. \n    # The equation becomes: 3 + 2*(x - 1) <= 80\n\n    # Solve this inequality for x\n    equation = Eq(3 + 2*(x - 1), 80)\n    max_students = solve(equation, x)[0]\n\n    # Since the obtained number is the maximum number of students where one \n    # gets at least 3 apples, we get the class size by subtracting 1\n    return max_students - 1\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_bars = 8\n    original_bars = received_bars * 2\n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    \n    children_per_big_car = 4\n    children_per_small_car = 2\n    \n    big_cars_needed = boys_in_big_cars // children_per_big_car\n    small_cars_needed = girls_in_small_cars // children_per_small_car\n    \n    total_cars_needed = big_cars_needed + small_cars_needed\n    \n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    total_future_age = 100\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    current_sum_ages = julia_age + mother_age + father_age\n    future_years = total_future_age - current_sum_ages\n    return future_years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_to_pounds = 56 / 16\n    pounds_to_kg = ounces_to_pounds / 2.2\n    return round(pounds_to_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate sum of the sequence from 5 to 80\n    sum_to_80 = sum(range(5, 81))\n    # Calculate sum of the sequence from 5 to 79 (excluding the last 80)\n    sum_to_79 = sum(range(5, 80))\n    # The total sum is the sum to 80 plus the sum to 79\n    total_sum = sum_to_80 + sum_to_79\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # Since A wants to stand on the left side of B, and B wants to stand on the left side of C,\n    # treat the trio (A, B, C) as a single unit first. There are two cases to consider for A, B, C:\n    # 1. A B C\n    # 2. A C B\n    # There are 2! ways to arrange ABC or ACB.\n\n    # Now, treat the remaining 2 people and the ABC/ACB unit as 3 units. There are 3! ways to arrange these units.\n    \n    # Multiplying these gives us the total number of arrangements for the 5 people with the given conditions.\n    return 2 * factorial(3) * factorial(2)\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (n * (n + 7)) for n in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "def solution():\n    from itertools import permutations\n\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        A = (100*a + 10*b + c) + \\\n            (100*b + 10*c + d) + \\\n            (100*c + 10*d + e) + \\\n            (100*d + 10*e + f) + \\\n            (100*e + 10*f + g) + \\\n            (100*f + 10*g + h) + \\\n            (100*g + 10*h + i)\n        max_A = max(max_A, A)\n    \n    return max_A\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(x):\n        return (int(x[0]) - int(x[1])) ** 2\n\n    ans = pattern(\"55\")\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_numbers = sorted(set(int(''.join(p)) for p in permutations(digits, 6) if p[0] != '0'))\n    ans = all_numbers[504]  # Index 504 for the 505th number (0-indexed)\n    return ans\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # For a three-digit number, we cannot have 0 at the hundreds place.\n    # Hence, we have 2 options for the hundred's place (2 or 3)\n    hundreds_place_options = 2\n\n    # After choosing the hundred's place, we have two options remaining for the tens place\n    tens_place_options = 2\n\n    # Finally, the unit's place will be filled by the remaining digit, so only 1 option\n    units_place_option = 1\n\n    # The total number of different three-digit numbers is the product of the options for each place\n    total_numbers = hundreds_place_options * tens_place_options * units_place_option\n    \n    return total_numbers\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls be x\n    # Then the number of boys is (36 - x)\n    # We can set up the equation based on the total average\n    # (girls_average * x + boys_average * (36 - x)) / 36 = total_average\n    for x in range(total_students + 1):\n        if (girls_average * x + boys_average * (total_students - x)) / total_students == total_average:\n            return x\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n\n    # Total work done by Alice and Bob together in 27 days\n    total_work_done = 27 * (alice_work_rate + bob_work_rate)\n\n    # Because total work is 1 (the whole job), we can find the number of days Alice took off\n    # by calculating the difference between her full contribution and actual contribution\n    alice_days_worked = total_work_done / alice_work_rate\n    alice_days_off = 40 - alice_days_worked\n\n    return alice_days_off\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for number in range(21, 50):\n        if number % 6 == 0 and number % 9 == 0:\n            multiples.append(number)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red/white, 1/2)\n    equation2 = Eq(white/black, 3/4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n\n    difference = eighth_term - seventh_term\n\n    first_term = seventh_term - 6 * difference\n    hundredth_term = first_term + 99 * difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # There are 4 red socks and 4 blue socks, making a total of 8 socks.\n    # To ensure one matching pair using the Pigeonhole Principle, take out 5 socks.\n    # This is because taking out 4 could all be of different colors, but one more will ensure a pair.\n    \n    return 5  # Return the minimum number of socks to take for a matching pair\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11 ** 2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) // 2\n    return n\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    # Since each of the 3 dogs was 4 years younger, together they were 3 * 4 = 12 years younger\n    younger_by_years = 3 * 4\n    # Calculate their combined current age\n    current_combined_age = combined_age_4_years_ago + younger_by_years\n    # In 2 years, each dog will be 2 years older, so combined they will be 3 * 2 = 6 years older\n    older_by_years = 3 * 2\n    # Calculate combined age in 2 years\n    combined_age_in_2_years = current_combined_age + older_by_years\n  \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the number of marbles Ryan and Audrey have\n    ryan, audrey = symbols('ryan audrey')\n\n    # create equations based on the problem statement\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    \n    # Minute hand moves 360 degrees in 60 minutes\n    minute_angle = (360 / 60) * minute\n    \n    # Hour hand moves 360 degrees in 12 hours and each hour into 60 min\n    hour_angle = (360 / 12) * hour + (360 / 12) * (minute / 60)\n    \n    angle_diff = abs(minute_angle - hour_angle)\n    \n    # Angle difference should be less than 180 degrees, otherwise subtract it from 360\n    if angle_diff > 180:\n        angle_diff = 360 - angle_diff\n\n    return angle_diff\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_apples + sisters_apples_each * number_of_sisters\n    total_apples_before = total_apples_eaten + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # Total beads per pattern of black, white, red\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n    black_beads_in_full_patterns = full_patterns * 3\n\n    # Incomplete pattern can either give 0, 1, or 2 more black beads\n    extra_black_beads = remaining_beads if remaining_beads <= 3 else 3\n\n    total_black_beads = black_beads_in_full_patterns + extra_black_beads\n\n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    school_arrival_time = datetime.strptime('7:45 AM', '%I:%M %p')\n    wakeup_time = school_arrival_time - timedelta(minutes=total_minutes)\n    return wakeup_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = 0\n    sign = 1\n    \n    for i in range(60, 0, -1):\n        ans += sign * i\n        if i % 2 == 0:  # Change the sign after every pair\n            sign *= -1\n\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote chickens as x, ducks as y, and cows as z\n    x, y, z = symbols('x y z')\n\n    # Since the number of chickens is equal to the number of ducks\n    equation1 = Eq(x, y)\n\n    # We have in total 51 heads\n    equation2 = Eq(x + y + z, 51)\n\n    # We have in total 160 legs (chickens and ducks have 2 each, cows have 4)\n    equation3 = Eq(2*x + 2*y + 4*z, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The number of chickens is x\n    return solutions[x]\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    sums = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                sums.add(total)\n\n    return len(sums)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    total_entrances = 4\n    total_people = 3\n    \n    # Joe has 4 options for entrances.\n    joe_options = total_entrances\n    \n    # Mike has 3 options because he cannot go with Joe.\n    mike_options = total_entrances - 1\n    \n    # Tina has 3 options since she can go to any entrance.\n    tina_options = total_entrances\n    \n    # Ways they can enter without order consideration.\n    ways_without_order = joe_options * mike_options * tina_options\n    \n    # Since the order matters, we need to account for all permutations of the three people.\n    permutations_of_people = math.factorial(total_people)\n    \n    # Multiply the ways without order by the permutations of people to get the total.\n    total_ways = ways_without_order * permutations_of_people\n    \n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice * (1 / 5)\n    abigail_drank = 200\n    anna_drank = 120\n\n    remaining_juice = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n\n    return remaining_juice\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    ans = percentage * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # Total distance in nautical miles\n    total_time_days = 13  # Total time in days\n    total_time_hours = 22  # Additional hours\n\n    # Total time in hours\n    total_time = (total_time_days * 24) + total_time_hours\n\n    # Average speed calculation\n    average_speed = total_distance / total_time\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    last_multiple = 150 // 11\n    \n    num_multiples = last_multiple - first_multiple + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # in liters\n    concentration1 = 0.4  # 40%\n\n    volume2 = 3  # in liters\n    concentration2 = 0.7  # 70%\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = total_juice / total_volume\n\n    return round(new_concentration, 4)  # round to 4 decimal places for precision\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # let x represent the number of women and y represent the number of men initially\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # After 36 women left, the number of women became 3/5 of the number of men\n    equation1 = Eq(x - 36, 3/5 * y)\n    \n    # After 48 men left, the number of men equals the number of women who are left\n    equation2 = Eq(y - 48, x - 36)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Total people at first is the sum of initial men and women\n    total_people = solutions[x] + solutions[y]\n    \n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_again = 777\n    \n    remaining_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_again\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2  # Including Albert and Bella themselves\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    return sum([17, 21, 36, 23, 4, 49, 10])\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes_between_20_and_30 = list(primerange(20, 30))\n    ans = primes_between_20_and_30[0]\n    return ans\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    solutions = []\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14): # ensure x2 > x1\n            for x3 in range(x2+1, 14): # ensure x3 > x2\n                if x1 + x2 + x3 == 14:\n                    solutions.append((x1, x2, x3))\n                    count += 1\n    return solutions, count\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = (1*3*8) + (2*6*16) + (3*9*24)\n    denominator = (1*2*4) + (2*4*8) + (3*6*12)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    range_of_heights = 132 - 124 + 1\n    min_class_size = range_of_heights * (4 - 1) + 1\n    return min_class_size\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's represent Fatouma's current age as 'f'.\n    f = symbols('Fatouma_age')\n\n    # According to the problem:\n    # Fatouma's age in 2 years = f + 2\n    # Fatouma's age 5 years ago = f - 5\n\n    # The equation based on Fatouma's statement:\n    # In 2 years she will be twice as old as she was 5 years ago:\n    # (f + 2) = 2 * (f - 5)\n    \n    equation = Eq(f + 2, 2 * (f - 5))\n\n    # Solve the equation for Fatouma's current age (f).\n    solution = solve(equation, f)\n\n    # Solution will be a list with a single element since it's a linear equation.\n    return solution[0]\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost for three pens at 50p each\n    change = 5 - total_cost  # change from £5\n\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5), 2.5*x + 3*(2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('7:15 PM', '%I:%M %p')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n\n    return start_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    # Apply Inclusion-Exclusion Principle\n    total_students = go + checkers + chess\n    total_students -= go_checkers + go_chess + checkers_chess\n    total_students += all_three\n\n    return total_students\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    \n    total_cost = tickets * cost_per_ticket\n    \n    return total_cost\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years later when their sum of ages will be 48\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n\n    # In x years, Oliver's age will be (oliver_current_age + x)\n    # In x years, Lin's age will be (lin_current_age + x)\n    # Their ages sum to: (oliver_current_age + x) + (lin_current_age + x) = target_sum_age\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((oliver_current_age + x) + (lin_current_age + x), target_sum_age)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    # cube root of 245p must be an integer\n    # 245 = 5 * 7^2, so in order for 245p to be a cube,\n    # p must contain at least one 5 and enough 7's to make the exponent of 7 a multiple of 3\n    # the smallest such p contains one 5 and one more 7 (to make the exponent of 7 equal three)\n    p = 5 * 7\n    return p\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3  # in meters\n\n    # As she passes by 40 poles, there are 39 intervals of 3 meters each\n    num_intervals = num_poles - 1 \n\n    # Total distance is the number of intervals multiplied by distance between poles\n    total_distance = num_intervals * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To guarantee a win, Fred needs to leave a multiple of 4 oranges to George after his first move.\n    # This is because whatever George picks (1, 2, or 3), Fred can pick 4 minus what George picked,\n    # ensuring that he leaves a multiple of 4 again until only 4 are left, and then finally take the last one.\n    \n    # To find out how many Fred should take first, we can think backwards from 15.\n    # The losing positions for the next player are multiples of 4 (4, 8, 12) since the current player can win from there.\n    # So, Fred should leave a total of 12 oranges after his turn, which means he should take 3 on his first turn.\n    \n    # We can also think of it like this: Fred can take 3 initially, leaving 12.\n    # Then, whatever George picks, Fred always has a response:\n    # - If George picks 1, Fred picks 3, leaving 8.\n    # - If George picks 2, Fred picks 2, leaving 8.\n    # - If George picks 3, Fred picks 1, leaving 8.\n    # At every turn, Fred ensures that George is left with a multiple of 4, which is a losing position.\n\n    initial_oranges = 15\n    # The maximum number Fred can take is 3, so he needs to make sure 15 - his move is a multiple of 4.\n    for fred_first_move in range(1, 4):\n        if (initial_oranges - fred_first_move) % 4 == 0:\n            # Fred's first move that guarantees a multiple of 4 remaining for George\n            return fred_first_move\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_to_m_conversion_factor = 100\n    cm_value = 736\n    m_value = cm_value / cm_to_m_conversion_factor\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = 0\n    for i in range(32, 65, 2):\n        ans += i\n        ans -= i - 2\n    return ans\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for all unique letters\n    E, S, A, M, O = symbols('E S A M O', integer=True)\n\n    # Each letter represents a different digit, so they must be between 0 and 9\n    # Also, E and S cannot be 0 because they are the first digits in ESSE\n    assumptions = {\n        E: (1, 9),\n        S: (0, 9),\n        A: (0, 9),\n        M: (0, 9),\n        O: (0, 9),\n    }\n    \n    # Create the equation based on the puzzle\n    equation = Eq(E*1000 + S*100 + S*10 + E + 2018, S*10000 + A*1000 + S*100 + M*10 + O)\n\n    # We know that all letters are different digits, we need to add this as a constraint\n    differ = Eq(len(set([E, S, A, M, O])), 5)\n\n    # Solve the equation with constraints\n    solutions = solve((equation,) + tuple((x >= assumptions[x][0], x <= assumptions[x][1]) for x in (E, S, A, M, O)) + (differ,))\n\n    # Calculate the sum as requested\n    for solution in solutions:\n        if all(diff.isdigit() for diff in map(str, solution.values())):\n            S_val = solution[S]\n            A_val = solution[A]\n            S_val = solution[S]\n            M_val = solution[M]\n            O_val = solution[O]\n            return S_val + A_val + S_val + M_val + O_val\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = this_year_production / 4\n    min_last_year_production = last_year_production + 1\n\n    return min_last_year_production\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # One on sick leave and one on personal leave\n    present_students = total_students - absent_students\n    \n    attendance_rate = (present_students / total_students) * 100\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator = 5 * 8\n    denominator = 15\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 4  # The common difference is the difference between two consecutive terms\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2018):\n        total_sum += sum(j / i for j in range(1, i))\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    rows = 4 + 3 - 1\n    columns = 1 + 4 - 1\n\n    total_members = rows * columns\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    original_ratio = Eq(apples / oranges, 3 / 8)\n    new_ratio = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(x-100))\n    return closest_number\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_savings = 2.4\n    target_amount = 150.0\n    days_needed = target_amount / daily_savings\n    weeks_needed = math.ceil(days_needed / 7)\n    return weeks_needed\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 6.5 / 0.25\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n    num_terms = int((last_term - first_term) / common_difference + 1)\n\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "def solution():\n    from math import factorial\n    from collections import Counter\n\n    word = \"STATISTICS\"\n    letter_count = Counter(word)\n    \n    total_ways = factorial(len(word))\n    \n    for count in letter_count.values():\n        total_ways //= factorial(count)\n    \n    return total_ways\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the weight of a rabbit, c be the weight of a chicken, and k be the weight of a kangaroo.\n    r, c, k = symbols('r c k')\n\n    # According to the problem statement, we have the following equations:\n    equation1 = Eq(2 * r, 6 * c)  # 2 rabbits weigh the same as 6 chickens\n    equation2 = Eq(3 * k, 4 * r)  # 3 kangaroos weigh the same as 4 rabbits\n\n    # Express r in terms of c from equation1 and substitute in equation2\n    solutions = solve((equation1, equation2), (r, c, k))\n\n    # Calculate the weight of one kangaroo in terms of chickens\n    # Since 2 rabbits weigh the same as 6 chickens, 1 rabbit weighs the same as 3 chickens\n    # 4 rabbits weigh the same as 3 * 4 = 12 chickens\n    # Therefore, 3 kangaroos weigh 12 chickens; thus, 1 kangaroo weighs 12 / 3 = 4 chickens\n    weight_kangaroo_in_chickens = solutions[k] / solutions[c]\n\n    return weight_kangaroo_in_chickens\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    return common_factor * (836 + 162 + 2)\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    \n    num_notes = total_amount / note_value\n    \n    return int(num_notes)\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))\n    new_sum = initial_sum + 2019\n\n    # Since the numbers are consecutive, they form an arithmetic progression\n    # The median of this sequence can be used to find the smallest number:\n    # (n/2) * (first_term + last_term) = S\n    # where n is the number of terms, S is the sum, and first_term and last_term are the first and last numbers in the sequence.\n    # However, for an even number of terms, n/2 is not an integer, and we will consider a modified median (center average),\n    # where (n/2) * (first_term + 1 + last_term - 1) = S\n    # Thus we find the modified median (center average):\n    # (n/2) * (first_term + last_term) = S\n    # first_term + last_term = (S * 2) / n\n    # first_term = ((S * 2) / n) - (n - 1)/2\n    \n    for n in range(1, 100):  # We can choose a sensible upper bound, as there are unlikely to be 100+ consecutive numbers summing to this value\n        if (new_sum * 2) % n == 0:\n            center = (new_sum * 2) // n\n            first_term = center - (n - 1) // 2\n            last_term = center + (n - 1) // 2\n            if first_term > 0 and sum(range(first_term, last_term + 1)) == new_sum and (last_term - first_term == n - 1):\n                return first_term\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = {\n        'cut_wood': 3,\n        'weave_grass_rope': 1,\n        'dry_wood': 5,\n        'mow_grass': 1,\n        'prepare_food': 1,\n        'soak_cut_grass': 1,\n        'choose_wood': 1\n    }\n    # Tasks which can be done in parallel with the task that takes the longest time (drying wood)\n    parallel_tasks = ['mow_grass', 'soak_cut_grass', 'weave_grass_rope', 'prepare_food', 'choose_wood']\n    \n    # Find the task that takes the longest time\n    longest_task_time = max(tasks.values())\n    \n    # Calculate the total time for tasks that can be done in parallel with the longest task\n    parallel_time = sum(tasks[task] for task in parallel_tasks)\n    \n    # Since cutting wood can start immediately and then proceed with drying wood, and\n    # all parallel tasks can be started within the drying wood period,\n    # the total time is just the sum of cutting and drying wood\n    total_time = tasks['cut_wood'] + longest_task_time\n    \n    # Check if there's any remaining task time after the longest task is completed\n    remaining_time = parallel_time - longest_task_time\n    if remaining_time > 0:\n        total_time += remaining_time\n        \n    return total_time\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    ans = 342 + 576\n    return ans\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_3_years_ago = ashley_age_now - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_age_now = brother_age_3_years_ago + 3\n    \n    return brother_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 + 15)\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the middle and is the 7th from the front,\n    # so there must be 6 people in front of her and 6 people behind her.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n\n    # Total dwarves = dwarves in front + dwarves behind + Snow White\n    total_dwarves = dwarves_in_front + dwarves_behind + 1  # +1 for Snow White herself\n\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    min_participants_in_most_populous_school = 4\n    # Using the Pigeonhole Principle, we divide the total participants\n    # by the minimum number of participants per the most populous school.\n    # Since we need at least one extra school for the remaining participants,\n    # we take the ceiling of the division.\n    max_schools = (participants - 1) // min_participants_in_most_populous_school + 1\n    \n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_sum = (num_terms * (first_term + last_term)) // 2\n    return total_sum\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    ans = sum((2018 + i) / 5 - (2018 + i) // 5 for i in range(1, 2019))\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num % 6 == 0) and (num // 6)**0.5 % 1 == 0 and (num * 6)**(1/3) % 1 == 0:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Define the speeds of the two trains\n    speed_fast = 48\n    speed_slow = 36\n\n    # Since they are travelling towards each other, their relative speed is sum of their speeds\n    relative_speed = speed_fast + speed_slow\n\n    # Define the difference in distance travelled when they pass each other\n    distance_diff = 70\n\n    # Calculate the time it takes for the faster train to travel 70 km more than the slower one\n    time = distance_diff / (speed_fast - speed_slow)\n\n    # Now calculate the distance between the two stations\n    # which is the total distance travelled by both trains when they pass each other\n    total_distance = relative_speed * time\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim's position tells us the number of rows and columns in the array\n    # Rows: 4th from front and 3rd from back implies there are 4 + 3 - 1 = 6 rows\n    rows = 4 + 3 - 1\n    \n    # Columns: 4th from left and 7th from right implies there are 4 + 7 - 1 = 10 columns\n    columns = 4 + 7 - 1\n    \n    # The total number of band members is the product of rows and columns in the array\n    total_band_members = rows * columns\n    \n    return total_band_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import gcd\n\ndef solution():\n    nums = [2, 3, 8]\n    lcm = nums[0]\n    for num in nums[1:]:\n        lcm = lcm * num // gcd(lcm, num)\n    return lcm\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 7 == 1 and num % 9 == 5:\n            break\n    return num\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, 8 * gigi)\n    equation2 = Eq(lily - 36 - (gigi + 36), 26)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin_lost in coins:\n        if (total - coin_lost) == 2 * (total - (total - coin_lost)):\n            return coin_lost\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (4/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat_count = 1  # Start from 1 boat and increase\n    \n    while True:\n        if ((boat_count + 1) * 6 == (boat_count - 1) * 9):\n            students = (boat_count + 1) * 6\n            break\n        boat_count += 1\n\n    return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            tens = thousands + hundreds\n            if tens >= 10:\n                continue\n            ones = thousands + hundreds + tens\n            if ones >= 10:\n                continue\n            if thousands + hundreds + tens + ones == 16:\n                return ones\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    # The first digit can only be 2 or 4 (no leading zero).\n    first_digit_options = 2\n    \n    # The second digit can be any of the three numbers.\n    second_digit_options = 3\n    \n    # The total number of different two-digit numbers is the product.\n    total_numbers = first_digit_options * second_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    total_chocolates = solutions[chocolates]\n    chocolates_left_with_20_each = total_chocolates - 20 * solutions[friends]\n\n    return chocolates_left_with_20_each\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    eq1 = Eq(rasidah, chai_seng - 48)\n    # Rasidah spent 3/5 of her money\n    eq2 = Eq(rasidah * (2/5), rasidah - rasidah * (3/5))\n    # Chai Seng spent 6/7 of his money\n    eq3 = Eq(chai_seng * (1/7), chai_seng - chai_seng * (6/7))\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    eq4 = Eq(chai_seng * (1/7), (rasidah * (2/5)) / 2)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq4), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007) ** 2\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([2, 4, 6, 8], 4):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance covered uphill and downhill\n    distance_uphill = 3 * 5  # time * speed\n    distance_downhill = 2 * 10  # time * speed\n    \n    # Calculate the total distance and total time\n    total_distance = distance_uphill + distance_downhill\n    total_time = 3 + 2\n    \n    # Calculate the average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Let x be the number of kilowatt-hours used beyond the first 5 kWh.\n    # Fixed cost for the first 5 kWh + Service fee = 5 * 2 + 3 = $13\n    # Each additional kilowatt-hour costs $1, so additional cost is x * 1 = $x.\n    # Total cost is the fixed cost + additional cost, which should equal $63.\n    # Therefore, the equation is 13 + x = 63.\n    # Solving for x gives us the additional kilowatt-hours used.\n    # The total number of kilowatt-hours used is the first 5 kWh plus the additional kWh (x).\n\n    total_cost = 63\n    fixed_cost_and_service_fee = 5 * 2 + 3\n    additional_cost = total_cost - fixed_cost_and_service_fee\n\n    # Now, x represents just the additional kilowatt-hours beyond the initial 5.\n    x = additional_cost / 1  # because each additional kWh costs $1\n\n    # Finally, we add the initial 5 kWh to the additional kWh to get the total kilowatt-hours used.\n    total_kwh_used = 5 + x\n\n    return int(total_kwh_used)\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_of_63 = 54\n    total = 63\n\n    fraction = fraction_of_63 / total\n\n    ans = fraction * 7\n\n    return ans\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for n in range(1, 3*7*11):\n        if n % 3 == 2 and n % 7 == 6 and n % 11 == 10:\n            return n\n    return None\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 400 * x + 40 * y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    small_boxes_needed = (total_cookies + small_box_capacity - 1) // small_box_capacity  # using ceiling division\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    # Calculate the total amount of fruit juice in each punch\n    fruit_juice_in_first_punch = 20 * 0.35\n    fruit_juice_in_second_punch = 30 * 0.60\n    \n    # Calculate the total volume of the punch\n    total_punch_volume = 20 + 30\n    \n    # Calculate the total amount of fruit juice in the mixture\n    total_fruit_juice = fruit_juice_in_first_punch + fruit_juice_in_second_punch\n    \n    # Calculate the concentration percentage of the mixture\n    concentration_percentage = (total_fruit_juice / total_punch_volume) * 100\n    \n    return concentration_percentage\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of grain in warehouse B\n    x = symbols('x')\n\n    # Warehouse A originally had 50 tons and later received 12 tons => 50 + 12\n    # Warehouse B had x tons originally and then shipped out 16 tons => x - 16\n    # The grain in warehouse A is 2 times that of warehouse B => (50 + 12) = 2 * (x - 16)\n\n    equation = Eq(50 + 12, 2 * (x - 16))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_pass = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    # a, b, and c are the number of pupils that passed all three tests.\n    # Maximum value for a, b, and c would be when all 43 students who passed at least one test, passed exactly two of them.\n    # That means, we need to check for the minimum of a, b, and c that satisfies the equation:\n    # total_pass = math_pass + science_pass + english_pass - (a + b + c) - 2 * (total_pass - (a + b + c))\n    # as per the inclusion-exclusion principle.\n\n    # rearranging the equation:\n    # a + b + c = math_pass + science_pass + english_pass - total_pass\n    all_three_pass = math_pass + science_pass + english_pass - total_pass\n\n    # The answer cannot be negative, so we take the max between calculated value and 0\n    return max(all_three_pass, 0)\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    \n    total_perms = factorial(len(word))\n    for freq in letter_freq.values():\n        total_perms //= factorial(freq)\n        \n    return total_perms\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]\n    \n    # Identify the missing prime number\n    for i in range(len(primes) - 1):\n        if primes[i] + 2 != primes[i+1]:\n            ans = primes[i] + 2\n            break\n\n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.50 * 0.20 * 6000\n    return ans\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Calculate the equivalent number of fishes for one rabbit\n    fishes_per_rabbit = 3  # 3 fishes for 1 rabbit\n    \n    # Calculate the equivalent number of rabbits for one pack of wheat\n    rabbits_per_wheat = 2 / 3  # 2 rabbits for 3 packs of wheat\n    \n    # Calculate the equivalent number of fishes for one pack of wheat\n    fishes_per_wheat = fishes_per_rabbit * rabbits_per_wheat\n    \n    # Simplify the ratio (This step is not necessary here as the result is already simplified)\n    ans = fishes_per_wheat\n    \n    return ans\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    for people in range(1, 1000): # reasonable range to find solution\n        benches_with_3_people = (people + 7) / 3\n        benches_with_7_people = people / 7\n        if benches_with_3_people.is_integer() and (benches_with_3_people + 3 == benches_with_7_people):\n            return people\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    # Calculate the cost without the booking fee\n    cost_excluding_booking_fee = total_cost - booking_fee\n\n    # Calculate the hours by dividing the cost by the cost per hour\n    hours_hired = cost_excluding_booking_fee / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    lcm_solution, _ = solve_congruence(*congruences)\n\n    # Find the appropriate value in the given range\n    ans = lcm_solution\n    while ans < 400:\n        ans += lcm_solution\n\n    return ans\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    total = ginnie + lyn\n    return total\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    ans = 21 - 11\n    return ans\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = total_amount * (3 / ratio_sum)\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    empty_bottle, juice_per_part = symbols('empty_bottle juice_per_part')\n\n    equation1 = Eq(empty_bottle + (5/6) * juice_per_part, 4.6)\n    equation2 = Eq(empty_bottle + (2/3) * juice_per_part, 4.45)\n\n    solutions = solve((equation1, equation2), (empty_bottle, juice_per_part))\n\n    empty_bottle_mass_kg = solutions[empty_bottle]\n    empty_bottle_mass_g = empty_bottle_mass_kg * 1000\n\n    return empty_bottle_mass_g\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(2 * number - 3, 19)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    prime_factor_4320 = 2**5 * 3**3 * 5\n    power_of_two = 5  # prime factor of 4320 for 2\n    power_of_three = 3  # prime factor of 4320 for 3\n\n    # fraction 3/2 can be represented as 2^(-1) * 3^(1)\n    # for the result to be integer, we need to at least cancel out the power of 2 in the denominator\n    # so the maximum value of n should be power_of_two\n    \n    return power_of_two\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    \n    # The first digit cannot be zero and must be less than or equal to 5 since the sum is 5 and it's a 3-digit number.\n    for first_digit in range(1, 6):\n        # The second digit must be less than or equal to 5 minus the first digit.\n        for second_digit in range(0, 6 - first_digit):\n            # The last digit must be odd and it is determined by the first two digits since the sum is 5.\n            third_digit = 5 - first_digit - second_digit\n            if third_digit % 2 == 1:\n                count += 1\n                \n    ans = count\n    return ans\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 0\n    page_number = 0\n\n    # iterate through the number of digits needed\n    # increasing the page number and adding to total digits until we reach 1101\n    while total_digits < 1101:\n        page_number += 1\n        total_digits += digits_per_page\n        if page_number >= 10 ** digits_per_page:\n            digits_per_page += 1\n    \n    return page_number\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    result = 123 * 321\n    return result\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room_after_transfer = total_pupils // 2\n    return pupils_each_room_after_transfer\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    difference = 2\n    while True:\n        next_term = term + difference\n        if next_term >= 100:\n            break\n        term = next_term\n        difference += 2\n    return term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let's denote the weights of Adam, Ben, and Carl as A, B, and C, respectively.\n\n    # From the problem statement we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # We want to find the total weight A + B + C.\n\n    # Let's add up all three equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n\n    # Simplifying, we get:\n    # 2A + 2B + 2C = 292\n\n    # Dividing both sides by 2 to find A + B + C:\n    total_weight = (102 + 97 + 93) // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_amount = 23\n    book_price = 3.4\n    magazine_price = 1.6\n\n    # We use a loop to determine how many magazines could be bought\n    for magazines in range(total_amount // int(magazine_price) + 1):\n        if (total_amount - magazines * magazine_price) % book_price == 0:\n            return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_given = 38\n\n    sister_notebooks_initial = andy_notebooks - sister_given - sister_given\n\n    return sister_notebooks_initial\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50  # Number of terms\n    sum_of_series = (n * (n + 1)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    # Loop through a reasonable range of numbers to find the age that meets the condition\n    for age in range(1, 100): # Assuming Mr. Lv's age is less than 100\n        base10_age_with_zero = int(str(age) + '0') # Add \"0\" at the end of the age\n\n        # Convert both the age and base10_age_with_zero to Base 3 strings\n        base3_age = int(str(age), base=3)\n        base3_age_with_zero = int(str(base10_age_with_zero), base=3)\n\n        # Check if adding a \"0\" at the end of the age gives the Base 3 representation\n        if base3_age_with_zero == base3_age:\n            return age\n\n# Store the result in the variable 'ans'\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Total flowers equation\n    total_flowers_eq = Eq(orchids + tulips + roses, 3616)\n\n    # Ratio equation for orchids and tulips\n    ratio_eq = Eq(orchids / tulips, 3 / 5)\n\n    # Flowers left after selling equation\n    flowers_left_eq = Eq(\n        orchids - 0.40 * orchids + tulips - (1 / 5) * tulips + roses - 0.25 * roses, 2644)\n\n    # Solve the system of equations\n    solutions = solve((total_flowers_eq, ratio_eq, flowers_left_eq), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            j = 7007 // i\n            if j % 7 == 0 and (10 <= j < 100):\n                return i + j\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    \n    # There are 7! ways to arrange 7 people in a line\n    # However, as the table is circular, rotating the arrangement does not change it\n    # So the number of unique arrangements is 7! divided by 7\n    ans = factorial(7) // 7\n\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x1 + x2 + x3 == 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = (379 * 0.00038) + (159 * 0.00621) + (3.79 * 0.121)\n    return ans\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({2, 0, A, M, C, 1, 9}) == 7:  # all digits are different\n                    number = 2000000 + A*100000 + M*10000 + C*1000 + 190\n                    if number % 9 == 0:\n                        return A + M + C\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for variables A, B, C\n    A, B, C = symbols('A B C')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Access and return the solution for B\n    return solutions[B]\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Let x be the cost of 1 piece of chocolate cake\n    # Let y be the cost of 1 piece of cheesecake\n    # Given that the cost of 3 chocolate cakes is equal to the cost of 2 cheesecakes\n    # Therefore, we can say that 3x = 2y -- Equation (1)\n    # Given that 3 pieces of cheesecake is equal to the cost of 5 cookies, and the cost of 1 cookie is $9\n    # We can say that 3y = 5 * $9 -- Equation (2)\n    # Now we can solve these equations to find the cost of one piece of chocolate cake\n\n    # Solve Equation (2) for y (cost of 1 piece of cheesecake)\n    y = (5 * 9) / 3\n    \n    # Now we can substitute y in Equation (1) and solve for x\n    x = (2 * y) / 3\n\n    return x\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_part = '857142'  # The recurring part of 6/7\n    length_of_recurring_part = len(recurring_part)\n    digits_needed = 58  # Number of digits needed after the decimal point\n\n    # Calculate the full cycles of the recurring part that fit into the needed digits\n    full_cycles = digits_needed // length_of_recurring_part\n\n    # Calculate the remaining digits after the full cycles\n    remaining_digits = digits_needed % length_of_recurring_part\n\n    # Sum the digits of the full cycles by converting each digit into an integer and summing them\n    sum_of_full_cycles = sum([int(digit) for digit in recurring_part]) * full_cycles\n\n    # Sum the remaining digits in a similar way\n    sum_of_remaining_digits = sum([int(recurring_part[i]) for i in range(remaining_digits)])\n\n    # Sum of all digits after the decimal point is the sum from the full cycles and remaining digits\n    total_sum = sum_of_full_cycles + sum_of_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candies, valeria_candies = symbols('mike_candies valeria_candies')\n\n    total_candies = Eq(mike_candies + valeria_candies, 36)\n    after_eating = Eq(mike_candies - valeria_candies, 6 - 22)\n\n    solutions = solve((total_candies, after_eating), (mike_candies, valeria_candies))\n\n    return solutions[valeria_candies]\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    # Convert the recurring decimal to a fraction.\n    recurring_decimal = 4 + (73/99)\n    \n    # Non-recurring decimals stay the same.\n    decimal1 = 4.73\n    decimal2 = 4.77\n    decimal3 = 4.737\n    \n    # Store all decimals in a list.\n    decimals = [recurring_decimal, decimal1, decimal2, decimal3]\n    \n    # Find the smallest decimal.\n    smallest_decimal = min(decimals)\n    \n    return smallest_decimal\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Melissa's age and her mother's age now.\n    melissa, mother = symbols('melissa mother')\n\n    # Melissa was 8 years old, her mother was 32.\n    # That means her mother is 24 years older than Melissa.\n    age_difference = 32 - 8\n\n    # Now, Melissa's mother is three times as old as Melissa.\n    equation = Eq(mother, 3 * melissa)\n\n    # Also, the difference in their ages is still the same: 24 years\n    equation2 = Eq(mother - melissa, age_difference)\n\n    # Solve the system of equations.\n    solutions = solve((equation, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    joel = (remaining_plants + 2) * 2\n    valerie = (joel + 3) * 2\n    ethan = (valerie + 1) * 2\n    return ethan\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    second_sale = remaining_eggs * 2 + 7\n    total_eggs = (second_sale + 16) * 2\n    return total_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "import sympy as sp\n\ndef solution():\n    # Let the side length of the cube be x\n    # Using the Pythagorean theorem in 3D:\n    # PB^2 should equal to (x^2 + x^2 + (PA - x)^2)\n    # PC^2 should equal to (x^2 + (PA - x)^2 + (PA - x)^2)\n    # PD^2 should equal to ((PA - x)^2 + (PA - x)^2 + (PA - x)^2)\n    # PG^2 should equal to (PA^2 + PA^2 + PA^2)\n    # We can set up four equations and solve for x and PA.\n\n    x, PA = sp.symbols('x PA')\n\n    # Setup the four equations\n    equation1 = sp.Eq(PA**2 - 2*PA*x + 3*x**2, 60*sp.sqrt(10)**2)\n    equation2 = sp.Eq(PA**2 - 2*PA*x + 2*x**2, 60*sp.sqrt(5)**2)\n    equation3 = sp.Eq(3*(PA - x)**2, 120*sp.sqrt(2)**2)\n    equation4 = sp.Eq(3*PA**2, 36*sp.sqrt(7)**2)\n\n    # Solve the system of equations\n    solutions = sp.solve((equation1, equation2, equation3, equation4), (x, PA), dict=True)\n\n    # Return the positive value for PA\n    ans = [sol[PA] for sol in solutions if sol[PA] >= 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_first_toss = 2  # heads or tails\n    outcomes_second_toss = 2  # heads or tails\n\n    total_outcomes = outcomes_first_toss * outcomes_second_toss\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let x be the number of P6 students and y be the number of P1 students.\n    # We are given two equations:\n    # x + y = 120 (total number of students)\n    # 2x + 0.5y = 180 (total number of buckets, since 2 P1 students carry 1 bucket, each P1 carries half a bucket)\n    # We can solve these equations for x and y using algebra.\n    # Multiplying the second equation by 2 to eliminate the fraction, we get:\n    # 4x + y = 360\n    # Now we subtract the first equation from this new equation to solve for x:\n    # (4x + y) - (x + y) = 360 - 120\n    # 3x = 240\n    # x = 240 / 3\n    # x = 80\n    # Now we substitute x back into the first equation to solve for y:\n    # 80 + y = 120\n    # y = 120 - 80\n    # y = 40\n    # The number of P1 students is y.\n    return 120 - (180 - 120) // 2\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n    greatest_common_divisor = gcd(pencils, pens)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    fish_per_rabbit = 3\n    rabbits_per_wheat_pack = 2 / 3\n\n    fish_per_wheat_pack = fish_per_rabbit * rabbits_per_wheat_pack\n\n    return fish_per_wheat_pack\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's proposed solution\n    total = 9*2 + 4\n    given_remainder = 2\n\n    # Correct way to find the division result from quotient and remainder\n    # The remainder should not be multiplied\n    correct_total = 9 * 4 + given_remainder  # 9 is the quotient, 4 is the divisor\n\n    return correct_total\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans, ways\n\nans, ways_to_score_8 = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    apples_per_box = 14 / boxes_for_14kg\n    total_kg_of_apples = 66.5\n    total_boxes_needed = total_kg_of_apples / apples_per_box\n    \n    return int(total_boxes_needed)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'students' be the total number of students originally in the canteen\n    students = symbols('students')\n    \n    # 40% of the students are boys initially\n    boys_initial = 0.40 * students\n    \n    # After 16 boys leave and 16 girls enter, the boys make up 2/15 of the students\n    boys_after = boys_initial - 16\n    students_after = students + (16 - 16)  # No change in total students since the same number of students left and entered\n    \n    # Setting up the equation: boys_after = (2/15) * students_after\n    equation = Eq(boys_after, (2/15) * students_after)\n    \n    # Solving for the total number of students\n    total_students_solution = solve(equation, students)\n    \n    # Using the solution to find the number of girls now\n    total_students = total_students_solution[0]\n    boys_initial_num = 0.40 * total_students\n    boys_now = boys_initial_num - 16\n    girls_now = total_students - boys_now\n\n    return girls_now\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Check all permutations of all lengths\n    for length in range(1, len(digits) + 1):\n        for p in permutations(digits, length):\n            num = int(''.join(p))\n            if isprime(num) and num < 100:\n                primes.add(num)\n\n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator_part1 = 3 + 1/3 * 1.9\n    numerator_part2 = 19.5 / (4 + 1/2)\n    numerator = numerator_part1 + numerator_part2\n\n    denominator_part1 = 62/75 - 0.16\n    denominator = denominator_part1\n\n    first_fraction = numerator / denominator\n\n    second_numerator = 3.5 + 4 + 2/3 + 2/15\n    second_denominator_part1 = 0.5 * (1 + 1/20 + 4.1)\n    second_denominator = second_denominator_part1\n\n    second_fraction = second_numerator / second_denominator\n\n    ans = first_fraction / second_fraction\n\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    \n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n    \n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n    \n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Loop through all four-digit numbers for N\n    # and check if the condition is met\n    for N in range(1000, 10000):\n        str_N = str(N)\n        for i in range(4):\n            # Remove the i-th digit to form M\n            M = int(str_N[:i] + str_N[i+1:])\n            # Check if the difference between N and M is 2021\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n    \n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n\n    # Calculate the number of students who like swimming and jogging\n    percent_both = (percent_swimming + percent_jogging) - (100 - percent_neither)\n\n    # Calculate the number of students enjoying both\n    students_both = total_students * percent_both / 100\n\n    return int(students_both)\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    # +1 to account for the first tree at the start of the road\n    num_trees = (road_length // tree_distance) + 1 \n\n    return num_trees\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # Work rates for A and B\n    A_rate = 1 / 15\n    B_rate = 1 / 10\n\n    # Work done together in 4 days\n    work_done = 4 * (A_rate + B_rate)\n\n    # Remaining work \n    remaining_work = 1 - work_done\n\n    # Days B needs to finish the remaining job\n    days_B = remaining_work / B_rate\n\n    return days_B\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    part2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Time taken by Linda to solve one problem\n    linda_time = 5 \n    # Time taken by Cici to solve one problem\n    cici_time = 6 \n    # Total time available in minutes\n    total_time = 2 * 60  \n\n    # Rate at which Linda and Cici solves the problems\n    linda_rate = 1 / linda_time\n    cici_rate = 1 / cici_time\n\n    # Combined rate at which they solve the problems together\n    combined_rate = linda_rate + cici_rate\n\n    # Total number of problems they can solve together in the available time\n    total_problems = combined_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    hanet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + hanet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    return 15\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples\n    # We want to find x such that (amy - x) = (john + x) + 4\n    # This translates to 37 - x = 15 + x + 4\n    # Simplifying, we get: 2x = 37 - 15 - 4\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Number of units of grass a goat eats in one day (consider goat as the unit)\n    goat_eat_per_day = 1\n    # Number of units of grass a rabbit eats in one day\n    rabbit_eat_per_day = goat_eat_per_day / 4\n\n    # Total grass needed to feed 14 goats for 15 days\n    total_grass_for_goats = 14 * goat_eat_per_day * 15\n    # Total grass needed to feed 70 rabbits for 8 days\n    total_grass_for_rabbits = 70 * rabbit_eat_per_day * 8\n\n    # Since both are equal, equate and simplify to find total grass in pasture (total capacity)\n    total_capacity = total_grass_for_goats  # or total_grass_for_rabbits\n\n    # Daily consumption for 17 goats and 20 rabbits\n    daily_consumption = 17 * goat_eat_per_day + 20 * rabbit_eat_per_day\n\n    # Number of days the pasture can feed 17 goats and 20 rabbits\n    num_days = total_capacity / daily_consumption\n\n    return int(num_days)\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    mean_of_numbers = 37\n    total_numbers = 10\n\n    total_sum = mean_of_numbers * total_numbers\n    sum_of_known_numbers = sum(known_numbers)\n    missing_number = total_sum - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    X, Y, Z = symbols('X Y Z')\n    \n    equation1 = Eq(X, Y + 83)\n    equation2 = Eq(Z, X + 24)\n    equation3 = Eq(X + Y + Z, 283)\n    \n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n    \n    return solutions[Y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq((1/4)*chan - (1/3)*toh, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    # Sandra has 1/3 of Tasha's erasers\n    equation1 = Eq(sandra, tasha / 3)\n    # Riley has 3/5 of Sandra's erasers\n    equation2 = Eq(riley, 3 * sandra / 5)\n    # Tasha has 60 more erasers than Riley\n    equation3 = Eq(tasha, riley + 60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n    \n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 3 * (19 - x), 65)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    number = 4\n    triangle = 3\n    ans = sum((number * 10 ** i for i in range(triangle)))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n\n    mean_savings = (january_savings + february_savings + march_savings) / 3\n\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_to_number = {'A': 0, 'n': 1, 'g': 4, 'e': 7, 'l': 5}\n    devil_to_number = {'D': 4, 'e': 0, 'v': 5, 'i': 2, 'l': 1}\n\n    password_angel = \"Angel\"\n    password_devil = \"Devil\"\n    andy_try = \"4005220912\"\n\n    correct_password_numbers = \"\".join([str(devil_to_number[letter]) for letter in password_devil])\n    \n    return andy_try == correct_password_numbers, correct_password_numbers\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for total_nums in range(2, 7): # since 6 = 1 + 5 is the smallest partition\n        first_summand = 1 # start with the smallest positive number\n        while first_summand <= 6 - first_summand:\n            count += 1\n            first_summand += 1\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert recurring decimals to fractions\n    fraction1 = Fraction(1, 99)\n    fraction2 = Fraction(12, 99)\n    fraction3 = Fraction(23, 99)\n    fraction4 = Fraction(34, 99)\n    fraction5 = Fraction(45, 99)\n    fraction6 = Fraction(54, 99)\n    fraction7 = Fraction(78, 99)\n    \n    # Calculate the final sum\n    sum_fractions = fraction1 + fraction2 + fraction3 + fraction4 + fraction5 + fraction6 + fraction7\n    return sum_fractions\n\nans = float(solution())"
    ],
    "708686c18792498ca280531b38305bd6": [
        "from sympy import symbols, solve, sqrt\n\ndef solution():\n    a = symbols('a', real=True, positive=True)\n    x = symbols('x')\n\n    # Original equation\n    equation = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n\n    # Solving for x\n    x_value = solve(equation, x)[0]\n\n    # Simplifying sqrt(x^2 + 8x)\n    expression = sqrt(x_value**2 + 8*x_value)\n\n    simplified_expression = expression.simplify()\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i+1, 2036):\n            for k in range(j+1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    # The Pigeonhole Principle: the minimum number in the pen with the most sheep\n    # given by [(Total Sheep-1)/Total Pens] + 1\n    min_sheep_in_max_pen = (total_sheep - 1) // total_pens + 1\n    \n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    total_girls = 27\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n    total_students = total_boys + total_girls\n    \n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age = total_age_boys + total_age_girls\n    \n    mean_age_all = total_age / total_students\n    \n    return mean_age_all\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original_password = \"Angel\".lower()\n    new_password_keyed = \"4005220912\"\n    \n    # Convert \"Angel\" password to the associated number representation,\n    # considering 'a' as 0, 'b' as 1, ..., 'z' as 25.\n    original_password_number = ''.join([str(ord(char) - ord('a')) for char in original_password])\n            \n    # Convert the keyed password numbers back to letters, since we know that\n    # 'a' is 0, we add ord('a') to each digit and get the character.\n    encrypted_new_password = ''.join([chr(int(new_password_keyed[i:i+2]) + ord('a')) \n                                      for i in range(0, len(new_password_keyed), 2)])\n    \n    # Check if the encrypted new password matches \"Devil\"\n    if encrypted_new_password == \"devil\":\n        can_unlock = True\n        reason_or_correct_password = \"Yes, Andy can unlock the treasure chest.\"\n    else:\n        can_unlock = False\n        # If it does not match, calculate the correct password representation.\n        correct_password = \"Devil\".lower()\n        correct_password_number = ''.join([(\"{:02d}\".format(ord(char) - ord('a'))) for char in correct_password])\n        reason_or_correct_password = correct_password_number\n        \n    return can_unlock, reason_or_correct_password\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 6), (8, 13)]\n    ans = solve_congruence(*congruences)\n    number = ans[0]\n    \n    while number > 300 or number < 200:\n        number += ans[1]\n\n    return number\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye = 6\n    simon = 12\n    taylor = 16\n\n    ans = lcm(raye, simon, taylor)\n\n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_number = 10\n    last_term = 31\n    difference = 3\n\n    first_term = last_term - (term_number - 1) * difference\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # Total distance to be swam by both together to meet first time.\n    total_distance_for_meeting = 30  # in meters\n\n    # Speed of Sam and Ben together\n    combined_speed = 1 + 0.6  # Sam's speed + Ben's speed in m/s\n\n    # Time taken to meet first time\n    time_to_first_meet = total_distance_for_meeting / combined_speed  # in seconds\n\n    # Total time available for swimming\n    total_swimming_time = 10 * 60  # converting minutes to seconds\n\n    # Total number of meetings\n    num_meetings = total_swimming_time / time_to_first_meet\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Worst case: Sara picks balls in a way that postpones getting five of the same color as long as possible.\n    # She could pick 4 balls of each color without getting 5 of the same color.\n    # 4 green, 4 yellow, and 4 red = 4 * 3 = 12 balls\n    worst_case_without_five_same = (4 * 3)\n    \n    # To be sure she gets 5 balls of the same color, she must take one more ball.\n    must_take_one_more = 1\n    \n    # Total balls Sara must take out to be sure to have 5 balls of the same color\n    total_balls = worst_case_without_five_same + must_take_one_more\n    \n    return total_balls\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    ans = a * b + c * d\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    ans = 5928 * 13\n    return ans\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_and_cindy_average = 120\n    doris_height = 126\n\n    total_height_of_bob_and_cindy = bob_and_cindy_average * 2\n    total_height_of_three_children = total_height_of_bob_and_cindy + doris_height\n    average_height_of_three_children = total_height_of_three_children / 3\n\n    return average_height_of_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Destin's current age be 'd' and his nephew's current age be 'n'\n    destin, nephew = symbols('destin nephew')\n\n    # In 6 years, Destin will be twice his nephew's age\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n\n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5 / 1)\n\n    # Solve for Destin's and nephew's current ages\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    # Sum of their ages in 10 years' time\n    destin_age_in_10_years = solutions[destin] + 10\n    nephew_age_in_10_years = solutions[nephew] + 10\n    sum_of_ages_in_10_years = destin_age_in_10_years + nephew_age_in_10_years\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    \n    # Total pencils = average * total students\n    total_pencils = 35 * 40\n    \n    # Let the number of boys be 'boys', then number of girls is (40 - boys)\n    equation = Eq(boys * 20 + (40 - boys) * 60, total_pencils)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number of pies for each person with a symbol\n    tan_pies, lim_pies = symbols('tan_pies lim_pies')\n\n    # Creating equations based on the problem statement\n    # Initially, the number of pies are equal\n    equation_1 = Eq(tan_pies, lim_pies)\n    # After transactions, Mrs Tan has twice as many as Mrs Lim\n    equation_2 = Eq(tan_pies + 12, 2 * (lim_pies - 4))\n\n    # Solving the system of equations\n    solutions = solve((equation_1, equation_2), (tan_pies, lim_pies))\n\n    # Since the question asks for the number of pies each had originally\n    return solutions[tan_pies]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    permutation_list = list(permutations(digits))\n    return len(permutation_list)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)  # (hours, minutes)\n    arrival_time = (10, 22)   # (hours, minutes)\n\n    duration_hours = arrival_time[0] - departure_time[0]\n    duration_minutes = arrival_time[1] - departure_time[1]\n\n    if duration_minutes < 0:\n        duration_hours -= 1\n        duration_minutes += 60\n\n    total_duration = duration_hours * 60 + duration_minutes\n\n    return total_duration\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '34563456'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n    \n    complete_patterns = 50 // pattern_length\n    remaining_digits = 50 % pattern_length\n    \n    total_sum = complete_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    # Step by step division according to the question\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    # Simplifying...\n    # ...now the result is in the form of a float, but we can return it\n    return ans\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n\n    for combo_candy in combinations(cards, 2):\n        product_candy = prod(combo_candy)\n        for combo_candice in combinations(cards, 3):\n            product_candice = prod(combo_candice)\n            if product_candy == product_candice:\n                all_cards_picked = set(combo_candy).union(set(combo_candice))\n                not_picked = set(cards) - all_cards_picked\n                return list(not_picked)[0]\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = tom_age + (father_future_age - tom_age) * 2\n\n    return father_current_age\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    \n    # Calculate number of sweets given to the first group of students\n    sweets_first_group_total = fraction_first_group * total_sweets\n\n    # Calculate number of students in the first group\n    num_students_first_group = sweets_first_group_total / sweets_first_group\n    \n    # Calculate the remainder of the sweets after the first group\n    remainder_sweets = total_sweets - sweets_first_group_total\n    \n    fraction_second_group = 1/4\n    sweets_second_group = 4\n\n    # Calculate number of sweets given to the second group of students\n    sweets_second_group_total = fraction_second_group * remainder_sweets\n\n    # Calculate number of students in the second group\n    num_students_second_group = sweets_second_group_total / sweets_second_group\n    \n    # Calculate the sweets left for the third group\n    sweets_third_group = 5\n    sweets_third_group_total = remainder_sweets - sweets_second_group_total\n    \n    # Calculate number of students in the third group\n    num_students_third_group = sweets_third_group_total / sweets_third_group\n\n    # Calculate the total number of students in the classroom\n    total_students = num_students_first_group + num_students_second_group + num_students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    result = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:  # 1, 2, and 3 are not composite\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    # Starting from an odd number and going downwards, check if it cannot be\n    # written as a sum of three composite numbers\n    for number in range(999, 0, -2):\n        found = False\n        for a in range(4, number, 2):\n            if is_composite(a):\n                for b in range(4, number - a, 2):\n                    if is_composite(b) and is_composite(number - a - b):\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            return number\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "from math import lcm\n\ndef solution():\n    packet_one = 25\n    packet_two = 20\n\n    # Calculate least common multiple\n    cycle_days = lcm(packet_one, packet_two)\n\n    # March 1st is considered day 1, so we subtract one from the cycle days to find the restart day\n    restart_day = cycle_days - 1\n\n    # Calculate the month and day she starts new packets again\n    # Since March has 31 days, we just need to check if we exceed this number\n    months_passed = restart_day // 31\n    day_of_month = restart_day % 31\n\n    # Since we start counting from March (which is month 3), we add the months passed\n    month = 3 + months_passed\n\n    return (month, day_of_month + 1)  # Adding 1 because days in month starts from 1\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    return 3.25 - 1.75\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(8 * boys + 5 * girls, 580)  # total prize money distributed\n    equation2 = Eq(boys, 3 * girls)  # there are thrice as many boys as girls\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 101):\n        if number % 4 == 3:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2):\n        for b in range(a, (12 - a) // 2 + 1):\n            c = 12 - a - b\n            if a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    both_teams = sports_team + art_team - total_students\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the elder brother's age and y be the younger brother's age\n    x, y = symbols('x y')\n    \n    # The sum of their ages is 42\n    equation1 = Eq(x + y, 42)\n    \n    # A few years ago, the elder brother's age was equal to the younger brother's current age (x - y)\n    # At that time, the younger brother was half the elder brother's current age (x / 2)\n    # So the time that has passed is equal to the age difference between the brothers (y - x/2)\n    equation2 = Eq(x - (y - x/2), y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Find the greatest common divisor for class A, B, and C\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n\n    passed_second_failed_first = 3\n\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of direct routes from A to D\n    direct_A_to_D = 6\n    \n    # Number of routes from A to B and then B to D (A to B to C to D does not count as it includes C)\n    A_to_B_to_D = 7 * 2\n    \n    # Number of routes from A to C and then C to D\n    A_to_C_to_D = 4 * 2\n    \n    # Total number of ways\n    total_ways = direct_A_to_D + A_to_B_to_D + A_to_C_to_D\n\n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for chocolate and cheese cupcakes\n    chocolate, cheese = symbols('chocolate cheese')\n\n    # Eq1: Total cupcakes equation\n    eq1 = Eq(chocolate + cheese, 255)\n    \n    # Eq2: After selling equation - remaining chocolate equals remaining cheese\n    eq2 = Eq(chocolate - 0.40 * chocolate, cheese - 0.75 * cheese)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (chocolate, cheese))\n\n    # Find remaining cupcakes\n    remaining_chocolate_cupcakes = solutions[chocolate] * (1 - 0.40)\n    \n    return remaining_chocolate_cupcakes\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    pen_price = (20 - 3 * 2) / 2\n    return pen_price\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    total_cattle = 5\n    total_days = 10\n\n    daily_hay_per_cattle = total_hay / (total_cattle * total_days)\n\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    prod_ages = 210\n    for youngest in range(1, 10):\n        for middle in range(youngest + 1, 10):\n            for oldest in range(middle + 1, 10):\n                if youngest * middle * oldest == prod_ages:\n                    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n    \n    equation1 = Eq((1/4)*boys, (2/5)*girls)\n    equation2 = Eq(boys + girls, 39)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    num_boxes = total_avocados // per_box\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n    killed_seedlings = total_seedlings * fraction_killed\n    surviving_seedlings = total_seedlings - killed_seedlings\n\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n\n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts % daily_consumption\n\n    if remaining_locusts == 0:\n        remaining_locusts = daily_consumption\n\n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = (12 * 92) + (22 * 82) + (32 * 72)\n    return ans\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $5 and $10 notes\n    n5, n10 = symbols('n5 n10')\n\n    # Equation 1: Total number of notes\n    eq1 = Eq(n5 + n10, 116)\n\n    # Equation 2: Spent 60% of $10 notes and 25% of $5 notes\n    remaining_10_notes = n10 - 0.60 * n10\n    remaining_5_notes = n5 - 0.25 * n5\n    \n    # Equation 2: Relationship after spending on bag\n    eq2 = Eq(remaining_10_notes * 7, remaining_5_notes * 4)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (n5, n10))\n\n    # Calculate the amount spent on the bag\n    amount_spent_10 = solutions[n10] * 0.60 * 10\n    amount_spent_5 = solutions[n5] * 0.25 * 5\n\n    total_amount_spent = amount_spent_10 + amount_spent_5\n\n    return total_amount_spent\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    return round(726 * 8, 1)\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, solve\n\n    # define the variables\n    Don, Ben = symbols('Don Ben')\n\n    # original ratio\n    original_ratio = 2 / 3\n\n    # new ratio after Don buys 10 stickers and Ben loses 5 stickers\n    new_ratio = 6 / 7\n\n    # set up the equations based on the problem statement\n    # Don's stickers after buying 10 is Don + 10\n    # Ben's stickers after losing 5 is Ben - 5\n    equations = [(original_ratio, Don / Ben),\n                 (new_ratio, (Don + 10) / (Ben - 5))]\n\n    # solve the system of equations\n    solution = solve((equations[0][1] - equations[0][0], equations[1][1] - equations[1][0]), (Don, Ben))\n\n    return solution[Don]\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # Determine the pattern in the sequence\n    # Every two terms we have (positive even number) - (odd number)\n    # This can be simplified to even number - 1\n    # So the solution is to sum all the even numbers from 2 to 2016 and subtract the number of terms\n\n    total_even_sum = sum(range(2, 2017, 2))\n    count_of_terms = (2016 - 2) // 2 + 1  # Count of even numbers from 2 to 2016\n\n    result = total_even_sum - count_of_terms\n    return result\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n\n    toys_to_give = (amy_toys - sally_toys) / 2\n\n    return int(toys_to_give)\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    \n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    \n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    sum_of_squares = 2870\n    sum_of_products = 0\n    \n    for i in range(1, 21, 2):\n        sum_of_products += i * (i + 2)\n        \n    ans = sum_of_products\n    return ans\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef solution():\n    # First, consider the triplet sisters as a unit, plus the two boys and the other two students, we have 5 units\n    # These 5 units can be arranged in 5! ways\n    unit_arrangements = factorial(5)\n    \n    # Now, let's consider the possible arrangements of the twin brothers\n    # They cannot stand next to each other, so they can be placed in the 4 gaps between the 5 units, or at the ends\n    # There are 6 possible positions for the first twin brother\n    # And 5 possible positions remaining for the other twin brother\n    twin_arrangements = 6 * 5\n    \n    # Finally, multiply the unit arrangements with the twin arrangements\n    total_arrangements = unit_arrangements * twin_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    milk_needed = milk_per_cup * cups_needed\n\n    return milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f\"21{i}{j}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # To find the least number of students born in the busiest week, \n    # we apply the Pigeonhole Principle, which ensures that there is at least one \"pigeonhole\" (day of the week)\n    # that has as many \"pigeons\" (students) as the ceiling of the total number of students \n    # divided by the number of days in the week.\n    min_students_in_busiest_week = (total_students + days_in_week - 1) // days_in_week\n\n    return min_students_in_busiest_week\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # There are always at least 7 Fridays in any period of 55 days.\n    # To find the greatest number, we need to check if we can start\n    # or end the 55-day period with a Friday.\n\n    # Since 55 % 7 equals 6, if the first day is a Friday,\n    # then the 56th day (not included in the vacation) would also be a Friday.\n    # Hence, there will be 8 Fridays inside the 55-day period.\n    # No need to check the end day as starting with Friday already gives the maximum Fridays.\n\n    max_fridays = 7\n    if 55 % 7 == 6:\n        max_fridays += 1\n\n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage_of_girls_with_glasses = 0.20\n    total_girls_in_class = 25\n\n    girls_with_glasses = percentage_of_girls_with_glasses * total_girls_in_class\n\n    return int(girls_with_glasses)\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    # If Owen wants to trade a pen from Oscar,\n    # it means Owen should give the equivalent cost in pencils, which is 4 dollars.\n    # Hence, Owen should give 4 dollars / 2 dollars/pencil = 2 pencils.\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Creates a list of congruences to be satisfied by N\n    congruences = [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (5, 7)]\n\n    # Calculate the smallest number N that satisfy all the congruences\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Calculate the cost per mug and per pen\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    \n    # Calculate total cost for 7 mugs and 5 pens\n    total_cost_mugs = 7 * cost_per_mug\n    total_cost_pens = 5 * cost_per_pen\n    total_cost = total_cost_mugs + total_cost_pens\n    \n    # Calculate change from £10\n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    absent_pupils = total_pupils / 5  # 1/5 of the pupils are away\n    pupils_go_to_cathedral = total_pupils - absent_pupils\n    return pupils_go_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3  # minutes for one child to sing a song\n    number_of_songs = 2\n    number_of_children = 50\n    total_time = time_per_song * number_of_songs * number_of_children\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - remaining_weight_with_2_apples\n    weight_of_5_apples = weight_of_3_apples * (5 / 3)\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    number1 = 25 / 100\n    number2 = 0.3\n\n    ans = number1 if number1 > number2 else number2\n\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    time_claimed = 5\n    \n    actual_years = 0\n    current_amount = principal\n    \n    while current_amount < final_amount:\n        current_amount += current_amount * interest_rate\n        actual_years += 1\n    \n    is_bella_right = (actual_years == time_claimed)\n    \n    return actual_years if not is_bella_right else \"Bella is right\"\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought - donuts_eaten\n\n    return total_donuts\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    num = lcm\n    while True:\n        if num % 10 == 2:  # Ends in a 2\n            return num\n        num += lcm  # Next multiple\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n    \n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    total_days = days_in_a_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value_of_1st_3 = 3 * 10**5  # The first 3 is in the hundred-thousands place\n    value_of_2nd_3 = 3 * 10**2  # The second 3 is in the hundreds place\n\n    difference = value_of_1st_3 - value_of_2nd_3\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x, y, z represent the rate of work for John, Jonah, and Angus respectively\n    x, y, z = symbols('x y z')\n\n    # Equation for all three working together\n    equation1 = Eq(1 / x + 1 / y + 1 / z, 1 / 27)\n\n    # Equation for Jonah and Angus working together\n    equation2 = Eq(1 / y + 1 / z, 1 / 36)\n\n    # We have two equations and three unknowns, we need one more equation\n    # Since we're looking for John's time to build the wall on his own,\n    # we can temporarily assume that John can actually complete the work (not infinite)\n    equation3 = Eq(x, x)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # John's time to build the wall is the reciprocal of the rate (x)\n    john_time = 1 / solutions[x][0]\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2 ** 17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21)) * 2\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Define a large number assuming after this threshold value,\n    # all totals can be made by either of the coins.\n    # This value is typically found by multiplying the two denominations (4z * 5z).\n    threshold = 4 * 5\n\n    # To find the largest total that cannot be made,\n    # initialize an empty list to store such totals.\n    impossible_totals = []\n\n    # Check for each total from 1 up to the threshold value\n    for total in range(1, threshold):\n        # Assume that the total cannot be made initially\n        can_be_made = False\n        for i in range(total // (4) + 1):\n            for j in range(total // (5) + 1):\n                if 4 * i + 5 * j == total:\n                    can_be_made = True\n                    break\n            if can_be_made:\n                break\n        # If we have looped through all combinations and the total cannot be made,\n        # add it to the list of impossible_totals.\n        if not can_be_made:\n            impossible_totals.append(total)\n    \n    # The largest total that cannot be made is the last element in the list\n    largest_impossible_total = max(impossible_totals)\n    return largest_impossible_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # If the sum of 10 positive integers is 1001, d can be maximum when all numbers are the same.\n    # So we start with the largest d that is a divisor of 1001 and then check if it satisfies the condition.\n    \n    # The greatest common divisor of the 10 numbers would divide 1001.\n    # Since the 10 numbers add up to 1001, assume d to be a divisor of 1001. \n    # Then each number would be a multiple of d, and we can express them as d*x_i, \n    # where x_i (i=1,2,...,10) are the 10 positive integers.\n    # The sum would then be d*(x_1 + x_2 + ... + x_10) = 1001, which simplifies to\n    # x_1 + x_2 + ... + x_10 = 1001 / d\n\n    # Thus, the maximum possible value of d is the largest divisor of 1001\n    # that would allow the sum of the ten multiples of d to equal 1001.\n    # We also know that since they are positive integers, each x_i >= 1\n    \n    max_d = 1\n    for d in range(1, 1002):\n        if 1001 % d == 0 and (1001 // d) >= 10:\n            max_d = d\n        \n    return max_d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    combined_age_5_years_ago = 14\n    years_since_then = 5 + 3\n    people = 2\n    \n    # The combined age increases by 2 each year (one for each person)\n    additional_years_combined = years_since_then * people\n    \n    # Calculate the combined age in 3 years\n    combined_age_in_3_years = combined_age_5_years_ago + additional_years_combined\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a * 10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, pear = symbols('apple pear')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    # Using the solutions to find the weight of 4 apples and 4 pears\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n    \n    return weight_4_apples_4_pears.evalf()\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 45\n    length_ribbon2 = 30\n    \n    longest_piece_length = gcd(length_ribbon1, length_ribbon2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = 152\n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the initial number of boys and girls\n    initial_equation = Eq(boys + girls, total_students)\n    # Equation after removing 1/11th of boys and 5 girls\n    removed_equation = Eq(boys - boys / 11, girls - 5)\n    \n    # Solve the system of equations\n    solutions = solve((initial_equation, removed_equation), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    boxes_bought = total_pencils // pencils_per_box\n\n    return boxes_bought\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Ermintrude lays 50 eggs each day\n    eggs_per_day = 50\n    \n    # Eggs become adults in 30 days\n    days_to_adult = 30\n    \n    # We are interested in the number of new adult fleas in 40 days\n    total_days = 40\n    \n    # Adult fleas start appearing after 30 days, so calculate the days when fleas become adults\n    adult_days = total_days - days_to_adult\n    \n    # The number of new adults will be the eggs laid each day, only for the days after the first 30\n    new_adult_fleas = adult_days * eggs_per_day\n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    # Number of people who can speak French, Japanese, Italian\n    french = 15\n    japanese = 12\n    italian = 13\n    \n    # Number of people who can speak both languages\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    \n    # Number of people who can speak all three languages\n    all_three = 1\n    \n    # Applying Inclusion-Exclusion Principle\n    total = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    litres_water = total_orange_drink * fraction_water\n\n    return litres_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    # Formula for the sum of an arithmetic series: n/2 * (2*a + (n-1)*d)\n    total_students = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total = story_books + magazines\n    return total\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(f'5{abcd}')\n        N = int(f'{abcd}5')\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 21*286 + 21\n    denom1 = 286\n    frac1 = Fraction(num1, denom1)\n\n    num2 = 6*2530 + 647\n    denom2 = 2530\n    frac2 = Fraction(num2, denom2)\n\n    num3 = 1*2829 + 1370\n    denom3 = 2829\n    frac3 = Fraction(num3, denom3)\n\n    # Perform calculations\n    result = frac1 / frac2 * frac3\n\n    return result\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n    \n    ans = (percentage / 100) * total\n    \n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # Sam's total money in pounds\n    pencil_cost = 0.38  # cost of pencil in pounds\n    ruler_cost = 0.59   # cost of ruler in pounds\n\n    # Calculate remaining money by subtracting the cost of pencil and ruler from the total\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n\n    return remaining_money\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the rate of typing for Star per hour (jobs/hour)\n    # Let 'n' be the rate of typing for Nini per hour (jobs/hour)\n    s, n = symbols('s n')\n\n    # If Star types for 5 hours and then Nini types for 20 hours, they finish the job (1 job)\n    eq1 = Eq(5 * s + 20 * n, 1)\n\n    # If Star types for 20 hours and then Nini types for 8 hours, they also finish the job (1 job)\n    eq2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations for s and n\n    solutions = solve((eq1, eq2), (s, n))\n\n    # Find the time taken by Nini alone to finish the job (1/n)\n    time_nini_alone = 1 / solutions[n]\n\n    return time_nini_alone\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Calculate the number of small cubes along each dimension\n    # Since the total number of cubes is 720, taking the cube root gives us the size ratio\n    # But we also need to take into consideration the size of each dimension\n    small_cubes_x = 6  # Number of small cubes along the dimension 6\n    small_cubes_y = 10  # Number of small cubes along the dimension 10\n    small_cubes_z = 12  # Number of small cubes along the dimension 12\n\n    # The number of small cubes with one face painted on each side\n    # For one face, we exclude the edges, so we have (dimension - 2) for each side\n    one_face_painted_x = (small_cubes_y - 2) * (small_cubes_z - 2)\n    one_face_painted_y = (small_cubes_x - 2) * (small_cubes_z - 2)\n    one_face_painted_z = (small_cubes_x - 2) * (small_cubes_y - 2)\n\n    # Since we have two faces for each dimension\n    total_one_face_painted = 2 * (one_face_painted_x + one_face_painted_y + one_face_painted_z)\n\n    return total_one_face_painted\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorization of 140 = 2^2 * 5 * 7\n    # Since the piles have an odd number of pieces, we can only distribute\n    # the odd prime factors, 5 and 7, among the piles.\n    # The number of divisors of 35 (5 * 7) gives the number of ways to divide\n    # the candy into odd numbered piles.\n    # 35 has (1+1)(1+1) = 4 divisors: 1, 5, 7, 35.\n    # Therefore, there are 4 ways to distribute the candies.\n    \n    return 4\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    return 20 + 19\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Since Tom takes his turn first from Stack B,\n    # to ensure Jerry wins, Jerry must make the number of stones in both stacks equal.\n    # This way, no matter what Tom does in the next turn, Jerry can mimic and take the same amount from the other stack.\n    # Since Tom took 4 from Stack B, there are now 16 stones in Stack B.\n    \n    # Jerry should take stones from Stack A to make both stacks have 16 stones\n    stones_taken = 20 - 16  # Stack A originally has 20 stones\n    \n    # Jerry must take from Stack A\n    stack = 'A'\n\n    return f\"Jerry must take {stones_taken} stone(s) from Stack {stack}.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    third_sheet_pages = [5, 6, 51, 52]  # Pages on the third sheet\n    ans = sum(third_sheet_pages)\n    return ans\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n    girls_count = total_students * fraction_girls\n    return int(girls_count)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017/2018) + (20172017/20182018)\n    denominator = 201720172017/201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    peaches_per_watermelon = 6\n    apples_per_peach = 3 / 2\n\n    apples_per_watermelon = peaches_per_watermelon * apples_per_peach\n\n    return apples_per_watermelon\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    pages = 0\n    digits = 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice = 30\n    total_orange_juice = 50\n    total_peach_juice = 20\n    price_per_cup_apple = 5\n    price_per_cup_orange = 3\n    price_per_cup_peach = 10\n    \n    total_cups = total_apple_juice + total_orange_juice + total_peach_juice\n    total_cost = (total_apple_juice * price_per_cup_apple) + (total_orange_juice * price_per_cup_orange) + (total_peach_juice * price_per_cup_peach)\n    \n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 92):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time_hour = 21\n    start_time_minute = 15\n    end_time_hour = 23\n    end_time_minute = 6\n    \n    start_minutes_total = start_time_hour * 60 + start_time_minute\n    end_minutes_total = end_time_hour * 60 + end_time_minute\n    \n    duration_in_minutes = end_minutes_total - start_minutes_total\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1 / 8\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    num_students = 0\n    layer = 0\n    while True:\n        boys = (layer * 2 + 1) ** 2 - (layer * 2) ** 2\n        girls = ((layer + 1) * 2) ** 2 - (layer * 2 + 1) ** 2\n        if boys - girls == 32:\n            num_students = ((layer + 1) * 2) ** 2\n            break\n        layer += 1\n    return num_students\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_players = 11\n    percentage_playing_violin = 12.5\n    total_pupils = (violin_players * 100) / percentage_playing_violin\n    return int(total_pupils)\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial number of each color pen in Box A.\n    blue_A, red_A, black_A, green_A = 10, 15, 20, 25\n\n    # Transfer 20 pens from Box A to Box B.\n    # Since Jane must have at least 15 pens of each colour in Box A,\n    # the 20 pens taken are from the colors with more than 15 pens.\n    # This reduces black pens and green pens since they have 20 and 25 respectively.\n    \n    # Take 5 green pens and 15 black pens from A to B.\n    black_A -= 15\n    green_A -= 5\n\n    # The pens to be returned from Box B to Box A for each color.\n    # Blue and red pens do not need to be returned since they are already \n    # 10 and 15 respectively in Box A, which already satisfies the condition.\n    blue_B_to_A, red_B_to_A = 0, 0\n    # Black pens should be returned enough to make their count 15 in Box A.\n    black_B_to_A = 15 - black_A\n    # Green pens should be returned enough to make their count 15 in Box A.\n    green_B_to_A = 15 - green_A\n\n    # Total pens to be returned from Box B to Box A.\n    return blue_B_to_A + red_B_to_A + black_B_to_A + green_B_to_A\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution # Assign the function itself to ans, as per instructions"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for dividend (d) and divisor (div)\n    d, div = symbols('d div')\n\n    # Quotient is 29, remainder is 11, we have d = div*29 + 11\n    equation1 = Eq(d, div * 29 + 11)\n\n    # Sum of dividend and divisor is 431, d + div = 431\n    equation2 = Eq(d + div, 431)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, div))\n\n    # Calculate the difference between the divisor and dividend\n    difference = solutions[d] - solutions[div]\n\n    return difference\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centre_chocolates = 16\n\n    # Since all plain chocolates could be with soft-centres, let's assume that case first.\n    plain_with_soft_centres = min(plain_chocolates, soft_centre_chocolates)\n\n    # Now, since there are more soft-centre chocolates than plain chocolates,\n    # there must be milk chocolates with soft-centres as well.\n    milk_with_soft_centres = soft_centre_chocolates - plain_with_soft_centres\n\n    # This means that the remaining plain chocolates without soft-centres would be:\n    plain_without_soft_centres = plain_chocolates - plain_with_soft_centres\n\n    # However, we know that milk chocolates with soft-centres should not exceed the total milk chocolates\n    # If milk_with_soft_centres is more than actual milk chocolates, we adjust plain_with_soft_centres accordingly\n    if milk_with_soft_centres > milk_chocolates:\n        plain_with_soft_centres -= milk_with_soft_centres - milk_chocolates\n        milk_with_soft_centres = milk_chocolates\n\n    # Since at least some milk chocolates have soft-centres, the maximum number of plain chocolates with\n    # soft-centres is if all milk chocolates have soft-centres\n    max_plain_with_soft_centres = soft_centre_chocolates - milk_chocolates\n\n    return (max_plain_with_soft_centres, plain_with_soft_centres, plain_without_soft_centres)\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each kind of coin.\n    x = symbols('x')\n\n    # The sum of the coins in pence is 1*x + 2*x + 5*x + 10*x = 90\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve for x\n    number_of_each_coin = solve(equation, x)[0]\n\n    # The total number of coins is the number of each type of coin times 4.\n    total_coins = 4 * number_of_each_coin\n\n    return total_coins\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = 0.20 * total_cars\n\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of apples and pears\n    apples, pears = symbols('apples pears', positive=True, integer=True)\n    \n    # Set up the equations based on the problem\n    # Equation 1: Total number of fruits initially\n    eq1 = Eq(apples + pears, 105)\n    \n    # Equation 2: After selling some apples and pears, the ratio of apples left to pears left is 5/6\n    eq2 = Eq((apples - (1/3) * apples) / (pears - (2/5) * pears), 5/6)\n    \n    # Solve the system of equations for apples and pears\n    solutions = solve((eq1, eq2), (apples, pears))\n    \n    # Calculate the total number of apples and pears sold\n    total_apples_sold = solutions[apples] / 3\n    total_pears_sold = (2/5) * solutions[pears]\n    total_sold = total_apples_sold + total_pears_sold\n    \n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(4*B, 5*A)\n    equation2 = Eq(6*A, 5*C)\n    equation3 = Eq(C - A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, C, and D as one unit since they have to be next to each other\n    # There are 8! ways to arrange the remaining 8 students and the unit\n    unit_and_others = factorial(8)\n\n    # There are 4! ways to arrange A, B, C, and D within the unit\n    arrangements_within_unit = factorial(4)\n\n    # Multiply to get the total number of ways\n    total_ways = unit_and_others * arrangements_within_unit\n\n    return total_ways\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Calculate the total points if everyone wins each game (no ties)\n    # as each game has 2 points.\n    games_played_by_each_student = 5  # Each student plays with 5 other students\n    total_points_without_ties = games_played_by_each_student * 2\n\n    # Sum points for the 5 students\n    points = [7, 6, 5, 4, 3]\n    total_points_five_students = sum(points)\n\n    # Calculate the total points distributed among all students.\n    # Each student plays 5 games and each game has 2 points.\n    total_points_all_students = 6 * total_points_without_ties\n\n    # Points for the remaining student\n    remaining_student_points = total_points_all_students - total_points_five_students\n\n    return remaining_student_points\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    boys_count = 9\n    unit_rate = boys_count / boys_to_girls_ratio\n    girls_count = unit_rate * 5\n    return girls_count\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the weight of A and y be the weight of B\n    x, y = symbols('x y')\n\n    # Original ratio: A/B = 5/3\n    original_ratio = Eq(x/y, 5/3)\n\n    # New ratio when 10 grams are moved: (A-10)/(B+10) = 7/5\n    new_ratio = Eq((x-10)/(y+10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (x, y))\n\n    # Total weight = weight of A + weight of B\n    total_weight = solutions[x] + solutions[y]\n\n    return total_weight\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if (num % 3 == 2) and (num % 5 == 2) and (num % 7 == 2):\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    count = 0\n    while product % 10 == 0:\n        product //= 10\n        count += 1\n    return count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Define a list of tuples with mass and units\n    masses = [(30, 'g'), (1, 'kg'), (300, 'g'), (2.5, 'kg'), (3000, 'g'), (150, 'g'), (3, 'g')]\n    \n    # Convert all masses to grams for comparison\n    converted_masses = [mass * 1000 if unit == 'kg' else mass for mass, unit in masses]\n    \n    # Find the maximum mass\n    max_mass = max(converted_masses)\n    \n    # Identify the index of the maximum mass\n    max_mass_index = converted_masses.index(max_mass)\n    \n    return max_mass_index\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    # Total number of players\n    total_players = 378\n    # First and last term of the arithmetic sequence\n    first_term = 22\n    last_term = 62\n    \n    # To find the common difference, we can use the sum formula for an arithmetic sequence:\n    # total_players = n/2 * (first_term + last_term)\n    # We know the total_players, first_term, and last_term, we need to solve for n (number of terms)\n    # Then, we can find the common difference 'd' by using another formula:\n    # last_term = first_term + (n - 1) * d\n\n    # Let's start by finding n\n    # Rearranging the sum formula to find n:\n    # n = (2 * total_players) / (first_term + last_term)\n\n    # We know that n needs to be an integer because you can't have a fraction of a line of players\n    n = (2 * total_players) / (first_term + last_term)\n\n    # Once we have n, we can find d\n    # d = (last_term - first_term) / (n - 1)\n    d = (last_term - first_term) / (n - 1)\n    \n    return int(d)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Total number of weeks in 1000 days\n    weeks = 1000 / 7\n\n    # Total barkings in 1000 days\n    total_barkings = 3 * weeks\n\n    # Probability of barking when theft occurred\n    prob_bark_theft = 0.9\n    \n    # Since there are 2 thefts, we double the probability \n    # that the dog barks at the time of the theft.\n    prob_bark_during_theft = prob_bark_theft / total_barkings\n\n    return prob_bark_during_theft * 2\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for candies\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(apple, orange + 7)       # 7 more apple candies than orange\n    equation2 = Eq(apple, grape + 3)        # 3 more apple candies than grape\n    equation3 = Eq(pineapple, orange + 2)   # 2 more pineapple candies than orange\n    equation4 = Eq(apple + orange + grape + pineapple, 25)  # Total candies bought\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    girls_count = total_children * girls_ratio\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70*4) - (80*3) + (60*5)\n    return ans\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    # stickers = 13 * pupils + 190\n    equation1 = Eq(stickers, 13 * pupils + 190)\n\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    # stickers = 17 * pupils + 50\n    equation2 = Eq(stickers, 17 * pupils + 50)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Assuming the smallest difference is when one number is arranged in ascending order\n    # and the other number is arranged in descending order except for the last two digits\n    # which are swapped to minimize the difference. For example: 123456798 and 987654321\n\n    ascending_number = int(''.join(map(str, range(1, 10))))\n    descending_number = int(''.join(map(str, range(9, 0, -1))))\n\n    # Swapping the last two digits of the descending_number\n    descending_number = descending_number - 1 * (descending_number % 10) - 10 * ((descending_number // 10) % 10) \\\n                        + 1 * ((descending_number // 10) % 10) + 10 * (descending_number % 10)\n\n    # Calculating the difference\n    difference = descending_number - ascending_number\n\n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation 1: boys = girls - 65\n    equation1 = Eq(boys, girls - 65)\n\n    # Equation 2: (1 - 2/5) * boys = (1 - 3/7) * girls\n    equation2 = Eq((1 - 2/5) * boys, (1 - 3/7) * girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    boys_left = (1 - 2/5) * solutions[boys]\n    girls_left = (1 - 3/7) * solutions[girls]\n    \n    total_left = boys_left + girls_left\n\n    return int(total_left)\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for number in range(1, 131):\n        count += str(number).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_bricks_after_third = 25\n    bricks_moved_third = 68\n    \n    # Half of the remaining bricks after second trip, plus 11, is what was moved on the second trip.\n    half_remaining_bricks_after_third = (remaining_bricks_after_third + bricks_moved_third) * 2 - 11\n    \n    # Total bricks before the second trip\n    bricks_before_second = half_remaining_bricks_after_third + bricks_moved_third + remaining_bricks_after_third\n    \n    # Half of the bricks moved on the first trip, minus 26, is what was moved on the first trip.\n    bricks_moved_first = 2 * (bricks_before_second / 2 - 26)\n    \n    # Total bricks at first\n    total_bricks = bricks_moved_first + bricks_before_second\n\n    return int(total_bricks)\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum_ages = 22\n    target_sum_ages = 40\n    # The sum of their ages increases by 2 each year (1 year for each person)\n    increase_per_year = 2\n    # Calculate number of years it will take for the sum of their ages to be 40\n    years_until_target = (target_sum_ages - current_sum_ages) / increase_per_year\n    return years_until_target\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # We need to find a perfect square that allows the position to be second in any direction\n    # so the side of the square minus one must also be a perfect square (as we exclude Mike's position)\n\n    # Let's start with the smallest possible square greater than 1x1, which is 2x2 = 4\n    # We look for squares until the side length minus 1 is not a square anymore, which would be impractical for a classroom size\n    side_length = 2\n    while True:\n        total_students = side_length ** 2\n        if ((side_length - 1) ** 2).is_integer():\n            return total_students\n        side_length += 1\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for i in range(1, 21):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    final_passengers = 22\n    # Let original number of passengers be x\n    # After first stop: x - (2/5)x = (3/5)x\n    # After second stop: (3/5)x - (1/3)(3/5)x = 22\n    # Solve for x: (3/5)x * (2/3) = 22\n    x = (22 * 5) / (3 * 2/3)\n    return int(x)\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    # total number of pupils\n    total_pupils = 1690\n    \n    # Let number of girls who can swim be 31x and those who cannot be 49x\n    # then, number of girls = 31x + 49x = 80x\n    \n    # number of boys = number of girls + 90\n    # number of boys = 80x + 90\n    \n    # Let number of boys who can swim be y and those who cannot be y + 120\n    # then, number of boys = y + (y + 120) = 2y + 120\n    \n    # total number of pupils is the sum of boys and girls\n    # 80x + 90 + 2y + 120 = total_pupils\n    # 80x + 2y + 210 = total_pupils\n    # 80x + 2y = total_pupils - 210\n    \n    # since number of boys = number of girls + 90\n    # 80x + 90 = 2y + 120\n    # 80x - 2y = 30\n    \n    # We will solve the system of equations:\n    # 80x + 2y = 1690 - 210 = 1480\n    # 80x - 2y = 30\n    \n    # Adding both equations, we have:\n    # 160x = 1510\n    # x = 1510 / 160\n    \n    x = 1510 // 160  # Using integer division since number of people cannot be a fraction\n    \n    # Now we can find the number of boys and girls\n    number_of_girls = 80 * x  # 80x\n    number_of_boys = 1690 - number_of_girls  # Total pupils - number of girls\n    \n    # Number of girls who cannot swim is 49x\n    girls_cannot_swim = 49 * x\n    \n    # Number of boys who cannot swim is y + 120\n    # And we know number of boys is 2y + 120\n    # so, y + 120 = (number_of_boys - 120) / 2\n    boys_cannot_swim = (number_of_boys - 120) // 2\n    \n    # Total pupils who cannot swim is sum of boys and girls who cannot swim\n    total_cannot_swim = girls_cannot_swim + boys_cannot_swim\n    \n    return total_cannot_swim\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        # i_str: current iteration in string format to manipulate digits\n        i_str = str(i)\n        original_last_digit = i_str[-1]\n        new_i = int(original_last_digit + i_str[:3])\n        if new_i - i == 5877:\n            return i\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a list to store the number of ways to reach each step.\n    # Initialize with 0 ways to reach any step except the 0th step, which has 1 way.\n    ways = [0] * 11\n    ways[0] = 1  # Base condition: 1 way to stay at the 0th step (without moving)\n    \n    # Calculate the number of ways to reach each step, starting from the 1st step\n    for step in range(1, 11):\n        # If the current step is reachable by taking 2 steps from a previous step\n        if step - 2 >= 0:\n            ways[step] += ways[step - 2]\n        # If the current step is reachable by taking 3 steps from a previous step\n        if step - 3 >= 0:\n            ways[step] += ways[step - 3]\n\n    # The number of ways to reach the 10th step is the final answer\n    return ways[10]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    # Initialize the repeated number and counter\n    repeated_number = \"1998\"\n    counter = len(repeated_number)\n\n    # Loop until the constructed number is divisible by 33\n    while True:\n        number_to_check = int(repeated_number * (counter // len(repeated_number)))\n        if number_to_check % 33 == 0:\n            break\n        counter += 1\n        \n    return counter\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number\n    b = group_number ** 2\n    c = group_number ** 3\n\n    sum_of_group = a + b + c\n    return sum_of_group\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    miles_per_run = 1/4\n    total_miles = 3.75\n    runs_needed = total_miles / miles_per_run\n    return runs_needed\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    return 3000000 + 30000 + 30\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kim = symbols('kim')\n    shaun = 2 * kim\n    andrew = shaun - 24\n\n    # Total stamps equation\n    equation = Eq(kim + shaun + andrew, 256)\n\n    # Solve for Kim's stamps\n    kim_stamps = solve(equation, kim)[0]\n    andrew_stamps = shaun.subs(kim, kim_stamps) - 24\n\n    return andrew_stamps\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Given proportion 10:x = 14:21\n    # Cross-multiplication gives 10 * 21 = 14 * x\n    x = (10 * 21) / 14\n\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100, 6):\n        if number % 9 == 0 and str(number).endswith('0'):\n            ans = number\n            break\n    return ans\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    johnnys_answer = 5839\n    correct_answer = 5832 + (7 * 10)\n    return correct_answer if johnnys_answer != correct_answer else True\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    return 27\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3m to cm by multiplying by 100\n    used_length_cm = 147 + 32.5 + 67  # Sum of the three known pieces in cm\n    fourth_piece_length_cm = total_length_cm - used_length_cm  # Subtracting the used length from the total length\n    \n    return fourth_piece_length_cm\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    number_of_leaves = pieces_of_paper // interval\n\n    return number_of_leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # Initialize with the first term of the sequence: 1\n    for n in range(2, 11):  # Start from 2 to 10 for the denominators\n        ans += (n-1)*(1/n)  # Adding the sum of each fractional part with the same denominators\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of watches and caps\n    watches, caps = symbols('watches caps')\n\n    # Initial ratio equation: watches / caps = 8 / 11\n    initial_ratio_eq = Eq(watches / caps, 8 / 11)\n\n    # Ratio after selling 88 caps: watches / (caps - 88) = 12 / 11\n    final_ratio_eq = Eq(watches / (caps - 88), 12 / 11)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio_eq, final_ratio_eq), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # It takes 30 minutes to deliver to 6-1=5 spaces between houses\n    # There are 10-1=9 spaces between the 10 houses\n    # The time it will take is proportional to the spaces between houses\n    time_per_space = 30 / 5  # time for one space between houses\n    total_time = time_per_space * 9  # total time for all spaces between houses\n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 1.05 * 100  # Convert meters to centimeters\n    # Let the length of the shorter piece be x cm\n    # Then the length of the longer piece is 2x cm\n    # The total length of the ribbon is x + 2x = 3x\n    # So, 3x = total_length_cm\n    x = total_length_cm / 3\n    longer_piece_length = 2 * x  # The longer piece is twice as long as the shorter\n    return longer_piece_length\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probability that A passes and others do not\n    p_A = 0.5 * (1 - 0.4) * (1 - 0.2)\n    # Probability that B passes and others do not\n    p_B = (1 - 0.5) * 0.4 * (1 - 0.2)\n    # Probability that C passes and others do not\n    p_C = (1 - 0.5) * (1 - 0.4) * 0.2\n    # Probability that A and B pass and C does not\n    p_AB = 0.5 * 0.4 * (1 - 0.2)\n    # Probability that A and C pass and B does not\n    p_AC = 0.5 * (1 - 0.4) * 0.2\n    # Probability that B and C pass and A does not\n    p_BC = (1 - 0.5) * 0.4 * 0.2\n    # Probability that All pass\n    p_ABC = 0.5 * 0.4 * 0.2\n    # Probability that None passes\n    p_none = (1 - 0.5) * (1 - 0.4) * (1 - 0.2)\n    \n    # Checking the maximum probability for the number of students to pass\n    probabilities = [p_A, p_B, p_C, p_AB, p_AC, p_BC, p_ABC, p_none]\n    max_probability = max(probabilities)\n    max_index = probabilities.index(max_probability)\n\n    # The index corresponds to the number of people passing: 0 for p_none, 1 for p_A, p_B, or p_C, etc.\n    num_passing = 0\n\n    if max_index == 0 or max_index == 1 or max_index == 2: \n        num_passing = 1\n    elif max_index == 3 or max_index == 4 or max_index == 5: \n        num_passing = 2\n    elif max_index == 6: \n        num_passing = 3\n    else: # max_index == 7 for p_none\n        num_passing = 0\n\n    return num_passing\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == (D // 4) and D % 4 == 0:\n                for B in range(1, 10):\n                    if B == A - 1:\n                        for C in range(1, 10):\n                            ABCD = A * 1000 + B * 100 + C * 10 + D\n                            DCBA = D * 1000 + C * 100 + B * 10 + A\n                            if ABCD * 4 == DCBA and len(set(str(ABCD))) == 4:\n                                return ABCD\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    return 1200031093\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # The total number of coins that can be picked in a cycle by both players\n    cycle_coins = 11 + 11\n\n    # The target is to leave a multiple of cycle_coins plus 1 for Ken,\n    # which will force him into picking the last coin.\n    # So we have to bring down 2015 to such a number.\n    \n    # We find the number of full cycles initially present\n    full_cycles, remaining = divmod(2015 - 1, cycle_coins)\n    \n    # The number of coins Jack has to pick to leave a state with\n    # (number of cycles * cycle_coins) + 1 coins, which is a losing state for Ken.\n    coins_to_pick = remaining + 1\n    \n    return coins_to_pick\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # ●○●○○ pattern repeat: one black ball (●) followed by two white balls (○○)\n    # every pattern has 3 balls total -- 1 black, 2 white\n    white_balls_per_pattern = 2\n    total_white_balls = 92\n\n    # find the amount of patterns needed to make up 92 white balls\n    total_patterns = total_white_balls // white_balls_per_pattern\n    remaining_white_balls = total_white_balls % white_balls_per_pattern\n\n    # each pattern has 3 balls, so the total number of balls is\n    total_balls = total_patterns * 3\n\n    # we have to consider if there's an incomplete pattern due to remaining white balls\n    if remaining_white_balls == 1:\n        total_balls += 2  # one black and one white ball to continue the pattern\n    \n    return total_balls\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def pattern_value(number):\n        # Convert to string to count occurrences\n        return str(number).count('0') + str(number).count('6') + str(number).count('8') * 2 + str(number).count('9')\n\n    # Apply the pattern to 2015\n    ans = pattern_value(2015)\n    return ans\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, we know that b = 0\n    b = 0\n    # The line also passes through point (4, 8), so we can use these coordinates to find the slope m.\n    # Formally, slope m is defined as: m = (y2 - y1) / (x2 - x1), where (x1, y1) is the origin (0, 0) and (x2, y2) is (4, 8).\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)\n    \n    # We plug the values of m and b into the equation y = mx + b to find the linear equation.\n    equation = f'y={m}x+{b}'\n    \n    # Since b is zero, we can simplify the equation to y = mx.\n    return equation.replace('+0', '')\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # Loop through all the hours of the day\n    for hour in range(0, 24):\n        # Loop through all the minutes of the hour\n        for minute in range(0, 60):\n            hour_str = f\"{hour:02}\"  # Format hour to always have two digits\n            minute_str = f\"{minute:02}\"  # Format minute to always have two digits\n            # Concatenate hour and minute strings and count occurrences of '4'\n            time_str = hour_str + minute_str\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    youngest_age = symbols('youngest_age')\n\n    equation = Eq(youngest_age + (youngest_age + 1) + (youngest_age + 2), 42) \n    youngest_age_solution = solve(equation, youngest_age)\n\n    oldest_age = youngest_age_solution[0] + 6\n\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_length_mm = 4\n    sharpened_length_cm = sharpened_length_mm / 10  # Convert mm to cm\n    new_length_cm = original_length_cm - sharpened_length_cm\n    return new_length_cm\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total = 89 * 4\n    target_average = 95\n    test_scores = 100\n\n    tests_taken = 0\n    while True:\n        total_tests = tests_taken + 4\n        required_total = total_tests * target_average\n        if required_total - current_total <= test_scores * tests_taken:\n            break\n        tests_taken += 1\n    \n    return tests_taken\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    distance1 = 420\n    distance2 = 620\n    distance3 = 1200 - distance1 - distance2\n\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $2 notes (n2) and $10 notes (n10)\n    n2, n10 = symbols('n2 n10')\n    \n    # Total number of notes\n    total_notes = Eq(n2 + n10, 72)\n    \n    # Spent 90% of the $10 notes and 75% of the $2 notes\n    spent_n2 = 0.75 * n2\n    spent_n10 = 0.90 * n10\n    \n    # Remaining notes\n    remaining_n2 = n2 - spent_n2\n    remaining_n10 = n10 - spent_n10\n    \n    # Twice as many $10 notes as $2 notes after spending\n    remaining_notes_eq = Eq(remaining_n10, 2 * remaining_n2)\n    \n    # Solve the system of equations\n    solutions = solve((total_notes, remaining_notes_eq), (n2, n10))\n    \n    # Calculate the cost of the gift\n    cost = spent_n2 * 2 + spent_n10 * 10\n    \n    # Substitute the number of notes in the cost equation\n    total_cost = cost.subs({n2: solutions[n2], n10: solutions[n10]})\n    \n    return total_cost\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    paved_per_day = 75  # meters\n    total_length = days * paved_per_day\n    return total_length\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x, y, z be the rates of hoses A, B, and C respectively (pool/hour)\n    x, y, z = symbols('x y z')\n    \n    # Equations based on the given information\n    equation1 = Eq(1/x + 1/y, 1/9)\n    equation2 = Eq(1/x + 1/z, 1/12)\n    equation3 = Eq(1/y + 1/z, 1/18)\n\n    # Solve the system of equations for x, y, z\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Calculate the total rate when all three hoses are turned on\n    total_rate = solutions[x] + solutions[y] + solutions[z]\n    \n    # Calculate time by taking the reciprocal of the total rate\n    time = 1 / total_rate\n    \n    return time\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are 3 different colors and we want to guarantee at least 2 are the same color,\n    # by taking one from each color we are still not guaranteed to have a pair of the same color (3 markers).\n    # So we must take one more to ensure we have a pair of the same color (3 + 1 markers).\n    return 3 + 1\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_value = 164\n    total_notes = 58\n    \n    for fives in range(total_notes + 1):\n        twos = total_notes - fives\n        if (fives * 5) + (twos * 2) == total_value:\n            return fives\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    term_7 = 105\n    term_8 = 120\n    term_9 = 135\n\n    difference = term_8 - term_7\n\n    term_100 = term_7 + difference * (100 - 7)\n\n    return term_100\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of stickers Sam, Peter, and John had originally as S, P, and J respectively.\n    # According to the problem, Sam and Peter had stickers in the ratio 7:5,\n    # so let's assume that Sam initially had 7x stickers, and Peter had 5x stickers.\n    # Also, let's represent the number of stickers they gave to John as 20% of their own stickers.\n    \n    # We also know that John's stickers were increased by 80% after receiving stickers\n    # from Sam and Peter, so the number of stickers John received is equal to 80% of\n    # the stickers he had originally (0.8 * J).\n    \n    # According to the problem, in the end Sam had 20 stickers more than John,\n    # so we set up the equation S - 0.2 * S = J + 0.8 * J + 20.\n\n    # The equations based on the given information:\n    # 1. 0.2 * S + 0.2 * P = 0.8 * J\n    # 2. 0.8 * S = J + 20\n    \n    # Let x be the multiplier for the ratio.\n    x, J = symbols('x J')\n\n    # Replace S and P with 7x and 5x, and rearrange the equations to form a system.\n    equation1 = Eq(0.2 * 7 * x + 0.2 * 5 * x, 0.8 * J)\n    equation2 = Eq(0.8 * 7 * x, J + 20)\n\n    # Solve the system of equations for x and J.\n    solutions = solve((equation1, equation2), (x, J))\n    \n    # Peter had 5x stickers at first, so we calculate that.\n    peter_stickers_at_first = 5 * solutions[x]\n\n    # Return the number of stickers Peter had at first.\n    return peter_stickers_at_first\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Initializing the number of marbles list with the minimum number of marbles\n    # assuming the two equal boxes have 2 marbles each\n    marbles = [2, 2]\n    \n    # Filling the rest of the boxes with increments of 2 starting from 4\n    # as we already have two boxes with 2\n    next_count = 4\n    for i in range(8):  # 8 because we already have 2 boxes filled\n        marbles.append(next_count)\n        next_count += 2\n    \n    # Calculating the sum of marbles in all boxes\n    ans = sum(marbles)\n    \n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the price of one muffin be m.\n    m = symbols('m')\n\n    # Since the price of one cupcake is thrice the price of one muffin, one cupcake costs 3m.\n    # Cellina spent 5/9 of her money to buy 36 cupcakes and 32 muffins.\n    # This means 36 cupcakes cost 36 * 3m and 32 muffins cost 32 * m.\n    # Together, the cost is 36 * 3m + 32 * m = 5/9 of her total money.\n    \n    # She then used 1/6 of her money to buy more cupcakes, which had a total cost of $187.50.\n    # Since the cost of all cupcakes is $187.50, we can say 36 * 3m + (1/6 of total money) = $187.50.\n    \n    # We establish the equations:\n    total_money = symbols('total_money')\n    equation1 = Eq(36*3*m + 32*m, 5/9*total_money)\n    equation2 = Eq(36*3*m + (1/6)*total_money, 187.50)\n\n    # Solve the simultaneous equations to find the price of one muffin (m) and the total money.\n    solution_values = solve((equation1, equation2), (m, total_money))\n    \n    # Calculate how much she spent on muffins: 32 muffins * price of one muffin.\n    muffins_cost = 32 * solution_values[m]\n\n    return muffins_cost\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    min_pigeons_most_cage = (total_pigeons // total_cages) + 1\n\n    return min_pigeons_most_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    parterres = 1007\n    # Since a sprinkler goes between each two, we need one less sprinkler than the number of parterres.\n    num_sprinklers = parterres - 1\n    \n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindrome(steps):\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    all_possible_numbers = list(permutations(digits, 3))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5/9\n    given_away = 440\n    initial_collection = given_away / (1 - remaining_fraction)\n    return initial_collection\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Marry had 7/5 as many stickers as Alexis.\n    equation1 = Eq(marry, (7/5) * alexis)\n    # They both gave 20% of their stickers to Charlotte.\n    charlotte_initial = charlotte / 1.8  # Charlotte had 100% before which became 180%\n    equation2 = Eq(charlotte_initial + 0.20 * marry + 0.20 * alexis, charlotte)\n    # Mary had 20 stickers more than Charlotte after giving away.\n    equation3 = Eq(marry - 0.20 * marry, charlotte + 20)\n\n    # System of equations.\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for total length of the road and the length paved on the second day\n    total_length, second_day = symbols('total_length second_day')\n\n    # Equations based on the problem statement\n    equation1 = Eq(second_day, 4 + (1/6) * total_length)  # Second day paving\n    equation2 = Eq(8 + second_day, (5/12) * total_length)  # Total paving over two days\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (total_length, second_day))\n\n    return solutions[total_length]\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    n = 1\n    while True:\n        num = 35 * n\n        if str(num).endswith('35') and sum(int(d) for d in str(num)) == 35:\n            return num\n        n += 1\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Length and Width of the rectangular field\n    length = 204\n    width = 144\n    # Since the corners are also planted, we subtract 4 from the total wheat\n    # And since each extends two directions from the corners, we divide by 2\n    plants_on_edges = (116 - 4) // 2\n    \n    # Since the plants are evenly distributed along the edges, the distance between them\n    # will be the total perimeter of the rectangle divided by the number of plants on the edges\n    perimeter = 2 * (length + width)\n    distance_between_wheat = perimeter / plants_on_edges\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    return 3  # Each round eliminates one player, so for four players, three rounds are needed.\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Let's denote the rainy days as x and calculate the sunny days as total_days - x\n    # The total nuts harvested is then sunny_nuts*(total_days - x) + rainy_nuts*x\n    # We set up the equation as follows:\n    # sunny_nuts*(total_days - x) + rainy_nuts*x = total_nuts\n\n    for x in range(total_days + 1):\n        if sunny_nuts * (total_days - x) + rainy_nuts * x == total_nuts:\n            return x\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    only_one_question_correct = (first_question_correct - both_questions_correct) + \\\n                                (second_question_correct - both_questions_correct)\n\n    return only_one_question_correct\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    best_price = float('inf')\n    \n    for pack_of_5 in range(0, 5):\n        for pack_of_2 in range(0, 9):\n            single_bottles = 17 - 5*pack_of_5 - 2*pack_of_2\n            if single_bottles >= 0:\n                price = pack_of_5 * 0.60 + pack_of_2 * 0.28 + single_bottles * 0.15\n                best_price = min(best_price, price)\n    \n    return best_price\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42 # speed of the train in m/s\n    time = 5 # time in seconds to pass the tree\n\n    length = speed * time # length of the train (distance = speed * time)\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(7):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('4th April', '%dth %B')\n    end_date = datetime.strptime('18th May', '%dth %B')\n    \n    # Updating the start_date and end_date year to current year, assuming current year as 2023.\n    # If the year is different, change the year value below accordingly.\n    start_date = start_date.replace(year=2023)\n    end_date = end_date.replace(year=2023)\n    \n    days_off = (end_date - start_date).days + 1  # Adding 1 to include the start date\n    return days_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has and a be the number Alice has\n    r, a = symbols('r a')\n\n    # Equation 1: After giving 10 pieces, Rachel and Alice have the same amount\n    eq1 = Eq(r - 10, a + 10)\n\n    # Equation 2: After eating 8 pieces each, Rachel has 3 times the candies Alice has\n    eq2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations for r and a\n    solutions = solve((eq1, eq2), (r, a))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    total_spent = 59\n    cost_of_towel = 10\n    cost_of_brush = 3\n    max_brush_cost = 10\n    max_brushes = max_brush_cost // cost_of_brush\n    brushes_bought = total_spent % cost_of_towel // cost_of_brush\n    return brushes_bought if brushes_bought <= max_brushes else max_brushes\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = [\n        '285+15/5-2',          # original expression\n        '(285+15)/5-2',        # one pair of brackets around 285+15\n        '285+(15/5)-2',        # unnecessary as same as original\n        '285+15/(5-2)',        # one pair of brackets around 5-2\n        '(285+15/5)-2',        # unnecessary as same as original\n        '285+(15/5-2)',        # one pair of brackets around 15/5-2\n        '285+15/(5-2)',        # already listed\n        '(285+15)/5-2',        # already listed\n        '(285+15/5-2)',        # two pair of brackets around entire expression except the last subtraction\n        '285+(15/(5-2))'       # two pair of brackets, inner pair has already been listed\n    ]\n\n    # Using set to eliminate duplicates in results\n    results = set()\n\n    for expr in expressions:\n        # Evaluate the expression and add its result to the set\n        results.add(eval(expr))\n\n    ans = len(results)\n    return ans\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of mushrooms gathered in the second hour\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    equation = Eq(x + (x + 26), 40)\n\n    # Solve the equation\n    mushrooms_second_hour = solve(equation, x)\n\n    return mushrooms_second_hour[0]\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result = 71\n    subtracted = result - 8\n    original_number = subtracted / 7\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    return 49 / 100\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '8']\n    # Generate all permutations of 3 digits without using the same number twice\n    perm = permutations(digits, 3)\n    # Convert tuples to integer and filter out numbers that do not start with '0'\n    valid_numbers = [int(''.join(p)) for p in perm if p[0] != '0']\n    # Count valid numbers\n    return len(valid_numbers)\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of teddy bears made on the first day\n    x = symbols('x')\n    \n    # Sum of an arithmetic sequence: (n/2) * (first_term + last_term)\n    # where last_term = first_term + (n - 1) * difference\n    # We know n=5 (5 days), total sum is 35 teddy bears, and difference is 2 (each day she makes 2 more)\n    # Equation: 35 = (5/2) * (x + (x + 4 * 2)), because the last_term is the first_term + 4 * 2 (difference over 4 days)\n    \n    equation = Eq((5/2) * (x + (x + 8)), 35)\n    \n    # Solve the equation to find the value of x\n    first_day_bears = solve(equation, x)[0]\n    \n    # The fifth day will be the first day count + 4 * difference\n    fifth_day_bears = first_day_bears + 4 * 2\n\n    return fifth_day_bears\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Worst case scenario to not get a blue one is to get all pink and grey ones.\n    pink = 9\n    grey = 7\n    # So to ensure we get a blue one, we need to draw one more than all pink and grey.\n    # This way, we are sure that at least one blue marble has been drawn.\n    marbles_to_draw = pink + grey + 1\n    return marbles_to_draw\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n    original_price = sales_tax_paid / sales_tax_rate\n    return original_price\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    result = (3/10) / (6/7) * 100\n    return result\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from sympy import primerange\nfrom itertools import permutations\n\n# All prime numbers less than 8, to easily check for coprime pairs\nprimes = set(primerange(1, 9))\n\ndef is_coprime_pair(x, y):\n    return x + y in primes\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(is_coprime_pair(perm[i], perm[i+1]) for i in range(len(perm)-1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Original difference in number of boys and girls\n    original_condition = Eq(girls, boys + 30)\n    \n    # Number of boys and girls left after some left for recess\n    boys_left = boys - (3/5) * boys\n    girls_left = girls - (5/8) * girls\n    \n    # After some students left for recess, the number of boys and girls remaining is equal\n    recess_condition = Eq(boys_left, girls_left)\n    \n    # Solve the equations\n    solutions = solve((original_condition, recess_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    # Let f represent the number of frogs initially, and d represent the number of dragonflies initially\n    # According to the problem statement:\n    # f = d + 9\n    # After the magic show, we know:\n    # f + d = 11 + 10\n\n    # Total animals initially equals the total animals finally, since they just change form\n    initial_total_animals = 11 + 10  # total number of animals is conserved\n\n    # From initial_total_animals we derive the initial number of dragonflies\n    d = (initial_total_animals - 9) / 2\n\n    # The initial number of frogs is 9 more than the initial number of dragonflies\n    f = d + 9\n\n    return int(f)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    s = (amy_apples - john_apples) // 2\n\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        \"285+15/5-2\",\n        \"(285+15)/5-2\",\n        \"285+(15/5-2)\",\n        \"285+15/(5-2)\",\n        \"(285+15/5)-2\",\n        \"(285+15/5-2)\",\n        \"285+(15/5)-2\",\n        \"(285+15)/5-2\",\n        \"285/((15/5)-2)\",\n        \"285/(15/5-2)\",\n        \"285/15/5-2\",\n        \"(285/15/5)-2\",\n        \"285/(15/(5-2))\",\n        \"(285/15)/(5-2)\"\n    ]\n    \n    results = set()\n    \n    for expr in expressions:\n        try:\n            results.add(eval(expr))\n        except ZeroDivisionError:\n            pass\n    \n    return len(results)\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n\n    james_cards = 3 * (jack_cards + tom_cards)\n\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the rates of work of A, B, and C\n    a, b, c = symbols('a b c')\n    \n    # Equations based on the given information\n    eq1 = Eq(1/a + 1/b, 1/3)  # A and B together\n    eq2 = Eq(1/b + 1/c, 1/4)  # B and C together\n    eq3 = Eq(1/a + 1/c, 1/8)  # A and C together\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (a, b, c))\n\n    # Get a single solution (assuming a positive rate of work)\n    a_rate = solutions[a]\n    b_rate = solutions[b]\n    c_rate = solutions[c]\n\n    # Time taken by A, B, and C to complete the job together\n    time_together = 1 / (a_rate + b_rate + c_rate)\n\n    return float(time_together)\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    total = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # The amount of 15% sugar water in kg\n    sugar_45 = 2 * 0.45  # Total sugar in the 45% sugar water\n    sugar_15 = x * 0.15  # Total sugar in the 15% sugar water\n    total_sugar = sugar_45 + sugar_15\n    total_water = 2 + x  # Total weight of the final mixture\n    equation = Eq(total_sugar / total_water, 0.25)  # Setting up the concentration equation\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    johnson, vicky = symbols('johnson vicky')\n    \n    equation1 = Eq(johnson + vicky, 48)  # Johnson and Vicky together have 48 coins\n    equation2 = Eq(vicky + 8, johnson - 2)  # Vicky will still have 2 fewer coins than Johnson after he gives her 8 coins\n    \n    solutions = solve((equation1, equation2), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_ratio = 3\n    girls_ratio = 2\n    total_boys = 42\n\n    girls_per_line = (total_boys / boys_ratio) * girls_ratio\n    return int(girls_per_line)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(total_sum)[-5:]\n    ans = sum(map(int, last_five_digits))\n    return ans\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Using inverse operations to find the original number\n    result_after_adding_6 = 77 // 7\n    original_number = result_after_adding_6 - 6\n    return original_number\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define c as the number of candies and k as the number of kids\n    c, k = symbols('c k')\n\n    # Every kid eats 18 candies, 12 more candies are needed\n    equation1 = Eq(c, k * 18 + 12)\n\n    # Every kid eats 15 candies, the candies are just enough for k + 2 kids\n    equation2 = Eq(c, (k + 2) * 15)\n\n    # Solve the system of equations for c and k\n    solutions = solve((equation1, equation2), (c, k))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    return solutions[david] + solutions[eugene]\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n\n    cost_per_kilogram = total_cost / total_weight\n\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n\n    # After Sam ate 1/4 of her cookies\n    sam_after_eating = 3/4 * sam\n\n    # After Tim bought 1/5 more of his cookies\n    tim_after_buying = tim + 1/5 * tim\n\n    # Sam had 663 fewer cookies than Tim after the transactions\n    equation = Eq(sam_after_eating, tim_after_buying - 663)\n\n    # Total cookies\n    total_cookies_equation = Eq(sam + tim, 1170)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_cookies_equation), (sam, tim))\n\n    # Sam ate 1/4 of her cookies\n    sam_ate = 1/4 * solutions[sam]\n\n    return sam_ate\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6\n    total_fruit_8_days = fruit_per_day * 8\n    return total_fruit_8_days\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks after increasing his speed\n    t = symbols('t')\n\n    # Distance walked before increasing speed = speed * time\n    distance_before_increase = 150 * 10\n\n    # Distance walked after increasing speed = (initial speed + increase) * time\n    distance_after_increase = (150 + 50) * t\n\n    # Total distance walked\n    total_distance = distance_before_increase + distance_after_increase\n\n    # Create an equation based on the total distance\n    equation = Eq(total_distance, 3700)\n\n    # Solve the equation for t\n    time_after_increase = solve(equation, t)[0]\n\n    # Total time spent walking is time before increase + time after increase\n    total_time = 10 + time_after_increase\n\n    return total_time\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_stamps = 40\n    ting_stamps = 32\n    remaining_ratio = 1 / (1 + 2)  # Sally's share in the final ratio 1:2\n\n    # Let x be the number of stamps Sally gave to Ting\n    # (40 - x) is Sally's remaining stamps\n    # (32 + x) is Ting's stamps after getting x stamps from Sally\n\n    # Set up the equation based on ratios: (Sally's remaining stamps)/(Ting's stamps after getting x) = 1/2\n    x = symbols('x')\n    equation = Eq((sally_stamps - x) / (ting_stamps + x), remaining_ratio)\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n    ting_final = ting_stamps + x_value  # Calculate Ting's stamps in the end\n\n    return ting_final\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create congruences based on the problem statement.\n    # When divided by 2, 3, 4, 6 there's a remainder of 1, so\n    # number mod 2 = 1, number mod 3 = 1, number mod 4 = 1, and number mod 6 = 1\n    # When divided by 7 there's no remainder, so number mod 7 = 0\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Use solve_congruence to find a number that fits all the above congruences\n    number, _ = solve_congruence(*congruences)\n\n    # We need a number between 200 and 300. Since we are using mod,\n    # the solution could be any multiple of least common multiple of divisors (2, 3, 4, 6, 7)\n    # plus the remainder found. We find the first such result in the required range.\n    lcm = 2 * 3 * 4 * 7  # lcm of 2,3,4, and 7 is 2*3*4*7, 6 is omitted as it is not co-prime with others\n    while number < 200 or number > 300:\n        if number > 300:\n            number -= lcm  # Subtract LCM to stay within the range if larger\n        else:\n            number += lcm  # Add LCM to stay within the range if smaller\n\n    return number\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    packet_price = 4\n    budget = 20\n    sweets_per_packet = 8\n    free_sweets_condition = 2  # one free sweet for every two packets bought\n\n    # Calculate the number of packets that can be bought with the budget\n    packets_bought = budget // packet_price\n\n    # Calculate the number of free sweets earned\n    free_sweets = packets_bought // free_sweets_condition\n\n    # Total sweets will be the sweets from bought packets plus the free sweets\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # For finding the least possible number for the child with most candies,\n    # The other 7 children should get the least possible candies, starting from 1.\n    # So, we start the distribution from 1,2,3,...7 for the other kids.\n    \n    # Calculate the total number of candies distributed to the first 7 children\n    distributed_candies = sum(range(1, 8))\n    \n    # Subtract the distributed candies from the total number of candies to find\n    # the number of candies for the child who gets the most.\n    most_candies = 88 - distributed_candies\n    \n    return most_candies\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    pink = 5\n    purple = 7\n    orange = 8\n    total = pink + purple + orange\n    \n    # Probability of choosing a pink counter\n    prob_pink = pink / total\n    \n    # To double the chances, the new probability should be 2 * probability of pink\n    new_prob_pink = 2 * prob_pink\n    \n    # Let x be the number of new counters to be added\n    # New total will be total + x\n    # The number of pink counters will be pink + x because we need to add pink counters only to double the chance of drawing one\n    # (pink + x) / (total + x) = new_prob_pink\n    # We solve for x\n    x = symbols('x')\n    equation = Eq((pink + x) / (total + x), new_prob_pink)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # There were 40% more boys than girls at first\n    eq1 = Eq(boys, 1.4 * girls)\n\n    # After 24 boys and 24 girls left the gathering, there were 50% more boys than girls\n    eq2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    five_count = 0\n    number = 16\n    \n    while number >= 5:\n        number //= 5\n        five_count += number\n\n    return five_count\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Initially Cindy could pick one of each color resulting in no pairs (3 socks).\n    # We need at least 2 pairs of the same color, so:\n    # After the first 3 socks, for the worst case scenario, if Cindy continues to pick a different color each time,\n    # she would have one pair after picking the 4th sock.\n    # To ensure a second pair, she has to pick up to 2 more socks of any color (total of 6 socks).\n    # However, as we want to ensure TWO pairs of the SAME color, \n    # she has to pick 2 additional socks to guarantee this (worst case),\n    # which means picking 2 more after the first pair, one of which will form the second pair.\n    return 4 + 2 # 4 to form the first pair, and 2 to ensure a second pair of the same color.\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let x be the number of cupcakes and muffins Demi had at first for each.\n    # After selling, she has (x - 60) cupcakes and (x - 12) muffins left.\n    # We are given that the number of muffins left is twice the number of cupcakes left:\n    # x - 12 = 2 * (x - 60)\n\n    # We can solve for x\n    x = symbols('x')\n    equation = Eq((x - 12), 2 * (x - 60))\n\n    # Solve the equation for x\n    x_value = solve(equation, x)\n\n    # Since we need to find the total number of cupcakes and muffins\n    # and Demi had an equal number of cupcakes and muffins at first,\n    # the total amount is 2 * x.\n    total = 2 * x_value[0]\n\n    return total\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = shanghai_to_la + 1.5\n    \n    round_trip_time = shanghai_to_la + la_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote:\n    # e = the original amount Eddi has\n    # w = the original amount Wiya has\n    \n    e, w = symbols('e w')\n    \n    # The original ratio\n    original_ratio = Eq(e/w, 3/2)\n    \n    # Ratio after Lisa gives Eddi $4\n    new_ratio = Eq((e + 4)/w, 8/5)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (e, w))\n    \n    return solutions[w]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    helen_daily, george_daily = symbols('helen_daily george_daily')\n\n    # Helen's savings equation\n    helen_saves = 60\n\n    # George's savings equation (which is 90 more than Helen's)\n    george_saves = helen_saves + 90\n\n    # Helen and George's daily spendings (5 each)\n    helen_spends = 5\n    george_spends = 5\n\n    # They save the rest after spending\n    helen_saves_daily = helen_daily - helen_spends\n    george_saves_daily = george_daily - george_spends\n\n    # Total saved is the number of days times the daily saved amount\n    # Since we don't know the number of days we assume it's the same for both\n    # Setting equations based on the descriptions\n    equation1 = Eq(helen_saves_daily, helen_saves_daily)  # same daily save rate implied for both\n    equation2 = Eq(george_saves, george_daily - george_spends)  # George's savings to daily savings\n    equation3 = Eq(george_daily, helen_daily + 3)  # George receives $3 more daily\n\n    solutions = solve((equation1, equation2, equation3), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    ans = sum(range(1, 31)) + sum(range(1, 30))\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n    # 9th term is a + 8d, 15th term is a + 14d. According to question a + 8d = a + 14d + 18\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n    \n    # 20th term is a + 19d, 12th term is a + 11d. The sum is 88 => a + 19d + a + 11d = 88\n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n    \n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Now we find the 32nd term: a + 31d\n    a_value = solutions[a]\n    d_value = solutions[d]\n    term_32 = a_value + 31 * d_value\n\n    return term_32\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    for three_page_letters in range(12):\n        four_page_letters = 11 - three_page_letters\n        total_pages = 3 * three_page_letters + 4 * four_page_letters\n        if total_pages == 38:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance covered in the first 2 hours\n    distance_first_part = 2 * 40  # speed * time\n    # Distance covered in the second part\n    distance_second_part = 280  # given\n    \n    # Total distance covered\n    total_distance = distance_first_part + distance_second_part\n    \n    # Time taken to cover the second part\n    time_second_part = distance_second_part / 70  # distance / speed\n    \n    # Total time taken for the trip\n    total_time = 2 + time_second_part  # first 2 hours + time for second part\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Since the first digit cannot be 0\n    \n    # Cases with no 7s\n    no_sevens = 8 * 9 * 9  # 8 options for the first place, 9 for the second and third\n    \n    # Total with at least two sevens - all possible three digit numbers minus those with no sevens\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    return 8 * 10**2\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from sympy import Rational\n\ndef solution():\n    A = 1\n    a1 = A - Rational(1, 2)\n    a2 = A - Rational(2, 3)\n    a3 = A - Rational(7, 8)\n    a4 = A - Rational(29, 30)\n    a5 = A - Rational(139, 144)\n    a6 = A - Rational(839, 840)\n\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    m_n = a0.as_integer_ratio()\n    ans = sum(m_n)\n\n    return ans\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "from sympy import lcm\n\ndef solution():\n    packets_25 = 25\n    packets_20 = 20\n\n    # Find least common multiple of the two packet sizes\n    days_to_sync = lcm(packets_25, packets_20)\n\n    # Starting from March 1st, find the next start date\n    # Since February can have either 28 or 29 days, assuming it's not a leap year with 28 days\n    days_in_march = 31\n    next_start_date = days_to_sync % days_in_march\n\n    if next_start_date == 0:  # If it syncs exactly at the end of March\n        next_start_day = days_in_march\n        next_start_month = 3  # March\n    else:\n        next_start_day = next_start_date\n        next_start_month = (days_to_sync // days_in_march) % 12\n        if next_start_month == 0:\n            next_start_month = 12  # Adjust for a full year sync which would make it December\n\n    # Account for the months passed\n    months_passed = days_to_sync // days_in_march\n    next_start_year_increment = months_passed // 12\n    next_start_month += months_passed % 12\n\n    # If the month goes past December, adjust the year and month\n    if next_start_month > 12:\n        next_start_year_increment += 1\n        next_start_month -= 12\n\n    # Assuming the current year is 2023 (knowledge cutoff year)\n    current_year = 2023\n    next_start_year = current_year + next_start_year_increment\n\n    # Return the date on which the next packets start\n    return (next_start_day, next_start_month, next_start_year)\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Total singing performances\n    singing_total = 6\n    \n    # Total dancing performances\n    dancing_total = 4\n    \n    # If we imagine the 4 dancing performances as \"D\" and the requirement to \n    # have at least one singing performance \"S\" between them (D S D S D S D),\n    # this arrangement fixes 3 singing performances leaving us with 3 more to\n    # assign freely.\n    \n    # As 3 singing performances are fixed, we have 3 left which we can arrange \n    # in any order together with 4 dancing performances.\n    # We imagine having 4+1 positions (to the left and right and between 4 \"D\"s)\n    # to insert the remaining 3 singing performances which gives us a \"stars and bars\" \n    # problem (choosing 3 positions out of 5 to insert \"S\"s, which can be calculated \n    # using combinations).\n    \n    # Additionally, after placing the singing performances we need to arrange the \n    # order of all singing and dancing performances.\n    # As all singing performances are identical and all dancing performances are identical, \n    # we need to divide by the number of ways to arrange the singing and dancing performances\n    # amongst themselves, which is factorial(singing_total) and factorial(dancing_total), respectively.\n    \n    positions_for_singing = dancing_total + 1\n    remaining_singing = singing_total - (dancing_total - 1)\n    \n    ways_to_place_singing = factorial(positions_for_singing) // (factorial(remaining_singing) * factorial(positions_for_singing - remaining_singing))\n    \n    # Total arrangements for performances\n    total_ways = ways_to_place_singing * factorial(singing_total + dancing_total) // (factorial(singing_total) * factorial(dancing_total))\n    \n    return total_ways\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Aiden's mistaken operation\n    mistake_eq = Eq(x / 4 - 25, 2021)\n\n    # Solve for the original number\n    original_number = solve(mistake_eq, x)[0]\n\n    # Aiden's intended operation\n    correct_answer = original_number * 4 + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Initialize a set for each hint\n    hint1_possibilities = set()\n    hint2_possibilities = set()\n    hint3_possibilities = set()\n    hint4_impossibilities = set()\n\n    # Analyze hint 4: \"5430\" - None of them is right\n    # Exclude digits 5, 4, 3, 0 from consideration.\n    for i in '5430':\n        hint4_impossibilities.add(i)\n\n    # Candidates for the answer\n    candidates = set()\n\n    # Go through possible combinations\n    for i in range(1000, 10000):  # 4-digit numbers range from 1000 to 9999\n        num_str = str(i)\n        \n        # Skip if the number includes digits from hint4_impossibilities\n        if any(x in num_str for x in hint4_impossibilities):\n            continue\n        \n        # Analyze hint 3: \"8642\" - Two of the digits are right, and they are in the right digit position\n        correct_digits_hint3 = 0\n        if num_str[0] == '8':\n            correct_digits_hint3 += 1\n        if num_str[1] == '6':\n            correct_digits_hint3 += 1\n        if correct_digits_hint3 != 2:\n            continue\n        \n        # Analyze hint 1: \"8765\" - Two of the digits are right, but they are not in the right digit position\n        correct_digits_hint1 = 0\n        for pos, digit in enumerate('8765'):\n            if digit in num_str and num_str[pos] != digit:\n                correct_digits_hint1 += 1\n        if correct_digits_hint1 != 2:\n            continue\n        \n        # Analyze hint 2: \"1023\" - Two of the digits are right, but they are not in the right digit position\n        correct_digits_hint2 = 0\n        for pos, digit in enumerate('1023'):\n            if digit in num_str and num_str[pos] != digit:\n                correct_digits_hint2 += 1\n        if correct_digits_hint2 != 2:\n            continue\n        \n        # If we passed all the checks, the number is a candidate\n        candidates.add(num_str)\n\n    # There should ideally be only one number that satisfies all conditions\n    ans = candidates.pop() if len(candidates) == 1 else None\n    return ans\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    prime_factors = {}\n    numbers = [75, 56, 12, 105]\n\n    for number in numbers:\n        factor = 2\n        while number > 1:\n            count = 0\n            while number % factor == 0:\n                number //= factor\n                count += 1\n            if count > 0:\n                prime_factors[factor] = prime_factors.get(factor, 0) + count\n            factor += 1\n            if factor == 3:  # After 2, skip to 5 (next prime we are interested in)\n                factor = 5\n\n    num_zeros = min(prime_factors.get(2, 0), prime_factors.get(5, 0))\n    return num_zeros\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, donna = symbols('chloe donna')\n\n    equation1 = Eq(chloe, 4 * donna)\n    equation2 = Eq(chloe - donna, 816)\n\n    solutions = solve((equation1, equation2), (chloe, donna))\n\n    return solutions[donna]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    tilde_value = (3 * 8) - 4\n    return tilde_value\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The ones digit in the power of any number repeats in cycles.\n    # For 9, the pattern is 9, 1, 9, 1, ... due to 9^1 = 9 and 9^2 = 81\n    # Since 99 is odd, we just need to take the first value of this pattern.\n    ones_digit = 9\n    \n    return ones_digit\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import primerange, solve, symbols\n\ndef solution():\n    a, b = symbols('a b')\n    \n    # List prime numbers within a certain range based on 193 limit\n    pr = list(primerange(1,193))\n    \n    # Find pairs of primes whose linear combination gives 193\n    for prime_a in pr:\n        for prime_b in pr:\n            if 3 * prime_a + 11 * prime_b == 193:\n                return prime_a + prime_b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Iterate through possible values of a and b (1-9) to find the solution\n    for a in range(1, 10):  # a can't be 0 since it's the first digit\n        for b in range(10):  # b can be 0\n            ab = 10 * a + b\n            a0b = 100 * a + b\n            \n            if ab * 7 == a0b:\n                return ab\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of adults, children, boys, and girls\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(adults, 3 * children)        # three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)             # twice as many boys as girls\n    equation3 = Eq(adults, girls + 176)         # 176 more adults than girls\n\n    # Since boys and girls are children, their sum is equal to the number of children\n    equation4 = Eq(boys + girls, children)    \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n\n    # Calculate the total number of people at the concert\n    total_people = solutions[adults] + solutions[children]\n\n    return total_people\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    least_num_pencils = solve_congruence(*congruences)\n\n    return least_num_pencils[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    annabella_price = solutions[banana] + solutions[apple]\n\n    return annabella_price\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    houses_per_worker_per_day = houses_initial / (workers_initial * days_initial)\n    houses_final = houses_per_worker_per_day * workers_final * days_final\n\n    return int(houses_final)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    ages = list(range(1, 28))\n    min_product = float('inf')\n    for bob_age in ages:\n        for rex_age in filter(lambda x: x != bob_age, ages):\n            for fido_age in filter(lambda x: x != bob_age and x != rex_age, ages):\n                if fido_age == bob_age - 10 and (bob_age + rex_age + fido_age) == 28:\n                    product = bob_age * rex_age * fido_age\n                    if product < min_product:\n                        min_product = product\n    return min_product\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    ball_cost, total_money = symbols('ball_cost total_money')\n\n    equation1 = Eq(total_money - 5 * ball_cost, 15)\n    equation2 = Eq(total_money - 8 * ball_cost, -12)\n\n    solutions = solve((equation1, equation2), (ball_cost, total_money))\n\n    return solutions[ball_cost]\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    height_after_first_bounce = height_after_second_bounce * 3\n    initial_height = height_after_first_bounce * 3\n    return initial_height\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let total_people be the total number of people in the funfair\n    total_people = symbols('total_people')\n    \n    # Given fractions of the total number of people\n    children_fraction = 2/5\n    women_fraction = 1/4\n    \n    # Equation that calculates the number of men based on children and women fractions\n    men_fraction = 1 - (children_fraction + women_fraction)\n    \n    # Equation based on the information that there are 20 more children than men\n    equation = Eq((children_fraction - men_fraction) * total_people, 20)\n    \n    # Solving the equation to find the total number of people\n    number_of_people = solve(equation, total_people)[0]\n    \n    return number_of_people\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    from math import gcd\n\n    max_sum = 0\n\n    # Iterate through all possible 3-digit numbers for A and B\n    for A in range(100, 1000):\n        for B in range(100, 1000):\n            # Check for two equal digits in A\n            if len(set(str(A))) != 2:\n                continue\n            # Check for two equal digits in B\n            if len(set(str(B))) != 2:\n                continue\n            # Check if they are distinct numbers\n            if A == B:\n                continue\n            # Calculate the GCD and check if it's 75\n            if gcd(A, B) == 75:\n                # Update the max sum if current sum is greater\n                max_sum = max(max_sum, A + B)\n\n    return max_sum\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L to be the time Lee takes to finish the job alone\n    # and N to be the time Nancy takes to finish the job alone\n    L, N = symbols('L N')\n\n    # When they work together, they can finish 1/10 of the job per hour\n    equation1 = Eq(1/L + 1/N, 1/10)\n\n    # If Lee types for 6 hours and then Nancy types for 20 hours, they finish the job\n    equation2 = Eq(6/L + 20/N, 1)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (L, N))\n\n    return solutions[N]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # Total pupils in both classes\n    total_pupils = 40 + 30\n\n    # Total marks for both classes\n    total_marks = total_pupils * 90\n\n    # Let average of Class A be x\n    # Then, average of Class B is x + 7\n    # Total marks for Class A is 40 * x\n    # Total marks for Class B is 30 * (x + 7)\n\n    # According to the given information\n    # Total marks for Class A and B is the sum of individual marks\n    # 40 * x + 30 * (x + 7) = total_marks\n\n    # Solve for x\n    x = (total_marks - 30 * 7) / (40 + 30)\n\n    # Calculate the average score of Class B\n    average_B = x + 7\n\n    return average_B\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Evaluate the complex fractions step by step\n    # Calculate the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = (2/25)\n    # Calculate the first complex fraction\n    fraction1 = numerator1 / denominator1\n\n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = (8/3)\n    # Calculate the second complex fraction\n    fraction2 = numerator2 / denominator2\n    \n    # Calculate the final result by adding the two fractions\n    ans = fraction1 + fraction2\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate the sum of the fractions in the denominator\n    denominator_sum = (1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009)\n\n    # Invert the sum to get the final result\n    ans = 1 / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    \n    for ten_pence in range(6):  # he can use from 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # he can use from 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):  # he can use 0 or 1 fifty-pence coin\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n                    \n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    return 11 - 2 + 7 - 4 + 2\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249 * 250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    aaron, becky, chris = symbols('aaron becky chris')\n    \n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n    \n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n    \n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits = 0\n    for number in range(1, 201):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f'125{J}6') % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5*table + 12*chair, 720)\n    equation2 = Eq(table - chair, 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of apple and peach\n    cost_apple, cost_peach = symbols('cost_apple cost_peach')\n    \n    # Create equations based on the given data\n    eq1 = Eq(4 * cost_apple + 3 * cost_peach, 10)\n    eq2 = Eq(4 * cost_apple + 6 * cost_peach, 16)\n\n    # Solve the equations\n    solved_values = solve((eq1, eq2), (cost_apple, cost_peach))\n\n    return solved_values[cost_peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) * 6, 66)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_extra_water = 32\n\n    jane_water = audrey_water + jane_extra_water\n    total_water = audrey_water + jane_water\n\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    result = 33\n    # Let's define the function for the operation\n    operation = lambda a, b: 5*a - 2*b\n    # Since we have the result of the operation, we can isolate 'b' \n    # in the equation 5*a - 2*b = result\n    b = (5*a - result) / 2\n    return b\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_squares = lambda n: n * (n + 1) * (2 * n + 1) // 6\n    sum_cubes = lambda n: (n * (n + 1) // 2) ** 2\n    sum_of_products = 0\n\n    for i in range(24):\n        sum_of_products += i * (i + 1) ** 2\n\n    return sum_of_products\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    # In 6 years, Alice will be 24 years old\n    age_in_6_years = 24\n    # Therefore, Alice's current age is 24 - 6 years\n    current_age = age_in_6_years - 6\n    # We need to find out how old Alice was 9 years ago\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    \n    days = lcm(25, 20)\n    \n    start_month = 3  # March\n    start_day   = 1\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    days_passed = 0\n    month = start_month\n    \n    while days > days_in_month[month - 1]:\n        days -= days_in_month[month - 1]\n        month += 1\n        if month > 12:\n            month = 1\n    \n    day = start_day + days\n    \n    return (month, day)\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time_minutes = 360\n    ratio_up_to_down = 5 / 4\n    speed_difference = 10  # m/min\n\n    # time spent going up and down\n    time_up = (total_time_minutes * ratio_up_to_down) / (1 + ratio_up_to_down)\n    time_down = total_time_minutes - time_up\n    \n    # speed going down\n    speed_down = (time_up + time_down) / ((time_up / (speed_difference + time_down)) + time_down)\n    \n    # speed going up\n    speed_up = speed_down - speed_difference\n\n    # distances\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n    \n    total_distance = distance_up + distance_down\n    return total_distance\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    cards_sent_by_each = friends - 1  # each friend sends a card to every other friend\n    total_cards = friends * cards_sent_by_each  # total cards sent\n    \n    return total_cards\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    # Number of fruits initially\n    watermelons = 94\n    pineapples = 138\n\n    # Number of fruits used each day\n    fruits_used_daily = 9\n\n    # Variables to store the count of days and remaining fruits\n    days = 0\n    remaining_watermelons = watermelons\n    remaining_pineapples = pineapples\n\n    # Loop until the condition is satisfied\n    while remaining_pineapples != 3 * remaining_watermelons:\n        days += 1\n        remaining_watermelons -= fruits_used_daily\n        remaining_pineapples -= fruits_used_daily\n\n    return days\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the amount of fruit each car carries\n    fruit_per_car = 24.2 / 4\n\n    # Calculate the amount of fruit each truck carries\n    fruit_per_truck = 410 / 50\n\n    # Calculate the difference in the mass of the fruits carried by a truck and a car\n    mass_difference = fruit_per_truck - fruit_per_car\n\n    return mass_difference\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_now, jerry_now = symbols('tom_now jerry_now')\n\n    # Tom will be twice his age in 4 years\n    equation1 = Eq(tom_now * 2, tom_now + 4)\n\n    # Three years ago, the sum of Tom and Jerry’s ages was 10\n    equation2 = Eq((tom_now - 3) + (jerry_now - 3), 10)\n\n    solutions = solve((equation1, equation2), (tom_now, jerry_now))\n\n    tom_age_now = solutions[tom_now]\n    jerry_age_now = solutions[jerry_now]\n\n    # In how many years from now will Jerry’s age be doubled\n    years_until_double = symbols('years_until_double')\n    equation3 = Eq(jerry_now * 2, jerry_now + years_until_double)\n    solution_years = solve(equation3, years_until_double)\n\n    return solution_years[0]\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    num_weeks = days_until_birthday // days_in_week\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time_meeting = 5\n\n    # Distance covered by Eddie until they meet\n    distance_eddie = eddie_speed * time_meeting\n    # Distance covered by his brother until they meet\n    distance_brother = brother_speed * time_meeting\n\n    # Total distance from home to mall is the sum of distances covered by both\n    total_distance = distance_eddie + distance_brother\n\n    return total_distance\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    wait_minutes_per_bus = 35\n    aiden_arrival_time_minutes = (9 * 60) + 22  # Convert 9:22 to total minutes past midnight\n    bus_departure_time_minutes = (9 * 60) + 15  # Convert 9:15 to total minutes past midnight\n\n    # If Aiden miss the 9:15 bus, calculate the time until the next bus\n    if aiden_arrival_time_minutes > bus_departure_time_minutes:\n        # Find how many minutes past 9:15 and calculate remaining time to next bus\n        time_passed_since_last_bus = aiden_arrival_time_minutes - bus_departure_time_minutes\n        wait_time = wait_minutes_per_bus - (time_passed_since_last_bus % wait_minutes_per_bus)\n    else:\n        # If he arrives before the 9:15 bus, he doesn't need to wait\n        wait_time = 0\n    \n    return wait_time\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    return (5/9) * 243\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    # Initial ages\n    ages = {\"me\": 7, \"brother\": 5, \"mother\": 29, \"father\": 31}\n    \n    # Each year, increment ages and check if all are prime\n    while True:\n        for member in ages:\n            ages[member] += 1\n\n        if all(isprime(ages[member]) for member in ages):\n            return ages[\"father\"]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((-1)**(i+1) * i**2 for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamp_posts = 3\n    \n    # There's always 1 more gap than the number of lamp posts for the flowers in between\n    # Therefore, flowers = gaps * flowers_between_lamp_posts (flowers = (n+1)*3)\n    # So, (total_flowers / flowers_between_lamp_posts) will give us the number of gaps (n+1)\n    gaps = total_flowers / flowers_between_lamp_posts\n    \n    # Since there's one more gap than the number of lamp posts, we subtract 1 to get the number of posts\n    number_of_lamp_posts = gaps - 1\n    \n    # The distance between each lamp post is the road length divided by the number of intervals (number_of_lamp_posts - 1)\n    distance_between_posts = 50 / number_of_lamp_posts\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # Let n be the number of circles\n    n = 7\n    # The maximum number of regions formed by n circles can be calculated by the formula:\n    # R_n = n^2 - n + 2\n    # Which is derived from the inductive recursion R_n = R_(n-1) + n\n    max_regions = n**2 - n + 2\n    return max_regions\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_left = total_books - books_given_away\n\n    return books_left\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Lora's age and her mother's age\n    lora, mother = symbols('lora mother')\n    \n    # Equation 1: The sum of Lora's age and her mother's age is 44\n    equation1 = Eq(lora + mother, 44)\n    \n    # Equation 2: Her mother's age is 3 times Lora's age now\n    equation2 = Eq(mother, 3 * lora)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lora, mother))\n    \n    # Return Lora's age\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Unit digit of 4^1 is 4,\n    # Unit digit of 4^2 is 6,\n    # Unit digit of 4^3 is 4,\n    # Unit digit of 4^4 is 6, and it repeats every 2 powers.\n    \n    # Since 2008 is an even number, unit digit of 4^2008 will be 6.\n    return 6\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    ans = 90009\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    \n    males = total_adults * fraction_male\n    return int(males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n\n    total_sweets = ben_sweets + bob_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    equations = solve((equation1, equation2, equation3), (adam, ben, carl))\n    total_weight = equations[adam] + equations[ben] + equations[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40 PM', '%I:%M %p')\n    stay_duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + stay_duration\n    ans = leave_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n    return total_value\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to the shops/chapel\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n    \n    # Paths from the shops/chapel to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n    \n    # Calculate the total number of paths using the multiplication principle\n    total_paths = (paths_to_audio * paths_audio_to_school) + \\\n                  (paths_to_book * paths_book_to_school) + \\\n                  (paths_to_chapel * paths_chapel_to_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle_sticks = 49\n    belle_sticks_after = belle_sticks + 11\n    eddie_sticks = symbols('eddie_sticks')\n\n    equation = Eq(belle_sticks_after, eddie_sticks)\n\n    solution = solve(equation, eddie_sticks)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n\n    road_length = (num_lamp_posts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    \n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, 705)\n    # Benson bought a calculator for $34\n    # Clive bought a badminton racket for $63\n    # They then had the same amount of money left.\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    result = (5/11 + 2/27) * 11 + 5/27\n    return result\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    \n    # Chelsia's 3/4 equals to Brian's 5/6\n    equation1 = Eq(3 * chelsia, 4 * (5/6) * brian)\n    # Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia, brian + 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    \n    # Sum of Chelsia and Brian's money\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea // 2\n    tea_to_give = tea_each - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '4', '6']\n    perm_gen = permutations(digits, len(digits))  # Generate all permutations of given length\n    all_numbers = {''.join(perm) for perm in perm_gen}  # Convert each permutation to a number\n    return len(all_numbers)\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins John and Kofi have\n    john, kofi = symbols('john kofi')\n\n    # Equation 1: Total number of coins John and Kofi have\n    equation1 = Eq(john + kofi, 25)\n\n    # Equation 2: After John gives Kofi four coins\n    equation2 = Eq((kofi + 4), (john - 4) - 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 13 * cost_per_banana\n    change = (10 * 100) - total_cost  # converting pounds to pence before subtracting\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    total_heads = 53\n    total_feet = 102\n\n    # Let's denote the number of normal rabbits as n and the number of special rabbits as s.\n    # According to the problem, we have the following system of equations:\n    # n + 3s = total_heads            (1)\n    # 4n + 2s = total_feet            (2)\n    \n    # We can solve this system for n and s.\n    \n    # First we express s from equation (1):\n    # n + 3s = 53\n    # s = (total_heads - n) / 3        (3)\n    \n    # Then we substitute s from (3) into equation (2):\n    # 4n + 2*((total_heads - n) / 3) = total_feet\n    # After simplifying we get:\n    # 4n + (2/3)*total_heads - (2/3)*n = total_feet\n    # (12/3)*n + (2/3)*total_heads - (2/3)*n = total_feet\n    # (10/3)*n = total_feet - (2/3)*total_heads\n    # n = 3*total_feet/10 - 2*total_heads/10\n\n    n = (3 * total_feet - 2 * total_heads) / 10\n    s = (total_heads - n) / 3\n\n    return int(n), int(s)\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Find the repeating cycle of the fraction 1/70\n    remainder = 1\n    seen_remainders = {}\n    cycle = ''\n    index = 0\n    \n    while True:\n        remainder *= 10\n        digit, remainder = divmod(remainder, 70)\n        if remainder in seen_remainders:\n            break\n        cycle += str(digit)\n        seen_remainders[remainder] = index\n        index += 1\n\n    # Find the 500th digit after the decimal point within the cycle\n    cycle_length = len(cycle)\n    position = (500 - 1) % cycle_length  # subtract 1 because we start indexing from 0\n    ans = int(cycle[position])\n\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_has_after_eating = 4\n    neelesh_received = neelesh_has_after_eating + 1\n    total_sweets = neelesh_received * 6\n    ayesha_left = total_sweets - neelesh_received\n    return ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / ((21 - i) * i) for i in range(11, 16))\n\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_A = 80\n    # Let the marbles in Box C be x\n    # Then marbles in Box B will be 2x\n    # According to the problem: A + B + C = Total\n    # Which translates to: 80 + 2x + x = 560\n    # Solving for x\n    marbles_C = (total_marbles - marbles_A) // 3\n    return marbles_C\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gummy, lollipop = symbols('gummy lollipop')\n\n    # Initial ratio of gummy bears to lollipops\n    equation1 = Eq(gummy / lollipop, 5/7)\n\n    # New ratio after adding 120 pieces to each pile\n    equation2 = Eq((gummy + 120) / (lollipop + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (gummy, lollipop))\n\n    # Calculate the total number of pieces of candy now\n    total_candy = solutions[gummy] + solutions[lollipop] + 2 * 120\n\n    return total_candy\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_stone = 15\n    andrew_pounds = 275\n    pounds_per_stone = 14\n\n    david_pounds = david_stone * pounds_per_stone\n    weight_difference = abs(david_pounds - andrew_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    sum_of_numbers = 5 + 15 + 17 + 23\n    return sum_of_numbers * 3\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    # Since each term in the sequence increases by a common difference of 11,\n    # it is an arithmetic sequence.\n    # We can use the formula for the sum of an arithmetic sequence:\n    # S = n/2 * (a1 + an), where n is the number of terms, a1 is the first term, and an is the last term.\n    \n    # Calculate number of terms n\n    num_terms = 7  # There are 7 numbers listed explicitly.\n    \n    # First term a1\n    first_term = 31\n    \n    # Last term an\n    last_term = 97\n    \n    # Calculate the sum S\n    S = num_terms/2 * (first_term + last_term)\n\n    return int(S)\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers from base 3 to decimal to perform the subtraction\n    num1 = int('12101', 3)\n    num2 = int('2210', 3)\n    \n    # Perform the subtraction in decimal\n    result_decimal = num1 - num2\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_decimal > 0:\n        ans = str(result_decimal % 3) + ans\n        result_decimal //= 3\n\n    return ans or '0'  # If ans is empty, return '0'\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.5 * 0.5 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    total_correct = 6\n    total_wrong = 2\n    marks_per_correct = 12\n    total_questions = total_correct + total_wrong\n    total_marks = total_correct * marks_per_correct\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Since no two numbers can differ by 5, one strategy is to avoid choosing numbers that are \"5 apart\".\n    # Let's start by considering numbers from 1 to 20 and grouping them with a difference of 5:\n    # Group 1: 1, 6, 11, 16\n    # Group 2: 2, 7, 12, 17\n    # Group 3: 3, 8, 13, 18\n    # Group 4: 4, 9, 14, 19\n    # Group 5: 5, 10, 15, 20\n    # We can pick at most one number from each group to ensure no two numbers differ by 5.\n    # To maximize n, we need to pick from as many groups as possible.\n    # There are 5 groups, and only 4 numbers per group which give us a max of 4 numbers that can be picked.\n    # If we pick one number from each group, we ensure that none differ by 5 and we maximize n.\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, mother_age = symbols('john_age mother_age')\n\n    # John's age in 8 years is equivalent to his mother's age 20 years ago\n    equation1 = Eq(john_age + 8, mother_age - 20)\n\n    # When mother is 5 times John's age\n    # Here we use the age difference to express mother's age in terms of John's\n    # Adding the difference between their current ages to the mother's age\n    difference = mother_age - john_age\n    equation2 = Eq(mother_age, 5 * (john_age - difference))\n\n    solutions = solve((equation1, equation2), (john_age, mother_age))\n\n    # Since we want to know John's age when his mother is 5 times his age,\n    # we substitute mother_age in equation2\n    john_age_when_five_times = solutions[john_age] - difference\n\n    return john_age_when_five_times\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    # Iterate through all possible two-digit numbers for B1B\n    for B1 in range(10, 100):\n        # Check if B1 can be divided evenly by 44\n        if B1 % 44 == 0:\n            pencils_per_pupil = B1 // 44\n            return pencils_per_pupil\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sara, kevin, james = symbols('sara kevin james')\n    \n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num1 = 2017*8 + 7\n    denom1 = 8\n    num2 = 3*3 + 2\n    denom2 = 3\n    num3 = 2016*3 + 875\n    denom3 = 1000*3\n    num4 = 2017*3 + 1\n    denom4 = 3\n    num5 = 3*32 + 23\n    denom5 = 32\n\n    # Define the fractions\n    A = Fraction(num1, denom1) * Fraction(num2, denom2) \n    B = Fraction(num3, denom3) * Fraction(11, 3)\n    C = (Fraction(num4, denom4) - Fraction(2016875, 1000)) * 17\n    D = Fraction(num5, denom5)\n\n    # Perform the complex fraction calculation\n    result = (A - B) / C * D\n\n    # Simplify and convert to mixed number if necessary\n    ans = float(result)\n\n    return ans\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # lcm of 24 and 8 is the time when they will meet for the first time\n    from math import gcd\n\n    tom_lap_time = 24\n    william_lap_time = 8\n\n    # Calculate Least Common Multiple (LCM) via the GCD (Greatest Common Divisor)\n    lcm_time = (tom_lap_time * william_lap_time) // gcd(tom_lap_time, william_lap_time)\n\n    return lcm_time\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and all(remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n\n    num_containers = (apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    reema = symbols('reema')\n    romily = reema + 10\n\n    # Suppose there is some given total amount they collected, which we'll denote as total_amount.\n    # Since the problem does not give us a total amount, we can't solve for a specific value.\n    # Thus, the answer depends on whatever the total_amount is, and we'll return the symbolic expression.\n    \n    return reema\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    fish_books = 78\n    bird_books = fish_books - 12\n    total_books = fish_books + bird_books\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n\n    # Calculate the number of posts including the ones at both ends\n    num_posts = (length_of_field / distance_between_posts) + 1\n\n    return int(num_posts)\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import perfect_power\n\n    n = 28\n    i = 1\n    \n    while True:\n        m = n * i\n        if perfect_power(m)[1] == 2:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    total_sum = sum(positive_numbers) - sum(negative_numbers)\n    return total_sum\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time at which lunch is finished\n    lunch_finished_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n\n    # Lunch duration in minutes\n    lunch_duration = 20\n\n    # Television time in minutes\n    television_time = 20\n\n    # Play time after reaching home in minutes\n    play_time = 10\n\n    # Total time after reaching home before lunch\n    total_time_before_lunch = lunch_duration + television_time + play_time\n\n    # Calculating the time Benson reached home\n    home_reached_time = lunch_finished_time - timedelta(minutes=total_time_before_lunch)\n\n    # Formatting the result to return only the time\n    return home_reached_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "from math import factorial\n\ndef solution():\n    # A and B being next to each other can be treated as a single entity, so we have 5 entities to arrange\n    arrangements_of_5 = factorial(5)\n    \n    # A and B can be arranged in 2 ways among themselves (A-B or B-A)\n    arrangements_of_AB = 2\n    \n    # Total arrangements is the product of the two possibilities\n    total_arrangements = arrangements_of_5 * arrangements_of_AB\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    # Each year, we have 5 times more rabbits, but then half of them die, which\n    # is effectively the same as multiplying by 5/2 each year. So we can express\n    # this as a single multiplier for each year (5/2) and then raise that multiplier\n    # to the number of years to get the final count.\n    final_multiplier = (5 / 2) ** years\n    ans = initial_rabbits * final_multiplier\n    return int(ans)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    # cost per mile is constant\n    cost_per_mile = 6\n\n    # equation relating total fare and distance traveled\n    fare_equation = y - (cost_per_mile * x)\n    \n    return fare_equation\n\n# To use the function, you need to provide y and x values\n# ans = solution(y_value, x_value)"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):  # Start checking from the largest 2-digit number\n        if (num % 4 == 3) and (num % 5 == 3):\n            return num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, purple * 3 / 5)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    ans = (246 * 135) + (2 * 135)\n    return ans\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let the number of steps the escalator has be 'x'.\n    # When Peter walks at 1 step per second, the escalator moves 'x - 10' steps (since he took 10 steps).\n    # When Peter walks at 2 steps per second, the escalator moves 'x - 16' steps (since he took 16 steps).\n    # Since the time he takes to reach the top in both these scenarios is the same, the distance covered by the escalator can be equated.\n    # Therefore, (x - 10) with a speed of 1 step per second equals (x - 16) with a speed of 2 steps per second.\n\n    # Time taken in the first scenario is (x - 10) seconds.\n    # Time taken in the second scenario is (x - 16) / 2 seconds.\n    # Since the time is the same, we have the equation:\n    # (x - 10) = (x - 16) / 2\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x - 10), (x - 16) / 2)\n    num_steps = solve(equation, x)[0]\n\n    return num_steps\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    \n    # We have at least one student getting 5 sweets\n    # So we start with one student and increase until we find\n    # the maximum number of students that can still get at least 5 sweets each\n    for num_students in range(1, total_sweets + 1):\n        if total_sweets // num_students < min_sweets_per_student:\n            # As soon as we find that the current number of students cannot all\n            # receive at least 5 sweets, we know that the previous number is\n            # the maximum possible class size with the condition being met\n            class_size = num_students - 1\n            break\n        \n    return class_size\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    sum_value = tens + hundredths + thousandths\n\n    return sum_value\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    return 25 / 100 * 1200\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James's height in cm\n    height_difference = 30  # Height difference between James and Mark in cm\n\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children_count = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children_count\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    quarter_blocks = total_blocks // 4\n    remaining_blocks = total_blocks - quarter_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel + 0.30 * miguel)\n    equation_sum = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation, equation_sum), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent Sally's initial chocolates, and k represent Ken's initial chocolates\n    s, k = symbols('s k')\n    \n    # The initial ratio of Sally to Ken's chocolates is 5:7\n    ratio_eq = Eq(s/k, 5/7)\n    \n    # Ken gave Sally 24 chocolates\n    after_transfer_eq = Eq(s + 24, 2 * (k - 24))\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, after_transfer_eq), (s, k))\n    \n    # Amount of chocolate Ken has in the end\n    k_end = solutions[k] - 24\n    \n    return k_end\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Hundreds digit must be 2, 4, or 6 (even and less than tens digit)\n        for tens in range(hundreds + 1, 10, 2):  # Tens digit must be even and greater than hundreds digit\n            ones = 2 * hundreds  # Ones digit is twice the hundreds digit\n            if ones > 9 or tens == ones:  # Ones and tens digit must be less than 10 and not equal\n                continue\n            number = hundreds * 100 + tens * 10 + ones\n            if number % 2 == 0 and number % 9 == 0:  # Number must be divisible by 2 and 9\n                return number\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    # 5 pencils + 6 notebooks = 17\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    # 8 pencils + 6 notebooks = 20\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    cost_one_pencil_notebook = solutions[pencil] + solutions[notebook]\n\n    return cost_one_pencil_notebook\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    return 478 - 189\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    sales_tax_percentage = 0.10\n    \n    tip = bill * tip_percentage\n    sales_tax = bill * sales_tax_percentage\n    total_cost = bill + tip + sales_tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    hours = 40  # Free hours already used\n    additional_bill = bill\n\n    # Calculate for the range 40-50 hours\n    if additional_bill > 0:\n        cost_in_40_50_range = 5 * 10\n        if additional_bill >= cost_in_40_50_range:\n            hours += 10  # Adding 10 hours for the range of 40-50\n            additional_bill -= cost_in_40_50_range\n        else:\n            hours += additional_bill // 5  # Adding the division of what remains of the bill by $5\n            additional_bill = 0\n\n    # Calculate for the range 50-60 hours\n    if additional_bill > 0:\n        cost_in_50_60_range = 8 * 10\n        if additional_bill >= cost_in_50_60_range:\n            hours += 10  # Adding 10 hours for the range of 50-60\n            additional_bill -= cost_in_50_60_range\n        else:\n            hours += additional_bill // 8  # Adding the division of what remains of the bill by $8\n            additional_bill = 0\n\n    # Calculate for the range above 60 hours\n    if additional_bill > 0:\n        hours += additional_bill // 15  # Adding the division of what remains of the bill by $15\n\n    return hours\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_square = 4\n    sides_of_triangle = 3\n    thought_number = (2 * sides_of_square) - sides_of_triangle\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    initial_pay = 7.50\n    increase_percentage = 12\n    new_pay = initial_pay * (1 + increase_percentage / 100)\n    return round(new_pay, 2)\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    pages = 0\n    current_digit_count = 0\n    digit_length = 1\n\n    while current_digit_count < digits:\n        pages_count_in_current_digit_length = 9 * (10 ** (digit_length - 1))\n        digit_needed_for_current_length = pages_count_in_current_digit_length * digit_length\n\n        if current_digit_count + digit_needed_for_current_length > digits:\n            pages += (digits - current_digit_count) // digit_length\n            break\n\n        pages += pages_count_in_current_digit_length\n        current_digit_count += digit_needed_for_current_length\n        digit_length += 1\n\n    return pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_per_week = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_per_week) * weeks\n\n    ans = joanna_total - amy_total\n    return ans\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    solved = solve(equation, magic_number)\n\n    return solved[0]\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    \n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    number_of_months = debt / monthly_salary\n\n    return number_of_months\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    sum_of_terms = 0\n    for i in range(1, 8):\n        sum_of_terms += (10 * i) - (6 + 10 * (i - 1))\n    sum_of_terms += 2021\n    return sum_of_terms\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "def solution():\n    from math import comb\n\n    # Choose 1 teacher from 2\n    teacher_ways = comb(2, 1)\n\n    # All possible ways to choose 4 students from 13 without condition\n    all_ways_no_condition = comb(13, 4)\n\n    # Ways to choose 4 students without any females i.e., all males\n    all_male_ways = comb(7, 4)\n\n    # Subtract the all-male scenarios from all possibilities to ensure at least 1 female\n    at_least_one_female = all_ways_no_condition - all_male_ways\n\n    # Multiply by the ways to choose a teacher\n    total_ways = teacher_ways * at_least_one_female\n\n    return total_ways\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    # Alice is currently twice as old as her sister\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years, the sum of their ages will be 53\n    equation2 = Eq(alice + sister + 10 + 10, 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Given terms and their positions\n    term_10th = 23\n    term_15th = 38\n    position_10th = 10\n    position_15th = 15\n    position_12th = 12\n\n    # Calculating the common difference\n    common_difference = (term_15th - term_10th) / (position_15th - position_10th)\n\n    # Finding the 12th term using the formula for an arithmetic sequence:\n    # an = a1 + (n - 1) * d\n    term_12th = term_10th + (position_12th - position_10th) * common_difference\n\n    return int(term_12th)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # The degree of a monomial is the sum of the exponents of the variables.\n    # In the monomial -x^3y^{2n}, the exponent of x is 3 and that of y is 2n.\n    # Given that the degree of the monomial is 5, we can set up the equation:\n    # 3 + 2n = 5\n\n    # Solving for n\n    n = (5 - 3) / 2\n\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n    total_cups = 45\n    total_milk = milk_per_cup * total_cups\n    total_tea = tea_per_cup * total_cups\n    total_amount = total_milk + total_tea\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    nth_term = lambda n: 5 * n\n    return nth_term(10)\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    pencil_price = 0.40  # 40p is 0.40 pounds\n\n    sarah_spent = 8 * book_price + 3 * pencil_price\n    rebecca_spent = 3 * book_price + 8 * pencil_price\n\n    equation = Eq(sarah_spent, rebecca_spent + 1.00)\n\n    book_cost = solve(equation, book_price)\n    \n    return book_cost[0]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the list is ordered and consists of 10 elements,\n    # the median will be the average of the 5th and 6th elements.\n    # According to the problem, the median is 20.\n    # So (n+7 + n+8) / 2 = 20 => 2n + 15 = 40 => n = 12.5\n    \n    n = 12.5\n    \n    # The mean is the sum of all elements divided by the number of elements\n    # All elements in the list can be represented as n+something,\n    # so the sum is (10n + (2+3+5+7+8+11+14+16+19)).\n    # We can use this to find the mean directly.\n    \n    total_sum = n*10 + (2+3+5+7+8+11+14+16+19)\n    mean = total_sum / 10\n    \n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n    total_cost = 3.42  # in pounds\n    cost_per_gummy_bear = 0.06  # in pounds\n    \n    # Convert total cost to pence\n    total_cost_pence = total_cost * 100\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * cost_per_gummy_bear * 100 + bernice * cost_per_gummy_bear * 100 + candice * cost_per_gummy_bear * 100, total_cost_pence)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    return solutions[angela]\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    n = 60 // 3\n    largest_number = n + 1\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10  # total litres of orange juice\n    per_container_volume = 2  # volume in litres for each container\n\n    # Calculate the number of containers needed\n    num_containers = total_volume / per_container_volume\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let a, b, c be the weights of the lightest, middle, and heaviest apples respectively.\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n    \n    # Equation for the scenario where the largest apple is eaten\n    equation1 = Eq((a + b) / 2, 70)\n    \n    # Equation for the scenario where the lightest apple is eaten\n    equation2 = Eq((b + c) / 2, 105)\n    \n    # b is the average of a and c\n    equation3 = Eq((a + c) / 2, b)\n    \n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # Get the weight difference between the heaviest and lightest apple\n    weight_difference = solutions[c] - solutions[a]\n    \n    return weight_difference\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    handshakes_skipped = 4\n    skipped_handshakes_with_each_other = handshakes_skipped * (handshakes_skipped - 1) // 2\n    total_handshakes = total_members * (total_members - 1) // 2\n    ans = total_handshakes - skipped_handshakes_with_each_other\n    return ans\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10):  # Loop through the digits 1 to 9\n        original_number = i\n        new_number = int(str(original_number) + '0')\n        \n        if new_number - original_number == 27:\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n\n    nth_term = first_term + (n-1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    ans = 3 * 3\n    return ans\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Assuming the puzzle is a typical \"number puzzle (vertical forms)\" as found in competitions.\n    # Typically, it would involve a situation where digits in \"A\" must sum up to a certain value in a vertical form.\n    # Since the value of \"A\" is not given, nor is the puzzle's structure, there's no specific method to solve this.\n    # However, I can demonstrate how you might solve a simple addition puzzle with a placeholder structure.\n    \n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Assuming a puzzle where A + B + C = D and we know B, C, and D; we need to find A.\n    # Since we do not have actual values for B, C, and D, this will be a placeholder example.\n    \n    A = Symbol('A')\n    B = 8  # Placeholder value\n    C = 5  # Placeholder value\n    D = 18 # Placeholder value\n\n    equation = A + B + C - D\n\n    # Solve for A\n    solution = solve(equation, A)\n    \n    # Return the value of A\n    return solution[0]\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # The total distance covered by the plum trees\n    total_distance = (41 - 1) * 4  # 40 intervals of 4m each\n    # Calculate the number of pine trees\n    number_of_pine_trees = (total_distance // 5) + 1  # intervals of 5m plus the tree at the starting point\n    return number_of_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = ((100 // 11) + 1) * 11\n    largest_multiple = ((300 // 11) - 1) * 11\n    sum_of_multiples = smallest_multiple + largest_multiple\n    return sum_of_multiples\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    # We know that 6 one-cent coins have the same height as 5 two-cent coins.\n    # Let's call the height of one one-cent coin h.\n    # So, 6h = height of 5 two-cent coins = height of 2 two-cent coins + 3 two-cent coins.\n    # Similarly, height of 3 five-cent coins = height of 4 one-cent coins.\n    # Let x be the number of stacks of one-cent coins, y for two-cent and z for five-cent coins.\n\n    # According to the problem:\n    # The height of the stacks are equal, so we write two equations:\n    # 6*x (height of x stacks of one-cent coins) = 5*y (height of y stacks of two-cent coins)\n    # 6*x (height of x stacks of one-cent coins) = 3*z (height of z stacks of five-cent coins)\n    # And we know that the total number of coins used is 124:\n    # x + y + z = 124\n\n    # Translating this into equations:\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(6*x, 5*y)\n    equation2 = Eq(6*x, 3*z)\n    equation3 = Eq(x + y + z, 124)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Calculating total value in cents\n    total_value = solutions[x] * 1 + solutions[y] * 2 + solutions[z] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correction_difference = 3040 - 2800\n    correct_total = incorrect_total + correction_difference\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n    \n    # Equation for total cost\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    \n    # Equation for cost relationship\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (durian, honeydew))\n    \n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(17*x - 3*(6+x), 9*x + 32)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # There should be only one solution\n    return solution[0]\n\n# Get the answer\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of water in container A at first\n    water_in_A = symbols('water_in_A')\n\n    # Create the equation representing the problem\n    equation = Eq(2 * (water_in_A - 500), water_in_A - 350)\n\n    # Solve the equation for the amount of water in container A\n    solved = solve(equation, water_in_A)\n\n    # Answer is the amount of water in container A at first\n    return solved[0]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2/5) * green_pens\n        red_pens = (1/4) * green_pens\n        total_pens = blue_pens + green_pens + red_pens\n        if total_pens < 100 and red_pens.is_integer() and blue_pens.is_integer() and red_pens > max_red_pens:\n            max_red_pens = red_pens\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    spent_on_books = initial_money * 0.25\n    remaining_after_books = initial_money - spent_on_books\n    spent_on_dvd = remaining_after_books * 0.20\n    remaining_money = remaining_after_books - spent_on_dvd\n    return remaining_money\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution():\n    m = symbols('m')\n    monthly_production = m / 12\n    return monthly_production\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys = 216\n    girls = 153\n    new_children = 37\n    \n    total_children = boys + girls + new_children\n    \n    return total_children\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_in_6_days = 42\n    days_6_to_9_ratio = 9 / 6\n\n    cans_in_9_days = cans_in_6_days * days_6_to_9_ratio\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # Given values\n    total_pins_and_needles = 2540\n    sold_pins = 1820\n\n    # Let the total number of needles initially be x\n    # After selling 4/5 of the needles, 1/5 is left\n    # Total pins left is total_pins_and_needles - x (initial needles) - sold_pins\n    # 1/5 of needles (which is left) will be equal to pins left, so setting the equations equal to each other\n    \n    # needles_left = 1/5 * x\n    # pins_left = total_pins_and_needles - x - sold_pins\n    # needles_left = pins_left\n    # 1/5 * x = total_pins_and_needles - x - sold_pins\n    # solving for x gives us the original number of needles\n    # Then, we can find the needles left by taking 1/5 of x\n\n    # Calculating the original number of needles\n    x = (total_pins_and_needles - sold_pins) * (5/4)\n\n    # Calculating the number of needles left\n    needles_left = x / 5\n\n    return int(needles_left)\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # We need to find the largest six-digit palindrome which is a multiple of 6\n    # A number is divisible by 6 if it is divisible by both 2 and 3\n    # For divisibility by 2, the last digit must be even\n    # For divisibility by 3, the sum of digits must be a multiple of 3\n    \n    # Start from the largest six-digit number and go down\n    for i in range(998001, 100000, -1):\n        s = str(i)\n        # Check if the number is a palindrome\n        if s == s[::-1]:\n            # Check if the palindrome is divisible by 6 (even last digit and sum of digits is multiple of 3)\n            if i % 2 == 0 and sum(int(digit) for digit in s) % 3 == 0:\n                return i\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    sum_of_numbers = 56 + 78 + 44 + 22\n    return sum_of_numbers\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # length in meters\n    shortage_cm = 10         # shortage in centimeters\n    shortage_m = shortage_cm / 100  # convert centimeters to meters\n\n    piece_length_m = desired_length_m - shortage_m  # piece length in meters\n\n    return piece_length_m\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    sum_pattern = sum(pattern)\n    repeats, remainder = divmod(41, len(pattern))\n    \n    ans = repeats * sum_pattern + sum(pattern[:remainder])\n    return ans\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    fraction = 2 / 7\n    total = 315\n    \n    return int(fraction * total)\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    # We calculate the number of ways to make 47p with 2p and 5p coins\n    for two_p_count in range(0, 47 // 2 + 1):\n        if (47 - two_p_count * 2) % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_marbles = symbols('initial_marbles')\n    \n    # Gave 3/8 of them to his friends\n    after_friends = (5/8) * initial_marbles\n    # Gave 5/7 of the remaining marbles to his brother\n    after_brother = (2/7) * after_friends\n    # His cousin gave him 408 marbles\n    final_marbles = after_brother + 408\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * initial_marbles)\n    \n    solutions = solve(equation, initial_marbles)\n    \n    return solutions[0]\n    \nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9+10+11)/8 - (10+11+12)/9 + (11+12+13)/10 - (12+13+14)/11\n    denominator = 1/8 - 1/9 + 1/10 - 1/11\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = round(654876, -2)\n    num2 = round(279745, -2)\n    estimated_difference = num1 - num2\n    return estimated_difference\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Brian's age on his 14th birthday\n    brian_age = 14\n    # Father's age on Brian's 14th birthday\n    father_age = 41\n    # The difference in age between Brian and his father\n    age_difference = father_age - brian_age\n\n    while True:\n        # Increment both Brian's and his father's age by 1\n        brian_age += 1\n        father_age += 1\n        # If the reversed age of brian (as string) equals the age of his father \n        if str(brian_age) == str(father_age)[::-1]:\n            # Return Brian's future age when this condition is true\n            return brian_age\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n    return count // 6  # Divide by 6 for the combinations without repetition\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_in_seconds = 16\n    length_of_train = 480  # in meters\n    \n    speed = length_of_train / time_in_seconds  # speed in meters per second\n    speed_in_kmh = speed * 3.6  # converting meters per second to kilometers per hour\n    \n    return speed_in_kmh\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    # Let's define a function to calculate the number of partitions of a number n into k parts\n    def number_of_ways(n, k):\n        if k == 1 or k == n:\n            return 1\n        elif k > n or k <= 0:\n            return 0\n        else:\n            return number_of_ways(n-1, k-1) + number_of_ways(n-k, k)\n            \n    count = 0\n    # Since the sum has to be at least two numbers, we start from 2\n    for i in range(2, 9):  # Since we can't have 0 parts or more than 8 parts\n        count += number_of_ways(8, i)\n    \n    return count\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    ans = (2 / 5) * 30\n    return ans\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n\n    # Total distance is distance for 112 intervals since we start counting the intervals from zero\n    road_length = (number_of_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    result = (10**5) / (5**5)\n    return result\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for page in range(1, 51):\n        if '3' in str(page):\n            erased_sum += page\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n    \n    num_combinations = pastas * sauces * toppings\n    \n    return num_combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    tries_per_key = 9  # Worst case tries for one key\n    total_keys = 10\n    \n    # Since we will find the right key for one classroom at least for each round of 9 tries,\n    # we subtract each subsequent set of attempts by 1\n    return sum(range(tries_per_key, tries_per_key - total_keys, -1))\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n    bags_bought = (total_guests // bag_size) + (0 if total_guests % bag_size == 0 else 1)\n    poppers_left = (bags_bought * bag_size) - total_guests\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # Since the pattern of the units digit of powers of 7 repeats every 4, we\n    # can find the pattern by calculating 7**1, 7**2, 7**3, and 7**4\n    # The pattern is then: 7, 9, 3, 1\n    # To find the units digit of 7 raised to the 2023rd power,\n    # we can find the remainder of 2023 divided by 4\n    \n    cycle_length = 4\n    remainder = 2023 % cycle_length\n\n    # The units digit for each remainder: 0 -> 1, 1 -> 7, 2 -> 9, 3 -> 3\n    units_digit = {0: 1, 1: 7, 2: 9, 3: 3}\n\n    return units_digit[remainder]\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    # Set precision for Decimal operations\n    getcontext().prec = 10\n\n    # Calculate the repeating decimals\n    repeating1 = Decimal(-4) / Decimal(3)\n    repeating2 = Decimal(1) / Decimal(9)\n    repeating3 = Decimal(-1) / Decimal(9)\n\n    # Expression calculation\n    result = (repeating1 ** (Decimal(1) / Decimal(3)) * (Decimal(4) + repeating2) ** Decimal(2)) / (Decimal('59.24') - (Decimal(10) + repeating3) ** Decimal(0.5))\n\n    # Round off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number = ''.join(str(i) for i in range(1, 31)) \n    smallest_num = '1' + '0' * (len(number) - 46)\n    return int(smallest_num)\n    \nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome number would be 10001 (smallest 5-digit number that reads the same forwards and backwards)\n    least_5_digit_palindrome = 10001\n\n    # The greatest 6-digit palindrome number would be 999999 (largest 6-digit number that reads the same forwards and backwards)\n    greatest_6_digit_palindrome = 999999\n\n    # Calculate the difference between the least 5-digit palindrome and greatest 6-digit palindrome\n    diff = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return diff\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Because boys represent 1/4 (a quarter) of the club\n    girls = total_members * 3 // 4  # Three quarters are girls\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana_price, apple_price = symbols('banana_price apple_price')\n\n    equation1 = Eq(2 * banana_price + 3 * apple_price, 1.50)\n    equation2 = Eq(3 * banana_price + 2 * apple_price, 1.45)\n\n    solutions = solve((equation1, equation2), (banana_price, apple_price))\n\n    annabella_pay = solutions[banana_price] + solutions[apple_price]\n\n    return annabella_pay\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    total_years_later = (60 - (sara_age + lucy_age)) // 2\n\n    return total_years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    coin_value = 1\n    number_of_coins = int(book_cost // coin_value)\n    \n    change = (number_of_coins + 1) * coin_value - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    terms = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    mixed_number = 201 + (1/7)\n    result = mixed_number / 8\n    A = result - (1/7)\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    footballs, basketballs = symbols('footballs basketballs')\n\n    # Initial condition equation\n    equation1 = Eq(footballs, 2/5 * basketballs)\n\n    # Condition after selling basketballs\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n\n    # Calculating the total number of footballs and basketballs at first\n    total_initial = solutions[footballs] + solutions[basketballs]\n\n    return total_initial\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother and y the current age of the younger brother\n    x, y = symbols('x y')\n\n    # When the older brother was the age the younger brother is now, the younger brother was 12\n    equation1 = Eq(x - y, y - 12)  # (x - (x - y)) = y - 12\n\n    # When the younger brother becomes the age of the older brother, the older brother will be 27\n    equation2 = Eq(x + (x - y), 27)  # Older brother's future age is 27\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To ensure she has a pair of gloves of the same color,\n    # she must take out at least one glove more than there are colors.\n\n    num_colors = 5\n    # Take out one glove of each color.\n    # Then take out one more glove, guaranteeing a pair in the same color.\n    gloves_needed = num_colors + 1\n\n    return gloves_needed\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8  # Find the first multiple of 8 greater than or equal to 30\n    last_multiple = 82 // 8 * 8  # Find the last multiple of 8 less than or equal to 82\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers Sam and Peter have originally\n    sam_stickers, peter_stickers = symbols('sam_stickers peter_stickers')\n    \n    # Equation 1: Sam initially had 40 more stickers than Peter\n    eq1 = Eq(sam_stickers, peter_stickers + 40)\n    \n    # Equation 2: After transactions, Sam has 96 more stickers than Peter\n    # Sam gives 20% away and gets 25% of Peter's new amount\n    # Peter gives 25% of his new amount (after receiving from Sam) to Sam\n    # Peter's new amount before giving to Sam is peter_stickers + 0.2 * sam_stickers\n    eq2 = Eq(sam_stickers - 0.2 * sam_stickers + 0.25 * (peter_stickers + 0.2 * sam_stickers), \n             peter_stickers + 0.2 * sam_stickers - 0.25 * (peter_stickers + 0.2 * sam_stickers) + 96)\n\n    # Solve for the number of stickers Peter and Sam originally had\n    solutions = solve((eq1, eq2), (sam_stickers, peter_stickers))\n\n    # Return Peter's original number of stickers\n    return solutions[peter_stickers]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    num_lines = 13\n    max_junctions = num_lines * (num_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_price = original_price * (1 + 10 / 100)\n    lantern_festival_price = spring_festival_price * (1 - 10 / 100)\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert minutes to hours\n    time_taken = 7.2 / 60\n    # Speed of teacher running relative to the walking students\n    relative_speed_to_front = 12 + 8\n    relative_speed_to_end = 12 - 8\n    # Time taken to run from end to front\n    time_to_front = (time_taken * relative_speed_to_end) / (relative_speed_to_front + relative_speed_to_end)\n    # Distance covered from end to front\n    distance_covered = time_to_front * relative_speed_to_front\n    return distance_covered\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    group_games = 16 // 4 * ((4 * (4 - 1)) // 2)  # 4 groups, round-robin for each group\n    knockout_games = 7  # knockout stage games: Quarter-finals (4), Semi-finals (2), Final (1)\n    medal_game = 1  # for third place\n\n    total_games = group_games + knockout_games + medal_game\n    \n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_two_years_ago = flora_age_now - 2\n    fathers_age_two_years_ago = 9 * flora_age_two_years_ago\n    fathers_age_now = fathers_age_two_years_ago + 2\n\n    return fathers_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = [i for i in range(31, 40) if i % 4 == 0 and i % 6 == 0]\n    return sweets[0]\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n    # Speed = Distance/Time, so Time = Distance/Speed\n    # Let t be the time he would take if he arrived on time.\n\n    # Equation for 4 km/h speed (20 min late means t + 1/3 hour, as 20 min = 1/3 hour)\n    eq1 = Eq((distance / 4), (distance / (4/3)))\n\n    # Equation for 6 km/h speed (10 min early means t - 1/6 hour, as 10 min = 1/6 hour)\n    eq2 = Eq((distance / 6), (distance / (6/6 - 1/6)))\n\n    # Solve the system of equations for distance\n    solution = solve((eq1, eq2), (distance))\n\n    return solution[distance]\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        even_number = i * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100\n\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen = 8\n    pineapple_juice = ramen - 5\n    roasted_duck = 6 * ramen\n    total = ramen + pineapple_juice + roasted_duck\n    return total\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_distance_climbed = 7 * 5 + 3  # 5 days of climbing 7 meters and 6th day 3 meters\n    total_distance = 18  # total depth of the burrow\n    remaining_distance = total_distance - total_distance_climbed  # distance left after the 6th day\n\n    # On the 6th night, the snail has to slide down the remaining distance\n    # because on the 7th day, it climbs out of the burrow completely.\n    slide_down_distance = remaining_distance\n\n    return slide_down_distance\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    letters = 'CYZZ'\n    unique_permutations = set(permutations(letters))\n    count = len(unique_permutations)\n    return count\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    ken = (remaining * 2) + 1\n    remaining += ken\n    nini = (remaining * 2) - 3\n    remaining += nini\n    ivy = (remaining * 2) + 2\n    remaining += ivy\n    eddie = (remaining * 2) - 1\n    remaining += eddie\n    return remaining\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Conversion of units to centimeters\n    height_in_m = 5 * 100     # 5m in cm\n    height_in_cm = 120        # already in cm\n    height_in_mm = 50 / 10    # 50mm in cm (10mm = 1cm)\n    height_in_feet = 8 * 30.48 # 8 feet in cm (1 foot = 30.48cm)\n\n    heights = [height_in_m, height_in_cm, height_in_mm, height_in_feet]\n    reasonable_heights = [height for height in heights if 100 < height < 200]\n\n    ans = len(reasonable_heights)\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    for boys in range(1, 99):\n        girls = 3 * boys\n        total_paintbrushes = 2 * girls + 3 * boys\n        if total_paintbrushes == 99:\n            return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 16\n    class_c = 20\n\n    # Find the greatest common divisor (GCD) of the three class sizes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = (3**2) * (2**3)\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    avg_boys = 74\n    total_girls = 12\n    avg_total = 82\n\n    total_score = avg_total * (total_boys + total_girls)\n    boys_score = avg_boys * total_boys\n    girls_score = total_score - boys_score\n    avg_girls = girls_score / total_girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    difference = -3\n    n = 15\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # Let x be the total number of fish in the pond\n    x = Symbol('x')\n\n    # Equation based on the capture-recapture method\n    # (Number of marked fish in second catch / Total number of fish in second catch) \n    # = (Total number of marked fish / Total number of fish in the pond)\n    equation = Eq((25 / 200), (100 / x))\n\n    # Solve the equation for x\n    estimated_fish_population = solve(equation, x)\n\n    return estimated_fish_population[0]\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    # Find the total amount of food required for 12 rabbits for 15 days\n    # Since this amount will feed 20 rabbits now, we divide the total food by the number of rabbits to find the number of days it can last\n    days_final = (rabbits_initial * days_initial) / rabbits_final\n    \n    return days_final\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    money_received = 22\n    dress_cost = 56\n\n    total_money = susan_money + money_received\n    additional_money_needed = dress_cost - total_money\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    wake_up_time = datetime.strptime('07:40', '%H:%M')\n    start_breakfast_time = wake_up_time + timedelta(minutes=25)\n    end_breakfast_time = start_breakfast_time + timedelta(minutes=10)\n    arrival_time = end_breakfast_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    number_of_packets = 6\n    total_salt = salt_per_packet * number_of_packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, int(77 / 2) + 1):\n        # For each number of 2-gram weights, check if the remaining weight can be made up by 3-gram weights\n        remaining_weight = 77 - (two_gram_weights * 2)\n        if remaining_weight % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    n = 20\n    sum_to_n = (n * (n + 1) // 2) ** 2\n    sum_to_9 = (9 * 10 // 2) ** 2\n    ans = sum_to_n - sum_to_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    num_quarters = total_amount * 4\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score = 90 * 5\n    scores = [96, 85, 89, 92]\n    sum_of_scores = sum(scores)\n    fifth_score = total_score - sum_of_scores\n    return fifth_score\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    # Starting from the smallest possible number that satisfies the condition for division by 4 (i.e., 3 remaining)\n    cards = 3\n    while True:\n        # Check if the number of cards also satisfy the other two conditions\n        if (cards % 4 == 3) and (cards % 5 == 4) and (cards % 7 == 6):\n            return cards\n        # Move to the next possible number\n        cards += 1\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_can_swim, girls_cannot_swim, boys_can_swim, boys_cannot_swim = symbols(\n        'girls boys girls_can_swim girls_cannot_swim boys_can_swim boys_cannot_swim')\n\n    total_students = 1690\n    extra_boys = 90\n    girls_ratio = 31\n    boys_ratio = 49\n    boys_swim_diff = 120\n\n    # equations based on the problem statement\n    equation1 = Eq(boys - girls, extra_boys)\n    equation2 = Eq(girls_can_swim + girls_cannot_swim, girls)\n    equation3 = Eq(girls_can_swim / girls_cannot_swim, girls_ratio / boys_ratio)\n    equation4 = Eq(boys_can_swim + boys_cannot_swim, boys)\n    equation5 = Eq(boys_cannot_swim - boys_can_swim, boys_swim_diff)\n    equation6 = Eq(girls + boys, total_students)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (girls, boys, girls_can_swim, girls_cannot_swim, boys_can_swim, boys_cannot_swim))\n\n    total_cannot_swim = solutions[girls_cannot_swim] + solutions[boys_cannot_swim]\n\n    return total_cannot_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    colours_needed = 5\n    pencils_per_colour = 10\n    total_colours = 9\n    \n    # Draw all pencils from 4 colours, since we need at least 5 different colours\n    pencils_drawn = pencils_per_colour * (total_colours - colours_needed)\n    \n    # Next draw would ensure the 5th colour is represented\n    pencils_drawn += pencils_per_colour\n\n    return pencils_drawn\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    coaches_needed = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n\n    return coaches_needed\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    # Initially, the ratio of Pip's sweets to Bud's sweets is 4:7\n    equation1 = Eq(pip / bud, 4 / 7)\n    # After Santa gave Bud five sweets, the ratio became 8:15\n    equation2 = Eq((pip) / (bud + 5), 8 / 15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    distance_between_wheats = (perimeter - 4) / (116 - 4)\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 30 % 10\n    ans = last_digit_5 * last_digit_7 % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    \n    length1 = 39\n    length2 = 52\n    \n    ans = gcd(length1, length2)\n    \n    return ans\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    return 16 // 2  # Dividing the chocolate bar between Joe and his friend\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the points for an A grade and y be the points for a B grade\n    x, y = symbols('x y')\n\n    # Create two equations based on Simon and Peter's scores\n    equation1 = Eq(4 * x + 4 * y, 36)\n    equation2 = Eq(2 * x + 3 * y, 22)\n\n    # Solve the system of equations\n    solution_values = solve((equation1, equation2), (x, y))\n\n    # Calculate the points score for three A grades and five B grades\n    score = 3 * solution_values[x] + 5 * solution_values[y]\n\n    return score\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = (laura_position - 1) + children_between + 1 + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # List of prime numbers not more than 45\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n\n    # Initialize the answer\n    ans = None\n    \n    # Brute force search for possible prime numbers A, B, and C\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                # Skip if any two numbers are equal, since they should be different\n                if A == B or B == C or A == C:\n                    continue\n\n                # Condition from A's statement: none of the prime numbers can form A + B = C\n                if A + B == C or A + C == B or B + C == A:\n                    continue\n\n                # Condition from B's statement: B - 1 gives a difference of 7 with another number\n                if not ((abs(B - 1 - A) == 7) or (abs(B - 1 - C) == 7)):\n                    continue\n\n                # Condition from C's statement: Only when multiplied by 2, C can form an equation with A and B\n                if not (B in primes and 2 * C in primes and A + B == 2 * C):\n                    continue\n\n                # If all conditions are met, we have found our primes\n                ans = A + B + C\n                break  # We found the answer, no need to continue looping\n\n            if ans is not None:\n                break  # Break out of the second loop if the answer is found\n        if ans is not None:\n            break  # Break out of the first loop if the answer is found\n\n    return ans\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n\n    return people_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither prime number nor composite number or zero\n    C = 1  # Since it has to be a digit, 1 is neither prime nor composite\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 9  # 10 is not considered as it is not a single digit, so 9 is the largest composite single digit number\n    # F only has factors 1 and 5 (thus F is 5 since it is a digit)\n    F = 5\n    # G is the greatest factor of 8 (that is not 8 itself)\n    G = 4\n    # H is the lowest multiple of 6 and has to be single digit\n    H = 6  # The first multiple of 6 that is a single digit is 6\n\n    # Combine the digits to form the phone number\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    return phone_number\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    fraction_of_day = (1/4) * (1/6) * (1/8)\n    seconds = seconds_in_a_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    # Marry and Alexis gave 20% of their stickers to Charlotte\n    charlotte_final = charlotte + 0.2 * (marry + alexis)\n    # Charlotte's stickers increased by 80%\n    equation1 = Eq(charlotte_final, 1.8 * charlotte)\n    # Marry had 20 stickers more than Charlotte in the end\n    equation2 = Eq(marry - 0.2 * marry, charlotte_final + 20)\n    # The ratio of Marry's to Alexis' stickers is 7:5\n    equation3 = Eq(marry, 7 * alexis / 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # Let's assume Eddie and his parents form a single entity (since they want to\n    # stand together) and denote them as E. Now we have 1 entity instead of 3.\n    \n    # Let's say there are n other people, so together with E we need to arrange n+1 entities.\n    # The number of ways to arrange n+1 entities is (n+1)!\n    \n    # But the family (Eddie and his parents) themselves can be arranged in 3! ways,\n    # since there are 3 of them.\n    \n    from math import factorial\n    \n    # Number of remaining people excluding Eddie and his parents\n    n = 3\n    \n    # Multiplying the number of ways to arrange n+1 entities (including E) and the\n    # number of ways to arrange the 3 family members (E) gives us the total number of ways.\n    total_ways = factorial(n+1) * factorial(3)\n    \n    return total_ways\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "def solution():\n    from math import factorial\n\n    # We have 3 twos (2, 2, 2) and 2 threes (3, 3).\n    total_digits = 3 + 2  # Total of 5 digits\n    twos = 3\n    threes = 2\n\n    # Total permutations is factorial(total_digits) / (factorial(twos) * factorial(threes))\n    total_permutations = factorial(total_digits) / (factorial(twos) * factorial(threes))\n\n    # But since we need only 4 digits number, we subtract the permutations that start with 0\n    invalid_permutations = factorial(total_digits - 1) / (factorial(twos - 1) * factorial(threes))\n\n    # The answer is the total permutations minus the invalid permutations\n    ans = total_permutations - invalid_permutations\n    return int(ans)\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10):  # Thousands digit cannot be zero\n        for b in range(0, 10):\n            for c in range(0, 10):\n                pip_number = 1000 * a + 100 * b + 10 * c + a\n                bud_number = 1000 * c + 100 * b + 10 * a + a\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Grass growth per day that feeds 25 cows for 10 days\n    daily_growth_for_25_cows = 25 * 10\n    \n    # Grass growth per day that feeds 15 cows for 20 days\n    daily_growth_for_15_cows = 15 * 20\n    \n    # The daily growth should be the same, hence\n    daily_growth = daily_growth_for_25_cows\n    \n    # Total grass grown in 50 days\n    total_growth_for_50_days = daily_growth * 50\n    \n    # Number of cows that can be fed for 50 days\n    num_cows = total_growth_for_50_days / 50\n\n    return num_cows\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # Maximum number of days to finish the book\n    # is given by the maximum length of an arithmetic progression\n    # where the sum of the progression equals 95 (total number of pages)\n    # and each term in the progression is distinct and positive\n    total_pages = 95\n    days = 0\n    page_sum = 0\n    \n    while page_sum < total_pages:\n        days += 1\n        page_sum += days\n    \n    # When page_sum exceeds total_pages, the last day is not a full read,\n    # and thus, should not be counted, so subtract one day.\n    return days - 1 if page_sum > total_pages else days\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    # Let the original number of oranges be 3x and lemons be 5x.\n    # After selling 48 oranges, the remaining oranges become 3x - 48.\n    # The new ratio of oranges to lemons is 1:2,\n    # which implies (3x - 48)/5x = 1/2.\n    # Solving for x to find the number of lemons which is 5x.\n\n    # We solve the equation (3x - 48) = (5x / 2) for x\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((3 * x - 48), (5 * x) / 2)\n    solution = solve(equation, x)\n    num_lemons = 5 * solution[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # From the first_day being 1/3 of second_day.\n    third_day = second_day * (5/3)  # From the third_day being 5/3 of second_day.\n    \n    total_sold = first_day + second_day + third_day\n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial as f\n\ndef solution():\n    # Treat the 3 math books as 1 block and the 2 English books as 1 block\n    # Now, we have 5 blocks to arrange: 3 math books block, 2 English books block and 3 other books\n    blocks_permutations = f(5)\n    \n    # Arrange the books within their respective blocks\n    math_books_permutations = f(3)\n    english_books_permutations = f(2)\n\n    # Overall permutations are product of arrangements within blocks and arrangements of blocks\n    total_permutations = blocks_permutations * math_books_permutations * english_books_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.3\n    member_discount = 100\n    tax_rate = 0.1\n\n    price_after_discount = original_price * (1 - discount)\n    price_after_member_discount = price_after_discount - member_discount\n    final_price = price_after_member_discount * (1 + tax_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    number_of_cakes = 250 / flour_per_cake\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (20 / 32) * 8\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle for Two Sets\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    dividend = 379\n    divisor = 6\n\n    remainder = dividend % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    combined_rate = ivy_rate + kevin_rate\n\n    # Work done by both in half time\n    work_half_time = combined_rate * (12 / 2)\n\n    # Remaining work\n    remaining_work = 1 - work_half_time\n\n    # Time taken by Ivy alone to complete the remaining work\n    ivy_time_remaining = remaining_work / ivy_rate\n\n    # Kevin took off these many days, which is half the days minus the days Ivy worked alone\n    kevin_days_off = (12 / 2) - ivy_time_remaining\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Assigning the initial count of socks\n    black_socks = 4\n    red_socks = 4\n\n    # Using the Pigeonhole Principle, we consider the worst case scenario:\n    # Cindy draws a black sock, then a red sock, alternating until a pair is guaranteed.\n    # This will happen after she has drawn one more sock than there are colors of socks.\n\n    # Since there are only 2 colors, she will have at least one pair after 3 socks are drawn.\n    # But to guarantee at least one pair, she must draw one more sock,\n    # meaning Cindy must take out 4 socks to ensure she has at least one pair of the same colour.\n    \n    return 4\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n    \n    n = 9  # Total number of statues\n    r = 4  # Number of statues to arrange in a row\n\n    # Calculate number of ways to arrange r statues out of n\n    ans = factorial(n) // factorial(n - r)\n\n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    new_price = 100  # in pence, £1.00 is 100p\n\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    value_after_years = initial_value * (1 - depreciation_rate)**years\n    \n    return value_after_years\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bicycles, tricycles = symbols('bicycles tricycles')\n\n    equation1 = Eq(bicycles + tricycles, 300)\n    equation2 = Eq(3 * tricycles - 2 * bicycles, 180)\n\n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n\n    return solutions[bicycles]\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1  # To get the minimum dividend, the divisor must be minimum possible > remainder\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Since there are 2 grey rabbits for every single pattern sequence,\n    # and there are 14 grey rabbits in total,\n    # we can calculate how many pattern sequences there are.\n    pattern_sequences = 14 // 2\n\n    # Each pattern sequence consists of 1 black, 2 white and 2 grey rabbits.\n    # So, in total, there are 5 rabbits in one pattern.\n    rabbits_per_sequence = 1 + 2 + 2\n\n    # Calculate the total number of rabbits for the complete pattern sequences.\n    total_rabbits = pattern_sequences * rabbits_per_sequence\n\n    # Check if there is a partial sequence if the division of grey rabbits\n    # by 2 has a remainder, implying an unfinished pattern.\n    if 14 % 2 == 1:\n        # A partial sequence would have at least 1 black and 2 white rabbits\n        # because grey rabbits appear last in sequence.\n        total_rabbits += 1 + 2\n\n    return total_rabbits\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped = 20\n    chocolate_with_foil = 15\n    not_chocolate_no_foil = 9\n    \n    chocolate_biscuits = total_biscuits - not_chocolate_no_foil - (foil_wrapped - chocolate_with_foil)\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the original speed (in metres per minute)\n    # Let t be the original time (in minutes)\n    # Let d be the distance (in metres)\n    s, t, d = symbols('s t d')\n\n    # Increase speed by 25%\n    equation1 = Eq(s * 1.25 * (t - 20), d)\n\n    # Decrease speed by 45 m/min,  increase time by 75%\n    equation2 = Eq((s - 45) * (t * 1.75), d)\n\n    # d = s * t (original speed times original time equals distance)\n    equation3 = Eq(s * t, d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (s, t, d))\n\n    # Return the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    # The number is 0.976 with 4 in the ones place, making it 4.976\n    number = 4.976\n    # Rounding off to one decimal place\n    rounded_number = round(number, 1)\n    \n    # Checking Tongtong's answer\n    tongtong_answer = 9764.0\n    is_tongtong_correct = rounded_number == tongtong_answer\n    \n    # The result dictionary with rounded number and correctness of Tongtong's answer\n    result = {\n        'rounded_number': rounded_number,\n        'is_tongtong_correct': is_tongtong_correct\n    }\n    \n    return result\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total_amount = 398\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    # Let x be the number of crystals Jason had at first.\n    # He sold 10 more than half of his crystals to Yvonne, which is (x/2) + 10.\n    # Then he mined 20 more crystals, so he has x - ((x/2) + 10) + 20 at this point.\n    # He then sold 14 crystals to Cherlyn, so he has x - ((x/2) + 10) + 20 - 14 after that.\n    # Finally, he has 35 crystals left, which gives us the equation:\n    # x - ((x/2) + 10) + 20 - 14 = 35\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x - ((x/2) + 10) + 20 - 14, 35)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Prime factors of 5's and 2's\n    count_of_5 = 15  # there are 15 fives\n    count_of_2 = 10  # there are 10 twos\n\n    # A zero is created with one 5 and one 2.\n    # Therefore, the number of zeros will be the minimum of the count of 5's and 2's.\n    number_of_zeros = min(count_of_5, count_of_2)\n\n    return number_of_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    # Olaf had thrice as many carrots as Anna at first\n    equation1 = Eq(olaf, 3 * anna)\n    # After Olaf gave away 335 carrots, Anna had twice as many carrots as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    all_perms = permutations(digits)\n    count = 0\n    for perm in all_perms:\n        for i in range(1, len(perm)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    # Bala is standing directly behind Ali, so we count Bala once.\n    total_people = people_in_front_of_Ali + 1 + people_behind_of_Bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Calculate the number of black cars using the total cars and blue cars\n    black_cars = total_cars - blue_cars\n\n    # Calculate the number of black Fords by subtracting black Dodges from total black cars\n    black_fords = black_cars - black_dodges\n\n    # Calculate the number of blue Fords by subtracting black Fords from total Fords\n    blue_fords = fords - black_fords\n    \n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = adam_age * (2 / 3)\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    pence_per_plant = 85\n    total_pence = 3000  # £30 are 3000 pence\n\n    num_plants = total_pence // pence_per_plant\n\n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4;  # Smallest composite number is 4\n\n    while True:\n        B = A + 1; \n        C = A + 2;\n        D = A + 3;\n        if all(not (i == 2 or all(i % j != 0 for j in range(2, int(i**0.5) + 1))) for i in [A, B, C, D]):\n            return A + B + C + D\n        A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Number of balls of each color\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # According to the Pigeonhole Principle, we have to remove all balls of two types\n    # to ensure we get at least one ball of each type.\n    # So we have to pick up all blue and red balls before we can be sure to pick a green ball\n    blue_and_red = blue_balls + red_balls\n    \n    # Now, we need to pick one more to ensure we have a green ball\n    minimum_picks = blue_and_red + 1\n    \n    return minimum_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        # Check if the remainder matches both conditions\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    num_working_days = 5  # Monday to Friday\n\n    total_earnings = average_daily_earnings * num_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n\n    # If each child gets at least one apple, we distribute one apple to each child first.\n    total_apples -= children\n\n    # The maximum apples one child can get will be minimized when the remaining apples are as evenly distributed as possible\n    # among the other children. This situation requires employing the Pigeonhole Principle.\n    # The least number of apples the kid with the most apples can get is the total remaining apples\n    # divided by (children - 1), rounded up, plus the one apple each child initially received.\n\n    least_most_apples = (total_apples // (children - 1)) + 1\n\n    # Check if there's any remainder when dividing the apples to ensure we round up\n    if total_apples % (children - 1) != 0:\n        least_most_apples += 1\n\n    return least_most_apples\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    # Define the number of correct questions as `correct`\n    for correct in range(50 + 1):\n        # Calculate the number of wrong questions as `wrong`\n        wrong = 50 - correct\n        # Use given formula to check if this number of correct and wrong questions match the score\n        if (3 * correct) - (2 * wrong) == 125:\n            # If the condition matches, return the number of correct questions\n            return correct\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3 / 8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    a, b, c = 60, 72, 84\n    return gcd(gcd(a, b), c)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    stopping_number = 10\n\n    starting_number = (stopping_number - (total_counts % 12)) % 12\n    starting_number = 12 if starting_number == 0 else starting_number\n\n    return starting_number\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]\n    for i in range(2, 2011):\n        next_num = (seq[-1] + seq[-2]) % 10  # we only need the last digit\n        seq.append(next_num)\n    return seq[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31\n    while True:\n        m_squared = sum([2*i - 1 for i in range(23, k + 1)])\n        m = int(m_squared**0.5)\n        if m_squared == m**2:\n            break\n        k += 1\n    return m\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables representing the number of cards that Alan and Bob have initially\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: After Colin gives Bob $25 cards, Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    product = 423 * 326\n    remainder = product % 4\n\n    return remainder\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    snacks_cost = 3\n\n    current_amount = original_amount + (daily_savings * days_saved) - lent_to_brother - snacks_cost\n\n    return current_amount\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance for the first 2 hours\n    first_distance = 2 * 40\n    \n    # Total distance is the sum of the first part and the remaining 280 kilometres\n    total_distance = first_distance + 280\n    \n    # Time for the remaining 280 kilometres\n    remaining_time = 280 / 70\n    \n    # Total time is the sum of the first 2 hours and the remaining time\n    total_time = 2 + remaining_time\n    \n    # Average speed is the total distance divided by the total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_day_per_cow = 1\n    \n    total_parts_eaten = cows * days * parts_per_day_per_cow\n    \n    return total_parts_eaten\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the price of one banana and one apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's transaction: 2 bananas + 3 apples = 3 dollars\n    eq1 = Eq(2 * banana + 3 * apple, 3)\n    \n    # Beth's transaction: 3 bananas + 2 apples = 4 dollars\n    eq2 = Eq(3 * banana + 2 * apple, 4)\n    \n    # Solving the system of equations for the price of one banana and one apple\n    solutions = solve((eq1, eq2), (banana, apple))\n    \n    # Annabella's transaction: 10 bananas + 10 apples\n    total_cost = 10 * solutions[banana] + 10 * solutions[apple]\n    \n    return total_cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n    \n    # Big bucket initial weight\n    big = 89\n    \n    # Small bucket initial weight\n    small = 45\n\n    # After selling x kilograms from each, big bucket has 12 times the oil of the small bucket\n    equation = Eq((big - x), 12 * (small - x))\n\n    # Solve the equation\n    amount_sold = solve(equation, x)\n\n    return amount_sold[0]\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let the total number of visitors be x\n    men = 0.37  # 37% are men\n    children_ratio = 4\n    women_ratio = 5\n    total_ratio = children_ratio + women_ratio\n\n    # Since men are 37%, women and children together make up 63% of the visitors\n    # According to the ratio, we can set up an equation:\n    # (women_ratio/total_ratio) * 63% * x + 12 = men * x\n    # (5 / 9) * 0.63 * x + 12 = 0.37 * x\n    # Solve for x, the total number of visitors\n\n    # Define the percentages as proportions\n    men_proportion = men\n    women_children_proportion = 1 - men\n    women_proportion = women_ratio / total_ratio\n    children_proportion = children_ratio / total_ratio\n\n    # Express the children count in terms of the total count and men count\n    # children_count = children_proportion * women_children_proportion * x\n    # men_count = men_proportion * x\n    # men_count = children_count + 12\n    # men_proportion * x = children_proportion * women_children_proportion * x + 12\n    # Solve for x\n    x = 12 / (men_proportion - children_proportion * women_children_proportion)\n\n    # Calculate the number of women based on the total\n    women = women_proportion * women_children_proportion * x\n\n    return int(women)\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n    prob_both_on_time = (1 - prob_to_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_both_on_time\n    \n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import date\n\n    start_date = date(2023, 4, 1)\n    end_date = date(2023, 5, 18)\n    \n    delta = end_date - start_date\n    return delta.days + 1  # adding 1 because both start and end dates are inclusive\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # Since they range from 10 to 99\n    numbers_without_six = 8 * 8   # Options for tens and units place without the number 6\n    \n    # Subtracting numbers with no '6' from total gives those with at least one '6'\n    count_with_six = total_two_digit_numbers - numbers_without_six\n    \n    return count_with_six\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_pow_2 = (2023 ** 2) % 10\n    last_digit_2_pow_2023 = (2 ** 2023) % 10\n    last_digit_sum = (last_digit_2023_pow_2 + last_digit_2_pow_2023) % 10\n    last_digit_result = (last_digit_sum ** 3) % 10\n    \n    return last_digit_result\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    combined_speed = speed_a + speed_b\n\n    time_to_meet = distance / combined_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4*mango + 2*pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = (num_lines * (num_lines - 1)) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = 5 ** 20 % 10\n    last_digit_7s = 7 ** 20 % 10\n    last_digit = (last_digit_5s * last_digit_7s) % 10\n    return last_digit\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22 / 7\n    # Length of AB and CD is given as 14 cm each\n    AB = CD = 14\n\n    # The perimeter of the figure consists of the perimeters of the 2 semicircles and 2 quadrants.\n    # Perimeter of a semicircle with radius r is pi * r.\n    # Perimeter of a quadrant is half the perimeter of a circle with radius r plus the 2 radii (because a quadrant is a quarter of a circle plus the two straight edges).\n    # Since AB and CD are diameters of the semicircles and quadrants, the radius is half of those values.\n    radius = AB / 2\n\n    # Perimeter of both semicircles: 2 * (pi * radius / 2)\n    # Perimeter of both quadrants can be calculated as 2 * (pi * radius + 2 * radius) / 2\n    # Simplifying, we get pi * radius + 2 * radius for both quadrants.\n    # Therefore, the total perimeter is the sum of the perimeters of the semicircles and quadrants.\n    # Which simplifies to 2 * (pi * radius / 2) + (pi * radius + 2 * radius).\n    # This simplifies to pi * radius + (pi * radius + 2 * radius) or pi * radius + pi * radius + 2 * radius.\n    total_perimeter = (pi * radius) + (pi * radius + 2 * radius)\n\n    return round(total_perimeter, 2)\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    for num in range(600, 700, 5): # iterate from 600 to 699, step by 5 since last digit must be 0 or 5\n        if num % 3 == 0 and num % 7 == 0: # divisible by 3 and 7\n            return num\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    # Let's denote the total number of watermelons Helen started with as 'total'\n    # On the first day she sold 1/3 of the total watermelons, so 2/3 were left\n    # On the second day she sold 3/5 of the remaining watermelons, leaving 2/5 of (2/3) of the total\n    # So, (2/5) * (2/3) * total watermelons equals 48\n    # We need to solve for the total number of watermelons\n    \n    total = 48 * (5/2) * (3/2)\n    \n    return int(total)\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one packet of rice as 'rice_cost'\n    rice_cost = symbols('rice_cost')\n    \n    # Alice buys 6 packets of pasta at 95 pence each and 5 packets of rice\n    total_pasta_cost = 6 * 95  # in pence\n    total_cost = 1170  # converting £11.70 to pence\n    \n    # Total cost is the sum of pasta cost and rice cost\n    # We create an equation representing this relationship\n    equation = Eq(total_pasta_cost + 5 * rice_cost, total_cost)\n\n    # Solving the equation for 'rice_cost'\n    solutions = solve(equation, rice_cost)\n\n    return solutions[rice_cost]\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    chosen_cup_noodles = 6\n    ways = comb(total_cup_noodles, chosen_cup_noodles)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for a, b, c as whole numbers (integers)\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the equation according to the complex fraction structure\n    equation = Eq(13/10, 1 + 1/(a + 1/(b + 1/c)))\n\n    # Solve the equation to find values of a, b, and c\n    solutions = solve(equation, (a, b, c))\n\n    # There should be multiple possible solutions, only one of them will consist of all whole numbers.\n    for sol in solutions:\n        if all(isinstance(num, int) for num in sol):\n            a_value, b_value, c_value = sol\n            break\n\n    # Calculate the required expression a + 2b + 3c\n    ans = a_value + 2*b_value + 3*c_value\n    return ans\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 45 * (2/3) * (30/100)\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_work = 1  # Painting the whole house is considered as 1 unit of work.\n\n    rate_energetic = 1 / 20  # Energetic one's rate (houses per day)\n    rate_combined = 1 / 12  # Combined rate of energetic and lazy one (houses per day)\n\n    # Work = Rate * Time\n    # Combined work for 1 house: 1 = (rate_energetic + rate_lazy) * 12\n    # We need to find rate_lazy, and we know rate_combined = rate_energetic + rate_lazy\n    # So rate_lazy = rate_combined - rate_energetic\n    rate_lazy = rate_combined - rate_energetic\n\n    # Now we need to find the time it takes for the lazy one to paint the house on his own.\n    # Time = Work / Rate\n    time_lazy = total_work / rate_lazy\n\n    return time_lazy\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n\n    # Calculate the number of girls using the ratio\n    total_girls = (total_boys / boys_to_girls_ratio) * 2\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    num_terms = 15\n\n    # The formula to calculate the average of consecutive numbers is: average = total_sum / num_terms\n    average = total_sum / num_terms\n    \n    # For consecutive numbers, the average is the middle number, so:\n    # middle_number = average\n    middle_number = average\n    \n    # The smallest number in the sequence is middle_number - (num_terms // 2)\n    smallest_number = middle_number - (num_terms // 2)\n    \n    # The largest number in the sequence is middle_number + (num_terms // 2)\n    largest_number = middle_number + (num_terms // 2)\n    \n    # Sum of the largest and smallest number is:\n    sum_largest_smallest = smallest_number + largest_number\n    \n    return sum_largest_smallest\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # The remainder when a is divided by 8 is 6.\n    # The remainder when b is divided by 8 is 7.\n    # To find the remainder when (a+b) is divided by 8, we add the remainders of a and b.\n\n    remainder_a = 6\n    remainder_b = 7\n\n    # Now we add the remainders.\n    remainder_sum = (remainder_a + remainder_b) % 8\n\n    # The remainder of (a + b) when divided by 8 is remainder_sum.\n    return remainder_sum\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n    num_blouses = 2\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    cloth_remaining = total_cloth - cloth_used_for_skirts\n\n    cloth_per_blouse = cloth_remaining / num_blouses\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    number = ''\n    i = 1\n    while len(number) < 2019:\n        number += str(i)\n        i += 1\n    ans = int(number[2018])\n    return ans\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # There are 11 rooms and 11 keys, each key must belong to one room.\n    # In the worst-case scenario, the guard could get each key wrong\n    # until the last key, which must then be the correct key for the last room.\n    # So, he tries 10 keys for the first room, 9 for the second, and so on,\n    # until he has to try only 1 key for the last room.\n    \n    attempts = sum(range(1, 12))\n    \n    return attempts\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    unique_numbers = set(permutations(digits, 4))\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_spent = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_spent / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 0.20\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass of cat, kittens and basket in kilograms\n    basket_mass_kg = 500 / 1000  # converting mass of basket from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4  # number of kittens\n\n    kittens_total_mass_kg = number_of_kittens * kitten_mass_kg\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + kittens_total_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 1 + 3 + 4  # Mary + three brothers + four sisters\n    eggs_bought = (family_members - 1) * family_members\n    return eggs_bought\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    apple, banana = symbols('apple banana')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\n# Call the function and store the answer\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Given sequence: 3, 6, 10, 15, ...\n    # Find the pattern: the differences between consecutive numbers are increasing by 1\n    # Differences: 3, 4, 5, ...\n    # The next difference should be 6, because 5 (the last difference) + 1 = 6\n\n    # The last number in the sequence is 15, so add 6 to find the missing number\n    missing_number = 15 + 6\n\n    return missing_number\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    # Define the time format\n    time_format = \"%H:%M\"\n    \n    # Convert times to datetime objects\n    departure_time = datetime.strptime(\"7:50\", time_format)\n    arrival_time = datetime.strptime(\"8:40\", time_format)\n    \n    # Calculate the time difference\n    journey_duration = arrival_time - departure_time\n    \n    # Journey duration in minutes\n    duration_in_minutes = journey_duration.total_seconds() / 60\n    \n    return int(duration_in_minutes)\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_handbag = 1 - 1/5\n    remaining_after_dress = 1 - 3/5\n    remaining_money = 80\n    initial_money = remaining_money / (remaining_after_handbag * remaining_after_dress)\n\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    poured_into_bottle = 5\n    remaining_volume = total_volume - poured_into_bottle\n    number_of_tanks = 6\n    \n    volume_per_tank = remaining_volume / number_of_tanks\n    \n    return volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    grandpa_current_age = 72\n    johnny_current_age = 8\n\n    equation = Eq((grandpa_current_age + years), 5 * (johnny_current_age + years))\n    ans = solve(equation, years)\n\n    return ans[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    return 8 + 4 + 10\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n    \n    interest_rate = (amount / principal) ** (1 / years) - 1\n    interest_rate_percent = round(interest_rate * 100, 1)\n\n    return interest_rate_percent\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'm' be the money Samuel had at first\n    m = symbols('m')\n\n    # After spending 1/6 of his money + $5 on a DVD\n    remaining_after_dvd = m - (m / 6 + 5)\n\n    # Then he spent 2/5 of the remaining money + $12 on magazines\n    remaining_after_magazines = remaining_after_dvd - (remaining_after_dvd * 2 / 5 + 12)\n\n    # Finally, he has $24 left\n    equation = Eq(remaining_after_magazines, 24)\n\n    # Solve the equation to find the original amount of money 'm'\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Bob now has 3 times as many as Alan after receiving 25 cards\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Calculate the sum of odd numbers from 1 to 49\n    sum_odd = sum(range(1, 50, 2))\n    \n    # Calculate the sum of even numbers from 2 to 50\n    sum_even = sum(range(2, 51, 2))\n\n    # Calculate the difference\n    ans = sum_even - sum_odd\n\n    return ans\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given the operation m~Delta~n = 5m + 3n\n    # and the equation x~Delta~9 = 37\n    # We can imply that 5x + 3*9 = 37\n    # Now, we solve for x:\n\n    nine_times_three = 3*9\n    equation_result = 37\n\n    x = (equation_result - nine_times_three) / 5\n\n    return int(x)\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # You have the worst case scenario of trying to pick 4 balls of the same color.\n    # If you pick 3 balls of each color, you are not guaranteed to have 4 of the same color.\n    # After 3 blue, 3 orange, and 2 yellow, the next ball you pick must give you 4 of the same color.\n    \n    # Total balls taken out to ensure 4 of the same color:\n    # 3 (blue) + 3 (orange) + 2 (yellow) + 1 (next ball guarantees 4 of any color)\n    \n    balls_needed = 3 + 3 + 2 + 1\n    return balls_needed\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    total_cookies = solutions[tim] + solutions[tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Define the two scenarios with the given conditions\n    # Scenario 1: 20 oranges per elderly, 10 elderly without oranges\n    # Scenario 2: 16 oranges per elderly, enough oranges to pack 25 boxes of 2 dozen (24) oranges each\n\n    # Since each box has 2 dozen oranges, calculate total number of oranges in 25 boxes\n    total_oranges_in_boxes = 25 * 2 * 24\n    \n    # Number of oranges given to each elderly in the second scenario\n    oranges_per_elderly_scenario2 = 16\n\n    # Calculate the total number of oranges Janice has using the second scenario\n    # Since 16 oranges are given out per elderly, we divide the total number of oranges by 16\n    # to find out the total number of elderly served in the second scenario.\n    total_number_of_elderly_scenario2 = total_oranges_in_boxes / oranges_per_elderly_scenario2\n\n    # The total number of oranges Janice has is the same in both scenarios.\n    # In the first scenario, the number of elderly that receive oranges is 10 less than the second scenario\n    total_number_of_elderly_scenario1 = total_number_of_elderly_scenario2 - 10\n    \n    # Now, let's calculate how many oranges each elderly should get so that all oranges are distributed\n    # without remainder among all elderly (including the 10 additional elderly from the first scenario)\n    total_oranges = total_number_of_elderly_scenario1 * 20\n    \n    # Total number of elderly served will be the sum from the second scenario and the unserved from the first\n    total_number_of_elderly = total_number_of_elderly_scenario2 + 10\n\n    # Calculate the number of oranges each elderly should receive to give out all her oranges\n    oranges_per_elderly = total_oranges / total_number_of_elderly\n    \n    return oranges_per_elderly\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    weight_after_removal = 27\n    \n    removed_soil_weight = full_weight - weight_after_removal\n    total_soil_weight = removed_soil_weight / removed_soil_fraction\n    empty_weight = full_weight - total_soil_weight\n    \n    return empty_weight\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    \n    missed_marks = total_marks - scored_marks\n    \n    return missed_marks\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    \n    # equations based on the given problem\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((1 - 1/6) * chocolate + (1 - 2/3) * vanilla + (1 - 7/9) * blueberry, 427)\n    \n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    \n    # calculating the number of chocolate cupcakes Sally sold\n    chocolate_cupcakes_sold = solutions[chocolate] * 1/6\n    \n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    fraction_filled = 3 / 4\n    water_poured = 24\n\n    full_tank_capacity = water_poured / fraction_filled\n\n    return full_tank_capacity\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    platform1_interval = 24\n    platform2_interval = 30\n\n    least_common_multiple = lcm(platform1_interval, platform2_interval)\n\n    # Since 9 a.m. is the starting time and intervals are in minutes\n    # add the least common multiple of the intervals to the 9 a.m.\n    # The answer needs to be in hours and minutes\n\n    # 9 a.m. in minutes since midnight\n    start_time_minutes = 9 * 60\n\n    # Time in minutes when trains leave both platforms at the same time\n    next_common_time_minutes = start_time_minutes + least_common_multiple\n\n    # Convert time in minutes to hours and remaining minutes\n    hours = next_common_time_minutes // 60\n    minutes = next_common_time_minutes % 60\n\n    # Format the time as HH:MM\n    ans = f\"{hours}:{str(minutes).zfill(2)}\"\n\n    return ans\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n    sum_remainder = (remainder_a + remainder_b) % 8\n    return sum_remainder\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols\n    mark, david = symbols('mark david')\n    \n    # age relationship equation: Mark is 3 years older than David\n    equation1 = Eq(mark, david + 3)\n    \n    # the sum of their ages is 89\n    equation2 = Eq(mark + david, 89)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (mark, david))\n    \n    # return Mark's age\n    return solutions[mark]\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    equation1 = Eq(dave, chris + 5)\n    equation2 = Eq(dave, benu + 3)\n    equation3 = Eq(anu, chris - 3)\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of red and white marbles initially and the number added by Pip and Bud\n    red_initial, white_initial, red_added_by_pip, white_added_by_bud = symbols('red_initial white_initial red_added_by_pip white_added_by_bud', integer=True)\n\n    # Write down the equations based on the given information\n    # Original ratio of red to white marbles\n    equation1 = Eq(red_initial / white_initial, 3 / 2)\n    # Ratio after Pip adds red marbles\n    equation2 = Eq((red_initial + red_added_by_pip) / white_initial, 5 / 3)\n    # Ratio after Bud adds white marbles\n    equation3 = Eq((red_initial + red_added_by_pip) / (white_initial + white_added_by_bud), 5 / 4)\n    # Number of balls added by Bud is 100 more than the number added by Pip\n    equation4 = Eq(white_added_by_bud - red_added_by_pip, 100)\n\n    # Solve the equations to find the initial number of white marbles\n    solutions = solve((equation1, equation2, equation3, equation4), (red_initial, white_initial, red_added_by_pip, white_added_by_bud))\n    white_initial_solution = solutions[white_initial]\n\n    return white_initial_solution\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    jessica_front = 5\n    judy_behind = 7\n\n    # Since Jessica sits in front of Judy, there is 1 desk (Judy's desk) between Jessica's front desks and Judy's behind desks\n    total_desks = jessica_front + 1 + judy_behind + 1  # +1 for Jessica's own desk and +1 for Judy's own desk\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 5):\n        multiplicand = int(p[0])\n        multiplier = int(''.join(p[1:4]))\n        product = int(''.join(p[1:5]))\n        if multiplicand * multiplier == product:\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    total_white = 1991\n    total_black = 1000\n    moves = 2989\n\n    # Ming takes out balls\n    for _ in range(moves):\n        # If Ming picks two balls of the same color\n        if total_white % 2 == 0 or total_black % 2 == 0:\n            total_black -= 1  # Remove one black ball from Bag B and add to Bag A\n        # If Ming picks balls of different colors\n        else:\n            total_white -= 1  # Add white ball back to Bag A\n\n    # The number and color of the balls remaining in Bag A\n    if total_white > 0:\n        color = 'white'\n        remaining_balls = total_white\n    else:\n        color = 'black'\n        remaining_balls = total_black\n\n    return remaining_balls, color\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    # given that six people can build a bridge in 15 hours\n    base_people = 6\n    base_hours = 15\n\n    # calculate the amount of work done by one person in one hour (work_rate)\n    work_rate = base_people / base_hours\n\n    # calculate how many people are needed to build it in 2 hours\n    needed_hours = 2\n    needed_people = work_rate * needed_hours\n\n    return int(needed_people)\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'x' be the initial total weight, and 'n' be the initial number of people\n    x, n = symbols('x n')\n\n    # Calculate the equations based on the given information:\n    # (x + 45) / (n + 1) = 61\n    equation1 = Eq((x + 45) / (n + 1), 61)\n\n    # (x + 45 + 71) / (n + 2) = 62\n    equation2 = Eq((x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Extract the initial total weight (x) and initial number of people (n)\n    initial_total_weight, initial_people_count = solutions[x], solutions[n]\n\n    # Calculate initial average weight before Aaron and Ben\n    initial_average_weight = initial_total_weight / initial_people_count\n\n    return initial_average_weight\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = initial_amount - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for i in range(1, 5):  # One possible component of the sum can range from 1 to 4\n        remainder = 5 - i\n        if remainder != i:  # Ensure we do not repeat the same sum (e.g., 3+2 and 2+3)\n            count += 1\n    return count // 2  # Each sum is counted twice, so we divide by 2\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(0, 10):\n            for units_digit in range(0, 10):\n                if units_digit == hundreds_digit + 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han, daughter = symbols('han daughter')\n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (han, daughter))\n\n    return solutions[han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (3/5)\n    original_chocolates = remaining_after_students / (1 - 0.8)\n    return int(original_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((x+1)**2 - x**2 for x in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    total_votes = 25\n    # As Samantha has more votes than anyone else, she needs at least\n    # one more vote than the average number of votes if votes are equally distributed.\n    # For three students, we divide the votes into three and add one to the integer part of it\n    least_votes_samantha = (total_votes // 3) + 1\n    \n    return least_votes_samantha\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    # Initialize a set to hold the different totals\n    totals = set()\n    \n    # Iterate over each possible combination of three coins\n    for coin1 in [1, 2, 5]:\n        for coin2 in [1, 2, 5]:\n            for coin3 in [1, 2, 5]:\n                # Calculate the total for the current combination\n                total = coin1 + coin2 + coin3\n                # Add the total to the set of totals\n                totals.add(total)\n    \n    # The number of different totals is the size of the set\n    ans = len(totals)\n    \n    return ans\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g_conversion_factor = 1000\n    weight_in_kg = 2.4\n    weight_in_g = weight_in_kg * kg_to_g_conversion_factor\n    return weight_in_g\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the interest rate\n    P = 6000  # Principal amount\n    A = 8029.35  # Final amount after 5 years\n    n = 5  # Number of years\n    \n    x = symbols('x')\n    \n    # Compound interest formula: A = P * (1 + r/n)^(nt)\n    # Here, interest is compounded annually, so n = 1.\n    # We use the formula: A = P * (1 + r)^t\n    # We need to solve for r in the equation A = P * (1 + r)^t\n    \n    equation = Eq(A, P * (1 + x/100)**n)\n    \n    # Solve for the interest rate\n    interest_rate = solve(equation, x)[0]\n    \n    return interest_rate\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    # single digit pages: 1-9 use 9 digits in total\n    # double digit pages: 10-99 use 90 * 2 = 180 digits in total\n    # if triple digit pages are used, they start from 100\n    \n    digits_used = 291\n    single_digit_pages = 9\n    double_digit_pages = 90 * 2\n\n    # Subtract the digits used by single and double digit pages\n    remaining_digits = digits_used - (single_digit_pages + double_digit_pages)\n\n    # Since triple digit pages use 3 digits, divide the remaining digits by 3\n    triple_digit_pages = remaining_digits // 3\n\n    # Total pages is the sum of single, double, and triple digit page numbers\n    total_pages = single_digit_pages + 90 + triple_digit_pages\n    \n    return total_pages\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one book as \"b\" and the cost of one magazine as \"m\"\n    b, m = symbols('b m')\n\n    # Equation based on the first piece of information\n    eq1 = Eq(2 * b + 3 * m, 24.90)\n\n    # Equation based on the second piece of information\n    eq2 = Eq(b + m, 10)\n\n    # Solving the system of equations\n    solution = solve((eq1, eq2), (b, m))\n\n    # We want to find the cost of one magazine \"m\"\n    return solution[m]\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the number of pages Clarice has read, and 't' the total number of pages in the magazine\n    r, t = symbols('r t')\n\n    # Given: r/t = 1/5 -> 5r = t\n    equation1 = Eq(5 * r, t)\n\n    # After reading 80 more pages: (r + 80)/t = 70/100 -> 100(r + 80) = 70t\n    equation2 = Eq(100 * (r + 80), 70 * t)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (r, t))\n\n    # Number of pages in the magazine\n    return solutions[t]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_amount = 1500\n    amount_spent_on_chairs = 360\n    percent_spent_on_chairs = (amount_spent_on_chairs / total_amount) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_for_18_people = flour_per_person * 18\n    return flour_for_18_people\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let Vivi's correct answers be x and CC's correct answers be y\n    # Each correct answer gives 10 points, wrong or skipped gives -5 points\n    # Total points from Vivi: 10x - 5(10 - x) and from CC: 10y - 5(10 - y)\n    # Together, Vivi and CC got 95 points: 10x - 5(10 - x) + 10y - 5(10 - y) = 95\n    # Vivi got 15 more points than CC: 10x - 5(10 - x) = 10y - 5(10 - y) + 15\n    # Simplifying these equations gives:\n    # 15x + 15y = 95 + 5(10) + 5(10) -> 15x + 15y = 145\n    # 10x - 5x + 50 = 10y - 5y + 50 + 15 -> 5x = 5y + 15\n    # From these two equations, we get:\n    # x + y = 145 / 15\n    # x - y = 15 / 5\n    # Adding these two equations, we get:\n    # 2x = 145 / 15 + 15 / 5 -> x = (145/15 + 15/5) / 2\n\n    x_plus_y = 145 / 15\n    x_minus_y = 15 / 5\n\n    # Solving for x (Vivi's correct answers)\n    x = (x_plus_y + x_minus_y) / 2\n\n    # Solving for y (CC's correct answers)\n    y = x - x_minus_y\n\n    return int(y)\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    adults = 2\n    children = 3\n\n    total_cost = (adults * adult_ticket_price) + (children * child_ticket_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    difference = solutions[y] - solutions[x]\n    return int(100 * difference)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    millimeters_per_meter = 1000\n    meters = millimeters / millimeters_per_meter\n    return meters\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number_str = \"2581953752\"\n    min_sum = float('inf')\n    \n    for i in range(1, len(number_str) - 1):\n        for j in range(i+1, len(number_str)):\n            part1 = int(number_str[:i])\n            part2 = int(number_str[i:j])\n            part3 = int(number_str[j:])\n            current_sum = part1 + part2 + part3\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n\n    min_dividend = (quotient * smallest_divisor) + remainder\n\n    return min_dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Considering the worst case scenario using the Pigeonhole Principle\n    # Take all 4 blue marbles: 4\n    # Then take 2 yellow marbles: 2 (to ensure we don't have 3 of the same color yet)\n    # Finally, the next marble taken must result in either:\n    # - 3 yellow marbles, or\n    # - if it's a red one, then we are sure the next one must be yellow or blue, thus,\n    #   achieving 3 of the same color\n    # Therefore, we must pick 1 more marble: 1\n    # Total marbles needed to be taken out = 4 (blue) + 2 (yellow) + 1 (next) = 7\n    return 7\n    \nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n\n    # Given ratios\n    science_to_literature = 9 / 10\n    literature_to_math = 5 / 7\n\n    # Let's denote the number of members in literature club as 'x'\n    # Members in science club = 9/10 * x\n    # Members in math club = 7/5 * x\n    # The total is the sum of these, and it equals to 99.\n    # (9/10 * x) + x + (7/5 * x) = 99.\n\n    # The equation simplifies to:\n    # (9/10 + 1 + 7/5) * x = 99\n    # (9/10 + 10/10 + 14/10) * x = 99\n    # (33/10) * x = 99\n\n    # Solve for x\n    x = total_members / (33 / 10)\n\n    # Calculate the number of members in the literature club and math club\n    members_in_literature_club = x\n    members_in_math_club = (7 / 5) * x\n\n    # Calculate the difference\n    difference = members_in_math_club - members_in_literature_club\n\n    return int(difference)\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    \n    equation1 = Eq(mother_now, 3 * melissa_now)\n    equation2 = Eq(mother_now - melissa_now, 32 - 8)\n\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    sides = 4\n\n    # Total number of flowers is the number of flowers on each side\n    # multiplied by the number of sides, minus the overlapped flowers\n    # on the corners (since each corner flower is counted twice).\n    total_flowers = (flowers_per_side * sides) - corners\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10.0\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - piece1 - piece2\n    longest_piece = max(piece1, piece2, piece3)\n    shortest_piece = min(piece1, piece2, piece3)\n    difference = longest_piece - shortest_piece\n    return difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    eq1 = Eq(5 * basketball + 6 * volleyball, 325)\n    eq2 = Eq(basketball, volleyball + 10)\n\n    solutions = solve((eq1, eq2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    pattern_length = len(pattern)\n\n    full_repeats = 47 // pattern_length\n    remaining_digits = 47 % pattern_length\n\n    full_pattern_sum = sum(int(digit) for digit in pattern)\n    partial_pattern_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = full_repeats * full_pattern_sum + partial_pattern_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    total_cost = cost_per_bottle * 9\n    return total_cost\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # Let x be the total money she had initially.\n    # 1/3 of x is spent on a book, so she's left with 2/3 of x.\n    # Then 1/2 of the remainder (which is 2/3 of x) is spent on a bag.\n    # So 1/2 of 2/3 of x equals 1/3 of x is spent on the bag.\n    # Therefore, 1/3 x (book) + 1/3 x (bag) = total_cost.\n    # 1/3 x + 1/3 x = total_cost\n    # 2/3 x = total_cost => x = total_cost * 3/2.\n    \n    initial_money = total_cost * 3/2\n    \n    return initial_money\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    avg_pencils = 35\n    boys_avg_pencils = 20\n    girls_avg_pencils = 60\n\n    girls = symbols('girls')\n    boys = total_pupils - girls\n\n    equation = Eq(boys * boys_avg_pencils + girls * girls_avg_pencils, total_pupils * avg_pencils)\n    solutions = solve(equation, girls)\n\n    return total_pupils - solutions[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_score = 61\n    for correct in range(26):\n        incorrect = 25 - correct\n        score = 4 * correct - incorrect\n        if score == total_score:\n            not_answered = 25 - correct - incorrect\n            return not_answered\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pig, goat = symbols('pig goat')\n\n    equation1 = Eq(3 * pig + 1 * goat, 440)\n    equation2 = Eq(1 * pig + 2 * goats, 280)\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    cost_5_pigs_5_goats = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return cost_5_pigs_5_goats\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds_to_pence = 1.28 * 100\n    pence = 57\n    total_pence = pounds_to_pence + pence\n    pounds_final = total_pence / 100\n    return pounds_final\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    return 15 * 3\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # define cost parameters\n    base_price = 4.50\n    discount = 0.20\n    shipping = 12\n    total_bill = 120\n\n    # Calculate the maximum number of cupcakes that can be bought without discount\n    max_cupcakes_no_discount = (total_bill - shipping) / base_price\n    \n    # If less than or equal to 20, that's the number of cupcakes\n    if max_cupcakes_no_discount <= 20:\n        return int(max_cupcakes_no_discount)\n    else:\n        # Calculate the cost for the first 20 cupcakes\n        cost_first_20 = 20 * base_price\n        \n        # Remaining bill amount after first 20 cupcakes and shipping\n        remaining_bill = total_bill - cost_first_20 - shipping\n        \n        # Price per cupcake after discount is applied\n        price_after_discount = base_price * (1 - discount)\n        \n        # Calculate the number of discounted cupcakes\n        cupcakes_after_20 = remaining_bill / price_after_discount\n        \n        # Total cupcakes is the sum of the first 20 and the discounted ones\n        total_cupcakes = 20 + cupcakes_after_20\n        \n        return int(total_cupcakes)\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    ans = solve(equation, A)[0]\n    return ans\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front_of_rose = 9\n    rose_position_from_back = 12\n\n    total_people = people_in_front_of_rose + rose_position_from_back\n    \n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # Let d be the number of days it takes for the lazy one to paint the house on his own\n    energetic_rate = 1/10\n    combined_rate = 1/6\n    # 1/d + 1/10 = 1/6\n    # Solve for d:\n    from sympy import symbols, solve\n\n    d = symbols('d')\n    equation = 1/d + energetic_rate - combined_rate\n    days_lazy = solve(equation, d)\n\n    return days_lazy[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n    years_later = 2\n\n    john_future_age = john_current_age + years_later\n    grandmother_future_age = john_current_age + grandmother_age_difference + years_later\n\n    total_future_age = john_future_age + grandmother_future_age\n\n    return total_future_age\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number John thought of\n    x = symbols('x')\n    \n    # John added forty five to x\n    add_forty_five = x + 45\n    \n    # Then divided the result by three\n    divided_by_three = add_forty_five / 3\n    \n    # The result was the same as multiplying x by two\n    multiply_by_two = 2 * x\n    \n    # Setting up the equation\n    equation = Eq(divided_by_three, multiply_by_two)\n    \n    # Solving the equation\n    solution = solve(equation, x)\n    \n    # The solution is a list, we extract the first element which is the answer\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for x in range(2, 9):  # The first brother can have from 2 to 8 books\n        for y in range(2, 9):  # The second brother can have from 2 to 8 books\n            z = 10 - x - y  # The third brother gets the remaining books\n            if z >= 2:  # Each brother must have at least 2 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_first_day / fraction_of_book\n    return int(total_pages)\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # To ensure four marbles of different colours, we must consider the worst case\n    # scenario using the Pigeonhole Principle.\n    \n    # Drawing all marbles of the most abundant color first, since we need to ensure the\n    # worst case scenario. There are 12 red, which is the most abundant color.\n    red = 12\n    \n    # Then we draw all marbles of the second most abundant color. There are 9 blue.\n    blue = 9\n    \n    # Next, draw all marbles of the third most abundant color. There are 8 yellow.\n    yellow = 8\n    \n    # By now we have drawn red + blue + yellow marbles but we still don’t have 4 different\n    # colors, so we need to draw one more marble, which will ensure the fourth color.\n    # There are 3 green ones left which is the least amount, so we draw one marble to\n    # ensure it's a different color.\n    one_more_marble = 1\n    \n    # Total number of marbles drawn to ensure 4 marbles of different colors\n    total_drawn = red + blue + yellow + one_more_marble\n    \n    return total_drawn\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Begin with the known pattern of the number, excluding the middle digit\n    number_pattern = \"5\" * 19 + \"0\" + \"9\" * 19\n    \n    # Try all possible digits (0-9) for the middle square to find which makes the number\n    # divisible by 7\n    for i in range(10):\n        # Construct the full number as a string with the current digit in the middle\n        number_str = number_pattern[:19] + str(i) + number_pattern[20:]\n        \n        # Convert the full number string to an integer\n        number = int(number_str)\n        \n        # Check if the number is divisible by 7\n        if number % 7 == 0:\n            # If divisible, return the middle digit that makes it so\n            return i\n\n# Store the result from the function call in 'ans'\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    more_than_last_time = 14.4\n    last_purchase = current_purchase - more_than_last_time\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # The height of the 10th child will be the maximum when the first 9 children are\n    # as short as possible and the rest are as tall as possible.\n    \n    # The shortest possible height for the first child is 1 cm (a whole number).\n    # Therefore, the shortest possible heights for the first 9 children are the first\n    # 9 whole numbers: 1, 2, 3, ..., 9\n\n    # The height of the 10th child would be the next whole number.\n    tom_height = 10\n\n    return tom_height\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if number % 10 == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for i in range(2, 2023):\n        a, b = b, a + b\n        # Since we only need the remainder, we can take the remainder after each\n        # addition to avoid large numbers\n        a %= 3\n        b %= 3\n    return b\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(9 * (136 - magic_number), 208 - magic_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let x be the number of storybooks Anthea has originally\n    # After Jason gives 4 storybooks to Anthea, they will have the same number of storybooks\n    # So, we have the equation: 30 - 4 = x + 4\n    # Solving for x, we get x = 30 - 4 - 4 = 22\n    anthea_storybooks = 30 - 4 - 4\n    \n    # The difference between Jason's and Anthea's original number of storybooks is\n    # 30 (Jason's original number of storybooks) - x (Anthea's original number of storybooks)\n    difference = 30 - anthea_storybooks\n    \n    return difference\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    remainder_when_5 = 3\n    remainder_when_4 = 9\n    for students in range(1, 100):\n        if (students * 5 + remainder_when_5) == (students * 4 + remainder_when_4):\n            return students\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "from sympy import factorint\n\ndef solution():\n    number = 840\n    factor_dict = factorint(number)\n    num_factors = 1\n    for exponent in factor_dict.values():\n        num_factors *= exponent + 1\n    return num_factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan, 4/7 * (alan + bella))\n    equation2 = Eq(alan, chloe + 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    hazelnut_chocolate_bar = 1.83\n    total_cost = box_of_chocolates + (hazelnut_chocolate_bar * 2)\n    payment = 20\n    change = payment - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    import math\n    # 3 positions are remaining between Lily and her mother.\n    # Those positions can be filled by the other three family members.\n    ans = math.factorial(3)\n    return ans\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = ((first_term + last_term) * num_terms) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):  # Loop through all two-digit numbers\n        if num % 5 == 4 and num % 7 == 4:  # Check if remainder is 4 for both divisions\n            return num  # Return the smallest such number\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    result = 1.28 - 0.57\n    return result\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all the possible 2-digit numbers from the digits 1 to 8 without repetition.\n    all_numbers = [''.join(p) for p in permutations('12345678', 2)]\n    all_numbers = [int(number) for number in all_numbers if number[0] != '0']\n    \n    # Filter numbers based on hints\n    # Hint 1: In the smallest number, the ones digit is twice the tens digit.\n    hint1_numbers = [number for number in all_numbers if (number % 10) == 2 * (number // 10)]\n\n    # Hint 2: In the largest number, the sum of ones and tens digits is 9.\n    hint2_numbers = [number for number in all_numbers if (number % 10) + (number // 10) == 9]\n\n    # Hint 3: In the second largest number, the tens digit is 5 more than the ones digit.\n    hint3_numbers = [number for number in all_numbers if (number // 10) - (number % 10) == 5]\n\n    # Hint 4: There is only 1 odd number among these 4 numbers.\n    # First, find all possible numbers which are odd.\n    odd_numbers = [number for number in all_numbers if number % 2 == 1]\n    # Now find the single number which could match with the other criteria.\n    hint4_numbers = [number for number in odd_numbers if number in hint1_numbers or number in hint2_numbers or number in hint3_numbers]\n\n    # Find the smallest and second smallest numbers\n    smallest_number = min(hint1_numbers)\n    largest_number = max(hint2_numbers)\n    second_largest_number = max(hint3_numbers)\n\n    # The second smallest cannot be the second largest or the odd one out (since there's only one odd).\n    possible_numbers = set(all_numbers) - {smallest_number, largest_number, second_largest_number} - set(hint4_numbers)\n    second_smallest_number = min(possible_numbers)\n\n    return second_smallest_number\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Calculate the sum of the first three numbers\n    sum_of_three = 120 * 3\n    # Calculate the sum of the four numbers (including the fourth number)\n    sum_of_four = 150 * 4\n    # Find the fourth number by subtracting the sum of the first three from the sum of four\n    fourth_number = sum_of_four - sum_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_visitors be the total number of visitors at the fair\n    total_visitors = symbols('total_visitors')\n\n    # Equation based on the problem statement:\n    # (3/5) * total_visitors - (1/2) * (2/5) * total_visitors = 140\n    equation = Eq((3/5) * total_visitors - (1/2) * (2/5) * total_visitors, 140)\n\n    # Solve the equation for total_visitors\n    answer = solve(equation, total_visitors)\n\n    return answer[0]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Apply the formula to find the sum of squares up to n\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    # Apply the formula to find the sum of squares up to the term before the first term\n    sum_squares_before_first = ((first_term - 1) * (first_term) * (2 * (first_term - 1) + 1)) // 6\n    # Calculate the correct sum of squares from the first term to n\n    correct_answer = sum_squares_n - sum_squares_before_first\n    # Kimmy's answer\n    kimmy_answer = 1240\n    # Check if Kimmy is correct\n    is_kimmy_correct = correct_answer == kimmy_answer\n    return correct_answer if not is_kimmy_correct else kimmy_answer\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the variable p represent the initial number of stickers Peter had\n    p = symbols('p')\n    \n    # Sam had p + 40 stickers initially\n    # Sam gives 20% of his stickers to Peter: New amount for Sam = (p + 40) - 0.20*(p + 40)\n    # Peter gives 25% of his received stickers to Sam: New amount for Sam = Sam's new amount + 0.25*(p + 0.20*(p + 40))\n    # After the exchange, Sam has 96 more stickers than Peter\n    \n    equation = Eq(((p + 40) - 0.20*(p + 40)) + 0.25*(p + 0.20*(p + 40)), p + 0.75*(p + 0.20*(p + 40)) + 96)\n    \n    # Solve the equation to find the number of stickers Peter initially had\n    result = solve(equation, p)\n    \n    return result[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    actual_subtrahend = 75\n\n    # Find the original minuend\n    original_minuend = incorrect_subtrahend + incorrect_result\n    # Find the correct result\n    correct_result = original_minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 3 * 4  # LCM of 3 and 4\n    ans = 40 // lcm  # Number of customers that received both a pen and a file\n    return ans\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the original amount of money Amy had.\n    x = symbols('x')\n\n    # Money spent on highlighters\n    spent_highlighters = (6/11)*x + 5\n\n    # Money left after buying highlighters\n    remaining_after_highlighters = x - spent_highlighters\n\n    # Money spent on fountain pens\n    spent_fountain_pens = (3/10)*remaining_after_highlighters + 12\n\n    # Money left after buying fountain pens\n    remaining_after_fountain_pens = remaining_after_highlighters - spent_fountain_pens\n\n    # Equation for the remaining money after all spending\n    equation = Eq(remaining_after_fountain_pens, 30)\n\n    # Solve the equation for x\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, gillian = symbols('sally gillian')\n    eq1 = Eq(sally / gillian, 2/7)\n    eq2 = Eq((sally + 15) / (gillian + 15), 1/2)\n    \n    ages = solve((eq1, eq2), (sally, gillian))\n    return ages[sally]\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    mass_per_apple = 1 / 9 # 9 apples have a mass of 1 kg\n    apples_in_kg = 8 / mass_per_apple # total apples used by the baker\n    cakes_baked = apples_in_kg / 4 # 4 apples used to bake a cake\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    return int(35 / (45 / 9))\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    # The distance between each seed is part of the circumference.\n    distance_per_seed = 1.5\n    number_of_seeds = 12\n    # The total distance between all the seeds would be the circumference.\n    circumference = distance_per_seed * number_of_seeds\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    original_papers = 10\n    final_papers = 16\n    # Let's assume x papers were cut into three parts.\n    # If you cut one paper into three parts, you get 2 more pieces than before.\n    # Therefore, cutting x papers will add 2x pieces.\n    # Finally, you will have the original papers minus the x that were cut, plus the pieces added by cutting.\n    # Hence, original_papers - x + 2x = final_papers\n    # So, x = final_papers - original_papers\n    x = final_papers - original_papers\n    \n    return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    average_boys = 10\n    total_participants = 12 + 8\n    average_total = 14\n\n    total_score_boys = total_boys * average_boys\n    total_score_all = total_participants * average_total\n    total_score_girls = total_score_all - total_score_boys\n\n    average_girls = total_score_girls / 8\n\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 1000):\n        if (n ** 2 + 9) == (((n + 1) ** 2) - 16):\n            return n ** 2 + 9\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # list of possible coin values in pounds\n    coin_values = [1.0, 0.5, 0.2, 0.1, 0.05, 0.02, 0.01]\n\n    for smallest in coin_values:\n        change = 2.50\n        # Check pairs of the smallest coin\n        pair_value = smallest * 2\n        if pair_value <= change and (change - pair_value) % pair_value == 0:\n            return smallest\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies = symbols('cookies')\n\n    burnt = (3/5) * cookies\n    remaining = cookies - burnt\n    sold = (75/100) * remaining\n    equation = Eq(burnt, sold + 42)\n\n    num_cookies = solve(equation, cookies)\n\n    return num_cookies[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * weight_needed\n\n    return total_cost\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # The initial division of postcards into 5 envelopes means each envelope has 50 / 5 = 10 postcards.\n    initial_per_envelope = 50 // 5\n    \n    # Since the new postcards are divided into another 2 envelopes with the same number per envelope,\n    # it means that the number of postcards in each of the new envelopes is the same as before, which is 10.\n    new_per_envelope = initial_per_envelope\n    \n    # The total number of new postcards is therefore 2 envelopes * 10 postcards/envelope\n    total_new_postcards = 2 * new_per_envelope\n    \n    # Finally, the total number of postcards is the sum of the initial 50 and the new postcards.\n    total_postcards = 50 + total_new_postcards\n    \n    return total_postcards\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):  # Assuming the number has less than 5 digits\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        number = int(f\"107{Y}\")\n        if number % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70.0\n    water = 490.0\n    concentration = (sugar / (sugar + water)) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    total_students = 6  # Laura, Rita, and four others\n    # Laura must stand in the front, so we have 1 way to place Laura.\n    ways_for_Laura = 1\n    \n    # There are 5 positions left, Rita cannot stand at the end, so she has 4 options.\n    ways_for_Rita = 4\n\n    # The remaining four students can be arranged in any order in the remaining 4 positions.\n    ways_for_others = factorial(4)\n    \n    # The total number of ways is the product of the different possibilities.\n    total_ways = ways_for_Laura * ways_for_Rita * ways_for_others\n\n    return total_ways\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    return (a + b) * a\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let d be the total distance between towns A and B\n    # Jerry travels 3/7 of d, meaning Kevin travels 4/7 of d\n    # Their speeds are proportional to the distances they travel\n    # If Jerry's speed is j, then Kevin's speed is k, where k = 80 mph\n    # We know that the ratio of Jerry's distance to Kevin's distance is 3/4\n    # Therefore, the ratio of their speeds is also 3/4 (since they start at the same time)\n\n    # Set up the proportion 3/4 = j/k where k=80\n    # Solve for j (Jerry's speed in mph)\n    jerry_proportion = 3/4\n    kevin_speed = 80\n    jerry_speed = jerry_proportion * kevin_speed\n\n    # From the question, we know Jerry's speed is 2/5 times the road length per hour\n    # So, jerry_speed = (2/5)*d\n    # Now we can solve for d (the road length)\n    # (2/5)*d = jerry_speed\n    road_length = jerry_speed / (2/5)\n\n    return road_length\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount1_rate = 0.50\n    discount2_rate = 0.20\n\n    discounted_price = regular_price * (1 - discount1_rate)\n    final_price = discounted_price * (1 - discount2_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_of_brought = 4 / 7\n\n    total_apples_brought = sold_apples / fraction_of_brought\n\n    return int(total_apples_brought)\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n    \n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Singapore time when the plane took off\n    sg_departure_time = datetime.strptime('24/08 05:00', '%d/%m %H:%M')\n\n    # London time when the plane landed\n    london_arrival_time = datetime.strptime('24/08 11:00', '%d/%m %H:%M')\n\n    # London is 7 hours behind Singapore\n    time_difference = timedelta(hours=7)\n    \n    # Correcting London time to Singapore time for when the plane landed \n    actual_landing_time_sg = london_arrival_time + time_difference\n\n    # Calculate the flight duration\n    flight_duration = actual_landing_time_sg - sg_departure_time\n\n    return flight_duration.total_seconds() / 3600  # Convert seconds to hours\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # We can start from one possible number of lollipops that satisfies the first condition and increment by the box size until the second condition is satisfied\n    lollipops = 4*1 + 32  # Initial number of lollipops satisfying the first condition\n    while (lollipops - 3) % 7 != 0:  # Find the number that also satisfies the second condition\n        lollipops += 4\n    return lollipops\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n\n    boys_average = 20\n    girls_average = 60\n\n    # Let the number of boys be x\n    # Then the number of girls will be total_pupils - x\n    # Total pencils is the sum of pencils owned by boys and girls\n    # (boys_average * x) + (girls_average * (total_pupils - x)) = total_average * total_pupils\n    # Simplify and solve for x\n\n    # Solve the equation: 20x + 60(40 - x) = 35 * 40\n    x = (total_average * total_pupils - girls_average * total_pupils) / (boys_average - girls_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    # The differences between the numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # The greatest common divisor will give us the maximum possible D\n    max_D = gcd(gcd(diff1, diff2), diff3)\n\n    # Now we find the common remainder R using one of the original numbers\n    R = 2010 % max_D\n\n    # The result is the sum of D and R\n    return max_D + R\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_prob = 0.3\n    draw_prob = 0.1\n    lose_prob = 1 - win_prob - draw_prob\n    \n    # Probability of winning one game and losing the other\n    win_lose_prob = win_prob * lose_prob\n    \n    # Probability of losing one game and winning the other\n    lose_win_prob = lose_prob * win_prob\n    \n    # The total probability to win exactly one game (win first or second)\n    total_prob = win_lose_prob + lose_win_prob\n\n    return total_prob\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for num in range(10, 100):  # Iterate through all 2-digit numbers\n        if (num // 10 + num % 10) % 5 == 0:  # Sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # Remove \"0.\" from the start\n    period_length = len(decimal)\n    position = (2012 - 1) % period_length  # Adjusting for zero-indexing and recurring pattern\n    return int(decimal[position])\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddi, wiya = symbols('eddi wiya')\n    \n    original_ratio = Eq(eddi / wiya, 8/7)\n    new_ratio = Eq((eddi - 4) / (wiya + 4), 18/17)\n    \n    solution_cards = solve((original_ratio, new_ratio), (eddi, wiya))\n    \n    return solution_cards[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n\n    # The ratio of the number of red marbles to the number of blue marbles was 5:6\n    # red_marbles = (5/6) * blue_marbles\n    red_marbles = (5/6) * blue_marbles\n\n    # The number of red marbles was twice that of the number of green marbles\n    # red_marbles = 2 * green_marbles\n    green_marbles = red_marbles / 2\n\n    # The total number of marbles\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    num = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denom = (2017 + 1/3 - 2016.875) * 17\n    fraction = (3 + 23/32)\n    \n    ans = (num / denom) * fraction\n    return ans\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students in Class B\n    # Then Class A has x + 47 students\n    \n    # After moving y students from Class A to Class B:\n    # Class B will have x + y students\n    # Class A will have (x + 47) - y students\n    \n    # We want Class A to have 9 more students than Class B after the move, so\n    # (x + 47) - y = x + y + 9\n    # Simplify the equation\n    # x + 47 - x - y = y + 9\n    # 47 - y = y + 9\n    # 47 - 9 = y + y\n    # 38 = 2y\n    # Divide both sides by 2\n    # y = 19\n\n    # So 19 students need to be moved from Class A to Class B\n    return 19\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 31):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Initial distance to be covered by both contestants\n    total_distance = 6990\n    \n    # Speed of rabbit and turtle in meters per minute\n    speed_rabbit = 330\n    speed_turtle = 30\n    \n    # Time after the rabbit decided to sleep in minutes\n    sleep_start_time = 10\n    \n    # Sleeping time for rabbit in minutes\n    sleeping_time = 215\n    \n    # Distance covered by rabbit before sleeping\n    distance_covered_by_rabbit = sleep_start_time * speed_rabbit\n    \n    # Distance covered by turtle until the rabbit woke up\n    distance_covered_by_turtle = speed_turtle * (sleep_start_time + sleeping_time)\n    \n    # Remaining distance for rabbit after it woke up\n    remaining_distance_rabbit = total_distance - distance_covered_by_rabbit\n    \n    # Time required for rabbit to cover the remaining distance\n    time_required_rabbit = remaining_distance_rabbit / speed_rabbit\n    \n    # Total time taken by the turtle until the rabbit finishes\n    total_time_turtle = (sleep_start_time + sleeping_time) + time_required_rabbit\n    \n    # Distance covered by turtle in the total time\n    distance_covered_by_turtle_while_rabbit_finishes = speed_turtle * total_time_turtle\n    \n    # Check who finishes first and calculate the distance difference\n    if distance_covered_by_turtle_while_rabbit_finishes >= total_distance:\n        # Turtle reaches the finish line first\n        winner = \"turtle\"\n        distance_difference = distance_covered_by_turtle_while_rabbit_finishes - total_distance\n    else:\n        # Rabbit reaches the finish line first\n        winner = \"rabbit\"\n        distance_difference = total_distance - distance_covered_by_turtle_while_rabbit_finishes\n    \n    return winner, distance_difference\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let the smaller number be 'x' and the larger number be 'y'.\n    # According to the problem, we have two equations:\n    # y - x = 57 (1)\n    # x + y = 77 (2)\n    \n    # Now, we can solve for 'x' by combining the two equations.\n    # Add both equations (1) and (2):\n    # y - x + x + y = 57 + 77\n    # 2y = 134\n    # y = 134 / 2\n    \n    # From equation (2), we substitute the value of 'y' to find 'x':\n    # x + (134 / 2) = 77\n    # x = 77 - (134 / 2)\n    \n    y = 134 / 2\n    x = 77 - y\n    \n    return int(x)\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 6, 2):  # 100's place (1, 3, 5 to ensure the number is odd)\n        for j in range(6):  # 10's place (0 through 5, as it doesn't affect the number's oddness)\n            for k in range(6):  # 1's place (0 through 5)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24 \n\n    total_cost_pence = total_cost_pounds * 100  # convert pounds to pence\n    total_avocados = total_pairs * 2  # each pair contains 2 avocados\n    cost_per_avocado = total_cost_pence / total_avocados\n\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    max_count = 0\n    most_likely_score = None\n\n    # Compute the frequency for each possible score\n    for score in range(2, 13):  # Min score is 2 (1+1) and max score is 12 (6+6)\n        count = 0\n        for die1 in range(1, 7):\n            for die2 in range(1, 7):\n                if die1 + die2 == score:\n                    count += 1\n        if count > max_count:\n            max_count = count\n            most_likely_score = score\n\n    return most_likely_score\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    # For a one-digit number to be oddtastic, it must be one of the 5 odd digits\n    one_digit_oddtastic = 5\n    \n    # For a two-digit oddtastic number, both the tens and ones place must be one of the 5 odd digits\n    two_digit_oddtastic = 5 * 5\n    \n    # For a three-digit oddtastic number, the hundreds, tens, and ones place must all be one of the 5 odd digits\n    three_digit_oddtastic = 5 * 5 * 5\n    \n    # Total oddtastic numbers from 1 to 999\n    total_oddtastic = one_digit_oddtastic + two_digit_oddtastic + three_digit_oddtastic\n    \n    return total_oddtastic\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    girls_number = solve(equation, girls)[0]\n\n    return girls_number\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_table = 12\n    tables = 8\n    # Corners are counted twice when tables are placed in a row\n    corners_counted_twice = 4 * (tables - 1)\n    max_people = (people_per_table * tables) - corners_counted_twice\n    return max_people\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    dividend = 9786\n    divisor = 7\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339\n    digits_per_page = 1\n    current_page = 1\n    used_digits = 0\n\n    while used_digits < total_digits:\n        used_digits += digits_per_page * current_page\n        if used_digits < total_digits:\n            current_page += 1\n            if current_page >= 10**(digits_per_page):\n                digits_per_page += 1\n\n    return current_page\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    jeffery_and_boris = solutions[boris] + solutions[jeffery]\n\n    return jeffery_and_boris\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let the number of rhinos be x, the number of deer be x, and the number of ostriches be y.\n    # Each rhino and each deer has 4 legs, each ostrich has 2 legs.\n    # We know there are 28 heads, so x + x + y = 28, which can be simplified to 2x + y = 28.\n    # The total number of legs is 88, so 4x (for rhinos) + 4x (for deer) + 2y (for ostriches) = 88.\n    # This can be simplified to 8x + 2y = 88.\n\n    # From the total heads equation: y = 28 - 2x\n    # Substitute y in the total legs equation: 8x + 2(28 - 2x) = 88\n    # Simplify the equation: 8x + 56 - 4x = 88\n    # Therefore, 4x = 88 - 56 => 4x = 32\n    # The number of rhinos (and deer since they're equal): x = 32 / 4\n\n    x = (88 - 2 * 28) // 4\n    return x\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Calculate the last digit of each number separately\n    # using modulo 10 to obtain the last digit (ones digit)\n    last_digit_32_pow_33 = (32 ** 33) % 10\n    last_digit_22_pow_29 = (22 ** 29) % 10\n\n    # Find the ones digit of the difference\n    ones_digit = (last_digit_32_pow_33 - last_digit_22_pow_29) % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from math import prod\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def count_factors(prime_factors_list):\n        powers = [prime_factors_list.count(i) for i in set(prime_factors_list)]\n        return prod([i + 1 for i in powers])\n\n    count = 0\n    for i in range(15, 10000, 15):  # Adjust the upper limit to search a sufficient range\n        if count_factors(prime_factors(i)) == 15:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):  # 2-digit numbers range from 10 to 99\n        for B in range(1000, 10000):  # 4-digit numbers range from 1000 to 9999\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                diff = B - A\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    players_total = 12\n    players_needed = 6\n\n    num_ways = comb(players_total, players_needed)\n\n    return num_ways\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # let a be the number of apples and o be the number of oranges\n    a, o = symbols('a o')\n\n    # initial condition: Danny bought 5/7 as many apples as oranges \n    initial_condition = Eq(a, (5/7)*o) \n\n    # After buying 12 more oranges, he had 2/3 as many apples as oranges\n    final_condition = Eq(a, (2/3)*(o+12)) \n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (a, o))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Define the difference required between students and teachers\n    difference = 52\n\n    # Start checking for square arrays that satisfy the condition\n    for size in range(2, 100):  # Assuming the square size does not exceed 100\n        # Calculate the number of people in the outermost layer (students)\n        students = 4 * (size - 1)\n        \n        # Calculate the number of people in the adjacent inner layer (teachers)\n        teachers = 4 * (size - 2 - 1)  # Subtract 2 for the next layer and another 1 to close the layer\n        \n        # The pattern repeats, alternating between students and teachers\n        total_students = students\n        total_teachers = teachers\n        \n        # Calculate subsequent layers\n        for inner_size in range(size - 4, 0, -4):  # Reduce by 4 to account for 2 layers at a time (students and teachers)\n            total_students += 4 * (inner_size - 1)\n            total_teachers += 4 * (inner_size - 2 - 1)\n\n        # Check if the calculated difference matches the required difference\n        if total_students - total_teachers == difference:\n            # Calculate the total number of people\n            total_people = (size * size)\n            return total_people\n\n    # If no solution was found within assumed range, return None\n    return None\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Since the left side of the equation is already 8 * 8 (which is 8^2),\n    # we need to find the value that goes into the box that, when multiplied by 8^2,\n    # will give us the same result as 8 * 80 * 100\n    # We can do this by dividing (8 * 80 * 100) by 8^2\n\n    value = (8 * 80 * 100) / (8 ** 2)\n    return int(value)\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    solutions = solve(equation, (x, y, z))\n    for sol in solutions:\n        if all(isinstance(num, int) for num in sol):\n            return sum(sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    final_position = 10  # He stops at the 10 o'clock position\n    total_counts = 30  # He counts to 30\n    clock_numbers = 12  # There are 12 numbers on the clock\n    \n    # Calculate the starting position by going backward from the final position\n    start_position = (final_position - (total_counts % clock_numbers)) % clock_numbers\n    # Adjust the starting position to clock numbering (1-12) instead of index (0-11)\n    start_position = 12 if start_position == 0 else start_position\n    \n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    ans = 200 + 198 + 196 + 194 + 24\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big, small, x = symbols('big small x')\n    \n    # big - x = 12 * (small - x)\n    # big - 12 * small = -11 * x\n    \n    equation1 = Eq(big - x, 12 * (small - x))\n    solutions = solve((equation1), (x))\n    \n    x_value = solutions[x]\n    \n    return x_value.subs({big: 89, small: 45})\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot / winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    shoes_price_per_set = 78\n    socks_price_per_pair = 12\n    \n    aliens_total = 1 + 5  # himself and his 5 brothers\n    total_legs = aliens_total * 5  # each alien has 5 legs\n    total_shoes_needed = total_legs\n    total_socks_needed = total_legs\n    \n    sets_of_shoes = total_shoes_needed // 5\n    pairs_of_socks = total_socks_needed // 2\n    \n    # total cost calculation\n    total_cost = (sets_of_shoes * shoes_price_per_set) + (pairs_of_socks * socks_price_per_pair)\n    \n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n\n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n\n    solutions = solve((equation1, equation2), (joleen, rennie))\n\n    total_pies = solutions[joleen] + solutions[rennie]\n\n    return total_pies\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # convert minutes to hours\n    speed_home_to_park = 5  # km/h\n    speed_park_to_home = 4  # km/h\n    \n    # Let the distance between her home and the park be d km.\n    # Time = Distance / Speed, so total time = d/5 + d/4\n    # total_time_hours = d/5 + d/4 => total_time_hours = d(1/5 + 1/4)\n    # Solve for d\n    d = total_time_hours / (1/5 + 1/4)\n    return d\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    difference = 8\n\n    # Let the number of boys be x; then the number of girls will be x + difference.\n    # We know that the total number of boys and girls is total_pupils.\n    # x + (x + difference) = total_pupils\n    # Solving for x, we get:\n    x = (total_pupils - difference) // 2\n\n    # Therefore, the number of girls is x + difference.\n    num_girls = x + difference\n\n    return num_girls\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n\n    # Equations derived from the problem\n    # a - b + 5 = 0  =>  a = b - 5\n    # b - c + 6 = 0  =>  b = c + 6\n    # 31 + a = 26 + b => a = b - 5 and c = b - 6\n    # 31 + a = 20 + c => a = c + 11\n    # \n    # We can deduce that we only need to find a suitable 'b' value (prime) such that 'a' and 'c' calculated from 'b' are also prime.\n\n    # Find the suitable 'b'\n    for b in primerange(1, 100):  # limit chosen based on problem's constraints\n        a = b - 5\n        c = b - 6\n        # Check if 'a', 'b', and 'c' are prime and satisfy the given conditions.\n        if a > 0 and c > 0 and all(p in primerange(1, 100) for p in [a, c]):\n            return a * b * c\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    orange_pie_g = 550\n    orange_juice_g = 1050\n    oranges_used_kg = (orange_pie_g + orange_juice_g) / 1000\n\n    remaining_oranges_kg = total_oranges_kg - oranges_used_kg\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    total_students = 35\n    both_x = symbols('x')  # let x be the number of students who like both apples and bananas\n\n    # Applying the conditions\n    apples = 3 * both_x\n    bananas = 5 * both_x\n    equation = Eq(apples + bananas - both_x, total_students)\n\n    # Solving the equation\n    both_count = solve(equation, both_x)\n\n    return both_count[0]\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6*A + 25:\n                return A\n    return None\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    total_days = 5\n    \n    total_chairs = (total_days / 2) * (2 * first_day_chairs + (total_days - 1) * common_difference)\n    \n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for num in range(1, 416):\n        count += str(num).count('2')\n    return count\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n represent the time Nancy takes to finish the job by herself\n    n = symbols('n')\n    \n    # The combined work rate of Lee and Nancy typing together\n    # Since they finish the job in 10 hours working together, their combined work rate is 1/10\n    combined_rate = 1/10\n    \n    # If Lee works for 6 hours, his work rate will be 6/n, since n is the total time it would take him to complete the job alone.\n    # Nancy works for 20 hours at a work rate of 20/n\n    # Together they complete 1 job\n    equation = Eq((6*n + 20*10) / (n * 10), 1)\n    \n    # Solve the equation\n    nancy_time = solve(equation, n)\n    \n    # We get two solutions, the positive solution is the valid time for Nancy\n    nancy_time = [time.evalf() for time in nancy_time if time.evalf() > 0]\n    return nancy_time[0]\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence_in_pounds = 3.00 * 100\n    percentage = (15 / pence_in_pounds) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    ans = 111111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # To guarantee 3 marbles of the same colour,\n    # We should consider the worst-case scenario:\n    # Picking 2 blue, then 2 yellow, and then 1 red yields no 3 of the same color.\n    # So after this point, the next marble must guarantee 3 of the same color.\n    marbles_needed = (2 * 2) + 1 + 1  # 2 blue, 2 yellow, and the next one must match \n    return marbles_needed\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 12:\n            return children\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # You can choose a pencil with a ruler, a pencil with a pen, or a ruler with a pen.\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    # Sum up all the possible combinations.\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    mary_and_son_current_age_sum = 45\n    years_later = 5\n    mary_and_son_future_age_sum = mary_and_son_current_age_sum + years_later * 2\n    return mary_and_son_future_age_sum\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost_pence = 7 * 14\n    total_paid_pence = 100\n\n    change_pence = total_paid_pence - total_cost_pence\n    \n    return change_pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of Sebastian and Garrett\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Equation 1: Garrett is 24 years older than Sebastian\n    eq1 = Eq(garrett, sebastian + 24)\n\n    # Equation 2: In 10 years, Garrett will be thrice as old as Sebastian\n    eq2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # boys = girls - 65\n    eq1 = Eq(boys, girls - 65)\n    # (1 - 2/5) * boys = (1 - 3/7) * girls\n    eq2 = Eq((1 - 2/5) * boys, (1 - 3/7) * girls)\n    \n    solutions = solve((eq1, eq2), (boys, girls))\n    \n    remaining_boys = (1 - 2/5) * solutions[boys]\n    remaining_girls = (1 - 3/7) * solutions[girls]\n    total_remaining = remaining_boys + remaining_girls\n    \n    return total_remaining\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / sales_tax_rate\n    \n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = travel_cost_per_person * people\n    total_hotel_cost = hotel_cost_per_day_per_person * days * people\n    total_spending_money = spending_money_per_person * people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    # Calculate the nth term using arithmetic sequence formula: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    total_permutations = factorial(7)  # Total permutations of the word 'ORANGES'\n    vowels_permutations = factorial(3)  # Permutations of the vowels 'AEO'\n    consonant_permutations = factorial(4)  # Permutations of the consonants 'RNGS'\n\n    # Permutations where all vowels are together (treated as a single entity along with 4 consonants => 5 entities)\n    vowels_together_permutations = vowels_permutations * permutations(5, 5)\n\n    # Subtracting cases where all vowels are together from total permutations\n    ans = total_permutations - vowels_together_permutations\n\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # As all math (M), chemistry (C), and physics (P) books are to be kept together, \n    # treat each set of books as a single item, hence we have 4 items (M, C, P, and 1 biology book (B)).\n    # The 4 different items (M, C, P, B) can be arranged in 4! ways.\n    \n    four_items_arrangement = factorial(4)\n\n    # Now, treat each group of books as individual books.\n    # There are 4! ways to arrange the math books among themselves,\n    # 3! ways to arrange the chemistry books among themselves, and\n    # 2! ways to arrange the physics books among themselves.\n    # The biology book is just 1!, which is 1, so it doesn't change the count.\n\n    math_books_arrangement = factorial(4)\n    chemistry_books_arrangement = factorial(3)\n    physics_books_arrangement = factorial(2)\n    biology_books_arrangement = factorial(1)  # This is actually 1.\n\n    # The total number of ways is the product of the arrangements of each group and the arrangement of the groups themselves.\n    \n    total_arrangements = (four_items_arrangement * math_books_arrangement * \n                          chemistry_books_arrangement * physics_books_arrangement * biology_books_arrangement)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_meters = 8850\n    meters_to_kilometers = 1000\n\n    height_kilometers = height_meters / meters_to_kilometers\n\n    return height_kilometers\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    # Using the Principle of Multiplication\n    total_ways = category1 * category2 * category3\n\n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 100):  # search in a reasonable range for prime numbers\n        b = a + (31 - 26)\n        c = a + (31 - 20)\n\n        if isprime(a) and isprime(b) and isprime(c):\n            if 31 + a == 26 + b and 26 + b == 20 + c:\n                return a * b * c\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    # The perimeter is the sum of the lengths of all sides.\n    for a in range(1, 13):\n        for b in range(a, 13):  # b should start from a to avoid counting the same triangle twice.\n            c = 12 - a - b\n            if c >= b: # The third side must be at least as long as the second to form a triangle.\n                if a + b > c:  # Triangle inequality theorem.\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    num_people = 6\n    num_seats = 8\n\n    # Since the table can rotate, we fix one person and then arrange the rest.\n    # Therefore, we are looking for arrangements not permutations.\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    total_stickers = 260\n    ratio_sum = 46 + 12 + 7\n    # Assuming Eugene, Melvin, and David's stickers are 46x, 12x, and 7x respectively after all exchanges\n    eugene_final = (total_stickers * 46) / ratio_sum\n    melvin_final = (total_stickers * 12) / ratio_sum\n    david_final = (total_stickers * 7) / ratio_sum\n\n    # Working backwards to find the initial amount of stickers\n    # David gave Eugene as many stickers as Eugene had left, so Eugene had eugene_final / 2 stickers before\n    eugene_before = eugene_final / 2\n    david_before = david_final - eugene_before\n\n    # Melvin gave David as many stickers as David had, so Melvin had melvin_final + david_before stickers before\n    melvin_before = melvin_final + david_before\n    david_initial = david_before / 2\n\n    # Eugene gave Melvin twice as many stickers as Melvin had, so Eugene had eugene_before + 2 * (melvin_before / 3) stickers at first\n    melvin_initial = melvin_before / 3\n    eugene_initial = eugene_before + 2 * melvin_initial\n\n    # Returning Eugene's initial amount of stickers\n    return int(eugene_initial)\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # This game problem can be solved using the concept of Nim-sum in combinatorial game theory.\n    # The Nim-sum is calculated by performing a bitwise XOR operation on the count of matches in each pile.\n    # If the Nim-sum is non-zero, the first player can win by making a move that makes the Nim-sum equal to zero.\n    # If the Nim-sum is zero, the second player has a winning strategy by always taking matches to keep the Nim-sum zero.\n    \n    pile_A = 35\n    pile_B = 24\n    \n    # Calculating the Nim-sum\n    nim_sum = pile_A ^ pile_B\n    \n    # The first player, Eddie, has a winning strategy if the Nim-sum is non-zero\n    if nim_sum != 0:\n        # The winning strategy involves choosing a pile and taking enough matches to make the Nim-sum 0\n        winning_pile = None\n        winning_matches = None\n        \n        # Iterate to find which pile to choose and how many matches to take to create Nim-sum of 0\n        for i in range(1, max(pile_A, pile_B)+1):\n            # Test if taking i matches from pile_A would result in a Nim-sum of 0\n            if (pile_A - i) ^ pile_B == 0:\n                winning_pile = \"A\"\n                winning_matches = i\n                break\n            # Test if taking i matches from pile_B would result in a Nim-sum of 0\n            elif (pile_B - i) ^ pile_A == 0:\n                winning_pile = \"B\"\n                winning_matches = i\n                break\n        \n        return winning_pile, winning_matches\n    else:\n        # If the Nim-sum is zero, Eddie has no winning strategy, Wei'er wins\n        return \"Wei'er\", \"No winning strategy\"\n    \nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    sum_of_numbers = sum(range(31, 42))\n    return sum_of_numbers\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    return sum([-78, 76, -74, 72, -70, 68, -66, 64, -62, 60, -58, 56, 80])\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    \n    distance2 = 400\n    speed2 = 5\n    \n    distance3 = 800 - (distance1 + distance2)\n    speed3 = 8\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # At first, the number of boys and girls is the same\n    equation1 = Eq(boys, girls)\n\n    # After some boys came in and some girls went out, we have\n    equation2 = Eq(boys + 12, 2 * (girls - 8))\n\n    # Solving these equations:\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total = boys + girls at first\n    ans = solutions[boys] + solutions[girls]\n    return ans\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    # Since we have 3 different digits (3, 5, and 7) and we want to form 3-digit numbers,\n    # and because the order matters and we can use each digit only once in each number,\n    # this is a permutation problem.\n    from math import factorial\n\n    # The number of 3-digit numbers that can be formed by 3 different digits is\n    # given by the number of permutations of 3 digits taken 3 at a time.\n    # This is simply 3! (3 factorial).\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 25):\n        prime2 = 25 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    length1 = 15\n    length2 = 45\n\n    largest_possible_length = gcd(length1, length2)\n\n    return largest_possible_length\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n\n    start_time_total_minutes = (start_time_hour * 60) + start_time_minute\n    end_time_total_minutes = (end_time_hour * 60) + end_time_minute\n\n    time_spent = end_time_total_minutes - start_time_total_minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_posts = 2\n    # Subtract one because the distance from the last lamp post is not counted\n    length_of_road = (number_of_lamp_posts - 1) * distance_between_posts\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    \n    max_peaches = (total_peaches // total_students) + 1\n    \n    return max_peaches\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    number1 = 18\n    number2 = 52\n    half_way_number = (number1 + number2) / 2\n    return int(half_way_number)\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    ans = 40 - 15 + 1\n    return ans\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the first term of the seven consecutive numbers be x\n    # Then the sum of the seven consecutive numbers is:\n    # x + (x + 1) + (x + 2) + (x + 3) + (x + 4) + (x + 5) + (x + 6)\n    # This can be written as: 7*x + 21\n    # The sum of these numbers is given as 140, so we can set up the equation:\n    # 7*x + 21 = 140\n    # Now, we can solve for x:\n    x = (140 - 21) // 7\n    return x\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # chocolate cupcakes is 72 more than vanilla cupcakes\n    equation1 = Eq(chocolate, vanilla + 72)\n\n    # blueberry cupcakes is 36 less than vanilla cupcakes\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # After selling cupcakes, Sally has 427 cupcakes left altogether\n    # chocolate cupcakes sold = 1/6 of chocolate cupcakes\n    # vanilla cupcakes sold = 2/3 of vanilla cupcakes\n    # blueberry cupcakes sold = 7/9 of blueberry cupcakes\n    equation3 = Eq((5/6)*chocolate + (1/3)*vanilla + (2/9)*blueberry, 427)\n\n    # Solve the system of 3 equations in terms of the 3 unknowns\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # The total number of chocolate cupcakes Sally had before selling\n    total_chocolate_cupcakes = solutions[chocolate]\n    \n    # The number of chocolate cupcakes Sally sold\n    chocolate_sold = total_chocolate_cupcakes / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    cost_postcards = 10 * 45  # Cost of 10 postcards in pence\n    cost_stamps = 10 * 27     # Cost of 10 stamps in pence\n    total_cost_pence = cost_postcards + cost_stamps  # Total cost in pence\n    \n    note_value_pence = 1000 * 10  # Value of a £10 note in pence\n\n    change_pence = note_value_pence - total_cost_pence  # Change in pence\n    change_pounds = change_pence / 100  # Change in pounds\n\n    return round(change_pounds, 2)  # Rounding to 2 decimal places\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Claire's seat is fixed\n    # Total permutations for the 3 remaining people is 3! (factorial of 3)\n    total_permutations = 3 * 2 * 1\n    \n    # We need to subtract the scenarios where Tony sits face to face with Claire\n    # There is only 1 way Tony can sit face to face with Claire\n    # After this, the remaining 2 people can be arranged in 2! ways\n    face_to_face_permutations = 2 * 1\n    \n    # Calculate the number of valid arrangements\n    valid_arrangements = total_permutations - face_to_face_permutations\n    \n    return valid_arrangements\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    \n    equations = [\n        Eq(x % 4, 3),  # Three children had to sit out when grouped by 4\n        Eq(x % 7, 6),  # One child had to sit out when grouped by 7\n        Eq(x % 9, 3)   # Three children had to sit out when grouped by 9\n    ]\n    \n    # Solve the system of congruences using the Chinese Remainder Theorem\n    lcm = 252  # Least common multiple of 4, 7, 9 is 4*7*9, which is 252\n    solutions = solve(equations, x)\n    valid_solutions = [s for s in solutions if s >= 0]\n    \n    # Based on the Chinese Remainder Theorem, the solutions are of the form x = ni + k\n    min_solution = min(valid_solutions)\n    k = min_solution % lcm  # Get the minimal solution within the first LCM period\n\n    return k\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    # when 7.4 kg is rounded off to 1 decimal place,\n    # the smallest possible value before rounding would be half the value of the precision below 7.4\n    # which is 0.05 less than 7.4 as it rounds to the nearest tenth of a kilogram.\n    smallest_mass = 7.4 - 0.05\n    return smallest_mass\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank produces 180 tables in 10 days\n    frank_production_per_day = 180 / 10\n    \n    # Ryan produces 180 tables in 15 days\n    ryan_production_per_day = 180 / 15\n    \n    # Difference in table production per day\n    difference = frank_production_per_day - ryan_production_per_day\n    \n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the total number of questions Miss Atkinson had to mark.\n    x = symbols('x')\n    \n    # If she marks 4 questions per minute, she would take x/4 minutes.\n    # If the right time to leave is 't', then marking at this rate, she leaves at time 't + 5'.\n    # If she marks 6 questions per minute, she would take x/6 minutes.\n    # Marking at this rate, she leaves at time 't - 5'.\n    # We can create two equations based on the above information:\n    #    (x/4) = t + 5  (1)\n    #    (x/6) = t - 5  (2)\n    \n    # By solving these two equations, we can find the value of 'x' which represents the\n    # total number of questions marked.\n\n    # Rearranging equation (1):\n    equation1 = Eq(x / 4, t + 5)\n    # Rearranging equation (2):\n    equation2 = Eq(x / 6, t - 5)\n\n    # Solving the system of equations for x\n    solution = solve((equation1, equation2), (x, t))\n\n    return solution[x]\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    incorrect_mark = -2  # marks deducted for wrong answer\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        total_marks = correct_answers * correct_mark + incorrect_answers * incorrect_mark\n        if total_marks == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75     # in pounds\n    number_of_cakes_sold = total_money_raised / price_per_cake\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    money_spent_restaurant = (3 / 7) * total_money\n    remaining_money = total_money - money_spent_restaurant\n    money_spent_fees = (2 / 9) * remaining_money\n    money_left = remaining_money - money_spent_fees\n    return money_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    candies_each = total_candies // 2\n    candies_to_give = 24 - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    return 5 * x + 1 * y\n\nans = solution(x, y)"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        numbers = [i, i + 1, i + 2, i + 3, i + 4]\n        for j in range(5):\n            for k in range(j+1, 5):\n                for l in range(k+1, 5):\n                    if (numbers[j] + numbers[k] + numbers[l]) % 37 == 0:\n                        for m in range(5):\n                            for n in range(m+1, 5):\n                                for o in range(n+1, 5):\n                                    if {j, k, l} != {m, n, o} and (numbers[m] + numbers[n] + numbers[o]) % 60 == 0:\n                                        return max(numbers)\n    return -1\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Since it takes 6 seconds to chime thrice, the interval between chimes is (6 seconds / (3 chimes - 1)).\n    interval_between_chimes = 6 / (3 - 1)\n\n    # At 6 pm, the clock chimes 6 times. We calculate the time taken as follows:\n    # Total time = interval between chimes * (number of chimes at 6 pm - 1)\n    total_time_at_6_pm = interval_between_chimes * (6 - 1)\n    \n    return total_time_at_6_pm\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Total hours P takes to complete the job\n    p_hours = 12 * 8\n    # Total hours Q takes to complete the job\n    q_hours = 8 * 10\n    \n    # Work rate of P and Q\n    p_rate = 1 / p_hours\n    q_rate = 1 / q_hours\n    \n    # Combined work rate\n    combined_rate = p_rate + q_rate\n    \n    # Total time needed for both P and Q to do the job\n    total_time = 1 / combined_rate\n    \n    # Since they work 8 hours a day together\n    days_needed = total_time / 8\n    \n    # Returning the ceiling of the days needed\n    import math\n    return math.ceil(days_needed)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Converting meters to centimeters\n    meters_in_cm = 3.2 * 100\n    # Calculating the difference in centimeters\n    difference = meters_in_cm - 30\n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Use the sum of squares formula\n    n = 10 # Because pip's answer involves summing squares up to 10^2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) / 6\n    ans = 3 * sum_of_squares # Multiplying by 3 to adjust for the 3^2, 6^2, 9^2 pattern\n    return int(ans)\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 41))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 0.56  # cost in pounds\n    total_kg = 5\n    total_cost = cost_per_kg * total_kg\n    amount_paid = 10  # amount paid in pounds\n    \n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    factors_count = 1\n    prime_factors = factorint(120)\n    for exponent in prime_factors.values():\n        factors_count *= (exponent + 1)\n    return factors_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    import math\n\n    n = 180\n    sqrt_n = int(math.sqrt(n))\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            diff = n // i - i\n            return diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temperature_midnight = -8\n    temperature_midday = 13\n\n    temperature_change = temperature_midday - temperature_midnight\n\n    return temperature_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    # Iterate over potential numbers within the range 5 to 15\n    for number in range(5, 16):\n        # Check if the number is a multiple of 3 and a factor of 27\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    num_people = 85\n    price_per_person = 1.30\n    total_money_collected = num_people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time taken by Max to cover the distance\n    t = symbols('t')\n\n    # Luca's speed is 2x and Max's speed is 3x for some speed x\n    # Luca takes t + 10 minutes to cover the same distance\n    # Using the equation Distance = Speed x Time\n    # Since distance is the same for both, Luca's distance equation is 2x(t + 10) and Max's distance equation is 3xt\n    # Setting the equations equal gives us 2x(t + 10) = 3xt\n    \n    # We solve the equation for t (Max's time), which does not depend on speed directly since speeds ratio is given\n    equation = Eq(2*(t + 10), 3*t)\n    max_time = solve(equation, t)\n    \n    # Luca's time at his usual speed is t + 10, so we double his speed, which halves the time taken\n    # Therefore, time taken by Luca at double his speed is (t + 10)/2\n    luca_time_double_speed = (max_time[0] + 10) / 2\n    \n    return luca_time_double_speed\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    total_score = 71\n    correct_answer_mark = 2\n    \n    # Let x be the number of correct answers and y the number of wrong answers\n    # We have two equations:\n    # x + y = 40 (total number of questions)\n    # 2x - y = 71 (total score, with 2 points for each correct answer and -1 for wrong answers)\n    \n    # We can solve these two equations for x and y using substitution or other methods\n    # y = 40 - x\n    # 2x - (40 - x) = 71\n    # 3x = 111\n    x = 111 / 3\n    y = total_questions - x\n\n    return y\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    less_than_million = 1000000 - number\n    return less_than_million\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM is 1 hour\n    jogging_time = 1\n    jogging_speed = 6.5  # Miles per hour\n    \n    # Jogging distance\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Walking time from 7:30 AM to 9:30 AM is 2 hours\n    walking_time = 2\n    walking_speed = 4.5  # Miles per hour\n    \n    # Walking distance\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def count_3_in_number(number):\n    return str(number).count('3')\n\ndef solution():\n    total_count = 0\n    for page_number in range(1, 319):\n        total_count += count_3_in_number(page_number)\n    return total_count\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let x be the number of pens and pencils each.\n    # After giving 5 pencils to Ali, she had x - 5 pencils left.\n    # At this point, she had twice as many pens as pencils, so she initially had 2(x - 5) pens.\n    # But since she had the same number of pens and pencils, we have x = 2(x - 5).\n    # Solving for x gives us x - 2(x - 5) = 0, which simplifies to x - 2x + 10 = 0.\n    \n    x = symbols('x')\n    equation = Eq(x, 2 * (x - 5))\n    initial_quantity = solve(equation, x)[0]\n    \n    # She then bought another 18 pens, so she would have initial_quantity + 18 pens in the end.\n    \n    final_quantity = initial_quantity + 18\n    return final_quantity\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    still_water_speed = 33\n    current_speed = 7\n    downstream_speed = still_water_speed + current_speed\n    distance = 320\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    cards_per_pattern = 13\n    num_patterns = 4\n    # Using the pigeonhole principle, drawing all cards except for one from each pattern can still\n    # result in no \"A\" being drawn, so we need to draw one more to ensure an \"A\".\n    num_draws_without_A = (cards_per_pattern - 1) * num_patterns\n    min_draws_to_get_A = num_draws_without_A + 1\n    \n    return min_draws_to_get_A\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n\n    total_sweets = ben_sweets + bob_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    \n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 2 * 45\n    remaining_length = total_length - cut_length\n    length_of_each_piece = 40\n\n    num_of_pieces = remaining_length // length_of_each_piece\n\n    return num_of_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed = 0.25\n    proportion_tennis_players_among_left_handed = 0.1\n\n    total_left_handed = left_handed_tennis_players / proportion_tennis_players_among_left_handed\n    total_students = total_left_handed / proportion_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    grams_needed_for_100_cookies = 100 / cookies_per_gram\n    return grams_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"10:35\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_time\n    return arrival_time.time()\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digit_options = 3  # There are 3 digits to choose from: 6, 7, and 8\n    # Since each digit can be used more than once, each place in the three-digit number\n    # can be filled with any of the 3 digits.\n    # Hence, for a three-digit number, we have 3 options for each place.\n    ans = digit_options ** 3  # 3 options for each of the 3 places\n    return ans\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    total_zeros = 0\n    number = 1\n\n    while total_zeros < 100:\n        str_number = str(number)\n        total_zeros += str_number.count('0')\n        if total_zeros >= 100:\n            break\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    each_carton_volume = 3  \n    total_volume = total_cartons * each_carton_volume  \n    drank_volume = 9  \n    remaining_volume = total_volume - drank_volume  \n    return remaining_volume\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed1 = 180  # speed in meters per minute for the first part\n    time1 = 6     # time in minutes for the first part\n    speed2 = 120  # speed in meters per minute for the second part\n    time2 = 8     # time in minutes for the second part\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n\n    return total_distance\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1 # Add 1 for Elias himself\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    \n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    percentage = (42 / 35) * 100\n    return percentage\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in class A and B\n    A, B = symbols('A B', integer=True)\n\n    # Equation relating the number of students in classes A and B initially (5/7 relationship)\n    equation1 = Eq(A, (5/7)*B)\n\n    # Equation after 3 students are transferred from B to A (4/5 relationship)\n    equation2 = Eq(A+3, (4/5)*(B-3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    result = 24.4 * 1000\n    return result\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Since the numbers are consecutive, we can represent them as:\n    # n, n+1, n+2, n+3, n+4, n+5, n+6, n+7, where n is the smallest number\n    \n    # The sum of these numbers is 8n + (1+2+3+4+5+6+7) = 8n + 28\n    # We're given that the sum is 2012, so:\n    # 8n + 28 = 2012\n    # Now we can solve for n.\n    n = (2012 - 28) / 8\n    \n    # The largest number will be n + 7\n    largest_number = n + 7\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    \n    ans = dividend // divisor\n    \n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # The number of boys can be represented as n^2,\n    # and the total number of students after adding the girls is (n+1)^2.\n    # According to the problem, we have the equation\n    # (n + 1)^2 = n^2 + 17\n    # Expanding both sides gives us n^2 + 2n + 1 = n^2 + 17\n    # Simplifying the equation: 2n + 1 = 17\n\n    n = (17 - 1) // 2  # n = 8, since (17 - 1) / 2 = 8\n\n    # Number of boys is n^2\n    num_boys = n ** 2\n\n    return num_boys\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # Exchange 1: (x - 3) bottles left, got 1 bottle of mineral water.\n    # Exchange 2: (x - 3*2) bottles left, got 2 bottles of mineral water.\n    # Exchange 3: (x - 3*3) bottles left, got 3 bottles of mineral water.\n    # Exchange 4: (x - 3*4) bottles left, got 4 bottles of mineral water.\n    # The final number of bottles Faye gets is 4 (as given).\n    # To get 1 more bottle than expected (5 times), she must have 2 leftover bottles after the 5th exchange.\n    # Because in the 5th exchange she wouldn't get another bottle (as 3 empty ones are needed for that), so the remainder is 2.\n    # This means after 5 exchanges, she has used (x - 3*5) + 2 = x - 13 bottles.\n\n    # Let's check each possible number of initial bottles to find which one fits the condition.\n    x = 3  # We start from 3 since she must have at least 3 to make an exchange.\n    while True:\n        # if after 5 exchanges and she's left with 2 bottles, she has a total of 4 bottles (which she got) + 2 leftover = 6.\n        # So we find the initial x that fits the equation: x - 15 + 2 = 6\n        if x - 13 == 6:\n            break\n        x += 1\n    \n    return x\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    water_volume_litres = 40\n    flow_rate_ml_per_sec = 125\n    water_volume_ml = water_volume_litres * 1000  # converting litres to millilitres\n    time_seconds = water_volume_ml / flow_rate_ml_per_sec\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    count = 0\n    pages = 0\n    while count < 237:\n        pages += 1\n        count += len(str(pages))\n    return pages - 1 if count > 237 else pages\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term and d is the common difference\n    # 9th term: a + 8d\n    # 15th term: a + 14d\n    # 20th term: a + 19d\n    # 12th term: a + 11d\n    \n    # 9th term is 18 larger than 15th term\n    eq1 = Eq((a + 8*d) - (a + 14*d), -18)\n    # Sum of 20th term and 12th term is 88\n    eq2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solving for a and d\n    solutions = solve((eq1, eq2), (a, d))\n    a = solutions[a]\n    d = solutions[d]\n\n    # Now, calculate the 32nd term: a + 31d\n    return a + 31*d\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468\n    correct_total = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n\n    day_difference = incorrect_total - correct_total\n    savings_difference = incorrect_day_savings - correct_day_savings\n\n    days = savings_difference / day_difference\n\n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Since Mr Tung cuts a piece of rope into 4 equal parts in 12 minutes,\n    # it means he makes 3 cuts (since 4 pieces require 3 cuts).\n    time_per_cut = 12 / 3\n    \n    # To make 12 pieces, he needs to make 11 cuts.\n    total_time = time_per_cut * 11\n    \n    # Return the total time needed.\n    return total_time\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    year_of_birth = 1940 - 80\n    age_of_oak_tree_in_2011 = 2011 - year_of_birth\n    return age_of_oak_tree_in_2011\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let t be the total travel time originally (6 hours)\n    # Let d be the distance\n    # Let s be the original speed\n    # We know that d = s * t  => d = s * 6\n    # New speed is s + 2, new time is t - 1 (5 hours), same distance\n    # d = (s + 2) * (t - 1)\n    # We can substitute d from the first equation to the second:\n    # s * 6 = (s + 2) * (t - 1)\n    # To find s, we rearrange the equation\n    # 6s = 5s + 10 - s - 2\n    # s = 10 - 2\n    # s = 8 (original speed in km/h)\n    # Now, we can find the distance by plugging s back into the first equation\n    # d = s * 6\n    s = 8\n    d = s * 6\n    return d\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25\n    \n    first_term = nth_value - (nth_term - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for ages of Lily, Marry, and Carol\n    lily, marry, carol = symbols('lily marry carol')\n\n    # Carol is 2 years older than Marry\n    eq1 = Eq(carol, marry + 2)\n    # Marry is 1 year older than Lily\n    eq2 = Eq(marry, lily + 1)\n    # 4 times the product of ages is 2240\n    eq3 = Eq(4 * lily * marry * carol, 2240)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (lily, marry, carol))\n\n    # Return the age of Carol\n    return solutions[carol]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((8 * x + 8) / 2) - 3 * (x + 6), x + 22)\n    correct_answer = solve(equation, x)\n\n    return correct_answer[0]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3*(6 - 2*x), 8 + 10*x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2/5) * total_flowers\n    purple_flowers = (1/8) * total_flowers\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    ans = remainder if remainder == 0 else 9 - remainder\n    return ans\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Convert liters to quarts (1 liter = 1.056688 quarts)\n    coke_liters = 2.5\n    coke_quarts = coke_liters * 1.056688\n    \n    # Size of the cup in quarts\n    cup_capacity_quarts = 0.5\n\n    # Number of cups she can drink\n    num_cups = coke_quarts / cup_capacity_quarts\n\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Worst case scenario to get 3 toy cars of the same color:\n    # Picking 2 red cars, then 2 blue cars, and then 2 white cars, will not guarantee 3 of the same color.\n    # After picking 2 of each, the next car picked must be the 3rd car of that color.\n    # So he needs to pick 2 + 2 + 2 (for red, blue, white respectively) and then 1 more to ensure 3 of the same color.\n    \n    cars_needed = (2 + 2 + 2) + 1\n    return cars_needed\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Because the marbles are identical, we just have to count the\n    # ways of splitting them, which is the number of ways we can\n    # choose a number for the first pile. The second pile's number\n    # of marbles will be the remainder when we subtract the chosen\n    # number from 10.\n    \n    # The first pile can have from 0 to 10 marbles (the second pile\n    # gets whatever is left). However, since it's about splitting\n    # into two non-empty piles, the first pile can have from 1 to 9\n    # marbles, which gives us 9 different ways.\n\n    # Another way to look at it is because the order of the piles \n    # doesn't matter, splitting the marbles into piles of (1,9) \n    # is the same as (9,1), so we only count this once.\n    # Hence, when we take (0,10) and (10,0) out of the equation\n    # there are (10 - 1) / 2 = 4.5 which we round down to 4 options.\n\n    return 10 // 2\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_in_cm = [85, 200, 147]  # 2m is 200cm\n    total_length_in_cm = sum(lengths_in_cm)\n    total_length_in_m = total_length_in_cm / 100  # convert cm to m\n    return total_length_in_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    ans = whole_number + fractional_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(64 // 8 + 1):  # Start with a hypothesis that all are spiders. All legs / 8 legs per spider\n        legs_with_spiders = spiders * 8\n        remaining_legs = 64 - legs_with_spiders\n        if remaining_legs % 6 == 0:  # Check if the remaining legs can all belong to ants.\n            ants = remaining_legs // 6\n            max_ants = max(max_ants, ants)\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    vivian = 5*justin + 8\n    equation = Eq(vivian, justin + 48)\n\n    solutions = solve(equation, justin)\n\n    vivian_coins = 5*solutions[justin] + 8\n    \n    return vivian_coins\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 7.5 * 1000\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let h be the height from which the ball was dropped\n    # After the first bounce, it reaches 3h\n    # After the second bounce, it again reaches 3h\n    # After the third bounce, it reaches 3h/2\n    # After the fourth bounce, it reaches 3h/4\n    # According to the question, after the fourth bounce, the height is 36 m\n    # So we have 3h/4 = 36\n    # Solving for h gives us the height from which the ball was dropped\n    \n    fourth_bounce_height = 36\n    \n    # Calculate the original height\n    original_height = (fourth_bounce_height * 4) / 3\n\n    return original_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n    \n    # Equation representing the original sum of the numbers\n    equation1 = Eq(x + y, 11.63)\n    \n    # Equation representing the incorrect sum due to shifting the decimal point\n    equation2 = Eq(x + y / 10, 5.87)\n    \n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Because we want one hundred times the difference\n    diff = 100 * abs(solutions[x] - solutions[y])\n    \n    return diff\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining = initial_amount - spent\n    return remaining\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679', 5):\n        number = int('8' + ''.join(perm))\n        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_full_cd = 899  # in pence, because £8.99 is equal to 899p\n\n    # Total cost if bought all songs separately\n    total_separate_cost = cost_per_song * 12  \n\n    # Saved amount in pence\n    saved_amount_pence = total_separate_cost - cost_full_cd  \n\n    # Convert saved amount to pounds\n    saved_amount_pounds = saved_amount_pence / 100  \n\n    return saved_amount_pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    num_trays = 40\n\n    total_eggs = eggs_per_tray * num_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for n in range(10, 100):\n        original = str(n)\n        reversed_n = original[::-1]\n        difference = abs(int(original) - int(reversed_n))\n        results.add(difference)\n    return results\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    perm = permutations(digits, 2)\n    two_digit_numbers = set(int(''.join(p)) for p in perm)\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    perms = sorted([''.join(p) for p in permutations(digits, 5)])\n    min_diff = float('inf')\n    for i in range(len(perms) - 1):\n        for j in range(i+1, len(perms)):\n            num1 = int(perms[i])\n            num2 = int(perms[j])\n            diff = abs(num1 - num2)\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter, sam = symbols('peter sam')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(sam, peter + 40)\n    equation2 = Eq(sam - 0.20 * sam, peter + 0.25 * peter + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(0, 10):\n        number = 300 + 10 * N + 3\n        if number % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    length = 450  # length in meters\n\n    # Speed = Distance / Time\n    speed = length / time  # speed in meters per second\n\n    # Convert speed from m/s to km/h\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    return factorial\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n\n    percent_concentration = (salt_weight / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    ans = 70 / 100 * 40\n    return ans\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    # The number of pencils Owen should give for one pen is the ratio of the pen's cost to pencil's cost.\n    pencils_per_pen = pen_cost / pencil_cost\n    \n    return pencils_per_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    Ali_and_Bala = 2\n\n    total_people = people_in_front_of_Ali + Ali_and_Bala + people_behind_of_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to every other friend, but not to themselves\n    cards_sent_per_friend = friends - 1\n    # Total cards sent is each friend's cards sent times the number of friends\n    total_cards_sent = cards_sent_per_friend * friends\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    ans = 1\n    while True:\n        if all(ans % i == 0 for i in range(1, 7)):\n            break\n        ans += 1\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + (jug_capacity * jugs_added)\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Alan collects £74\n    equation1 = Eq(alan, 74)\n\n    # Bilal raises £86\n    equation2 = Eq(bilal, 86)\n\n    # Chloe collects twice as much as David\n    equation3 = Eq(chloe, 2 * david)\n\n    # David raises three times as much as Emily\n    equation4 = Eq(david, 3 * emily)\n\n    # Total amount collected\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    first_days = 3 * 9\n    following_days = 2 * 15\n    last_days = 2 * 10\n    total_days = 3 + 2 + 2\n    total_cookies = first_days + following_days + last_days\n    average_cookies = total_cookies / total_days\n    return average_cookies\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of days David takes off\n    days_off = symbols('days_off')\n\n    # Equation representing the work done by Candy and David\n    work_done = Eq((1/20) * 12 + (1/25) * (12 - days_off), 1)\n\n    # Solving for the number of days David takes off\n    solution = solve(work_done, days_off)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # Given the mass of the book is 20N, and assuming we are on Earth with gravity,\n    # the force exerted by the table on the book is equal in magnitude and opposite in\n    # direction to the force of gravity on the book. This is according to Newton's third law\n    # of motion. Hence, the magnitude of the force exerted by the table is also 20N.\n    ans = 20  # Force in Newtons\n    return ans\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Maximum number of balls that can be taken out without obtaining 6 balls of the same type:\n    # 5 footballs (max before getting 6), 5 basketballs (same reasoning), and 3 volleyballs (all of them)\n    max_without_six_same = 5 + 5 + 3\n\n    # To ensure she gets 6 of the same type, she must take out one more ball\n    balls_to_take_out = max_without_six_same + 1\n\n    return balls_to_take_out\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    tax1 = 0.05 * 50000\n    tax2 = 0.08 * (140000 - 50000) + (T * (140000 - 50000) / 100)\n    total_tax = tax1 + tax2\n    \n    equation = Eq(total_tax, 15100)\n    T_value = solve(equation, T)[0]\n    \n    return T_value\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    mass = 2  # mass of the ball in kg\n    height = 5.0  # height of the tabletop in m\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Potential energy at the top equals kinetic energy at the bottom\n    # m * g * h = 0.5 * m * v^2\n    # 0.5 * v^2 = g * h\n    # v^2 = 2 * g * h\n    # v = sqrt(2 * g * h)\n\n    v = sqrt(2 * g * height)\n\n    return v\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    equation1 = Eq(4/5 * total_fruits - 1/8 * (4/5 * total_fruits), 3/4 * total_fruits)\n    equation2 = Eq(1 - 4/5, 1/5)\n    equation3 = Eq(1/5 * total_fruits - 30, 1/4 * total_fruits)\n\n    solutions = solve((equation1, equation2, equation3), total_fruits)\n\n    return solutions[total_fruits]\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes = 6\n    time_per_cake = time_for_6_cakes / cakes\n    \n    total_cakes = 10\n    total_time = time_per_cake * total_cakes\n    \n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    food_bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n    \n    tip_amount = food_bill * tip_percent\n    tax_amount = food_bill * tax_percent\n    total_cost = food_bill + tip_amount + tax_amount\n    \n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers = symbols('stickers')\n    # Equation for giving 13 stickers to each pupil\n    equation1 = Eq(stickers % 13, 190)\n    # Equation for giving 17 stickers to each pupil\n    equation2 = Eq(stickers % 17, 50)\n\n    solutions = solve((equation1, equation2), stickers)\n\n    # We need to find the positive solution for number of stickers\n    ans = next(val for val in solutions if val > 0)\n    return ans\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Given parameters\n    initial_speed = 5 # m/s\n    angle = 45 # degrees\n    height = 30 # meters\n    \n    # Convert the angle from degrees to radians\n    angle_radians = math.radians(angle)\n    \n    # Calculate the vertical and horizontal components of the initial velocity\n    initial_velocity_vertical = initial_speed * math.sin(angle_radians)\n    initial_velocity_horizontal = initial_speed * math.cos(angle_radians)\n    \n    # Calculate the time it takes for the arrow to reach the ground\n    # Using the kinematic equation: y = V0y * t + (1/2) * a * t^2\n    # Where y is the height, V0y is the initial vertical velocity, a is the acceleration due to gravity (9.81 m/s^2), and t is time\n    # Since the arrow starts at 30 meters and ends at 0 meters, we set y to 0:\n    # 0 = V0y * t - (1/2) * g * t^2\n    # Rearranging the terms gives us a quadratic equation: (1/2) * g * t^2 - V0y * t = 0\n    # Since we are interested in the non-zero solution for time we use the following equation:\n    # t = (2 * V0y) / g\n    g = 9.81 # m/s^2 (acceleration due to gravity)\n    time_to_hit_ground = (2 * initial_velocity_vertical) / g\n    \n    # The horizontal velocity component remains constant.\n    # The final velocity is the vector sum of the horizontal velocity component and the final vertical velocity component.\n    # At the moment the arrow hits the ground, the final vertical velocity component equals the initial one (symmetry in projectile motion):\n    final_velocity_vertical = -initial_velocity_vertical\n    final_velocity = math.sqrt(initial_velocity_horizontal**2 + final_velocity_vertical**2)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    total_oranges = 13\n    total_kids = 3\n    # Since each kid gets at least one orange, we distribute one to each first.\n    total_oranges -= total_kids\n    # Now we need to find the number of solutions to x + y + z = total_oranges where x, y, z are non-negative.\n    # This is a combinations with repetitions problem, which can be calculated using stars and bars method.\n    return comb(total_oranges + total_kids - 1, total_kids - 1)\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(0, 10):\n            for M in range(0, 10):\n                for O in range(0, 10):\n                    for G in range(0, 10):\n                        if len({S, A, M, O, G}) == 5:  # check if all digits are different\n                            SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                            OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                            if SASMO * 4 == OGAMS:\n                                return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    foods = 2  # sandwiches, burgers\n    drinks = 3  # coffee, milk, tea\n    desserts = 4  # cake, pudding, ice-cream, pie\n\n    # Using the Principle of Multiplication\n    ans = foods * drinks * desserts\n    return ans\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def digit_sum(number):\n    return sum(int(digit) for digit in str(number))\n\ndef divisible_by_11(number):\n    evens = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 == 0)\n    odds = sum(int(digit) for i, digit in enumerate(str(number)) if i % 2 != 0)\n    return (evens - odds) % 11 == 0\n\ndef solution():\n    number = 11  # Starting point - smallest two-digit number divisible by 11\n    while True:\n        if digit_sum(number) == 20 and divisible_by_11(number):\n            return number\n        number += 11  # Increase by 11 to maintain divisibility by 11\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    container_A = 48\n    container_B = 28\n    total_water = container_A + container_B\n    # After transferring water, both containers will have equal volumes, which is half the total volume of water\n    equal_volume = total_water / 2\n    # Water to transfer from A to B is the difference between equal volume and current volume of B\n    water_to_transfer = equal_volume - container_B\n    return water_to_transfer\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n\n    equation1 = Eq(2 * elephants, 5 * cows)\n    equation2 = Eq(4 * cows, 3 * horses)\n    equation3 = Eq(3 * horses, 5 * pigs)\n\n    solutions = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    pigs_equivalent_8_elephants = 8 * solutions[elephants] / solutions[pigs]\n\n    return pigs_equivalent_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000\n    amount = 2519.42\n    n = 3  # years\n    rate = symbols('rate')\n\n    # Equation for compound interest\n    equation = Eq(principal * (1 + rate) ** n, amount)\n\n    # Solving for rate\n    solution = solve(equation, rate)\n\n    # Note: We extract the positive solution as negative interest rate does not make sense in this context.\n    interest_rate = [sol.evalf() for sol in solution if sol.evalf() > 0]\n\n    return interest_rate[0]\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 0.6 * (2/5) * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_rate = 0.18\n    tax_rate = 0.10\n    \n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    \n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols / unknowns\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    # Establishing the equations based on the problem\n    equation1 = Eq(24*mango_price + 20*lychee_price, 1160)\n    equation2 = Eq(lychee_price, 2*mango_price - 6)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    # Returning the price per box of lychees\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_of_five_boxes = 350\n    weight_per_box = total_weight_of_five_boxes / 5\n    total_weight_of_three_boxes = weight_per_box * 3\n    return total_weight_of_three_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "def solution():\n    from math import factorial\n    # Treat the group of comics as one unit and the group of fictions as another unit\n    # There are 2! ways to arrange these two groups\n    group_arrangements = factorial(2)\n    \n    # Within each group, the books can be arranged in 4! and 6! ways, respectively\n    comic_arrangements = factorial(4)\n    fiction_arrangements = factorial(6)\n    \n    # The total number of arrangements is the product of these possibilities\n    total_arrangements = group_arrangements * comic_arrangements * fiction_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # We can think of the 4 dancing performances (D) as creating 5 slots as follows: _ D _ D _ D _ D _\n    # These slots include the spaces before the first D, in between each D, and after the last D.\n    # We need to arrange 6 singing performances (S) in these 5 slots, with at least 1 S in each of the middle 3 slots.\n    # Let's assign one S to each of the middle 3 slots: _ D S D S D S D _\n    # Now we need to arrange the remaining 3 S's in the 5 slots, which is actually a \"stars and bars\" problem.\n    # We have 3 \"stars\" (S's) and 4 \"bars\" (dividers for the 5 slots), and we need to find the combinations.\n    # The number of ways to do so is C(n+k-1, k-1) where n is the number of stars and k is the number of slots.\n    n = 3\n    k = 5\n    combinations_of_singing = factorial(n + k - 1) // (factorial(n) * factorial(k - 1))\n    \n    # After arranging the S's, the singing and dancing performances can be permuted amongst themselves.\n    # There are factorial(6) ways to permute the singing and factorial(4) ways to permute the dancing performances.\n    permutations_of_singing = factorial(6)\n    permutations_of_dancing = factorial(4)\n    \n    # The total number of ways Tom can arrange the performances is the product of the combinations\n    # and the permutations of singing and dancing\n    total_ways = combinations_of_singing * permutations_of_singing * permutations_of_dancing\n    \n    return total_ways\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7/10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let x be the number of correct answers Dora got\n    # and y be the number of correct answers Justin got.\n    # 1. Justin's points = Dora's points + 15\n    # 2. Justin's points + Dora's points = 155\n    for x in range(11):  # Dora can only have between 0 and 10 correct answers.\n        dora_points = 10*x - 5*(10 - x)  # Dora's total points\n        justin_points = dora_points + 15  # Justin's total points\n        if justin_points + dora_points == 155:  # Check if the sum of their points is 155\n            return x  # Return the number of correct answers Dora got\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average candies sold by each group in class B.\n\n    # Average for Class A\n    average_A = 12  # given\n\n    # Average for combined groups of Class A and Class B\n    average_total = 8  # given\n\n    # Total number of groups for both classes\n    num_groups_A = 3  # given for class A\n    num_groups_B = 4  # given for class B\n\n    # Total candies sold by class A\n    total_candies_A = average_A * num_groups_A\n\n    # Using the formula for overall average:\n    # (total of class A + total of class B) / (number of groups in A + number of groups in B) = combined average\n    # (total_candies_A + x * num_groups_B) / (num_groups_A + num_groups_B) = average_total\n\n    # Solve for x, the average candies sold by each group in class B.\n    # Rearranging the equation above to solve for x:\n    x = ((average_total * (num_groups_A + num_groups_B)) - total_candies_A) / num_groups_B\n\n    return x\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the time it takes Lee to finish the job by himself\n    # Let y be the time it takes Nancy to finish the job by herself\n    x, y = symbols('x y')\n\n    # If they work together, they will finish the job in 10 hours\n    # Lee's work rate is 1/x and Nancy's is 1/y\n    # Together they work at a combined rate of 1/10 per hour\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # If Lee types for 6 hours, he'll do 6/x of the job\n    # Then Nancy types for 20 hours, doing 20/y of the job\n    # Together they finish 1 job\n    equation2 = Eq(6/x + 20/y, 1)\n\n    # Solve the system of equations for y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the time it takes for Nancy to finish the job by herself\n    return solutions[y]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_amount = 6\n\n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n\n    return latte_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    remaining_string_length = total_string_length - used_string_length\n    number_of_pieces = 10\n\n    length_of_each_piece = remaining_string_length / number_of_pieces\n\n    return length_of_each_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_passengers = 22\n    remaining_after_first_stop = remaining_passengers / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45 / 100\n    total = 80\n    result = percentage * total\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    num_flavours = 7\n    num_selections = 2\n\n    ans = comb(num_flavours, num_selections)\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "def solution():\n    from math import comb\n\n    num_people = 10\n    handshakes = comb(num_people, 2)\n\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for white, milk, and dark chocolates\n    white, milk, dark = symbols('white milk dark')\n    \n    # Establish the equations based on the problem\n    ratio_eq = Eq(white/milk, 3/7)\n    ratio_eq2 = Eq(milk/dark, 7/5)\n    difference_eq = Eq(dark - white, 8)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, ratio_eq2, difference_eq), (white, milk, dark))\n    \n    # Extract the number of milk chocolates from the solution\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')\n    # x is the total number of students in the class\n    \n    # Equation representing the problem statement\n    equation = (1/4)*x + 3 + (1/3)*(x - (1/4)*x - 3) - 3 + 25 - x\n\n    # Solve the equation for x\n    total_students = solve(equation, x)[0]\n    \n    return total_students\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Given quantities\n    red_balls = 5\n    green_balls = 10\n\n    # Let x be the number of red balls to add\n    # The probability of getting a green ball should be 1/3\n    # (green_balls) / (total_balls) = 1/3\n    # (green_balls) / (red_balls + x + green_balls) = 1/3\n    # 3 * green_balls = red_balls + x + green_balls\n    # x = (3 * green_balls) - red_balls - green_balls\n    x = (3 * green_balls) - red_balls - green_balls\n\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n    num_small_squares = (big_square_side // small_square_side) ** 2\n    return num_small_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent_amount = 5  # 5p spent by Avril\n    fraction_of_total = 1/4  # one-quarter of Avril's money\n\n    total_amount = spent_amount / fraction_of_total  # Calculate the total amount before spending\n\n    return total_amount\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantities we want to find\n    sam, peter = symbols('sam peter')\n\n    # Create the equations based on the problem statement\n    # Sam has 40 stickers more than Peter at the beginning\n    eq1 = Eq(sam, peter + 40)\n    # Sam gives 20% of his stickers to Peter\n    eq2 = Eq(sam - 0.20 * sam, sam - (sam - peter) / 5)\n    # Peter then gives 25% of his stickers to Sam\n    eq3 = Eq(peter + (sam - 0.2 * sam) * 0.25, peter + (sam - peter) / 5 * 1 / 4)\n    # In the end, Sam has 96 stickers more than Peter\n    eq4 = Eq((sam - 0.20 * sam) + (peter + 0.20 * sam) * 0.25, peter + 0.25 * (peter + 0.20 * sam) + 96)\n\n    # Solve the system of equations for sam and peter\n    solution = solve((eq1, eq4), (sam, peter))\n\n    # Return the solution for the number of stickers Peter had initially\n    return solution[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the ones digit for each term separately\n    ones_digit_32_pow_33 = (32**33) % 10\n    ones_digit_22_pow_29 = (22**29) % 10\n\n    # Subtract the ones digits and find the result's ones digit\n    ones_digit_result = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n\n    # Make sure the answer is positive\n    ones_digit_result = ones_digit_result if ones_digit_result >= 0 else (ones_digit_result + 10)\n\n    return ones_digit_result\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    count_6 = 0\n    page = 1\n    while count_6 < 18:\n        page_str = str(page)\n        count_6 += page_str.count('6')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    ratio_1 = 4 / 9\n    ratio_2 = 81\n\n    missing_number = ratio_1 * ratio_2\n    return missing_number\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    # Iterate through all possible combinations of three dice rolls\n    for die1 in range(1, 7):  # Possible outcomes for the first die\n        for die2 in range(1, 7):  # Possible outcomes for the second die\n            for die3 in range(1, 7):  # Possible outcomes for the third die\n                # Check if all dice show different numbers and sum to 12\n                if die1 != die2 and die1 != die3 and die2 != die3 and die1 + die2 + die3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= height:\n            break\n        if jumps % 2 == 0:\n            current_height -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2*i)**3 / (2*i*(2*i+1)*(2*i+2)) for i in range(1, 1007))\n    ans += 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    difference = 21 - 15  # The common difference between terms\n    last_term = 39  # The latest term in the sequence\n    next_term = last_term + difference  # Calculate next term in the sequence\n\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    score_correct = 4\n    score_wrong = -2\n    total_score = 152\n\n    # Let x be the number of correct answers and (total_questions - x) the number of wrong answers.\n    # The total score is thus x * score_correct + (total_questions - x) * score_wrong.\n    # We can set up the equation:\n    # x * score_correct + (total_questions - x) * score_wrong = total_score\n    # and solve for x.\n\n    # solving the equation => 4x - 2(80 - x) = 152\n    # => 4x - 160 + 2x = 152\n    # => 6x = 312\n    # => x = 52\n\n    correct_answers = (total_score + total_questions * score_wrong) // (score_correct - score_wrong)\n    \n    return correct_answers\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    cans_in_1_day = cans_in_6_days / 6\n    cans_in_9_days = cans_in_1_day * 9\n    \n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # If each person gets the same amount of sausage without considering the shape or form that the sausage is in\n    # then we need to find the least number of cuts that allow us to produce 24 equal parts.\n    # Since 16 sausages have to be divided into 24 equal parts, \n    # we look at the least common multiple (LCM) of 16 and 24 to get the least number of cuts.\n    \n    from math import gcd\n    \n    # Calculate the LCM of 16 and 24\n    lcm = (16 * 24) // gcd(16, 24)\n    \n    # Since we need lcm parts, the number of cuts will be lcm divided by 16 (each sausage can be seen as one part initially)\n    num_cuts = lcm // 16 - 1   # Subtract 1 because we don't cut the last part\n    \n    return num_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_perms = factorial(7) \n    vowel_perms = factorial(4) * factorial(3)\n    ans = total_perms - vowel_perms\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the pairs of numbers, which should help in finding their common divisor,\n    # since the remainders upon division by the integer are the same.\n    diff1 = abs(51 - 39)\n    diff2 = abs(147 - 39)\n    diff3 = abs(147 - 51)\n\n    # The greatest common divisor (GCD) of the differences will reveal the largest possible integer\n    # by which all three numbers leave the same remainder.\n    gcd_result = gcd(gcd(diff1, diff2), diff3)\n\n    # Since the integer is greater than 10, we start searching from the GCD and go downwards\n    for i in range(gcd_result, 10, -1):\n        if 39 % i == 51 % i == 147 % i:\n            return i\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    A = symbols('A')\n\n    # Create an equation based on the problem statement\n    # B has 350 mL less water than A\n    # After spilling 500 mL, B has twice as much as A\n    # B = 2 * (A - 500)\n    # A - 350 = B\n    \n    # Substitute B in the first equation with the expression from the second equation\n    equation = Eq(A - 350, 2 * (A - 500))\n    \n    # Solve the equation for A\n    solution = solve(equation, A)\n\n    # Get the solution for A\n    return solution[0]\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    digits_count = 0\n    for i in range(1, 326):\n        digits_count += len(str(i))\n    return digits_count\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle said 3 sentences to each of the 5 other team members she spoke to.\n    # Let's denote the total number of team members as x.\n    # According to the given information, 12 team members did not speak to Lovelle.\n    # Therefore, Lovelle spoke to (x - 12 - 1) members, as we subtract 1 more for Lovelle herself.\n    # The number of team members Lovelle spoke to was given as 5.\n    # So we have the following equation: x - 12 - 1 = 5\n    # Solving for x gives us the total number of team members.\n\n    total_members_spoken_to = 5\n    members_who_did_not_speak = 12\n    lovelle = 1\n\n    # x - 12 - 1 = 5\n    # x = 5 + 12 + 1\n    x = total_members_spoken_to + members_who_did_not_speak + lovelle\n    return x\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    return 81 + 81 / 9 + 110\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    total_count = factorial(len(word)) // (factorial(word.count('S')) * factorial(word.count('T')) * \n                                           factorial(word.count('A')) * factorial(word.count('I')) * \n                                           factorial(word.count('C')))\n    \n    # Count permutations where T's are together using a grouped 'TT' character\n    t_together = \"STTATISTIC\"\n    t_together_count = factorial(len(t_together) - 1) // (factorial(t_together.count('S') - 1) * factorial(2) * \n                                                          factorial(t_together.count('A')) * factorial(t_together.count('I')) * \n                                                          factorial(t_together.count('C')))\n    \n    # Subtract the number of invalid permutations from the total to get the valid ones\n    valid_count = total_count - t_together_count\n\n    return valid_count\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for base in range(1, 1000):  # We are searching for the smallest number that meet the criteria so the range can be 1 to any upper bound number\n        after_music_lesson = base - 2\n        after_sharing = after_music_lesson - after_music_lesson / 3\n        if after_sharing % 4 == 0:  # Check if we can divide the remaining gums equally into four lessons\n            return base\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50  # pieces per hour\n\n    time_needed = total_pieces / average_rate  # hours needed to complete the puzzle\n\n    return time_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sarah_initial, mark = symbols('sarah_initial mark')\n    \n    equation1 = Eq(sarah_initial, mark + 20)\n    equation2 = Eq(sarah_initial + 16, 3 * mark)\n    \n    solutions = solve((equation1, equation2), (sarah_initial, mark))\n    \n    return solutions[sarah_initial]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) / 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The worst case scenario would be that every time the explorer tries a key, it's not the right one for the first three chests, and finally only the last key is left for the last chest.\n    # Therefore, for the first chest, the explorer would try all 9 keys\n    attempts_for_first_chest = 9\n    # For the second chest, since one key has been used, 8 keys are left\n    attempts_for_second_chest = 8\n    # For the third chest, 7 keys are left\n    attempts_for_third_chest = 7\n    # For the fourth chest, only 1 key is left, so no need to try\n    attempts_for_fourth_chest = 1\n    \n    # Adding up all the attempts\n    total_attempts = (attempts_for_first_chest + attempts_for_second_chest +\n                      attempts_for_third_chest + attempts_for_fourth_chest)\n    \n    return total_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyze the sequence and identify the pattern\n    sequence = [2945, 3445, 3245, 3745, 4045, 3845]\n    \n    # Calculate the differences between consecutive elements\n    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence) - 1)]\n    \n    # Identify the repeating pattern in the differences\n    # The observed pattern is +500, -200, +500, -200, ...\n    \n    # The missing number should be after 3745 following the -200 pattern\n    missing_number = 3745 - 200\n    \n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    total_sum = sum([i**2 for i in range(1, 26, 2)])\n    return total_sum\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    equal_mushrooms = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((total_mushrooms, equal_mushrooms), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    num_coins = 11\n    coin_diameter = 1.85\n    total_length = coin_diameter * (num_coins - 1) + coin_diameter\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    common_difference = 8 - 5\n    num_terms = 14\n\n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    sequence_sum = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    return sequence_sum\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3\n    denominator1 = 12\n    denominator2 = 20\n\n    ans = numerator * denominator2 / denominator1\n\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 / (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n\n    # Handshakes is the combination of 10 taken 2 at a time (10 choose 2)\n    handshakes = (participants * (participants - 1)) // 2\n\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    num_people = 8\n    # In a circular permutation, we fix one person and arrange the others around them.\n    # The number of ways to arrange the remaining (num_people - 1) people is (num_people - 1)!\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_diff = night_temp - morning_temp\n\n    return temp_diff\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of the expression only depends on the last digit of each whole number\n    # The last digit of powers of 2 cycles in a pattern: [2, 4, 8, 6], and the cycle repeats every 4 powers\n    last_digit_2 = 2 ** (2017 % 4)\n\n    # The last digit of powers of 3 cycles in a pattern: [3, 9, 7, 1], and the cycle repeats every 4 powers\n    last_digit_3 = 3 ** (2017 % 4)\n\n    # Multiply the last digits of 2^2017 and 3^2017 could give us the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    # Let x be the original number of ants in Jerome's kitchen\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Jerome swept 3/4 of the ants, so 1/4 remained\n    remaining_after_sweep = (1 - 3/4) * x\n\n    # Then, 2/5 of the remaining ants ran out, leaving 3/5 in the kitchen\n    remaining_after_runaway = (3/5) * remaining_after_sweep\n\n    # After 185 ants crawled into the kitchen, there were twice the original number\n    equation = Eq(remaining_after_runaway + 185, 2 * x)\n\n    # Solve the equation for x\n    original_ants = solve(equation, x)\n\n    return original_ants[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    cost_per_book = 13\n    books_day1 = 89\n    books_day2 = 11\n    total_cost = cost_per_book * (books_day1 + books_day2)\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    ans = 6342 // 7\n    return ans\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the common difference (d) and the first term (a)\n    d = symbols('d')\n    a = symbols('a')\n\n    # Construct the equations based on the information given\n    equation1 = Eq(a + (a + d) + (a + 2*d) + (a + 3*d) + 32, (a + 4*d) + (a + 5*d) + (a + 6*d) + (a + 7*d))\n\n    # Solve the equation for the common difference (d)\n    solution = solve(equation1, d)\n\n    return solution[d]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    next_term_index = 8 # The next number would be the eighth term\n    next_term = next_term_index ** 2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens = pens_per_friend * number_of_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def get_number(n):\n        if n == 1:\n            return 1\n        prev = get_number(n - 1)\n        next_val = prev * 2 + 4\n        if next_val >= 100:\n            next_val %= 100\n        return next_val\n    \n    return get_number(2022)\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n    flashes_per_hour = 60\n    \n    # Find the least common multiple (LCM) of the flash rates\n    lcm_flash_rate = lcm(red_flash_rate, green_flash_rate)\n    \n    # Calculate how many times they flash together per minute\n    flashes_together_per_minute = lcm_flash_rate / red_flash_rate\n    \n    # Calculate how many times they flash together in an hour\n    flashes_together_in_hour = flashes_per_hour * flashes_together_per_minute\n\n    return int(flashes_together_in_hour)\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 41))  # Fetching all prime numbers less than 41\n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    number1 = 4.5\n    number2 = 10.3\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_margin = 0.30\n    cost_price = sale_price / (1 + profit_margin)\n\n    new_profit = 5000\n    new_cost_price = cost_price\n    new_sale_price = new_cost_price + new_profit\n\n    new_profit_percentage = (new_profit / new_cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    # Setting the equation 32/n = n/2\n    # Cross multiplying gives 32*2 = n*n\n    # which simplifies to n^2 = 64\n    # Taking the square root of both sides gives n = 8 or n = -8\n    # Since we are looking for a number, we consider the positive solution.\n    n = 64 ** 0.5\n\n    return n\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_per_bottle = 120 / (1 - 3/5)\n    water_volume_per_bottle = total_volume_per_bottle - 120\n    total_water_for_6_bottles = water_volume_per_bottle * 6\n    return total_water_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kilograms = 8.2\n    grams_per_kilogram = 1000\n    n = kilograms * grams_per_kilogram\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = \"EARTH\"\n    num_ways = factorial(len(letters))\n    return num_ways\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's initial speed\n    simon_speed = 150  # feet per minute\n\n    # Simon's friend's speed\n    friend_speed = 200  # feet per minute\n\n    # Time walked before Simon heads back\n    time_walked = 10  # minutes\n\n    # Distance traveled by Simon before heading back\n    simon_distance_walked = simon_speed * time_walked\n\n    # Simon's speed when running back\n    simon_run_speed = 2 * simon_speed\n\n    # Time taken by Simon to run back to school\n    time_simon_run_back = simon_distance_walked / simon_run_speed\n\n    # Total time Simon's friend has been walking\n    total_time_friend = time_walked + time_simon_run_back\n\n    # Distance traveled by Simon's friend in total\n    friend_distance = friend_speed * total_time_friend\n\n    # Simon's distance from his friend when he reaches school\n    # They are moving in opposite directions so we sum their distances\n    dist_simon_from_friend = friend_distance\n\n    return dist_simon_from_friend\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d = perm[0:4]\n        m, o, r, y = perm[1], perm[2], perm[3], perm[4]\n        if s == 0 or m == 0:\n            continue\n        send = s * 1000 + e * 100 + n * 10 + d\n        more = m * 1000 + o * 100 + r * 10 + e\n        money = m * 10000 + o * 1000 + n * 100 + e * 10 + y\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "def solution():\n    from math import factorial\n    \n    total_balls = 2 + 2 + 2 + 1 # total of 7 decorations\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n    \n    # Using permutation formula for identical objects: \n    # Total permutations = n! / (p1! * p2! * ... * pk!) \n    # where n is the total number and p1, p2, ..., pk are the number of identical items\n    \n    total_permutations = factorial(total_balls) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # in litres\n    container_ratio = 0.25\n    cups_number = 14\n    cup_volume = 150 / 1000  # converting ml to litres\n\n    # Water used to fill the container\n    container_volume = initial_volume * container_ratio\n\n    # Water used to fill the cups\n    cups_total_volume = cups_number * cup_volume\n\n    # Water remaining in the dispenser\n    remaining_water = initial_volume - (container_volume + cups_total_volume)\n\n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n\n    def count_derangements(n):\n        # use the formula for subfactorial: !n = (n-1)(!(n-1) + !(n-2))\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        a, b = 0, 1\n        for i in range(3, n + 1):\n            a, b = b, (i - 1) * (a + b)\n        return b\n\n    ans = count_derangements(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"2{i}{j}335\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 7 * (100 // 7 - 1)\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24  # minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    \n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    result = 5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Define the time each person takes to cross the bridge\n    Eddie, Jack, Rose, Mary = 1, 2, 5, 10\n\n    # First, Eddie and Jack cross together (2 minutes)\n    # Then, Eddie comes back (1 minute)\n    # Mary and Rose then cross together (10 minutes)\n    # Jack comes back (2 minutes) \n    # Finally, Eddie and Jack cross again (2 minutes)\n    \n    crossing_time = Eddie + Jack + Eddie + Mary + Jack \n    \n    return crossing_time\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's baking speed (loaves per minute)\n    pip_speed = 5 / 20\n    # Bud's baking speed (loaves per minute)\n    bud_speed = 3 / 15\n\n    # Total baking time\n    total_time = 40\n\n    # Total loaves baked\n    total_loaves = (pip_speed + bud_speed) * total_time\n\n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    original_time = 8\n    increased_rate_time = original_time - 2\n    extra_pages_per_day = 2\n\n    # Let the original number of pages per day be x\n    # Then total pages = original_time * x\n    # Since she can finish 2 days earlier by writing 2 extra pages per day:\n    # total pages = increased_rate_time * (x + extra_pages_per_day)\n\n    # Set the two expressions for total pages equal to each other\n    # original_time * x = increased_rate_time * (x + extra_pages_per_day)\n    # Solve for x\n    x = (increased_rate_time * extra_pages_per_day) / (original_time - increased_rate_time)\n\n    # Now we can find the total pages\n    total_pages = original_time * x\n\n    return total_pages\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # He could take all 10 red socks and all 10 black socks out, and not have a white pair yet.\n    # The next two socks he takes out must then be white to ensure he has a white pair.\n    max_socks_for_white_pair = 10 + 10 + 2\n    return max_socks_for_white_pair\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expr = 12*a/4 + 2*a*5\n    simplified_expr = simplify(expr)\n    return simplified_expr\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Assign a dummy variable for 'd' to represent it in expression\n    ans = (6 * d) + (5 * d) - d\n    ans = ans.subs(d, 1)  # Substitute dummy variable back to get the expression for any 'd'\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Starting with the increased value after the first year\n    increased_value_after_first_year = 11000\n    \n    # The original price can be computed as the value before the 10% increase\n    original_price = increased_value_after_first_year / 1.10\n    \n    # Now calculating the decreased value after the second year\n    # which is a reduction of 10%\n    decreased_value_after_second_year = original_price * 0.90\n    \n    # Finally, calculating the profit or loss by subtracting the original price\n    # from the value after the second year\n    profit_or_loss = decreased_value_after_second_year - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jemma_number = symbols('jemma_number')\n    equation = Eq((jemma_number + 3) * 5, 35)\n\n    solved = solve(equation, jemma_number)\n\n    return solved[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 5)  # 5th May\n    end_date = datetime(2023, 6, 7)    # 7th June\n    delta = timedelta(days=1)\n    sundays_count = 0\n\n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        start_date += delta\n\n    return sundays_count\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the total number of cookies\n    total_cookies = symbols('total_cookies')\n    \n    # Create the equation based on the problem\n    equation = Eq((3/8 + 1/6) * total_cookies, total_cookies - 33)\n    \n    # Solve the equation for the total number of cookies\n    solution = solve(equation, total_cookies)\n    \n    # Get the result\n    return solution[0]\n\n# Call the function and store the result in 'ans'\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for num in range(1, 10):\n        sequence.extend([num] * (num + 2))\n\n    median_pos = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        ans = (sequence[median_pos - 1] + sequence[median_pos]) / 2\n    else:\n        ans = sequence[median_pos]\n\n    return ans\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n\n    ans = total_litres // bucket_capacity\n\n    return ans\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r and w represent the initial number of red and white balls respectively\n    r, w, p, b = symbols('r w p b', integer=True)\n\n    # Initial ratio of red to white balls is 3:2\n    initial_ratio = Eq(r / w, 3 / 2)\n\n    # After Pip adds red balls, the ratio becomes 5:3\n    pip_ratio = Eq((r + p) / w, 5 / 3)\n\n    # After Bud adds white balls, the ratio becomes 5:4 and Bud adds 100 more balls than Pip\n    bud_ratio = Eq((r + p) / (w + b), 5 / 4)\n    balls_difference = Eq(b, p + 100)\n\n    # Solving the system of equations gives us the initial number of red and white balls\n    solutions = solve((initial_ratio, pip_ratio, bud_ratio, balls_difference), (r, w, p, b))\n\n    # Return the initial number of white balls\n    return solutions[w]\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Initial investment\n    initial_buy = 10\n    \n    # Sold, earned 20\n    first_sell = 20\n    \n    # Bought again at 30\n    second_buy = 30\n    \n    # Sold, earned 40\n    second_sell = 40\n    \n    # Total earnings calculation\n    total_earnings = (first_sell - initial_buy) + (second_sell - second_buy)\n    \n    return total_earnings\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # The rate of work done by 4 companies in 5 days\n    rate_4_companies = 900 / 5\n    \n    # The daily rate of work for each company \n    daily_rate_per_company = rate_4_companies / 4\n    \n    # The combined daily rate of work for 6 companies\n    daily_rate_6_companies = daily_rate_per_company * 6\n    \n    # The total days needed for 6 companies to build a 5400m expressway\n    total_days = 5400 / daily_rate_6_companies\n    \n    return total_days\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    ticket_price = adam_spent / adam_tickets\n    claire_tickets = claire_spent / ticket_price\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_number = 10\n    last_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_term - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    # cookies / brownies = 4/3\n    # after giving 6 brownies away: cookies / (brownies - 6) = 12/7\n    \n    cookies = Symbol('cookies')\n    brownies = Symbol('brownies')\n    \n    # Set up the equations based on the ratio before and after giving brownies away\n    equation1 = (4 / 3) * (brownies) - cookies\n    equation2 = (12 / 7) * (brownies - 6) - cookies\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, brownies))\n    total_cookies_brownies = solutions[cookies] + solutions[brownies]\n    \n    return total_cookies_brownies\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # each pair has 2 shoes, so 9 pairs have 18 shoes\n    time_per_shoe = 2  # time to clean one shoe is 2 minutes\n    cobblers = 2  # we have 2 cobblers working concurrently\n\n    # Since they are working concurrently, we divide the total work by the number of cobblers\n    time_to_clean_all_shoes = (total_shoes * time_per_shoe) / cobblers\n\n    return time_to_clean_all_shoes\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = -(-total_cookies // cookies_per_packet) # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    total_score = 168\n    correct_marks = 4\n    wrong_marks = -1\n\n    for correct in range(attempted + 1):\n        wrong = attempted - correct\n        score = (correct * correct_marks) + (wrong * wrong_marks)\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    players = 6\n    handshakes = comb(players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    total_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n    player_two_sum = total_sum - 23\n    remaining_cards = set(range(1, 9))\n    \n    # Enumerate all possible combinations for player one, and find player two's max single card\n    max_card_for_player_two = 0\n    for a in range(1, 9):\n        for b in range(a+1, 9):\n            for c in range(b+1, 9):\n                for d in range(c+1, 9):\n                    if a+b+c+d == 23:\n                        player_one_cards = {a, b, c, d}\n                        player_two_cards = remaining_cards - player_one_cards\n                        max_card_for_player_two = max(max_card_for_player_two, max(player_two_cards))\n    \n    return max_card_for_player_two\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    total_dumplings = 17 + 11  # Total dumplings made by Luna and Lucy\n    dumplings_each = total_dumplings // 2  # Dumplings each should have to be equal\n    \n    dumplings_to_give = 17 - dumplings_each  # Dumplings Luna needs to give to Lucy\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds = 24\n    number = (two_thirds * 3) / 2\n    three_quarters = (number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    return 543 - 284\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:  # A number shouldn't start with 0\n            continue\n\n        CBCD = 1000 * C + 100 * B + 10 * C + D\n        CDBC = 1000 * C + 100 * D + 10 * B + C\n        BDEC = 1000 * B + 100 * D + 10 * E + C\n        \n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # find the least common multiple of the pack sizes\n    min_pack_lcm = lcm(6, 8, 9, 15)\n\n    # find the minimum multiple of the least common multiple that is greater than 1000\n    num_packs = (1000 // min_pack_lcm) + (1000 % min_pack_lcm > 0)\n\n    # total number of markers purchased\n    min_markers = num_packs * min_pack_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Total letters in 'CHALLENGE' - three vowels (A, E, E) = 6 consonants\n    consonants = 6\n\n    # Considering A, E and E as a single entity since they need to be together\n    entities = consonants + 1  # 6 consonants and 1 vowel entity\n\n    # Number of ways to arrange these entities\n    entity_arrangements = factorial(entities)\n\n    # Within the vowel entity, two E's are indistinguishable\n    vowel_permutations = factorial(3) // factorial(2)  # Division due to repetition of E\n\n    # Total arrangements = entity arrangements * vowel permutations\n    total_arrangements = entity_arrangements * vowel_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n    \n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_per_month = total_spent / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while n % 13 != 0:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_revenue = (4 * 5) + (1 * 10) + (5 * 12)\n    total_cakes = 4 + 1 + 5\n    average_price = total_revenue / total_cakes\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    # Start with the smallest valid divisor and quotient\n    divisor_quotient = 1\n\n    # Because the remainder is fixed, as soon as divisor*divisor + remainder is found,\n    # that's the smallest dividend\n    remainder = 7\n    \n    # Incrementally test all quotient/divisor pairs until the smallest dividend is found\n    while True:\n        dividend = divisor_quotient * divisor_quotient + remainder\n        if dividend >= 2 * divisor_quotient:\n            break\n        divisor_quotient += 1\n\n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    return 2 * 25 * 123\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    \n    value_after_2_years = initial_value * ((1 - depreciation_rate) ** 2)\n    \n    return value_after_2_years\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    row_number = 12\n\n    # Calculate the number of seats in the 12th row using the formula for the nth term of an arithmetic sequence: a + (n - 1)d\n    seats_in_12th_row = first_term + (row_number - 1) * difference\n\n    return seats_in_12th_row\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for cars, bikes, and lorries\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # Equations based on the problem statement\n    equation1 = Eq(cars, 4/3 * bikes)  # The number of cars is four-thirds of the number of bikes\n    equation2 = Eq(bikes, lorries + lorries/4)  # The number of bikes is one quarter more than the number of lorries\n\n    # Iterate through all possible combinations to find the correct one\n    for total in range(2, 100, 2):  # Total number is even and less than 100\n        equation3 = Eq(cars + bikes + lorries, total)  # Total number of cars, bikes, and lorries\n        \n        # Solve the system of equations\n        solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n        \n        # Check if solutions are valid (all vehicles counts are integers and non-negative)\n        if solutions and all(isinstance(v, int) and v >= 0 for v in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    average_pages_per_day = 20\n    days = total_pages / average_pages_per_day\n    return days\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    total_time_single_entrance = 16\n    \n    # Calculate the total number of visitors in 16 minutes\n    total_visitors = total_time_single_entrance * visitors_per_minute\n    \n    # Calculate the total check-in capacity per minute with 2 entrances\n    total_check_in_capacity = 2 * check_in_per_entrance\n    \n    # Calculate how long it will take for all visitors to check in with 2 entrances\n    time_with_two_entrances = total_visitors / total_check_in_capacity\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    # Initialize p to be the smallest possible cube number factor of 245p\n    # The prime factorization of 245 is 5 * 7^2. To make it a cube,\n    # we need 5^2 * 7. Hence p should be equal to 5^2 * 7 / 245.\n    \n    p = (5**2 * 7) / 245\n    return p\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = (6**2) - (4**2)\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    result = 2014 + 998\n    return result\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    money_after_book = initial_amount - 0.10 * initial_amount\n    money_after_dvd = money_after_book - 0.20 * money_after_book\n    return money_after_dvd\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_climbed = 0\n    day = 0\n    while total_climbed < 16:\n        day += 1\n        total_climbed += 5\n        if total_climbed >= 16:\n            break\n        total_climbed -= 3\n    return day\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    # reverse the addition\n    intermediate_number = final_number - added_number\n\n    # reverse the doubling\n    original_number = intermediate_number / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_score = sum(scores)\n    number_of_games = len(scores)\n    mean_score = total_score / number_of_games\n\n    return mean_score\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # 1/3 = 0.333... recurring pattern is 3\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # Set up the equations based on the given ratios and changes\n    equation1 = Eq(oranges / lemons, 3/5)\n    equation2 = Eq((oranges - 48) / lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2 # Chicken burger, beef burger\n    sides = 3   # French fries, meshed potato, broccoli\n    drinks = 5  # Sprite, Coke, Fanta, lemonade, iced tea\n\n    total_combos = burgers * sides * drinks\n\n    return total_combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Each student can choose 1, 2, or all 3 types of fruits\n    # For 1 type of fruit, there are 3 possibilities: apple, pear, or cherry\n    # For 2 types of fruit, there are 3 choose 2 possibilities: apple+pear, apple+cherry, pear+cherry\n    # For all 3 types of fruit, there is 1 possibility\n    # Total possibilities = 3 (for 1 type) + 3 (for 2 types) + 1 (for 3 types)\n    total_possibilities = 3 + 3 + 1\n    \n    # According to the Pigeonhole Principle, to ensure at least two students choose the same combination\n    # we need one more student than the number of possibilities\n    num_students = total_possibilities + 1\n\n    return num_students\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10\n    fraction_spent = 1/4\n    initial_amount = spent / fraction_spent\n    return initial_amount\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    class_a, class_b, class_c = 45, 75, 210\n    greatest_common_factor = gcd(gcd(class_a, class_b), class_c)\n\n    return greatest_common_factor\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    ducks_legs = 3 * 2  # Ducks have 2 legs each.\n    parrots_legs = 2 * 2  # Parrots also have 2 legs each.\n    rabbit_legs = 1 * 4  # Rabbits have 4 legs.\n    # Total legs excluding cats\n    legs_excluding_cats = ducks_legs + parrots_legs + rabbit_legs\n    # Total legs from cats\n    legs_from_cats = 32 - legs_excluding_cats\n    # Since cats have 4 legs each, divide the total cat legs by 4 to get the number of cats.\n    number_of_cats = legs_from_cats // 4\n\n    return number_of_cats\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Judy (j) and her father's (f) current ages\n    j, f = symbols('j f')\n    \n    # Judy's father is 33 years older than her: f = j + 33\n    equation1 = Eq(f, j + 33)\n\n    # The sum of their ages is 63: j + f = 63\n    equation2 = Eq(j + f, 63)\n    \n    # Solve the system of equations\n    ages_current = solve((equation1, equation2), (j, f))\n    \n    # Define a new symbol for the number of years ago (x) when father's age was four times Judy's age\n    x = symbols('x')\n    \n    # Father's age was four times Judy's age x years ago: (f - x) = 4 * (j - x)\n    equation3 = Eq(ages_current[f] - x, 4 * (ages_current[j] - x))\n    \n    # Solve for x\n    years_ago = solve(equation3, x)\n    \n    return years_ago[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def phi(a, b):\n    if a < 7:\n        return a + b * b\n    else:\n        return a - b\n\ndef solution():\n    inner_phi = phi(8, 3)\n    ans = phi(4, inner_phi)\n    return ans\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    lcm = 6 * 8 * 9 * 15 # Since 6, 8, 9 and 15 are not coprime, directly multiplying them does not give the LCM\n    lcm //= 2 # To correct the LCM, divide by the GCD of the overlapping prime factors (2 for 6 and 8)\n    lcm //= 3 # To correct the LCM, divide by the GCD of the overlapping prime factors (3 for 9 and 15)\n    \n    # Now find the smallest multiple of the LCM that is greater than or equal to 1000\n    min_markers = ((1000 + lcm - 1) // lcm) * lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of rooms\n    r = symbols('r')\n    \n    # Equation based on the students and rooms situation\n    # 4r + 40 = number of students\n    # 6r - 24 = number of students\n    # set both equal to each other to find the number of rooms\n    equation = Eq(4*r + 40, 6*r - 24)\n\n    # Solve for r (number of rooms)\n    rooms = solve(equation, r)\n\n    return rooms[0]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the current age of the younger brother, y as the current age of the older brother.\n    x, y = symbols('x y')\n    \n    # When the older brother was x years old, the younger brother was 12 years old.\n    equation1 = Eq(y - (x - 12), x)\n    \n    # When the younger brother becomes y years old, the older brother will be 27 years old.\n    equation2 = Eq(x + (y - x), 27)\n    \n    # We solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_fraction\n    sweets_left_over = total_sweets - sweets_eaten\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n    years_until_jane_is_15 = jane_target_age - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_is_15\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given terms and their positions\n    term10 = 23\n    position10 = 10\n    term15 = 38\n    position15 = 15\n\n    # Find the common difference\n    common_difference = (term15 - term10) / (position15 - position10)\n\n    # Find the first term\n    first_term = term10 - (position10 - 1) * common_difference\n\n    # Calculate the 102nd term\n    position102 = 102\n    term102 = first_term + (position102 - 1) * common_difference\n\n    return term102\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = (7 + 3) * 11\n    part2 = 7 + (3 * 11)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # If X and Y can fill the tank together in 6 minutes,\n    # their combined rate is 1 tank / 6 minutes.\n    combined_rate = 1 / 6\n\n    # Tap X alone will take 10 minutes to fill up the tank,\n    # so its rate is 1 tank / 10 minutes.\n    rate_x = 1 / 10\n\n    # Using the inclusion-exclusion principle to find the rate for Tap Y,\n    # rate_y = combined_rate - rate_x\n    rate_y = combined_rate - rate_x\n\n    # To find the time for Tap Y alone to fill up the tank,\n    # we take the reciprocal of rate_y.\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the cost price\n    c = symbols('c')\n    \n    # Marked price is 20% above cost price => marked_price = c + 0.2 * c\n    marked_price = c + 0.2 * c\n    \n    # Sold at 80% of the selling (marked) price => selling_price = 0.8 * marked_price\n    selling_price = 0.8 * marked_price\n    \n    # Loss is $40 => cost price - selling price = $40\n    loss = Eq(c - selling_price, 40)\n\n    # Solve for the cost price 'c'\n    cost_price = solve(loss, c)[0]\n\n    return cost_price\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    equation1 = Eq(xuanrui + yaokuan, 708)\n    equation2 = Eq(xuanrui - 532, yaokuan - (3/7) * yaokuan)\n\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_percent = 12\n    discount_amount = usual_price * (discount_percent / 100)\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10  # Those who like only apples\n    only_strawberries = 30 - 10  # Those who like only strawberries\n    both = 10  # Those who like both\n    neither = 5  # Those who like neither\n\n    total_students = only_apples + only_strawberries + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    # Let x be the number of correct answers and 10-x be the number of wrong answers/skipped questions\n    # Correct answers give 6 points each and wrong answers lose 2 points each\n    # Total points for the correct answers are 6x, for the wrong answers are -2(10 - x)\n    # The equation for the total score is 6x - 2(10 - x) = 44\n\n    # Solve for x\n    x = (44 + 2 * 10) / (6 + 2)\n\n    return int(x)\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    # Initialize the sum\n    factorial_sum = 0\n    \n    # Calculate factorial for each number and add to sum\n    factorial = 1\n    for i in range(1, 9):\n        factorial *= i\n        factorial_sum += factorial\n    \n    # Get the last two digits\n    ans = factorial_sum % 100\n    \n    return ans\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    return 3/10 + 1/100 + 7/1000\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Define the total volume of sugar water and the concentration in each cup\n    volume_cup_A = 300  # in mL\n    volume_cup_B = 300  # in mL\n    concentration_cup_A = 20  # in percentage\n    concentration_cup_B = 30  # in percentage\n\n    # Calculate the amount of sugar in each cup\n    sugar_cup_A = (concentration_cup_A / 100) * volume_cup_A\n    sugar_cup_B = (concentration_cup_B / 100) * volume_cup_B\n\n    # Calculate the total amount of sugar\n    total_sugar = sugar_cup_A + sugar_cup_B\n\n    # Calculate the total volume of the mixture\n    total_volume = volume_cup_A + volume_cup_B\n\n    # Calculate the concentration of the mixture\n    concentration_mixture = (total_sugar / total_volume) * 100\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    total_marbles = 1442\n    ratio = 6\n\n    # Let's denote Ryan's marbles as 'x'\n    # Ahmad has 6x marbles, so total is x + 6x = 1442\n    # Which leads to 7x = 1442\n    # So Ryan has 1442 / 7 marbles\n    ryan_marbles = total_marbles / (ratio + 1)\n    ahmad_marbles = total_marbles - ryan_marbles\n    \n    # Ahmad must give enough marbles to Ryan so they both have the same amount\n    # Which leads to the equation: (Ahmad's marbles - m) = (Ryan's marbles + m)\n    # 2m = Ahmad's marbles - Ryan's marbles\n    # m = (Ahmad's marbles - Ryan's marbles) / 2\n\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return int(marbles_to_give)\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    exchange_rate = 2.5  # 1 pound is worth 2.5 dollars\n    pounds = dollars / exchange_rate\n    return pounds\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    gap_length = 1\n\n    remaining_length = total_length - head_length\n    total_carriage_length = carriage_length + gap_length\n    \n    number_of_carriages = remaining_length // total_carriage_length\n    \n    # Including the head of the train\n    ans = number_of_carriages + 1\n    return ans\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # ones place, for every 10 pages, 8 appears once (8, 18, 28, ..., 288)\n    ones = (288 // 10) + 1  # including 288\n\n    # tens place, for every 100 pages, 8 appears 10 times (80, 81, ..., 89)\n    tens = (288 // 100) * 10 + (288 % 100) - 7  # including from 280 to 288\n\n    # hundreds place, 8 appears 100 times if the book had 800 - 899 pages, which it doesn't\n    hundreds = 0  # there are no hundreds of pages with 8 in this book\n\n    return ones + tens + hundreds\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return float(solutions[pen])\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let's denote x as the number of $2-notes Theia had at first\n    # and y as the number of $10-notes.\n    # We know two things:\n    # 1. She has 95 notes in total: x + y = 95\n    # 2. When exchanging each $10-note for five $2-notes, she has 175 $2-notes in total:\n    #    This means x + 5y = 175\n    \n    # From the first equation, we can express y as y = 95 - x.\n    # Substituting y in the second equation gives:\n    # x + 5 * (95 - x) = 175\n    # Which simplifies to:\n    # 5 * 95 - 4x = 175\n    # 475 - 4x = 175\n    # 4x = 475 - 175\n    # 4x = 300\n    # x = 300 / 4\n    x = 300 // 4\n    return x\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    y = 0\n    while True:\n        x = (25 * y + 8) / 24\n        if x.is_integer():\n            return int(x)\n        y += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for all shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Given equations\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    # Assign solution for the variable triangle\n    triangle_solution = solutions[triangle]\n    \n    # Calculate how many triangles are equal to a diamond\n    diamond_in_triangles = solutions[diamond] / triangle_solution\n\n    return diamond_in_triangles\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price - original_price * discount_rate\n    final_price = discounted_price + discounted_price * increase_rate\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    cost_per_kg_bag1 = 5 / 2.5\n    cost_per_kg_bag2 = 7.70 / 4\n    \n    return '2.5kg bag' if cost_per_kg_bag1 < cost_per_kg_bag2 else '4kg bag'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1 / i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    # Let x be the number of questions answered correctly, y be the number of questions answered wrongly\n    # Since the total number of questions is 50, we have x + y = 50\n    # Points for correct answers is 2 * x, points lost for wrong answers is -1 * y\n    # Total score is the sum of points for correct answers and points lost, which is 82, hence 2 * x - y = 82\n    # Now we solve the system of equations:\n    # x + y = 50\n    # 2x - y = 82\n    \n    # From the second equation: y = 2x - 82\n    # Substitute y in the first equation:\n    # x + 2x - 82 = 50\n    # 3x = 50 + 82\n    # 3x = 132\n    # x = 132 / 3\n    x = 132 // 3\n    \n    # Now we check if she answered 32 questions correctly:\n    statement_correct = (x == 32)\n    \n    # If her statement is not correct, return the actual number of questions answered correctly\n    return x if not statement_correct else \"Her statement is correct.\"\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    full_jar_diff = 350 - 250\n    full_jar_mass = full_jar_diff * 4\n    empty_jar_mass = 250 - full_jar_mass / 4\n    return empty_jar_mass\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages = pages_monday + pages_tuesday\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    expression_result = 365 - (19 + 65)\n    return expression_result\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    tree_count_each_side = (road_length // interval) + 1\n    total_tree_count = tree_count_each_side * 2\n\n    return total_tree_count\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    bus_count = 7\n    distance_between_buses = 2\n\n    total_length = (bus_count * bus_length) + (distance_between_buses * (bus_count - 1))\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    number = (2021 + 25) * 4\n    correct_answer = number * 4 + 25\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n    num_terms = (last_term - first_term) // difference + 1\n    \n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(0, 10):\n        number = int(f'2{E}3{E}2')\n        if number % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for x and y\n    x, y = symbols('x y')\n\n    # Given proportion equation x:5 = y:3\n    equation = Eq(x/5, y/3)\n\n    # Solve the equation for y when x=5\n    y_value = solve(equation.subs(x, 5), y)\n\n    return ('directly', y_value[0])\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost price\n    discount = selling_price * 0.10    # 10% Christmas discount\n    final_selling_price = selling_price - discount\n    profit = final_selling_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 1\n    while True:\n        original_count = m**2 + 5\n        new_count = original_count + 18\n        n = int(new_count**0.5)\n        if n**2 == new_count:\n            break\n        m += 1\n    return original_count\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    ans = 9 + 11 + 8 + 12 + 7 + 13 + 6 + 14 + 5 + 14\n    return ans\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let's assume that the first number is a and the second number is b.\n    # Then the sequence looks like this: a, b, a+b, 2a+3b, 3a+5b, 5a+8b, ...\n    # We know that the fourth number is 6 (2a+3b = 6) and the sixth number is 15 (5a+8b = 15).\n    # We need to solve for a and b.\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(2*a + 3*b, 6)\n    equation2 = Eq(5*a + 8*b, 15)\n\n    # Solve for a and b\n    solutions = solve((equation1, equation2), (a, b))\n    a = solutions[a]\n    b = solutions[b]\n\n    # Now that we have a and b, the seventh number in the sequence will be 5 times the first number (a)\n    # plus 8 times the second number (b), which is the sum of the fifth and sixth numbers. \n    # So the seventh number is 8a+13b\n    seventh = 8*a + 13*b\n    return seventh\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "from math import gcd\n\ndef solution():\n    students_A = 12\n    students_B = 15\n    students_C = 18\n\n    gcf_AB = gcd(students_A, students_B)\n    gcf_ABC = gcd(gcf_AB, students_C)\n\n    return gcf_ABC\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    number_of_numbers = 3\n    original_sum = original_average * number_of_numbers\n\n    new_average = 22\n    new_sum = new_average * number_of_numbers\n    \n    new_number = 16  # The changed number\n    difference = original_sum - new_sum\n    original_number = new_number + difference\n    \n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    for correct in range(25):\n        incorrect = 24 - correct\n        score = (correct * 4) - (incorrect * 2)\n        if score == 66:\n            return correct\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of girls be 'g' and the number of boys be 'b'\n    g, b = symbols('g b')\n\n    # From the question we know that g + b = 36 (Total number of students)\n    equation1 = Eq(g + b, 36)\n\n    # Average calculation for the entire class (Total score of girls + Total score of boys = 36 * 89)\n    equation2 = Eq(g * 88 + b * 91, 36 * 89)\n\n    # Solve the system of equations for g and b\n    solution = solve((equation1, equation2), (g, b))\n\n    # We want to find the number of girls\n    return solution[g]\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # Convert 5 p.m. to minutes\n    badminton_duration = 45  # Badminton playing duration in minutes\n    jogging_duration = 30  # Jogging duration in minutes\n\n    # Calculate the total duration of activities\n    total_duration = badminton_duration + jogging_duration\n\n    # Calculate the end time in minutes\n    end_time_minutes = start_time + total_duration\n\n    # Convert the end time back to hours and minutes\n    end_time_hours = end_time_minutes // 60\n    end_time_remaining_minutes = end_time_minutes % 60\n\n    # Since the time is expected to be in 12-hour format\n    if end_time_hours > 12:\n        end_time_hours -= 12\n\n    return (end_time_hours, end_time_remaining_minutes)\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's sugar amount\n    david_sugar = 800 * 0.05\n    # Eugene's sugar amount\n    eugene_sugar = 200 * 0.30\n    # Felix's sugar amount\n    felix_sugar = 300 * 0.10\n    # Total sugar amount\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    \n    # Total solution amount\n    total_solution = 800 + 200 + 300\n    # Concentration of the resulting solution\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    blue_pens = 4 * 9  # 4 times the number of black pens\n    green_pens = 2 * 9 # 2 times the number of black pens\n    black_pens = 9     # Given number of black pens\n\n    total_pens = blue_pens + green_pens + black_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    \n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    total_fruit_juice = (20 * 0.35) + (30 * 0.60)\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    \n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n\n    return num_handshakes\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "from itertools import permutations\n\ndef solution():\n    vertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    ans = 0\n    for perm in permutations(vertices, 6):\n        graph = {v: set() for v in vertices}\n        graph[perm[0]].add(perm[1])\n        graph[perm[1]].add(perm[0])\n\n        graph[perm[2]].add(perm[3])\n        graph[perm[3]].add(perm[2])\n\n        graph[perm[4]].add(perm[5])\n        graph[perm[5]].add(perm[4])\n\n        connected = True\n        for v in vertices:\n            if len(graph[v]) == 0:\n                connected = False\n                break\n            if connected:\n                visited = set()\n\n                def dfs(v):\n                    if v in visited:\n                        return\n                    visited.add(v)\n                    for neigh in graph[v]:\n                        if neigh not in visited:\n                            dfs(neigh)\n\n                dfs(perm[0])  # start DFS from the first vertex in the permutation\n                if len(visited) == 6:\n                    ans += 1\n\n    # 48 permutations are counted multiple times since we can \n    # rotate the shape in space to achieve the same configurations\n    ans = ans // 48  \n    return ans\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n\n    num_boxes = (cookies + box_capacity - 1) // box_capacity\n\n    return num_boxes\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # smallest 3-digit number with 7 as one of the digits is 107\n    # check if it satisfies the condition that the difference between any two of the digits is 4 or less\n    # since 107 does not satisfy the condition (7-0=7 which is more than 4), we check the next number which is 117\n    # 117 satisfies the condition, so it is the smallest 3-digit number where one of the digits is 7\n    # and the difference between any two of the digits is 4 or less\n    return 117\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # With 4 players, we need to eliminate 3 players to have a winner. \n    # Therefore, we need at least 3 games to determine the winner.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = sum(str(i).count('2') for i in range(1, 101))\n    return count\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of badges she made at first\n    x = symbols('x')\n\n    # Sold 5/7 of the badges on the first day, so she's got 2/7 left\n    # Sold 1/3 of the remaining (which is 2/7 of x) on the second day, so 2/3 of 2/7 of x are left\n    # Then she made an additional 354 badges\n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(((2/7) * (2/3) * x) + 354, 3 * x)\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Mapping the letters in \"Angel\" to the numbers 0141705021\n    angel_to_number = {'A': 0, 'N': 1, 'G': 4, 'E': 7, 'L': 5}\n    devil_to_number = {'D': 0, 'E': 4, 'V': 0, 'I': 5, 'L': 2}\n\n    # The password \"Devil\" trying to map to the numbers 4005220912\n    attempted_password = \"4005220912\"\n    mapped_password = \"\".join(str(devil_to_number[letter]) for letter in \"DEVIL\")\n\n    # Check if Andy can unlock the treasure chest with the attempted password\n    if attempted_password == mapped_password:\n        return (True, \"Andy can unlock the treasure chest.\")\n    else:\n        return (False, \"\".join(str(angel_to_number[letter]) for letter in \"DEVIL\"))\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    produced_by_A = total_exhibits - not_produced_by_A\n    produced_by_B = total_exhibits - not_produced_by_B\n    \n    both_produced_by_A_and_B = produced_by_A + produced_by_B - total_exhibits\n    \n    return both_produced_by_A_and_B\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each colour, the magician could pick all balls of one colour\n    # and all but one of the second colour. Whatever ball comes next must be of the third colour.\n    \n    # Pick all 8 blue balls, all 10 red balls, and 1 green ball to guarantee one of each.\n    minimum_picks = 8 + 10 + 1\n    \n    return minimum_picks\n\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    \n    # Use the Chinese Remainder Theorem to solve the system of congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Find the smallest number in the range that satisfies the congruences\n    while number < 200 or number >= 300:\n        number += 6 * 7 * 11  # LCM of the moduli, to get to the next solution\n    \n    return number\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    skirt, blouse = symbols('skirt blouse')\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n    \n    solutions = solve((equation1, equation2), (skirt, blouse))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Since A and B are primes and we know that 8A-3B is a multiple of 3,\n    # and considering that 3B is already a multiple of 3, then 8A also must be a multiple of 3.\n    # For A to make 8A a multiple of 3, A itself must be a multiple of 3.\n    # The only prime number that is a multiple of 3 is 3 itself.\n    # Therefore, A must be 3.\n    return 3\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    percentage_increase = 10\n    percentage_decrease = -10\n\n    # Calculate original value before increase\n    original_value = last_year_value / (1 + percentage_increase / 100)\n    \n    # Calculate the value after decrease\n    value_after_decrease = last_year_value * (1 + percentage_decrease / 100)\n    \n    # Calculate profit or loss\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "def solution():\n    from math import factorial\n\n    # Calculate different ways to arrange the colors of the flowers\n    ways_to_arrange_colors = factorial(3)\n\n    # Calculate different ways to arrange the flowers within their type\n    ways_to_arrange_roses = factorial(3)\n    ways_to_arrange_jasmines = factorial(4)\n\n    # Calculate total ways to arrange the flowers\n    # Multiply the ways to arrange the colors of the flowers \n    # with the ways to arrange flowers within their type\n    # and since there is only 1 daisy, it's factorial(1) which is 1\n\n    total_ways = ways_to_arrange_colors * ways_to_arrange_roses * ways_to_arrange_jasmines\n\n    return total_ways\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # The maximum count of different positive integers adding up to\n    # a given number is achieved by taking a continuous sequence of\n    # numbers starting from 1\n    sum = 0\n    count = 0\n    i = 1\n    while sum + i <= 60:\n        sum += i\n        count += 1\n        i += 1\n    return count\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 100):\n        if pies % 5 == 3 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    import math\n\n    # Calculate the factorial of 6 and 8\n    factorial_6 = math.factorial(6)\n    factorial_8 = math.factorial(8)\n\n    # Calculate the greatest common divisor of factorial(6) and factorial(8)\n    gcd = math.gcd(factorial_6, factorial_8)\n\n    # Calculate the number of factors for the greatest common divisor\n    def count_factors(n):\n        factors_count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n / i == i:  # If the divisor is a square root, count it once\n                    factors_count += 1\n                else:  # Otherwise, count both divisors\n                    factors_count += 2\n        return factors_count\n\n    # Calculate the number of possible values for m\n    ans = count_factors(gcd)\n    return ans\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml/min\n    minutes_in_hour = 60\n    ml_to_liters = 1 / 1000\n\n    leaked_volume_in_hour = leak_rate_per_minute * minutes_in_hour * ml_to_liters\n\n    return leaked_volume_in_hour\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        s, e, x = p\n        if s == 0:  # 'S' cannot be 0 as it is a three-digit number\n            continue\n        see = (s * 100) + (e * 10) + e\n        eex = (e * 100) + (e * 10) + x\n        if see + eex == (s * 100) + (e * 10) + x:\n            return see\n    return None\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    age = 0\n    while True:\n        age += 1\n        if (age % 2 == 1) and (age % 3 == 1) and (age % 4 == 1) and (age % 6 == 1) and (age % 7 == 0):\n            break\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n\n    mark_height = james_height + difference\n\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # We have 3 colors, so to ensure we get a pair of any color,\n    # we need to pick one more than 3 times the number of colors.\n    return (3 * 3) + 1\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    for x in range(10):\n        if (10 - x) + x * 3 == 16:\n            return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario using the pigeonhole principle\n    # We take one apple of each color (red and green)\n    # To ensure we get 2 apples of the same colour, we need to take one more apple\n    # This will guarantee that at least 2 apples are of the same colour\n    apples_taken = 2 + 1\n    return apples_taken\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000\n    ans = number - 20\n    return ans\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    # Add the whole numbers and the decimal parts separately\n    whole_part_sum = 6 + 8 + 9 - 2\n    decimal_part_sum = 0.3 + 0.7 + 0.6 - 0.6\n    \n    # Combine the sums to get the final answer\n    ans = whole_part_sum + decimal_part_sum\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    volume_per_pail = 4  # in liters\n    water_left = 7  # in liters\n\n    original_volume = (pails_filled * volume_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    total = 0\n    for i in range(1, 47, 2):\n        total += (i + 1) - i\n    return total\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    # Expanding the equation\n    expanded = 5 * (6 * c - 1)\n    \n    # Equating to -35\n    equation = expanded + 35\n\n    # Solving for c\n    c = equation / 30\n\n    return c\n\nc = symbols('c')\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    n = 2010\n    A = 1\n    for i in range(1, n + 1):\n        A *= i\n        while A % 10 == 0:\n            A //= 10\n        A %= 1000000  # to prevent A from becoming too large\n    return A % 10\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Calculate the total number of elements in the sequence\n    total_elements = sum([(i + 1) * i for i in range(1, 9)])\n    \n    # The median will be in the middle if the number of elements is odd\n    # Since all numbers are repeated with even frequency except the last 8\n    # if total_elements is even, then median index set is in the half\n    if total_elements % 2 == 0:\n        median_indices = (total_elements // 2, total_elements // 2 + 1)\n    else:  # if total_elements is odd, take the middle one\n        median_indices = ((total_elements + 1) // 2, )\n    \n    # Find the value that corresponds to these indices in our sequence\n    count = 0\n    for i in range(1, 9):\n        count += i * (i + 1)\n        if count >= median_indices[0]:\n            median_value = i\n            break\n            \n    return median_value\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # Since 243 is 3^5, equate the powers to find x, y, z\n    # x^20 = 3^a, y^15 = 3^b, z^5 = 3^c and a + b + c = 5 (because 243 = 3^5)\n    # Simplify a/20 + b/15 + c/5 = 1 to find the exponents for x, y, z\n\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for a, b, c\n    a, b, c = symbols('a b c')\n\n    # Create equations based on the power relationship with 3\n    equation1 = Eq(a / 20 + b / 15 + c / 5, 1)\n\n    # Solve the equations to find the values of a, b, c\n    solutions = solve((equation1,), (a, b, c))\n    \n    # Find the first solution which gives the values for a, b, c\n    for sol in solutions:\n        a_val = sol[a]\n        b_val = sol[b]\n        c_val = sol[c]\n        if a_val % 20 == 0 and b_val % 15 == 0 and c_val % 5 == 0:\n            break\n\n    # Calculate the value of x^8 * y^6 * z^2 using the exponents\n    ans = (3 ** (a_val / 20)) ** 8 * (3 ** (b_val / 15)) ** 6 * (3 ** (c_val / 5)) ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n    total_height_of_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_two_players = total_height_of_two_players / 2\n\n    return average_height_of_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    per_day_paving = 50\n    days_needed = total_length / per_day_paving\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # Since x is the number that makes 42*x a perfect square of 42,\n    # and the square of 42 is 42^2, x must be 42 because 42*42 is 42^2.\n    x = 42\n\n    # y is the number that makes 42*y's prime factorization have all exponents equal to 1.\n    # Factorization of 42 is 2 * 3 * 7.\n    # To have all exponents equal to 1 when multiplied by y, y must be 1\n    # since multiplying by any other number would increase the exponent of that prime factor.\n    y = 1\n\n    # The sum of x and y is what is asked.\n    return x + y\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    initial_marbles = symbols('initial_marbles')\n    equation = Eq(initial_marbles - (5/12)*initial_marbles - 30 - 26, 35)\n    sol = solve(equation, initial_marbles)\n    return sol[0]\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    # One cattle eats 10 kg of fodder in one day\n    fodder_per_cattle_per_day = 10\n    \n    # Number of cattles\n    num_cattles = 8\n    \n    # Number of days\n    num_days = 4\n    \n    # Total fodder consumed by all cattle over the given period\n    total_fodder = fodder_per_cattle_per_day * num_cattles * num_days\n    \n    return total_fodder\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # in grams\n    concentration = 0.22  # 22%\n    amount_sugar = total_weight * concentration\n    return amount_sugar\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        for digit in str(number):\n            total += int(digit)\n    return total\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of sweets Jess has and y be the number Jill has\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five Jess has originally\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Total sweets is the sum of Jess's and Jill's sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    money_given = total_money / 4\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) * 3 == int(str(num) + \"1\"):\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import date\n    \n    today = date.today()\n    birth_year = today.year - 38  # Subtracting the years directly\n    birth_month = today.month - 6  # Calculating the month difference\n\n    if birth_month < 1:  # If the month goes below January, adjust the year\n        birth_year -= 1\n        birth_month += 12  # Adding 12 months to go back one year\n\n    return birth_year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum([i**4 for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the total amount of money Hanson had originally.\n    original_money = symbols('original_money')\n    \n    # After spending 1/4 of his money and an additional $3 on CDs, Hanson is left with (3/4)*original_money - 3.\n    after_CDs = (3/4) * original_money - 3\n    \n    # After spending 3/5 of the remaining money and an additional $6 on batteries, Hanson is left with $24.\n    # So (2/5)*after_CDs - 6 = 24.\n    final_eq = Eq((2/5) * after_CDs - 6, 24)\n    \n    # Solve for the original amount of money.\n    solutions = solve(final_eq, original_money)\n    \n    # Return the solution.\n    return solutions[0]\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = 1848\n    money_ratio_pies_to_cakes = 15 / 7\n    pie_to_cake_count_ratio = 4 / 1\n    cake_to_pie_price_diff = 13\n\n    # Let the cost of each pie be 'p' and each cake be 'c'.\n    p, c = symbols('p c')\n    \n    # Since the ratio of the number of pies to cakes sold is 4:1, let's say 4x pies and x cakes were sold.\n    # Then total number of pies and cakes sold times their respective prices should equal the total money collected:\n    # 4x*p + x*c = total_money\n\n    # From the ratio of money collected from selling the pies to cakes (15:7), we can set up the equation:\n    # 15/7 = (4x*p) / (x*c) => 15*c = 7*4*p => 15c = 28p\n    \n    # Also, the problem states that a cake costs $13 more than a pie: c = p + 13\n\n    equations = (Eq(4*p + c, total_money / (money_ratio_pies_to_cakes + 1)), # Equation based on the total_money collected\n                 Eq(15*c, 28*p), # Equation based on the money ratio\n                 Eq(c, p + cake_to_pie_price_diff)) # Equation based on the price difference\n\n    # Solve the system of equations\n    solutions = solve(equations, (p, c))\n\n    # Once we have the price for pies (p) and cakes (c), we can calculate number of cakes sold: total_money_for_cakes / price_of_cake.\n    total_money_for_cakes = total_money / (1 + money_ratio_pies_to_cakes)\n    num_cakes = total_money_for_cakes / solutions[c]\n    \n    return int(num_cakes)\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[-1] in ['0', '6', '8'] and perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for number in range(40, 81):\n        if number % 4 == 0 and number % 7 == 0:\n            beads.append(number)\n    ans = beads[0]  # Since there should only be one answer between 40 and 80\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n    longest_piece_length = gcd(length1, length2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between the library and the school\n    d = symbols('d')\n\n    # Qiqi's speed is 60 m/min and she walks for t+4 minutes\n    # Weiling's speed is 72 m/min and she walks for t minutes, starting 2 minutes after Qiqi\n    equation = Eq((60 * (d / 60 + 2 + 4)), (72 * (d / 72 + 2)))\n\n    # Solve for d\n    distance = solve(equation, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Since we're only interested in the units digit, we only need to consider the last digit of 9^x\n    # The pattern for the units digit of powers of 9 is 9, 1, and repeats every 2 powers:\n    # 9^1 = 9 (units digit is 9)\n    # 9^2 = 81 (units digit is 1)\n    # 9^3 = 729 (units digit is 9)\n    # 9^4 = 6561(units digit is 1)\n    # ...\n    # Therefore, we can determine the units digit by looking at the exponent modulo 2\n\n    # For 9^2015, the units digit is 9 because 2015 modulo 2 is 1\n    units_digit_2015 = 9\n    \n    # For 9^2016, the units digit is 1 because 2016 modulo 2 is 0\n    units_digit_2016 = 1\n\n    # To find the units digit of the sum, we add these two units digits together\n    units_digit_sum = (units_digit_2015 + units_digit_2016) % 10\n\n    return units_digit_sum\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange 5 men.\n    men_ways = factorial(5)\n    \n    # There are 6 possible positions for the women to be placed (before and after each man, and at the ends)\n    women_positions = 6\n    \n    # Choose 3 positions from the 6 available for the women\n    women_position_ways = factorial(women_positions) // factorial(3) // factorial(women_positions - 3)\n    \n    # Calculate the number of ways to arrange the 3 women in the chosen positions\n    women_ways = factorial(3)\n    \n    # Thefinalansweristheproductofthenumberofwaystoarrangethemen,choosethepositionsforthewomen,andarrangethewomeninthosepositions.\n    ans = men_ways * women_position_ways * women_ways\n\n    return ans\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_time_minutes = (11 * 60) + 50 - 15  # Convert time to minutes and adjust for being slow\n    marc_time_minutes += 30  # Add half an hour's time\n\n    # George's watch is 7 minutes fast\n    george_time_minutes = marc_time_minutes + 7\n\n    # Convert time back to hours and minutes\n    george_hours = george_time_minutes // 60\n    george_minutes = george_time_minutes % 60\n\n    # Adjust if time goes past midday\n    if george_hours >= 12:\n        george_hours -= 12\n\n    return f\"{george_hours}:{george_minutes:02d} a.m.\"\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    total_amount = 540\n    \n    ans = (percentage / 100) * total_amount\n    \n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n\n    return h_value[0]\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    # The tax on the first 30000 dollars\n    tax_first_30000 = 0.01 * T * 30000\n    # The tax on the amount above 30000\n    tax_above_30000 = 0.01 * (T + 3) * (income - 30000)\n    # Total tax paid\n    total_tax = tax_first_30000 + tax_above_30000\n    # Equation for the noticed tax rate\n    noticed_tax_equation = Eq(total_tax, 0.01 * (T + 1) * income)\n    # Tax should not be negative, and annual income should be greater than 30000\n    solutions = solve((noticed_tax_equation, income > 30000), (T, income))\n\n    # Return the annual income\n    return solutions[income]\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    for correct in range(31):\n        wrong = 30 - correct\n        if correct * 5 - wrong * 1 == 90:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_a = 1 / 10\n    rate_b = 1 / 15\n\n    combined_rate = rate_a + rate_b\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Worst case scenario for 3 colors:\n    # Take all marbles of the majority color (12 red) and one of each of the others (1 blue + 1 yellow)\n    # This ensures that the next marble will be the fourth different color.\n    marbles_needed = 12 + 1 + 1  # 12 red, 1 blue, 1 yellow\n    # We need one more to ensure the fourth color\n    marbles_needed += 1  # 1 more for the fourth color (guaranteed to be different)\n\n    return marbles_needed\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(0, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n            \nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    distance_after_3_jumps = (3 * 3) - 2   # Total distance climbed after 3 jumps\n    jumps = 0     # Total number of jumps taken\n    distance_climbed = 0  # Total distance climbed\n\n    while distance_climbed < 31:\n        jumps += 3  # Increment jumps by 3\n        distance_climbed += distance_after_3_jumps  # Increment distance climbed\n        # Check if the distance climbed exceeds or reaches the tree height after an incomplete cycle\n        if distance_climbed < 31 and distance_climbed + 3 >= 31:\n            jumps += 1  # Add the last jump to reach or exceed the tree height\n            break\n\n    return jumps\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    last_term = 2  # The last positive term, since the sequence is decreasing\n\n    # Using the formula for n-th term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # and solving for n when a_n is the last term\n    num_terms = (last_term - first_term) / difference + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in '20190406')\n    modulus_nine = digits_sum % 9\n    if modulus_nine == 0:\n        return 0\n    else:\n        return 9 - modulus_nine\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate age difference between Gigi and Jenny\n    age_diff = 45 - 22  # Gigi's age - Jenny's age in their respective years\n\n    # Calculate the year when Gigi was 22\n    gigi_age_22_year = 2002 - (45 - 22)\n\n    # Calculate Jenny's age in the year Gigi was 22\n    jenny_age_when_gigi_22 = (1995 - gigi_age_22_year) + 22\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(1, 1000):  # arbitrary upper limit to search for such a number\n        num = i * 24  # Least common multiple of 3 and 8 is 24\n        if str(num)[-1] == '2':\n            return num\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(\"451\" + str(last_digit))\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the current year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 1+2/3)\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    ways = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_ship = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_ship + speed_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    cost_bracelets = 5 * 0.99\n    cost_cards = 2 * 1.98\n    total_cost = cost_bracelets + cost_cards\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    number_of_cupcakes = 3\n\n    cost_of_cupcakes = cupcake_cost * number_of_cupcakes\n    cost_of_drinks = total_cost - cost_of_cupcakes\n    cost_per_can = cost_of_drinks / 2\n\n    return cost_per_can\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for consistency\n    # 1 minute = 60 seconds\n    first_light = 30  # Half a minute\n    second_light = 45  # 0.75 minutes\n\n    # Find the least common multiple of the first two lights' times\n    # This will be the interval at which both the first two lights are green\n    common_interval = lcm(first_light, second_light)\n\n    # The third light must also turn green at this common interval, which is every 9 minutes\n    # Convert 9 minutes into seconds to match the units with common_interval\n    nine_minutes_in_seconds = 9 * 60\n\n    # Find the least common multiple of the common_interval and nine_minutes_in_seconds,\n    # which should be the shortest possible time for the third light that is at least 30 seconds\n    third_light = lcm(common_interval, nine_minutes_in_seconds)\n\n    # Return the shortest possible time for the third light in seconds\n    return third_light\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let x and y be the number of people in groups A and B respectively.\n    # Since 11 members from group A were combined with the remaining members of group B to fill another bus,\n    # we can write the equation for the total number of people that fits exactly in the buses as follows:\n    # x + y + 11 = 36n, where n is the number of bus loads (and it must be an integer).\n    \n    # We also know that each member of group A took a picture with every member of group B, so the number of\n    # pictures taken is x * y.\n    # Since each roll of film can take 36 pictures and we want to find the number of pictures the last roll\n    # can take, we have to modulus the total number of pictures with 36, as follows:\n    # (x * y) % 36 = number of pictures the last roll can take.\n    \n    # We can iterate possible values of n (number of bus loads) and check if (36n - 11) divides evenly into x and y\n    # where x and y are also integers.\n    for n in range(1, 1000):  # We assume a reasonable upper limit for the number of bus loads.\n        total_people = 36 * n - 11\n        for x in range(1, total_people):\n            y = total_people - x\n            if x * y % 36 == 0:  # Check if the product divided by 36 leaves no remainder.\n                return 36 - (x * y % 36)  # Return the number of extra pictures the last roll can take.\n    \n    # If no solution found within the reasonable limit, return 0.\n    return 0\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    # Since the second differences are constant, it's a quadratic pattern\n    # Increase the last difference by the constant second difference to find the next difference\n    next_difference = differences[-1] + second_differences[0]\n    next_term = 50 + next_difference  # last term + calculated next difference\n    \n    return next_term\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let's denote the number of correctly answered questions as x\n    # and the number of incorrectly answered questions as y.\n    # We then have two equations:\n    # 1. x + y = 20 (because there are 20 questions in total)\n    # 2. 5x - 2y = 51 (because she gains 5 points for each correct answer and loses 2 for each wrong one)\n    # We can solve these two equations to find the value of x.\n\n    # Total number of questions\n    total_questions = 20\n\n    # Final score\n    final_score = 51\n\n    # Points for the correct answer\n    correct_points = 5\n\n    # Points lost for the wrong answer\n    wrong_points = -2\n\n    # Loop through possible correct answers\n    for correct in range(total_questions + 1):\n        # The number of wrong answers is total minus correct\n        wrong = total_questions - correct\n\n        # Calculate the score\n        score = correct * correct_points + wrong * wrong_points\n\n        # If the score matches the final score, we found the number of correct questions\n        if score == final_score:\n            return correct\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    known_numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    mean = 5\n    \n    # Find the sum of known numbers\n    sum_of_known_numbers = sum(known_numbers)\n    \n    # Calculate the total sum of all numbers using the mean\n    total_sum = mean * total_numbers\n    \n    # The missing number is the difference between total sum and sum of known numbers\n    missing_number = total_sum - sum_of_known_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 4 individuals, labeled A, B, C, D\n    # After A makes the first pass, there are 3 choices (B, C, D)\n    # After the second pass, excluding the person who has just passed, there are 2 remaining choices\n    # After the third pass, the ball must return to A, so there is only 1 choice\n    # Multiply the number of choices together to get the total combinations\n\n    choices_after_first_pass = 3\n    choices_after_second_pass = 2\n    choices_after_third_pass = 1  # To make sure the ball returns to A\n\n    total_methods = choices_after_first_pass * choices_after_second_pass * choices_after_third_pass\n\n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Daniel's and Ming's current ages\n    daniel_age, ming_age = symbols('daniel_age ming_age')\n    \n    # Create two equations based on the problem description\n    equation1 = Eq(daniel_age, 4 * ming_age)  # Daniel is four times older than Ming\n    equation2 = Eq(daniel_age + 6 + ming_age + 6, 62)  # Sum of their ages in 6 years is 62\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel_age, ming_age))\n    \n    return solutions[daniel_age]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_sheet_g = 25\n    number_of_students = 250\n    total_weight_g = weight_per_sheet_g * number_of_students\n    total_weight_kg = total_weight_g / 1000\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(numbers):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = 0\n    for i in range(2, 1001, 4):\n        ans += i**2 - (i - 2)**2\n    return ans\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # converting 11.55 am to minutes\n    end_time = (13 * 60) + 40    # converting 1.40 pm to minutes (13 because it's after noon)\n\n    time_played = end_time - start_time  # calculating the difference in minutes\n\n    return time_played\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Speed of the line is the same for both bridges\n    # Use the first bridge to calculate the speed of the line\n\n    # Bridge length where we know the time (first bridge)\n    first_bridge_length = 9  # meters\n\n    # Time it takes to cross the first bridge\n    first_bridge_time = 8  # seconds\n\n    # The line needs to cross a distance equal to its own length plus the bridge length\n    total_distance_first_bridge = first_bridge_length + 3  # meters\n\n    # Calculate the speed of the line using the first bridge (speed = distance / time)\n    speed_line = total_distance_first_bridge / first_bridge_time  # meters per second\n\n    # Time it takes to cross the second bridge\n    second_bridge_time = 10  # seconds\n\n    # Use the speed to calculate the total distance covered when crossing the second bridge\n    total_distance_second_bridge = speed_line * second_bridge_time  # meters\n\n    # The length of the second bridge is the total distance minus the length of the line\n    second_bridge_length = total_distance_second_bridge - 3  # meters\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left_people = 11\n    right_people = 7\n    crystal = 1  # Don't forget to count Crystal herself\n    rows = 2\n    \n    total_people = (left_people + crystal + right_people) * rows\n\n    return total_people\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    import math\n\n    # Find the cube root of the product to estimate the middle term, 'm'.\n    m = round(math.pow(2688, 1/3))\n\n    # Adjust 'm' to be the closest even number\n    if m % 2 == 1:\n        m += 1\n\n    # Check around the estimated middle term to see which triplet multiplies to 2688\n    for i in range(-2, 3, 2):\n        a = m + i\n        b = a - 2\n        c = a + 2\n        if b * a * c == 2688:\n            return c  # The largest of the three consecutive even numbers\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 11 == 0:\n            if (i - 1) % 2 == 0 and (i - 1) % 7 == 0:\n                return i\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 != group2:\n            ways += 1\n    return ways // 2\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(224)\n    num_factors = 1\n    for exponent in factors.values():\n        num_factors *= (exponent + 1)\n    return num_factors\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):         # Hundreds digit cannot be 0\n        for b in range(a + 5, 10): # Tens digit is larger than hundreds by 5 and less than 10\n            for c in range(0, 10): # Ones digit can be 0-9\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return int(f\"{a}{b}{c}\")\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    num1 = 28\n    num2 = 84\n    num3 = 126\n\n    # Calculate the greatest common divisor between the first two numbers\n    gcd_result = gcd(num1, num2)\n    \n    # Then calculate the gcd of the above result with the third number\n    gcd_result = gcd(gcd_result, num3)\n\n    # gcd_result is the biggest number that divides exactly into 28, 84, and 126\n    return gcd_result\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    egg_box_capacity = 6\n\n    full_boxes = total_eggs // egg_box_capacity\n\n    return full_boxes\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Initialize the starting time\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n    \n    # Calculate the total time spent in lessons and moving periods\n    total_time = (3 * 45) + (2 * 5)  # 3 lessons of 45 minutes each and 2 moving periods of 5 minutes each\n    \n    # Calculate the end time\n    break_start_time = start_time + timedelta(minutes=total_time)\n    \n    # Return the formatted time as the result\n    return break_start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins each person originally had\n    troy, adam = symbols('troy adam')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(troy, 5 * adam)  # Troy had 5 times as many coins as Adam\n    equation2 = Eq(adam + 24, troy / 3)  # After Adam took 24 more, he had 1/3 as many as Troy\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had at first\n    total_coins_first = solutions[troy] + solutions[adam]\n\n    return total_coins_first\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let wands = w, cards = c\n    w, c = symbols('w c')\n\n    # equation1: w + c = 69 (Sum of wands and cards)\n    equation1 = Eq(w + c, 69)\n    # equation2: w = c + 17 (Wands are 17 more than cards)\n    equation2 = Eq(w, c + 17)\n\n    # solving equations\n    solutions = solve((equation1, equation2), (w, c))\n\n    # Returning the number of wands\n    return solutions[w]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $5 notes and y be the number of $10 notes\n    x, y = symbols('x y')\n    \n    # Jeremy has a total of 57 notes\n    total_notes_eq = Eq(x + y, 57)\n    \n    # Jeremy spent 60% of the $10 notes and 25% of the $5 notes on a bag\n    spent_10notes_eq = Eq(0.6 * y * 10)\n    spent_5notes_eq = Eq(0.25 * x * 5)\n    \n    # After spending, he has twice as many $10 notes as $5 notes\n    remaining_notes_eq = Eq(y - 0.6 * y, 2 * (x - 0.25 * x))\n    \n    # Solve the system of equations\n    solutions = solve((total_notes_eq, remaining_notes_eq), (x, y))\n    \n    # Calculate the cost of the bag\n    total_spent = 0.6 * solutions[y] * 10 + 0.25 * solutions[x] * 5\n    return total_spent\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for number in product(range(1, 10), repeat=4):\n        if number[0]*number[1]*number[2]*number[3] == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total = symbols('total')\n    \n    # After spending 1/4 of his money and an extra $3\n    after_CDs = (3/4) * total - 3\n    \n    # After spending 3/5 of the remaining money and an extra $6\n    after_batteries = (2/5) * after_CDs - 6\n    \n    # He was left with $24 after all spending\n    equation = Eq(after_batteries, 24)\n    \n    # Solving for the total amount of money Hanson had at first\n    solution = solve(equation, total)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "from itertools import permutations\n\ndef solution():\n    # Since the sum of each digit is 8 and the number is even,\n    # we are looking for permutations of unique digits that sum up to 8 and end with an even digit\n    # Valid digits for the unit place (even numbers)\n    even_digits = [0, 2, 4, 6, 8]\n\n    # Record the count of valid three-digit numbers\n    count = 0\n\n    # Generate all permutations of the digits 0-9 taken three at a time\n    for perm in permutations(range(10), 3):\n        # Check if the sum of digits is 8\n        if sum(perm) == 8:\n            # Check if last digit is even and the first digit is not zero (to ensure it's a three-digit number)\n            if perm[2] in even_digits and perm[0] != 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Since Darrell needs to be sure to get 5 green beads,\n    # in the worst case, he can draw all the blue and white beads first.\n    blue_beads = 5\n    white_beads = 6\n    # We add 4 green beads because the 5th green bead will guarantee he has 5 green beads.\n    worst_case_green_beads = 4\n\n    # The total number of beads Darrell must draw to be sure to get 5 green beads.\n    ans = blue_beads + white_beads + worst_case_green_beads + 1\n    return ans\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    # Finding the missing number where half of it equals to one-fourth of 16\n    missing_number = (1 / 4) * 16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the games played in the group stage with single round-robin rules\n    # Each person plays against every other person in their group once\n    group_games = 4 * (comb(4, 2))\n\n    # Calculate the games played in the knockout rounds\n    # Top 8, top 4, top 2, final and third place match\n    knockout_games = 8 - 1 + 4 - 1 + 2 - 1 + 1 + 1\n\n    # Total games played is the sum of group stage games and knockout games\n    total_games = group_games + knockout_games\n\n    return total_games\n\n# Import the comb function from the math module\nfrom math import comb\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the time taken by B to finish a job be x days\n    # So A takes (x - 12) days to finish the same job\n    # In one day, A does 1/(x - 12) of the job\n    # In one day, B does 1/x of the job\n    # Together in one day, they do 1/(x - 12) + 1/x of the job\n    \n    x = symbols('x')\n    \n    equation = Eq(1/(x - 12) + 1/x, 1)\n\n    b_days = solve(equation, x)[1]  # Taking the positive root as time can't be negative\n\n    # Time taken by both A and B working together\n    combined_rate = 1/(b_days - 12) + 1/b_days\n    combined_days = 1 / combined_rate\n\n    return combined_days\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9\n    r = 4\n    arrangements = factorial(n) // factorial(n-r)\n    return arrangements\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    both = likes_bananas + likes_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_count = 489\n    stickers_given = 76\n    stickers_bought = 65\n\n    initial_count = final_count - stickers_bought + stickers_given\n    return initial_count\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # Since the leftmost digit is 8, begin with that as fixed\n    digits = '0123456789'\n    \n    for perm in permutations(digits):\n        if perm[0] != '8':  # Skipping permutations not starting with 8\n            continue\n        \n        number_str = ''.join(perm)\n        divisible = True\n        \n        for i in range(1, 10):  # Checking divisibility for numbers formed by first i digits\n            if int(number_str[:i]) % (i + 1) != 0:\n                divisible = False\n                break\n        \n        if divisible:\n            return int(number_str)  # Found the correct number\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    tomatoes_given = 7\n    matthew_tomatoes = belinda_tomatoes - tomatoes_given - ((belinda_tomatoes - tomatoes_given) / 2)\n    return int(matthew_tomatoes)\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    increased_rate = original_rate * (1 + 0.50)\n    return increased_rate\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import sqrt\n    \n    # The lcm of 15 and 21 is 105, which is one of the factors.\n    factor1 = 15\n    factor2 = 21\n    lcm_factor = factor1 * factor2 // math.gcd(factor1, factor2)\n    \n    # Since the number has exactly 8 factors, it can be the square of a prime,\n    # or a product of two different primes, or a prime to the power of 3.\n    # In the case of 105, it's a product of two different primes.\n    \n    # Calculate the number\n    number = lcm_factor\n    \n    # Calculate all factors\n    factors = set()\n    for i in range(1, int(sqrt(number)) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    \n    # Return the sum of the factors\n    return sum(factors)\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n    # The difference between the two numbers\n    diff = abs(2012 - 1274)\n    \n    # Find the greatest common divisor (GCD) - largest possible D\n    D = gcd(2012, 1274)\n    \n    # Compute the remainder when each number is divided by D\n    R = 2012 % D\n    \n    # Subtract the remainder from the divisor to get the answer\n    ans = D - R\n    \n    return ans\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Let's denote the state of the game by the number of numbers left to write at any given point:\n    # If this number is a multiple of 7 (1+3+3), then it's a losing position for the current player.\n    # The strategy is to always play in a way that makes the number of numbers left a multiple of 7.\n    # Betty should go first and initially write 3 numbers, making the count 52 - 3 = 49 (a multiple of 7).\n    # From there, she can always respond by writing enough numbers to maintain the multiple of 7 state.\n    # No matter what Abby writes, Betty can always return to a multiple of 7 by writing:\n    # if Abby writes 1, Betty writes 6\n    # if Abby writes 3, Betty writes 4\n    # if Abby writes 4, Betty writes 3\n    # if Abby writes 6, Betty writes 1\n    # So if Betty plays this strategy, she'll always win, hence she should go first.\n    return \"Betty should go first\"\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences to solve using the Chinese Remainder Theorem\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Solve the system of congruences to find the smallest such number\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_oj = 630\n    given_to_grace = (5/7) * total_oj\n    remaining_oj = total_oj - given_to_grace\n    given_to_evelyn = (1/9) * remaining_oj\n    remaining_oj_after_evelyn = remaining_oj - given_to_evelyn\n    \n    return remaining_oj_after_evelyn\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # The last digit of a number is its remainder when divided by 10\n    last_digit_4_power = pow(4, 2009, 10)\n    last_digit_6_power = pow(6, 2010, 10)\n    \n    # Calculate the last digit of the sum\n    ans = (last_digit_4_power + last_digit_6_power) % 10\n\n    return ans\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_six_players = 6 * 150\n    average_height_four_players = 150 - 2\n    total_height_four_players = 4 * average_height_four_players\n    \n    total_height_other_two_players = total_height_six_players - total_height_four_players\n    average_height_other_two_players = total_height_other_two_players / 2\n    \n    return average_height_other_two_players\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    target_weight = 63\n    ways = 0\n    # Since a 5-gram weight is used, the number of 5-gram weights\n    # can range from 0 to target_weight // 5 (integer division)\n    for five_gram_weights in range(target_weight // 5 + 1):\n        remaining_weight = target_weight - (five_gram_weights * 5)\n        # If the remaining_weight is divisible by 2, this is a valid combination\n        if remaining_weight % 2 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    not_attempted = 1\n    rex_score = 66\n\n    # Rex answered all but one of the questions\n    attempted_questions = total_questions - not_attempted\n\n    # Hypothesize if all answered questions were correct\n    hypo_correct_points = attempted_questions * points_correct\n\n    # Calculate how much the score differs from the hypothesis\n    score_difference = hypo_correct_points - rex_score\n\n    # Since each incorrect answer causes a difference of 6 points (4 for not being correct and 2 for being incorrect)\n    # We can find the number of incorrect answers\n    incorrect_answers = score_difference // (points_correct - points_incorrect)\n\n    # Find the number of correct answers\n    correct_answers = attempted_questions - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the flow rates of pipes A, B, and C be a, b, and c tons/hour, respectively\n    # Let x be the total tons of water the pool can hold\n    a, b, c, x = symbols('a b c x')\n\n    # The relationship between the flow rates of A and B\n    equation1 = Eq(b, 2 * a)\n\n    # If A and C are turned on, the pool is filled and 18 tons of water come from A\n    # This means that A provides 18 tons of water when the pool is full\n    equation2 = Eq(a * x/(a + c), 18)\n\n    # If B and C are turned on, the pool is filled and 27 tons of water come from B\n    # This means that B provides 27 tons of water when the pool is full\n    equation3 = Eq(b * x/(b + c), 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c, x))\n\n    # Return the value of x (the total tons the pool can hold)\n    return solutions[x]\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Use a formula to calculate the sum of an arithmetic series\n    # sum_series formula: sum_series = (n/2) * (first_term + last_term)\n    # Since the series is symmetric and repeats after 20, we can calculate\n    # the sum of the series from 1 to 20 and then double it, subtracting the 20 which is not repeated\n    \n    first_term = 1\n    last_term = 20\n    n = last_term\n    sum_series = (n * (first_term + last_term)) // 2\n    total_sum = 2 * sum_series - last_term\n    \n    return total_sum\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    num_colors = 5\n    num_letters = 4\n\n    # Since each letter must have its own unique color, we use permutations for the calculation\n    from math import perm\n    ans = perm(num_colors, num_letters)\n    \n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age should be a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if age == 2 * (reversed_age + 1):\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Initialize the possible number of meatballs that each student can receive\n    i = 1\n    \n    while True:\n        # The total number of meatballs initially must be a multiple of i, plus 20 left\n        total_meatballs_with_20_left = i * i + 20\n        \n        # If another student comes and gets the same amount, there should be\n        # 10 meatballs left and this should be a multiple of i now\n        if (total_meatballs_with_20_left - 10) % (i + 1) == 0:\n            return i  # Each student gets i meatballs\n            \n        i += 1\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Given the sum of first 8 terms (S8) and the sum of first 22 terms (S22)\n    S8 = 32\n    S22 = 44\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    # where a is the first term and d is the common difference.\n    \n    # From the given information, we can create two equations:\n    # 32 = 8/2 * (2a + 7d)  -> Equation 1\n    # 44 = 22/2 * (2a + 21d) -> Equation 2\n    \n    # Let's solve these two equations to find a and d.\n    # Multiply both sides of Equation 1 by 2 to simplify\n    # 64 = 8 * (2a + 7d) -> 8a + 28d = 64 -> Equation 1'\n    \n    # Multiply both sides of Equation 2 by 2 to simplify\n    # 88 = 22 * (2a + 21d) -> 44a + 462d = 88 -> Equation 2'\n    \n    # Now, let's simplify Equation 2' by dividing every term by 22\n    # 2a + 21d = 2 -> Equation 2''\n    \n    # Subtract Equation 2'' from Equation 1' to eliminate a\n    # (8a + 28d) - (2a + 21d) = 64 - 2\n    # 6a + 7d = 62\n    \n    # Now, we already have the value for a + 7d from Equation 1\n    # a + 7d = 64 / 8\n    a_plus_7d = 64 / 8\n    # a + 7d = 8\n    \n    # We can use this value to solve for a in the following way\n    # (6a + 7d) - (a + 7d) = 62 - a_plus_7d\n    # 5a = 62 - a_plus_7d\n    a = (62 - a_plus_7d) / 5\n    # a = (62 - 8) / 5\n    # a = 54 / 5\n    a = 54 / 5\n\n    # Now, let's solve for d using a_plus_7d = 8\n    # a_plus_7d = a + 7d\n    # 8 = a + 7d\n    d = (a_plus_7d - a) / 7\n    # d = (8 - a) / 7\n    # d = (8 - 54/5) / 7\n    # d = (40 - 54) / 35\n    # d = -14 / 35\n    d = -14 / 35\n\n    # Now that we have a and d, we can find the sum of the first 15 terms (S15)\n    # using the formula for the sum of an arithmetic sequence.\n    S15 = 15 / 2 * (2 * a + (15 - 1) * d)\n    # S15 = 15/2 * (2 * (54/5) + 14 * (−14/35))\n    # After simplifying the terms, we can obtain S15\n\n    return int(S15)\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    number = 9.32\n    increase_fraction = 1/10\n    increase_amount = number * increase_fraction\n    ans = number + increase_amount\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_questions = symbols('total_questions')\n    \n    eq1 = Eq((total_questions / 2) + 7, total_questions - 23)\n    \n    eq2 = Eq(((total_questions - (total_questions / 2) - 7) / 2) - 5, 23)\n    \n    solutions = solve((eq1, eq2), (total_questions))\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n    ans = \"4/25\" if fraction_value > decimal_value else \"0.17\"\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # 1 litre = 1000 ml\n    water_poured_out = 200 * 3  # 200 ml into each of 3 cups\n    remaining_water = total_water - water_poured_out\n    \n    return remaining_water\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    lights_on = [i for i in range(1, 251) if int(i**0.5) == i**0.5]\n    return len(lights_on)\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses, and d be the original number of daisies\n    r, d = symbols('r d')\n    \n    # Total number of flowers is 300\n    total_flowers = Eq(r + d, 300)\n    \n    # Difference between roses and daisies after planting the same number each month\n    difference_rd = Eq(r - d, 280 - 180)\n\n    # Solve the system of equations\n    solutions = solve((total_flowers, difference_rd), (r, d))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Calculate common difference\n    common_difference = (38 - 23) // (15 - 10)\n\n    # Calculate the difference from the 10th to the 12th number\n    difference_to_12th = (12 - 10) * common_difference\n    \n    # Calculate the 12th number\n    number_12th = 23 + difference_to_12th\n    \n    return number_12th\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    correct_problems = (10 * 0.2) + (20 * 0.8) + (30 * 0.9)\n    \n    overall_percentage = (correct_problems / total_problems) * 100\n\n    return overall_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Brick with side of 6 decimeters (60 cm)\n    brick_area_dm = 60 * 60  # area in cm^2\n\n    # Total area to be covered in cm^2 using bricks of 6 dm side\n    total_area_cm = brick_area_dm * 80\n\n    # Area of brick with 64 cm^2\n    brick_area_cm = 64\n\n    # Total number of 64 cm^2 bricks needed\n    num_bricks = total_area_cm / brick_area_cm\n\n    return int(num_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    water, fruit = symbols('water fruit')\n    \n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n    \n    solutions = solve((equation1, equation2), (water, fruit))\n    \n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible permutations of the digits\n    perms = permutations([1, 3, 4, 5, 7, 8])\n\n    # Apply the divisibility rule for 11: the difference between the sum of the digits in the odd positions and\n    # the sum of the digits in the even positions is a multiple of 11\n    max_num = 0\n    for p in perms:\n        if ((p[0] + p[2] + p[4]) - (p[1] + p[3] + p[5])) % 11 == 0:\n            num = int(''.join(map(str, p)))\n            if num > max_num:\n                max_num = num\n                \n    return max_num\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    # 91 is prime if it has only two divisors: 1 and itself.\n    # We will attempt to find another divisor aside from these two.\n    for i in range(2, int(91**0.5) + 1):  # We only check up to the square root of 91\n        if 91 % i == 0:  # If there's no remainder, i is a divisor of 91\n            return False  # 91 is not prime because we found another divisor\n    return True  # If no divisors are found aside from 1 and itself, it would be prime\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n\n    # The number of times 4 is multiplied is 2018 and the number of times 25 is multiplied is 2018.\n    A = (4 ** 2018) * (25 ** 2018)\n    \n    # Calculate the number of digits of A.\n    num_digits = int(log10(A)) + 1\n    \n    return num_digits\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let number of boys be 'b'\n    # Then number of girls will be 'b + difference'\n    # Since total pupils is the sum of boys and girls:\n    # b + (b + difference) = total_pupils\n    # Solving for 'b':\n    # 2b + difference = total_pupils\n    # 2b = total_pupils - difference\n    # b = (total_pupils - difference) / 2\n\n    b = (total_pupils - difference) / 2\n    girls = b + difference\n\n    return int(girls)\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_A_length = 10\n    ribbon_B_length = ribbon_A_length * 5\n    total_length = ribbon_A_length + ribbon_B_length\n    return total_length\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    boys_more = 31\n    total_students = 0\n\n    # Layer starts with boys and alternates between boys and girls\n    # When the side of the square is even, the number of boys and girls is the same\n    # When the side of the square is odd, the outer layer (boys) always has more individuals than the next layer (girls)\n    # Therefore, we only need to consider the squares with odd sides\n    # Start with the smallest possible square of boys that gives an excess of 31 over the girls, which is 7x7 (since 5x5 would give an excess of only 9)\n\n    # Proceeding by trial with odd side lengths\n    side = 7  \n    while True:\n        # Boys in current layer:\n        boys_in_layer = side**2 - (side - 2)**2  # outer layer minus the next inner layer\n        # This holds for side > 1; for side = 1, we have only 1 boy\n\n        # If boys in current layer plus the previous difference is exactly 31 more than girls\n        if total_students > 0 and boys_in_layer + boys_more == 31:\n            return total_students  # We've found the correct side length for the square\n\n        total_students += boys_in_layer  # Add boys of current layer\n        side += 2  # Move to the next odd layer\n\n        if side > 31:  # If the side exceeds 31, finding 31 more boys becomes impossible\n            break\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    players = 5\n    team_size = 3\n    ans = comb(players, team_size)\n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = (new_profit / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_apples = symbols('initial_apples')\n\n    equation = Eq( (1/5)*initial_apples + 80, initial_apples - (30/100)*initial_apples )\n\n    solutions = solve(equation, initial_apples)\n\n    final_apples = (30/100) * float(solutions[0])\n\n    return int(final_apples)\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    # Loop through all possible combinations of three different positive numbers\n    for x in range(1, 14):\n        for y in range(x + 1, 14):  # ensure y > x for different numbers\n            for z in range(y + 1, 14):  # ensure z > y for different numbers\n                if x + y + z == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    # Since Emily is directly behind Danny, we just need to add 1 for Emily\n    # 1 for Danny and the rest of the people in the queue.\n    total_people = people_in_front_of_emily + people_behind_danny + 2\n\n    return total_people\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "from itertools import combinations\n\ndef solution():\n    total_balls = 10\n    num_piles = 3\n    count = 0\n    \n    # Since we need to have at least 1 ball in each pile, we are distributing\n    # the balls above this minimum requirement. Hence, start from 0.\n    # We need to find combinations that add up to (total_balls - num_piles),\n    # because we have already \"placed\" one ball in each pile.\n    balls_to_distribute = total_balls - num_piles\n    \n    # Use combinations with replacement to get all possible ways\n    # to distribute the remaining balls among the piles.\n    for comb in combinations(range(balls_to_distribute + 1), num_piles - 1):\n        distributed_balls = [comb[0]] + [comb[i] - comb[i-1] for i in range(1, len(comb))] + [balls_to_distribute - comb[-1]]\n        \n        # Ensure all distributed balls are unique by converting to a set and checking length\n        if len(set(distributed_balls)) == num_piles:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    return total_length / 2\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1 / 5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3 / 4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first number be x\n    # Then the numbers are x, x+2, x+4, x+6, x+8, x+10, x+12\n    # The fourth number is x + 6\n    # The first number is x and the seventh number is x + 12\n    # According to the question,\n    # x + 6 > (1/3) * (x + (x + 12)) + 6\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(x + 6, (1/3) * (x + (x + 12)) + 6)\n\n    # Solve the equation\n    x_value = solve(equation, x)[0]\n\n    # The sum of the seven numbers is 7 times the average of the first and last number\n    sum_of_numbers = 7 * ((x_value + (x_value + 12)) / 2)\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    m_per_km = 1000\n    ans = km * m_per_km\n    return ans\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    red_orchids = 28\n    red_and_white_orchids = 38\n\n    white_orchids = red_and_white_orchids - red_orchids\n    yellow_orchids = white_orchids * 3\n    purple_orchids = yellow_orchids * 2\n\n    total_orchids = red_orchids + white_orchids + yellow_orchids + purple_orchids\n    \n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n\n    # Calculate the number of trees on one side, including the tree at the beginning and end\n    trees_one_side = (highway_length // distance_between_trees) + 1 \n\n    # Since there are trees on both sides, we multiply this by 2\n    total_trees = trees_one_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Total sum of 9 numbers\n    sum_of_8_numbers = total_sum - 180  # Sum of the remaining 8 numbers after removing one number\n    average_of_8_numbers = sum_of_8_numbers / 8  # Average of the remaining 8 numbers\n    return average_of_8_numbers\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    difference = 2\n\n    nth_odd_number = first_odd_number + (20 - 1) * difference\n\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 cars,\n    # then he must have started in 7th place (2nd + 5 cars overtaken).\n    # Hence, the total number of cars is the position he started in plus 1.\n    # Because there is one more car which is the car that finished first.\n    ans = 7 + 1\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny = 194\n    amber = 5 * johnny\n    remaining = 65\n\n    initial_amount = johnny + amber + remaining\n\n    return initial_amount\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    eddie_future_age = 18\n    age_difference = mike_current_age - eddie_current_age\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_price = 15.99\n    difference = 8.01\n    amy_price = lily_price + difference\n    total_pay = lily_price + amy_price\n    return total_pay\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    sum_of_angles = (sides - 2) * 180\n    interior_angle = sum_of_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last_four_digits = 0\n    for i in range(1, 21):\n        number = int('5' * i)\n        sum_last_four_digits += number\n        sum_last_four_digits %= 10000  # to keep the last 4 digits\n    return sum_last_four_digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    man_days_per_wall = 2 * 3\n    time_for_x_walls = man_days_per_wall * x\n    time_for_y_men = time_for_x_walls / y\n    return time_for_y_men\n\n# You need to substitute the x and y values for the particular case\nx = 1  # Replace with the actual number of walls when using the function\ny = 1  # Replace with the actual number of men when using the function\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percent_men = 25\n    fraction_women = 1/5\n\n    men_count = (percent_men / 100) * total_people\n    women_count = fraction_women * total_people\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    checked_shirts = symbols('checked_shirts')\n    white_shirts = 7 * checked_shirts\n    total_shirts = Eq(checked_shirts + white_shirts, 72)\n    \n    num_checked_shirts = solve(total_shirts, checked_shirts)[0]\n    num_white_shirts = 7 * num_checked_shirts\n    \n    return num_white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    # The number has a remainder of 2 when divided by 3: n % 3 == 2\n    # The number has a remainder of 3 when divided by 4: n % 4 == 3\n    # The number has a remainder of 4 when divided by 5: n % 5 == 4\n    # We will use the Chinese Remainder Theorem to find such a number \n    # Loop through the numbers from 1 to 99 and check the conditions\n    for n in range(1, 100):\n        if n % 3 == 2 and n % 4 == 3 and n % 5 == 4:\n            return n\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for number in range(999, 100, -2): # Start from 999 and go backwards\n        if number % 9 == 0 and (number // 10) % 10 % 4 == 0: # Check divisibility by 9 and tens place by 4\n            return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the specific pattern or a description of it, it is impossible to write a function\n    # to find the value of (insert pic). The question seems to be incomplete or missing vital information.\n    # Normally, this would require analysis of a given pattern, and then implementing an algorithm\n    # to compute its specific property, such as the number of shapes, arrangements, or other characteristics.\n    # Since the actual pattern is not provided, no solution can be given.\n    \n    # Placeholder for the actual logic once the pattern is known\n    ans = None\n    \n    return ans\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    square_number = 42 // 6\n    return square_number\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    original_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    final_value = original_value * depreciation_factor\n\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(1/3 * girls, 1/2 * boys)\n    equation2 = Eq(girls + boys, 390)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Since we have 3 colors and we want to ensure to get 2 balls of the same colour,\n    # we use the Pigeonhole Principle. If we take one ball from each color, we have 3 balls,\n    # and we need just one more draw to ensure we have at least two balls of the same color.\n    # So, we draw one more than the number of colors.\n\n    colors = 3\n    ans = colors + 1\n    return ans\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    num = solve_congruence(*congruences)\n\n    return num[0] if num[0] < 60 else \"No solution less than 60\"\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m + 1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    full_number = (three_quarters * 4) / 3\n    return full_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Spending from January to April: 4 months * $300 per month\n    jan_to_apr = 4 * 300\n    # Spending from May to July: 3 months * $250 per month\n    may_to_jul = 3 * 250\n    # Spending from August to September: $750 total\n    aug_to_sep = 750\n    # Spending from October to December: 3 months * $300 per month\n    oct_to_dec = 3 * 300\n\n    # Total spending for the year\n    total_spending = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    # Total number of months\n    total_months = 12\n\n    # Average spending per month\n    average_spending = total_spending / total_months\n\n    return average_spending\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    bottom_temp = 17\n    top_temp = -2\n\n    temp_drop = bottom_temp - top_temp\n\n    return temp_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - tom_age\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9/20) * total_passengers\n    women_passengers = (30/100) * total_passengers\n    children_passengers = total_passengers - men_passengers - women_passengers\n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jordan, Evie and Emily's votes\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Equations based on the problem statement\n    equation1 = Eq(jordan, 3 * emily)          # Jordan got 3 times as many votes as Emily\n    equation2 = Eq(evie, jordan - 20)          # Evie got 20 fewer votes than Jordan\n    equation3 = Eq(jordan + evie + emily, 400) # The total number of votes is 400\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    train_departure_time = datetime.strptime(\"07:35\", \"%H:%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_at_work = train_departure_time + journey_duration + walk_duration\n    return arrival_at_work.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for n in range(1, 200):\n        if sum(int(digit) for digit in str(format(n, '4'))) == 5 and \\\n           sum(int(digit) for digit in str(format(n, '6'))) == 8 and \\\n           sum(int(digit) for digit in str(format(n, '8'))) == 9:\n            possible_values.append(n)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    first_digit_options = 2  # Only 2 or 3 can be used, but not 0 for the first digit\n    second_digit_options = 3  # 0, 2, or 3 can be used for second digit\n    third_digit_options = 3  # 0, 2, or 3 can be used for third digit\n\n    total_combinations = first_digit_options * second_digit_options * third_digit_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    cost_per_hotdog = cost_per_six_hotdogs / 6\n    cost_for_twelve_hotdogs = cost_per_hotdog * 12\n    return cost_for_twelve_hotdogs\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag = 16  # cost in pence\n    total_money_pence = 200  # total money in pence (£2)\n\n    num_bags = total_money_pence // cost_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    ans = 8.3 * 40\n    return ans\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    # Let the initial number of acorns Chip had be x.\n    # Then Dale would have 124 - x acorns initially.\n    # After Chip gives 14 acorns to Dale, they both have the same number of acorns.\n    # Therefore, Chip has x - 14 acorns, and Dale has (124 - x) + 14 acorns.\n    # Setting them equal to each other, we have:\n    # x - 14 = (124 - x) + 14\n\n    # Solve the equation for x to find the original number of acorns Chip had.\n    x = (124 + 14 + 14) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "def solution():\n    from math import factorial\n\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    # The formula for combinations with repetition is:\n    # C(n+k-1, k) where n is the total number of items and k is the number of items to choose\n    # Here, we treat each fiction book as identical and each comic book as identical\n    # So we use the formula for permutations of items with repetitions: n! / (n1! * n2! * ... * nk!)\n    \n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    # Iterate through numbers less than 100 to find the number\n    for num in range(2, 100, 2):  # only even numbers, start at 2\n        if num % 4 == 0 and num % 3 == 0:  # multiple of 4 and 3\n            sqrt_num = num ** 0.5\n            if sqrt_num.is_integer():  # check if it's a square number\n                return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Generate all prime numbers less than 51\n    primes.sort(reverse=True)  # Sort primes in descending order\n\n    sum_of_primes = 51\n    prime_count = 0\n    current_sum = 0\n\n    for prime in primes:\n        while current_sum + prime <= sum_of_primes:  # Add largest primes first\n            current_sum += prime\n            prime_count += 1\n        if current_sum == sum_of_primes:  # We found a sum of 51\n            break\n\n    return prime_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for number in range(10, 100):\n        if number % 4 == 2 and number % 5 == 2:\n            return number\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Let x represent the cost of one CD\n    total_cost = 8 * x  # The total cost for 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    num_trays = 4\n    total_eggs = eggs_per_tray * num_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    total = sum([(-1)**(i+1) * (40 - i) for i in range(40)])\n    return total\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if (3 * three_page_letters) + (4 * four_page_letters) == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for x in range(100, 1000):\n        if x % 24 == 0 and x // 24 == 36:\n            return x\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_for_pie_kg = 750 / 1000 # converting grams to kilograms\n    apples_for_juice_kg = 1025 / 1000 # converting grams to kilograms\n\n    remaining_apples_kg = total_apples_kg - (apples_for_pie_kg + apples_for_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    amy_position_from_back = 15\n\n    total_people = people_in_front + amy_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # To ensure getting 3 different colored balls in the worst case,\n    # we would pick all balls of one color and then all balls of another color.\n    # Only after this, picking one more ball would ensure having all three colors.\n    red_balls = 5\n    white_balls = 5\n    yellow_balls = 5\n    \n    # Worst case: pick all red, all white, and 1 yellow\n    min_balls = red_balls + white_balls + 1\n    \n    return min_balls\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    position_from_left = 14\n    books_to_the_right = 6\n    \n    total_books = position_from_left + books_to_the_right\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # grams\n    # When each dimension is halved, the volume becomes (1/2)^3 of the original volume\n    # because volume is proportional to the cube of the dimensions for a rectangular box.\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins_received = symbols('gigi lily coins_received')\n\n    eq1 = Eq(gigi + coins_received, 120 + coins_received)\n    eq2 = Eq(lily + coins_received, 24 + coins_received)\n    eq3 = Eq(gigi + coins_received, 3 * (lily + coins_received))\n\n    solutions = solve((eq1, eq2, eq3), (gigi, lily, coins_received))\n\n    return solutions[coins_received]\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the shorter piece\n    x = symbols('x')\n    \n    # The longer piece would then be 2x\n    # The total length is 12.75, which is the sum of the two pieces\n    equation = Eq(x + 2*x, 12.75)\n    \n    # Solving for x gives us the length of the shorter piece\n    shorter_length = solve(equation, x)[0]\n    \n    # The longer piece is twice the shorter piece\n    longer_length = 2 * shorter_length\n\n    return longer_length\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    total_cards = 20\n    prime_cards = list(primerange(1, 21))\n    non_prime_cards = total_cards - len(prime_cards)\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    father_age_at_brian_birthday = 41\n    age_diff = father_age_at_brian_birthday - 14\n    for i in range(1, age_diff):\n        brian_age = 14 + i\n        father_age = father_age_at_brian_birthday + i\n        if int(str(brian_age)[::-1]) == father_age:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Iterate over all possible 3-digit odd numbers\n    for i in range(100, 1000, 2): # step by 2 for odd numbers\n        digits = [int(d) for d in str(i)] # Extract the digits\n        if sum(digits) == 11: # Check if the sum of digits is 11\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # As we can boil an egg in 5 minutes, regardless of the number of eggs,\n    # the least amount of time to boil 3 eggs is still\n    # the time it takes to boil one, given we have a pot large enough.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    total_students = 35\n    capacity = 6\n\n    num_cabins = (total_students + capacity - 1) // capacity\n\n    return num_cabins\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    n = symbols('n')\n    a1, d = symbols('a1 d')\n\n    # The sum of the first 4 numbers of arithmetic sequence\n    sum_first_4 = Eq(a1 + (a1 + d) + (a1 + 2 * d) + (a1 + 3 * d), 124)\n    \n    # The sum of the last 4 numbers of arithmetic sequence\n    sum_last_4 = Eq((a1 + (n - 4) * d) + (a1 + (n - 3) * d) + (a1 + (n - 2) * d) + (a1 + (n - 1) * d), 156)\n    \n    # The sum of all the numbers of arithmetic sequence\n    sum_all = Eq(n * (2 * a1 + (n - 1) * d) / 2, 210)\n       \n    # Solve the system of equations\n    solutions = solve((sum_first_4, sum_last_4, sum_all), (a1, d, n))\n\n    # Since we have all positive integers in the sequence, filter for positive n\n    number_of_terms = [s[n] for s in solutions if s[n].is_positive]\n\n    return number_of_terms[0]\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_g = 11160  # Convert kg to g\n    cookies_dough = 240 * 45\n    brownies_dough = 2 * 150\n    used_dough = cookies_dough + brownies_dough\n\n    remaining_dough_g = total_dough_g - used_dough\n    remaining_dough_kg = remaining_dough_g / 1000  # Convert g to kg\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    # The inequality we want to express in Python will look like:\n    # c < 1000, where c is the number of calories Dan can take in today\n\n    # As asked, we only need to return the symbolic inequality without solving it.\n    # We'll use sympy to create this inequality.\n    from sympy import symbols, Lt\n\n    # Create a variable symbol for Dan's calories intake today\n    c = symbols('c')\n\n    # Define the inequality\n    inequality = Lt(c, 1000)\n\n    # Normally, sympy inequalities automatically evaluate to True or False\n    # when comparing numbers, but we want to keep it symbolic.\n    # Therefore, we return the inequality without evaluating it.\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    eaten_second_day = (remaining_biscuits + 2) * 2\n    total_biscuits = (eaten_second_day + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit = 5\n    spending = 8\n    amount = initial_amount\n    \n    for day in range(1, total_days + 1):\n        if day % 2 != 0:  # Odd days (deposit days)\n            amount += deposit\n        else:  # Even days (spending days)\n            amount -= spending\n    \n    return amount\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    # The given sequence is repeating every 5 numbers: 70, 71, 72, 71, 70\n    sequence = [70, 71, 72, 71, 70]\n\n    # Find the index position for the 1004th number in the sequence\n    # As sequences in Python are 0-based, we use 1003 instead of 1004\n    position = (1003) % len(sequence)  # Using modulo to find the repeating pattern index\n\n    # Return the number at the found position\n    return sequence[position]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums // children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    difference = 3\n    n = (298 - 10) // difference + 1\n    sum_n = (2 * first_term + (n - 1) * difference) * n // 2\n    return sum_n\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (436 + 721) - (132 + 189)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    remaining_chocolates = solutions[chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    for number in range(100, 1000):\n        if (number % 27 == 0) + (number % 7 == 0) + (sum(map(int, str(number))) == 17) + \\\n           (int(number**0.5)**2 == number) + (89100 % number == 0) == 3:\n            return number\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_money = 200\n    spent_on_book = initial_money * 0.15\n    remaining_money = initial_money - spent_on_book\n    spent_on_dvd = remaining_money * 0.30\n    final_money = remaining_money - spent_on_dvd\n\n    return final_money\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 // 7\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let 'm' represent the number of push-ups Mulan can do\n    # The best boy soldier can do 50 push-ups, Mulan can beat that\n    # So the inequality is m > 50\n\n    # Since we are asked to represent an inequality and not to solve it,\n    # and given that this is a symbolic representation, we will just state it \n\n    m = 'm > 50'  # This 'm' represents the inequality in string format\n    return m\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    initial_balloons = 40\n    blown_up = 22\n    burst = 3\n    remaining = initial_balloons - (blown_up - burst)\n\n    return remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    total_games = teams - 1  # In a knockout tournament, total games = total teams - 1\n\n    games_played = 16+8+4+2  # Sum of games played in each round\n\n    games_remaining = total_games - games_played\n\n    return games_remaining\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B first\n    stack_a = 20\n    stack_b = 20 - 4\n\n    # To ensure that Jerry wins, he should leave an equal number of stones\n    # in both stacks because Tom will be forced to take from only one stack\n    # and Jerry can mimic Tom's move every time.\n    if stack_a > stack_b:\n        # Jerry should take from stack A\n        jerry_take = stack_a - stack_b\n        jerry_stack = \"A\"\n    else:\n        # Jerry should take from stack B\n        jerry_take = stack_b - stack_a\n        jerry_stack = \"B\"\n    \n    return f\"Jerry must take {jerry_take} stone(s) from Stack {jerry_stack}.\"\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_each_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = (pails_filled * water_each_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and boys be 9x\n    # 9x - 7x = 16\n    # 2x = 16\n    x = 16 // 2\n    \n    # Total pupils = girls + boys = 7x + 9x = 16x\n    total_pupils = 16 * x\n    \n    return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(range(1, 1 + 3*(37), 3))\n    mistake_diff = correct_sum - 2011\n    mistake_position = mistake_diff // 6 + 1\n\n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    number_of_trees = circumference // interval\n\n    return number_of_trees\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Total number of candies\n    total_candies = 88\n    # Number of children\n    children = 8\n\n    # If each child gets at least one candy and no two children get the same number of pieces,\n    # we are looking for the minimum number that the child with the most pieces can get.\n    # This means we want to minimize the number of candies the child with the most pieces\n    # gets, while maximizing the number of candies the others get, subject to the constraints.\n\n    # First, let's give each child at least one piece\n    candies_given_out = children\n\n    # Let's find the maximum number of pieces the remaining children can get\n    # We do this by giving them 1, 2, 3, and so on until (children - 1)\n    # Since no two children can have the same number, this sequence will be 1, 2, 3, ..., (children - 1)\n    # The sum of this sequence is given by the formula n*(n+1)/2, where n = children - 1\n    max_candies_others_can_get = (children - 1) * children // 2\n\n    # Subtract the maximum candies given to the other children from the total to see what's left\n    # for the child with the most pieces\n    largest_share = total_candies - max_candies_others_can_get\n\n    return largest_share\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    num_cakes = 25 / milk_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Since the numbers are five consecutive natural numbers, we can express them as:\n    # x-2, x-1, x, x+1, x+2\n    # Then their sum is: (x-2) + (x-1) + x + (x+1) + (x+2) = 5x\n    # We know their sum is 160, so:\n    # 5x = 160\n    x = 160 / 5\n\n    # The student with the most balls has x+2 balls\n    most_balls = x + 2\n\n    return int(most_balls)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):  # Hundreds place should be from 1-9 as M is a three-digit number\n        for ones in range(10):  # Ones place can be from 0-9\n            M = hundreds * 100 + ones  # Tens place is 0\n            S = hundreds + ones  # Since tens place is 0, the sum is just hundreds + ones\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])  # Reverse the digits of M\n                return reversed_M // S  # Return the integer division of reversed_M by S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters converted to centimeters\n    piece_length_cm = 6\n\n    num_pieces = stick_length_cm // piece_length_cm\n\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    select_balls = 7\n    ans = comb(total_balls, select_balls)\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Rational\n\n    # Initialize variables\n    a, b, c = symbols('a b c', integer=True)\n    target_fraction = Rational(13, 10)  # The target fraction we want to match\n\n    # Define the expression for the given complex fraction\n    expr = 1 + 1 / (a + 1 / (b + 1 / c))\n\n    # Set the expression equal to the target fraction and solve for a, b, c\n    # The equation is created implicitly within the solver function\n    solutions = [(sa, sb, sc) for sa, sb, sc in zip(*solve(expr - target_fraction, (a, b, c))) if sa > 0 and sb > 0 and sc > 0]\n\n    # Ensure there's at least one solution\n    if not solutions:\n        raise ValueError(\"No solutions found with positive integers.\")\n\n    # Take the first solution (it's possible there are multiple solutions, but we only need one)\n    solution = solutions[0]\n\n    # Calculate a + 2b + 3c based on the found solution\n    result = solution[0] + 2 * solution[1] + 3 * solution[2]\n    return result\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # Since we only care about the ones digit, consider the pattern of the last digit of 8's powers\n    # 8^1 = 8, 8^2 = 64, 8^3 = 512, 8^4 = 4096, ...\n    # The pattern of the ones digit is 8, 4, 2, 6 and then it repeats\n    pattern = [8, 4, 2, 6]\n    \n    # 8^30 is 30th term in the sequence which will fall on a term in our pattern\n    # We find the position of the ones digit by taking the modulo of 30 with the length of the pattern\n    position = (30 % len(pattern)) - 1  # We subtract 1 because lists are 0-indexed in Python\n    \n    # Fetch the ones digit from our pattern\n    ones_digit = pattern[position]\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days_spent = total_pages / pages_per_day\n\n    return int(days_spent)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 52\n    \n    # Let x be the number of correct answers.\n    # Then, total_questions - x is the number of incorrect answers.\n    # We setup the equation: correct_points * x + incorrect_points * (total_questions - x) = total_points\n    \n    for x in range(total_questions + 1):\n        if correct_points * x + incorrect_points * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 1\n    while True:\n        if days * (days + 1) // 2 > 100:\n            break\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    difference = 5\n    last_term = 155\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return int(ans)\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = sum(range(1, 21, 6))\n    return sum_of_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    sugar_solution_weight = 600  # total weight of the sugar solution\n    sugar_concentration = 0.48  # the concentration of sugar in the solution\n\n    sugar_weight = sugar_solution_weight * sugar_concentration\n    water_weight = sugar_solution_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    num_repetitions = 9\n    addend = 5\n    ans = sum([addend] * num_repetitions)\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Assume the youngest dwarf is of age 'y', and as they are born in consecutive years,\n    # their ages form an arithmetic sequence with a common difference of 1 year.\n    # Then the ages of the youngest three would be y, y+1, and y+2.\n    # According to the problem, y + (y + 1) + (y + 2) = 42.\n    # Solving this gives us the value of y, the age of the youngest dwarf.\n\n    y = (42 - 3) // 3 # (y + y + 1 + y + 2 - 3) / 3\n    \n    # Now we can find the age of the oldest three.\n    # The ages of the oldest three would be y+4, y+5, and y+6\n    # (since there are 7 dwarfs and age difference between each is 1 year)\n    oldest_three_sum = (y + 4) + (y + 5) + (y + 6)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d')\n    abcd = 1000*a + 100*b + 10*c + d  # \\overline{abcd}\n    abc = 100*a + 10*b + c  # \\overline{abc}\n    ab = 10*a + b  # \\overline{ab}\n    \n    # Construct the equation based on the given condition\n    equation = Eq(abcd + abc + ab + a, 1370)\n    \n    # Solve the equation\n    solution = solve(equation, (a, b, c, d))\n    abcd_value = solution[a]*1000 + solution[b]*100 + solution[c]*10 + solution[d]\n    \n    return abcd_value\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Calculate the integer parts and fractional parts separately\n    integer_sum = 19 + 199 + 1999 + 19999 + 199999\n    fraction_sum = (4/5) * 5  # Since 4/5 appears 5 times\n\n    # Combine the integer sum with the fractional sum\n    ans = integer_sum + fraction_sum\n\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n\n    ans = total_pence * fraction\n\n    return ans\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    average_marks = 75\n    total_tests = 3\n    total_marks_two_tests = 172\n    total_marks = average_marks * total_tests\n\n    marks_remaining_test = total_marks - total_marks_two_tests\n    \n    return marks_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    dad_past = dad_current - 6\n    son_past = son_current - 6\n\n    equation1 = Eq(dad_past, 5 * son_past)\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += sum([j / i for j in range(1, i+1)]) + sum([j / i for j in range(i-1, 0, -1)])\n    return ans\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of years in the future\n    years_in_future = symbols('years_in_future')\n\n    # Janice's current age\n    janice_age_now = 11\n\n    # Janice's sister's current age\n    sister_age_now = janice_age_now + 5\n\n    # Equation for the total age in the future\n    equation = Eq((janice_age_now + years_in_future) + (sister_age_now + years_in_future), 35)\n\n    # Solve for the number of years in the future\n    years_in_future_solution = solve(equation, years_in_future)\n\n    return years_in_future_solution[0]\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    terry, gerald = symbols('terry gerald')\n    \n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n    \n    solutions = solve((equation1, equation2), (terry, gerald))\n    \n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets = symbols('total_sweets')\n    milk_chocolates = 6 / (2/7)\n    total_sweets_eq = Eq(milk_chocolates, 3/4 * total_sweets)\n\n    ans = solve(total_sweets_eq, total_sweets)[0]\n\n    return ans\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the price of one football and one volleyball\n    football, volleyball = symbols('football volleyball')\n    \n    # First situation: 1 football and 2 volleyballs costs $60\n    first_situation = Eq(football + 2 * volleyball, 60)\n    \n    # Second situation: 2 footballs and getting $16 back means spending $60 - $16\n    second_situation = Eq(2 * football, 60 - 16)\n    \n    # Solve the system of equations\n    solutions = solve((first_situation, second_situation), (football, volleyball))\n    \n    # Return the price for one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # Given values\n    mode_age = 7\n    mean_age = 9\n    median_age = 8\n    range_age = 6\n\n    # Since the mode is the most frequently occurring number in a set of values\n    # and their range is 6, we can assume the ages could be 7, 7, 8, 13 (since mean_age is 9 and sum of ages should be 9 * 5)\n    # To verify this, we check if the calculated mean, median and mode match the given ones\n    possible_ages = [7, 7, 8, 7, 13]  # A possible set of ages, can add one more 7, as mode is 7  \n    \n    # Verify if the above list satisfies the given conditions by calculating statistics\n    if mean(possible_ages) == mean_age and median(possible_ages) == median_age and mode(possible_ages) == mode_age:\n        # Since we need the second oldest, we sort the ages and take the second last element\n        return sorted(possible_ages)[-2]\n    else:\n        return None\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    from itertools import permutations\n\n    # All possible permutations of the digits from third guess\n    potential_numbers = set(permutations(\"3541\"))\n\n    # Check conditions to find the correct number\n    for num in potential_numbers:\n        if (num[0] != '3' and num[1] != '5' and num[2] != '4' and num[3] != '1' and   # All positions are wrong\n            num[0] == '1' and num[2] == '7' and                                      # Two digits with correct positions\n            num[1] == '2' and num[2] == '7' and                                       # Two correct digits with wrong positions\n            num[0] != '2' and num[1] != '7' and num[2] != '4' and num[3] != '5'):     # Two correct digits with wrong positions\n                return ''.join(num)                                                    # Convert tuple to string\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    # This is an arithmetic sequence where a_1 = 1 (first term)\n    # and the common difference (d) is 2.\n    # The last term (a_n) is 49.\n    # To find the sum of the sequence (S_n), we use the formula for the sum of n terms\n    # of an arithmetic sequence S_n = n/2 * (a_1 + a_n)\n    \n    first_term = 1\n    last_term = 49\n    difference = 2\n    \n    # Calculate the number of terms in the sequence\n    # The nth term (a_n) of an arithmetic sequence can be found by a_n = a_1 + (n-1)d\n    # Rearrange the formula to find n (number of terms) when a_n is known:\n    # n = ((a_n - a_1) / d) + 1\n    num_terms = ((last_term - first_term) / difference) + 1\n    \n    # Calculate the sum of the sequence\n    sum_sequence = num_terms / 2 * (first_term + last_term)\n    \n    return int(sum_sequence)\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    num_books = 3\n    arrangements = math.factorial(num_books)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    total_permutations = 5 * 4 * 3 * 2 * 1  # Total permutations for 5 people\n    a_first_or_last = 2 * 4 * 3 * 2 * 1     # Permutations where A is first or last\n    count = total_permutations - a_first_or_last\n    return count\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    num_rounds = math.ceil(math.log2(num_people))  # Log base 2 of number of people gives the number of rounds\n    return num_rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, pink = symbols('red yellow pink')\n    equation1 = Eq(red, 3 * yellow)\n    equation2 = Eq(pink, yellow - 7)\n    equation3 = Eq(pink, 3)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, pink))\n\n    return solutions[red] + solutions[yellow]\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    # Define variables\n    boys_increase = 12\n    girls_increase = 12\n    final_ratio_boys = 19\n    final_ratio_girls = 14\n\n    # Since the boys and girls both increased by the same amount,\n    # the difference between boys and the girls after the increase\n    # should remain the same as the initial difference (which is 50% more boys).\n    # This is where Ollie's workings are wrong. Instead of 9u = 12, it should be 5u = 12.\n    \n    # After the increase:\n    # boys_afternoon = initial boys * 150% = initial_boys * 1.5\n    # girls_afternoon = initial_girls + 12\n    # boys_afternoon + 12 = final_ratio_boys * unit\n    # girls_afternoon + 12 = final_ratio_girls * unit\n\n    # Difference between boys_afternoon and girls_afternoon should be the same\n    # as the initial difference.\n    # (final_ratio_boys - final_ratio_girls) * unit = initial_boys * 1.5 - initial_girls\n\n    # From ratio boys : girls = 19 : 14 after increase, 5u = 12,\n    # which means u = 12 / 5\n\n    unit = 12 / 5\n\n    # Now we find the total number of children by adding boys and girls together\n    # Total = (number of boys in terms of unit) + (number of girls in terms of unit)\n    total_afternoon = (final_ratio_boys + final_ratio_girls) * unit\n\n    return int(total_afternoon)\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    \n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges', integer=True)\n\n    # Initial ratio equation: apples/oranges = 3/8\n    equation1 = Eq(apples * 8, oranges * 3)\n\n    # New ratio equation after 1 apple is removed: (apples - 1)/oranges = 1/3\n    equation2 = Eq((apples - 1) * 3, oranges)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be from 1 to 9\n        for tens in range(0, 10):  # Tens digit can be from 0 to 9\n            for units in range(0, 10):  # Units digit can be from 0 to 9\n                if hundreds > tens and units > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    # Define a function to calculate subfactorials, also known as derangements\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    # Calculate the subfactorial (derangement) for 6 students\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_spend = 48\n    notebook_cost = 3\n    color_pencil_cost = 9\n    total_classmates = 10\n\n    for i in range(total_classmates + 1):\n        if notebook_cost * i + color_pencil_cost * (total_classmates - i) == total_spend:\n            return total_classmates - i\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    current_term = 56\n    common_ratio = 2\n    next_term = current_term * common_ratio\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first even number be x\n    # Then the 6 consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10\n    # The sum of these numbers is 6x + 30 = 510\n    # Solve 6x + 30 = 510 for x\n    x = (510 - 30) / 6\n\n    # Now calculate the mean and median of the numbers\n    mean = (x + (x + 2) + (x + 4) + (x + 6) + (x + 8) + (x + 10)) / 6\n    # Since the numbers are consecutive even numbers, median is the average of the 3rd and 4th numbers\n    median = ((x + 4) + (x + 6)) / 2\n\n    # Find the difference between the mean and the median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    factorial_50 = factorial(50)\n    ans = count_trailing_zeros(factorial_50)\n\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for num in range(3, 48):\n        count += str(num).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    helen_original = 18\n    oliver_original = 22\n    card_difference_after = 10\n\n    # Let's denote the cards transferred from Oliver to Helen as x\n    # The equation will be: helen_original + x = oliver_original - x + card_difference_after\n    # This simplifies to: 2x = card_difference_after + oliver_original - helen_original\n    # Solving for x gives us the number of cards transferred\n    x = (card_difference_after + oliver_original - helen_original) / 2\n\n    # Then we can calculate the final number of cards Helen has\n    helen_now = helen_original + x\n\n    return helen_now\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n\n    total_value = A + B + C\n\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    starting_height = 12\n    climb_up = 23\n    climb_down = -31\n    climb_up_again = 17\n\n    current_height = starting_height + climb_up + climb_down + climb_up_again\n    return current_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n    \n    N = 5**100\n    num_digits = int(math.log10(N)) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of mangoes and strawberries\n    mangoes, strawberries = symbols('mangoes strawberries')\n\n    # Equation 1: After giving away 900g of mangoes, the mass of strawberries is twice that of mangoes\n    equation1 = Eq(strawberries, 2 * (mangoes - 900))\n\n    # Equation 2: There was 448g more mangoes than strawberries originally\n    equation2 = Eq(mangoes, strawberries + 448)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mangoes, strawberries))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let's denote the first number in the sequence as \"n\".\n    # The consecutive numbers would be: n, n+1, n+2, n+3, n+4.\n    # We know the sum of these 5 numbers is 40:\n    # n + (n + 1) + (n + 2) + (n + 3) + (n + 4) = 40\n\n    # Now, we can set up the equation and solve for \"n\":\n    # 5n + (1+2+3+4) = 40\n    # 5n + 10 = 40\n    # 5n = 40 - 10\n    # 5n = 30\n    # n = 30 / 5\n    # n = 6\n\n    # So, the smallest number is 6.\n    n = 6\n    return n\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99  # Natural numbers from 1 to 99\n    prime_numbers = 25  # Given number of prime numbers\n    # Subtracting the count of prime numbers and 1 (since 1 is neither prime nor composite)\n    composite_numbers = total_numbers - prime_numbers - 1\n    \n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['0', '1', '3', '4', '6', '8', '9']\n    multiples_of_9 = []\n\n    for perm in permutations(digits, 5):\n        num = int(''.join(perm))\n        if num % 9 == 0 and num >= 10000:\n            multiples_of_9.append(num)\n\n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n\n    ans = (M - N) // 9\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n    sweets_left = total_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    largest_number = int(''.join(sorted(digits, reverse=True)))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    ans = 4400004\n    return ans\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39  # the fourth number\n    n12 = 57  # the twelfth number\n\n    # The common difference d can be found by the formula: d = (n12 - n4) / (12 - 4)\n    d = (n12 - n4) / (12 - 4)\n\n    # The first term a1 can be found by the formula: a1 = n4 - 3 * d\n    a1 = n4 - 3 * d\n\n    return a1\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n    correct_sum = incorrect_sum - (incorrect_addend - correct_addend)\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(x**2 + x, 380)\n\n    solutions = solve(equation, x)\n    \n    # Find the positive integer solution\n    for sol in solutions:\n        if sol.is_real and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calculate the total amount of salt from both solutions\n    total_salt = (30 * 0.30) + (20 * 0.20)\n    \n    # Calculate the total weight of the solution without the added water\n    total_weight_without_water = 30 + 20\n    \n    # Assume 'x' is the amount of water Amy needs to add to get a 10% salt solution\n    # The new total weight of the solution will be total_weight_without_water + x\n    # The new concentration of the solution should be (total_salt / (total_weight_without_water + x)) * 100% = 10%\n    # Solve the equation for x:\n    x = (total_salt * 10) / 10 - total_weight_without_water\n\n    return x\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # Johnson's speed in meters per minute\n    vicky_speed = 250    # Vicky's speed in meters per minute\n    race_distance = 3000  # Race distance in meters\n\n    # Time taken for Johnson to complete the race\n    johnson_time = race_distance / johnson_speed\n    # Time taken for Vicky to complete the race\n    vicky_time = race_distance / vicky_speed\n\n    # Difference in time taken to complete the race\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To make sure we get 29 balls of one color, 28 balls of another color and 10 balls of the last color,\n    # We have to consider the worst case scenario for each color.\n    # If we are taking balls randomly, the final ball that ensures we have 29 of one color \n    # could be the very last ball we draw.\n    \n    # For blue balls, the worst case to get 29 blue balls is to get all 40 red and 30 white balls first.\n    blue_worst_case = 40 + 30 + 29\n    \n    # For red balls, similarly, the worst case to get 28 red balls is to get all 80 blue and 30 white balls first.\n    red_worst_case = 80 + 30 + 28\n    \n    # For white balls, the worst case to get 10 white balls is to get all 80 blue and 40 red balls first.\n    white_worst_case = 80 + 40 + 10\n    \n    # The minimum number of balls we need to catch to ensure the condition is the minimum of these worst cases.\n    min_balls = min(blue_worst_case, red_worst_case, white_worst_case)\n    \n    return min_balls\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # You need to draw at least 3 cards to get 3 with the same number. However,\n    # This might not guarantee that you have 3 of the same number since you could\n    # have 2 cards of one number and 1 of another.\n    # We want the worst case scenario where you draw the most number of cards\n    # without having 3 of the same number.\n    # Thus, you can draw 2 cards of each number without getting 3 of the same,\n    # which is 2 cards per 13 numbers, so 2 * 13 = 26.\n    # After drawing 26 cards, you have 2 of each number, so the next card\n    # you draw must be the third of some number.\n\n    # Number of cards drawn so far.\n    cards_drawn = 26  \n    # Add one to account for the next card ensuring at least 3 cards of the same number.\n    return cards_drawn + 1\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))\n    num_primes = len(primes)\n    total_numbers = 20\n    \n    proportion = num_primes / total_numbers\n    \n    return round(proportion, 2)\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    number1 = 3.2\n    number2 = 5.6\n    average = (number1 + number2) / 2\n    return average\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_known = sum(known_numbers)\n    total_numbers_count = 8\n    mean_value = 8\n    total_sum = total_numbers_count * mean_value\n    \n    missing_number = total_sum - total_known\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume in litres transferred from each bottle\n    x = symbols('x')\n    \n    # After transferring x litres, Bottle A has (5 - x) litres with 10% lime and x litres with 20% lime\n    # Bottle B has (3 - x) litres with 20% lime and x litres with 10% lime\n    # The final concentrations in both bottles should be the same\n    # Set up the equations for lime amount in each bottle\n    \n    bottle_A_lime = (5 - x) * 0.1 + x * 0.2\n    bottle_B_lime = (3 - x) * 0.2 + x * 0.1\n    \n    # Set up the equation for the concentrations to be equal\n    equation = Eq(bottle_A_lime / 5, bottle_B_lime / 3)\n    \n    # Solving the equation\n    volume_transferred = solve(equation, x)\n    \n    return volume_transferred[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = 'ABCDEFGH'\n    # We consider D and E as one unit DE, and F and G as one unit FG\n    for perm in permutations(students.replace('D', '').replace('F', '')):\n        perm = ''.join(perm)\n        # insert DE in all possible positions\n        for i in range(1, len(perm) -1):\n            # insert FG in all possible positions\n            for j in range(1, len(perm)):\n                if i == j:  # D and E cannot be in the same place as F and G\n                    continue\n                lineup = perm[:i] + 'DE' + perm[i:j] + 'FG' + perm[j:]\n\n                # check if C is in middle of A and B, considering all possibilities:\n                # ABC, BAC, ACB, BCA, CAB, CBA\n                if 'ACB' in lineup or 'BCA' in lineup or 'CAB' in lineup or 'CBA' in lineup or 'ABC' in lineup or 'BAC' in lineup:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    total_combinations = len(notebook_prices) * len(calendar_prices)\n    return total_combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows = (students + tables_per_row - 1) // tables_per_row\n\n    return rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    hundreds_digit = (3 * 123 + 2 * 31 + 2) % 1000 // 100\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given values\n    painting_length = 90\n    length_ratio = 5\n    breadth_ratio = 2\n    lego_length_smaller = 70.5\n    \n    # Calculate the breadth of the painting using the ratio\n    painting_breadth = (breadth_ratio / length_ratio) * painting_length\n    \n    # Calculate the length of the Lego\n    lego_length = painting_length - lego_length_smaller\n    \n    # Calculate the breadth of the lego using the same ratio as the painting\n    lego_breadth = (breadth_ratio / length_ratio) * lego_length\n    \n    # Using the floor function to find the maximum size as an integer\n    from math import floor\n    max_lego_breadth = floor(lego_breadth)\n    \n    return max_lego_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5  # Sum of all coins\n    coins = [50, 20, 10, 5]\n    \n    for lost_coin in coins:\n        remaining_amount = total_amount - lost_coin\n        if remaining_amount == 2 * (total_amount / 2 - remaining_amount):\n            return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_speed = 8  # m/s\n    jaan_distance = 200  # m\n    kane_distance_behind = 12.5  # m\n    kane_distance = jaan_distance - kane_distance_behind\n\n    jaan_time = jaan_distance / jaan_speed\n    kane_speed = kane_distance / jaan_time\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_cost = 5.50\n    milk_cost = 3.75\n    voucher = 1.10\n\n    total_cost = cake_cost + milk_cost\n    actual_payment = total_cost - voucher\n\n    return actual_payment\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_per_hour = 12\n    overtime_rate = 1.25\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n\n    total_pay = (normal_hours * normal_pay_per_hour) + (overtime_hours * normal_pay_per_hour * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time (in hours) John takes to paint the house by himself\n    # Let y be the time (in hours) Raj takes to paint the house by himself\n    # Let z be the time (in hours) Pete takes to paint the house by himself\n\n    x, y, z = symbols('x y z')\n\n    # All three can finish the job in 1 hour means their combined work rate is 1 job per hour.\n    equation1 = Eq(1/x + 1/y + 1/z, 1)\n\n    # John and Raj can finish the job in 1 hour and 12 minutes, i.e., 1.2 hours.\n    # Their combined work rate is 1 job per 1.2 hours.\n    equation2 = Eq(1/x + 1/y, 1/1.2)\n\n    # Raj and Pete can finish the job in 1 hour and 30 minutes, i.e., 1.5 hours.\n    # Their combined work rate is 1 job per 1.5 hours.\n    equation3 = Eq(1/y + 1/z, 1/1.5)\n\n    # Solving the system of equations for x, y, and z.\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Extracting the solution for y (Raj's time to paint the house by himself) and converting it to minutes\n    raj_time = solutions[y] * 60\n\n    return raj_time\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the current ages of the younger and elder brothers\n    younger, elder = symbols('younger elder')\n    \n    # The sum of the current ages of the two brothers is 42\n    equation1 = Eq(younger + elder, 42)\n    \n    # A few years ago, the age of the elder brother equals the current age of the younger brother\n    # and the younger brother was half the elder's current age\n    # Let's denote the 'few years ago' as 'diff'\n    diff = elder - younger\n    \n    # The equation describing the second condition\n    equation2 = Eq(younger - diff, elder / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger, elder))\n    \n    # We want to find the current age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Each '928' segment contributes 9 + 2 + 8 = 19 to the overall digit sum.\n    # For a 99-digit number consisting exclusively of '928' segments, \n    # we have 99 / 3 = 33 such segments.\n    num_segments = 99 // 3\n    digit_sum_per_segment = 9 + 2 + 8\n    total_digit_sum = num_segments * digit_sum_per_segment\n    \n    # Calculate the remainder when the digit sum is divided by 9.\n    remainder = total_digit_sum % 9\n\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # We take the worst-case scenario approach, where we have to ensure that we take at least three of the same color.\n    \n    # If we take 2 of each color, we can still end up with no 3 balls of the same color.\n    # Therefore, we need to take one more ball to ensure that we have at least three of the same color.\n    \n    # There are 8 white, 7 blue, 5 green, and 2 orange balls.\n    # Taking 2 from each color gives us 2*4 = 8 balls.\n    # Taking one more will guarantee 3 of the same color.\n    # So we must take 8 + 1 = 9 balls to ensure we have at least three of the same color.\n    \n    balls_to_take = 2 * 4 + 1\n    \n    return balls_to_take\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):  # Tens digit cannot be 0 for a two-digit number\n        for ones in range(10):  # Ones digit can be from 0 to 9\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == 3 + (original_number // 3):\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n\n    return int(total_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let's denote George's current age as G and his sister's current age as S.\n    # According to the problem, G + S = 34\n\n    # In x years, George's age will be G + x and his sister's age will be S + x.\n    # Their sum of ages in x years will be: (G + x) + (S + x) = 40\n    \n    # We can simplify this equation:\n    # G + S + 2x = 40\n    # but we know that G + S = 34 from the initial condition, so substitue that in:\n    # 34 + 2x = 40\n    # Now we can solve for x:\n    # 2x = 40 - 34\n    # 2x = 6\n    # x = 6 / 2\n    # x = 3\n    \n    # Thus, in 3 years, the sum of their ages will be 40.\n    return 3\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let x be the length of the rope required for one complete turn around the tree\n    # If 10 turns leave 3 meters, then 10x is 3 meters longer than the length of the rope\n    # If 12 turns lack 3 meters, then the length of the rope is 3 meters shorter than 12x\n    # So, we can establish the equation: 10x + 3 = 12x - 3\n\n    # Let's isolate x in the equation\n    x = (3 + 3) / (12 - 10)\n\n    # We need to find out how many meters 8 turns will leave, which is the length of the rope - 8x\n    leftover = (10 * x + 3) - (8 * x)\n\n    return leftover\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # If we denote the number of teams as n, then each team will play n-1 home games and n-1 away games,\n    # resulting in a total of 2*(n-1) games for each of the n teams. However, each game is counted twice\n    # because it involves two teams. So to get the total number of unique matches, the number of games\n    # played must be divided by 2.\n    \n    # So we have the equation:\n    # n * (n - 1) = total_matches * 2\n    # n^2 - n - total_matches * 2 = 0\n    # We need to find the integer solution for n.\n    \n    # Import the sqrt function from math module to calculate the square root\n    from math import sqrt\n\n    # total matches in the league are given as\n    total_matches = 30\n    \n    # Considering each match is played twice (home and away), we need to\n    # divide the total matches by 2 to calculate combinations of teams.\n    # nC2 * 2 = total_matches\n    # nC2 = total_matches / 2\n    # n * (n - 1) / 2 = total_matches / 2\n    # n^2 - n = total_matches\n    # Solving this quadratic equation for n:\n    \n    # Define the coefficients for the quadratic equation\n    a = 1\n    b = -1\n    c = -total_matches\n    \n    # Calcualte the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the two solutions for n using the quadratic formula\n    solution1 = (-b + sqrt(discriminant)) / (2*a)\n    solution2 = (-b - sqrt(discriminant)) / (2*a)\n    \n    # Since number of teams cannot be negative, we consider only the positive solution\n    num_of_teams = int(solution1)\n    \n    return num_of_teams\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure at least 5 people from one country,\n    # if we have 4 people from each of the 11 countries, that's 44 people (11 * 4).\n    # Adding one more person would force at least one country to have 5 participants.\n    # so the calculation is (4 people * 11 countries) + 1\n    ans = (4 * 11) + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x_val, y_val, z_val = solutions[x], solutions[y], solutions[z]\n\n    return x_val + y_val + z_val\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = -(-students // tables_per_row)\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0 and B != 0:  # Assuming the first digits A and B can't be zero due to being the first digits of a number\n            S1 = (A*10 + B)*10 + C\n            S2 = (B*10 + C)*10 + D\n            S3 = (C*10 + D)*10 + A\n            S4 = (D*10 + A)*10 + B\n            if S1 + S2 + S3 + S4 == (A + B + C + D)*1111:\n                return A + B + C + D\n    return \"No solution found\"\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = total_numbers - 500  # As numbers start from 1500 to 1999\n    probability = numbers_greater_than_1499 / total_numbers\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the total amount of money and the amount spent\n    total_amount = symbols('total_amount')\n    \n    # Create the equation based on the problem description\n    bag_cost = total_amount * 3 / 7\n    remaining_money = total_amount - bag_cost\n    equation = Eq(bag_cost - remaining_money, 12)\n    \n    # Solve for the total amount of money\n    solutions = solve(equation, total_amount)\n\n    # Calculate the amount spent on the bag based on the total amount\n    amount_spent = solutions[0] * 3 / 7\n    \n    return amount_spent\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    result = (28 - 6) / 2\n    return result\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    youngest_three_sum = 42\n    # Since the dwarfs are born in consecutive years, their ages form an arithmetic sequence.\n    # The sum of the three youngest dwarfs' ages is the sum of the first three terms of the sequence.\n\n    # Let the age of the middle dwarf (4th) be m. Then the ages of the youngest three are (m-1), (m-2), and m.\n    # Their sum is: (m-2) + (m-1) + m = 3m - 3\n\n    # Now we can find the middle term (age of the 4th dwarf):\n    middle_age = youngest_three_sum // 3 + 1  # adding 1 because 3m - 3 = 42, m = (42 + 3) / 3\n\n    # The ages of the oldest three dwarfs will be m+1, m+2 and m+3\n    oldest_three_sum = (middle_age + 1) + (middle_age + 2) + (middle_age + 3)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    def new_operation(number, operand):\n        return number - sum(range(1, operand))\n\n    ans = new_operation(111, 7)\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5  # Since we are stepping by multiples of 5, we divide 100 by 5\n    sum_of_squares = ((5**2) * (1/6) * n * (n + 1) * (2*n + 1))\n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let the number of toys made by factories A, B, and C be a, b, and c respectively.\n    # We have the following equations:\n    # a + b + c = 659\n    # a + b = 447\n    # b + c = 335\n    \n    # Now we can substitute the value of a+b from the second equation into the first one:\n    # 447 + c = 659\n    # Solving for c gives us:\n    c = 659 - 447\n    \n    # Now we substitute the value of c back into the third equation to find b:\n    # b = 335 - c\n    b = 335 - c  # c has been calculated in the previous step\n    \n    return b\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    file, storybook = symbols('file storybook')\n    \n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n    \n    solutions = solve((equation1, equation2), (file, storybook))\n    \n    total_cost = solutions[file] + solutions[storybook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_avg = 13\n    additional_trays = 1\n    additional_sausages = 21\n\n    total_sausages_initial = initial_trays * initial_avg\n    total_sausages_now = total_sausages_initial + additional_sausages\n    total_trays_now = initial_trays + additional_trays\n    new_avg = total_sausages_now / total_trays_now\n\n    return new_avg\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq(girls + boys, 500)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # hundreds digit must be 1-9\n        for tens in range(0, 10): # tens digit must be 0-9\n            for units in range(1, 10): # units digit must be 1-9\n                if tens < hundreds and tens < units: # high-low-high condition\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Let's denote the length of the second bridge as 'x'.\n    \n    # The speed of the train can be calculated by the distance it crosses and the time it takes\n    # when crossing the first bridge. The distance includes the length of the bridge and the train itself.\n\n    # Speed = Distance / Time\n    # For the first bridge:\n    # Speed = (Length of the first bridge + Length of train) / Time to cross\n    speed = (263 + 137) / 20  # in meters per second\n\n    # Now, using the same speed, we can find the length of the second bridge.\n    # The time includes the train fully crossing the bridge, which means the train's length is also covered.\n\n    # Length of the second bridge + Length of train = Speed * Time to cross\n    # Rearrange the equation to solve for the length of the second bridge 'x':\n    # x = Speed * Time to cross second bridge - Length of train\n    length_of_second_bridge = speed * 27 - 137  # in meters\n\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    each_should_have = total_money // 2\n    money_to_give = brenda_money - each_should_have\n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    # Total number of balls\n    equation1 = Eq(blue + red, 125)\n\n    # The fraction relationship between blue and red balls\n    equation2 = Eq(2/5 * blue, 3/5 * red)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (blue, red))\n\n    blue_balls = solutions[blue]\n    red_balls = solutions[red]\n    \n    return blue_balls - red_balls\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "def solution():\n    from math import factorial as fact\n    \n    # Calculate the combinations for giving at least one book to each student\n    # We need to take 3 books out of 7, give one to each student, then the left over books can be divided in any way\n    # This is a problem of distributing n identical items to r distinct groups\n    # The number of ways to do this is C(n-1, r-1), where n is the number of items and r is the number of groups\n    # In our case, after giving each student one book, we have 4 books remaining to be distributed among 3 students\n    # So n = 4 + 3 - 1 = 6 (total positions) and r = 3 (students)\n    # The answer is then C(6, 2) multiplied by the permutations of giving the first three books, which is P(7, 3)\n    \n    # Calculate C(6, 2) = 6! / (2!(6-2)!)\n    combinations = fact(6) // (fact(2) * fact(6-2))\n    \n    # Calculate P(7, 3) = 7! / (7-3)!\n    permutations = fact(7) // fact(7-3)\n    \n    ans = combinations * permutations\n    return ans\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, handbags = symbols('watches handbags')\n\n    equation1 = Eq(3 * watches + 5 * handbags, 915)\n    equation2 = Eq(4 * watches + 2 * handbags, 632)\n\n    solutions = solve((equation1, equation2), (watches, handbags))\n\n    total_cost = 2 * solutions[watches] + 2 * solutions[handbags]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    min_pieces = 1  # Start by giving the first child 1 piece of candy\n    candies_left = 88 - min_pieces\n    children_left = 8 - 1  # There are 7 children left after giving candy to the first child\n    \n    # Give each remaining child one more piece than the previous\n    # Start with second child, end with the one before the last\n    for i in range(1, children_left):\n        min_pieces += 1\n        candies_left -= min_pieces\n    \n    # The last child gets all the remaining candies\n    max_pieces_for_last_child = candies_left\n    \n    return max_pieces_for_last_child\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n    return percent_discount\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    daughter_age_in_1996 = 40\n    difference_in_years = 2008 - 1996\n    grandmother_age_when_daughter_born = grandmother_age_in_2008 - (daughter_age_in_1996 + difference_in_years)\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4 / 5\n    return ans\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Treat A and B as a single entity since they want to stand next to each other\n    # There will be 7 entities to arrange (A&B together and the 6 other individuals)\n    total_arrangements = factorial(7)\n\n    # A and B can switch positions within their pair, so we need to multiply by 2\n    total_arrangements *= 2\n\n    # Now we subtract the cases where C and D are next to each other\n    # If C and D are a pair, then we have 6 entities to arrange (C&D pair + 5 individuals)\n    forbidden_arrangements = factorial(6)\n\n    # C and D can also switch places, so we multiply by 2 again\n    forbidden_arrangements *= 2\n\n    # The total number of valid arrangements is total arrangements minus forbidden arrangements\n    ans = total_arrangements - forbidden_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 3 people who can receive the first pass from A.\n    first_pass = 3\n    \n    # After the first pass, the receiver cannot pass the ball back to A, so there are 2 choices.\n    second_pass = 2\n    \n    # After the second pass, the ball cannot be passed back to the person who just passed it,\n    # so it can only be passed to the other two people, one of whom is A.\n    # Since we want the ball back to A, only 1 choice here.\n    third_pass = 1\n    \n    # Multiply the number of ways for each pass to get the total number of different methods\n    ans = first_pass * second_pass * third_pass\n    return ans\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_solution_weight = 300\n    sugar_concentration = 0.35\n    sugar_weight = total_solution_weight * sugar_concentration\n    water_weight = total_solution_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # 12^50 > k^75\n    # Taking the 50th root on both sides:\n    # 12 > k^(75/50)\n    # 12 > k^(3/2)\n    # Taking the square on both sides:\n    # 144 > k^3\n    # Now need to find the largest whole number k such that k^3 < 144\n\n    k = int(144 ** (1/3))  # Taking cube root and converting to int gets the floor value\n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    initial_oranges = 133 + 34 - 25\n    return initial_oranges\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    # Total pieces of candy\n    total_candy = 36\n    \n    # Define the amount both would eat for both to have the same amount of candy left\n    # Let x be the number of candies both eat\n    # Then Mike will have 6 + x candies left, and Valeria will have 22 + x candies left\n    \n    # We set up the equation based on the total amount of candy\n    # Mike's initial amount + Valeria's initial amount = Total candies\n    # (6 + x) + (22 + x) = total_candy\n    \n    # Let's solve for x\n    x = symbols('x')\n    equation = Eq((6 + x) + (22 + x), total_candy)\n    solution_to_x = solve(equation, x)[0]\n\n    # Calculate Valeria's initial amount of candy\n    valeria_candy = 22 + solution_to_x\n\n    return valeria_candy\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    first_psi = psi_operation(14, 13)\n    ans = psi_operation(first_psi, 12)\n\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    # From 1 to 9, we have 9 digits (each number is a single digit)\n    single_digit_numbers = 9\n    # From 10 to 19, we have 10 numbers, and each number consists of 2 digits\n    double_digit_numbers = 10 * 2\n    # The total number of digits in the sequence\n    total_digits = single_digit_numbers + double_digit_numbers\n\n    return total_digits\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    number_of_girls = solve(equation, girls)\n\n    return number_of_girls[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Define the number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Calculate the total legs of cats, dogs, and the rabbit\n    total_legs = 2 * legs_per_cat + 2 * legs_per_dog + 1 * legs_per_rabbit\n    \n    # Subtract the known legs from the total legs to find the legs of birds\n    legs_of_birds = 28 - total_legs\n    \n    # Divide the remaining legs by the number of legs per bird to find the number of birds\n    num_birds = legs_of_birds / legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_interval = 12 / 4  # time to walk one flight of stairs\n    flights_in_30_minutes = 30 / time_for_one_interval  # flights that can be walked in 30 minutes\n    return int(flights_in_30_minutes)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    ans = cookies_per_gram * 21.6\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define our symbols\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    # Now we set up our equations based on the problem statement\n    equation1 = Eq(handbag, wallet + 300)  # handbag costs $300 more than wallet\n    equation2 = Eq(wallet, belt + 54)      # wallet costs $54 more than belt\n    equation3 = Eq(handbag + wallet + belt, 840)  # total cost is $840\n\n    # We solve the equations\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Initially, there are 5 people and it takes 6 hours to paint the fence.\n    # The rate of work done by one person per hour is (1 fence) / (5 people * 6 hours)\n    rate_per_person = 1 / (5 * 6)\n    \n    # The neighbour's fence is twice as long, so the work to be done is 2 fences.\n    # She wants it to be completed in less than 5 hours, let's call the number of people she needs 'n'\n    # So, the total work rate needed is (2 fences) / (<5 hours)\n    # Since it has to be less than 5 hours, the actual maximum time can be slightly less, say, x, where x < 5\n    # Hence, the required rate becomes (2 fences) / (n * x hours)\n    \n    # Equating the work rates:\n    # (1 person's rate) * (n people) = (2 fences) / (x hours)\n    # => n = (2 fences) / (rate_per_person * x)\n    \n    # We need to find the minimum 'n' such that x < 5\n    # Let's iterate through values from 4.9 down to 4 looking for the minimum 'n'\n    minimum_people = None\n    for x in range(49, 39, -1):   # We start from 4.9 because it is less than 5\n        x /= 10  # Convert to float\n        n = 2 / (rate_per_person * x)\n        if minimum_people is None or n < minimum_people:\n            minimum_people = n\n    \n    # Since the number of people must be a whole number, we take the ceiling of the minimum_people\n    from math import ceil\n    minimum_people = ceil(minimum_people)\n    \n    return minimum_people\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert the octal number to integer in base 10\n    N = int('12345654321', 8)\n    \n    # Calculate the remainder of N divided by 7 and 9\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum of the remainders\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    added_years = 3 + 4  # 3 years ago and 4 years in the future\n\n    combined_age_in_four_years = combined_age_three_years_ago + 2 * added_years\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2*book + 3*magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return float(solutions[magazine])\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = n * (n + 1) * (n + 2) // 3\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n    num = 2016\n    factors = set()\n    \n    # Find all factors of the number\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n\n    # Count perfect squares among the factors\n    count = 0\n    for factor in factors:\n        if math.sqrt(factor).is_integer():\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    sum_of_three = 60\n    # Let the first number be n, the second will be n+1, the third n+2\n    # Their sum is 3n + 3 = 60\n    n = (sum_of_three - 3) // 3\n    # The largest number will be n+2\n    return n + 2\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    \n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Worst case scenario: Annabella takes out all shirts that are not yellow first\n    orange = 6\n    pink = 4\n    brown = 12\n    # To ensure she gets 1 yellow shirt, she must take out all non-yellow shirts plus one more\n    non_yellow = orange + pink + brown\n    ans = non_yellow + 1\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division to get number of full packs needed\n\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        num1 = 100 * A + 10 * B + A\n        num2 = 100 * C + 10 * D + C\n        if num1 + num2 == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # The given arithmetic operation can be simplified by adding the fractional parts and the whole number parts separately.\n    fractional_part = 4/5 * 5  # 4/5 added 5 times, which equals 4\n    whole_number_part = 9 + 99 + 199 + 2999 + 39999 + 1  # Adding all the whole numbers together.\n    ans = fractional_part + whole_number_part  # Combining the fractional part with the whole number part.\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    total_solution_weight = sugar_weight + 170\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Since the sequence seems to be decreasing, let's find the differences between the terms\n    difference1 = 80 - 73  # Difference between third and fourth term\n    difference2 = 73 - 66  # Difference between fourth and fifth term\n\n    # We assume that the differences between the terms follow a pattern. Given that the two calculated\n    # differences are 7 and 7, respectively, it is likely that the differences are constant. \n    # Hence, we apply the same difference to find the missing second term.\n    missing_term = 94 - difference1  # Difference applied to the first term to find the missing second term\n\n    return missing_term\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    age = symbols('age')\n    equations = [\n        Eq(age % 2, 1),\n        Eq(age % 3, 1),\n        Eq(age % 4, 1),\n        Eq(age % 6, 1),\n        Eq(age % 7, 0),\n    ]\n    ans = solve(equations, age)\n    return min(ans)  # Since there may be more than one solution, we are interested in the smallest positive integer.\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    bruno_position_from_front = 9\n\n    bruno_position_from_end = total_people - bruno_position_from_front + 1\n\n    return bruno_position_from_end\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    num_wine_glasses = 25\n    num_tumblers = 12\n    carton_ml = 1000\n\n    total_juice_ml = (wine_glass_ml * num_wine_glasses) + (tumbler_ml * num_tumblers)\n    num_cartons = total_juice_ml / carton_ml\n\n    return int(num_cartons) if total_juice_ml % carton_ml == 0 else int(num_cartons) + 1\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    # Let the common ratio number be x.\n    # Therefore, the number of avocados, peaches, and lemons initially were 2x, 9x, and 8x respectively.\n    # After selling, the fruits left were (2x - 52) avocados, (9x - 12) peaches, and (8x - 60) lemons.\n\n    # Given that the new ratio of peaches to lemons is 6:5,\n    # (9x - 12)/(8x - 60) = 6/5\n    # Cross-multiplying gives us:\n    # 5*(9x - 12) = 6*(8x - 60)\n\n    # Solve for x:\n    x = symbols('x')\n    equation = Eq(5*(9*x - 12), 6*(8*x - 60))\n\n    # Solve the equation to get x\n    solution_x = solve(equation, x)[0]  # Take the first solution\n\n    # Calculate the number of avocados, peaches, and lemons left using the value of x\n    avocados_left = 2*solution_x - 52\n    peaches_left = 9*solution_x - 12\n    lemons_left = 8*solution_x - 60\n\n    # The total number of fruits left at the end is the sum of the fruits left\n    total_fruits_left = avocados_left + peaches_left + lemons_left\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Finding the last digit of a large exponent can be simplified by examining the pattern in the powers \n    # of 2 because the last digit will repeat in a cycle (cycle length for base 2 is 4, i.e., 2, 4, 8, 6).\n    \n    # Create a list for the last digit of powers of 2\n    last_digits = [2, 4, 8, 6]\n    \n    # Count of total number of 2's being multiplied\n    count_of_twos = 859433\n    \n    # Find the position of the last digit in our last_digits list.\n    # \"-1\" is to adjust the digit index because Python is 0-indexed.\n    position = (count_of_twos - 1) % len(last_digits)\n    \n    # Return the last digit from the pattern list for the given position\n    return last_digits[position]\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count_facing_teacher = 0\n    for i in range(1, 61):\n        if i % 3 == 0 and i % 5 == 0:\n            # if multiple of both 3 and 5 (i.e., 15), the student will end up facing away, since they turn around twice.\n            continue\n        elif i % 3 == 0 or i % 5 == 0:\n            # if multiple of 3 or 5, but not both, the student will turn around.\n            continue\n        else:\n            # the student is not multiple of 3 or 5, facing the teacher.\n            count_facing_teacher += 1\n    return count_facing_teacher\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n\n    digits = '1234567'\n    max_divisible_number = 0\n\n    for i in range(len(digits), 0, -1):\n        for p in permutations(digits, i):\n            num = int(''.join(p))\n            if all(num % int(d) == 0 for d in p):\n                max_divisible_number = max(max_divisible_number, num)\n                break\n        if max_divisible_number > 0:\n            break\n\n    return max_divisible_number\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    lcm_of_2_4_6 = 12  # since LCM(2, 4, 6) = 2 * 2 * 3\n    remainder_when_div_by_7 = 5\n\n    age = lcm_of_2_4_6 + 1  # Since there is always a remainder of 1 when divided by 2, 4, or 6\n    \n    # We need to find the number that leaves a remainder of 5 when divided by 7\n    # and also leaves a remainder of 1 when divided by 2, 4, 6 (i.e. can be represented as 12n + 1)\n    while age % 7 != remainder_when_div_by_7:\n        age += lcm_of_2_4_6  # we increment age by the LCM of 2, 4, and 6 until the condition is met\n\n    return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the number of sweets Jess and Jill have\n    jess, jill = symbols('jess jill')\n    \n    # Equation before Jill gives sweets to Jess\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # Equation after Jill gives sweets to Jess\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # Jess's sweets + Jill's sweets\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    # Starting from 121 since we want a number above 120\n    for dividend in range(121, 121 + divisor):\n        if dividend % divisor == remainder:\n            return dividend\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for length in range(1, 900//2 + 2):\n        # Sum of 'length' consecutive odd numbers starting from 1 is 'length^2'.\n        # '900' is sum of 'length' consecutive odd numbers if\n        # '900 - length^2' is non-negative and divisible by '2 * length'.\n        if (900 - length ** 2) >= 0 and (900 - length ** 2) % (2 * length) == 0:\n            max_length = length\n    return max_length\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let's denote:\n    # A = weight of Adam\n    # B = weight of Ben\n    # C = weight of Carl\n\n    # According to the problem, we have the following three equations:\n    # A + B = 102 kg\n    # B + C = 97 kg\n    # A + C = 93 kg\n\n    # To find the total weight, let's sum all three equations to get:\n    # 2 * (A + B + C) = 102 + 97 + 93\n\n    total_double_weight = 102 + 97 + 93\n    total_weight = total_double_weight / 2  # Dividing by 2 to get the total weight of Adam, Ben, and Carl\n\n    return total_weight\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    ans = min(numbers)\n    return ans\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    metres = 2\n    centimetres = 2\n    height_in_metres = metres + (centimetres / 100.0)\n    return height_in_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_increase = 0.25\n    third_test_decrease = 0.20\n\n    second_test_score = first_test_score * (1 + second_test_increase)\n    third_test_score = second_test_score * (1 - third_test_decrease)\n    \n    total_score = first_test_score + second_test_score + third_test_score\n    \n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    years = 2\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january = 13\n    february = 18\n    march = 5\n    mean_saving = (january + february + march) / 3\n    return mean_saving\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(7, 106, 7))\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_amount = 4.22 + 31.49 + 0.76\n    return sum_amount\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    # Check if the number 233 is prime, because if it's prime, it cannot be divided evenly between students\n    # (except when there's 1 student or 233 students, which are excluded by the problem conditions).\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # The answer is whether 233 is a prime number or not,\n    # if it is, then Michael is correct, otherwise, he is not.\n    return is_prime(233)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 \n    if 56 % 4 != 0:\n        first_multiple += 1\n    last_multiple = 92 // 4\n    \n    number_of_multiples = last_multiple - first_multiple + 1\n    if number_of_multiples == 9:\n        correct = True\n    else:\n        correct = False\n    \n    return number_of_multiples, correct\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    return comb(15, 2)\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h, k = symbols('h k')  # h for hippo, k for kangaroo\n    equation1 = Eq(h, k + 45)\n    equation2 = Eq(20*h, 10*20*k)\n\n    solutions = solve((equation1, equation2), (h, k))\n\n    return solutions[h] * 20\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Distance between the two towns\n    distance = 144\n\n    # Speed of the ship in still water\n    speed_ship = 15\n\n    # Time taken to travel downstream from Magic Town to Super Town\n    time_downstream = 8\n\n    # Speed of the stream\n    speed_stream = distance / time_downstream - speed_ship\n\n    # Speed of the ship upstream (against the stream)\n    speed_upstream = speed_ship - speed_stream\n\n    # Time taken to travel upstream from Super Town to Magic Town\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_waited_at = datetime.strptime(\"3:15 PM\", \"%I:%M %p\")\n    meet_time = john_waited_at + wait_time\n    return meet_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            ans += (i/j)\n    return ans\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure you have at least two balls of the same color, you would need to\n    # consider the worst-case scenario. In the worst case, you would take out\n    # one ball of each color before being certain to get a pair of the same color.\n    # Since there are only two colors, you only need to take out three balls in total\n    # to be certain of having at least two of the same color.\n    \n    return 3\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement\n    # x is the number of pencils\n    # x % 2 = 1, x % 3 = 2, x % 4 = 3, x % 5 = 4, x % 6 = 5\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n\n    # Solve the system using Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # Using the Pigeonhole Principle\n    num_zodiac_signs = 12\n    num_students_to_guarantee = (num_zodiac_signs - 1) * 11 + 1\n\n    return num_students_to_guarantee\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rates of A and B\n    rate_a = 1 / 15\n    rate_b = 1 / 20\n\n    # Combined work for 2 days\n    work_done = 2 * (rate_a + rate_b)\n\n    # Remaining work\n    remaining_work = 1 - work_done\n\n    # Days for A to finish the remaining work\n    days_for_a = remaining_work / rate_a\n\n    return days_for_a\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3*x + 5 - 20\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # In the worst case scenario, Ada would take out all the yellow and white balls first.\n    yellow = 5\n    white = 15\n    # To ensure she gets 10 balls of the same colour, she needs 1 more than 9 black balls\n    # because she might have taken out all yellow and white balls.\n    black_needed = 10\n    # Total balls taken out is the sum of all yellow, all white, and the black needed.\n    total_balls_taken_out = yellow + white + black_needed\n    \n    return total_balls_taken_out\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % total_children\n    if last_child == 0:  # In case the remainder is 0, the last child is the 9th child\n        last_child = total_children\n\n    return last_child\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    spaghetti_interval = 7\n    apple_pie_interval = 3\n\n    # Find the least common multiple (LCM) to determine when Florence will eat both on the same day again\n    lcm = spaghetti_interval * apple_pie_interval // math.gcd(spaghetti_interval, apple_pie_interval)\n    \n    # She eats both on 2nd January and will again after LCM days\n    next_both_day = 2 + lcm\n\n    return next_both_day\n\nimport math\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    both = children_with_dogs + children_with_cats - total_children\n\n    return both\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total number of permutations without any restrictions (7!).\n    total_permutations = factorial(7)\n    \n    # Calculate the wrong permutations where F and G are together, (6! * 2!).\n    wrong_permutations_fg = factorial(6) * factorial(2)\n    \n    # Deduct the wrong permutations from the total to get the permutations where F and G are not together.\n    correct_permutations_without_bc = total_permutations - wrong_permutations_fg\n    \n    # Calculate the number of ways A, B, C can be arranged so A is in between B and C.\n    # This is always 2 (BAC or CAB).\n    ways_a_between_bc = 2\n    \n    # Since DE always want to stand together, we can treat them as a single person.\n    # So we have 5 \"people\" to consider now: DE, (A|BC), F, G.\n    # We calculate all possible permutations of these 5 \"people\" (5!).\n    permutations_with_de = factorial(5)\n    \n    # The final answer is the permutations where F and G are not together, times 2 (for BAC or CAB),\n    # times 2 again because DE can stand as ED as well.\n    ans = correct_permutations_without_bc * ways_a_between_bc * permutations_with_de * factorial(2)\n    \n    return ans\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(1,11):\n        for j in range(1, 11):\n            sum_of_numbers += (10 * (i-1)) + j\n    return sum_of_numbers\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3  # January to March\n\n    total_saving = monthly_saving * total_months\n\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n    \n    number_of_cloaks_lengthwise = total_length // cloak_length\n    number_of_cloaks_widthwise = total_width // cloak_width\n    \n    total_number_of_cloaks = number_of_cloaks_lengthwise * number_of_cloaks_widthwise\n    \n    return total_number_of_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Travel outward at 20 mph for 120 miles\n    time_to_go = 120 / 20\n    \n    # The expected total time for the trip at an average speed of 30 mph\n    total_expected_time = 240 / 30\n    \n    # Calculate the time allowed for the return trip\n    time_to_return = total_expected_time - time_to_go\n    \n    # Calculate the speed needed to return in the calculated time\n    speed_to_return = 120 / time_to_return\n    \n    return speed_to_return\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of skirts as 's' and shirts as 's - 36'\n    s = symbols('s')\n\n    # Natalie sold 2/3 of her shirts, so 1/3 is left\n    shirts_left = (s - 36) / 3\n\n    # She sold 5/6 of her skirts, so 1/6 is left\n    skirts_left = s / 6\n\n    # The total left is 72\n    equation = Eq(shirts_left + skirts_left, 72)\n\n    # Solve for the number of skirts 's'\n    solution = solve(equation, (s))\n\n    # Take only the positive solution since the number of skirts can't be negative\n    skirts_at_first = max(solution)\n\n    return skirts_at_first\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    \n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 35):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make one cut. \n    # To cut a rod into two pieces, we make 1 cut.\n    # To cut a rod into 5 pieces, we need to make 4 cuts.\n    # Therefore, for 4 cuts, it will take 4 * 2 = 8 minutes.\n    return 4 * 2\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    # Define the remainder conditions\n    conditions = [(5, 1), (6, 2), (11, 7)]\n    \n    # Initialize possible number of biscuits\n    num_biscuits = 401  # Start from 401 since it is the minimum number that satisfies the first condition (400 + 1)\n\n    while True:\n        # Check all conditions\n        if all(num_biscuits % div == rem for div, rem in conditions):\n            # If all conditions are satisfied, break the loop\n            break\n        # Otherwise, check the next number\n        num_biscuits += 1\n\n    # The answer is the number of biscuits found\n    return num_biscuits\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    number_of_numbers = 3\n\n    # Calculate the total sum of the initial three numbers\n    initial_total = initial_average * number_of_numbers\n\n    # Calculate the new total required for the final average\n    final_total = final_average * (number_of_numbers + 1)\n\n    # Calculate the number that must be added\n    number_to_add = final_total - initial_total\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of marbles each person has\n    jovan, sean, herman = symbols('jovan sean herman')\n\n    # Creating the equation based on the information given\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(herman, jovan + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n\n    # Calculate the total number of marbles\n    total_marbles = sum(solutions.values())\n\n    return total_marbles\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_hay = 12 * 15  # The total amount of hay is enough for 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # Calculate how many days the hay would last for 20 horses\n    return days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_series\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    # Based on the given rule, if a = 1, b = 2, c = 3, then overline(abc) = 123.\n    \n    # From the equation overline(14m) = 8 * overline(1m) - 3,\n    # we expand the left side as 140 + m,\n    # and the right side as 8 * (10 + m) - 3.\n    \n    # Setting up the equation 140 + m = 8 * (10 + m) - 3\n    # We can simplify this equation to find m\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n\n    # Solve the equation for m\n    solution = solve(equation, m)\n\n    # Since we need the value of m, we return the solution.\n    return solution[m]\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    num1, num2, num3 = 6, 9, 12\n    ans = gcd(gcd(num1, num2), num3)\n    return ans\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = total_expressway / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    price_per_set_of_shoes = 78\n    price_per_pair_of_socks = 12\n    number_of_aliens = 6\n    legs_per_alien = 5\n\n    total_cost_shoes = price_per_set_of_shoes * number_of_aliens\n    total_cost_socks = price_per_pair_of_socks * number_of_aliens * legs_per_alien // 2  # Divided by 2 because there are 2 socks in a pair\n\n    total_cost = total_cost_shoes + total_cost_socks\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n    \n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mean = np.mean(data)\n    deviations = np.abs(data - mean)\n    mad = np.mean(deviations)\n    \n    return mad\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for their masses:\n    John, Andy, Charles = symbols('John Andy Charles')\n    \n    # Given equations:\n    equation1 = Eq(John + Andy, 105)\n    equation2 = Eq(John + Charles, 67)\n    equation3 = Eq(Andy, 3 * Charles)\n    \n    # Solve the equations:\n    solutions = solve((equation1, equation2, equation3), (John, Andy, Charles))\n    \n    # Calculate total mass of the three boys:\n    total_mass = solutions[John] + solutions[Andy] + solutions[Charles]\n    \n    return total_mass\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    ways = (13 + 3 - 1)\n    from math import factorial\n    ans = factorial(ways) // (factorial(3 - 1) * factorial(13))\n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    for i in range(1000, 10000):\n        str_i = str(i)\n        new_number = int(str_i[-1] + str_i[1:-1] + str_i[0])\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    ans = [n for n in [49, 80, 32, 66, 8, 58] if (n - 4) % 7 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # Distance between each tree\n    distance_between_trees = 20 / (5 - 1)\n    \n    # Total number of intervals is one less than the number of trees\n    number_of_intervals = 200 / distance_between_trees\n    \n    # Total number of trees\n    number_of_trees = number_of_intervals + 1\n    \n    return int(number_of_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d represent the number of $0.50 cookies David had, and j represent the number of $0.10 cookies Jeremy had.\n    d, j = symbols('d j')\n\n    # David's cookies cost 3 times as much as Jeremy's, so we have the equation: 0.50 * d = 3 * 0.10 * j\n    equation1 = Eq(0.50 * d, 3 * 0.10 * j)\n\n    # Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies, we denote the number of $0.50 cookies Jeremy had as (3/5) * j\n    # The number of $0.50 cookies in total is d + (3/5) * j, and there are 60 fewer $0.10 cookies than $0.50 cookies:\n    # j = d + (3/5) * j - 60\n    # Simplifying we get the second equation as: 2/5 * j = d - 60\n    equation2 = Eq(2/5 * j, d - 60)\n\n    # David had only $0.50 cookies, so d = 1\n    equation3 = Eq(d, 1)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, j))\n\n    # Jeremy's cookies worth: Jeremy's cookies were $0.10 each and he had j of them.\n    jeremy_cookies_worth = 0.10 * solutions[j]\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    # Calculate all possible products for Candy (2 cards) and Candice (3 cards)\n    candy_products = {i[0] * i[1] for i in combinations(cards, 2)}\n    candice_products = {i[0] * i[1] * i[2] for i in combinations(cards, 3)}\n    # Find common products\n    common_products = candy_products.intersection(candice_products)\n    # Find which card is not used in generating these common products\n    unused_cards = set(cards)\n    for product in common_products:\n        for card in cards:\n            if product % card == 0:\n                unused_cards.discard(card)\n    \n    return unused_cards.pop()\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # The rate at which both taps together fill the tank\n    \n    # Time to fill half the tank\n    time_to_fill_half = 0.5 / combined_rate\n    \n    return time_to_fill_half\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    apples = total_fruits * fraction_apples\n    pears = total_fruits - apples\n    \n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    girls = 17\n    for boys_per_side in range(1, girls):\n        if (boys_per_side + 1) ** 2 - boys_per_side ** 2 == girls:\n            boys = boys_per_side ** 2\n            break\n    return boys\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    first_expression = (36 * 21) / (6 * 7)\n    second_expression = 36 * 21 / 6 * 7\n    third_expression = 36 / 6 * 21 * 7\n    fourth_expression = 6 * 7 * 21\n\n    return (first_expression == second_expression == third_expression == fourth_expression,\n            first_expression, second_expression, third_expression, fourth_expression)\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = 2 * jane_age\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n\n    david_position = ann_position + people_between + 1  # 1 for Ann's position\n    total_people = david_position + 1  # 1 for David's position as he is second last\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    def count_8s(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('8')\n        return count\n\n    # Since we know the last page contains the digit '8', we start from the largest number with '8' as the last digit,\n    # and we go down from there to find the exact page.\n    last_page = 100  # Start from a number greater than 22 to ensure our while loop will check enough pages.\n    while count_8s(last_page) != 22:\n        last_page -= 1\n\n    return last_page\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    third_number = 555 - first_number - second_number\n    \n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    return (9 * 8) / 12\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_height = 9\n    climb_up = 3\n    slide_down = 1\n    net_distance = climb_up - slide_down\n    \n    days = (total_height - climb_up) // net_distance\n    if (total_height - climb_up) % net_distance != 0:\n        days = days + 1\n    \n    # Add the final day for the last climb\n    days += 1\n\n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using Inclusion-Exclusion Principle\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_highest_mountain = 8848\n    \n    difference = height_world_highest_mountain - height_england_mountain\n    \n    return difference\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Total of each color\n    total_blue = 80\n    total_red = 40\n    total_white = 30\n\n    # To ensure 29 balls of one color, we need to consider the worst case.\n    # If we pick all balls of other two colors first\n    max_other_colors = total_red + total_white\n\n    # Then pick one more ball to guarantee we have 29 of the same color\n    balls_needed = max_other_colors + 1\n\n    # To ensure 28 balls of another color, again consider the worst case.\n    # If we pick all 29 balls of one color and all of the third color\n    # After that, we pick one more ball to ensure we have 28 of another color\n    if total_blue > total_red:\n        balls_needed += total_white + 1\n    else:\n        balls_needed += total_blue + 1\n\n    # To ensure 10 balls of the last color, consider the worst case:\n    # If we have picked all from the other two colors, then picking\n    # through the last set of balls before getting to 10 of the remaining color\n    # would require picking 9 of the last color\n    balls_needed += 9\n\n    return balls_needed\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import primerange\n\n    # Define the variables to store information\n    primes = list(primerange(1, 50))  # prime numbers less than 50\n    \n    # Iterate through the prime numbers to find the number satisfying the clues\n    for prime in primes:\n        if (prime + 2) % 3 == 0 and (prime - 2) % 5 == 0:\n            return prime\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 10! and onwards will always have a zero as the last digit due to the presence of factors 2 and 5, \n    # (which give a multiple of 10), the last digit of any factorial greater than 9 will always be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts Alicia, Beth, and Casey had initially\n    a, b, c = symbols('a b c')\n\n    # Create the equations based on the problem statement\n    # After spending, they all end up with the same amount, so:\n    # a - 1/2 * a = b - 60 = c - 3 * (1/2 * a)\n    equation1 = Eq(a - 1/2 * a, b - 60)\n    equation2 = Eq(a - 1/2 * a, c - 3 * (1/2 * a))\n    equation3 = Eq(a + b + c, 900)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    # Since the numerators are in the ratio of 6:30, which simplifies to 1:5\n    # The denominators must also be in the same ratio to maintain equality of fractions\n    denominator_ratio = 30 / 6\n    # Calculate the denominator for the second fraction\n    denominator = 20 * denominator_ratio\n\n    return int(denominator)\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    from sympy import factorint\n\n    # The amount of zeros at the end of a product is determined by the number of pairs of 5 and 2,\n    # since 10 consists of 5 and 2.\n    # Calculate prime factorization\n    factors = factorint(2*2*3*8*5*5*5)\n\n    # The number of zeros at the end is the minimum of the count of prime factors 5 and 2.\n    num_zeros = min(factors.get(2, 0), factors.get(5, 0))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Work backwards from the final answer to the original number\n    final_answer = 1\n    add_eight = final_answer + 8\n    multiply_eight = add_eight * 8\n    divide_three = multiply_eight / 3\n    original_number = divide_three - 6\n    \n    return original_number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    equation = Eq(original_number + 10 * original_number, 253)\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(1, 90):\n        if num % 9 == 0 and isprime(num + 1) and (num - 1) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    result = 18 / 100 * 250\n    return result\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    # 4 men can be arranged in 4! ways\n    men_arrangements = factorial(4)\n    # 4 women can be arranged in 4! ways\n    women_arrangements = factorial(4)\n    \n    # Men and women can alternate in 2 ways: Man-Woman-Man-Woman or Woman-Man-Woman-Man\n    alternating_ways = 2\n    \n    # Total number of ways = ways to arrange men * ways to arrange women * ways they can alternate\n    total_ways = men_arrangements * women_arrangements * alternating_ways\n    return total_ways\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    common_difference = 6\n\n    # Use the sum formula for arithmetic sequences: n/2 * (2a + (n-1)d) = S\n    # where n is the number of terms, a is the first term, d is the common difference, S is the sum of terms.\n    # We have S = 100, n = 5, d = 6, we need to find a.\n    # 5/2 * (2a + (5-1)6) = 100\n    # (2a + 24) = 100 * 2 / 5\n    # 2a = (200 / 5) - 24\n    # 2a = 40 - 24\n    # a = (40 - 24) / 2\n    # a = 16 / 2\n    # a = 8\n\n    first_day_cookies = (total_cookies * 2 / days - common_difference * (days - 1)) / 2\n\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(len(\"HAPPY\"))\n    repeat_p = factorial(\"HAPPY\".count(\"P\"))\n\n    ways = total_letters // repeat_p\n\n    return ways\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_3_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ashley, crystal, justin = symbols('ashley crystal justin')\n    \n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n    \n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n    \n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    fraction_boys = 2 / 5\n    total_students = girls / (1 - fraction_boys)\n    boys = total_students * fraction_boys\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(96)\n    total_factors = 1\n    for power in factors.values():\n        total_factors *= (power + 1)\n    return total_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Peter and John themselves are also in the line\n    total_people = people_in_front_of_peter + people_behind_john + 2\n    \n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.1 * 0.6\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # 12 noon in 24-hour format\n    flight_duration = 4  # duration of flight in hours\n    st_petersburg_time_difference = 3  # St Petersburg is 3 hours ahead of England\n\n    arrival_time = (departure_time + flight_duration + st_petersburg_time_difference) % 24\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):\n        for O in range(10):\n            if len(set(str(N) + str(O))) == 2:\n                NO = int(f\"{N}{O}\")\n                ON = int(f\"{O}{N}\")\n                if (NO + ON) == 121:\n                    return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([50-48+46-44+42-40+38-36+34-32])\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Number of colors\n    num_colors = 3\n    # Maximum socks of different colors she can get without forming a pair\n    max_different_socks = num_colors\n    # To ensure at least one pair, she needs to get one sock more than the possible different colors\n    socks_needed_for_pair = max_different_socks + 1\n    \n    return socks_needed_for_pair\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    weight_in_kg = 2.5\n    weight_in_g = weight_in_kg * kg_to_g\n    return weight_in_g\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n    \n    return num\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km on the ground is represented by 5 cm on the map\n    distance_on_map_cm = 12  # distance between two villages on the map in cm\n    distance_on_ground_km = distance_on_map_cm * scale_ratio  # distance on the ground in km\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    ans = 1\n    for i in range(1, 26):  # Only compute half the terms due to symmetry\n        ans *= ((1 / (i + 1)) - (1 / (50 - i)))\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n\n    # Let's denote the number of boys as b and the number of girls as g.\n    # We know that 4 sweets were taken by each boy and 12 sweets were taken by each girl.\n    # We also know that 3/8 of the total children (b + g) were boys.\n    # Therefore, (5/8)*(b+g) must be the number of girls since boys and girls make up the whole class.\n    # We have the following equations:\n    # 4b + 12g = total_sweets\n    # b = (3/8) * (b + g)\n\n    # Rearranging the second equation, we get:\n    # b = (3/8) * (b + g) => 8b = 3b + 3g => 5b = 3g => g = (5/3) * b\n\n    # Now we substitute g in the first equation:\n    # 4b + 12*(5/3)*b = total_sweets => 4b + 20b = total_sweets => 24b = total_sweets\n\n    # Solving for the number of boys b:\n    b = total_sweets / 24\n\n    # Now we solve for the number of girls g:\n    g = (5 / 3) * b\n\n    return int(g)\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    speed_mps = speed_kmh * 1000 / 3600\n    time_seconds = 24\n    distance_meters = speed_mps * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variable for the number\n    number = symbols('number')\n\n    # Set up the equations based on the problem description\n    eq1 = Eq(number % 7, 5)  # Remainder of 5 when divided by 7\n    eq2 = Eq(number % 8, 6)  # Remainder of 6 when divided by 8\n    eq3 = Eq(number % 10, 6)  # Remainder of 6 when divided by 10\n    eq4 = Eq((number // 6) + (number // 7) + (number // 8), 265)  # Sum of quotients\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), number)\n\n    # Return the correct solution (assuming there is one)\n    return solutions[0]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n    \n    both_classes = math_students + language_students - total_students\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # In the context of number theory, a positive integer is called a composite number if it has at least one divisor other\n    # than 1 and itself. This means that all positive integers greater than 1 that are not prime are indeed composite numbers.\n    # However, the definition of a composite number does not include the number 1, because 1 has exactly one positive divisor,\n    # which is itself, making it neither prime nor composite.\n    \n    # Therefore, to determine if Pip's statement is entirely correct, we should check if the number 1 is considered a composite number.\n    \n    # Using the definition, determine if 1 is a composite number.\n    if 1 > 1 and all(1 % i == 0 for i in range(2, int(1**0.5)+1)):\n        is_composite = True\n    else:\n        is_composite = False  # 1 is neither prime nor composite\n\n    # The explanation needs to account for the exclusion of the number 1 from the set of composite numbers.\n    ans = not is_composite  # Pip's statement is not completely correct because it misses this subtlety about number 1.\n    return ans\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    eq = Eq((1/3 - 0.25) * x, 36)\n\n    ans = solve(eq, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 10):\n        product *= Fraction(1, 1) + Fraction(1, i)\n    return float(product)\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef solution():\n    n = 40309\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    sweets_shared = total_sweets - kasia_keeps\n    sweets_per_friend = sweets_shared // 2\n    joan_receives = (2 / 7) * sweets_per_friend\n    lucie_keeps = sweets_per_friend - joan_receives\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):            # Each group must have at least 1 balloon\n        for x2 in range(1, 12 - x1):   # Remaining balloons after the first group\n            for x3 in range(1, 12 - x1 - x2):  # Remaining balloons after the second group\n                x4 = 12 - x1 - x2 - x3  # All remaining balloons go to the fourth group\n                if x4 > x3:             # Each group must have a different number of balloons\n                    count += 1           # A valid distribution has been found\n    return count\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    for n_boys in range(1, 100):  # Assuming the number of boys won't exceed 100 layers\n        n_girls = n_boys - 1  # Girls layer will be one less as they are inside boys layer\n        \n        total_boys = (2*n_boys - 1)**2\n        total_girls = (2*n_girls)**2 if n_girls > 0 else 0\n\n        if total_boys - total_girls == 52:\n            total_students = total_boys + total_girls\n            return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n\n    number_of_adults = (total_people * ratio_adults) // ratio_sum\n\n    return number_of_adults\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's represent the whole pension as 1 (a whole).\n\n    # On Friday he spends one quarter, so he spends 1/4 and has 3/4 left.\n    friday_spent = 1/4\n    remaining_after_friday = 1 - friday_spent\n\n    # On Saturday he spends one third of what remains, which is 1/3 of 3/4.\n    saturday_spent = (1/3) * remaining_after_friday\n    remaining_after_saturday = remaining_after_friday - saturday_spent\n\n    # The fraction left for the rest of the week is what remains after Saturday.\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # 5-litre pail overflows 4 litres of water, meaning the tank capacity is 5 - 4\n    capacity_with_5_litre_pail = 5 - 4\n    \n    # 3-litre pail needs another 4 pails of water to fill\n    # This means that 3 * 5 litres are needed to fill the tank since the last pail will not be full\n    capacity_with_3_litre_pail = 3 * 5\n    \n    # The two capacities must be equal as we're talking about the same fish tank\n    # Therefore, we can set up an equation and solve for the total capacity\n    tank_capacity = capacity_with_5_litre_pail * capacity_with_3_litre_pail\n    \n    return tank_capacity\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    school_bags = 3\n    pencil_boxes = 4\n    combinations = school_bags * pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    # Define the recurring decimal part\n    recurring_part = \"6129043\"\n    \n    # Calculate the sum of the first 212 digits of the decimal part\n    sum_digits = sum(int(recurring_part[i % len(recurring_part)]) for i in range(212))\n    \n    return sum_digits\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for i in range(1, 31):\n        if i * i + i + i + 1 == 31 + i * i:\n            return (i + 1) * (i + 1)\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    # One willow between each ginkgo tree means one less willow tree than the number of ginkgo trees\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n    \n    # Given ratio apple : pears = 3 : 4\n    ratio_equation = Eq(apples / pears, 3 / 4)\n    \n    # After 36 pears are replaced by 36 apples, apples become 1.5 of pears\n    new_ratio_equation = Eq((apples + 36) / (pears - 36), 1.5)\n    \n    # Solve the equations\n    solutions = solve((ratio_equation, new_ratio_equation), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    ans = 36 / 100 * 50\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    zeros = 28\n    count_5 = 0\n    n = 0\n    while count_5 < zeros:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_5 += 1\n            temp //= 5\n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    resulting_amount = (2/3) * 729\n    return resulting_amount\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    num_people = 12\n    # Calculate handshakes using the formula for combinations: n*(n-1)/2\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    total_lemonade_price = lemonade_price * 5\n    total_chocolate_bar_price = chocolate_bar_price * 6\n    total_cost = total_lemonade_price + total_chocolate_bar_price\n    ten_pounds = 10\n    change = ten_pounds - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for Sam's current age\n    sam = symbols('sam')\n\n    # Equation to represent the given age relationship\n    # Sam's age in four years is sam + 4\n    # Sam's age four years ago is sam - 4\n    equation = Eq(sam + 4, 2 * (sam - 4))\n\n    # Solve the equation\n    sam_age = solve(equation, sam)\n\n    # Return Sam's current age\n    return sam_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # If Daniel picks one sock of each color he will have:\n    # 1 yellow, 1 green, 1 white, 1 red and 1 black sock.\n    # That's 5 socks, but no two pairs of matching socks.\n    \n    # To be sure to have one pair, he must pick another sock.\n    # In the worst case, this sock is not matching any of the previously picked socks.\n    # So, after picking 6 socks, he is guaranteed to have at least one pair.\n    \n    # Now, to make sure he gets two pairs, in the worst case scenario,\n    # he will pick different socks until he is forced to pick a matching pair,\n    # remembering that he already has 1 pair.\n    \n    # He could pick a different sock of the remaining 3 colors (green, white, and red),\n    # giving him 1 pair of yellow and 3 more single socks of different colors.\n    # Therefore, after 9 picks, he still has only one pair.\n    \n    # By picking the 10th sock, no matter what color it is, he will have his second matching pair.\n    \n    return 10 \n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    all_possible_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    for number in all_possible_numbers:\n        if number % 2 != 0:\n            return number\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # RAINBOW has 7 letters\n    total_vowels = 3   # A, I, O\n    total_consonants = 4  # R, N, B, W\n\n    # Calculate the number of ways to arrange consonants: P_RNBW_ \n    ways_consonants = factorial(total_consonants)\n    \n    # Calculate the number of ways to arrange vowels in the remaining places: _AIO_ \n    ways_vowels = factorial(total_vowels)\n    \n    # Calculate the number of places the vowels can be arranged\n    places_for_vowels = total_consonants + 1  # Places between and on the outside of consonants\n\n    # Calculate the number of ways to arrange vowels in these places\n    vowels_arrangements = factorial(places_for_vowels) // factorial(places_for_vowels - total_vowels)\n    \n    # The total arrangements without the restriction\n    total_arrangements = factorial(total_letters)\n    \n    # The arrangements with vowels always together (treat all vowels as a single entity)\n    vowels_together = ways_vowels * factorial(total_consonants + 1)\n\n    # Finally, subtract the count of invalid (vowels together) arrangements from the total\n    valid_arrangements = total_arrangements - vowels_together\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let's denote:\n    # a = first term\n    # d = common difference\n    # S_n = Sum of first n terms of an arithmetic progression\n    # S_n = n/2 * (2a + (n-1)d)\n    # We have two equations based on the given data:\n    # S_10 = 10/2 * (2a + (10-1)d) = 20\n    # S_30 = 30/2 * (2a + (30-1)d) = 90\n    \n    # From the first equation\n    # 5 * (2a + 9d) = 20\n    # 2a + 9d = 4   ...(1)\n    \n    # From the second equation\n    # 15 * (2a + 29d) = 90\n    # 2a + 29d = 6  ...(2)\n    \n    # Subtract equation (1) from equation (2)\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 20d = 2\n    # d = 2 / 20\n    # d = 1/10\n    \n    # The common difference is 1/10\n    d = 1/10\n    return d\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((2, 3), (3, 5), (4, 7))\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4\n    penny_stickers = (total_stickers * 4) / ratio_sum\n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_km_per_hr = 3.6\n    time_sec = 300\n\n    # Convert speed to meters per second (1 km/hr = 1000 m / 3600 sec)\n    speed_m_per_sec = speed_km_per_hr * (1000 / 3600)\n\n    # Calculate distance in meters\n    distance_m = speed_m_per_sec * time_sec\n\n    return distance_m\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    chicken_feet = 2 * solutions[chickens]\n    goat_feet = 4 * solutions[goats]\n    cow_feet = 4 * solutions[cows]\n\n    total_feet = chicken_feet + goat_feet + cow_feet\n\n    return total_feet\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    closest_num = None\n    min_difference = float('inf')\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        difference = abs(num - 2978)\n        if difference < min_difference:\n            min_difference = difference\n            closest_num = num\n\n    return closest_num\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Jack sold 40 apples which is 4/7 of the apples he brought\n    # Let the number of apples he brought be x\n    # 4/7 * x = 40\n    x = 40 * 7 / 4\n\n    # It's stated that he brought 1/2 of all apples he has\n    # x = 1/2 * total_number_of_apples\n    # total_number_of_apples = 2 * x\n    total_number_of_apples = 2 * x\n    \n    return int(total_number_of_apples)\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    return (1 + 10 + 45 + 120 + 210 + 252 + 210 + 120 + 45 + 10 + 1)\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Calculate number of rows using the formula for finding the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    # Calculate sum of seats using the formula for the sum of an arithmetic sequence:\n    # sum = (n / 2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):  # 500 is inclusive here\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Calculate the sum of the first 2 numbers using their average\n    sum_of_first_2 = 10 * 2\n    \n    # Calculate the sum of the last 2 numbers using their average\n    sum_of_last_2 = 22 * 2\n    \n    # Calculate the sum of the first and last numbers using their average\n    sum_of_first_and_last = 14 * 2\n    \n    # Calculate the total sum of all numbers (sum of first 2 + sum of last 2)\n    total_sum = sum_of_first_2 + sum_of_last_2\n    \n    # Subtract the sum of the first and last from the total sum to get the sum of the two middle numbers\n    sum_of_middle_2 = total_sum - sum_of_first_and_last\n    \n    # Find the average of the two middle numbers\n    average_of_middle_2 = sum_of_middle_2 / 2\n    \n    return average_of_middle_2\n\n# Store the result in 'ans' variable\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    number = (result + 10) / 2\n    return number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n    total_AB = 2 * average_AB\n    total_ABC = total_AB + C\n    average_ABC = total_ABC / 3\n    return average_ABC\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age_days = (death_date - birth_date).days\n    \n    # Calculating age in years, considering the 365 days per year in that period\n    # (ignoring the introduction of the Gregorian calendar reform in 1582 for simplicity)\n    age_years = age_days // 365\n\n    return age_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    coins_total = 37\n    children_count = 5\n\n    remainder = coins_total % children_count\n\n    return remainder\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # We are looking for two 2-digit multiples of 7\n    # whose product is 7007. We'll start with prime factorization of 7007.\n    factor = 7\n    remaining = 7007\n    factors = []\n    \n    # Perform the prime factorization\n    while remaining != 1:\n        if remaining % factor == 0:\n            remaining /= factor\n            factors.append(factor)\n        else:\n            factor += 1  # Increment to check the next possible factor\n    \n    # We now have the prime factors and need to find the two 2-digit numbers\n    # We know they have to be multiples of 7, so they can be formed by multiplying\n    # the prime factors together in different ways\n    for i in range(len(factors)):\n        num1 = factors[i]\n        for j in range(i + 1, len(factors)):\n            num2 = num1 * factors[j]\n            num3 = 7007 // num2\n            if num2 >= 10 and num2 < 100 and num3 >= 10 and num3 < 100:\n                return num2 + num3\n                \n    return None\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    \n    # Using the Pigeonhole Principle\n    most_cakes = (total_cakes + layers - 1) // layers\n\n    return most_cakes\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    # Initialize max_side_length to the lowest possible integer square root of the rope length\n    max_side_length = 1\n    \n    # Incrementally check for the highest possible square side that is less than or equal to the rope length\n    while (max_side_length + 1)**2 <= 23:\n        max_side_length += 1\n    \n    # Calculate the length of the rope that needs to be cut\n    rope_cut_length = max_side_length**2\n\n    return rope_cut_length\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let C be the total ages of Chinese teachers,\n    # E be the total ages of English teachers,\n    # M be the total ages of Mathematics teachers,\n    # and T be the total number of teachers for each subject\n\n    # Based on the given information:\n    # Average age for Chinese and English teachers is 34, so (C + E) / (2*T) = 34\n    # Average age for English and Mathematics teachers is 36, so (E + M) / (2*T) = 36\n    # Average age for Chinese and Mathematics teachers is 44, so (C + M) / (2*T) = 44\n\n    # Multiplying each equation by 2*T to clear the division, we get:\n    # C + E = 34 * 2 * T\n    # E + M = 36 * 2 * T\n    # C + M = 44 * 2 * T\n\n    # Rearranging the terms to solve for C, E, and M:\n    # C + E + E + M = 34*2*T + 36*2*T\n    # C + E + C + M = 34*2*T + 44*2*T\n    # E + M + C + M = 36*2*T + 44*2*T\n\n    # Adding all three equations, we get:\n    # 2*(C + E + M) = (34 + 36 + 44)*2*T\n    \n    # Now we calculate the total of the three averages\n    total_three_averages = 34 + 36 + 44  # Total of given averages\n    average_all_subjects = total_three_averages / 3  # Average for 3 teachers\n\n    return average_all_subjects\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = (21 + 1) * 7 - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac_part = ((2018 + i) / 5) - ((2018 + i) // 5)\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # number of total boxes\n    total_boxes = 10\n    \n    # first term of arithmetic progression\n    first_term = 11\n    \n    # the common difference we need to find, represented by a symbol\n    d = symbols('d')\n    \n    # equation based on the sum of an arithmetic series\n    # sum = n/2 * (2*a1 + (n - 1)*d), where a1 is the first term and d is the common difference\n    equation = Eq(total_boxes / 2 * (2 * first_term + (total_boxes - 1) * d), 425)\n    \n    # solve for common difference\n    common_difference = solve(equation, d)[0]\n    \n    return common_difference\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    \n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n    \n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    total_sum = solutions[chelsia] + solutions[benson]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula: S = (n/2)(a1 + an)\n    # For consecutive odd numbers, the common difference (d) is 2.\n    # We know the sum S is 357, and the number of terms n is 7.\n    # Let's denote the first term of the sequence as a1.\n    # Then the last term an can be expressed as a1 + 6 * d, because there are 7 terms, so 6 differences.\n\n    # From the formula for the sum of the sequence, we get:\n    # 357 = (7/2)(a1 + a1 + 6 * 2)\n    # 357 = (7/2)(2 * a1 + 12)\n    # 357 = 7 * a1 + 42\n    # 357 - 42 = 7 * a1\n    # (357 - 42) / 7 = a1\n    \n    a1 = (357 - 42) / 7\n    return int(a1)\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    repeats = factorial(2)  # for the two '1's\n    ans = factorial(total_digits) // repeats\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_reciprocal = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_reciprocal\n    ans = int(A)\n    return ans\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all([num % 3 == 2, num % 4 == 2, num % 5 == 2, num % 7 == 5]):\n            return num\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x1 != x2 and x1 != x3 and x2 != x3:\n                count += 1\n    return count // 6 # Dividing by 6 because each combination is counted 6 times due to permutations\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one table and one chair\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n\n    # Equation representing the total cost of tables and chairs\n    total_cost_eq = Eq(5 * table_cost + 12 * chair_cost, 720)\n\n    # Equation representing that each table costs $25 more than each chair\n    table_chair_cost_diff_eq = Eq(table_cost, chair_cost + 25)\n\n    # Solve the system of equations\n    solutions = solve((total_cost_eq, table_chair_cost_diff_eq), (table_cost, chair_cost))\n\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The remainders are the same for all divisors, so we can use the same value (1) for all.\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    # The solve_congruence function from sympy.ntheory.modular is specifically for such CRT problems.\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume Carter's speed to be x m/min\n    carter_speed = symbols('carter_speed')\n    \n    # Martin's speed is 20 m/min faster than Carter\n    martin_speed = carter_speed + 20\n    \n    # Ratio of times for Martin and Carter is 9:13\n    # time = distance/speed -> time can be represented as 1/speed for the same distance\n    # Thus, the ratio of speeds for Martin and Carter is the inverse of the time ratio 13:9\n    equation = Eq(13 * carter_speed, 9 * martin_speed)\n\n    # Solve the equation for Carter's speed\n    solution = solve(equation, carter_speed)\n    return solution[0]\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # Even prime number can only be 2, since any other even number is divisible by 2, and wouldn't be prime\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fred_work_rate = 1 / 9\n    combined_work_rate = 1 / 6\n    george = symbols('george')\n\n    george_work_rate = 1 / george\n    equation = Eq(fred_work_rate + george_work_rate, combined_work_rate)\n\n    george_time = solve(equation, george)[0]\n    return george_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    cloth_used_for_dress = symbols('x')\n    cloth_left = total_cloth - cloth_used_for_dress\n    \n    return cloth_left\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    result = (132 + 68) * (520 - 506)\n    return result\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # We use a variable to represent the minimum number of apples to pick to ensure we have at least\n    # two apples of the same color. We initialize it to 1, since picking one apple doesn't guarantee\n    # two of the same color.\n\n    # According to the pigeonhole principle, in the worst case scenario, we pick 14 red apples and \n    # still have no guarantee of getting 2 apples of the same color. Thus, we must pick one more, which\n    # will definitely be yellow if we have not picked any yellow yet, and gives us a guarantee of\n    # 2 apples of the same color. So, the total number is 14 + 1 (for the yellow) = 15.\n    \n    min_apples_to_pick = 14 + 1\n    return min_apples_to_pick\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n    \n    # Since each person can choose any of the 5 entrances independently,\n    # and the order in which they enter matters, we use permutations.\n    # However, since they can choose the same entrance, it's actually\n    # the number of ways to choose with replacement, which is simply\n    # the number of choices raised to the power of the number of people.\n    ways = entrances ** people\n    \n    return ways\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Assigning number of legs to each animal\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Given number of each animal except birds\n    cats = 2\n    dogs = 2\n    rabbits = 1\n\n    # Calculating the total number of legs of cats, dogs, and rabbits\n    total_legs_without_birds = (cats * cat_legs) + (dogs * dog_legs) + (rabbits * rabbit_legs)\n\n    # Total legs including birds \n    total_legs = 28\n\n    # Finding the number of birds \n    birds = (total_legs - total_legs_without_birds) / bird_legs\n\n    return int(birds)\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let the number of red pens sold be x\n    # Let the initial number of red pens be r and black pens be b\n    # Given final number of red pens: r - x = 20\n    # Given initial ratio r : b = 3 : 7, final ratio after selling x pens (r - x) : (b - x) = 5 : 13\n    # From the final ratio and final red pens we get the following equations:\n    # (r - x) / (b - x) = 5 / 13\n    # r - x = 20\n    \n    # Since we know (r - x) = 20, we can substitute r = 20 + x back into the ratio equation:\n    # (20 + x - x) / (b - x) = 5 / 13 => 20 / (b - x) = 5 / 13\n    # Solving for b - x, we get b - x = 20 * 13 / 5 = 52\n    \n    # Now we have:\n    # r : b = 3 : 7\n    # b = 7r / 3\n    # b - x = 52\n    \n    # But b = 7 * (20 + x) / 3, substituting back into the equation gives us\n    # 7 * (20 + x) / 3 - x = 52\n    # 7 * 20 + 7x - 3x = 156\n    # 7x - 3x = 156 - 7 * 20\n    # 4x = 156 - 140\n    # x = (156 - 140) / 4\n    # x = 16 / 4\n    # x = 4\n\n    # The number of red pens sold (x) is 4.\n\n    return 4\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    numbers = range(1, 201)\n    divisible_by_5 = [num for num in numbers if num % 5 == 0]\n    divisible_by_7 = [num for num in numbers if num % 7 == 0]\n\n    # Use set to remove duplicates\n    union_set = set(divisible_by_5).union(set(divisible_by_7))\n    \n    return len(union_set)\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(11, 20) if 42 % i == 0]\n    return factors_of_42[0] if factors_of_42 else None\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Calculate the value of the house one year ago\n    value_one_year_ago = 10500\n    \n    # Calculate the original value of the house before the increase\n    original_value = value_one_year_ago / 1.05\n    \n    # Calculate the value of the house after the decrease of 5%\n    current_value = value_one_year_ago * (1 - 0.05)\n    \n    # Calculate the profit or loss by comparing the current value with the original value\n    profit_or_loss = current_value - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel = 300\n    bag_weight = 12\n    ans = -(-total_gravel // bag_weight)  # Using ceiling division to get the number of bags\n    return ans\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse the last operation (add 50)\n    final_step = result + 50\n    # Reverse multiplying by 5\n    penultimate_step = final_step // 5\n    # Reverse subtracting 20\n    before_sub_20 = penultimate_step + 20\n    # Reverse multiplying by 5\n    before_mult_5 = before_sub_20 // 5\n    # Reverse adding 6\n    before_add_6 = before_mult_5 - 6\n    # Reverse multiplying by 4\n    initial_month = before_add_6 // 4\n    # Extract the day of birth\n    day_of_birth = penultimate_step % 5\n\n    return (initial_month, day_of_birth)\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]  # Given numbers\n    desired_average = 6  # Desired average\n    total_numbers = 4    # Total numbers including the missing one\n\n    # Sum of the given numbers\n    sum_of_given_numbers = sum(numbers)\n\n    # The formula to calculate sum of all numbers: average * total numbers\n    total_sum = desired_average * total_numbers\n\n    # Finding the missing number by subtracting the sum of given numbers from total sum\n    missing_number = total_sum - sum_of_given_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let pen price be x and ruler price be x + 0.90\n    pen, ruler = symbols('pen ruler')\n    \n    # 9 pens + 2 rulers = 21.60\n    # ruler price = pen price + 0.90\n    equation1 = Eq(9 * pen + 2 * ruler, 21.60)\n    equation2 = Eq(ruler, pen + 0.90)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pen, ruler))\n    \n    # We are interested only in the ruler price\n    return solutions[ruler]\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(1, 50):\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for p in permutations(digits):\n        first_num = int(''.join(p[:3]))\n        second_num = int(''.join(p[3:5]))  # Since the second number must be twice the first number, it can only have at most 2 digits.\n        third_num = int(''.join(p[5:]))    # The third number must be four times the first number, thus can only have 2 digits.\n        \n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    first_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Buy the first cup\n    remaining_money = total_money - first_cup_price\n    # How many refills he can afford\n    num_refills = remaining_money // refill_price\n\n    # Total cups = first cup + number of refills\n    ans = 1 + num_refills\n\n    return ans\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Total peaches eaten by 3 monkeys in 2 days\n    total_peaches_3_monkeys = 96\n\n    # Peaches eaten by 1 monkey in 1 day (unit rate)\n    peaches_per_monkey_per_day = total_peaches_3_monkeys / (3 * 2)\n\n    # Peaches eaten by 5 monkeys in 4 days\n    total_peaches_5_monkeys_4_days = peaches_per_monkey_per_day * 5 * 4\n\n    return total_peaches_5_monkeys_4_days\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # The sequence is an arithmetic progression with an equal difference of 4\n    first_term = 4\n    last_term = 400\n    common_diff = 4\n    \n    # Calculate the number of terms in the sequence from 4 to 400\n    num_forward_terms = (last_term - first_term) // common_diff + 1\n    # The sum of the sequence from 4 to 400\n    sum_forward = (num_forward_terms/2) * (first_term + last_term)\n    \n    # The sequence from 396 to 4 is the same sequence in reverse without the first and last term\n    # So we calculate the number of terms again but we subtract 2 terms (the first and the last)\n    num_backward_terms = num_forward_terms - 2\n    # The sum of the sequence from 396 to 4\n    sum_backward = (num_backward_terms/2) * ((first_term + common_diff) + (last_term - common_diff))\n\n    # The total sum is the sum of both sequences\n    total_sum = sum_forward + sum_backward\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the categories of books: story, comic, science\n    category_arrangements = factorial(3)\n    \n    # For each category, calculate the number of ways to arrange the books within that category\n    story_book_arrangements = factorial(2)\n    comic_book_arrangements = factorial(3)\n    science_book_arrangements = factorial(4)\n    \n    # The total arrangements is the product of the arrangements of categories and the arrangements within each category\n    total_arrangements = (category_arrangements *\n                          story_book_arrangements *\n                          comic_book_arrangements *\n                          science_book_arrangements)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n\n    income = 120000\n    initial_tax_rate = 0.06\n    tax_paid = 10000\n    initial_income_limit = 50000\n\n    initial_tax = initial_income_limit * initial_tax_rate\n    remaining_income = income - initial_income_limit\n\n    equation = Eq(initial_tax + remaining_income * ((initial_tax_rate + T / 100)), tax_paid)\n    \n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n    \n    # Since each friend must get at least 1 ice-cream,\n    # we will first give each friend 1 ice-cream.\n    remaining_ice_creams = 5 - 3\n    \n    # Now we need to distribute the remaining 2 ice-creams among 3 friends.\n    # This problem is equivalent to putting two indistinguishable items\n    # into three distinguishable bins, which can be solved by the\n    # \"stars and bars\" method (combinatorial method).\n\n    # number of bins (friends) - 1\n    bars = 3 - 1\n\n    # The total number of ways is the number of combinations to arrange\n    # the remaining ice-creams (as stars) and the bars.\n    total_ways = comb(remaining_ice_creams + bars, bars)\n\n    return total_ways\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    total_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    total_months = 12\n\n    average_spend = total_spend / total_months\n\n    return average_spend\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3.5/(3*x + 2) + 2/(1.5*x + 1), 4.5/(5 - 6*x) - 3/(2.5 - 3*x))\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    total_sweets_str = '127'  # Since we have 127M as the total sweets, where M is unknown\n    bag_count = 25  # Total number of bags\n\n    # We iterate over possible digits for M, from 0 to 9\n    for M in range(10):\n        total_sweets = int(total_sweets_str + str(M))  # Append M to the total_sweets_str and convert to integer\n        if total_sweets % bag_count == 0:  # Check if it's divisible by bag_count without remainder\n            sweets_per_bag = total_sweets // bag_count  # Calculate sweets per bag\n            return sweets_per_bag  # Return the number of sweets per bag\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # Speed while walking in m/min\n    cycling_speed = 60  # Speed while cycling in m/min\n    # Suppose the distance to the library is d meters.\n    # Time taken to walk to the library = distance/speed = d/walking_speed\n    # Time taken to cycle back from the library = distance/speed = d/cycling_speed\n    # Total time for the trip = d/walking_speed + d/cycling_speed\n    # Average speed = total distance / total time\n    # Here, total distance = d (to the library) + d (from the library) = 2d\n    # Average speed = 2d / (d/walking_speed + d/cycling_speed)\n    # After simplifying, you get:\n    # Average speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n    average_speed = (2 * walking_speed * cycling_speed) / (walking_speed + cycling_speed)\n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # The total cost of 3 servings = money given by mother - 30 cents left\n    # The total cost of 5 servings = total cost of 3 servings + $2.30 (since she was short of this amount for 5 servings)\n    # Therefore, the money given by mother = total cost of 5 servings\n    # We can set up the equation as follows:\n    total_cost_3_servings = 3 * x  # x is the cost per serving\n    money_given = total_cost_3_servings + 30  # 30 cents left after buying 3 servings\n\n    total_cost_5_servings = 5 * x\n    total_cost_5_servings = total_cost_3_servings + 230  # She was short of $2.30 for 5 servings\n\n    # Now we can equate money_given to total_cost_5_servings:\n    # money_given = total_cost_3_servings + 30 = total_cost_3_servings + 230\n    # Solving the equation gives us the cost per serving (x)\n\n    x = (230 - 30) / (5 - 3)  # Simplify the equation to find x\n\n    money_given = total_cost_3_servings + 30\n\n    return money_given / 100  # Convert cents to dollars\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    # This is a direct proportion relationship\n    # From the given ratio 9:x = y:2\n    # We can deduce y in terms of x as y = (2/9)*x\n    # Substituting x = 3 to find y\n    x = 3\n    y = (2/9) * x\n    return y\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '5', '6']\n    odd_numbers = []\n    \n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    \n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # Take 1 green ball and 1 blue ball\n    # To ensure at least two of the same color, you would need to take out one more, regardless of the color.\n    ans = 1 + 1 + 1\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Start with a symbolic variable x\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n\n    # Follow the operations step by step\n    number = x\n    number += 3\n    number *= 2\n    number -= 2\n    number += 10\n    number /= 2\n    number -= x  # subtract the original number\n\n    # Simplify the expression to find the answer\n    ans = simplify(number)\n\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    result = numerator / denominator\n\n    return round(result, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_cost = (20 * 4) + (10 * 5) + (20 * 6)\n    total_books = 20 + 10 + 20\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's designate the number of bracelets Felicia had originally as x.\n    x = symbols('x')\n\n    # Felicia sold 3/5 of her bracelets, so she was left with 2/5 of x.\n    felicia_left = (2/5) * x\n\n    # Janice bought 2/5 of the bracelets Felicia sold, which is 2/5 of (3/5 of x).\n    janice_bought = (2/5) * (3/5) * x\n\n    # The new number of Janice's bracelets is her original amount plus the ones she bought.\n    janice_new_count = 96 + janice_bought\n    \n    # The ratio of the number of Felicia's bracelets to the number of Janice's bracelets became 5:7.\n    # So, we set up the equation 7 * (number of Felicia's bracelets) = 5 * (number of Janice's bracelets).\n    ratio_equation = Eq(7 * felicia_left, 5 * janice_new_count)\n\n    # We solve the system of equations for x.\n    solution = solve(ratio_equation, x)\n\n    # The number of bracelets Janice bought from Felicia is then calculated.\n    janice_bought_value = (2/5) * (3/5) * solution[x]\n\n    return janice_bought_value\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    # Initializing the count to 0\n    count = 0\n    \n    # Iterate over all three-digit numbers\n    for i in range(100, 1000):\n        # Convert the number to a string and count the occurrence of '7'\n        if str(i).count('7') >= 2:\n            count += 1  # If there are at least two '7's, increment the count\n    \n    # Return the total count\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Number of other shirts\n    other_shirts = 6 + 4 + 12  # orange + pink + brown\n    # To ensure getting 1 yellow shirt, Annabella must take out all other shirts plus one yellow shirt\n    min_shirts = other_shirts + 1\n    \n    return min_shirts\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    # cost of a multipack of 15 packets\n    multipack_cost = 3.90\n    # cost per packet when bought individually\n    individual_cost = 0.35\n    # cost of 15 packets when bought individually\n    total_individual_cost = 15 * individual_cost\n    # calculate the difference\n    savings = total_individual_cost - multipack_cost\n    \n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    final_amount = principal * (1 + interest_rate * time_years)\n\n    return final_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Total sum of fractions on the left hand side\n    sum_of_fractions = (3 / 4) + (3 / 4) + (3 / 4)\n\n    # The right hand side is 1 plus the missing number times 1/4\n    # Let's represent the missing number with the variable x\n    # Therefore, the right hand side can be represented as 1 + x * (1/4)\n\n    # Equation: sum_of_fractions = 1 + x * (1/4)\n    # We can find the missing number x by rearranging the equation to solve for x\n    x = (sum_of_fractions - 1) * 4\n\n    return x\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = 20  # Number of terms\n    S = 560  # Sum of terms\n    d = 2  # Common difference\n    \n    a = symbols('a')  # First term\n    \n    # Sum of an arithmetic progression\n    equation = Eq(S, n * (2 * a + (n - 1) * d) / 2)\n    \n    # Solve for the first term 'a'\n    first_term_solution = solve(equation, a)\n    \n    # Since we want the smallest term, and the common difference is positive,\n    # the smallest first term will be the minimum value\n    a_min = min(first_term_solution)\n    \n    return a_min\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    day_climb = 3\n    night_slip = 2\n    total_distance = 8\n    net_distance_per_day = day_climb - night_slip\n    distance_covered = 0\n    days = 0\n\n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += day_climb\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_slip\n       \n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    total_days = 4 + 6 + 5\n    total_pages = (25 * 4) + (40 * 6) + 80\n    average_pages_per_day = total_pages / total_days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    penny_original = 14\n    brother_after = 12\n    brother_original = brother_after - (penny_original + 10 - brother_after)\n    return brother_original\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    \n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    \n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement.\n    # (remainder, divisor)\n    congruences = [\n        (3, 4),\n        (3, 5),\n        (5, 7),\n        (9, 11)\n    ]\n    \n    # Using the Chinese Remainder Theorem to solve the congruences.\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Here we assume the problem is to perform a multiplication\n    # that is typically not found within the standard multiplication table (12x12)\n    # Since the statement did not specify the numbers to multiply, let's assume two arbitrary numbers\n    num1 = 123  # Example number\n    num2 = 456  # Example number\n\n    ans = num1 * num2\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        tens = age // 10\n        ones = age % 10\n        new_age = (ones * 10 + tens) + 1\n        if new_age * 2 == age:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Tom draws 3 cards from each of the 4 suits, he would have 12 cards.\n    # Even if he drew one of each card from all suits, he still doesn't have 4 of the same suit.\n    max_different_suits = 3 * 4\n\n    # To be sure he has 4 cards of the same suit, he needs to draw one more card.\n    cards_to_draw = max_different_suits + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    tickets_unsold = 28\n    percentage_unsold = 100 - 60\n    total_capacity = tickets_unsold * 100 / percentage_unsold\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (2 / 3) * number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    girls_part = 1 - 3/8  # Fraction of children that are girls\n    children_part = 1 - 3/7  # Fraction of people that are children\n    girls_ratio = children_part * girls_part  # Overall fraction of people that are girls\n    \n    # Given there were 45 girls, calculate the total number of people\n    total_people = 45 / girls_ratio\n\n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    # Convert everything to the same unit (cents)\n    two_dollar_notes_in_cents = two_dollar_notes * 200  # (5 * $2) in cents\n    fifty_cent_coins_in_cents = fifty_cent_coins * 50  # (7 * 50¢) in cents\n\n    total_money_in_cents = two_dollar_notes_in_cents + fifty_cent_coins_in_cents\n    file_cost_in_cents = file_cost * 100\n\n    money_left_in_cents = total_money_in_cents - file_cost_in_cents\n\n    # Convert back to dollars for the final answer\n    money_left_in_dollars = money_left_in_cents / 100\n\n    return money_left_in_dollars\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount spent and for Mitchell's remaining money\n    spent, mitchell_remaining = symbols('spent mitchell_remaining')\n\n    # Hayden had 4 times as much money as Mitchell after spending\n    equation1 = Eq(1420 - spent, 4 * mitchell_remaining)\n    \n    # Mitchell had mitchell_remaining amount of money after spending\n    equation2 = Eq(505 - spent, mitchell_remaining)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (spent, mitchell_remaining))\n\n    return solutions[spent]\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    first_term = 1\n    last_term = n\n    sum_of_numbers = (n * (first_term + last_term)) // 2\n    \n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    day_progress = 3\n    night_regress = 1\n    net_progress = day_progress - night_regress\n    total_distance = 11\n    day = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += day_progress\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= night_regress\n    \n    return day\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "from math import factorial\n\ndef solution():\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to be seated in a row\n\n    # Number of ways to choose 3 pupils from 18 (Combination)\n    # Once 3 students are chosen, they can be arranged in 3! ways (Permutation)\n    ways = factorial(n) // (factorial(r) * factorial(n - r)) * factorial(r)\n    \n    return ways\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = 2\n\n    total_willow_trees = (ginkgo_trees - 1) * willow_trees_between\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship_still_water = 28\n    speed_current = 3\n    speed_upstream = speed_ship_still_water - speed_current\n    distance = 150\n\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define variables for each person's amount of money\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    # Calculate the total amount by summing up individual amounts\n    total_amount = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_amount\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Equations based on the problem statement\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Adding all the equations we get:\n    # 2*(A + B + C) = 102 + 97 + 93\n    # A + B + C = (102 + 97 + 93) / 2\n    total_weight = (102 + 97 + 93) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n\n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500  # in grams\n    cheese_cost_per_kg = 7.48  # in pounds\n    apple_cost_each = 12 / 100  # in pounds, converted from pennies to pounds\n    yoghurt_cost_each = 46 / 100  # in pounds, converted from pennies to pounds\n    note_value = 10  # in pounds\n\n    # Total cost\n    total_cost = (cheese_weight / 1000) * cheese_cost_per_kg + (8 * apple_cost_each) + (2 * yoghurt_cost_each)\n\n    # Change from a 10 pound note\n    change = note_value - total_cost\n\n    return round(change, 2)  # rounding to 2 decimal places to represent pence accurately\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    # Total number of aircrafts to be sold\n    total_aircrafts = 1200\n\n    # Zack's selling rate (aircrafts per hour)\n    zack_rate = 150\n\n    # Total time with both Andy and Zack working together\n    total_time_together = 6\n\n    # The rate at which Andy and Zack sell the aircrafts together\n    total_rate_together = total_aircrafts / total_time_together\n\n    # Andy's selling rate (aircrafts per hour)\n    andy_rate = total_rate_together - zack_rate\n\n    # Time it takes for Andy to sell all the aircrafts by himself\n    time_for_andy_alone = total_aircrafts / andy_rate\n\n    return time_for_andy_alone\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    n_students = 0\n    n_teachers = 0\n    total_people = 0\n    side_length = 1  # Initial side length of the square\n\n    while True:\n        if side_length % 2 == 1:  # Students are on odd layers\n            n_students += (side_length * 4 - 4) if side_length > 1 else 1\n        else:  # Teachers are on even layers\n            n_teachers += (side_length * 4 - 4)\n\n        if n_students - n_teachers == 80:  # Difference condition met\n            total_people = n_students + n_teachers\n            break\n\n        side_length += 1  # Increase the side length for the next layer\n\n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n    \n    volume_orange = (orange_ratio / ratio_sum) * total_volume\n    \n    return volume_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 528)\n    eq2 = Eq(x, 3 * y)\n\n    solution = solve((eq1, eq2), (x, y))\n\n    return solution[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    initial_amount = 20\n    savings = 1 * 7  # $1 everyday for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    \n    total_amount = initial_amount + savings - lent_to_brother - spent_on_snacks\n    \n    return total_amount\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    debt_to_mum = 10.50\n    remaining_money = total_money - debt_to_mum\n    spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - spent_on_magazines\n\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    cube_factors = [n**3 for n in range(1, 21)]  # Generate cube numbers within a reasonable range\n    q = None\n    for cube in cube_factors:\n        if 44000 % cube == 0:  # Check if it is a factor of 44000 and leaves a cube number when divided\n            temp_q = 44000 // cube\n            # Ensure that the quotient is also a cube number\n            if round(temp_q**(1/3))**3 == temp_q:\n                q = temp_q\n                break\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')\n    equation1 = Eq(l, 2 * w)\n    equation2 = Eq(2 * l + 2 * w, 72)\n\n    solutions = solve((equation1, equation2), (l, w))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of Steve, Mark, and Ryan have after paying\n    s_after, m_after, r_after = symbols('s_after m_after r_after')\n    meal_cost = symbols('meal_cost')\n\n    # Set up the equations based on the given ratios after Steve pays\n    equation1 = Eq(s_after/m_after, 3/8)\n    equation2 = Eq(s_after/r_after, 3/9)\n    # Set up the equations based on the given ratios after Ryan pays\n    equation3 = Eq(s_after/r_after, 5/1)\n    equation4 = Eq(m_after/r_after, 4/1)\n    # Set up the equations based on the given ratios after Mark pays\n    equation5 = Eq(s_after/m_after, 10/1)\n    equation6 = Eq(s_after/r_after, 10/9)\n\n    # All three have same amount of money left after respective payments\n    equation7 = Eq(s_after + meal_cost, m_after + meal_cost + 40) \n    equation8 = Eq(s_after + meal_cost, r_after + meal_cost)\n    equation9 = Eq(m_after + meal_cost, r_after + meal_cost)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7, equation8, equation9),\n                      (s_after, m_after, r_after, meal_cost))\n    \n    return solutions[meal_cost]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    prime_factor = 3  # 81 is a power of 3: 3^4\n    exponent = 4  # The exponent in the prime factorization of 81\n    num_factors = exponent + 1  # The number of factors is (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # static friction coefficient\n    force_applied = 250  # force applied in N\n\n    # calculating the maximum static friction force\n    normal_force = mass * 9.8  # force due to gravity in N\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # actual static friction force is the minimum between the applied force and the maximum static friction\n    force_of_static_friction = min(force_applied, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration * 100\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term3 = 23\n    term15 = 155\n    n = 15 - 3\n    common_difference = (term15 - term3) / n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = (cube + 1) ** 0.5\n        if square.is_integer():\n            return int(square) ** 2\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    james, nina = symbols('james nina')\n\n    # Set up the equations based on the problem statement\n    total_buttons = Eq(james + nina, 24)\n    equal_buttons_after_transfer = Eq(nina - 6, james + 6)\n\n    # Solve the system of equations\n    solutions = solve((total_buttons, equal_buttons_after_transfer), (james, nina))\n\n    # Return Nina's original number of buttons\n    return solutions[nina]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1)\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_hour = (total_parts / total_workers) / total_hours\n\n    return parts_per_worker_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    daily_progress = 5\n    nightly_sliding = 3\n    burrow_depth = 16\n    total_climbed = 0\n    days = 0\n    while total_climbed < burrow_depth:\n        days += 1\n        total_climbed += daily_progress\n        if total_climbed >= burrow_depth:\n            break\n        total_climbed -= nightly_sliding\n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # As the details of the situation mentioned above are not provided, \n    # I am assuming a general linear relationship between the number of bags used (x) and tax charged (y).\n    # The general form of a linear equation with one variable can be written as y = mx + c, \n    # where m is the slope and c is the y-intercept.\n    \n    # We will define m and c based on an example relation since the actual relationship is not provided.\n    # Let's assume for every bag used there is a fixed tax charged, say $2 per bag.\n    # Thus, m (slope) is $2 and c (y-intercept) is $0 as there may not be a base tax charge without any bags used.\n    m = 2  # Example slope\n    c = 0  # Example y-intercept (it could be different if there is a base tax)\n    \n    # The equation would therefore be:\n    # y = 2x + 0\n    # Simplifying the equation as the y-intercept is zero, we get:\n    # y = 2x\n\n    # We will return this equation as a string since no other details are given.\n    equation = \"y = 2x\"\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences based on the problem statement\n    # x ≡ 3 mod 4\n    # x ≡ 3 mod 5\n    # x ≡ 3 mod 7\n    # x ≡ 0 mod 9\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n\n    if fraction > decimal:\n        ans = \"8/100 is larger\"\n    else:\n        ans = \"0.7 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    ans = 3 * (4/5) * (1 + (1/9)) * (5 + (1/2)) * (3/11)\n    return ans\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_cost = 275\n    flat_fee = 30\n    daily_fee_short_term = 25\n    daily_fee_long_term = 20\n    threshold_days = 5\n\n    # Calculate cost for maximum short-term rental\n    max_short_term_cost = flat_fee + (daily_fee_short_term * threshold_days)\n\n    # Check if the total cost is within short-term range\n    if total_cost <= max_short_term_cost:\n        return (total_cost - flat_fee) / daily_fee_short_term\n    else: # If not, calculate long-term rental\n        additional_days = (total_cost - max_short_term_cost) / daily_fee_long_term\n        return threshold_days + additional_days\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit_weight = 8\n    rabbit_to_chicken_weight = 2\n    dog_to_chicken_weight = dog_to_rabbit_weight * rabbit_to_chicken_weight\n        \n    return dog_to_chicken_weight\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= (1/i - 1/(100-i+1))\n    return ans\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270  # The initial height from which the ball is dropped\n    rebound_ratio = 0.10  # The ratio of the height of each rebound to the previous height\n    \n    total_distance = initial_height  # The first drop from the initial height\n\n    while initial_height > 0:\n        rebound_height = initial_height * rebound_ratio  # Calculate the rebound height\n        total_distance += 2 * rebound_height  # Add both the ascent and descent of the rebound to the total distance\n        initial_height = rebound_height  # Update the height for the next rebound\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Given that the sum of the numbers on the four pages is 58,\n    # we can establish an equation where the sum of the four pages is:\n    # (n) + (n + 1) + (2m - n) + (2m - n - 1) = 58\n    # where m is the total number of pages, n is the first page number of the sheet\n    \n    # Therefore, the sum simplifies to:\n    # 2n + 2m = 58\n    \n    # We also know that the first page number n of the sheet is the (sheet number * 2 - 1)\n    # Since the booklet is folded in half, and each sheet has 4 page numbers.\n    # Thus m = sheet number * 4\n\n    # We substitute m into the sum equation to get:\n    # 2(sheet number * 2 - 1) + 2(sheet number * 4) = 58\n\n    # We can then solve for the sheet number algebraically:\n    for sheet_number in range(1, 58//4 + 1): # As a maximum, could only be up to 14 sheets\n        n = sheet_number * 2 - 1\n        m = sheet_number * 4\n        if (2 * n + 2 * m) == 58:\n            # The initial number of sheets is the sheet number\n            return sheet_number\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Original number of green and yellow cars are the same\n    equation1 = Eq(green, yellow)\n\n    # After giving away cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Green toy cars in the end (after giving away 60)\n    green_cars_end = solutions[green] - 60\n\n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # in meters per minute\n    elephant_speed = 250  # in meters per minute\n    race_distance = 3000  # in meters\n\n    buck_time = race_distance / buck_speed  # time taken by buck in minutes\n    elephant_time = race_distance / elephant_speed  # time taken by elephant in minutes\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Since the sequence is symmetric around the center, we can calculate the sum of half the sequence and multiply it by 2\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = int((last_term - first_term) / difference + 1)\n    \n    # Sum for an arithmetic sequence:\n    #   sum = n/2 * (first_term + last_term)\n    sum_half = num_terms/2 * (first_term + last_term)\n    \n    # The total sum is double the half sequence (because it's symmetric)\n    total_sum = 2 * sum_half\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apple_percentage = 15\n    bad_apples = (bad_apple_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_of_12_pencils = 1.80\n    \n    # Cost of 1 pencil\n    cost_of_1_pencil = cost_of_12_pencils / 12\n    \n    # Ratio pen : pencil = 7 : 3\n    # cost_of_1_pen / cost_of_1_pencil = 7 / 3\n    # cost_of_1_pen = (7 / 3) * cost_of_1_pencil\n    cost_of_1_pen = (7 / 3) * cost_of_1_pencil\n    \n    # Cost of 5 pens = 5 * cost_of_1_pen\n    cost_of_5_pens = 5 * cost_of_1_pen\n    \n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    num_terms = (last_term - first_term) // 2 + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    time = symbols('time')\n\n    # Simon's distance = Simon's speed * time\n    # His wife's distance = Wife's speed * time + initial distance (15 km)\n    # Set the equations equal since he overtakes her, hence the same distance\n    distance_equation = Eq(80 * time, 60 * time + 15)\n\n    # Solve the equation for time\n    time_solution = solve(distance_equation, time)\n\n    # Calculate what time Simon overtakes his wife\n    overtaking_time_in_hours = time_solution[0]\n    overtaking_time_in_minutes = overtaking_time_in_hours * 60\n\n    # They left at 6.10 pm which is 18.10 in 24-hour format, convert to minutes\n    start_time_in_minutes = 18 * 60 + 10\n\n    # Calculate the time Simon overtakes his wife in minutes\n    overtaking_time_total_minutes = start_time_in_minutes + overtaking_time_in_minutes\n\n    # Convert minutes back to hours and minutes (24-hour format)\n    overtaking_hour = overtaking_time_total_minutes // 60\n    overtaking_minute = overtaking_time_total_minutes % 60\n\n    # Answer in 24-hour format\n    return f'{int(overtaking_hour):02d}:{int(overtaking_minute):02d}'\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = ['coffee', 'milk']  # one drink\n    food_items = ['hamburgers', 'burritos', 'bagels']  # one food item\n\n    num_combinations = len(drinks) * len(food_items)\n\n    return num_combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_count = 0\n\n    for locker_number in range(1, 101):\n        if locker_number % 3 == 0:\n            if locker_number % 5 == 0:\n                # Number divisible by both 3 and 5, stay unchanged (locked)\n                continue\n            else:\n                # Number divisible by 3 but not 5, locked\n                continue\n        elif locker_number % 5 == 0:\n            # Number divisible by 5, unlocked\n            unlocked_count += 1\n        else:\n            # Number not divisible by 3 or 5, unlocked\n            unlocked_count += 1\n            \n    return unlocked_count\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Function to compute the number of ways to reach the n-th step.\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n    # Nelson can reach 5th step in fibonacci(5) ways.\n    # Then he can reach 10th step from 5th in fibonacci(10 - 5 + 1) ways due to his additional step to 5th step.\n    return fibonacci(5) * fibonacci(10 - 5 + 1)\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_per_pancake = 3 / 2  # Time it takes to cook one pancake\n    total_pancakes = (12 / time_per_pancake)  # Total pancakes cooked in 12 minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Assuming Jason and Chi Yew are interchangeable because they both take 5 minutes\n    # Thus considering the pairs and the time it takes for the round trip\n    # Jason/Chi Yew crosses with Wei Jie (9 min), returns (5 min), total = 14 min\n    # Jason/Chi Yew crosses with Michael (7 min), total = 21 min\n    # The remaining person (Jason/Chi Yew) crosses with the fast one waiting on the other side\n    # This is another 5 min\n    # So the total time taken is not 4*5 = 20 min\n    # The total time is 9 (cross with Wei Jie) + 5 (return) + 7 (cross with Michael) + 5 (final cross) = 26 min\n    # So no, they are not correct\n    return 26\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1/5\n\n    original_price = sale_price / (1 - discount_fraction)\n\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_distance = 500\n    total_days = 5\n\n    meters_per_day = total_distance / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    participants_needed_for_8 = 8 * countries\n    ans = participants_needed_for_8 + 1  # To ensure at least 9 from the same country\n    return ans\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # The sum of an arithmetic sequence is equal to the average of the first and last term\n    # times the number of terms. So the average is sum / number of terms.\n    average = 2014 / 53\n    \n    # Since the sequence has an odd number of terms (53), the average is also the middle term.\n    # We can then find the largest term by adding half of the remaining terms (53 - 1) / 2 to the average.\n    largest_number = average + (53 - 1) / 2\n    \n    # Since we want a whole number, return the integer value of the largest_number\n    return int(largest_number)\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost_for_twelve = cost_per_calculator * 12\n    return total_cost_for_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed is 5 laps per 6 minutes\n    lucas_speed = 5 / 6  \n    # Miller's speed is 5 laps per 10 minutes\n    miller_speed = 5 / 10 \n\n    # The relative speed at which Lucas overtakes Miller\n    relative_speed = lucas_speed - miller_speed  \n\n    # Since they meet for the first time right at the start, we need to calculate\n    # the time taken for Lucas to complete one more lap than Miller, which will be\n    # the second time Lucas overtakes Miller.\n    \n    # Time is distance over speed. In this case, the distance is 1 lap,\n    # and the speed is the relative speed between the two cyclists.\n    time_to_overtake = 1 / relative_speed  \n\n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    greatest_possible_amount = rounded_amount + 4\n    return greatest_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes = hours * 60\n    return minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n    \n    children = 3/5 * visitors\n    remaining_visitors = visitors - children\n    men = 1/4 * remaining_visitors\n    \n    equation = Eq(children - men, 120)\n    total_visitors = solve(equation, visitors)\n    \n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80  # base rate in cents for up to 15 minutes\n    additional_rate = 5  # rate per minute in cents after 15 minutes\n    total_cost = 140  # total cost in cents\n\n    # If the total cost is equal to the base rate, the call lasted for exactly 15 minutes.\n    if total_cost == base_rate:\n        return 15\n    \n    # Calculate additional cost beyond the base rate\n    additional_cost = total_cost - base_rate\n    # Calculate the number of additional minutes\n    additional_minutes = additional_cost / additional_rate\n    # Total duration of the call is the sum of the base duration (15 minutes) and additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tims_age_now = 8\n    mother_age_later = 54\n    # The difference in age between Tim and his mother will remain constant.\n    age_difference = mother_age_later - tims_age_now\n    mothers_age_now = tims_age_now + age_difference\n    return mothers_age_now\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    for A in range(10):\n        if 2 * A == A * A:\n            return A\n            \nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_string_length_m = 5.52  # Length of the orange string in meters\n    orange_purple_ratio = 9.2  # The ratio of the orange string to the purple string\n\n    purple_string_length_m = orange_string_length_m / orange_purple_ratio\n    \n    green_string_additional_length_cm = 24.9 # The additional length of the green string in cm\n\n    # Convert the additional green string length from cm to m\n    green_string_additional_length_m = green_string_additional_length_cm / 100.0\n\n    green_string_length_m = purple_string_length_m + green_string_additional_length_m\n\n    return green_string_length_m\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    short_piece, long_piece = symbols('short_piece long_piece')\n    equation1 = Eq(long_piece, 5 * short_piece)\n    equation2 = Eq(short_piece + long_piece, 49.5)\n    solutions = solve((equation1, equation2), (short_piece, long_piece))\n    return round(solutions[long_piece], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    georges_mum_gift_per_day = 60\n    georges_dad_gift_per_day = 40\n    number_of_days = 3\n\n    total_money = (georges_mum_gift_per_day + georges_dad_gift_per_day) * number_of_days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_fruit_drink = 36\n    ratio_apple_to_orange = 4 / 5\n    apple_juice = total_fruit_drink * (ratio_apple_to_orange / (1 + ratio_apple_to_orange))\n    return apple_juice\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Amount of work Ivy does in a day\n    ivy_rate = 1 / 24\n    # Amount of work Kevin does in a day\n    kevin_rate = 1 / 20\n    \n    # Total amount of work done together without any days off\n    total_rate = ivy_rate + kevin_rate\n    \n    # Total work done by the end of the 18th day is the whole job, which is 1\n    total_work = 1\n    \n    # Total work done by both combined in 18 days if Kevin didn't take any days off\n    work_done_with_no_days_off = 18 * total_rate\n    \n    # Since they finish the job by the end of the 18th day (total_work)\n    # The difference in work is what Kevin would have contributed in his days off\n    work_difference = work_done_with_no_days_off - total_work\n    \n    # Number of days Kevin took off\n    kevin_days_off = work_difference / kevin_rate\n    \n    return int(kevin_days_off)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Given incorrect division\n    incorrect_dividend = 88\n    result = 22\n\n    # Find A using the incorrect operation\n    A = incorrect_dividend / result\n\n    # Calculate the correct division\n    correct_dividend = 98\n    correct_result = correct_dividend / A\n\n    return A, correct_result\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    climb_rate = 4\n    slide_rate = 1\n    net_distance = climb_rate - slide_rate\n    current_distance = 0\n    day = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_rate\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_rate\n    \n    return day\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let N be the total number of pupils normally at school\n    year7_normal_proportion = 0.20\n    year7_current_proportion = 0.10\n    total_pupils_current = 400\n\n    # After the Year 7 girls miss school for a sports match, the remaining Year 7 pupils at school.\n    year7_pupils_current = total_pupils_current * year7_current_proportion\n\n    # Before the sports match, the number of Year 7 pupils was higher by 10% of total pupils originally.\n    year7_pupils_normal = year7_pupils_current / year7_normal_proportion\n\n    # The total number of pupils originally at school is the same as the number of Year 7 pupils plus the pupils of other years.\n    # Since no information is provided about other years missing school, we assume they remain the same.\n    # Therefore, the normal total equals the current pupils plus the missing Year 7 pupils.\n    missing_year7_pupils = year7_pupils_normal - year7_pupils_current\n    total_pupils_normal = total_pupils_current + missing_year7_pupils\n\n    return int(total_pupils_normal)\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time Tim takes to complete writing the book alone\n    t = symbols('t')\n\n    # Nancy's work rate is 1/6 of the book per day\n    # Tim's work rate is 1/t of the book per day\n\n    # Combined work rate when working together is 1/4 of the book per day\n    # Hence, their combined work rate is the sum of their individual rates\n    equation = Eq((1/6) + (1/t), 1/4)\n\n    # Solve the equation for 't'\n    t_solution = solve(equation, t)[0]\n\n    return t_solution\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    starting_money = 100\n    total_deposit_days = (total_days + 1) // 2\n    total_spend_days = total_days // 2\n\n    total_deposits = total_deposit_days * 5\n    total_spends = total_spend_days * 8\n\n    money_left = starting_money + total_deposits - total_spends\n\n    return money_left\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '333' * 4  # Since 333 is repeated, we can construct the 12-digit number by repeating '333' four times\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    slide_down = 2\n    net_movement = jump_up - slide_down\n    jumps_before_last_jump = (total_height - jump_up) // net_movement\n    # Total jumps include the jumps before the last jump and the last jump itself\n    total_jumps = jumps_before_last_jump + 1\n    return total_jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    total_sum = 0\n    numerator = 1\n    denominator_a = 1\n    denominator_b = 2\n    \n    while numerator <= 6:\n        total_sum += (numerator / (denominator_a * denominator_b))\n        numerator += 1\n        denominator_a = denominator_b\n        denominator_b += (numerator + 1)\n        \n    total_sum += 1 / denominator_a  # The last term in the sequence\n    \n    return total_sum\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2/5)\n    initial_money = remaining_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n    \n    def count_trailing_zeroes(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n    \n    numerator = factorial(999)\n    denominator = factorial(300)\n    number = numerator // denominator\n    answer = count_trailing_zeroes(number)\n    \n    return answer\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Each layer of the square will have 4 less students (2 from the length and 2 from the width)\n    # As we move inwards forming a smaller square\n    total_students = 0\n    current_layer_students = 60  # Students on the outermost layer\n\n    while current_layer_students > 0:\n        total_students += current_layer_students * 4 - 4  # The corners are counted twice\n        current_layer_students -= 4\n\n    # We need to add back the one student that forms the very center of the square\n    total_students += 1\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # Set equations based on the problem statement\n    eq1 = Eq(cars, bikes + bikes / 3)\n    eq2 = Eq(bikes, lorries + lorries / 4)\n    eq3 = Eq(cars + bikes + lorries, 2 * symbols('n', integer=True))  # The total number is an even number\n    equations = (eq1, eq2)\n\n    # Iterate through possible even number totals less than 100\n    for total in range(2, 100, 2):\n        eq_total = Eq(cars + bikes + lorries, total)\n        solutions = solve((equations + (eq_total,)), (cars, bikes, lorries))\n\n        if solutions and all(solutions[vehicle] >= 0 for vehicle in (cars, bikes, lorries)):\n            return solutions\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    current_layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        layer_tiles = (current_layer * 2 - 1) ** 2\n        if current_layer % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        total_tiles -= layer_tiles\n        current_layer += 1\n\n    if red_tiles > green_tiles:\n        more_tiles_color = 'red'\n        color_difference = red_tiles - green_tiles\n    else:\n        more_tiles_color = 'green'\n        color_difference = green_tiles - red_tiles\n\n    return (more_tiles_color, color_difference)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # Number of buttons in box A and B at first.\n    \n    # Ken added x buttons to A and removed 2x from B.\n    x = symbols('x')\n    \n    # Equation 1: There were 64 more buttons in box A than box B at first.\n    equation1 = Eq(A, B + 64)\n    \n    # Equation 2: The number of buttons in box B became 28 fewer than before.\n    equation2 = Eq(B - 2*x, B - 28)\n    \n    # Equation 3: The ratio of the total number of buttons in both boxes to the number of buttons left in box B was 4:1.\n    equation3 = Eq((A + x + (B - 2*x)), 4 * (B - 2*x))\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (A, B, x))\n    \n    # Return the number of buttons in box A at first.\n    return solutions[A]\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n    \n    # Number of intervals is one less than the number of bins\n    num_bins = (boulevard_length // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    for n in range(1, 1000):  # Trying out values of n until we find the minimum that satisfies the condition\n        number_str = '26' + '2011' * n + '7'  # Constructing the number as a string\n        number = int(number_str)  # Converting the constructed string to an integer\n        if number % 33 == 0:  # Checking divisibility by 33\n            return n  # Return the minimum n for which divisibility condition is met\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n\n    total_flour_needed = flour_per_cake * number_of_cakes\n\n    return total_flour_needed\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_won = 24\n    total_rounds = 12\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    # Let x be the number of rounds won, then (total_rounds - x) will be the number of rounds lost.\n    # We have the following equation: x * cards_per_win + (total_rounds - x) * cards_per_loss = total_cards_won\n\n    # Rearrange the equation to solve for x\n    x = (total_cards_won - total_rounds * cards_per_loss) / (cards_per_win - cards_per_loss)\n\n    # Calculate the number of rounds lost\n    rounds_lost = total_rounds - x\n\n    return int(rounds_lost)\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    X, Y, Z = 20, 19, 18\n    discard = 0\n    rounds = 0\n    \n    while min(X, Y, Z) >= 0:\n        max_coins = max(X, Y, Z)\n        if X == max_coins:\n            X -= 3\n            Y += 1\n            Z += 1\n        elif Y == max_coins:\n            Y -= 3\n            X += 1\n            Z += 1\n        else:\n            Z -= 3\n            X += 1\n            Y += 1\n        discard += 1\n        rounds += 1\n\n        if X <= 0 or Y <= 0 or Z <= 0:\n            break\n    \n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    ways = 0\n    for i in range(8):\n        for j in range(8 - i):\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If it takes 3 minutes to cut the log into 4 pieces,\n    # it implies it takes 3 minutes to make 3 cuts (since 4 pieces require 3 cuts).\n    \n    # The time it takes to make one cut is:\n    time_per_cut = 3 / 3\n    \n    # To cut the log into 8 pieces, we need 7 cuts.\n    # Therefore, the time required to make 7 cuts is:\n    time_for_7_cuts = time_per_cut * 7\n    \n    return time_for_7_cuts\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chaiseng = symbols('rasidah chaiseng')\n\n    equation1 = Eq(chaiseng, rasidah + 48)\n    equation2 = Eq(rasidah - (3/5)*rasidah, 2*(chaiseng - (6/7)*chaiseng))\n\n    solutions = solve((equation1, equation2), (rasidah, chaiseng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    final_count = initial_cards - duplicates + new_cards\n\n    return final_count\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, so there are 7 \"people\" to arrange\n    arrangements_for_7 = factorial(7)\n    \n    # Amy and Judy can switch places, so there are 2 ways for them to sit with each other\n    arrangements_for_amy_and_judy = 2\n    \n    # Multiply arrangements of 7 people with the arrangements of Amy and Judy\n    total_arrangements = arrangements_for_7 * arrangements_for_amy_and_judy\n\n    # Since the table is circular, we need to divide the count by 7 to account for rotations\n    ans = total_arrangements // 7\n    \n    return ans\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_start, ben_start = symbols('andy_start ben_start')\n\n    equation1 = Eq(andy_start, ben_start - 84)\n    equation2 = Eq(andy_start * (4/3), ben_start * (6/5) / 3)\n\n    solutions = solve((equation1, equation2), (andy_start, ben_start))\n\n    andy_end = solutions[andy_start] * (4/3)\n\n    return andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total = sum(1 / i for i in range(1, 8))\n    return int(total)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 35000\n    rate = 1.5 / 100  # converting percentage to decimal\n    amount = 37100\n    years = symbols('years')\n\n    # Using the formula for compound interest: A = P * ((1 + r) ** n), where A is the amount, P is the principal,\n    # r is the rate of interest per period, and n is the number of periods.\n    # Since the interest is paid yearly, the formula simplifies to A = P * ((1 + r) ** n).\n    # We're solving for n, the number of years.\n    equation = Eq(principal * ((1 + rate) ** years), amount)\n\n    # Solve the equation\n    solution_years = solve(equation, years)\n\n    for sol in solution_years:\n        if sol.is_real and sol > 0:  # We check if the solution is a real positive number as negative years are not feasible\n            return int(sol.evalf())  # Return the number of years, evaluated as a float and converted to an integer\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    \n    pencils = 56\n    pens = 60\n    ans = gcd(pencils, pens)\n    \n    return ans\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Define the numbers between 10 and 99 that are divisible by 24\n    divisible_by_24 = set(range(24, 100, 24))\n    \n    # Define all two-digit numbers\n    two_digit_numbers = set(range(10, 100))\n    \n    # Compute numbers that are not divisible by 24\n    not_divisible_by_24 = two_digit_numbers - divisible_by_24\n    \n    # The union of divisible_by_24 and not_divisible_by_24 contains all two-digit numbers\n    # so the subset of numbers that meets the condition are those which divisibility by\n    # the number on the slip is known and the ones by 24 are known - that's intersection\n   \n    # Since Tom raised his hand both times, his hat number could not be in this set\n    # Therefore, we need to find the numbers from which 4 students knew \n    # the divisibility by the unknown number and 6 students knew for 24\n    # Tom knew for both; thus, there are 3 numbers satisfying the first condition \n    # and 5 combining with the second (excluding Tom's hat number).\n  \n    # We can assume that all students who knew for 24 would also know for the unknown number\n    # Therefore, the unknown number should divide at least 3 of the numbers \n    # that are not divisible by 24 (since 6 students knew, out of which one is Tom and 4 did\n    # not raise hands the first time, so are not divisible by the unknown number)\n    # We'll find all such numbers that can be divided into 3 parts among non-divisible by 24\n    all_possible_unknowns = set()\n    for unknown in range(2, 24):  # Check for possible final digit of unknown number\n        if (24 % unknown != 0):  # It should not be a divisor of 24\n            could_know_for_unknown = sum(1 for num in not_divisible_by_24 if num % unknown == 0)\n            could_know_for_24 = sum(1 for num in divisible_by_24 if num % unknown == 0)\n            if could_know_for_unknown >= 3 and could_know_for_24 + could_know_for_unknown == 6:\n                all_possible_unknowns.add(unknown)\n                \n    # Once we have the possible unknowns that divided at least 3 numbers, those are the ones\n    # that were not raised in the first instance\n    # Now we find the intersection of such numbers with the not_divisible_by_24 set\n    possible_numbers_on_hats = set()\n    for unknown in all_possible_unknowns:\n        for num in not_divisible_by_24:\n            if num % unknown == 0:\n                possible_numbers_on_hats.add(num)\n    \n    # Since 4 and later 6 students raised their hands, we can remove numbers that would divide by the unknown\n    # from the initial set of numbers to find the numbers on friends hats\n    numbers_on_friends_hats = two_digit_numbers - possible_numbers_on_hats\n    \n    # Return the sum of the numbers on friends' hats\n    return sum(numbers_on_friends_hats)\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    current_value = 18\n    sign = -1  # Because after 18, the pattern shows a negative number\n    step = 1  # Starting step difference\n\n    # Continue the sequence until reaching the desired position which is the 6th number\n    for i in range(5):  # We already have the first number, iterate 5 more times\n        next_value = current_value + (sign * step)\n        current_value = next_value\n        # Toggle the sign for the next iteration\n        sign *= -1\n        # Increment the step by 1 for the next iteration\n        step += 1\n\n    return current_value\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    # Finding equivalent fraction using the property of proportion:\n    # new_numerator / new_denominator = original_numerator / original_denominator\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total number of students who passed at least one test.\n    total_passed = 43\n\n    # Number of students who passed each individual test.\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # Maximum number of students who passed all three tests can be found\n    # by subtracting the total passed from the sum of individual passes and\n    # then adding back the total passed to avoid double subtracting those who\n    # passed all three tests. We use max to make sure it doesn't go below zero.\n    max_passed_all_three = max(total_passed - (passed_math + passed_science + passed_english) + total_passed, 0)\n\n    return max_passed_all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance between the school and their home as 'd'.\n    d = symbols('d')\n\n    # Ahmad's speed is 80 meters/minute, and the younger brother's speed is 50 meters/minute.\n    ahmad_speed = 80\n    brother_speed = 50\n\n    # When Ahmad meets his brother, Ahmed would have traveled distance 'd' to school and 'd - 210' back.\n    # Ahmad's time = time to school + time back to the meeting point\n    ahmad_time = d / ahmad_speed + (d - 210) / ahmad_speed\n\n    # The younger brother would have traveled 'd - 210' meters in the same amount of time.\n    # Brother's time = time to the meeting point\n    brother_time = (d - 210) / brother_speed\n\n    # Since they have traveled for the same amount of time, we set the times equal.\n    equation = Eq(ahmad_time, brother_time)\n\n    # Now, we solve for the distance 'd'.\n    solutions = solve(equation, d)\n    return solutions[0]\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the four numbers be a, b, c, and d such that a > b > c > d\n    # average of b, c, d = (b + c + d) / 3\n    # average of a, b, c = (a + b + c) / 3\n    \n    # From the given conditions:\n    # d + (a + b + c) / 3 = 39 => a + b + c + 3d = 117\n    # a + (b + c + d) / 3 = 51 => b + c + d + 3a = 153\n    \n    # We can combine the two equations to solve a and d in terms of b and c\n    # b + c = 153 - 3a - d\n    # b + c = 117 - a - 3d\n    \n    # Subtract the second equation from the first one to eliminate b and c\n    # 2a - 6d = 36 => a - 3d = 18 => a = 3d + 18\n    \n    # We want to maximize a, so let's assume d is the smallest possible positive whole number, i.e., 1\n    # Then, a = 3 * 1 + 18 = 21\n    \n    # Now d cannot be 1 since a is 21 and b, c must be distinct numbers between them, so we try d = 2\n    a = 3 * 2 + 18 = 24\n    \n    # Now, to check if there can be b and c such that a > b > c > d\n    # We know that b + c + d + 3a = 153, substituting the value of a, we get\n    # b + c + 2 + 72 = 153 => b + c = 79\n    \n    # We could choose b = 40, c = 39 for example. These are distinct and satisfy the conditions\n    # b + c = 40 + 39 = 79, and both are less than a (24) and greater than d (2)\n    \n    # Hence, the largest possible value for the largest number a is 24\n    return a\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):  # Case 1 cannot be empty, thus starts from 1 to 5\n        for x2 in range(1, 6):  # Similarly, case 2 cannot be empty\n            x3 = 6 - x1 - x2  # Since the pens are identical, we calculate x3 directly\n            if x3 > 0:  # x3 must also be greater than 0 because the case cannot be empty\n                count += 1\n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate the complex fractions\n    numerator_1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator_1 = Fraction(2, 25)\n    first_fraction = numerator_1 / denominator_1\n    \n    numerator_2 = 2 - Fraction(2, 3)\n    denominator_2 = Fraction(8, 3)\n    second_fraction = numerator_2 / denominator_2\n    \n    # Calculate the final answer\n    ans = first_fraction + second_fraction\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    first_8 = 8 * 1000  # The place value of the first 8\n    second_8 = 8 * 10   # The place value of the second 8\n    difference = first_8 - second_8\n    return difference\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        number = int(f'572{A}')\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    common_supplement, lcm_divisors = solve_congruence(*congruences)\n\n    ans = common_supplement\n    return ans\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    i = 0\n    while True:\n        if is_palindrome(40309 + i):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "from math import gcd\n\ndef solution():\n    length_a = 16\n    length_b = 24\n    ans = gcd(length_a, length_b)\n    return ans\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n\n    total_sheep = luna_position + sheep_behind\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_wage\n    return hours_needed\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The largest 5-digit number is 99999\n    # The smallest 5-digit number is 10000\n    # To find the largest 5-digit palindrome divisible by 45,\n    # we have to count down from 99999 and check if the number is a palindrome\n    # and divisible by 45.\n    for i in range(99999, 10000 - 1, -1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            largest_palindrome = i\n            break\n    \n    # To find the smallest 5-digit palindrome divisible by 45,\n    # we count up from 10000 and check if the number is a palindrome\n    # and divisible by 45.\n    for i in range(10000, 99999 + 1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            smallest_palindrome = i\n            break\n    \n    # The difference between the largest and smallest five-digit palindromic numbers\n    ans = largest_palindrome - smallest_palindrome\n\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mean score of all 10 students\n    x = symbols('x')\n    \n    # The sum of scores of the top 3 students\n    top_3_sum = 92 * 3\n    \n    # The mean score of the last 7 students is 6 less than the mean score of all 10 students\n    last_7_mean = x - 6\n    # The sum of scores of the last 7 students\n    last_7_sum = last_7_mean * 7\n    \n    # The total sum of scores of all 10 students should be equal to the sum of top 3 and last 7\n    equation = Eq(top_3_sum + last_7_sum, x * 10)\n    \n    # Solve for x\n    mean_score = solve(equation, x)[0]\n    \n    return mean_score\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))  # convert the year into a set of digits\n        if len(digits) == 4:  # check if there are 4 unique digits\n            sorted_digits = sorted(digits)  # sort the digits\n            if all(abs(int(sorted_digits[i]) - int(sorted_digits[i+1])) == 1 for i in range(3)):\n                lucky_years += 1\n    return lucky_years\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n\n    # Generate all possible ways to select three bags for Jaslin\n    for jaslin_bags_combination in combinations(bags, 3):\n        jaslin_marbles = sum(jaslin_bags_combination)\n        george_marbles = sum(bags) - sum(jaslin_bags_combination)\n        # Check if Jaslin gets twice as many marbles as George\n        if jaslin_marbles == 2 * george_marbles:\n            # If so, the remaining bag contains the red marbles\n            red_marbles = george_marbles\n            return red_marbles\n            \nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    \n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4, beth + 4 + 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x. Then the next four even numbers are x+2, x+4, x+6, x+8\n    # The sum of these five numbers is given as 100, so we set up the equation:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 100\n    # 5x + 20 = 100\n    # 5x = 80\n    # x = 16\n    # Therefore, the smallest even number is 16\n\n    # Calculation\n    x = (100 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance_in_5_hours = 550  # km\n    time_in_hours = 5          # hours\n    speed = distance_in_5_hours / time_in_hours  # km/h\n    travel_time_in_3_hours = 3  # hours\n\n    distance_in_3_hours = speed * travel_time_in_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    apples_left = 150\n    fraction_sold = 2 / 5\n    fraction_left = 1 - fraction_sold\n    \n    total_apples = apples_left / fraction_left\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    import numpy as np\n    ans = np.lcm.reduce([1, 2, 3, 4, 5])\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    number_of_jumps = 15 - 1\n    jump_length = 3\n    total_distance = number_of_jumps * jump_length\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from math import factorial\nfrom itertools import permutations\nfrom fractions import Fraction\n\ndef is_even_arrangement(arrangement):\n    for color in 'RBGYOP':\n        indices = [i for i, block in enumerate(arrangement) if block == color]\n        if (indices[1] - indices[0]) % 2 == 1:  # The number of blocks between pairs should be even\n            return False\n    return True\n\ndef solution():\n    blocks = 'RRBBYYGGOOPP'\n    even_count = 0\n    total_count = 0\n    \n    # Generate all unique permutations of the blocks\n    for p in set(permutations(blocks)):\n        total_count += 1\n        if is_even_arrangement(p):\n            even_count += 1\n            \n    # Reduce the fraction and sum the numerator and denominator\n    probability = Fraction(even_count, total_count).limit_denominator()\n    ans = probability.numerator + probability.denominator\n    return ans\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    a_rate = 1 / 36  # Pool filled per minute by inlet A\n    b_rate = 1 / 48  # Pool filled per minute by inlet B\n\n    # Define the pattern of opening inlets: (minutes for A, minutes for B)\n    pattern = [(1, 2), (2, 1)]\n    pattern_index = 0\n\n    # Initialize counters\n    time_elapsed = 0\n    pool_filled = 0\n\n    # Loop continues until the pool is filled\n    while pool_filled < 1:\n        # Get current pattern\n        a_time, b_time = pattern[pattern_index % len(pattern)]\n\n        # Add pool filling for inlet A's opening\n        if pool_filled + a_time * a_rate >= 1:\n            # If the pool will be filled during A's turn, find the exact time and break out of loop\n            time_elapsed += (1 - pool_filled) / a_rate\n            break\n        else:\n            pool_filled += a_time * a_rate\n            time_elapsed += a_time\n\n        # Add pool filling for inlet B's opening\n        if pool_filled + b_time * b_rate >= 1:\n            # If the pool will be filled during B's turn, find the exact time and break out of loop\n            time_elapsed += (1 - pool_filled) / b_rate\n            break\n        else:\n            pool_filled += b_time * b_rate\n            time_elapsed += b_time\n\n        # Move to next pattern\n        pattern_index += 1\n\n    return round(time_elapsed)\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Let x be the time it takes for Alan to paint the room alone\n    # The combined work rate is 1 room per 4 hours: 1/4\n    # Bob's work rate is 1 room per 6 hours: 1/6\n    # Alan's work rate is 1 room per x hours: 1/x\n    # The sum of their individual work rates is equal to their combined work rate\n    # So, 1/x + 1/6 = 1/4\n    # Solving for x gives us the time Alan would take to paint the room alone\n    \n    # Multiplying both sides by 12x to clear the denominators\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / x + 1 / 6, 1 / 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    # Probability it will rain on Saturday\n    p_rain_saturday = 0.7\n    # Probability it will rain on Sunday\n    p_rain_sunday = 0.5\n\n    # Probability it will not rain on a day is 1 minus the probability it will rain\n    p_no_rain_saturday = 1 - p_rain_saturday\n    p_no_rain_sunday = 1 - p_rain_sunday\n\n    # The probability it will not rain on both days\n    p_no_rain_both = p_no_rain_saturday * p_no_rain_sunday\n\n    # The probability it will rain on at least one day is 1 minus the probability it will not rain on both days\n    p_rain_at_least_one = 1 - p_no_rain_both\n\n    return p_rain_at_least_one\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 10\n    points_for_incorrect = -3\n    total_score = 48\n    \n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of incorrect answers\n    # Setting up the equation: x * points_for_correct + (total_questions - x) * points_for_incorrect = total_score\n    # Solving for x gives us the number of correct answers\n    for x in range(total_questions + 1):\n        if x * points_for_correct + (total_questions - x) * points_for_incorrect == total_score:\n            incorrect_answers = total_questions - x\n            return incorrect_answers\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bottles_bought = 10\n    empty_bottles = bottles_bought\n    empty_bottles += 1  # The shop owner lends one empty bottle\n    total_drunk = bottles_bought\n\n    while empty_bottles >= 2:\n        new_bottles = empty_bottles // 2\n        total_drunk += new_bottles\n        empty_bottles = empty_bottles % 2 + new_bottles\n        if empty_bottles == 1:  # Once the shop owner's bottle is returned\n            empty_bottles = 0\n    \n    return total_drunk\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # Initialize the counter for the number of zeros and the value of n\n    num_zeros = 0\n    n = 1\n\n    # We know that zeros come from factors of 10, which are 2 and 5\n    # Since there are more factors of 2 than 5 in the factorial, we only count the number of 5s\n\n    # Loop until the count of zeros in factorial of n reach 28\n    while num_zeros < 28:\n        # Copy the current value of n\n        temp_n = n\n        # Count the number of factors of 5 in n\n        while temp_n % 5 == 0:\n            num_zeros += 1\n            temp_n //= 5\n        \n        # If we haven't reached 28, increment n\n        if num_zeros < 28:\n            n += 1\n    \n    # Return the largest value of n which gives 28 zeros after the product\n    return n\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_back = 12\n    andrea_position_from_front = total_children - andrea_position_from_back + 1\n\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time in minutes for the height of A's waterline to be 3 times that of B\n    t = symbols('t')\n\n    # The rate at which pool A drains water per minute; A takes 10 minutes to drain completely\n    rate_A = 1/10\n    # The rate at which pool B drains water per minute; B takes 6 minutes to drain completely\n    rate_B = 1/6\n\n    # The height of A's water (proportion) after 't' minutes will be 1 - rate_A*t\n    # The height of B's water (proportion) after 't' minutes will be 1 - rate_B*t\n    # And we want the height of A to be 3 times the height of B:\n    equation = Eq((1 - rate_A*t), 3*(1 - rate_B*t))\n\n    # Solve the equation for 't'\n    solution = solve(equation, t)\n\n    return float(solution[0])\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    sweets_initial = 320\n    sweets_final = 348\n    sweets_bought_per_week = 30\n    weeks_passed = 7\n\n    sweets_eaten_per_week = ((sweets_initial + (sweets_bought_per_week * weeks_passed)) - sweets_final) // weeks_passed\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n\n    unfenced_path = total_path - fenced_path\n\n    return unfenced_path\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Before giving the sweets, Chenxi has 5 more sweets than Yue Ying.\n    # Let x be the number of sweets Yue Ying has.\n    # Then Chenxi has x + 5 sweets.\n\n    # After giving 10 sweets, Chenxi will have (x + 5) - 10 = x - 5 sweets.\n    # Yue Ying will have x + 10 sweets.\n    # The difference between their sweets will be (x + 10) - (x - 5) = 15.\n\n    difference_after_giving = 15\n    return difference_after_giving\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 36)\n\n    return ans\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "from itertools import permutations\n\ndef solution():\n    # Since there are only 6 possible positions (from 1 to 6) and we need to place '1'\n    # in three different spots, we can find all permutations of these positions\n    # taken 3 at a time.\n    positions = permutations(range(1, 7), 3)\n\n    # Now we filter out those permutations where '1' would appear in consecutive positions\n    # After filtering, we count the remaining permutations\n    count = sum(1 for pos in positions if not (sorted(pos)[1] - sorted(pos)[0] == 1 or sorted(pos)[2] - sorted(pos)[1] == 1))\n\n    return count\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Speeds in km/h\n    speed1 = 3\n    speed2 = 7\n    \n    # Times in minutes, converted to hours (1 min = 1/60 hours)\n    time_late = 12 / 60\n    time_early = -8 / 60\n    \n    # Considering the inverse proportionality of time and speed:\n    # time1 = time2 + time_late\n    # time2 = time1 - time_early\n    # Hence, speed1 * time1 = speed2 * (time1 - time_early)\n    # speed1 * (time2 + time_late) = speed2 * time2\n    # Solving the equation for time2 we get:\n    # time2 = (speed1 * time_late) / (speed2 - speed1)\n    time2 = (speed1 * time_late) / (speed2 - speed1)\n    \n    # Now we find the distance using time2 and speed2\n    # distance = speed * time\n    distance = speed2 * time2\n    \n    return distance\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes_list = list(primerange(1, 69))\n    for prime in primes_list:\n        if 69 - prime in primes_list:\n            return abs(69 - 2*prime)\n    return None\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = (4 * goats) - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for variables\n    school_a, school_b = symbols('school_a school_b')\n    \n    # Total number of students before transfer\n    equation1 = Eq(school_a + school_b, 1050)\n    \n    # Number of students in school A and B after transfer\n    equation2 = Eq(school_a - 20, school_b + 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (school_a, school_b))\n    \n    return solutions[school_a]\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_score = 70\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 10 - incorrect * 5\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    maths_students = 20\n    both_classes_students = 11\n    neither_class_students = 10\n\n    only_writing_class = total_students - (maths_students + neither_class_students - both_classes_students)\n\n    return only_writing_class\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    from itertools import permutations\n\n    # All possible pairs of positions for two pairs of brackets\n    bracket_positions = list(permutations([0, 1, 2, 3, 4], 4))\n    \n    # The initial expression as a list of elements\n    expression_elements = ['15', '+', '5', '*', '5', '+', '15', '-', '6', '+', '7']\n    \n    max_result = None\n    \n    # Iterate over all possible bracket positions\n    for pos in bracket_positions:\n        # Create a deep copy of the expression elements\n        test_expression = expression_elements.copy()\n        \n        # Insert brackets into the expression\n        test_expression.insert(pos[0] * 2, '(')    # Multiply by 2 because of the initial operator elements\n        test_expression.insert(pos[1] * 2 + 1, ')')\n        test_expression.insert(pos[2] * 2, '(')\n        test_expression.insert(pos[3] * 2 + 1, ')')\n        \n        # Convert to string to evaluate\n        test_expression_str = ' '.join(test_expression)\n        \n        # Calculate the result of the current expression with brackets\n        result = eval(test_expression_str)\n        \n        # Update max_result if the current result is greater\n        if max_result is None or result > max_result:\n            max_result = result\n    \n    return max_result\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "```python\nfrom itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '0872003'\n    primes = set()  # Use a set to store unique prime numbers\n\n    # Generate all permutations of the digits and then join them\n    for perm in permutations(digits):\n        num_str = ''.join(perm)\n        num = int(num_str)\n\n        # Check if the permutation is prime and less than 50\n        if num < 50 and isprime(num):\n            primes.add(num)\n\n    # Return the largest prime number found\n    return max(primes)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n\n    total_sum = total_average * 5\n    first_two_sum = first_two_average * 2\n    last_three_sum = total_sum - first_two_sum\n\n    last_three_average = last_three_sum / 3\n\n    return last_three_average\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age = symbols('teddy_age father_age')\n    equation1 = Eq(father_age, 7 * teddy_age)\n    equation2 = Eq(father_age + (40 - teddy_age), 40)\n\n    solutions = solve((equation1, equation2), (teddy_age, father_age))\n\n    return solutions[teddy_age]\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_of_odds = sum(range(1, 18, 2))\n    return sum_of_odds\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each cut can produce at most one more slice than the previous cut.\n    # So, the maximum number of slices is found by adding one more slice for each subsequent cut.\n    cuts = 4\n    max_slices = sum(range(1, cuts + 2))  # range starts from 1 and goes up to cuts+1\n\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n    \n    rabbit_position_left_to_right = elephant_position + toys_between + 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n    \n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    total_sum = sum(sum_of_digits(i) for i in range(1, 110))\n    return total_sum\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # The number of adults is 2/7 of the total.\n    # The number of boys is 4/5 of the remaining, so 1/5 of the remaining are girls.\n    # According to Adriana's workings, girls = (1/5) * (5/7) of the total population, which simplifies to 1/7.\n    # Adults = 2/7 of the total, so the difference is 2/7 - 1/7 = 1/7 of the total population.\n    # If 1/7 of the total population equals 80 people (the difference between adults and girls),\n    # then the total population is 7 * 80.\n    \n    # Calculate the total people\n    total_people = 7 * 80\n    \n    # Check Adriana's calculation error: girls should be 1/5 of the (5/7) remaining, not 1/5 of the 2/7 remaining\n    adults_fraction = 2/7       # Fraction of adults\n    remaining_fraction = 1 - adults_fraction  # Remaining fraction after adults\n    boys_fraction = 4/5        # Fraction of boys among the remaining\n    girls_fraction = (1 - boys_fraction) * remaining_fraction  # Correct calculation for fraction of girls\n\n    # Difference between the fraction of adults and girls according to Adriana's workings\n    diff_girls_adults_adriana = adults_fraction - (1/5 * (2/7))\n    \n    # Correct difference between the fraction of adults and girls\n    diff_girls_adults_correct = adults_fraction - girls_fraction\n    \n    # The difference according to Adriana's workings corresponds to 80 people as per the problem\n    # Checking if the fraction corresponding to 80 in Adriana's workings is correct.\n    # It should be diff_girls_adults_correct but Adriana used diff_girls_adults_adriana\n    if abs(diff_girls_adults_adriana - diff_girls_adults_correct) < 1e-6:\n        # The difference is correct, we can use the 80 people to find the total population\n        ans = total_people\n    else:\n        # The difference is not correct, we need to calculate the total population using the correct difference\n        ans = int(80 / diff_girls_adults_correct)\n    \n    return ans\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink_dolphins = 1  # Let's assume there is 1 pink dolphin and find the correct number by solving the equation\n    gray_dolphins = pink_dolphins * 11  # The number of gray dolphins is 11 times the pink one\n\n    # The sum of pink and gray dolphins should be 48\n    total_dolphins = pink_dolphins + gray_dolphins\n\n    # Now we write the equation: pink + 11 * pink = 48\n    # which simplifies to: 12 * pink = 48\n    # Solving for pink, we get pink = 48 / 12\n\n    pink_dolphins = 48 / 12\n\n    return int(pink_dolphins)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    base = 9\n    area = 54\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum([(3 * i + 2) ** 2 for i in range(11)])\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the expression using properties of exponents\n    # denominator = (2^2)^982 - 2^1963 = 2^1964 - 2^1963\n    # This simplifies to denominator = 2^1963\n    # Hence, fraction = 2^2019 / 2^1963 = 2^(2019 - 1963) = 2^56\n    # Now, we need to find the remainder of 2^56 divided by 5\n    remainder = (2 ** 56) % 5\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables, chairs = symbols('tables chairs')\n\n    equation1 = Eq(chairs - tables, 0)  # originally, number of chairs equal to tables\n    equation2 = Eq(chairs + 24, 4 * (tables - 42))  # after changes, chairs are 4 times tables\n\n    solutions = solve((equation1, equation2), (tables, chairs))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 700 * 0.35\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    candy_cabinet = 1  # Candy's cabinet itself\n\n    total_cabinets = cabinets_left_of_candy + candy_cabinet + cabinets_right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        if (1000 + 60 + y) % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):\n        num = int(f\"49{i:02d}\")\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    for cars in range(28):  # Since there are 27 vehicles in total, the number of cars can't exceed 27.\n        motorcycles = 27 - cars * 2  # The number of cars is equal to the number of lorries, so we double the cars to account for both cars and lorries.\n        wheels = motorcycles * 2 + cars * 4 + cars * 6  # Calculate total wheels.\n        if wheels == 96:\n            return cars\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = ((n * (n + 1)) // 2) ** 2\n    sum_of_numbers = (n * (n + 1)) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of one chocolate, and y be the mass of the empty jar.\n    # We have two equations based on the given information:\n    # 5x + y = 185g (the mass of the jar with 5 chocolates)\n    # 17x + y = 317g (the mass of the jar with 17 chocolates)\n    # We can solve these equations for x and y.\n\n    # Subtract the first equation from the second to find x.\n    x = (317 - 185) / (17 - 5)  # Solving for x gives the mass of one chocolate.\n\n    # Now solve for y using either equation. Let's use the first one.\n    # 5x + y = 185\n    # y = 185 - 5x\n    y = 185 - (5 * x)\n\n    # The mass of the jar with 10 chocolates is 10x + y.\n    ans = (10 * x) + y\n\n    return ans\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    olaf_height = ana_height - 116\n    kristoff_height = 5.5 * olaf_height\n    difference = kristoff_height - ana_height\n    return difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    return 113 - 29\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700  # Total weight of the sugar solution\n    sugar_concentration = 0.32  # Sugar concentration (32%)\n    sugar_weight = total_weight * sugar_concentration  # Weight of the sugar\n    water_weight = total_weight - sugar_weight  # Weight of the water\n\n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Since it is divisible by 5, the last digit must be 0 or 5.\n    # Since it is divisible by 2, the last digit must be 0.\n    last_digit = 0\n\n    # Find the three missing digits such that the sum of all digits is divisible by 3.\n    # Starting with the smallest possible remaining two digits which is 00\n    for x in range(100):\n        # Construct the possible number with the current digits\n        number = int(f\"1992{x:02d}{last_digit}\")\n        # Check for divisibility by 3 and 11\n        if number % 3 == 0 and number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of apples John bought be 'a'\n    a = symbols('a')\n\n    # Given:\n    # John bought (4/5)*a pears and (2/5)*a mangoes\n    # Total cost for all fruits is $150\n    # Cost ratio of apples to pears is 3:2, which means cost of pears is (2/3) times cost of apples\n    # Cost ratio of pears to mangoes is 1:5, which implies cost of mangoes is 5 times cost of pears\n    # Each apple cost $0.60, therefore cost of 'a' apples is 0.60*a\n\n    # Calculate cost of pears and mangoes based on apples' cost\n    cost_apples = 0.60 * a\n    cost_pears = (2/3)*cost_apples\n    cost_mangoes = 5*cost_pears\n\n    # Equate the total cost equation and solve for 'a'\n    total_cost_eq = Eq(cost_apples + cost_pears + cost_mangoes, 150)\n\n    # Solve for the number of apples 'a'\n    number_of_apples = solve(total_cost_eq, a)[0]\n\n    # Calculate the number of pears and mangoes\n    number_of_pears = (4/5)*number_of_apples\n    number_of_mangoes = (2/5)*number_of_apples\n\n    # The total number of fruits is the sum of apples, pears, and mangoes\n    total_fruits = number_of_apples + number_of_pears + number_of_mangoes\n    \n    return int(total_fruits)\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    return 3.05 - (1 / 10)\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    trees = 21\n    intervals = trees - 1  # Number of intervals between the trees\n    \n    distance_between_trees = total_length / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    jessica_age_diff = 3\n\n    hazel_current_age = hazel_age_in_3_years - 3\n    hazel_age_next_year = hazel_current_age + 1\n\n    jessica_current_age = hazel_current_age - jessica_age_diff\n    jessica_age_next_year = jessica_current_age + 1\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half_year = 366\n    average_second_half_year = 65\n    months_in_half_year = 6\n    \n    total_second_half_year = average_second_half_year * months_in_half_year\n    total_year = total_first_half_year + total_second_half_year\n    average_per_month = total_year / (months_in_half_year * 2)\n\n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = \"ELEMENT\"\n    freq = {char: word.count(char) for char in set(word)}\n\n    num_ways = factorial(len(word))\n    for k, v in freq.items():\n        num_ways //= factorial(v)\n\n    return num_ways\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    # Euclidean Algorithm for finding GCD (Greatest Common Divisor)\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    return gcd(4811, 1981)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    average_six = 92\n    average_first_five = 94\n    total_first_five = average_first_five * 5\n    total_six = average_six * 6\n    score_sixth_assignment = total_six - total_first_five\n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    profit_per_pair = selling_price - cost_price\n    remaining_pairs = 5\n    total_profit = 440\n\n    # Calculate total pairs sold\n    pairs_sold = total_profit // profit_per_pair\n    # Calculate initial pairs purchased\n    initial_pairs = pairs_sold + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    half_duration = timedelta(hours=1, minutes=45) / 2\n    start_time = end_time - half_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_at_the_end = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_at_the_beginning = cars_at_the_end - cars_entered + cars_exited\n\n    return cars_at_the_beginning\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((2 * x) / 4)**2, (6 * 10) + 4)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_per_day = 10\n    leak_per_night = 3\n    initial_fill = 3\n    effective_fill = fill_per_day - leak_per_night  # The net amount of water filled in per day\n\n    # On the first day, only 3 liters are filled\n    days_passed = 1\n    current_water_amount = initial_fill\n\n    while current_water_amount < total_water_needed:\n        current_water_amount += effective_fill\n        days_passed += 1\n    \n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_period = 24\n    ginny_period = 36\n\n    lcm = (amy_period * ginny_period) // gcd(amy_period, ginny_period)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 30\n    total_time = seconds_per_minute * minutes\n    \n    def count_digits(n):\n        return sum(len(str(i)) for i in range(1, n + 1))\n    \n    left = 1\n    right = total_time\n    \n    while left < right:\n        mid = (left + right + 1) // 2\n        if count_digits(mid) <= total_time:\n            left = mid\n        else:\n            right = mid - 1\n    \n    return left\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    difference = max(amounts) - min(amounts)\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    time_played = timedelta(minutes=225)\n    start_time = end_time - time_played\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # The worst case scenario to get the first green marble is when Darrell draws\n    # all other marbles first. So, he must draw all the blue, white and black marbles.\n    blue = 5\n    white = 9\n    black = 2\n    # He must draw at least one green marble.\n    green = 1\n    \n    # Total number of marbles to guarantee drawing a green one.\n    total = blue + white + black + green\n\n    return total\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    return comb(20, 2)\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n    return toys_in_1_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_climbed = 0\n    days = 0\n    while total_climbed < 20:\n        days += 1\n        if days != 7:\n            total_climbed += 6\n        else:\n            total_climbed += 2\n        \n        if total_climbed < 20:\n            # Slide down occurs here, we don't know the value yet.\n            total_climbed -= unknown_slide\n    # On the last day (7th day), the sliding down doesn't happen\n    # because the snail has reached the top after the climb.\n    last_day_climb = 2\n    climb_other_days = (days - 1) * 6\n    snail_slide_down = (climb_other_days + last_day_climb) - 20\n    return snail_slide_down\n\nunknown_slide = symbols('unknown_slide')\nans = solve(solution() - unknown_slide, unknown_slide)[0]"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    \n    # apply the growth and death rate for each year\n    for year in range(1, years + 1):\n        # Each year, the population is tripled\n        initial_rabbits *= 3\n        # and then halved due to death\n        initial_rabbits /= 2\n    \n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    candy_speed = symbols('candy_speed')\n\n    # When they meet, total time walked by Ivy is 6 + 12 minutes\n    ivy_time = 18  # in minutes\n\n    # Candy walks for 12 minutes\n    candy_time = 12  # in minutes\n\n    # Ivy walks 20 meters per minute more than Candy\n    ivy_speed = candy_speed + 20  # in meters per minute\n\n    # The distance they have covered when they meet should be equal to 1200 meters\n    # Ivy's distance + Candy's distance = 1200\n    # Ivy's speed * Ivy's time + Candy's speed * Candy's time = 1200\n\n    equation = Eq(ivy_speed * ivy_time + candy_speed * candy_time, 1200)\n\n    # Solve for Candy's speed\n    solutions = solve(equation, candy_speed)\n    return solutions[0]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays 7 games (against every other player).\n    # Since every game results in a win for one player and a loss for another, there are a total of 7 * 8 / 2 = 28 games.\n    # Every player has a different number of wins. The least number of wins is 0 (for the player who loses all games).\n    # The player with the most wins (the champion) must have 7 wins, as it's impossible to have more than 7 wins in 7 games.\n    # This is because the wins are distributed as follows: 0, 1, 2, 3, 4, 5, 6, 7.\n    # Thus, the champion has 7 wins.\n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2  # Minah's rate of making puffs per hour\n    hours_needed = 120 / puffs_per_hour  # Total hours needed to make 120 puffs\n    return hours_needed\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal1 = 6\n    weight_metal2 = 14\n    nickel_percent1 = 45 / 100\n    nickel_percent2 = 60 / 100\n\n    total_nickel = (weight_metal1 * nickel_percent1) + (weight_metal2 * nickel_percent2)\n    total_weight = weight_metal1 + weight_metal2\n    \n    nickel_concentration_percent = (total_nickel / total_weight) * 100\n\n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    target_sum = 13\n    max_product = 0\n    \n    for numbers in combinations_with_replacement(range(1, target_sum+1), 4):\n        if sum(numbers) == target_sum:\n            max_product = max(max_product, numbers[0]*numbers[1]*numbers[2]*numbers[3])\n            \n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n    \n    while mother_age != 3 * (edward_age + years):\n        years += 1\n        \n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 1 / 6  # Corresponds to 1 cm to 6 m.\n    plan_length_cm = 5   # Length of the playground on the plan in centimeters.\n\n    real_length_m = plan_length_cm / scale_ratio  # Real length in meters.\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    i = 1\n    while True:\n        small_square = i * i\n        large_square = (i + 1) * (i + 1)\n        if small_square + 11 == large_square - 12:\n            return small_square + 11\n        i += 1\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n\n    number_of_boxes = total_money // cookie_box_price\n\n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    return 4060800 - 4000000 - 800\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    difference = 56\n    tank_b = tank_a + difference\n\n    return tank_b\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = boys * 30\n    average_apples = 26\n\n    # Let the number of girls be g\n    # We can set up the equation (boys_apples + 20 * g) / (boys + g) = average_apples\n    # And solve for g\n\n    g = symbols('g')      \n    total_apples = Eq((boys_apples + 20 * g) / (boys + g), average_apples)    \n    girls = solve(total_apples, g)\n\n    return girls[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # in pounds\n    richie_share = total_wealth * 1/3\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * 1/2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * 2/5\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_items + 1):\n        volleyballs = total_items - basketballs\n        if (basketballs * cost_basketball + volleyballs * cost_volleyball) == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * (1/3)\n    remaining_candy = remaining_after_lily - given_to_brother\n    \n    return remaining_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/i for i in range(1, n+1)) for n in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the amount of money Roy and Dennis initially had as R and D respectively.\n    R, D = symbols('R D')\n    \n    # The total money they shared is $340.\n    total_money_eq = Eq(R + D, 340)\n    \n    # After spending, Dennis has twice as much as Roy.\n    # Roy spent 2/3 of his money, so he has 1/3 left: R/3\n    # Dennis spent 1/4 of his money, so he has 3/4 left: 3D/4\n    # Dennis has twice as much money left as Roy: 3D/4 = 2*(R/3)\n    money_left_eq = Eq(3*D/4, 2*(R/3))\n    \n    # Solving the system of equations.\n    solutions = solve((total_money_eq, money_left_eq), (R, D))\n    \n    # Dennis had 3/4 of his money left in the end.\n    dennis_end_money = 3/4 * solutions[D]\n    \n    return dennis_end_money\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n    saturday = friday + 27\n    sunday = friday - 14\n\n    equation = Eq(friday + saturday + sunday, 475)\n    solutions = solve(equation, friday)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits_per_page = 9\n    current_digits = 0\n    current_page = 0\n\n    for num_digits in range(1, 4):\n        max_pages = 10**num_digits - 10**(num_digits - 1)\n        if current_digits + num_digits * max_pages >= 300:\n            remaining_digits = 300 - current_digits\n            current_page += remaining_digits // num_digits\n            break\n        current_digits += num_digits * max_pages\n        current_page += max_pages\n\n    return current_page\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    cost_per_ball = 20.45\n    num_balls = 8\n    num_hula_hoops = 6\n\n    total_cost_balls = num_balls * cost_per_ball\n    total_cost_hula_hoops = total_cost - total_cost_balls\n    cost_per_hula_hoop = total_cost_hula_hoops / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    import math\n\n    def prime_factors(n):\n        factors = {}\n        for i in range(2, int(math.sqrt(n)) + 1):\n            while n % i == 0:\n                n //= i\n                factors[i] = factors.get(i, 0) + 1\n        if n > 1:\n            factors[n] = 1\n        return factors\n\n    def smallest_number_for_perfect_square(base_factors):\n        num = 1\n        for prime, count in base_factors.items():\n            if count % 2 != 0:\n                num *= prime\n        return num\n\n    base = 693\n    factors = prime_factors(base)\n    ans = smallest_number_for_perfect_square(factors)\n\n    return ans\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17_times_4 = (pow(17, 379, 10) * pow(4, 2012, 10)) % 10\n    ans = (unit_digit_13 + unit_digit_17_times_4) % 10\n    return ans\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from fractions import Fraction\n    \n    total_mass = 1371\n    # Let's denote x as the mass of mint candies, which remains constant across all containers\n    x = symbols('x')\n    \n    # For the first container, the fraction for strawberry candies is 2/5\n    strawberry_1 = Fraction(2, 5)\n    # The remaining fraction 3/5 will be the sum of chocolate and mint candies\n    # Since mint stays the same (x), we could express chocolate as (3/5)*mass - x for the first container\n    \n    # For the second container, the fraction for strawberry candies is 2/7\n    strawberry_2 = Fraction(2, 7)\n    # Similarly, the remaining fraction 5/7 will be the sum of chocolate and mint candies\n    # Chocolate amount would be (5/7)*mass - x for the second container\n    \n    # For the third container, the fraction for strawberry candies is 2/9\n    strawberry_3 = Fraction(2, 9)\n    # And the remaining fraction 7/9 will be the sum of chocolate and mint candies\n    # Chocolate amount would be (7/9)*mass - x for the third container\n    \n    # We can now express three equations based on the above logic where the sum of chocolates and mint is constant\n    # (3/5)*mass1 - x + x = (5/7)*mass2 - x + x = (7/9)*mass3 - x + x\n    # Let's simplify to mass1 + mass2 + mass3 which equals to total_mass\n    # and express mass2 and mass3 in terms of mass1 and x\n    \n    # mass1 / (3/5) = mass2 / (5/7) = mass3 / (7/9)\n    # Let's solve for mass1 in terms of x, then find mass2 and mass3\n    mass1 = solve(total_mass - ((5/3) * (7/5) * x + (9/3) * (7/9) * x + x / (3/5)), x)[0] * (3/5)\n    mass2 = (5/3) * (7/5) * mass1\n    mass3 = (9/3) * (7/9) * mass1\n    \n    # Calculating the total mass of strawberry candies\n    total_strawberry_mass = strawberry_1 * mass1 + strawberry_2 * mass2 + strawberry_3 * mass3\n    \n    return total_strawberry_mass\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_liters = 8 * 3\n    remaining_liters = total_liters - 9\n    container_volume = 5\n\n    containers_needed = -(-remaining_liters // container_volume)\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    sol = solve(equation, A)\n    return sol[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3.5  # in kilograms\n    cost_per_kg = 7.5  # in pounds per kilogram\n    amount_have = 20  # in pounds\n\n    total_cost = steak_weight * cost_per_kg  # total cost of the steak\n    additional_money_needed = total_cost - amount_have  # additional money required\n\n    return additional_money_needed if additional_money_needed > 0 else 0\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n    \n    position_from_end = total_people - position_from_start + 1\n    \n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    ans = 498 + 349\n    return ans\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a light bowling ball\n    x = symbols('x')\n    \n    # Equation: 6*x + 6*(2*x) = 65.7\n    equation = Eq(6*x + 6*(2*x), 65.7)\n\n    # Solve the equation\n    mass_of_light_ball = solve(equation, x)[0]\n    \n    # Return the mass to the nearest kg\n    return round(mass_of_light_ball)\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    benson_after = benson - 34\n    clive_after = clive - 63\n    total_money = 705\n    \n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson_after, clive_after)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of stickers each person originally had\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    # Equation for the number of stickers Mary and Alexis have\n    equation1 = Eq(mary, 7/5 * alexis)\n\n    # Equations for the number of stickers each person gave to Charlotte (20% of their own)\n    equation2 = Eq(mary - 0.20 * mary, mary - mary / 5)\n    equation3 = Eq(alexis - 0.20 * alexis, alexis - alexis / 5)\n    equation4 = Eq(charlotte + 0.20 * mary + 0.20 * alexis, 1.80 * charlotte)\n\n    # Equation for the difference in stickers between Mary and Charlotte after giving\n    equation5 = Eq(mary - mary / 5 - (charlotte + mary / 5 + alexis / 5), 20)\n\n    # Solve the system of equations for the amount of stickers each had originally\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (mary, alexis, charlotte))\n\n    # Getting the result for the number of stickers Alexis had at first\n    return solutions[alexis]\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be in the range 1-9 to ensure it is a four-digit number\n        for j in range(0, 10):  # The second digit can be in the range 0-9\n            palindromic_number = int(str(i) + str(j) + str(j) + str(i))  # Constructing the palindromic number\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # average of A and B is 50\n    equation1 = Eq((A + B) / 2, 50)\n    # average of B and C is 43\n    equation2 = Eq((B + C) / 2, 43)\n    # average of A and C is 45\n    equation3 = Eq((A + C) / 2, 45)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    avg_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return avg_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise_pens = symbols('denise_pens')\n    jay_pens = 6 * denise_pens\n    total_pens = Eq(jay_pens + denise_pens, 126)\n\n    num_of_denise_pens = solve(total_pens, denise_pens)\n    \n    return num_of_denise_pens[0]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_price = 1.26\n    total_chocolate_cost = 5 * chocolate_price\n    cookie_price = total_chocolate_cost / 6\n    money_left = 9.05 - 4 * cookie_price\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the distribution of balls between boys and girls\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    \n    # Equation representing the total number of children\n    equation2 = Eq(boys + girls, 650)\n    \n    # Solve the system of equations for boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    box = symbols('box')\n    equation = Eq(8 * 11, box * 9 + 34)\n    solution = solve(equation, box)\n    return solution[0]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: After 25 girls left, the number of girls (girls - 25) becomes 2/3 of the number of boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n\n    # Equation 2: After 15 boys left, the number of boys (boys - 15) equals the number of girls (girls - 25)\n    equation2 = Eq(boys - 15, girls - 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Compute the initial total number of students\n    total_initial_students = solutions[boys] + solutions[girls]\n\n    return total_initial_students\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    temp_drop = 12\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of groups of coins in the ratio 8:3\n    # value of $10-cent coins = 10 * 8 * x cents\n    # value of $50-cent coins = 50 * 3 * x cents\n    # Total value in cents is 7590 (since 1 dollar = 100 cents)\n    # Equation: 10 * 8 * x + 50 * 3 * x = 7590\n    # Simplified: 80x + 150x = 7590\n    # Combined: 230x = 7590\n    # Solved for x: x = 7590 / 230\n    x = 7590 / 230\n    \n    # Now calculate the value of the $50-cent coins\n    value_of_50_cent_coins = 50 * 3 * x  # in cents\n    value_of_50_cent_coins_in_dollars = value_of_50_cent_coins / 100  # convert cents to dollars\n\n    return value_of_50_cent_coins_in_dollars\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    # Original price is calculated by dividing the spent amount by the discount (1 - 0.80)\n    original_price = 6400 / 0.20\n    # Money saved is the difference between the original price and the amount spent\n    money_saved = original_price - 6400\n    \n    return money_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7\n    hole_side_length = 3\n    total_volume = 320\n\n    # volume of the prism without the hole\n    base_area = base_side_length ** 2\n    # area removed by the hole\n    hole_area = hole_side_length ** 2\n\n    # volume of the prism with the hole is the total volume minus the volume removed by the hole\n    # as the hole goes through the prism vertically, the height of the removed part is the same as the height of the prism\n    # hence, the volume of the hole is hole_area * height\n    # and then, the height of the prism can be found by subtracting the volume of the hole and dividing by the area of the base\n    # (base_area - hole_area) * height = total_volume => height = total_volume / (base_area - hole_area)\n    height = total_volume / (base_area - hole_area)\n    \n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as a single entity, and now we have 7 entities to arrange\n    arrange_entity = factorial(7)\n    \n    # Amy and Judy can switch places with each other\n    switch_places = factorial(2)\n    \n    # Multiply the two possibilities\n    total_ways = arrange_entity * switch_places\n    \n    # Divide by the number of seats to account for rotational symmetry\n    ans = total_ways // 8\n    \n    return ans\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    triangular_numbers = []\n    current_sum = 0\n    for i in range(1, 2008):\n        current_sum += i\n        triangular_numbers.append(current_sum)\n        if current_sum >= 2008:\n            break\n    \n    for i, tn in enumerate(triangular_numbers):\n        if 2008 <= tn:\n            return i + 1 if tn != 2008 else i\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    # From the problem: 3x = 10y, and 1 x weighs 1.5g\n    weight_of_x = 1.5  # weight of 1 x in grams\n    # Using the equation 3x = 10y, we can solve for 1 y\n    weight_of_y = (3 * weight_of_x) / 10\n    return weight_of_y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    digits = [3, 5, 9]\n    count = 0\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j != k != i:  # This condition ensures all digits are different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            sum += i\n    return sum\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve((equation.subs(tomatoes, 27)), cucumbers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_bags = total_bags // 3\n    remaining_bags = total_bags - given_bags\n    return remaining_bags\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # A cannot be zero as it is the first digit of a 3-digit number\n            return 100 * A + 10 * B + C\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Given data\n    n = 31\n    night_num = 16\n    mosquitoes_on_16th_night = 100\n\n    # The mosquitoes eaten form an arithmetic sequence. Since on the 16th night she ate 100\n    # and each night she ate 6 more than the night before, we can find the first term a1.\n    d = 6  # Common difference (each night 6 more)\n    \n    # Calculate the first term using the formula for the nth term of an arithmetic sequence:\n    # an = a1 + (n - 1) * d. Thus, a1 = an - (n - 1) * d\n    an = mosquitoes_on_16th_night\n    a1 = an - (night_num - 1) * d\n\n    # Calculate the sum of the arithmetic sequence using the formula:\n    # Sn = n/2 * (2a1 + (n - 1)d)\n    Sn = n/2 * (2 * a1 + (n - 1) * d)\n    \n    return int(Sn)\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or D == 0:\n            continue\n        ABAC = A * 1001 + B * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Since Chris starts first, to ensure his victory, he needs to make sure that\n    # at the end he is left with an optimal move.\n    # Since only 1 or 2 matches can be taken at a time,\n    # Chris must leave Dylan with a number of matches that is a multiple of 3.\n    # So, Chris must take away a number of matches that will not result\n    # in the remaining number of matches being a multiple of 3.\n\n    total_matches = 7\n    # Chris can only take 1 or 2 matches on the first turn.\n    # We check what number of matches Chris should take to leave a non-multiple of 3.\n\n    for first_move in range(1, 3):\n        remaining_matches = total_matches - first_move\n        if remaining_matches % 3 != 0:\n            # Found the number of matches Chris must take away to win.\n            return first_move\n\n    # If there's no explicit return in the loop, return 0 as a placeholder (should not happen with given rules).\n    return 0\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    from datetime import datetime\n\n    format_str = '%I.%M%p'  # The format\n    time_start = datetime.strptime('9.23am', format_str)\n    time_end = datetime.strptime('1.06pm', format_str)\n\n    difference = time_end - time_start\n    minutes_difference = difference.total_seconds() / 60\n    \n    return int(minutes_difference)\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    result = (64 ** 2) - 36\n    return result\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # He has options from Monday to Sunday, i.e. seven choices.\n    choices_per_day = 7\n    # The number of selections he can make over seven days.\n    total_selections = choices_per_day ** 7\n    return total_selections\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    sequence_sum = sum(range(1, 10)) + sum(range(1, 10))\n    return sequence_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for prices of notebook, pencil case and eraser\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    # Create equations based on the information provided\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = sum([i - j for i, j in zip(range(53, 22, -6), range(50, 19, -6))])\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance // speed\n    auntie_time = 5\n    \n    return correct_time if auntie_time == correct_time else correct_time\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 2):\n        A, E = p\n        if A == 0: # A cannot be 0 as it is the first digit\n            continue\n        \n        AEEA = 1000 * A + 100 * E + 10 * E + A\n        if set(str(4 * AEEA)) == set(str(AEEA)):\n            return AEEA\n        \nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25\n    age_sum_others = 14 + 36 + 10\n    age_harry_dad = total_age - age_sum_others\n\n    return age_harry_dad\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to centimeters for comparison\n    measurements_in_cm = [8300, 200, 8, 50]  # 83m, 200cm, 8cm, 1/2m respectively\n    \n    # Height of a standard classroom door in cm (approximately 200cm or 2m)\n    door_height_cm = 200\n    \n    closest_height = min(measurements_in_cm, key=lambda x: abs(x - door_height_cm))\n    \n    return closest_height\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    money_left = 45\n    fraction_dinner = 2 / 7\n    fraction_lunch = 5 / 12\n    \n    # Amount before dinner\n    before_dinner = money_left / (1 - fraction_dinner)\n    \n    # Initial amount\n    initial_amount = before_dinner / (1 - fraction_lunch)\n    \n    return initial_amount\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_per_page = [9 * i * (10**(i-1)) for i in range(1, 4)]  # 1-9, 10-99, ...\n    total_digits = 450\n    pages = 0\n\n    for i, dpp in enumerate(digits_per_page, 1):\n        pages_in_this_range = min(total_digits // dpp, 9 * (10**(i-1)))\n        pages += pages_in_this_range\n        total_digits -= pages_in_this_range * i\n        if total_digits < 0:\n            break\n\n    # compensate for the range where the remaining digits fall\n    pages += total_digits // i\n\n    return pages\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 0\n    page_number = 0\n    \n    while total_digits < 1524:\n        page_number += 1\n        total_digits += len(str(page_number))\n        \n    return page_number\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = sum(range(1, 5))  # Total games played is the sum of the first four numbers\n    won_games = 2 + 1 + 4 + 3  # Total games won by Lily, Eva, Tina, and Emma\n    gina_wins = total_games - won_games  # Total games won by Gina\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    return 2 * difference\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "import math\n\ndef solution():\n    # Constants given in the problem\n    g = 9.81  # gravitational acceleration in m/s^2\n    theta = 20  # angle of incline in degrees\n    d = 400  # distance along the slope in meters\n    mu_k = 0.2  # coefficient of kinetic friction\n\n    # Converting degrees to radians for math functions\n    theta_radians = math.radians(theta)\n\n    # Calculate the acceleration using the formula a = g(sin(theta) - mu_k * cos(theta))\n    a = g * (math.sin(theta_radians) - mu_k * math.cos(theta_radians))\n\n    # Initial velocity u is 0 as the skier starts from rest\n    u = 0\n\n    # Using the kinematic equation v^2 = u^2 + 2ad to find the final velocity v at the bottom\n    # Since u is 0, the equation simplifies to v = sqrt(2ad)\n    v = math.sqrt(2 * a * d)\n\n    return v\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_cost = 5\n    bag_cost = 10\n    total_spent = 300\n\n    # Correct calculation:\n    # If for every 4 shirts bought, 1 bag is bought,\n    # Then the cost of 4 shirts and 1 bag is 4 * shirt_cost + 1 * bag_cost.\n    cost_per_group = 4 * shirt_cost + bag_cost\n\n    # Now, calculate the number of such groups she could have bought.\n    number_of_groups = total_spent // cost_per_group\n\n    # Finally, calculate the number of shirts based on the number of groups.\n    shirts_bought = number_of_groups * 4\n\n    # Marcus' error: He considered that 1 bag was bought for every single shirt,\n    # which is incorrect. It should be 1 bag for every 4 shirts.\n\n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Work done by one man in one day\n    work_per_man = 1 / (6 * 5)  # Job / (men * days)\n    # Work done by one woman in one day\n    work_per_woman = 1 / (5 * 6)  # Job / (women * days)\n    \n    # Total work done by 10 men and 5 women in one day\n    total_daily_work = 10 * work_per_man + 5 * work_per_woman\n    \n    # Number of days required to complete the job by 10 men and 5 women\n    days_required = 1 / total_daily_work\n    \n    return days_required\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddie_correct, avril_correct = symbols('eddie_correct avril_correct')\n    # Eddie's total points\n    eddie_points = eddie_correct * 10 - (10 - eddie_correct) * 5\n    # Avril's total points\n    avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n\n    # System of equations based on the problem statement\n    total_points_eq = Eq(eddie_points + avril_points, 155)\n    points_difference_eq = Eq(eddie_points - avril_points, 15)\n\n    # Solving the equations\n    solutions = solve((total_points_eq, points_difference_eq), (eddie_correct, avril_correct))\n    \n    return solutions[avril_correct]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    import math\n\n    weight_A = 56\n    weight_B = 96\n    weight_C = 120\n\n    common_divisor = math.gcd(math.gcd(weight_A, weight_B), weight_C)\n    \n    return common_divisor\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors_sum = sum(i + n//i for i in range(1, int(n**0.5)+1) if n % i == 0)\n    return factors_sum\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: 3 times as many boys as girls\n    initial_condition = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined, the number of boys and girls became equal\n    final_condition = Eq(boys - 12, girls + 20)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana, orange = symbols('apple banana orange')\n\n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    equation3 = Eq(apple + banana + orange, 24)\n\n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age = 8\n    mother_age = 44\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (anna_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    min_apples = 1\n    \n    # Distribute one apple to each child first\n    apples -= children\n    \n    # Since we want the maximum number of apples for one child to be \n    # as small as possible, we distribute the rest evenly\n    # to the remaining children.\n    # We sort the children from who gets the most to who gets the least.\n    # In the worst case scenario, the first 5 children get one more apple than the sixth child.\n    \n    apples_per_child = [min_apples for _ in range(children)]\n    child = 0\n    while apples > 0:\n        apples_per_child[child % (children - 1)] += 1\n        apples -= 1\n        child += 1\n    \n    # The child who gets the most is the first child in the sorted list\n    max_apples_for_child = max(apples_per_child)\n    \n    return max_apples_for_child\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n    \n    # Assume all animals are chickens with 2 legs\n    chickens = total_animals\n    rabbits = 0\n    legs_with_all_chickens = chickens * 2\n    \n    # Calculate the difference in legs when assuming all chickens\n    extra_legs = total_legs - legs_with_all_chickens\n    \n    # Since a rabbit has 2 more legs than a chicken, divide the extra legs by 2 to find the number of rabbits\n    rabbits = extra_legs // 2\n    # The number of chickens is reduced by the number of rabbits\n    chickens = total_animals - rabbits\n    \n    return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    concentration = (sugar / (sugar + water)) * 100\n    return concentration\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short_ribbon = 7\n    nancy_long_ribbon = 18\n    short_length_cm = 40\n    long_length_cm = 70\n    extra_length_cm = 240\n\n    nancy_total_cm = nancy_long_ribbon * long_length_cm\n    may_total_cm = nancy_total_cm + extra_length_cm\n    may_short_total_cm = may_short_ribbon * short_length_cm\n\n    # Calculate the number of long ribbons May has by subtracting the length of all short ribbons from her total length (in cm)\n    # and dividing by the length of a long piece of ribbon.\n    may_long_ribbon = (may_total_cm - may_short_total_cm) // long_length_cm\n\n    # Calculate the total number of pieces of ribbon May has\n    total_may_ribbon = may_short_ribbon + may_long_ribbon\n    \n    return total_may_ribbon\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_quantity = 1  # litre\n    ratio_red_to_blue = 3 / 1\n    red_paint = (total_quantity * ratio_red_to_blue) / (1 + ratio_red_to_blue)\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for number in range(99, 9, -1):  # Start from 99 down to 10 (two-digit numbers)\n        if (number - 3) % 4 == 0 and (number - 3) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_value = 6\n    total_elements = 8\n\n    total_sum = mean_value * total_elements\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    given_to_sister = total_money / 4\n    remaining_money = total_money - given_to_sister\n    \n    return remaining_money\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of books in each shelf\n    A, B = symbols('A B')\n    \n    # Setup the equations based on the problem statement\n    # After A gives B 40 books, they have the same number\n    eq1 = Eq(A - 40, B + 40)\n    \n    # After B gives A 40 books, A has three times the number of books as B\n    eq2 = Eq(A + 40, 3 * (B - 40))\n    \n    # Solve the system of equations for A and B\n    solutions = solve((eq1, eq2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # mass of 12 packets in kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Initially assign the minimum number of apples each child can get (1 apple each),\n    # which leaves 50 - 8 = 42 apples to distribute.\n    apples_left = 50 - 8  # at least 1 apple for each child\n    \n    # As the next child must get at least 1 more than the previous to be different,\n    # we distribute 1 more to each child in sequence.\n    # The sequence goes 1, 2, 3, ..., n for 8 children. We compute the sum of the first 7 terms.\n    min_sum_of_others = sum(range(1, 8))  # sum of 1+2+3+...+7\n    \n    # The remaining apples go to the 8th child, so:\n    most_apples_for_8th = apples_left - min_sum_of_others\n\n    return most_apples_for_8th\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    # Cost of 3 identical tapes\n    cost_of_tapes = 3 * 9\n    \n    # Total cost minus cost of tapes to find the cost of 4 identical CDs\n    cost_of_cds = 83 - cost_of_tapes\n    \n    # Cost of each CD (since they are identical, we divide by 4)\n    cost_of_each_cd = cost_of_cds / 4\n    \n    return cost_of_each_cd\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham has.\n    # Then Melissa has 2x cards.\n    # We want to find x such that 2x - x = x (they will have the same number of cards).\n    x = total_cards / 3\n    \n    # Melissa needs to give Hisham (2x - x) cards to have the same amount\n    cards_to_give = 2 * x - x\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let's calculate the total amount of grass the pasture can provide, \n    # which we can call grass_units.\n    # We know the pasture can feed 8 cows for 10 days, so:\n    grass_units_for_8_cows = 8 * 10  # This is a constant value\n\n    # Similarly, it can feed 4 cows for 15 days:\n    grass_units_for_4_cows = 4 * 15  # This should be the same constant value\n\n    # Since grass_units_for_8_cows should be equal to grass_units_for_4_cows,\n    # we can thus establish the total amount of \"grass units\" of the pasture:\n    total_grass_units = grass_units_for_8_cows  # Which is equal to grass_units_for_4_cows\n\n    # Now, we need to find out how many cows can be fed for 5 days.\n    # We divide the total grass_units by the number of days to find the daily grass unit consumption:\n    daily_grass_units = total_grass_units / 10  # Could be also 15, the result would be the same\n\n    # Finally, we calculate the number of cows that can be fed for 5 days:\n    cows_for_5_days = daily_grass_units / 5\n\n    return cows_for_5_days\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    true_result, mistaken_result = symbols('true_result mistaken_result')\n\n    # The equation based on the problem statement\n    equation = Eq(mistaken_result - true_result, 99.396)\n\n    # In the mistaken calculation, the divisor was 122 instead of 1.22\n    # Thus, the true result is 100 times smaller than the mistaken result\n    # If true_result = mistaken_result / 100, then solving the system gives us the correct true_result\n    transformed_equation = Eq(mistaken_result, true_result * 100)\n\n    # Solving the equations to find the true result\n    solutions = solve((equation, transformed_equation), (true_result, mistaken_result))\n\n    return solutions[true_result]\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    number = (35 - 8) / 3\n    return number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n    # Let the first number be a and the second number be b\n    # Then the sequence is: a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # Given that the fourth number is 6 and the sixth number is 15\n    equation1 = Eq(a + 2 * b, 6)\n    equation2 = Eq(3 * a + 5 * b, 15)\n\n    # Solve for a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Find the seventh number in the sequence: 5a + 8b\n    seventh_number = 5 * solutions[a] + 8 * solutions[b]\n\n    return seventh_number\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # There are 1000 millilitres in 1 litre\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    sum_series = sum([1 / (5 * i * (5 * i + 5)) for i in range(7)])\n    ans = 36 * sum_series\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = '47583'\n    perm = permutations(digits, 5)  # Generate all permutations of the digits\n    min_odd = float('inf')  # Set to a very high number to start with\n\n    for p in perm:\n        num = int(''.join(p))  # Convert tuple to integer\n        if num % 2 != 0 and num < min_odd and len(str(num)) == 5:  # Check for smallest odd number\n            min_odd = num\n\n    return min_odd\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # The rate at which 24 men can complete the job\n    rate_men = 1 / (24 * 16)\n    \n    # The rate at which 16 women can complete the job\n    rate_women = 1 / (16 * 24)\n    \n    # The combined rate of 10 men and 6 women\n    combined_rate = 10 * rate_men + 6 * rate_women\n    \n    # The number of days needed for 10 men and 6 women to complete the job\n    days_needed = 1 / combined_rate\n    \n    return days_needed\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(0, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # For n rectangles, the maximum number of regions (R) created can be given by:\n    # R = n^2 + n + 1\n    # Derivation involves considering new regions formed by each added rectangle.\n    n = 4\n    ans = n**2 + n + 1\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    positions_total = factorial(total_people)  # Total permutations with no constraints\n    middle_positions = factorial(total_people - 1)  # Total permutations with Eddie in the middle\n\n    return positions_total - middle_positions  # All permutations minus the unwanted ones\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let julie's earning be j\n    julie, marion, ethan = symbols('julie marion ethan')\n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    # The difference in pay between Marion and Ethan is $168\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # Calculate the sum of earnings of all three\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "def solution():\n    from itertools import permutations\n    \n    # Create all possible permutations of digits 1-9\n    perms = [''.join(p) for p in permutations('123456789')]\n    \n    # Filter the list to only include numbers divisible by 11\n    divisible_by_11 = [int(p) for p in perms if int(p) % 11 == 0]\n    \n    # Find the minimum value\n    min_value = min(divisible_by_11)\n    \n    return min_value\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Since the numbers are forming a geometric sequence,\n    # any term can be calculated by multiplying the previous term by the common ratio.\n    # To find n, we can use the formula n = a * r, where a is the previous term and r is the common ratio.\n    \n    # Determine the common ratio by dividing the subsequent term by the preceding term.\n    # In our case, we use 24 (the term after n) and 12 (the term after 24).\n    common_ratio = 12 / 24  # Which simplifies to 0.5 or 1/2\n\n    # Now we can find n by multiplying 96 (the term before n) by the common ratio.\n    n = 96 * common_ratio\n\n    return int(n)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the total sum of money Hamid had initially\n    x = symbols('x')\n    \n    # Creating equation based on the given problem\n    # Initially has x, spends 1/3 on watch and 56 on a tie, left with 3/8 of x\n    # Total spent: (1/3)*x + 56\n    # Total left: (3/8)*x\n    # Hence, total spent + total left = initial sum\n    equation = Eq((1/3)*x + 56 + (3/8)*x, x)\n    \n    # Solving the equation\n    solution = solve(equation, x)\n    \n    # Total spent will be the sum of what he spent on the watch and the tie\n    total_spent = (1/3) * solution[0] + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    # Relative speed of train with respect to Eddie\n    relative_speed = train_speed + eddie_speed\n\n    # Distance is the product of speed and time\n    length_of_train = relative_speed * time_to_pass\n\n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    from itertools import product\n\n    operations = ['+', '*']\n    max_value = 0\n\n    for op1, op2, op3 in product(operations, repeat=3):\n        expression = f\"1{op1}2{op2}3{op3}4\"\n        current_value = eval(expression)\n        max_value = max(max_value, current_value)\n\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_marks = 8\n    incorrect_deduction = -3\n    total_questions = 12\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + incorrect_answers * incorrect_deduction == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400  # in meters per minute\n    \n    total_length = train_length + bridge_length\n    time = total_length / speed  # time in minutes\n    \n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # Initialize the first two numbers in the sequence\n    a, b = 3, 10\n\n    # The desired position\n    position = 1997\n\n    # Create a loop to find the 1997th number in the sequence\n    for _ in range(position - 2):\n        # Each new number is the sum of the two previous ones\n        a, b = b, a + b\n        # The remainder when any number is divided by 3 only depends on the remainders of \n        # the two numbers that were added to get this number, therefore we can take the remainder\n        # after each addition step to ensure we don't deal with very large numbers.\n        a %= 3\n        b %= 3\n\n    # Return the remainder of the 1997th number in the sequence when divided by 3\n    return b % 3\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Let the first term be 'a' and the common difference be 'd'.\n    # The sum of the first 5 numbers is: S_5 = 5/2 * (2a + (5 - 1) * d) = 10\n    # The sum of the last 5 numbers (terms 56 to 60) is: S_last5 = 5/2 * [2 * (a + (56 - 1) * d) + (5 - 1) * d] = 120\n\n    # Sum of an arithmetic sequence is given by: S_n = n/2 * (first_term + last_term)\n    # Sum of all 60 numbers is: S_60 = 60/2 * (a + (a + (60 - 1) * d))\n    # We need to find 'a' and 'd' using the provided sums and then use it to find S_60\n\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # Define the symbols\n    # Set up the equations based on the given sums\n    equation1 = Eq(5/2 * (2*a + 4*d), 10)\n    equation2 = Eq(5/2 * (2*(a + 55*d) + 4*d), 120)\n\n    # Solve the system of equations for 'a' and 'd'\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculate S_60 using the values of 'a' and 'd' obtained\n    a_val = solutions[a]\n    d_val = solutions[d]\n    S_60 = 60/2 * (a_val + (a_val + 59*d_val))\n\n    return S_60\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    # Current ages of Peter, Pip, and Pit\n    peter_age_now = 45\n    pip_age_now = 7\n    pit_age_now = 14\n    \n    # Years passed\n    years_passed = 0\n    # Loop to find when Peter's age is the sum of his sons' ages\n    while True:\n        # Increment years_passed for each iteration\n        years_passed += 1\n        # Calculate future ages\n        peter_age_future = peter_age_now + years_passed\n        pip_age_future = pip_age_now + years_passed\n        pit_age_future = pit_age_now + years_passed\n        # Check if Peter's future age is the sum of his sons' future ages\n        if peter_age_future == pip_age_future + pit_age_future:\n            break\n    return peter_age_future\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of stickers Peter and Sam have initially\n    peter_initial, sam_initial = symbols('peter_initial sam_initial')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(sam_initial, peter_initial + 40)\n    equation2 = Eq(peter_initial + sam_initial * 0.20, peter_initial * 1.25)\n    equation3 = Eq(sam_initial * 0.80 + peter_initial * 0.25, sam_initial - 96)\n\n    # Use sympy's solve function to solve the equations\n    solutions = solve((equation1, equation2, equation3), (peter_initial, sam_initial))\n\n    return solutions[peter_initial]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n\n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(hazel_current * 3, hazel_current + 12)\n\n    # On Hazel's 18th birthday, her mom will be three times her age then.\n    # hazel_current + (18 - current_age) = 18 => current_age = 18 - hazel_current\n    equation2 = Eq(mom_current + (18 - hazel_current), 3 * 18)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n\n    return solutions[mom_current]\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = (n*(n + 1)//2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible consecutive card numbers\n    # Due to the pigeonhole principle, to ensure that we get 2 consecutive numbers,\n    # we need to draw one card from each of the 13 non-consecutive numbers plus one.\n    # So we should draw 14 cards to ensure we have at least 2 with consecutive numbers.\n    \n    ans = 13 + 1  # Plus one to ensure at least 2 consecutive numbers.\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    sheet_number = 5\n    total_sheets = 36 // 2\n    front_page_number = (sheet_number - 1) * 2 + 1\n    back_page_number = (total_sheets - sheet_number + 1) * 2\n    \n    sum_of_pages = front_page_number + (front_page_number + 1) + back_page_number + (back_page_number + 1)\n    return sum_of_pages\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    num_rows = ((last_term - first_term) // difference) + 1\n    total_seats = (num_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    count = 0\n    for i in range(1, 130):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    found = False\n    M = 1\n    while not found:\n        for a in range(1, 28):\n            remainders = [M % 7, M % 9, M % a, M % 28]\n            if sorted(remainders) == remainders and len(set(remainders)) == 4:\n                diff = remainders[1] - remainders[0]\n                if all(remainders[i] - remainders[i - 1] == diff for i in range(1, 4)):\n                    found = True\n                    break\n        M += 1\n    return M - 1  # Since the loop adds 1 before the break, we subtract 1 to get the correct M\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let x be the number of laptops and c be the cost of each laptop\n    # Initial profit: 2000x - cx = 60000\n    # Decrease in cost by 1/5: c - c/5 = 4c/5\n    # New cost per laptop: 4c/5\n    # New selling price remains $2000\n    # New profit: 2000x - (4c/5)x\n    # New profit is 30% more than the original profit: (2000x - (4c/5)x) = 1.3 * 60000\n    # Now we'll substitute the second equation in the first to solve for x\n\n    # Rearrange the first equation to express c in terms of x: c = (2000x - 60000) / x\n    # Plug the expression of c into the new profit equation and solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Original cost per laptop c in terms of x\n    c = (2000 * x - 60000) / x\n    # New cost per laptop\n    new_c = 4 * c / 5\n\n    # New profit equation\n    equation = Eq(2000 * x - new_c * x, 1.3 * 60000)\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boy_diff = 36\n    for i in range(1, 1000, 2): # The number of students on one side of the square must be odd\n        girls = i ** 2\n        boys = (i + 2) ** 2 - girls\n        if boys - girls == boy_diff:\n            total_students = boys + girls\n            return total_students\n    return None\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    # Calculate how many people Ellie can interview in 4 weeks\n    ellie_work = ellie_rate * combined_time\n\n    # Remaining work to be done by Gloria\n    gloria_work = total_people - ellie_work\n\n    # Gloria's rate per week\n    gloria_rate = gloria_work / combined_time\n\n    # Time taken by Gloria to finish interviewing everyone by herself\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 // 5\n    return numerator\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of men and days for the first scenario\n    men1 = 3\n    days1 = 2\n    length1 = 120\n\n    # Number of men for the second scenario\n    men2 = 4\n    length2 = 880\n\n    # Calculate work done by one man in one day for the first scenario\n    work_per_man_per_day1 = length1 / (men1 * days1)\n\n    # Calculate total number of man-days required for the second scenario\n    total_man_days2 = length2 / work_per_man_per_day1\n\n    # Calculate number of days required for the second scenario with four men\n    days2 = total_man_days2 / men2\n\n    return days2\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let x be the number of books moved from the first shelf to the second shelf\n    # After moving, the first shelf will have (18 - x) books\n    # After moving, the second shelf will have (24 + x) books\n    # According to the condition, the second shelf will have twice as many books as the first shelf\n    # So the equation is: 24 + x = 2 * (18 - x)\n    # Solving for x gives us:\n    x = (24 - 2 * 18) / (1 - 2)\n    return int(x)\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = 285 + 6/7 + 181 + 10/11 + 153 + 12/13\n    denominator = 1/7 + 1/11 + 1/13\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let x be the total number of pupils\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # 5 pupils are in the band\n    # 3/4 of the remaining (x - 5) pupils are in the choir\n    # 2/9 of the class are neither in the band nor the choir\n\n    # Pupils in the choir = 3/4 * (x - 5)\n    # Pupils neither in band nor choir = 2/9 * x\n\n    # We find the total number of pupils (x) by solving the equation:\n    #  5 + 3/4 * (x - 5) + 2/9 * x = x\n\n    equation = Eq(5 + 3/4 * (x - 5) + 2/9 * x, x)\n\n    total_pupils = solve(equation, x)[0]  # Solve for x\n    return total_pupils\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_seconds = 20  # time taken to cross the bridge in seconds\n    distance_meters = 300  # length of the bridge in meters\n\n    speed_m_per_s = distance_meters / time_seconds  # speed in meters per second\n\n    speed_km_per_h = speed_m_per_s * 3.6  # converting m/s to km/h\n\n    return speed_km_per_h\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # The number of long tubes is represented by 'x' and short tubes by 'y'.\n    # The total number of balls is equal to 8x + 5y.\n    # We use a loop to find the combination of x and y that satisfies the equation.\n    for x in range(total_balls // long_tube_capacity + 1):\n        for y in range(total_balls // short_tube_capacity + 1):\n            if long_tube_capacity * x + short_tube_capacity * y == total_balls:\n                return x\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    term_position_difference = 9 - 3\n    difference_per_term = (ninth_term - third_term) / term_position_difference\n    eleventh_term = ninth_term + difference_per_term * (11 - 9)\n    return eleventh_term\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Let's denote the number of lollipops as L and number of boxes as B.\n    # When we put 4 lollipops into each box, we have 32 lollipops left over.\n    # So L = 4B + 32\n    # When we put 7 lollipops into each box, the last box has only 3 lollipops.\n    # Meaning that L can also be represented as 7(K-1) + 3, where K is number of boxes when 7 lollipops per box are put.\n    # Our task now is to sync these two equations:\n    # 4B + 32 = 7(K-1) + 3\n\n    # To solve this, we look for a number that when divided by 4, leaves a remainder of 32, \n    # and when divided by 7 leaves a remainder of 3.\n    # We start from 32, because it's the first number that has a remainder of 32 when divided by 4.\n    lollipops = 32\n    while True:\n        if (lollipops - 3) % 7 == 0: # If this condition is true, it means we found our number of lollipops.\n            break\n        lollipops += 4  # Increment by 4 because we know when we add 4 more lollipops to the boxes, we again end up with 32 lollipops left over.\n    \n    return lollipops\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    cubes_sum = sum([i**3 for i in range(1, 15) if i % 3 != 0])\n    return cubes_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_rate = 0.15\n    discounted_amount = original_price * discount_rate\n    discounted_price = original_price - discounted_amount\n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    missed_decimal = 4.32\n\n    true_result = incorrect_result / (missed_decimal * 10 - 1)\n\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The remainders being the same can be expressed as:\n    # (2017 - 2758) % A == 0, (2017 - 3670) % A == 0, and (2758 - 3670) % A == 0\n    # Therefore, A divides the difference of these numbers.\n    \n    diff1 = abs(2017 - 2758)\n    diff2 = abs(2017 - 3670)\n    diff3 = abs(2758 - 3670)\n\n    # Find the greatest common divisor of the differences\n    from math import gcd\n    A_gcd = gcd(gcd(diff1, diff2), diff3)\n\n    # Find the divisors of the gcd which are the possible values of A\n    possible_values_A = [i for i in range(1, A_gcd + 1) if A_gcd % i == 0]\n\n    # Return the sum of the possible values of A\n    return sum(possible_values_A)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be the original number of Felicia's bracelets\n    # Felicia sold 3/5 of her bracelets, so she had 2/5F left\n    # Janice originally had 96 and bought 3/5 * 2/5 * F from Felicia\n    # Then Felicia had (2/5F - 3/5 * 2/5 * F) left, and Janice had (96 + 3/5 * 2/5 * F)\n    # The ratio (5/5F - 3/5 * 2/5 * F) to (96 + 3/5 * 2/5 * F) was 5:7\n    # So, 5 * (96 + 3/5 * 2/5 * F) = 7 * (5/5F - 3/5 * 2/5 * F)\n    # Simplifying, we get 5 * 96 + 5 * 3/5 * 2/5 * F = 7 * F - 7 * 3/5 * 2/5 * F\n    # 480 + 6/5 * 2/5 * F = 7 * F - 42/25 * F\n    # From here, we can solve for F and determine how many bracelets Janice bought from Felicia\n    \n    from sympy import symbols, Eq, solve\n\n    F = symbols('F')\n\n    # Create equations based on the problem statement\n    eq = Eq(480 + (6/25) * F, 7 * F - (42/25) * F)\n\n    # Solve for F\n    solution_F = solve(eq, F)\n\n    # Calculate how many bracelets Janice bought, which is 3/5 * 2/5 * F\n    bracelets_bought = (3/5) * (2/5) * solution_F[0]\n\n    return bracelets_bought\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy was given 5 candies\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    # There were 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total number of children (boys + girls)\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    milk_before = 7\n    fruit_before = 9\n    milk_after = 2\n    fruit_after = 3\n    \n    while True:\n        if (milk_before * milk_after + 8 * milk_after) == (fruit_before * milk_after):\n            return milk_before\n        milk_before += 7\n        fruit_before += 9\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    return 15 - 8.36\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            break\n        B += 1\n    return B\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            return count\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initially = 60\n    apples_per_friend_initial = 4\n\n    # Calculate number of friends\n    number_of_friends = apples_initially // apples_per_friend_initial\n\n    # If each friend asks for one more apple\n    apples_per_friend_new = apples_per_friend_initial + 1\n\n    # Calculate new total number of apples needed\n    total_apples_needed = number_of_friends * apples_per_friend_new\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # grandmother's age on 1st December 2008\n    granny_age_2008 = 80\n\n    # mum's age on 1st December 1996\n    mum_age_1996 = 40\n\n    # difference in years between 2008 and 1996\n    year_difference = 2008 - 1996\n\n    # mum's birth year\n    mum_birth_year = 1996 - mum_age_1996\n\n    # grandmother's age when mum was born\n    granny_age_when_mum_born = granny_age_2008 - (2008 - mum_birth_year)\n\n    return granny_age_when_mum_born\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_income = 2012\n    lemonade_price = 4\n    plus_price = 7\n    total_bottles = 350\n    \n    # To minimize the number of bottles of \"1000 Plus\" sold, we should maximize the number of bottles of lemonade sold.\n    # Start by selling all bottles as lemonade and then exchange lemonade bottles with \"1000 Plus\" bottles one by one until we reach the total income.\n    max_lemonade_income = total_bottles * lemonade_price\n    remaining_income = total_income - max_lemonade_income\n    \n    # Calculate how many \"1000 Plus\" bottles we need to sell to make up the difference\n    # Since exchanging a bottle of lemonade with a \"1000 Plus\" increases the income by the difference in prices,\n    # we can divide the remaining income by that difference to find the required number of \"1000 Plus\" bottles.\n    plus_bottles_needed = (remaining_income + (plus_price - lemonade_price) - 1) // (plus_price - lemonade_price)\n    \n    return plus_bottles_needed\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Worst case scenario:\n    # Yohan takes all the red socks and then all the black socks.\n    # So he has taken 10 red socks and 10 black socks.\n    # The next sock, no matter the color, will form a pair of that color.\n    # Therefore, he must take at least 1 white sock to guarantee a white pair.\n    red_socks = 10\n    black_socks = 10\n    white_socks_needed = 2\n\n    # Number of socks Yohan must take to guarantee a white pair\n    max_socks = red_socks + black_socks + white_socks_needed\n    return max_socks\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n\n    for groups_of_6 in range(total_groups + 1):\n        groups_of_4 = total_groups - groups_of_6\n        if (groups_of_4 * 4 + groups_of_6 * 6) == total_students:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers is 60, so their sum is 3 times 60\n    sum_of_three = 3 * 60\n    \n    # When the fourth number is added, the average becomes 90\n    # Therefore, the sum of four numbers is 4 times 90\n    sum_of_four = 4 * 90\n    \n    # The fourth number is the difference between the sum of four numbers and sum of three numbers\n    fourth_number = sum_of_four - sum_of_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    cm_per_meter = 100\n    ans = meters * cm_per_meter\n    return ans\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:  # A cannot be 0 otherwise it wouldn't be a 3-digit number\n            return A*100 + B*10 + C\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = 3 * 1.60 + 2 * 0.62 + 4.50\n    change = 20 - total_spent\n    return round(change, 2)\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # 3 fish for 2 rabbits -> 1 rabbit for 1.5 fish\n    # 3 rabbits for 4 packs of wheat -> 1 pack of wheat for 0.75 rabbits\n    # 1 pack of wheat for 1.5 * 0.75 fish = 1.125 fish\n    # For 8 packs of wheat, Owen should give Dennis 1.125 * 8 fish\n    fish_per_pack_of_wheat = 1.5 * 0.75\n    fish_for_8_packs_of_wheat = fish_per_pack_of_wheat * 8\n    return fish_for_8_packs_of_wheat\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    factorial = 1\n    for i in range(1, 26):\n        factorial *= i\n\n    count_zeros = 0\n    while factorial % 10 == 0:\n        count_zeros += 1\n        factorial //= 10\n\n    return count_zeros\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    # original price of the handbag before the discount\n    handbag_original_price = 428 / (1 - 0.20)\n    \n    # calculate the discount amount for the handbag\n    handbag_discount = handbag_original_price * 0.20\n\n    # total discount given\n    total_discount = 121\n    \n    # discount amount for the purse\n    purse_discount = total_discount - handbag_discount\n    \n    # original price of the purse before the discount\n    purse_original_price = purse_discount / 0.28\n    \n    return purse_original_price\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # Each complete repeat of the recurring decimal sequence A2 add up to A+2\n    # In every 10 digits after the decimal point, the recurring sequence A2 will repeat 5 times\n    # Since we're given the sum of the first 20 digits is 80, A2 will repeat 10 times\n    \n    sum_repeat = 80 // 10 # Sum of each complete repeat\n    A = sum_repeat - 2 # Subtract 2 from the sum to find the value of A\n    \n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    climb_distance = 4\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    well_height = 25\n    current_height = 0\n    day = 0\n    \n    while True:\n        day += 1\n        current_height += climb_distance\n        if current_height >= well_height:\n            break\n        current_height -= slide_distance\n\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dance_per_week = 2\n    weeks = 2\n    total_dances = dance_per_week * weeks\n    return total_dances\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate the time for jogging and walking\n    jogging_time = 0.5  # From 6:30 AM to 7:00 AM\n    walking_time = 1    # From 7:00 AM to 8:00 AM\n\n    # Calculate the distance for each part\n    jogging_speed = 6   # miles per hour\n    walking_speed = 5   # miles per hour\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n    count = 0\n    for num in range(1, 2012):\n        if gcd(num, num+5) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    num1 = 6\n    num2 = 10\n    lcm = (num1 * num2) // gcd(num1, num2)\n    return lcm\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_amount = symbols('original_amount')\n    chair_cost = 120\n    jacket_factor = 0.40\n    remaining_percent = 0.30\n    \n    # Equation: original_amount - chair_cost - jacket_factor * (original_amount - chair_cost) = remaining_percent * original_amount\n    equation = Eq(original_amount - chair_cost - jacket_factor * (original_amount - chair_cost), remaining_percent * original_amount)\n    \n    original_money = solve(equation, original_amount)\n\n    return original_money[0]\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Using the Pigeonhole principle: \n    # To find the minimum number of books in the layer with the most books, \n    # we divide the total number of books by the number of layers and round up.\n    \n    from math import ceil\n    min_books_most_layer = ceil(total_books / layers)\n\n    return min_books_most_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if i != j and i != k and j != k and i != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4  # Negative because the sequence is decreasing\n    \n    # Find when the sequence becomes negative\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    # Let x be the number of books bought initially\n    # Total cost of the initial books is 3.50 * x\n    # Total cost of the 2 additional books is 6 * 2\n    \n    # After buying 2 more books at 6 each, the new average is 4\n    # Total books now are x + 2 and total average cost is 4 * (x + 2)\n    \n    # We set up the equation:\n    # 3.50 * x + 6 * 2 = 4 * (x + 2)\n    \n    # Solve for x:\n    x = ((4 * 2) - (6 * 2)) / (3.50 - 4)\n    \n    # Remember to add the 2 books bought later\n    total_books = x + 2\n    \n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    piece_weight_g = 30\n    total_weight_g = total_weight_kg * 1000 # convert kg to g\n\n    num_pieces = total_weight_g / piece_weight_g\n\n    return int(num_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # convert 2.5 liters to quarts\n    cups_per_quart = 2  # 1 quart is equal to 2 cups of 0.5 quart each\n    total_cups = liters_to_quarts * cups_per_quart\n    return round(total_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    B = 2\n    D = 0\n\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len({A, B, C, D, E, F}) == 6:\n                        num1 = int(\"5{}2{}0{}\".format(A, C, E))\n                        num2 = int(\"{}{}2{}0\".format(E, F, A))\n                        if num1 == 6 * num2:\n                            return int(\"{}{}{}{}\".format(F, A, C, E))\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:30 AM\n    jogging_time = 1  # in hours\n\n    # Walking time from 7:30 AM to 9:30 AM\n    walking_time = 2  # in hours\n\n    # Speed of jogging in miles per hour\n    jogging_speed = 6  # in mph\n\n    # Speed of walking in miles per hour\n    walking_speed = 5  # in mph\n\n    # Total distance traveled during jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Total distance traveled during walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance traveled during the morning exercise\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dad, son = symbols('dad son')\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n\n    return solutions[dad]\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of wrappers Angel initially had be A, and Belle be B\n    angel, belle = symbols('angel belle')\n    \n    # Angel had 5/6 as many sweet wrappers as Belle\n    equation1 = Eq(angel, 5/6 * belle)\n    \n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle\n    equation2 = Eq(angel - 58, 75/100 * belle)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (angel, belle))\n    \n    # We need the number of sweet wrappers that Belle had\n    return solutions[belle]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4 / 9) * 36\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    percent_remit = 0.20\n    bank_charge_percent = 0.005\n\n    remit_amount = salary * percent_remit\n    bank_charge = remit_amount * bank_charge_percent\n    \n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for v1 in range(1, 10):\n        for v2 in range(1, 10):\n            for v3 in range(1, 10):\n                if v1 + v2 + v3 == 10 and len(set([v1, v2, v3])) == 3:\n                    count += 1\n    return count // 6  # Dividing by the number of permutations for each combination\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n    final_balance = account_balance + payment\n    return final_balance\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of children (n) and the total amount of money (m)\n    n, m = symbols('n m')\n    \n    # Equation 1: if there are n children, and if we add 20p to the total money, then each child gets 70p\n    equation1 = Eq(m + 20, 70 * n)\n    \n    # Equation 2: if each child gets 60p then £2.10 is left over\n    equation2 = Eq(m - (60 * n), 210)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, m))\n    \n    # We need the number of children, which is n\n    return solutions[n]\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime(\"2 Mar 2023\", \"%d %b %Y\")\n    end_date = datetime.strptime(\"15 Apr 2023\", \"%d %b %Y\")\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Assign the quantity of each glove type to variables for clarity\n    left_blue = 1\n    left_green = 2\n    right_blue = 3\n    right_green = 4\n\n    # Determine the number of gloves Dilly should take to ensure a matching pair\n    # Using the Pigeonhole Principle\n\n    # Taking one of each type does not guarantee a matching pair (1 blue left, 1 green left, 1 blue right, 1 green right)\n    # So we take one more than the total types (4 types) to ensure at least one matching pair\n    gloves_to_take = left_blue + left_green + right_blue + right_green + 1\n\n    return gloves_to_take\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45\n    increase_amount = original_price * (increase_percentage / 100)\n    new_price = original_price + increase_amount\n    return new_price\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # Iterate over the possible numbers with 9 in the units column\n    for i in range(10, 10000):\n        if str(i)[-1] == '9': # Check if 9 is in the units column\n            new_number = int(str(i)[-1] + str(i)[:-1]) # Move the 9 to the start of the new number\n            if new_number == 4 * i: # Check if the new number is four times the original number\n                return i # Return the original number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is on the left end, so there are no choices for Eddie's position (1 way).\n    # Avril stands next to Eddie, so there are 2 possible positions for Avril (left or right of Eddie).\n    ways_for_Avril = 2\n    \n    # Now 5 students remain (other than Eddie and Avril) to line up in any order.\n    # 5 students can be arranged in 5! ways.\n    ways_for_remaining_students = factorial(5)\n    \n    # By the principle of multiplication, we multiply the number of ways to arrange each part.\n    total_ways = ways_for_Avril * ways_for_remaining_students\n\n    return total_ways\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice sweets\n    rachel, alice = symbols('rachel alice')\n\n    # Equation when Rachel gives Alice 10 sweets: they have same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation when they both eat 8 sweets: Rachel has 3 times of Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Compute the total number of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n    combinations = pasta_choices * sauce_choices * topping_choices\n    return combinations\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Given circumference of the garden\n    circumference = 300\n    # The first interval of digging holes\n    initial_interval = 3\n    # The second interval of digging holes\n    new_interval = 5\n\n    # Find how many holes have already been dug\n    holes_dug = 30\n\n    # Remaining circumference after 30 holes have been dug\n    remaining_circumference = circumference - holes_dug * initial_interval\n\n    # Calculate the number of additional holes needed with the new interval\n    # Since the holes need to be at every 5m, we divide the remaining circumference by 5\n    additional_holes_needed = remaining_circumference // new_interval\n    \n    # If there is a remainder, an additional hole will be needed\n    if remaining_circumference % new_interval != 0:\n        additional_holes_needed += 1\n\n    return additional_holes_needed\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # calculate ways to step 5 from 0\n    def ways_to_step(n):\n        if n == 1: return 1\n        if n == 2: return 2\n        return ways_to_step(n-1) + ways_to_step(n-2)\n    \n    # calculate ways from step 5 to 10\n    ways_to_top = ways_to_step(10 - 5 + 1)\n    # calculate ways from start to step 5\n    ways_to_step_5 = ways_to_step(5)\n    \n    # total ways is the product of ways to step 5 and ways from 5 to top\n    ans = ways_to_step_5 * ways_to_top\n    return ans\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum((i * (16 - i) for i in range(1, 16)))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookie = 0\n    while True:\n        cookie += 1\n        if cookie % 3 == 1 and cookie % 4 == 3 and cookie % 5 == 4:\n            return cookie\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + 56 / 7 * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = sum(i for i in range(1, 51) if '3' in str(i))\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits = 0\n    page = 0\n    while digits < 792:\n        page += 1\n        digits += len(str(page))\n    return page\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length // pipe_length\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n    return num_pipes\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Maximizing by prioritizing multiplication over addition and subtraction\n    # Method: find the combination of brackets which yields the largest result\n    # Possible positions of brackets: \n    # (15+5)×(5+15)-(6+7), (15+5×5)+(15-6+7), (15+5)×5+(15-6+7)\n    \n    # Let's calculate each one by one and find the max\n    result1 = (15+5) * (5+15) - (6+7)\n    result2 = (15+5*5) + (15-6+7)\n    result3 = (15+5) * 5 + (15-6+7)\n    \n    # Find and return the maximum result\n    ans = max(result1, result2, result3)\n    return ans\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    # Given averages\n    ivan_avg = 80\n    billy_avg = 89\n\n    # Number of assignments for both Ivan and Billy\n    ivan_assignments = 5\n    billy_assignments = 4\n\n    # Calculate total points based on the average scores\n    ivan_total = ivan_avg * ivan_assignments\n    billy_total = billy_avg * billy_assignments\n\n    # Billy wants to score 10 more marks than Ivan on average\n    billy_goal_avg = ivan_avg + 10\n\n    # Calculate the total points Billy needs across all 5 assignments to achieve his goal\n    billy_goal_total = billy_goal_avg * ivan_assignments\n\n    # Find out how much Billy needs to score on the fifth assignment\n    score_fifth_assignment = billy_goal_total - billy_total\n\n    return score_fifth_assignment\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import divisors, isprime\n\n    # Find divisors of 1260\n    divs = divisors(1260)\n    \n    # Iterate over divisors to find a divisor that is not prime\n    # and when multiplied by 1260 results in a perfect square\n    for d in divs:\n        if not isprime(d):\n            m = d\n            if (1260 // m)**0.5 == int((1260 // m)**0.5):\n                return m\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # The number of ways to add two whole numbers x, y (x <= y) to sum up to 1000 is\n    # the number of pairs (x, y) such that x + y = 1000 and 0 <= x <= y <= 1000\n    # It is equivalent to counting the number of whole numbers from 0 to 1000/2,\n    # since for any whole number x, there is a unique y = 1000 - x.\n\n    num_ways = (1000 // 2) + 1\n    return num_ways\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + (2 * peaches)\n    return apples\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given that the sequence has a constant difference (arithmetic sequence)\n    # and that the 7th, 8th, and 9th terms are 39, 44, and 49 respectively,\n    # we can find the common difference of the sequence and the first term.\n    \n    term7 = 39\n    term8 = 44\n    term9 = 49\n    \n    # The common difference is the difference between subsequent terms\n    common_difference = term8 - term7  # or term9 - term8\n    \n    # To find the first term, we will subtract the common difference 6 times (since we have 7th term)\n    first_term = term7 - (common_difference * (7 - 1))\n    \n    # Now we can find the 100th term by adding the common difference 99 times to the first term\n    term100 = first_term + common_difference * (100 - 1)\n    \n    return term100\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    # Since the number of cards left is the same when divided by 4 or 7, \n    # we're looking for a number that, when 3 is added, is a multiple of both 4 and 7.\n    # The least common multiple of 4 and 7 is 28.\n    # Since when divided by 28 Ryan arranges them, the remainder will be the same as when divided by 4 or 7.\n    remainder_when_divided_by_28 = 3\n    \n    return remainder_when_divided_by_28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    for number in range(10, 100):\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    capacity = 7\n    boats_needed = (students + capacity - 1) // capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_cost = 151.25\n    chair_cost = 24.15\n    total_cost = table_cost + chair_cost\n    return total_cost\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The ones digit of 9^1 is 9\n    # The ones digit of 9^2 is 1 (9*9=81; ones digit is 1)\n    # The ones digit of 9^3 is 9 (9*1=9; ones digit is 9)\n    # The ones digit of 9^4 is 1 (9*9=81; ones digit is 1)\n    \n    # Pattern repeats every 2 powers for the ones digit: 9, 1, 9, 1, ...\n\n    # We are looking for the ones digit of 9^(99)\n    # Since the pattern repeats every 2, we can find the ones digit by\n    # taking 99 mod 2 to find its position in the repeating pattern\n    ones_digit_position = 99 % 2\n\n    # If ones_digit_position is 1, ones digit is 9\n    # If ones_digit_position is 0, ones digit is 1\n    if ones_digit_position == 1:\n        return 9\n    else:\n        return 1\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    stickers_left = total_stickers - 9\n\n    return stickers_left\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total value of the five ponies excluding Rein Beau\n    x = symbols('x')\n    \n    # Original average value of ponies in the small stable (3 ponies + Rein Beau)\n    original_small_avg = (x + 250000)/3\n    \n    # Original average value of ponies in the large stable (3 ponies)\n    original_large_avg = x/3\n    \n    # Average value of ponies in both stables increased by £10 000 after Rein Beau moved\n    # Now the small stable has 2 ponies and large stable has 4 ponies including Rein Beau\n    new_small_avg = x/2\n    new_large_avg = (x + 250000)/4\n    \n    # Set up the equations based on the average value information\n    equation1 = Eq(new_small_avg, original_small_avg + 10000)\n    equation2 = Eq(new_large_avg, original_large_avg + 10000)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), x)\n    \n    # The total value of all six ponies is x plus the value of Rein Beau\n    total_value = solutions[x] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    # Given the final result\n    result = 1234\n    \n    # Perform the reverse of the steps mentioned in the question\n    # Step 5: Add 50 to the result\n    result += 50\n    \n    # Steps 4 and 2: Since adding the day of his birthday twice and adding 1 are done after the final multiplication, we can combine them.\n    remaining = (result // 50) - 1  # Integer division is used to handle fractional days\n\n    # Step 3: Reverse of multiplication by 50 is division by 50, which we have already done above.\n    # Now 'remaining' = month * 4 + day\n    \n    # Step 1: Since the month was multiplied by 4, we perform integer division by 4 to retrieve the day and month\n    month = remaining // 4\n    day = remaining % 4  # The remainder will give the day\n    \n    # The original operations did not depend on the year, so the year cannot be deduced.\n\n    # There seems to be an inconsistency in the arithmetic or possible misunderstanding of the problem as given.\n    # If the result is 1234, then according to the reverse operation, the day cannot be derived accurately.\n    # The correct steps seem to imply extracting the month and day, where the day is added only once before subtracting 50 to get the resulting number.\n\n    return f\"Month: {month}, Day: {day + 1}\"  # Adjusting the day as per typical magician's trick\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Calculate arrangement of 5 groups (4 pupils as a single group + 4 individual pupils)\n    group_arrangement = factorial(5)\n    \n    # Calculate arrangements within the group of 4 pupils\n    internal_arrangement = factorial(4)\n    \n    # Multiply the arrangements of groups with internal arrangements\n    total_arrangements = group_arrangement * internal_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n\n    concentration = (sugar / total_mixture) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # The three consecutive numbers can be represented as\n    # n, n+1, n+2. Their sum is 3n + 3, which equals 60.\n    # 3n + 3 = 60\n    # 3n = 57\n    # n = 19\n    # Therefore, the largest number is n + 2.\n\n    n = (60 - 3) // 3\n    largest_number = n + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    for gold_medals in range(81):\n        silver_medals = 80 - gold_medals\n        total_points = 5 * gold_medals + 4 * silver_medals\n        if total_points == 331:\n            return gold_medals\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb_per_kg = 8.70\n    cost_beef_per_kg = 9.40\n    kg_lamb = 7\n    kg_beef = 30\n\n    total_cost = (cost_lamb_per_kg * kg_lamb) + (cost_beef_per_kg * kg_beef)\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the rates of work for the master and the apprentice\n    master_rate, apprentice_rate = symbols('master_rate apprentice_rate')\n\n    # Using the given information to set up the equations\n    # 1 master and 3 apprentices complete the work in 4 days\n    eq1 = Eq(1 * master_rate + 3 * apprentice_rate, 1 / 4)\n    # 2 masters and 1 apprentice complete the work in 3 days\n    eq2 = Eq(2 * master_rate + 1 * apprentice_rate, 1 / 3)\n\n    # Solve the system of equations for the rates\n    rates_solution = solve((eq1, eq2), (master_rate, apprentice_rate))\n\n    # Calculate how long it would take 1 apprentice to finish the task alone\n    time_for_apprentice = 1 / rates_solution[apprentice_rate]\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # The elephant doll is at the 10th position from the left\n    elephant_pos_from_left = 10\n    \n    # The rabbit doll is at the 9th position from the right\n    rabbit_pos_from_right = 9\n    \n    # There are 5 dolls between the elephant and the rabbit dolls\n    dolls_between = 5\n    \n    # Calculating the total number of dolls\n    # Total dolls = position of elephant from the left + dolls between + position of rabbit from right\n    total_dolls = elephant_pos_from_left + dolls_between + rabbit_pos_from_right\n\n    return total_dolls\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # Let the total number of spectators be x\n    # The number of men is 5/8 of the remainder after children are removed\n    # Hence, the number of spectators that are not children is (1 - 1/3)x = 2/3x\n    # The number of men then is 5/8 * 2/3x = 5/12x\n    # We know that the remaining spectators are women, which is 80\n    # Therefore, 1/3x + 5/12x + 80 = x\n    # Solving for x gives us the total number of spectators\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/3*x + 5/12*x + women, x)\n    total_spectators = solve(equation, x)[0]\n\n    return total_spectators\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11 / 52 / (2 + 3 / 4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Given the operation ★ pattern, analyze the example inputs and outputs.\n    # Analyze the given examples:\n    # 5★2 = 8 -> (5+2+1)\n    # 2★5 = 5 -> (2)\n    # 6★3 = 15 -> (6+3+6)\n    # 8★2 =14 -> (8+2+4)\n    # It seems like if a★b, then if a <= b, the result is a, else if a > b, the result is a+b+a//b\n\n    # Define the new operation\n    def new_operation(a, b):\n        if a <= b:\n            return a\n        else:\n            return a + b + a // b\n\n    # Calculate 11★10 using the new operation\n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    # Let's denote the total number of layers for boys as \"b\" and for girls as \"g\".\n    # Since the outer layer and every alternating layer is boys, we have b = g + 1.\n    # The total number of students will be:\n    # boys = b^2 and girls = g^2 as they are arranged in a square array.\n    # So the condition is that boys - girls = 32, which translates to:\n    # b^2 - g^2 = 32\n    # We know (b + g)(b - g) = 32, since b = g + 1, (g + 1 + g)(1) = 32\n    # Simplifying we get 2g + 1 = 32 => 2g = 31 => g = 15.5 but g must be an integer, so this needs to be thought out properly\n    # Trying new approach: \n    # Since the square of an odd minus the square of the next even gives the difference between 2 consecutive squares which is an odd number,\n    # we will increment b by 2 (starting from 1) and g by 2 (starting from 0) until b^2 - g^2 = 32 is satisfied.\n    \n    b = 1\n    g = 0\n    while True:\n        if (b**2 - g**2) == 32:\n            break\n        b += 2\n        g += 2\n    \n    # Once we find the correct b and g, we calculate total number of students\n    total_students = b**2 + g**2\n    return total_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of roses originally and planted each month\n    roses_original, roses_planted, daisies_original, daisies_planted = symbols('roses_original roses_planted daisies_original daisies_planted')\n    \n    # Total flowers in the park originally\n    total_original = Eq(roses_original + daisies_original, 300)\n    # Total flowers in the park after a few months\n    total_after = Eq(roses_original + roses_planted + daisies_original + daisies_planted, 460)  # 280 roses and 180 daisies\n    \n    # Number of roses and daisies after a few months\n    roses_after = Eq(roses_original + roses_planted, 280)\n    daisies_after = Eq(daisies_original + daisies_planted, 180)\n    \n    # Since the same number of roses and daisies are planted each month, these numbers are equal\n    equal_planting = Eq(roses_planted, daisies_planted)\n    \n    # Solve the system of equations\n    solutions = solve((total_original, total_after, roses_after, daisies_after, equal_planting),\n                      (roses_original, roses_planted, daisies_original, daisies_planted))\n    \n    return solutions[roses_original]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 61))\n    ans = sum(primes)\n\n    return ans\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given values from the question\n    nth_term_10 = 23\n    nth_term_15 = 38\n    nth_term_wanted = 102\n\n    # Calculate the common difference using the 10th and 15th terms\n    common_difference = (nth_term_15 - nth_term_10) / (15 - 10)\n\n    # Calculate the first term of the arithmetic sequence\n    first_term = nth_term_10 - (10 - 1) * common_difference\n\n    # Calculate the 102nd term\n    nth_term_102 = first_term + (nth_term_wanted - 1) * common_difference\n\n    return nth_term_102\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books\n    \n    comics = non_english_books / 3\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    misses = 4\n    score_per_accurate_shot = 5\n\n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + misses\n    average_score = total_accurate_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculate the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = 2/25\n\n    # Calculate the first complex fraction\n    fraction1 = numerator1 / denominator1\n\n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = 8/3\n\n    # Calculate the second complex fraction\n    fraction2 = numerator2 / denominator2\n\n    # Add both complex fractions to get the final answer\n    ans = fraction1 + fraction2\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # The least possible number of apples the kid with the most gets, means\n    # the other children get the least possible number of total apples.\n    # Start by giving each of the 8 children 1 apple to meet the minimum requirement.\n    # This accounts for 8 apples. The remaining 42 must be distributed such that\n    # each child gets a different amount and as low as possible for the one who gets the most.\n    \n    # To minimize the most number of apples one child gets, we give the next child 2 apples,\n    # the next 3, and so on, creating an increasing sequence:\n    # 1 apple to the 1st child, 2 apples to the 2nd child, ..., 7 apples to the 7th child.\n    \n    # The sum of the first n natural numbers is given by n*(n+1)/2.\n    # Calculate the sum for first 7 children.\n    total_for_seven = sum(range(1, 8))\n    \n    # Subtract this from the remaining apples to find how many the 8th child would get.\n    apples_for_eighth = 50 - total_for_seven\n    \n    return apples_for_eighth\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n    \n    num_boxes = (total_eggs + eggs_per_box - 1) // eggs_per_box\n    \n    return num_boxes\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n    \n    total_distance = train_length + tunnel_length\n    time_to_pass = total_distance / speed\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for n in range(2, 9):  # Choose number of piles, n, from 2 to 8\n        for x1 in range(1, 9):  # Choose first number to be at least 1\n            for x2 in range(1, 9):  # Choose second number to be at least 1\n                # If n is greater than 2, we need to continue choosing numbers\n                # If n is exactly 2, and x1 + x2 equals 8, we have a valid combination\n                if n == 2 and x1 + x2 == 8:  \n                    count += 1\n                # For n greater than 2, the sum so far should be less than 8\n                elif n > 2 and x1 + x2 < 8:\n                    for x3 in range(1, 9):\n                        # Similar approach for the third and consecutive numbers\n                        if n == 3 and x1 + x2 + x3 == 8:\n                            count += 1\n                        elif n > 3 and x1 + x2 + x3 < 8:\n                            for x4 in range(1, 9):\n                                if n == 4 and x1 + x2 + x3 + x4 == 8:\n                                    count += 1\n                                elif n > 4 and x1 + x2 + x3 + x4 < 8:\n                                    for x5 in range(1, 9):\n                                        if n == 5 and x1 + x2 + x3 + x4 + x5 == 8:\n                                            count += 1\n                                        elif n > 5 and x1 + x2 + x3 + x4 + x5 < 8:\n                                            for x6 in range(1, 9):\n                                                if n == 6 and x1 + x2 + x3 + x4 + x5 + x6 == 8:\n                                                    count += 1\n                                                elif n > 6 and x1 + x2 + x3 + x4 + x5 + x6 < 8:\n                                                    for x7 in range(1, 9):\n                                                        if n == 7 and x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8:\n                                                            count += 1\n                                                        elif n == 8 and x1 + x2 + x3 + x4 + x5 + x6 + x7 + 1 == 8:  # x8 is implicitly 1\n                                                            count += 1\n    return count\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 350 * 0.2 * 0.5\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # The greatest number of men not wearing bow ties nor spectacles would be when\n    # the overlap between bow ties and spectacles wearers is maximized.\n    # The maximum number of men both wearing bow ties and spectacles is the minimum of the two groups.\n    max_overlap = min(bow_ties, spectacles)\n\n    # To find the number of men wearing neither, subtract the number of men wearing either bow ties or spectacles\n    # from the total men, but add the overlap back since they were subtracted twice.\n    neither = total_men - (bow_ties + spectacles - max_overlap)\n    \n    return neither\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    ans = (1 / 3) * 414\n    return ans\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    import math\n\n    # Treating Ali and Bala as a single person since they must stand together,\n    # there are 4 \"people\" to arrange (Ali&Bala, Charles, Dan, Ella).\n    # However, Dan's position is fixed at the furthest left.\n    # So, we are arranging 3 \"people\".\n\n    # Calculate the arrangements of the remaining 3 \"people\" (which includes Ali&Bala as one)\n    arrangements_of_3 = math.factorial(3)\n\n    # Ali and Bala can be arranged among themselves in 2! ways since they can swap places.\n    ali_bala_arrangements = math.factorial(2)\n\n    # Multiply the two to get the total number of different arrangements\n    total_arrangements = arrangements_of_3 * ali_bala_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen traded 3 fishes for 2 rabbits.\n    fish_to_rabbit = 3 / 2\n    \n    # Oscar traded 3 rabbits for 4 packs of wheat.\n    rabbit_to_wheat = 4 / 3\n    \n    # Find the ratio of fish to wheat by multiplying the individual ratios.\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n    \n    # Calculate how many fishes Owen should give for 8 packs of wheat\n    fishes_for_8_wheat = 8 / fish_to_wheat\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since each child must get at least one apple and no two can get the same number\n    # we start from giving 1 apple to the 1st child, 2 to the 2nd, and so on.\n    # This uses up the minimum number of apples before we can figure out the max for the last child.\n    apples_used = sum(range(1, 5))  # sum of the first 4 minimum unique apples\n    remaining_apples = 19 - apples_used\n    \n    return remaining_apples\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    return sum(sequence)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    # Pages 1 through 9 have one digit each\n    pages_with_1_digit = 9\n\n    # Pages 10 through 99 have two digits each\n    pages_with_2_digits = 99 - 10 + 1\n\n    # Pages 100 through 139 have three digits each\n    pages_with_3_digits = 140 - 100\n\n    # Total number of digits used\n    total_digits = (pages_with_1_digit * 1) + (pages_with_2_digits * 2) + (pages_with_3_digits * 3)\n\n    return total_digits\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Drawing all the balls of the most numerous color plus one of each of the other two colors would ensure having 3 different colors.\n    # Number of red balls is the largest, so we consider the red ones first.\n    red_balls = 15\n    # At minimum, we need to draw one white ball and one yellow ball to satisfy the condition.\n    white_balls_needed = 1\n    yellow_balls_needed = 1\n    # Now we add the minimum red balls needed which is all the red balls\n    red_balls_needed = red_balls\n    # Total balls needed is sum of red balls needed and one of each of the other two colors.\n    total_balls_needed = red_balls_needed + white_balls_needed + yellow_balls_needed\n    \n    return total_balls_needed\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n    \n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 7, 8]\n    all_permutations = list(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny', real=True, positive=True)\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    total_sweets = solutions[ellen] + solutions[lenny]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    first_50k_tax = 0.06 * 50000\n    remaining_income = 120000 - 50000\n    total_tax = first_50k_tax + remaining_income * (0.06 + T / 100)\n    \n    equation = Eq(total_tax, 10000)\n    T_value = solve(equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Serene subtracted incorrectly where (Tens place, Ones place) were supposed to be (3, 2)\n    # but she made them (5, 3)\n    # Let's represent the minuend as (X, Y)\n    # The incorrect subtrahend is (5, 3)\n    # The incorrect difference she got is 36\n    # We need to find the correct subtrahend (3, 2) and correct difference\n\n    # Setting up the equation for the incorrect subtraction\n    # 10X + Y - (10*5 + 3) = 36\n    incorrect_difference = 36\n    incorrect_subtrahend = 10 * 5 + 3  # 53\n\n    # We can find the minuend now\n    minuend = incorrect_difference + incorrect_subtrahend\n\n    # Setting up the equation for the correct subtraction\n    # 10X + Y - (10*3 + 2) is the correct difference\n    correct_subtrahend = 10 * 3 + 2  # 32\n    correct_difference = minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_gifts = 7\n    total_children = 5\n    # Calculate all permutations of gifts given to children\n    all_possible_permutations = list(permutations(range(total_gifts), total_children))\n    valid_permutations = 0\n\n    for perm in all_possible_permutations:\n        # Richard is index 0, Kevin is index 1, toy car is gift 0, puzzle is gift 1, and calculator is gift 2\n        # Check if Richard gets toy car (0) or puzzle (1)\n        if perm[0] == 0 or perm[0] == 1:\n            # Check if Kevin gets toy car (0) or calculator (2)\n            if perm[1] == 0 or perm[1] == 2:\n                valid_permutations += 1\n\n    return valid_permutations\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # The smallest difference will be achieved by arranging the numbers in descending order for one number\n    # and in ascending order for the other number.\n    # Arrange the first five in descending order (from 9 to 5) and the next five in ascending order (from 0 to 4).\n    num1 = int(\"\".join(map(str, range(9, 4, -1))))\n    num2 = int(\"\".join(map(str, range(0, 5))))\n\n    # The difference between these two numbers will give us the smallest possible difference.\n    ans = num1 - num2\n    return ans\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # cost in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought  # total cost in pence\n    money_given = 100  # £1 is 100 pence\n    change = money_given - total_cost  # change in pence\n\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        if (isprime(n) and \n            isprime(n + 4) and \n            isprime(n + 6) and \n            isprime(n + 132) and \n            isprime(n + 250)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # g\n    sugar_concentration = 0.15\n    amount_of_sugar = total_weight * sugar_concentration\n    return amount_of_sugar\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    # Jack's speed and Rose's speed\n    jack_speed = 15\n    rose_speed = 10\n    \n    # Time they meet each other\n    time = 10\n    \n    # Relative speed\n    relative_speed = jack_speed - rose_speed\n    \n    # Distance between Town A and Town B\n    distance = relative_speed * time\n    \n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum([(2*i+2)**2 - (2*i)**2 for i in range(1, 1016)])\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for costs of the rabbits\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    # Create equations based on the given information\n    equation1 = Eq(second_rabbit, first_rabbit + 2)   # second rabbit costs £2 more than the first\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8) # third rabbit costs 80p less than the second\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.7) # total cost of 3 rabbits\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n    \n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    return 42.3 + 10.5 + 2.7 - 4.5\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    total_numbers = 5000\n\n    multiples_of_7 = total_numbers // 7\n    multiples_of_13 = total_numbers // 13\n    multiples_of_both = total_numbers // (7 * 13)\n\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_both\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    remainder = 48739 % 3\n    if remainder == 0:\n        return 0\n    else:\n        return 3 - remainder\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"SUCCESS\"\n    total_permutations = factorial(len(word)) // (factorial(word.count('S')) * factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n    s_combinations = factorial(5) // (factorial(2) * factorial(5 - 2))  # 5 positions and 2 S's\n    return total_permutations - s_combinations * factorial(6) // (factorial(word.count('C')) * factorial(word.count('U')) * factorial(word.count('E')))\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    difference = boys - teachers\n\n    return difference\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked alone\n    # Then Emma worked (14 - x) days\n    # In one day, David can complete 1/10 of the work\n    # In one day, Emma can complete 1/18 of the work\n    # Total work done by David alone in x days is x/10\n    # Total work done by Emma alone in (14 - x) days is (14 - x)/18\n    # The sum of these two works should equal to 1 (complete work)\n    # So the equation is: x/10 + (14 - x)/18 = 1\n    # Solving for x:\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x/10 + (14 - x)/18, 1)\n    solution = solve(equation, x)\n    days_emma_worked = 14 - solution[0]\n\n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    tshirts_total = 145\n    \n    # Calculate the price per T-shirt\n    price_per_tshirt = money_left / (tshirts_total - tshirts_bought)\n    \n    # Calculate the total money Josephine had at first\n    total_money = price_per_tshirt * tshirts_total\n    \n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n + 1)**2) // 4  # Formula for 1^3 + 2^3 + ... + n^3\n    sum_of_integers = (n * (n + 1)) // 2     # Formula for 1 + 2 + ... + n\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    average = 119\n    total_numbers = 14\n    total_sum = average * total_numbers\n    middle_term = average * 2  # since the numbers are even, the average multiplies by 2 gives the middle term.\n    smallest_number = middle_term - (total_numbers - 1) * 2  # since the numbers are consecutive even numbers\n    \n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    tallest_student_height = 132\n    shortest_student_height = 124\n    height_range = tallest_student_height - shortest_student_height + 1  # including both extremes\n    min_students_with_same_height = 4\n    class_size = (min_students_with_same_height - 1) * height_range + 1  # Pigeonhole Principle\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay * (1 + increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Calculate the time it takes to make one cut\n    time_per_cut = 12 / 4  # There are 4 cuts needed to make 5 sections\n    \n    # Calculate the time it takes to make 5 cuts\n    total_time_for_5_cuts = time_per_cut * 5\n    \n    return total_time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Let's assign a variable to the number of each coin type\n    # Since the number of 2p and 5p coins are equal, we need only one variable\n    x = symbols('x')\n    \n    # Now we create an equation based on the value of the coins\n    # 2p * number of 2p coins + 5p * number of 5p coins = £1.26\n    # Convert £1.26 to pence = 126p\n    equation = Eq(2 * x + 5 * x, 126)\n    \n    # Let's solve the equation for x\n    solutions = solve(equation, x)\n    \n    # Since x is the number of each type of coin, the total number of coins is 2x\n    return 2 * solutions[0]\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Since we're interested only in the ones digit of the result,\n    # we can look at the pattern of ones digits for powers of 3:\n    # 3^1 = 3 (ones digit is 3)\n    # 3^2 = 9 (ones digit is 9)\n    # 3^3 = 27 (ones digit is 7)\n    # 3^4 = 81 (ones digit is 1)\n    # 3^5 = 243 (ones digit is 3, pattern repeats every 4)\n    \n    # Since the pattern repeats every 4 steps,\n    # Calculate 2009 modulo 4 to find out how far into the pattern 3^2009 is\n    pattern_position = 2009 % 4\n\n    # Mapping the remainder to the respective ones digit\n    ones_digit = {1: 3, 2: 9, 3: 7, 0: 1}\n\n    return ones_digit[pattern_position]\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people at the party be p.\n    # Adults = 2/5 * p\n    # Remaining people = p - (2/5 * p) = (3/5) * p\n\n    # Boys = 5/9 of the remaining people = (5/9) * (3/5) * p\n    # Girls = remaining people - boys\n    # 36 girls = (3/5) * p - (5/9) * (3/5) * p\n\n    # Now we form an equation to solve for p using the above information\n    from sympy import symbols, Eq, solve\n\n    p = symbols('p')\n    equation = Eq((3/5)*p - (5/9)*(3/5)*p, 36)\n\n    # Solve the equation\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    number = 2 * 5  # even number and multiple of 5\n    while True:\n        square_root = number ** 0.5\n        if square_root.is_integer():  # check if it's a square number\n            return number\n        number += 2 * 5  # increment by the least common multiple of 2 and 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    child_ticket_price = 30\n\n    adult_ticket_price = child_ticket_price / (1 - child_discount)\n    senior_ticket_price = adult_ticket_price * (1 - senior_discount)\n\n    return senior_ticket_price\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy.functions.combinatorial.numbers import nT\n\ndef solution():\n    # Here we use the stars and bars theorem where we have 20 stars (books) and 3 bars (divisions between 4 kids)\n    # So we calculate the number of combinations for 23 items taken 3 at a time\n    ans = nT(20 + 4 - 1, 4 - 1)\n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    total_work = men * days\n    new_men = 2\n    new_days = total_work / new_men\n    return new_days\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for i in range(10, 100):  # Smallest two-digit number is 10\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_age_now = symbols('will_age_now')\n    \n    equation = Eq(will_age_now + 8, 4 * (will_age_now - 4))\n\n    will_age_solution = solve(equation, will_age_now)\n\n    return will_age_solution[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = int(((last_term - first_term) / difference) + 1)\n    sum_arithmetic_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_arithmetic_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # there are 3 trains, 4 cars, and 2 boats\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # calculate the different ways to go from A to B\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_to_finish = total_pages // pages_per_day\n\n    if total_pages % pages_per_day != 0:\n        days_to_finish += 1\n\n    return days_to_finish\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Since each kid needs to get at least two books, we distribute these 2 books to each of the 5 kids. \n    # That's 2*5 = 10 books already distributed.\n    remaining_books = 30 - 10  # 20 books remain to be distributed\n\n    # We need to divide the 20 remaining books among the 5 kids.\n    # This is equivalent to solve the problem of placing 20 indistinguishable items into 5 distinguishable bins\n    # which is the same as finding the number of solutions to x1 + x2 + x3 + x4 + x5 = 20.\n    # By stars and bars method, the solution is combinations(20 + 5 - 1, 5 - 1).\n    ans = comb(20 + 5 - 1, 5 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    ans = 6846 * 8\n    return ans\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the portions\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    # Define the equations based on the information given\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    # Calculate the total amount of soup\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    interest_rate = 0.06\n    time_period = 2\n\n    balance = principal * ((1 + interest_rate) ** time_period)\n\n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    # Since the trees are planted at both ends, we need to add 1 extra tree to the result.\n    num_trees = (road_length // interval) + 1\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be the price of one jug and 'c' be the price of one cup\n    j, c = symbols('j c')\n\n    # Two equations based on the given problem\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK coin denominations in pence\n    denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n\n    # Exact fare\n    fare = 44\n\n    # To find the smallest number of coins, we start by assuming Susan pays with the next highest whole pound (100p or 200p)\n    # and calculate the change in the least number of coins. We repeat for each possible payment amount until the fare.\n    min_coins = float('inf')\n    for payment in range(fare, 201, denominations[-1]):  # she can't pay with less than the fare or more than 200p\n        change = payment - fare\n        coins = 0\n        for coin in denominations:\n            # Find the number of each denomination needed for change\n            num_coins, change = divmod(change, coin)\n            coins += num_coins\n        # If this results in a smaller number of coins, update min_coins\n        if coins < min_coins:\n            min_coins = coins + 1  # Add one for the coin Susan uses to pay\n\n    return min_coins\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef evaluate_operations(a, b, c, d, operations):\n    return [eval(f\"Fraction({a}){operations[0]}Fraction({b})\"),\n            eval(f\"Fraction({c}){operations[1]}Fraction({d})\")]\n\ndef solution():\n    fractions = [(1/2, 1/9), (1/3, 1/8), (1/4, 1/7), (1/5, 1/6)]\n    operations = list(permutations(['+', '-', '*', '/']))\n    max_sum = 0\n    second_largest_term = None\n    \n    for ops in operations:\n        terms = []\n        for frac_pair in fractions:\n            terms += evaluate_operations(*frac_pair, ops)\n        terms_sum = sum(terms)\n        if terms_sum > max_sum:\n            max_sum = terms_sum\n            second_largest_term = sorted(terms)[2]  # Since terms will have 4 elements\n    \n    A, B = second_largest_term.numerator, second_largest_term.denominator\n    return A + B\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 89)])\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    # Total number of pupils before any transfer\n    total_pupils = 235 + 567\n    \n    # After transfer, the number of pupils in each room will be half of the total\n    pupils_each_room = total_pupils // 2\n    \n    # Return the number of pupils in each room after transfer\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variable for the number of matches won before the weekend\n    x = symbols('x', real=True, positive=True)\n\n    # Write the inequality based on the problem statement\n    inequality = Eq((x + 3)/(2*x + 5), 0.505)\n\n    # Solve the inequality\n    solutions = solve(inequality, x)\n\n    # Since x < 47.5, find the largest integer less than 47.5\n    ans = int(solutions[0]) - 1 if int(solutions[0]) > solutions[0] else int(solutions[0])\n\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    left = 20.35\n    initial_amount = spent + left\n    return initial_amount\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n    \n    common_difference = (fifteenth_term - tenth_term) / position_difference\n    \n    twelfth_term = tenth_term + 2 * common_difference\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    num = 1\n    den_1 = 1\n    den_2 = 2\n    ans = 0\n    \n    for i in range(1, 8):\n        ans += (num / (den_1 * den_2))\n        num += 1\n        den_1 = den_2\n        den_2 = den_2 + (i + 2)\n    \n    ans += 1 / den_1  # adding the last fraction\n\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_A = 24\n    class_B = 36\n    class_C = 42\n\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # Since the circle is divided into 12 equal parts,\n    # right triangles can only be formed if one of the sides\n    # of the triangle is the diameter of the circle.\n\n    # A diameter can be constructed from any point to the point\n    # directly opposite to it, making 6 diameters in total.\n    num_diameters = 12 // 2\n\n    # For each diameter, there are 10 remaining points from\n    # which we can choose 1 to make a right triangle\n    # (since the 2 endpoints of the diameter are excluded).\n    points_for_right_angle = 10\n\n    # Since we want 3 points to form a triangle, each diameter\n    # allows for 10 right triangles to be formed.\n    # Multiply the number of diameters by the possible points\n    num_right_triangles = num_diameters * points_for_right_angle\n\n    return num_right_triangles\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    sum = 0\n    for i in range(1, 201):\n        if i % 4 in [0, 1]:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    num_children = 200\n    cost_per_day = 4.36\n    num_days = 5\n    total_cost = num_children * cost_per_day * num_days\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3\n\n    # Let x be the number of correct answers, hence (total_questions - x) will be the number of incorrect answers.\n    # We can set up the equation: points_correct * x + points_incorrect * (total_questions - x) = total score\n\n    x = symbols('x')\n    equation = Eq(points_correct * x + points_incorrect * (total_questions - x), 76)\n\n    num_correct = solve(equation, x)\n\n    return num_correct[0]\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3/8\n    total_kg = 16\n    result = fraction * total_kg\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    marked_price = 1.20 * cost_price\n    selling_price = 0.90 * marked_price\n    profit = selling_price - cost_price\n\n    equation = Eq(profit, 120)\n    \n    cost_price_value = solve(equation, cost_price)\n\n    return cost_price_value[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    num_balls_per_box = 25 // 5\n    total_balls_in_6_boxes = num_balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    eq = Eq(Abs(x + 1), 2*x + 5)\n\n    # Solve the equation for both cases (x+1 >= 0 and x+1 < 0)\n    solutions = solve([eq], (x))\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # Four different colored socks\n    ways_four_socks = factorial(4)\n    \n    # Two pairs of different colored socks, considering each pair identical\n    # Permutations divided by the permutations of the identical items\n    ways_two_pairs = factorial(4) // (factorial(2) * factorial(2))\n    \n    return ways_four_socks, ways_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0\n        for b in range(10):  # b can be 0 to 9\n            if (10 * a + b) + (10 * b + a) + b == (100 * a + 10 * a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    points_on_circle = 10\n    points_in_triangle = 3\n    ans = comb(points_on_circle, points_in_triangle)\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre - beth, 6)\n   \n    solutions = solve((equation1, equation2), (andre, beth))\n\n    beth_sweets_now = solutions[beth] + 4\n    return beth_sweets_now\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t represent the mass of a table and c represent the mass of a chair\n    t, c = symbols('t c')\n\n    # According to the problem, the total mass of 3 tables is the same as 4 chairs\n    equation1 = Eq(3 * t, 4 * c)\n    # A table is 2 kg heavier than a chair\n    equation2 = Eq(t, c + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t] \n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand on either end of the line, so there are 2 possible positions for her.\n    judy_positions = 2\n\n    # The remaining five friends can be arranged in any order.\n    friends_permutations = factorial(5)\n\n    # The total number of ways they can perform is the product.\n    total_ways = judy_positions * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure winning, Anthea has to ensure that Ben is left with 4 apples\n    # on his turn because whatever Ben does (takes 1, 2, or 3 apples),\n    # Anthea can take the remaining and win.\n    # Thus, Anthea should make sure that after her turns, the total is always\n    # a multiple of 4, so that Ben's turn will always leave another multiple of 4.\n    \n    # Total number of apples at the start\n    total_apples = 18\n    \n    # Anthea should take enough apples to leave 16 (4 * 4) apples on the table,\n    # which means taking 2 apples.\n    optimal_move = total_apples % 4\n    \n    # If the optimal move is 0 (which is not a valid move), she should take 3\n    # in which case Ben can't make a move that leaves a multiple of 4 for Anthea\n    if optimal_move == 0:\n        optimal_move = 3\n    \n    return optimal_move\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    total_cost_for_5_bars = cost_per_bar * 5\n    return total_cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    ans = 9 + 12 + 17 + 18 + 21 + 23\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 other cars,\n    # it means there were at least 6 cars behind the first place before overtaking.\n    # Since the Ferrari driver finished in second place, we add 1 for the car that finished first,\n    # making a total of 6 (cars the driver overtook) + 1 (the winner) + 1 (Ferrari driver itself)\n    total_cars = 5 + 1 + 1\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Let x be the number we are trying to find\n    # According to the problem description, the following equation holds:\n    # (x - 6) / 12 = 2\n    # To find the number x, we need to perform the inverse operations\n\n    # Multiply both sides by 12 to cancel out the division\n    # x - 6 = 2 * 12\n\n    # Now, add 6 to both sides to solve for x\n    # x = 2 * 12 + 6\n\n    # Perform the calculation\n    x = 2 * 12 + 6\n    return x\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    english_younger, maths_elder, maths_younger = symbols('english_younger maths_elder maths_younger')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(maths_elder, maths_younger + 10)\n    equation2 = Eq(english_younger, maths_younger + 4)\n    equation3 = Eq(maths_elder + english_younger, 88)\n    equation4 = Eq(maths_younger, english_younger - 12)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (english_younger, maths_elder, maths_younger))\n    \n    # Return the value for the time younger sister spent on English homework\n    return solutions[english_younger]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 130 * 4\n    remaining_sum = 110 * 3\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n    # Convert minutes to seconds for the first two traffic lights\n    first_light = 1 * 60  # first traffic light changes every 1 minute (60 seconds)\n    second_light = 1.5 * 60  # second traffic light changes every 1.5 minutes (90 seconds)\n\n    # Determine the least common multiple of the first two traffic lights\n    lcm_first_second = lcm(first_light, second_light)\n\n    # since the traffic lights should turn green every 9 minutes, convert this to seconds\n    all_lights_green = 9 * 60\n\n    # The third traffic light must have a cycle time that is a factor of the 9-minute all-green interval\n    # but also common to the lcm of the first two lights. Start at 30 seconds and increment to find the suitable cycle time.\n    third_light = 30  # the cycle time of the third light should be at least 30 seconds\n    while True:\n        if all_lights_green % third_light == 0 and lcm_first_second % third_light == 0:\n            return third_light\n        third_light += 1  # increase by 1 second until the condition is met\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # The strategy for Leo to win is to leave a multiple of 3 apples after his turn\n    # because whatever Mia takes (1 or 2 apples), Leo can always take 2 or 1 apples alternatively,\n    # keeping the number of apples left as a multiple of 3 after every turn of Mia.\n    # This ensures that he will get the last apple.\n\n    # There are 14 apples initially.\n    total_apples = 14\n\n    # Leo needs to make sure that after his turn, the number of apples left is a multiple of 3.\n    # To figure out how many apples Leo should take, we subtract the nearest multiple of 3 from the total number.\n    # In this case, the nearest multiple of 3 less than 14 is 12.\n    # Therefore, Leo should take 14 - 12 = 2 apples.\n\n    apples_to_take = total_apples % 3\n    if apples_to_take == 0:\n        apples_to_take = 2  # Leo can take either 1 or 2, but 2 is a better choice strategy-wise.\n\n    return apples_to_take\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    nick_spoons = 12\n    pilpha_rings = 6\n    pilpha_three_rings = 3\n\n    # 12 silver spoons = 3/4 of 6 gold rings\n    # Therefore, the value of 1 silver spoon is 3/4 * 6 gold rings / 12\n    # value_per_spoon = (3/4 * pilpha_rings) / nick_spoons\n    value_per_spoon = (3/4 * pilpha_rings) / nick_spoons\n\n    # To find how many silver spoons equal the value of 3 gold rings\n    # we divide the value of 3 gold rings by the value of 1 silver spoon\n    # spoons_equal_three_rings = pilpha_three_rings / value_per_spoon\n    spoons_equal_three_rings = pilpha_three_rings / value_per_spoon\n\n    return spoons_equal_three_rings\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Difference between boys and girls.\n    diff = 55\n\n    # Starting with the assumption of 1 boy since there must be an outer layer.\n    boys = 1\n    girls = 0\n    layer = 1  # Starting with the outermost layer\n    \n    # Use a while-loop to keep adding layers and adjusting the count of boys and girls\n    # until we reach the given difference.\n    while (boys - girls) != diff:\n        # With every layer, we add 4*(layer-1) of the same gender because each \n        # new square layer adds that many students along the sides, \n        # avoiding the corners which are accounted for in the previous layer.\n        if layer % 2 == 1:\n            boys += 4 * (layer - 1)\n        else:\n            girls += 4 * (layer - 1)\n        \n        # Iterate to the next layer.\n        layer += 1\n    \n    # Once we have the correct difference, calculate total students.\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    # Solving the equations to find the cost of one pencil and one marker\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    # Total cost for 7 pencils and 7 markers\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    markers, brushes = symbols('markers brushes')\n\n    equation1 = Eq(markers * 3 + brushes, 28)\n    equation2 = Eq(markers + brushes, 12)\n\n    solutions = solve((equation1, equation2), (markers, brushes))\n\n    return solutions[markers]\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n      \n    # Let x be the total number of teachers and y be the number of female teachers\n    x, y = symbols('x y')\n\n    # The total weight of all teachers is 65x\n    total_weight = 65 * x\n    # The total weight of male teachers is 3 * 75 as there are 3 male teachers\n    total_male_weight = 3 * 75\n    # The total weight of female teachers is 60y\n    total_female_weight = 60 * y\n    \n    # Equation 1 represents the total weight of all teachers (male + female)\n    equation1 = Eq(total_male_weight + total_female_weight, total_weight)\n    # Equation 2 represents the total number of teachers (male + female)\n    equation2 = Eq(3 + y, x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # We want to find the number of female teachers which is y\n    return solutions[y]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora's position gives away the dimensions of the rectangle.\n    # Since Cora is 5th from the front and 7th from the back,\n    # there must be 5 + 7 - 1 people in the vertical line (subtracting 1 because Cora is counted twice).\n    vertical_people = 5 + 7 - 1\n    \n    # Since Cora is 2nd from the left and 4th from the right,\n    # there must be 2 + 4 - 1 people in the horizontal line (subtracting 1 because Cora is counted twice).\n    horizontal_people = 2 + 4 - 1\n    \n    # Total number of students is the product of the number of people in the vertical and horizontal lines.\n    total_students = vertical_people * horizontal_people\n    \n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n\n    # Decompose the numbers into prime factors: 33 = 3 * 11, 55 = 5 * 11\n    # For a number to be a square, all primes in its prime factorization\n    # must appear to an even power. Right now we have:\n    # 33 * 55 = 3^1 * 5^1 * 11^2. We need to make the powers of 3 and 5 even.\n    # The smallest number that does this for 3 is 3^1 (to make 3^2)\n    # And the smallest number that does this for 5 is 5^1 (to make 5^2)\n    # So, m must at least be 3 * 5 = 15 to make the product a square.\n    \n    # However, since 11 already has an even power, we do not need to include it in m.\n    m = 3 * 5\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate must have at least 2 pieces, we'll start by assigning two pieces to each plate.\n    # This leaves us with 8 - 2*3 = 2 pieces to distribute.\n    # The problem thus reduces to finding the number of ways to distribute 2 identical pieces among 3 plates.\n    \n    # This is a problem of distributing n identical items into r distinct boxes, also known as stars and bars.\n    # The number of ways to do this is C(n+r-1, r-1), where C is the binomial coefficient.\n    \n    # Here, n is 2 (the number of remaining candies) and r is 3 (the number of plates).\n    # So we calculate C(n+r-1, r-1) = C(2+3-1, 3-1) = C(4, 2).\n    \n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n    # Star is always the first runner, so there are 4 positions left to fill\n    # The number of ways to arrange the remaining 4 teammates is 4 factorial (4!)\n    num_ways = math.factorial(4)\n    return num_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    if a < b < c < d:\n                        num1 = 1000 * a + 100 * b + 10 * c + d\n                        num2 = 1000 * d + 100 * c + 10 * b + a\n                        # The third number should have a different arrangement of a, b, c, d\n                        num3_options = [\n                            1000 * b + 100 * a + 10 * d + c, # abdc\n                            1000 * c + 100 * d + 10 * a + b, # cdab\n                            1000 * d + 100 * b + 10 * c + a, # dbca\n                            1000 * b + 100 * d + 10 * a + c, # bdac\n                            1000 * c + 100 * a + 10 * b + d, # cabd\n                        ]\n                        for num3 in num3_options:\n                            if num1 + num2 + num3 == 26352:\n                                return min(num1, num2, num3)\n    return None\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def operation(a, b):\n        return a * b + a + b\n\n    ans = operation(6, 12)\n\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    initial_segments = 31\n    initial_time = 60  # in minutes\n    final_segments = 50\n\n    # Each cut creates an additional segment.\n    # Therefore, the time it took to make 30 cuts is 60 minutes\n    # Assuming each cut takes the same amount of time, we find the time per cut.\n    time_per_cut = initial_time / (initial_segments - 1)\n\n    # We need 49 cuts for 50 segments\n    total_time_for_final_segments = time_per_cut * (final_segments - 1)\n\n    return total_time_for_final_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, _ = solve_congruence(*congruences)\n    while num < 100:\n        num += 3 * 5 * 7  # LCM of 3, 5, 7\n    return num\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = symbols('number')\n    eq = Eq(number - 0.3 * number, 210)\n    solution = solve(eq, number)\n    return solution[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    current_year = 2002\n    while True:\n        current_year += 1\n        if str(current_year) == str(current_year)[::-1]:\n            break\n    return current_year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of flowers Candy and Nancy have now\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n    \n    # Initially, Candy had 11 flowers and Nancy had 9\n    candy_initial = 11\n    nancy_initial = 9\n    \n    # After giving some flowers to Nancy, Nancy has 8 more than Candy\n    equation1 = Eq(nancy_now, candy_now + 8)\n    \n    # The total number of flowers remains the same\n    equation2 = Eq(candy_initial - (nancy_now - nancy_initial), nancy_now - 8)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n    \n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    # Count the frequency of each letter\n    freq = {'A': 2, 'R': 2, 'N': 1, 'G': 1, 'E': 1}\n    \n    # Calculate the factorial of the total number of letters\n    num = factorial(total_letters)\n    \n    # Divide by the factorial of the frequency of each letter\n    for key in freq:\n        num //= factorial(freq[key])\n    \n    return num\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45\n\n    new_price = original_price * (1 + increase_percentage / 100)\n    \n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60\n    money_from_dad = 40\n    days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number // 24 == 36 and number % 24 == 0:\n            return number\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_friday_midnight = -5\n    temperature_saturday_midday = 17\n\n    overall_change = temperature_saturday_midday - temperature_friday_midnight\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    n = 1\n    term = 1\n    while term <= 50:\n        n += 1\n        term += n\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185  # converting £ to pence for uniformity\n\n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)\n\n    # Since £1 = 100p, £10 = 1000p\n    money_given_p = 1000 \n\n    change_p = money_given_p - total_cost_p  # Calculate change in pence\n\n    # Convert the change back to pounds (£)\n    change_in_pounds = change_p / 100\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    return 10 + 1 + 14 - 1\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # St. Petersburg is the second-largest city in Russia\n    # As of my knowledge cutoff in early 2023, the population was approximately 5.4 million\n    # Writing this number in figures\n    ans = 5400000\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5000, 10000):\n        thousands_digit = int(str(i)[0])\n        hundreds_digit = int(str(i)[1])\n        tens_digit = int(str(i)[2])\n        ones_digit = int(str(i)[3])\n        \n        # Avoid division by zero\n        if hundreds_digit == 0 or tens_digit == 0 or ones_digit == 0:\n            continue \n        \n        if thousands_digit % hundreds_digit == 0 and thousands_digit % tens_digit == 0 and thousands_digit % ones_digit == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    possible_digits = [set(range(10)) for _ in range(4)]\n    \n    # Applying the conditions to eliminate possibilities\n    for attempt, correctness in zip(['5648', '3628', '3147', '5629', '1258'],\n                                    [(2, False), (2, False), (2, False), (2, False), (0, True)]):\n        attempt = [int(d) for d in attempt]\n        for i, digit in enumerate(attempt):\n            if correctness[1]:  # all digits are wrong\n                if digit in possible_digits[i]:\n                    possible_digits[i].remove(digit)\n            else:  # two digits are correct\n                if len(possible_digits[i]) > 1:  # Cannot make conclusions if only one possibility remains\n                    if digit in possible_digits[i]:\n                        possible_digits[i] = {digit}\n                    else:\n                        possible_digits[i] = possible_digits[i].difference({digit})\n                # We cannot safely remove options if only one option remains\n\n    # At the end of this process, each 'possible_digits' set should contain only one element\n\n    ans = ''.join(str(digit.pop()) for digit in possible_digits)\n    return ans\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown number using a tilde symbol\n    tilde = symbols('tilde')\n\n    # Set up the equation according to the provided math question\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve the equation for the unknown variable\n    solutions = solve(equation, tilde)\n\n    # There might be several solutions, we want the one that is a number.\n    tilde_solution = next(num for num in solutions if num.is_number)\n\n    return tilde_solution\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # The 4th child is opposite the 22nd child, which means that\n    # there must be an odd number of children between them to be evenly spaced.\n    # This number is essentially half the circle.\n    \n    # Calculate the number of children between 4th and 22nd child:\n    num_between = 22 - 4\n    \n    # The total number of children will be double the number between plus 2\n    # (since we have to count the 4th and 22nd child as well).\n    total_children = num_between * 2 + 2\n\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    total_weeks = 10\n    \n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2*a_1 + (n - 1)*d)\n    total_coins = total_weeks / 2 * (2 * first_week_coins + (total_weeks - 1) * common_difference)\n    \n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each student's mark\n    A, B, C, D, E = symbols('A B C D E')\n\n    # A, B, and C have an average score of 95\n    equation1 = Eq((A + B + C) / 3, 95)\n    # B, C, and D have an average score of 94\n    equation2 = Eq((B + C + D) / 3, 94)\n    # E's mark is 96 and is the second highest, so A must be greater than 96\n    equation3 = Eq(E, 96)\n    equation4 = Eq(A, E + 1)\n    # B and D have the same score\n    equation5 = Eq(B, D)\n\n    # Students' marks are above 91\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91)\n\n    # Solve the system of equations with constraints\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (A, B, C, D), set=True)\n    \n    # Extract solutions that meet the constraints\n    valid_solutions = [sol for sol in solutions[1] if all(constraint.subs(sol) for constraint in constraints)]\n\n    # Since A has the highest mark, we only need the solution that has A > E\n    # Also, since E is the second highest, A must be greater than E which is 96\n    correct_solution = next(sol for sol in valid_solutions if sol[A] > sol[E])\n\n    # Return D's score\n    return correct_solution[D]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5%\n\n    # Using the formula for compound interest to find the number of years:\n    # A = P(1 + r)^t\n    # 37100 = 35000(1 + 0.015)^t\n    # (1 + 0.015)^t = 37100/35000\n    # t = log(37100/35000) / log(1.015)\n\n    from math import log\n\n    years = log(final_amount/principal) / log(1 + interest_rate)\n    # Bella said 5 years, so we compare the calculated years with 5.\n    if abs(years - 5) < 1e-6:  # Account for any potential floating-point errors\n        return True, 5\n    else:\n        return False, round(years)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Given data\n    avg_total = 65\n    avg_male = 75\n    avg_female = 60\n    num_males = 3\n\n    # Formula to calculate total weight\n    total_weight = avg_total * (num_males + x)   # (x is the number of female teachers we want to find)\n    male_weight = avg_male * num_males\n    female_weight = avg_female * x\n\n    # Since total weight is the sum of male and female weights\n    # Setting the equation and solving for x\n    x = (total_weight - male_weight) / avg_female\n\n    # Substitute total_weight with avg_total * (num_males + x)\n    x = (avg_total * (num_males + x) - male_weight) / avg_female\n\n    # Simplify the equation to solve for x\n    # (avg_total * num_males + avg_total * x - avg_male * num_males) / avg_female = x\n    # (avg_total * num_males - avg_male * num_males) / avg_female + avg_total / avg_female * x = x\n    # avg_total / avg_female * x - x = (avg_male * num_males - avg_total * num_males) / avg_female\n    # x * (avg_total / avg_female - 1) = (avg_male * num_males - avg_total * num_males) / avg_female\n    # x = (avg_male * num_males - avg_total * num_males) / (avg_female * (avg_total / avg_female - 1))\n\n    x = (avg_male * num_males - avg_total * num_males) / (avg_total - avg_female)\n\n    return int(x)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    one_fourth_full_mass = 250\n    three_fourth_full_mass = 350\n    one_half_full_mass_difference = three_fourth_full_mass - one_fourth_full_mass\n    empty_jar_mass = one_fourth_full_mass - one_half_full_mass_difference\n    \n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_litres = 13.15\n    bottle_fraction = 1 / 7\n    bottle_capacity_litres = 9.1\n    cup_capacity_ml = 350\n    cups_number = 4\n    ml_to_litres = 1 / 1000\n\n    # Calculate the amount of soda used to fill the fraction of the bottle\n    soda_used_for_bottle = bottle_capacity_litres * bottle_fraction\n\n    # Calculate the total amount of soda used to fill the cups\n    soda_used_for_cups = cups_number * cup_capacity_ml * ml_to_litres\n\n    # Calculate the amount of soda left\n    soda_left = total_soda_litres - (soda_used_for_bottle + soda_used_for_cups)\n    \n    return soda_left\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for father's and son's current ages\n    father_age, son_age = symbols('father_age son_age')\n\n    # Equation 1: 6 years ago, father's age was 5 times the son's age\n    equation1 = Eq(father_age - 6, 5 * (son_age - 6))\n\n    # Equation 2: The sum of their current ages is 78\n    equation2 = Eq(father_age + son_age, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father_age, son_age))\n\n    # Return the father's current age\n    father_current_age = solutions[father_age]\n\n    return father_current_age\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt, pi\n\n    # Given values\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters (converted from cm)\n    x = 0.04  # displacement from equilibrium in meters (converted from cm)\n    \n    # Total energy of the oscillator (E) is given by E = (1/2) * k * (amplitude)^2\n    E = 0.5 * k * amplitude**2\n\n    # Maximum speed (v_max) is given by v_max = A * ω\n    # Where ω (angular frequency) = sqrt(k/m)\n    # Since the speed v is required when the block is at x = 4.0 cm from equilibrium,\n    # we use the energy conservation principle: E = (1/2) * m * v^2 + (1/2) * k * x^2\n    # So, v^2 = (2/m) * (E - (1/2) * k * x^2)\n    v_squared = (2/m) * (E - (1/2) * k * x**2)\n    v = sqrt(v_squared)  # speed when the block is 4.0 cm from equilibrium\n\n    return E, v\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose wants to ensure victory, she needs to leave 13 marbles in such a way that\n    # no matter whether Kylie takes 1 or 2 marbles, Rose can always leave a multiple of 3.\n    \n    # If Rose takes away 1 marble in the first turn, 13 marbles are left.\n    # No matter whether Kylie takes 1 or 2 marbles, Rose can always take away marbles\n    # to ensure that the remaining marbles are a multiple of 3 after her turn.\n    \n    # If Rose starts by taking 2 marbles, there would be a way for Kylie to take the\n    # marbles in turns that could lead to her victory. So Rose should not take 2 marbles.\n\n    # Rose should take away 1 marble in the first turn to ensure her victory.\n    return 1\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -a  # The other square root of 2023, which is the negative of `a`\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount_pence = 45 * 100  # £1 = 100p, so £45 = 45 * 100p\n    pence_per_coin = 5\n    num_coins = total_amount_pence / pence_per_coin\n    return int(num_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip_per_minute, bud_per_minute = symbols('pip_per_minute bud_per_minute')\n\n    equation1 = Eq(pip_per_minute, bud_per_minute + 20)  # Pip runs 20 meters more than Bud per minute\n    equation2 = Eq(3 * pip_per_minute + 3 * bud_per_minute, 540)  # Total distance run by both in 3 minutes\n\n    solutions = solve((equation1, equation2), (pip_per_minute, bud_per_minute))\n\n    distance_pip = 3 * solutions[pip_per_minute]  # Total distance run by Pip in 3 minutes\n\n    return distance_pip\n\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins_A, coins_B, coins_C = symbols('coins_A coins_B coins_C')\n    \n    # Setup equations based on the problem statement\n    equation1 = Eq(coins_A, 4 * coins_B)\n    equation2 = Eq(coins_C + (coins_A * 0.06) - (coins_B * 0.20), 1220)\n    equation3 = Eq(coins_C * 1.22, 1220)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (coins_A, coins_B, coins_C))\n\n    return solutions[coins_A]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    original_coffee_percentage = 60 / 100\n    final_coffee_percentage = 40 / 100\n\n    # Let the original total number of bottles be 100 (for simplicity),\n    # this does not affect the percentage calculation.\n    original_total_bottles = 100\n    final_total_bottles = 100 / final_coffee_percentage\n    additional_tea_bottles = final_total_bottles - original_total_bottles\n\n    # Calculate the original and final number of tea bottles.\n    original_tea_bottles = original_total_bottles * (1 - original_coffee_percentage)\n    final_tea_bottles = final_total_bottles - final_total_bottles * final_coffee_percentage\n    \n    # Calculate the percentage increase in tea bottles.\n    increase_in_tea_bottles = final_tea_bottles - original_tea_bottles\n    percentage_increase = (increase_in_tea_bottles / original_tea_bottles) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal numbers to integers\n    num1 = int('2A3', 16)\n    num2 = int('17B', 16)\n\n    # Sum the integers\n    total = num1 + num2\n\n    # Convert the sum back to hexadecimal\n    ans = hex(total)[2:].upper()\n\n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = 25 / 100 * 30 / 100 * 40 / 100 * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2  # Total price of red flowers\n    total_green_price = 2 * 5  # Total price of green flowers\n    total_white_price = 3 * 10  # Total price of white flowers\n\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n\n    average_selling_price = total_price / total_flowers\n    return average_selling_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    for tricycles in range(25):\n        cars = 24 - tricycles\n        total_wheels = tricycles * 3 + cars * 4\n        if total_wheels == 86:\n            return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    time_for_washing_watermelons = 1\n    time_for_washing_glasses = 3\n    time_for_juicer_working = 4\n    time_for_pouring_juice = 1\n\n    total_time = (\n        time_for_washing_watermelons +\n        time_for_washing_glasses +\n        time_for_juicer_working +\n        time_for_pouring_juice\n    )\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60\n    james_money_p = 110  # £1.10 is 110p because 1 pound = 100 pence\n\n    total_money_p = lewis_money_p + james_money_p\n    return total_money_p\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    count_W = \"WINNING\".count('W')\n    count_I = \"WINNING\".count('I')\n    count_N = \"WINNING\".count('N')\n    count_G = \"WINNING\".count('G')\n\n    arrangements = factorial(total_letters) // (factorial(count_W) * factorial(count_I) * factorial(count_N) * factorial(count_G))\n    \n    return arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Each stack must have at least 3 books, so we start with 3 books per stack\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - (x1 + x2)  # Calculate the third stack based on the first two\n            if x3 >= 3:  # Ensure the third stack has at least 3 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    return derangement(6)\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\nfrom math import prod\n\ndef solution():\n    # All possible numbers from 1 to 13\n    numbers = set(range(1, 14))\n    \n    # Function to count the number of factors of a number\n    def count_factors(n):\n        return sum(n % d == 0 for d in range(1, n + 1))\n    \n    # Find all pairs of numbers that have a unique count of factors\n    unique_factor_nums = set()\n    for num in numbers:\n        if all(count_factors(num) != count_factors(other) for other in numbers if other != num):\n            unique_factor_nums.add(num)\n    \n    # Candidates for Alice since she knows her number is odd\n    # Alice's number must be among those with a unique factor count\n    alice_candidates = {num for num in unique_factor_nums if num % 2 == 1}\n    \n    # Possible sets of 9 numbers\n    for possible_set in combinations(numbers, 9):\n        # Convert to set for ease of manipulation\n        selected_set = set(possible_set)\n        \n        # Get the potential numbers for Alice\n        alices_number = alice_candidates.intersection(selected_set)\n        \n        # Alice should have only 1 possible number and we proceed if this condition holds\n        if len(alices_number) == 1:\n            alice_number = alices_number.pop()\n            \n            # Possible numbers for May\n            may_candidates = {num for num in selected_set if num == alice_number - 2}\n            \n            # Mark candidates (1 less than May's number)\n            mark_candidates = {num - 1 for num in may_candidates if (num - 1) in selected_set}\n            \n            # Check if there's a unique solution for May and Mark by checking the lengths\n            if len(may_candidates) == 1 and len(mark_candidates) == 1:\n                unselected_numbers = numbers - selected_set\n                return prod(unselected_numbers)\n    \n    return None\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    total_bottles = 350\n    income = 2012\n    price_lemonade = 4\n    price_1000plus = 7\n    min_1000plus_sold = total_bottles\n\n    # We will iterate over the possible number of lemonade bottles sold,\n    # and calculate the corresponding number of 1000 Plus bottles sold to reach the income.\n    # We want to minimize the number of 1000 Plus bottles.\n    for lemonade_sold in range(total_bottles + 1):\n        # If selling this number of lemonade bottles doesn't exceed the total income\n        if price_lemonade * lemonade_sold <= income:\n            # Calculate the remaining income after selling the lemonade\n            remaining_income = income - price_lemonade * lemonade_sold \n            # Calculate the number of 1000 Plus bottles sold to reach the remaining income\n            if remaining_income % price_1000plus == 0:\n                # Update the minimum number of 1000 Plus bottles if it is less than the current minimum\n                _1000plus_sold = remaining_income // price_1000plus\n                min_1000plus_sold = min(min_1000plus_sold, _1000plus_sold)\n    \n    return min_1000plus_sold\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Let the number of blue pens originally in the box be 3x\n    # Let the number of red pens originally in the box be 5x\n    # Total number of pens originally is 96, so 3x + 5x = 96 => 8x = 96 => x = 12\n    x = 96 // 8\n    \n    # Number of blue pens originally\n    original_blue = 3 * x\n    \n    # Number of red pens originally\n    original_red = 5 * x\n    \n    # Additional blue pens\n    blue_added = symbols('blue_added')\n    \n    # New total is the original count plus the additional 60 red pens and the unknown blue pens\n    new_total = original_blue + original_red + 60 + blue_added\n    \n    # Equation for 40% of the new total being blue pens\n    equation = Eq((original_blue + blue_added) / new_total, 0.4)\n    \n    # Solve for the number of blue pens added\n    blue_added_solution = solve(equation, blue_added)\n    \n    return blue_added_solution[0]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kilograms\n    final_velocity = 8  # final velocity in m/s\n    time = 4  # time in seconds\n    \n    # Using the formula: Force = mass * acceleration\n    # Also using the formula for acceleration: acceleration = (final_velocity - initial_velocity) / time\n    # Since the object is initially at rest, initial_velocity = 0\n\n    initial_velocity = 0\n    acceleration = (final_velocity - initial_velocity) / time\n    force = mass * acceleration\n    \n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for i in range(101):\n        if i % 4 == 0 and i % 7 == 6 and i % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # We are looking for the largest number that can't be expressed as\n    # a combination of multiples of 3 and 7, also known as the Frobenius number\n    # for two numbers a and b (with gcd(a,b)=1), it is given by (a*b - a - b)\n    a = 3\n    b = 7\n    ans = a * b - a - b\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    # Points from correct answers\n    total_points_from_correct = 5 * correct\n    # Points deducted for incorrect answers\n    total_points_deducted = 2 * incorrect\n    # Total score\n    total_score = 151\n\n    # Equation representing the relationship between correct and incorrect answers\n    equation1 = Eq(correct, 12 + 3 * incorrect)\n    # Equation representing the total points scored\n    equation2 = Eq(total_points_from_correct - total_points_deducted, total_score)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_km = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * total_km\n    cost_per_person = total_cost / num_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1_base10 = int('45', 7)\n    num2_base10 = int('66', 7)\n\n    sum_base10 = num1_base10 + num2_base10\n\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    \n    return wearing_neither\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    total_matches = (4 + 6 + 2 + 1 + 3 + 5) // 2\n    matches_F = total_matches - (4 + 6 + 2 + 1 + 3 + 5)\n    return matches_F\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    for skip in range(1, 20):\n        if skip % 2 == 0 or (skip + 1) % 2 == 0:  # skip even numbers and the number following them\n            continue\n\n        N = 1\n        for i in range(1, 21):\n            if i == skip or i == skip + 1:\n                continue\n            N *= i\n\n        divisible = True\n        for i in range(1, 21):\n            if i not in [skip, skip + 1] and N % i != 0:\n                divisible = False\n                break\n\n        if divisible:\n            return skip + skip + 1\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    linda, cici = symbols('linda cici')\n\n    # Equation 1: Linda's age when Cici was born\n    equation1 = Eq(cici, 0)\n    equation2 = Eq(linda, cici + 11)\n\n    # Equation 2: Sum of their ages 4 years later will be 37\n    equation3 = Eq(linda + 4 + cici + 4, 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (linda, cici))\n\n    # Linda's age 3 years later\n    linda_age_3_years_later = solutions[linda] + 3\n    \n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    ratio_sum = 5 + 3\n    difference = 18\n    single_ratio_value = difference / (5 - 3)\n    total_stamps = single_ratio_value * ratio_sum\n    return int(total_stamps)\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_numbers = 0\n    for number in range(161, (15*15)+1):  # the loop range is set to the maximum number that can have the same quotient and remainder when divided by 15.\n        if number % 15 == number // 15:\n            sum_numbers += number\n    return sum_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # The least possible value of the sum of the two numbers\n    # is when the first number is at its minimum and the second number is at its minimum\n    first_number_min = 5\n    second_number_min = 2\n    \n    # So, the smallest sum is the sum of the minimum values\n    ans = first_number_min + second_number_min\n    return ans\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # Mary's uphill walking speed (home to school) in m/min\n    uphill_speed = 10\n    # Mary's downhill walking speed (school to home) in m/min\n    downhill_speed = 30\n    # Total distance in one direction in meters\n    distance_one_way = 300\n\n    # Calculate the time taken to walk uphill and downhill\n    time_uphill = distance_one_way / uphill_speed  # time = distance / speed\n    time_downhill = distance_one_way / downhill_speed  # time = distance / speed\n\n    # Total distance for the round trip\n    total_distance = 2 * distance_one_way\n    # Total time for the round trip\n    total_time = time_uphill + time_downhill\n\n    # Average speed for the round trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    ways = 5 ** 4 # Each of the four people can choose from 5 entrances\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    bags_needed = peaches // peaches_per_bag\n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of fruits that can be distributed equally\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Find the greatest common divisor (GCD) of the distributable fruits\n    greatest_common_divisor = gcd(gcd(distributable_apples, distributable_pears), distributable_oranges)\n\n    # The GCD is the biggest possible number of students\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "import math\n\ndef solution():\n    # Judy can take 1 of 2 positions (either first or last)\n    judy_positions = 2\n    # The remaining 5 friends can stand in any order \n    friends_permutations = math.factorial(5)\n    # The total number of ways they can form the line\n    total_ways = judy_positions * friends_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n\n    for i in range(1, lcm + 1):\n        if (lcm % i == 0) and (number % i == 0) and (i == 1 or i == 2):\n            other_number = lcm // i\n            if (other_number % 1 == 0 and other_number % 2 == 0) and other_number != number:\n                return other_number\n                \nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    num = 1\n    while digit_count < 200:\n        num_digits = len(str(num))\n        digit_count += num_digits\n        if digit_count >= 200:\n            break\n        num += 1\n\n    # Find the difference to locate the exact digit\n    diff = digit_count - 200\n    return int(str(num)[num_digits - diff - 1])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    points_per_qualified = 5\n    points_per_unqualified = -18\n    total_production = 500 * total_days\n    total_points = 9931\n\n    for qualified in range(total_production + 1):\n        unqualified = total_production - qualified\n        if qualified * points_per_qualified + unqualified * points_per_unqualified == total_points:\n            ans = qualified\n            break\n\n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    \n    # Let's form an equation based on the information given.\n    # Shirt price is cost + $40\n    # Customer buys it with 20% off: (cost + 40) * 0.8\n    # Profit is $12: (cost + 40) * 0.8 - cost = 12\n\n    equation = Eq((cost + 40) * 0.8 - cost, 12)\n    solved_cost = solve(equation, cost)\n\n    return solved_cost[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the number of roosters and h represent the number of hens initially\n    r, h = symbols('r h')\n\n    # According to the problem, we have two equations\n    equation1 = Eq(h, 6 * r)                # hens are 6 times roosters\n    equation2 = Eq(h + 60, 4 * (r + 60))    # after increasing, hens are 4 times roosters\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (r, h))\n\n    # The total number of chickens is the number of hens plus the number of roosters\n    total_chickens = solutions[r] + solutions[h]\n\n    return total_chickens\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    total_for_seven = 7 * 12\n    total_for_eight = 8 * 11\n    eighth_number = total_for_eight - total_for_seven\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    sum_seq1 = sum(range(1, 9)) + sum(range(7, 0, -1))  # 1+2+3+4+5+6+7+8+7+6+5+4+3+2+1\n    sum_seq2 = 1 + 2  # The additional 1+2 at the end of the sequence\n    ans = sum_seq1 + sum_seq2\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    period = \"538462\"  # The repeating sequence of the decimal\n    index = 2021 % len(period) - 1  # Find the position within the repeating sequence\n    if index == -1:  # If the remainder is 0, we get the last digit of the period\n        index = len(period) - 1\n    ans = int(period[index])  # Get the digit at the found position\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = sum(str(i).count('9') for i in range(1, 101))\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let the original walking speed of April be 'a' meters per minute, and that of Baye be 'b' meters per minute.\n    # Let's assume they both took 't' minutes to meet at 800m from Q.\n    # Since April met Baye 800m from Q, Baye walked (1800 - 800)m in 't' minutes.\n    # During the same time, April walked 1800m + 800m, because she reached Q and turned back.\n    # So, we can write two equations using the relationship distance = speed x time:\n    # a * t = 1800 + 800 (April's distance)\n    # b * t = 1800 - 800 (Baye's distance)\n    # We can solve the equations for a and b in terms of t:\n    # a = (1800 + 800)/t and b = (1800 - 800)/t\n    # When April arrives back at P, she has traveled an additional 1800m, this time at 4 times her original speed.\n    # The time taken for April to travel back to P at 4a speed is 1800/(4a).\n    # Baye keeps walking during this time at her original speed, so the distance covered by Baye is b * 1800 / (4a).\n    # So, the total distance Baye has covered when April reaches P is:\n    # (1800 - 800) + (b * 1800 / (4a))\n    # We know the relationship between a and b, so we can substitute b = (1800 - 800) / t into this expression:\n    # Baye's total distance from point P when April reaches P:\n    # (1800 - 800) + (1800 - 800) / t * 1800 / (4 * (1800 + 800)/t)\n    # This simplifies to:\n    # (1800 - 800) + (1800 - 800) / 4\n    # This is because the t terms cancel out in the fraction.\n    # We can solve this to find out how many meters Baye is away from Q:\n\n    baye_distance_before_meeting = 1800 - 800\n    baye_additional_distance = baye_distance_before_meeting / 4\n    baye_total_distance = baye_distance_before_meeting + baye_additional_distance\n\n    # Baye's distance from Q is the remaining distance she has to travel to reach Q.\n    baye_distance_from_Q = 1800 - baye_total_distance\n\n    return baye_distance_from_Q\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    sum_numbers = 375 + 753 + 537 + 357 + 573 + 735\n    return sum_numbers\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for num in range(10, 1000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    equation = Eq((1/3 + 2/5) * initial_money, 132)\n\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_both = 105 // (5 * 7)\n\n    # Apply the Inclusion-Exclusion Principle\n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n\n    # Pages 1-9 use 1 digit each\n    total_digits += 1 * 9\n\n    # Pages 10-99 use 2 digits each\n    total_digits += 2 * (99 - 10 + 1)\n\n    # Pages 100-215 use 3 digits each\n    total_digits += 3 * (215 - 100 + 1)\n\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    # Iterate through all 5-digit numbers\n    for num in range(10000, 100000):\n        # Construct the new numbers by adding 1 at beginning and end\n        num_with_one_at_start = int(\"1\" + str(num))\n        num_with_one_at_end = int(str(num) + \"1\")\n        \n        # Check if the condition is met\n        if num_with_one_at_start * 3 == num_with_one_at_end:\n            return num  # Return the number that satisfies the condition\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # To ensure getting 5 green beads for sure in the worst case,\n    # Darrell needs to pick all beads of other colors first\n    blue_beads = 5\n    white_beads = 6\n    # Plus 4 green beads as the worst-case scenario before getting the 5th green bead\n    worst_case_green_beads = 4\n\n    # Total beads to draw to get at least 5 green beads\n    total_beads = blue_beads + white_beads + worst_case_green_beads + 1  # plus 1 to get the 5th green bead\n\n    return total_beads\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 82):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # John takes 12 minutes to go from the first floor to the fourth floor\n    # which means he crosses 3 intervals (from 1st to 2nd, 2nd to 3rd, and 3rd to 4th)\n    \n    # The time taken to cross one interval is 12 minutes / 3 intervals\n    one_interval_time = 12 / 3\n    \n    # From the first floor to the eighth floor involves 7 intervals\n    # (from 1st to 2nd, 2nd to 3rd, ..., 7th to 8th)\n    total_intervals_to_eighth = 7\n    \n    # Total time needed for 7 intervals will be 7 times the time for one interval\n    total_time_to_eighth = total_intervals_to_eighth * one_interval_time\n    \n    return total_time_to_eighth\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    # since the baskets are identical, the order of the apples doesn't matter\n    for i in range(7):  # first basket could have 0 to 6 apples\n        for j in range(7 - i):  # next basket could have 0 to 6-minus what's in the first\n            k = 6 - i - j  # remaining apples go in the third basket\n            count += 1  # each valid combination is a way to split the apples\n    return count\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Original ratio of birds to squirrels is 8:5\n    original_birds = 8\n    original_squirrels = 5\n    \n    # Squirrels increased by 20%\n    increased_squirrels = original_squirrels * 1.20\n    \n    # Total number of animals remains the same\n    total_animals = original_birds + original_squirrels\n    \n    # New number of birds after squirrels increased\n    new_birds = total_animals - increased_squirrels\n    \n    # Calculate the percentage of birds that flew away\n    birds_flew_away_percentage = ((original_birds - new_birds) / original_birds) * 100\n    \n    return round(birds_flew_away_percentage, 2)\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizza_per_month = 15\n    num_months = 5  # From March to July is 5 months\n    total_pizza = average_pizza_per_month * num_months\n    return total_pizza\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    page_difference = 4\n    \n    total_days = ((last_day_pages - first_day_pages) // page_difference) + 1\n    \n    return total_days\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    ans = 32 * 2.99\n    return ans\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_op(x, y):\n        return (x % y) + (y % x)\n\n    ans = custom_op(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank = 9  # liters\n    container_volume = 5  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10): # Loop over the possible values of A where 9/A < 1\n        if 5/9 < 9/A: # This checks if A satisfies the given inequality\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    required_loafs = 35\n\n    cups_needed = required_loafs / loafs_per_cup\n    \n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1\n    total_cards = friends * cards_sent_by_each\n    return total_cards\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Each letter represents a different integer from 1 to 9 (inclusive)\n    D, A, R, T, C = symbols('D A R T C', integer=True)\n    \n    # Define the equations based on the given information\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n    \n    # Solve the equations with the condition that no letter is zero and each integer is unique\n    solutions = solve(\n        (equation1, equation2, equation3), (D, A, R, T, C),\n        dict=True, # Return the solved values as a list of dictionaries\n        exclude=[0], # Exclude the value 0\n        # Ensure that each variable takes a different value (Permutations and Combinations)\n        check=lambda sol: len(set(sol.values())) == len(sol.values())\n    )\n    \n    max_art = 0\n    for sol in solutions:\n        # Calculate A + R + T and update max_art if it's greater than the current max value\n        art = sol[A] + sol[R] + sol[T]\n        if art > max_art:\n            max_art = art\n    return max_art\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    # Let's assume the number of boys is b and the number of girls is g.\n    # We know that the total number of students is 39, so we have: b + g = 39\n    #\n    # According to the problem, 1/4 of the boys is equal to 2/5 of the girls.\n    # So we have: 1/4 * b = 2/5 * g\n    #\n    # We have two equations and two unknowns, and we need to find the value of b and g.\n\n    # We can import sympy for symbolic computation or solve it algebraically.\n    # Here, we use sympy for simplicity.\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    b, g = symbols('b g')\n\n    # Define the equations\n    total_students_equation = Eq(b + g, 39)\n    boys_girls_ratio_equation = Eq(1/4 * b, 2/5 * g)\n\n    # Solve the system of equations\n    solutions = solve((total_students_equation, boys_girls_ratio_equation), (b, g))\n\n    # Get the number of boys and girls\n    boys = solutions[b]\n    girls = solutions[g]\n\n    # The difference between the number of boys and girls\n    difference = boys - girls\n\n    return difference\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_tanya = 3\n    members_right_of_tanya = 5\n    tanya = 1\n    \n    total_members_in_row = members_left_of_tanya + tanya + members_right_of_tanya\n    return total_members_in_row\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n\n    # Find all four-digit prime numbers\n    four_digit_primes = list(primerange(1000, 10000))\n\n    # Starting from the largest four-digit prime, check if it's a factor of 87878\n    for prime in reversed(four_digit_primes):\n        if 87878 % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_first_segment = 280 / 7  # Time = Distance / Speed\n    time_second_segment = 400 / 5\n    time_third_segment = (800 - 280 - 400) / 8  # Remaining distance for the third segment\n\n    # Add up the times for all segments\n    total_time = time_first_segment + time_second_segment + time_third_segment\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load = 12\n    vans_needed = -(-total_weight // max_load)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Daniel and Patrick had an equal number of stickers at first\n    equation1 = Eq(daniel, patrick)\n    # Daniel gave away 24 stickers\n    equation2 = Eq(daniel - 24, patrick + 10)\n    # In the end, Patrick had twice as many stickers as Daniel\n    equation3 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    # Dynamic programming approach to solve partitioning problem\n    # Create a list to store the number of ways to split different integers\n    # The list is initialized with 0s and a 1 at the start since there's 1 way to split 0\n    partition_ways = [1] + [0] * 5\n    \n    # Calculate the number of ways to split each number from 1 to 5\n    for i in range(1, 6):\n        for j in range(i, 6):\n            partition_ways[j] += partition_ways[j - i]\n    \n    # The number of ways to split 5 is the last element in the list\n    return partition_ways[5]\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n    vertical_distance = whale_depth + plane_height\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Assuming all boys are right-handed, we subtract the number of boys from the total right-handed pupils.\n    boys = total_pupils - girls\n    min_right_handed_girls = right_handed - boys\n    \n    # In case some girls are left-handed, the number of right-handed girls can't be negative.\n    # So the smallest number would be 0 if the calculated number is negative.\n    min_right_handed_girls = max(min_right_handed_girls, 0)\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # The smallest difference will be between two numbers where one is the reverse of the other\n    # with the middle digit swapped.\n    # For example: 123456789 and 987654321, swap the middle digit (5 and 5 in this case)\n    # to get 123459789 and 987651321. Now, the difference is minimal and is 10 times the\n    # difference of the middle digits.\n    num1 = int(\"123456789\")\n    num2 = int(\"987654321\")\n    middle_digit_difference = abs((num1 // 10000) % 10 - (num2 // 10000) % 10)\n    smallest_difference = 10 * middle_digit_difference\n    return smallest_difference\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    # number of skirts made by a single worker in one day\n    skirts_per_worker_per_day = 6 \n    \n    # total number of skirts made in nine days\n    total_skirts = 0\n    \n    for day in range(1, 10):\n        # number of workers increases by 1 each day\n        workers = day\n        # total number of skirts made is the number of workers times the number of skirts per worker\n        total_skirts += workers * skirts_per_worker_per_day\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    # Let's call the total number of fruits 'total_fruits'\n    # Let's call the number of lemons 'lemons'\n    # From the question, we have the following relationships:\n    # (2/3) * total_fruits = lemons + 12\n    # (1/9) * total_fruits = bananas\n    # lemons = total_fruits - ((2/3) * total_fruits) - ((1/9) * total_fruits)\n\n    # We can simplify the problem by setting up equations.\n    # total_fruits = 3 * lemons + 36 (Multiplying both sides by 3/2 to remove the fraction)\n    # total_fruits = 9 * bananas (Multiplying both sides by 9 to remove the fraction)\n    # Combining both, we get: 3 * lemons + 36 = 9 * bananas\n\n    # Since 3 * lemons + 36 is divisible by 3 and 9 * bananas is divisible by 9,\n    # 'total_fruits' must be a common multiple of 3 and 9, which is 9.\n    # Therefore, we can write 'total_fruits' as 9n, where n is an integer.\n    # And then, 3 * lemons + 36 = 9n => lemons = (9n - 36)/3\n    # We need to find the smallest integer n such that 9n - 36 is a non-negative multiple of 3 and lemons > 0\n    n = 1\n    while True:\n        lemons = (9*n - 36) / 3\n        if lemons > 0:\n            break\n        n += 1\n    \n    return int(lemons)\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n\n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    taps = 5\n    time_for_1_litre = 2  # Time in minutes\n    volume_for_1_litre = 1  # Volume in litres\n\n    # Calculate the filling rate of one tap per minute\n    rate_per_tap = volume_for_1_litre / (taps * time_for_1_litre)\n    \n    # Volume of the jug that needs to be filled\n    jug_volume = 0.5  # 500 ml is 0.5 litres\n    \n    # Calculate the time for one tap to fill 0.5 litres\n    time_for_half_litre = jug_volume / rate_per_tap\n    \n    return time_for_half_litre\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    # Let's define the number of erasers John's brother has as x\n    # Therefore, John will have x + 32 erasers\n    # According to the problem, the total number of erasers is x + (x + 32) = 246\n    # We simplify the equation to 2x + 32 = 246\n\n    # Now we solve for x\n    x = (246 - 32) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally\n\n    sally_height = ben_height + difference  # Calculate Sally's height\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = (3/5) * visitors\n    remaining_visitors = visitors - children\n    men = (1/2) * remaining_visitors\n    equation = Eq(children, 140 + men)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    # Create all permutations of the given digits\n    digits = [1, 3, 4, 6, 7, 8]\n    perms = list(permutations(digits, 3))\n\n    # Transform each permutation into a number and sort the list in descending order\n    numbers = sorted([''.join(map(str, perm)) for perm in perms], reverse=True)\n\n    # Since we want the greatest sum, we combine the two largest numbers\n    first_number = int(numbers[0])\n    second_number = int(numbers[1])\n\n    return first_number + second_number\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000 # Convert 2 litres to millilitres\n    volume_drank_ml = 350\n    volume_left_ml = total_volume_ml - volume_drank_ml\n    return volume_left_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40\n    total = 3280\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's denote the daily grass growth as G.\n    # If 20 horses can eat all grass in 12 days, they eat G/20 grass per day each.\n    # If 60 sheep can eat all grass in 24 days, they eat G/60 grass per day each.\n    # We know that 1 horse eats as much as 4 sheep: G/20 = 4 * (G/60)\n    # Therefore, 1 horse eats the same amount as 4 sheep.\n\n    # 12 horses eat 12*(G/20) per day.\n    # 88 sheep eat 88*(G/60) per day. But since 1 horse eats the same as 4 sheep:\n    # 88 sheep eat the same as 88/4 = 22 horses.\n    # So, 12 horses and 88 sheep eat as much as 12+22 = 34 horses.\n\n    # Now we just need to calculate how many days 34 horses will take to eat all the grass:\n    # If 20 horses eat all grass in 12 days, then 34 horses would eat it faster.\n    # We set up the proportion: 20 horses --> 12 days, so 34 horses --> x days.\n\n    horse_days = 20 * 12  # This is the total amount of \"horse-days\" to eat all the grass.\n    x_days = horse_days / 34  # This is the amount of days 34 horses would take.\n\n    return x_days\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    pattern = [1, 8, 16, 23, 46, 53]\n    # Find the rules between the numbers\n    differences = [pattern[i] - pattern[i - 2] for i in range(2, len(pattern))]\n    # Rule 1: Add 7 (1st number, 3rd number, 5th number, ...)\n    # Rule 2: Double the previous number and subtract 7 (2nd number, 4th number, 6th number, ...)\n    # To find the 7th number, we should use Rule 1 since 7 is odd\n    next_number = pattern[-2] + 7\n\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, pool = symbols('a b c pool')\n\n    # a + c = pool and a = 18\n    equation1 = Eq(a + c, pool)\n    # b + c = pool and b = 27\n    equation2 = Eq(b + c, pool)\n    # b = 2a, therefore a = 18 means b = 36\n    equation3 = Eq(b, 2*a)\n\n    solutions = solve((equation1.subs(a, 18), equation2.subs(b, 27), equation3.subs(a, 18)), (b, c, pool))\n\n    return solutions[pool]\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    num_matches = 20\n    goals_per_match = 2\n    \n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * goals_per_match * num_matches)\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_weight = 8\n    \n    cost_per_kilogram = total_cost / total_weight\n    \n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        # Make sure M and H are not zero as they are the most significant digits\n        if M == 0 or H == 0:\n            continue\n        num1 = M * 1000 + A * 100 + T * 10 + H\n        num2 = H * 1000 + T * 100 + A * 10 + M\n        if num1 + num2 == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start = 1\n    count = 10\n    ans = sum(start + 2 * i for i in range(count))\n    return ans\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        if str(num).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    box_cost = 19.20\n    num_balls = 16\n\n    cost_per_ball = box_cost / num_balls\n\n    return cost_per_ball\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    bill_eats = total_sweets / 2\n    remaining_sweets = total_sweets - bill_eats\n    bill_gives_away = remaining_sweets / 3\n    bill_left_with = remaining_sweets - bill_gives_away\n\n    return bill_left_with\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    number1 = 1.9\n    number2 = 1.99\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "import math\n\ndef solution():\n    # There are always 3 people (Mr Spencer and his 2 children) who will take up 3 seats.\n    # Mr Spencer must be between his two childeren, so that's really 1 unit.\n    # The three of them can be seated in 3! ways since they can change order within that unit.\n    mr_spencer_and_children_ways = math.factorial(3)\n\n    # We now have effectively 4 entities to seat: \n    # 1) Mr Spencer and children unit\n    # 2) Person A\n    # 3) Person B\n    # 4) Person C\n    # So we have 4! ways to arrange these 4 entities.\n    other_people_ways = math.factorial(4)\n\n    # Total arrangements is the product of both types of arrangements.\n    total_arrangements = mr_spencer_and_children_ways * other_people_ways\n\n    return total_arrangements\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_deduction = 2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * correct_score - wrong * wrong_deduction\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num_of_2_notes, num_of_5_notes = symbols('num_of_2_notes num_of_5_notes')\n\n    # Cindy had a total of 55 pieces of $2 and $5 notes at first\n    equation1 = Eq(num_of_2_notes + num_of_5_notes, 55)\n    \n    # She spent 1/3 of the number of $2 notes\n    spent_2_notes = num_of_2_notes / 3\n\n    # Received another 8 pieces of $5 notes from her father\n    after_receive_5_notes = num_of_5_notes + 8\n    \n    # After that, the number of $5 notes she had was 3/7 of the remaining number \n    # of notes (2-dollar notes left + 5-dollar notes)\n    remaining_notes = num_of_2_notes - spent_2_notes + after_receive_5_notes\n    equation2 = Eq(after_receive_5_notes, 3/7 * remaining_notes)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (num_of_2_notes, num_of_5_notes))\n\n    # Calculate the amount of money she had at first\n    money = solutions[num_of_2_notes] * 2 + solutions[num_of_5_notes] * 5\n\n    return money\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # the distance to the friend's house in meters\n    speed = 7      # the running speed in meters per minute\n    time = distance / speed  # time in minutes\n    return time\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # prime factorization of 24 and 52\n    # 24 = 2^3 * 3, 52 = 2^2 * 13\n    # Since B is a common factor in AB and BC, B must only include the prime factors that are in both 24 and 52\n    # Therefore, B can have at most 2^2 as its prime factors, meaning B = 4 is the maximum possible value for B.\n    # To minimize A + C, we want to maximize B, choose the largest common prime factors for B\n    # If B = 4, then A * 4 = 24 (A = 24 / 4 = 6) and 4 * C = 52 (C = 52 / 4 = 13)\n    # A + C = 6 + 13\n    return 6 + 13\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Consider A, B, and C as a single unit as they always want to be together,\n    # and E and F as another single unit. Now we have effectively 6 units to arrange.\n    # (ABC), D, G, H, (EF), I.\n    units_to_arrange = factorial(6)\n\n    # A, B, and C can be arranged within themselves in 3! ways.\n    abc_arrangements = factorial(3)\n\n    # E and F can be arranged in 2! ways.\n    ef_arrangements = factorial(2)\n\n    # The total number of arrangements is the product of all possible rearrangements.\n    total_arrangements = units_to_arrange * abc_arrangements * ef_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # Applying inverse operations in reverse order\n    result_after_operations = 18\n    subtracted_value = result_after_operations - 7  # Subtracting 7 from the result\n    original_number = subtracted_value * 3  # Multiplying by 3 to get the original number\n\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # The first odd number is 1, and each subsequent odd number is 2 more than the previous one.\n    # This follows an arithmetic sequence with the first term a1 = 1 and a common difference d = 2.\n    # Using the formula for the nth term of an arithmetic sequence: an = a1 + (n - 1) * d\n    n = 20  # We want to find the 20th odd number\n    a1 = 1  # The first term (the first odd number)\n    d = 2   # The common difference between consecutive odd numbers\n    ans = a1 + (n - 1) * d\n    return ans\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let x be the number of scarfs Diana produces each day originally.\n    # Let y be the total number of scarfs she needs to produce.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    original_days = 6\n    increased_production_days = original_days - 2\n    increased_production_per_day = 24\n\n    # The original schedule\n    equation1 = Eq(x * original_days, y)\n    # The schedule with increased daily production\n    equation2 = Eq((x + increased_production_per_day) * increased_production_days, y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, students = symbols('sweets students')\n    \n    # Equation for giving 6 sweets per student and being short of 26\n    equation1 = Eq(sweets - 6*students, -26)\n    # Equation for giving 5 sweets per student and being short of 5\n    equation2 = Eq(sweets - 5*students, -5)\n\n    # Solve the system of equations for the number of sweets and students\n    solutions = solve((equation1, equation2), (sweets, students))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original ratio\n    equation1 = Eq(boys / girls, 5 / 3)\n\n    # After 15 boys left, the ratio\n    equation2 = Eq((boys - 15) / girls, 5 / 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            for x3 in range(x2 + 1, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 16, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from math import sqrt\n    \n    # Factorize 675 to its prime factors: 675 = 3^3 * 5^2\n    # To make it a perfect square, we need to balance the powers of prime factors to even numbers\n    # For 3^3, we need one more 3 to make it 3^4\n    # For 5^2, it's already a square, so we don't need any more 5s\n    # Hence, the smallest B is 3 to make the prime factors' powers all even\n    B = 3\n    \n    # Checking if the product is indeed a perfect square\n    result = 675 * B\n    if int(sqrt(result))**2 == result:\n        return B\n    else:\n        return None\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount = 1/3\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    total_individual_price_pence = 12 * single_can_price_pence\n    savings = total_individual_price_pence - multipack_price_pence\n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for apple (a) and banana (b)\n    a, b = symbols('a b')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(3 * a + b, 32)\n    equation2 = Eq(6 * a + b, 53)\n    \n    # Solve the system of equations for a and b\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Return the cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    # The numbers between 3267 and 5120 are four-digit numbers.\n    # We need to consider three cases: numbers starting with the digit '3', '4' or '5'.\n    \n    # Case 1: Numbers starting with '3'\n    count_3 = 1 * 5 * 4 * 3  # 1 way to choose '3', then 5, 4, and 3 ways to choose the remaining digits.\n\n    # Case 2: Numbers starting with '4'\n    count_4 = 1 * 5 * 4 * 3  # 1 way to choose '4', then 5, 4, and 3 ways to choose the remaining digits.\n\n    # Case 3: Numbers starting with '5'\n    # For '5', we can choose anything from 000 to 120 for the last three digits.\n    # Count numbers between 5000 to 5120\n    count_50_51 = 2 * 5 * 4  # 2 ways to choose '0' or '1', then 5, and 4 ways to choose the remaining digits.\n\n    # Add up all counts for the final answer\n    count_total = count_3 + count_4 + count_50_51\n\n    return count_total\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the time Alan takes to paint the room on his own\n    alan = symbols('alan')\n\n    # Alan and Bob paint 1/4 of the room per hour together\n    # Bob paints 1/6 of the room per hour on his own\n    # The rate of work done by Alan will be 1/a\n    # Together, their rates of work should add up to painting the room in 1/4 hours\n\n    equation = Eq((1/4), (1/alan) + (1/6))\n\n    # Solve for Alan's time\n    solution = solve(equation, alan)\n\n    return solution[0]\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Variable to represent total weight of Adam and Ben\n    adam_plus_ben = 102\n    \n    # Variable to represent total weight of Ben and Carl\n    ben_plus_carl = 97\n    \n    # Variable to represent total weight of Adam and Carl\n    adam_plus_carl = 93\n\n    # Total weight of Adam, Ben, and Carl is the sum of the weight of Adam and Ben,\n    # Ben and Carl, and Adam and Carl, minus twice the weight of Ben\n    # This removes the extra count of Ben's weight from both pairs\n    total_weight = (adam_plus_ben + ben_plus_carl + adam_plus_carl) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percentage = 55\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    amount = principal * (1 + rate) ** time\n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10000 + 24\n    number2 = 3000 + 968\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    \n    # Determine the highest common factor (GCD) of 84 and 108\n    highest_common_factor = gcd(84, 108)\n    \n    return highest_common_factor\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_consumption = 15\n    num_weeks = 26\n    \n    total_food = weekly_consumption * num_weeks\n    \n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n    solution = solve(equation, score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    remaining_votes = total_votes - peter_votes - 22 - 27\n    # Peter should have one more vote than the sum of the votes for the other two\n    # candidates in the worst case so that he can't lose.\n    votes_needed = (22 + 27 + 1) - peter_votes\n    return votes_needed\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_after = 28\n    day_code_of_monday = 1  # Assuming Monday is represented by 1\n\n    # Calculate the remainder after dividing the number of days after by the number of days in a week\n    remainder = days_after % days_in_week\n\n    # Determine day code by adding the remainder to the day code of Monday\n    new_day_code = (day_code_of_monday + remainder) % days_in_week\n\n    # Return the corresponding code for the day\n    # as Monday + 28 days is also a Monday, we just return the code for Monday\n    return \"0001\"\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Alex and Nicholas each had\n    x = symbols('x')\n\n    # After spending, Nicholas has 6 times the money left that Alex does\n    equation = Eq((x - 13), 6 * (x - 58))\n\n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n\n    # Calculate the total initial amount of money they had together\n    total_initial_amount = 2 * x_value\n\n    return total_initial_amount\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    result = 12.35 + 8.65 + 9.8 - 2.8\n    return result\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    return 9**(3/2)\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_6 = 6 * 0.001  # Since 6 is in the thousandths place\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    total_length = 240 - 24  # Subtracting poles from both ends (12m each)\n    interval = 12\n    num_poles = total_length / interval  # Calculating number of poles\n\n    return int(num_poles)\n    \nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    pencils_plus_rulers = 52\n    pencils_minus_rulers = 10\n\n    rulers = (pencils_plus_rulers - pencils_minus_rulers) // 2\n\n    return rulers\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_numbers = len(numbers) + 1  # including x\n    total_sum = mean_value * total_numbers\n\n    x = total_sum - sum(numbers)\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    first_7_value = 7 * 10**3  # value of the first 7 in thousands\n    second_7_value = 7 * 10  # value of the second 7 in tens\n    ans = first_7_value - second_7_value\n\n    return ans\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # You want to make sure you get 4 marbles of the same color\n    # Taking the maximum possible of the other colors before that happens:\n    # 3 red, 3 yellow, and 3 blue marbles = 3 * 3 = 9 marbles.\n    # The next marble taken, regardless of the color, would ensure that you have\n    # 4 marbles of at least one color.\n\n    marbles_needed = 3 * 3 + 1\n    return marbles_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_boys = 200\n\n    total_students_ratio = boys_ratio + girls_ratio\n    girls_per_ratio = total_boys / boys_ratio\n\n    total_girls = girls_per_ratio * girls_ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since 1/3 = 0.3333...(repeating), the first 1000 digits from the right\n    # are all going to be 3.\n    digit = 3\n    count_of_digits = 1000\n\n    ans = digit * count_of_digits\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percent = 15\n    amount = 29\n\n    ans = (percent / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n\n    count = (end // step) - (start // step) + 1\n\n    return count\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_eight_books = 32\n    cost_of_one_book = cost_of_eight_books / 8\n    cost_of_twelve_books = cost_of_one_book * 12\n    return cost_of_twelve_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbol for original concentration in container A\n    original_concentration = symbols('original_concentration')\n\n    # The amount of pure water in container C will not change and remains 50 grams\n    # 10 grams of solution from container B is added to container C, making the total 60 grams\n    # Final concentration in container C is 0.5%, therefore the amount of pure water in that 10 grams is 0.995 * 10 grams\n    # The amount of pure water that came from container A to B and then to C is (0.995 * 10) - 5 grams\n    # So the concentration in container A contributed (0.995 * 10 - 5) pure water to the final mixture in container C\n\n    # Container A initially had 30 grams of pure water, we put 10 grams of solution with unknown concentration\n    # When 10 grams are taken from container A to B, 1/4 of it is the solution (with the original concentration) and 3/4 is pure water\n    # So, the amount of pure water transferred is 7.5 grams, and the solution is 2.5 grams with the original concentration\n\n    # Write the equation based on the concentration\n    # (pure water in solution added to C) + (existing pure water in C) = (amount of water in C) * (final concentration in C)\n    equation = Eq((original_concentration / 100) * 2.5 + 50, 60 * 0.005)\n\n    # Solve the equation\n    original_concentration_value = solve(equation, original_concentration)[0]\n\n    # Return the original concentration value\n    return original_concentration_value\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction_value = 2/5\n    percentage_value = 35/100\n    decimal_value = 0.604\n\n    ans = fraction_value + percentage_value + decimal_value\n    return ans\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    avg_last_four_days = 18\n    total_last_four_days = avg_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    avg_per_day = total_week / 7\n    return avg_per_day\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Create symbols for the ages of the cousins\n    age1, age2, age3 = symbols('age1 age2 age3', integer=True)\n\n    # Equation for the product of their ages today\n    eq_today = Eq(age1 * age2 * age3, 2016)\n    \n    # The product of their ages last year would be each age subtracted by 1\n    eq_last_year = Eq((age1 - 1) * (age2 - 1) * (age3 - 1), 1377)\n\n    # Solve the system of equations for the ages\n    ages = solve((eq_today, eq_last_year), (age1, age2, age3))\n\n    # Filter out negative and non-integer solutions\n    positive_ages = [age for age in ages if all(x > 0 and x.is_integer for x in age)]\n    # Assume there is only one positive integer solution\n    age1, age2, age3 = positive_ages[0]\n\n    # Calculate the product of their ages 2 years ago\n    two_years_ago_product = (age1 - 2) * (age2 - 2) * (age3 - 2)\n\n    return two_years_ago_product\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    # Total number of people is 5\n    total_people = 5\n    \n    # If two people want to stand next to each other, treat them as a single unit\n    # So we have 4 units to arrange\n    units = 4\n    \n    # Calculate the permutations for these 4 units\n    unit_permutations = math.factorial(units)\n    \n    # Now, the two people who want to stand next to each other can switch places\n    # So there are 2! ways to arrange these two people within their unit\n    swap_permutations = math.factorial(2)\n    \n    # The total number of ways they can line up is the product of unit_permutations and swap_permutations\n    total_ways = unit_permutations * swap_permutations\n    \n    return total_ways\n\nimport math\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12  # in mg\n    nickel_percent1 = 40  # in %\n    weight_metal2 = 13  # in mg\n    nickel_percent2 = 60  # in %\n\n    nickel_weight1 = (nickel_percent1 / 100) * weight_metal1\n    nickel_weight2 = (nickel_percent2 / 100) * weight_metal2\n\n    total_weight = weight_metal1 + weight_metal2\n    total_nickel_weight = nickel_weight1 + nickel_weight2\n\n    nickel_concentration_percent = (total_nickel_weight / total_weight) * 100\n\n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    mid_point = (-3 + 8) / 2\n    return mid_point\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once.\n    # Therefore, each player plays 7 matches in total as there are 7 opponents.\n    # Since every player has a different number of wins and there are no ties,\n    # the wins must be distributed starting from 0 to 7 (the maximum number of wins possible for one player).\n    # Since the champion must have the highest number of wins, \n    # we assign the maximum number of wins to the champion, which is 7.\n    \n    return 7\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    wrong_total = 3405\n    n = 1\n    while True:\n        correct_total = n * (n + 1) // 2\n        if correct_total > wrong_total:\n            break\n        n += 1\n    n -= 1  # Adjust n to the largest number before the sum exceeds the wrong total\n    correct_total = n * (n + 1) // 2\n    double_added_number = wrong_total - correct_total\n    return double_added_number\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let x be the number of chickens in each pen originally.\n    # Let y be the total number of chickens.\n    # Original situation: y = 24 * x\n    # After building 6 more pens: y = (24 + 6) * (x - 6)\n    # Set up the equation: 24 * x = (24 + 6) * (x - 6)\n    \n    # Using sympy to solve the equation\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(y, 24 * x)\n    equation2 = Eq(y, (24 + 6) * (x - 6))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    possible_values = set()\n\n    remainder = 3\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, 40 - divisor - remainder):\n            dividend = divisor * quotient + remainder\n            if dividend + divisor + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n                \n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history = total_math * ratio_history_to_math\n    return int(total_history)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the digits of the numbers for subtraction as per rules on planet Zog\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n\n    # Perform the subtraction\n    result = num1 - num2\n\n    # Reverse the result to get the final answer as it would be written on Zog\n    ans = int(str(result)[::-1])\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    # Compute the greatest common divisor of 45 and 60, which is the largest possible factor common to both numbers\n    ans = gcd(45, 60)\n\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # S_n = n/2 * (2a + (n - 1)d), where n is the number of terms, a is the first term and d is the common difference.\n\n    # Given S_6 = 64 and S_12 = 156, we can form two equations:\n    # 6/2 * (2a + 5d) = 64 => 3 * (2a + 5d) = 64 => 2a + 5d = 64 / 3\n    # 12/2 * (2a + 11d) = 156 => 6 * (2a + 11d) = 156 => 2a + 11d = 156 / 6\n\n    # From the first equation: 2a + 5d = 64 / 3 => 2a = 64 / 3 - 5d\n    # From the second equation: 2a + 11d = 156 / 6 => 2a = 156 / 6 - 11d\n\n    # Now we can solve for d by equating the expressions for 2a\n    # 64 / 3 - 5d = 156 / 6 - 11d => 128 / 3 - 156 / 6 = -6d\n    # Simplifying the equation: 128 * 2 / 6 - 156 / 6 = -6d => (256 - 156) / 6 = -6d => 100 / 6 = -6d\n    # Now solve for d: d = - (100 / 6) / -6 = 100 / 36\n\n    d = 100 / 36\n\n    # Using the expression for 2a from either of the initial equations, let's use the first one for this:\n    # 2a = 64 / 3 - 5d\n    # Plugging the value of d into the equation: 2a = 64 / 3 - 5 * (100 / 36)\n    # Simplifying: 2a = 64 / 3 - 500 / 36\n\n    a = ((64 / 3) - (5 * (100 / 36))) / 2\n\n    # Now we can find the sum of the first 18 terms using the formula for S_n:\n    # S_18 = 18/2 * (2a + (18 - 1)d)\n    # Plugging in a and d: S_18 = 9 * (2 * a + 17 * d)\n\n    S_18 = 9 * ((2 * a) + (17 * d))\n\n    return S_18\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    difference_in_age = 2\n    brother_age = ashley_age - 3 - difference_in_age\n    return brother_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n\n    # The train will travel its own length plus the length of the bridge in the time it takes to pass the bridge.\n    total_distance_covered = train_speed * time_to_pass  # meters\n    \n    train_length = 160  # meters of the train\n    bridge_length = total_distance_covered - train_length\n    \n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_score_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_score_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return int(difference)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # From 6:30 AM to 7:00 AM -> 0.5 hours jogging at 9 km/h\n    jogging_time = 0.5\n    jogging_speed = 9\n    jogging_distance = jogging_time * jogging_speed\n\n    # From 7:00 AM to 8:00 AM -> 1 hour walking at 7.5 km/h\n    walking_time = 1\n    walking_speed = 7.5\n    walking_distance = walking_time * walking_speed\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    digits = [0, 3, 4]\n    count = 0\n    for i in [3, 4]:  # The first digit cannot be 0 for a three-digit number\n        for j in digits:\n            for k in digits:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n    \n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, 63)\n    \n    solutions = solve((equation1, equation2), (games_won, games_lost))\n    \n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return common_factor * (55 - 44)\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    # Permutations of boys and teachers as x's and |'s (x|xx|)\n    boy_teacher_permutations = factorial(4)  # 4 slots for boys and teachers\n\n    # Permutations of girls as a block (xxx)\n    girl_permutations = factorial(3)\n\n    # Now place the block of girls in one of the 5 positions in boys and teachers line\n    # Girls can stand in any of the 5 places amongst the 4 slots\n    girl_positions = 5\n\n    # Permutations for 3 teachers\n    teacher_permutations = factorial(3)\n\n    # Calculate the total permutations\n    total_permutations = boy_teacher_permutations * girl_permutations * girl_positions * teacher_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals_initial, cows_initial, goats_initial = symbols('total_animals_initial cows_initial goats_initial')\n\n    # 65% of the animals in a farm were cows\n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)\n    # The rest were goats (so 35%)\n    equation2 = Eq(goats_initial, total_animals_initial - cows_initial)\n\n    # When 240 more animals (cows+goats) were added, the percentage of cows becomes 65% + 20%.\n    # So we have cows_initial + 240 * 85% = new count of cows\n    equation3 = Eq(cows_initial + 240 * 0.85, 0.85 * (total_animals_initial + 240))\n    # Number of goats doubled, so 2*goats_initial = new count of goats\n    equation4 = Eq(2 * goats_initial, 0.15 * (total_animals_initial + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals_initial, cows_initial, goats_initial))\n\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Calculate the area of Triangle X (equilateral triangle)\n    area_x = (3**2 * (3**(0.5))) / 4\n\n    # Calculate the area of Triangle Y (equilateral triangle)\n    area_y = (9**2 * (3**(0.5))) / 4\n\n    # Calculate how many times Triangle X fits into Triangle Y\n    ans = area_y / area_x\n\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    group_size = 2\n    return comb(num_students, group_size)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    product1 = 8 * 9 * 10\n    product2 = 1 * 2 * 3\n    difference = product1 - product2\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 1 + 1  # +1 for the option of not choosing the soup\n    desserts = 2 + 1  # +1 for the option of not choosing a dessert\n    \n    combinations = appetisers * main_courses * soups * desserts\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')\n    equation1 = (x % 8) - 3\n    equation2 = (x % 9) - 1\n    for possible_solution in range(100, 200):\n        if solve(equation1.subs(x, possible_solution)) == 0 and solve(equation2.subs(x, possible_solution)) == 0:\n            return possible_solution\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # Arithmetic sequence: a_n = a_1 + (n-1)d\n    # where a_1 is the first term, n is the number of terms, and d is the common difference\n    \n    a_1 = 6  # First term\n    d = 5    # Common difference between terms\n\n    # Last term calculation: a_n = a_1 + (n-1)d\n    # for n terms, we find n such that a_n = 41\n    a_n = 41\n    \n    # Number of terms: n = (a_n - a_1) / d + 1\n    n = (a_n - a_1) // d + 1\n    \n    # Sum of arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    sum_seq = n * (a_1 + a_n) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # Define the weight ratio\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    # Calculate how many chickens weigh as much as 1 dog\n    chickens_per_dog = dog_to_rabbit * rabbit_to_chicken\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue_balls = symbols('blue_balls', integer=True)  # Define the unknown number of blue balls\n    \n    # Total number of ways to choose 2 balls out of 4 red and blue_balls blue\n    total_ways = (4 + blue_balls) * (3 + blue_balls - 1) / 2\n    \n    # Number of ways to choose 2 red balls out of 4\n    red_ways = 4 * 3 / 2\n    \n    # Probability of choosing 2 red balls\n    prob = Eq(red_ways / total_ways, 2/7)\n    \n    # Solve the number of blue balls\n    blue_balls_solution = solve(prob, blue_balls)\n    \n    # Ensuring that the solution for the number of blue balls is positive and an integer\n    blue_balls_count = next(\n        s for s in blue_balls_solution if s.is_integer and s > 0\n    )\n    \n    return blue_balls_count\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, danny = symbols('mike danny') # Mike's and Danny's hourly rates\n\n    # If they work together, they finish in 10 hours\n    equation1 = Eq(mike + danny, 1 / 10)\n\n    # Mike works 8 hours, then Danny works 13 hours to finish the job\n    equation2 = Eq(8 * mike + 13 * danny, 1)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (mike, danny))\n\n    # How long it will take for Danny alone to finish the job\n    danny_time_to_finish = 1 / solutions[danny]\n\n    return danny_time_to_finish\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n\n    # Since the product of digits is 2^27, we can only have the digits 2, 4, 8.\n    # We need to find the distribution of these digits so that their product is 2^27.\n    # 2 = 2^1, 4 = 2^2, 8 = 2^3.\n    # Let x be the number of 2s, y be the number of 4s, and z be the number of 8s.\n    # We then have x + 2y + 3z = 27 and also x + y + z = 10, as we need 10 digits in total.\n\n    count = 0\n\n    # Enumerate all possible combinations of x, y, z that satisfy both equations.\n    for x in range(28):\n        for y in range(14):\n            for z in range(10):\n                if x + y + z == 10 and x + 2*y + 3*z == 27:\n                    # Arrange these digits in 10 positions (multinomial coefficient)\n                    # Since x,y,z can be 0, we have to prevent division by zero in factorial calculation.\n                    ways = factorial(10) // (factorial(x)*factorial(y)*factorial(z))\n                    count += ways\n\n    return count\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let's represent the initial total number of slices as x.\n    # According to the problem, 3/5 of the cake was eaten, 2 slices were given to friends, and 4 slices were left.\n    # This means that 3/5 * x + 2 + 4 = x.\n    # We can convert this to 3/5 * x = x - 6, since 2 + 4 = 6.\n    \n    slices_eaten = 3/5\n    slices_given_to_friends = 2\n    slices_left = 4\n    \n    # Now we need to solve for x:\n    # 3/5 * x = x - 6\n    # First, let's move all terms involving x to the left side of the equation:\n    # 3/5 * x - x = -6\n    # To combine like terms, find a common denominator, which is 5:\n    # (3 * x - 5 * x) / 5 = -6\n    # Combine the terms:\n    # -2 * x / 5 = -6\n    # Multiply both sides by -5/2 to solve for x:\n    # x = -6 * (-5/2)\n    # x = 30 / 2\n    # x = 15\n    \n    initial_slices = (-6) * (-5/2)\n    \n    return int(initial_slices)\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1st_3 = 3 * 1000  # The first 3 is in the thousands place\n    place_value_2nd_3 = 3 * 100000  # The second 3 is in the hundred thousands place\n    diff = abs(place_value_2nd_3 - place_value_1st_3)\n    return diff\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n\n    # Applying the Pigeonhole Principle where n = total_pencils and m = total_cases\n    # and we need to find the minimum number in one of the boxes, ceil(n/m)\n    min_pencils = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    # Define the custom operation based on the provided definition\n    def custom_op(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    # We need to find m such that m ⊕ 10 = 66\n    # Iterate over possible values of m to find the correct one\n    for m in range(66):  # Given that m ⊕ 10 = 66, m must be less than 66\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # For the smallest number of red squares, we need to distribute the digits in such a way\n    # that as many different digits as possible appear 4 times each, while the rest appear less.\n    # There are 10 digits (0-9), and to minimize the number of red squares we can use 9 out of\n    # those digits and distribute them 4 times each (4 * 9 = 36 squares) and the remaining\n    # 100 - 36 = 64 squares will be filled with the 10th digit, which will then be painted red.\n    # Therefore, the smallest number of red squares is 64.\n    red_squares = 100 - (9 * 4)\n    return red_squares\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent = 2.89\n    received = 4/5\n\n    final_amount = initial_amount - spent + received\n\n    return final_amount\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54  # Side length of the square board in centimeters\n    interval = 3  # Interval in centimeters\n    # The number of chess pieces per side is the side_length divided by interval, \n    # minus 1 because the corners are counted twice.\n    chess_per_side = side_length // interval + 1\n    # The total number of chess pieces is 4 times the number per side \n    # minus 4 to account for the corners that were counted twice.\n    total_chess = 4 * chess_per_side - 4\n    return total_chess\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for num in range(1000, 10000):\n        num_str = str(num)\n        if num_str[0] == num_str[1] and num_str[2] == num_str[3] and int(num**0.5)**2 == num:\n            return num\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # difference between consecutive terms\n\n    # We want to find n such that 50 + (n - 1) * difference < 0\n    # We rearrange the inequality to n > (0 - 50) / difference + 1\n    threshold = (0 - first_term) / difference + 1\n\n    return int(threshold)  # The number of terms has to be an integer\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    n = 1\n    factorial_zeros = 0\n    while factorial_zeros <= 28:\n        n += 1\n        i = n\n        while i % 5 == 0:\n            factorial_zeros += 1\n            i /= 5\n            if factorial_zeros >= 28:\n                break\n    return n - 1\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    return (3 * m - 1) + m\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    distance_left = 130\n    tim_speed = 56\n    bob_speed = 74\n    combined_speed = tim_speed + bob_speed\n\n    distance_covered = initial_distance - distance_left\n    time_taken = distance_covered / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    advance_by_day = 3\n    slides_by_night = 1\n    distance_per_day = advance_by_day - slides_by_night\n    days = 0\n    climbed_distance = 0\n    \n    while climbed_distance < total_distance - advance_by_day:\n        climbed_distance += distance_per_day\n        days += 1\n    \n    days += 1  # The final day when the snail climbs out\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    result = 6 - 4.226\n    return result\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        if len(set(year_str)) == 4:  # all digits must be unique\n            digits = [int(d) for d in year_str]\n            sorted_digits = sorted(digits)\n            if sorted_digits[1] - sorted_digits[0] == 1 and \\\n               sorted_digits[2] - sorted_digits[1] == 1 and \\\n               sorted_digits[3] - sorted_digits[2] == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean = 5\n    num_of_numbers = 5\n    sum_of_numbers = mean * num_of_numbers\n    \n    known_numbers = [3, 4, 6, 10]\n    sum_of_known_numbers = sum(known_numbers)\n    \n    fifth_number = sum_of_numbers - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_sequence = \"8354\"\n    sum_of_digits = 0\n    total_digits = 84\n\n    for i in range(total_digits):\n        sum_of_digits += int(recurring_sequence[i % len(recurring_sequence)])\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    average_distance = (eddie + jenny + jason) / 3\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Let t be the interval between strikes\n    # The total duration can be described as: (6 - 1) * t + 6 * 3 = 43 seconds\n    # Solving for t gives us the interval between strikes.\n    # Then, if it strikes 12 times, the duration would be: (12 - 1) * t + 12 * 3\n\n    t = (43 - 6 * 3) / (6 - 1)  # Calculating the interval between strikes\n    duration_for_12_strikes = (12 - 1) * t + 12 * 3  # Total duration for 12 strikes\n\n    return int(duration_for_12_strikes)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Since each kid needs to get at least one pen, we give one pen to each kid.\n    # This leaves us with 20 - 6 = 14 pens to divide among 6 kids.\n    remaining_pens = 20 - 6\n    kids = 6 - 1  # Since we're using stars and bars, we need n - 1 bars to divide the pens.\n\n    # Now we use the stars and bars method which is (n+k-1) choose (k-1)\n    # Here remaining_pens are the stars and kids are the bars.\n    ans = nCr(remaining_pens + kids, kids)\n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    total_person_hours = 6 * 15\n    people_needed = total_person_hours / 2\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes / 60  # converting minutes to hours\n    \n    return total_time_hours\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students_left_before = 5\n    students_joined = 18\n    \n    # Start with the smallest possible square (1x1) and test larger squares\n    m = 1\n    while True:\n        original_students = (m * m) + students_left_before\n        new_students = original_students + students_joined\n\n        # Check if the new total forms a perfect square\n        if (new_students**0.5).is_integer():\n            break\n        m += 1\n    \n    return original_students\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Excluding leading zeros\n    non_zero_three_digit_numbers = 9 * 9 * 9  # No zeros allowed at all\n    at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30  # speed of the ball in meters per second\n    \n    # Kinetic energy formula: KE = 1/2 * mass * speed^2\n    kinetic_energy = (1/2) * mass * speed**2\n    \n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1) and (number % 4 == 1) and (number % 5 == 1) and (number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n    \n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # Given clues:\n    # The ones place is the greatest odd number which is 9.\n    # The hundreds place and the tens place should add up to 13.\n    # The number should be the smallest 4-digit number.\n    \n    # Start with the smallest 4-digit number with distinct digits and the ones place is 9\n    for hundreds in range(10):\n        for tens in range(10):\n            if hundreds != tens and hundreds + tens == 13:  # The sum should be 13 and digits should be different\n                # The smallest digit goes to the thousands place.\n                number = min([1, 2, 3, 4, 5, 6, 7, 8, 0]) * 1000 + hundreds * 100 + tens * 10 + 9\n                # Ensure all digits are different\n                if len(set(str(number))) == 4:\n                    return number\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let x be the distance Jerry drives\n    # Let 1.5x be the distance Kevin drives\n    # The sum of their distances is 225 miles\n    # So, x + 1.5x = 225\n    # Solving for x gives us the distance Jerry has driven\n    \n    # 2.5x = 225\n    x = 225 / 2.5\n    return x\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # Number of pieces is one more than number of cuts\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    num, _ = solve_congruence(*congruences)\n    while num < 300:\n        ans = num\n        num += 5 * 6 * 7\n    return ans\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    bounces = 0\n    current_height = 1  # 100%\n    desired_height = 0.25  # 25%\n\n    while current_height >= desired_height:\n        current_height *= 0.75  # ball bounces to 75% of its previous height\n        bounces += 1\n\n    return bounces - 1  # Subtracting 1 because we want the number of bounces before it's less than 25%\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    # This is an arithmetic sequence where a1 = 5, d = 3, and an = 20\n    a1 = 5\n    d = 3\n    an = 20\n    \n    # The number of terms n can be found by the formula: n = (an - a1) / d + 1\n    n = (an - a1) // d + 1\n    \n    # The sum of the arithmetic sequence can be found by the formula: S = n/2 * (a1 + an)\n    S = n * (a1 + an) // 2\n    \n    return S\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    num_pictures = 10\n    # Subtract the width of the first and last picture since they are on the extremes\n    remaining_space = total_width - 2 * picture_width \n    # Calculate the space between pictures by dividing the remaining space by the number of gaps\n    gaps = num_pictures - 1\n    space_between_pictures = remaining_space / gaps\n    # Calculate the distance from the left wall to the third picture's centre\n    # The third picture is after two gaps from the left wall\n    distance_from_left = picture_width + 2 * space_between_pictures  \n    # Centre of the wall\n    centre_of_wall = total_width / 2\n    # Distance from the centre of the wall to the centre of the third picture\n    distance_from_centre = distance_from_left - centre_of_wall\n\n    return distance_from_centre\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    diff_in_age = 40 - doris_age\n    \n    uncle_age = doris_age + diff_in_age\n    \n    return uncle_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    price_for_one_banana_and_one_apple = solutions[banana] + solutions[apple]\n\n    return price_for_one_banana_and_one_apple\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest_amount = 225\n    annual_interest_rate = 2.25 / 100\n\n    principal = interest_amount / annual_interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for number in range(1, 16):\n        if 5 < number < 8 and number + 8 == 15:\n            return number\n    return None\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    round_off = 100\n    estimated_price = 125000\n    # The actual price could be from $124,950 to $125,049 to round to $125,000\n    lowest_possible_price = estimated_price - (round_off // 2)\n    ryna_thought = 125001\n    return ryna_thought == lowest_possible_price, lowest_possible_price\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Jerry had\n    original_money = symbols('original_money')\n\n    # Define the equations based on the problem statement\n    # After buying the watch, Jerry has original_money - 200 left\n    # After buying the shirt, Jerry has original_money - 200 - (2/7)(original_money - 200) left\n    # This remaining amount is stated to be (1/3) of the original amount\n    equation = Eq(original_money - 200 - (2/7) * (original_money - 200), original_money / 3)\n\n    # Solve the equation for the original amount of money\n    solution = solve(equation, original_money)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial as f\n    \n    # Since Tom and Harry must stand together, we can treat them as a single unit.\n    # There are now 6 units (5 individual students + 1 Tom-Harry unit) to arrange, \n    # and Ronda must be on the furthest right.\n\n    # First, arrange 5 units excluding Ronda:\n    arrangements_without_Ronda = f(5)\n    \n    # Since Tom and Harry can switch places within the Tom-Harry unit,\n    # we need to count those arrangements as well:\n    tom_harry_switch_arrangements = f(2)\n    \n    # Now, multiply the number of arrangements without Ronda with \n    # the number of ways Tom and Harry can switch places:\n    total_arrangements = arrangements_without_Ronda * tom_harry_switch_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest = 1.15763  # 5% compounded yearly for 3 years\n    second_interest = 1.1664  # 8% compounded yearly for the last 2 years\n\n    # Calculate the investment after 3 years with the first interest rate\n    amount_after_first_period = initial_investment * first_interest\n\n    # Calculate the investment after 2 more years with the second interest rate\n    final_amount = amount_after_first_period * second_interest\n\n    # Round the result to the nearest tenth\n    ans = round(final_amount, 1)\n\n    return ans\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_sum = 4 * 89\n    desired_average = 95\n    test_score = 100\n    \n    tests_taken = 4\n    while True:\n        tests_taken += 1\n        if (current_sum + test_score) / tests_taken >= desired_average:\n            return tests_taken - 4\n        current_sum += test_score\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Calculate time taken for each section of the race\n    time_first_section = 540 / 9  # Time = Distance / Speed\n    time_middle_section = 300 / 6\n    distance_last_section = 1000 - 540 - 300  # Total distance - first two sections\n    time_last_section = distance_last_section / 10\n\n    # Total time is the sum of all three sections\n    total_time = time_first_section + time_middle_section + time_last_section\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n\n    uncle_current_age = doris_age + age_difference\n    \n    return uncle_current_age\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    d = symbols('d')  # distance from P to Q\n    v = symbols('v')  # usual speed\n\n    # Using the first condition\n    # time = distance / speed\n    # (d / v) - (d / (v + 0.20*v)) = 1 hour\n    equation1 = Eq(d/v - d/(1.20*v), 1)\n\n    # Using the second condition\n    # 200 km at usual speed + (d - 200) km at increased speed\n    # (200 / v) + (d - 200) / (v + 0.25*v) = (d / v) - 12/60 hours\n    equation2 = Eq(200/v + (d - 200)/(1.25*v), d/v - 12/60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, v))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    performances = 18  # initial performances by each class\n    extra_performances = 2  # Lia and Liz each prepares an extra performance\n    total_performances = performances + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # number of sheep and cows\n    sheep, cows = symbols('sheep cows', integer=True)\n\n    # equations based on the problem\n    equation1 = Eq(sheep, 5/7 * cows)\n    equation2 = Eq(sheep + 21, 4/3 * (cows - 7))\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    equation1 = Eq(2*book + 3*pencil_box, 42)\n    equation2 = Eq(2*book + 6*pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"08:30\", time_format)\n    end_time = datetime.strptime(\"09:25\", time_format)\n    \n    duration = (end_time - start_time).seconds // 60\n\n    return duration\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_time = 6  # A can complete the job in 6 days\n    B_time = A_time * 2  # B's efficiency is half of A's\n\n    A_rate = 1 / A_time  # A's work rate per day\n    B_rate = 1 / B_time  # B's work rate per day\n\n    combined_rate = A_rate + B_rate  # Combined work rate of A and B\n\n    time_to_complete = 1 / combined_rate  # Total time to complete the job together\n\n    return time_to_complete\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    current_sum_ages = 22\n    sum_ages_target = 30\n    years_until_target = sum_ages_target - current_sum_ages\n    return years_until_target\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    salary_per_month = 7.65\n    debt = 2.5\n\n    months_needed = debt / salary_per_month\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # cost in cents\n    mamee_cost = haribo_cost - 30  # Mamee cost 30 cents less than Haribo\n    big_jelly_cost = mamee_cost * 6  # Big packet of jelly cost 6 times Mamee\n    return big_jelly_cost / 100  # Convert cents to dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18\n    denominator = 36\n    target_denominator = 32\n\n    target_numerator = (numerator / denominator) * target_denominator\n\n    return target_numerator\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_bricks = 4\n    before_joel = (remaining_bricks + 2) * 2\n    before_valerie = (before_joel + 3) * 2\n    initial_bricks = (before_valerie + 1) * 2\n    return initial_bricks\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total candies by 'total'\n    total = symbols('total')\n\n    # According to the problem, Anna = 3/8 of total, Belle = 1/4 of total\n    # Cathy and Dawn share the remaining which is 1 - 3/8 - 1/4 of total\n    # Anna and Belle received 90 more candies than Cathy and Dawn\n    # Equation: (3/8 + 1/4) * total - (1 - 3/8 - 1/4) * total = 90\n\n    equation = Eq((3/8 + 1/4) * total - (1 - (3/8 + 1/4)) * total, 90)\n\n    # Solve the equation to find the total number of candies\n    solutions = solve(equation, total)\n\n    # As per the problem's requirement we are returning the total candies\n    return solutions[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fishballs_initial = symbols('fishballs_initial')\n    # Sold 3/4 in the morning, leaving 1/4\n    remaining_after_morning = fishballs_initial * (1 - 3/4)\n    # Sold 1/3 of the remaining in the afternoon, leaving 2/3\n    remaining_after_afternoon = remaining_after_morning * (2/3)\n    # Made another 506 fishballs, which is twice the number he made at first\n    equation = Eq(remaining_after_afternoon + 506, 2 * fishballs_initial)\n    \n    solution = solve(equation, fishballs_initial)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Define the equations based on the problem\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate/6 + 2*vanilla/3 + 7*blueberry/9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5 / 8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    ratio_boys = 2\n    ratio_girls = 7\n    total_ratio = ratio_boys + ratio_girls\n\n    boys = 14\n    total_students = (boys / ratio_boys) * total_ratio\n\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    # Given values\n    strawberry_cake_cost = 3\n    marble_cake_cost = strawberry_cake_cost + 2\n    cheese_cake_cost = 3 * marble_cake_cost\n\n    # Price of 2 cheese cakes\n    cost_two_cheese_cakes = 2 * cheese_cake_cost\n    return cost_two_cheese_cakes\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    remainder, modulus = solve_congruence(*congruences)\n    number = remainder\n    while number < 400:\n        number += modulus\n    return number if number < 500 else None\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    green_apples = pigs * green_apples_per_pig\n    red_apples = pigs * red_apples_per_two_pigs\n\n    total_apples = green_apples + red_apples\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    sunflowers_grown = total_seeds - died_seeds\n\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    pocket_money = 100\n    money_changes = [10, -8]  # Deposit 10, spend 8\n    \n    # Use modulo to determine the index in money_changes for each day\n    for day in range(1, total_days + 1):\n        change_index = (day - 1) % len(money_changes)\n        pocket_money += money_changes[change_index]\n    \n    return pocket_money\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n    \n    # Equations based on the provided information\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    # Calculate the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_result = 54 * 4 - 178\n    original_number = final_result / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    apples = [42, 41, 30, 29, 38]\n    average_apples = sum(apples) / len(apples)\n    return average_apples\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4*3*2*1 # Total ways without restriction\n    \n    # Ways where Claire and Tony sit across each other\n    # Fix Claire's position, then Tony has only 1 choice (across Claire), \n    # The remaining two have 2 choices to sit (2*1 ways)\n    restricted_ways = 1*1*2*1\n    \n    # Subtract the restricted ways from the total ways\n    ans = total_ways - restricted_ways\n    return ans\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n    \n    # Set up the equations\n    # Marry and Alexis had stickers in the ratio 7:5\n    equation1 = Eq(marry/alexis, 7/5)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # Charlotte's stickers increased by 80%\n    # Charlotte_final = Charlotte_initial + 0.2 * Marry + 0.2 * Alexis\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.2 * marry + 0.2 * alexis)\n    \n    # Charlotte_final is 1.8 times Charlotte_initial\n    equation3 = Eq(charlotte_final, 1.8 * charlotte_initial)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    # Marry - 20% of Marry = Charlotte_final + 20\n    # simplify Marry * 0.8 = Charlotte_final + 20\n    equation4 = Eq(0.8 * marry, charlotte_final + 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_initial, charlotte_final))\n    \n    # Select the solution for Alexis which should be positive\n    alexis_stickers = solutions[alexis]\n\n    return alexis_stickers\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original speed as v (in km/h) and the distance as d (in km)\n    v, d = symbols('v d')\n\n    # The original situation\n    # v * t = d\n    # So we have:\n    equation1 = Eq(v * 8, d)\n\n    # The situation when she increases the speed by 5 km/h\n    # (v + 5) * (t - 1) = d\n    # Since she wants to arrive 1 hour earlier, t will be 7 hours instead of 8\n    equation2 = Eq((v + 5) * 7, d)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (v, d))\n\n    # Extract the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    permuted_numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return permuted_numbers[4]\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 2 pears = 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    # Emily's purchase: 1 banana + 1 pear = 62p\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    # The equation translates to: circle * 3 + 17 = 36 + 2.\n    # We can solve for the circle's value by rearranging and simplifying the equation.\n    circle = (36 + 2 - 17) / 3\n    return circle\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    # We want to find the minimum number of test tubes needed such that\n    # each bottle can be uniquely identified by a combination of tests.\n    # This is a classic binary representation problem where each bottle\n    # can be represented by a binary number and each test tube corresponds\n    # to a bit position. The number of test tubes needed is the number\n    # of bits required to represent the number of bottles in binary.\n    \n    import math\n    num_bottles = 1000\n    ans = int(math.ceil(math.log(num_bottles, 2)))\n    return ans\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs_initial = 10\n    total_distance = 36\n    chairs_removed = 3\n    total_chairs_final = total_chairs_initial - chairs_removed\n\n    # Initially, the number of spaces between chairs is one less than the number of chairs\n    initial_spaces = total_chairs_initial - 1\n\n    # After removing chairs, the number of spaces between chairs remains the same\n    final_spaces = initial_spaces\n\n    # The spacing between each chair after removing 3 chairs\n    spacing_after_removal = total_distance / final_spaces\n\n    return spacing_after_removal\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    for x1 in range(2, 10):\n        for x2 in range(2, 10):\n            x3 = 10 - (x1 + x2)\n            if x3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2')\n    right_angles_sum = 90 + 90\n    equation = Eq(angle1 + 5 * angle1 + right_angles_sum, 360)\n\n    solutions = solve(equation, (angle1, angle2))\n\n    largest_angle = 5 * solutions[angle1]\n\n    return largest_angle\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Base conditions: number of ways to reach steps 1, 2, 3, 4\n    ways = [1, 2, 4, 7]  # 4 is not reachable directly but required for next calculations\n\n    # Avoiding the 5th step, we pre-calculate ways to reach step 6\n    ways.append(ways[2] + ways[1] + ways[0])  # 6th step can be reached from 1, 2 or 3rd step\n\n    # Calculate the number of ways for the remaining steps, excluding the 5th step\n    for i in range(6, 10):\n        ways.append(ways[i - 1] + ways[i - 2] + ways[i - 3] - ways[i - 5])\n\n    return ways[-1]\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            pair = 7007 // i\n            if pair % 7 == 0 and 10 <= pair <= 99:\n                factors.append((i, pair))\n    if len(factors) != 1:\n        return \"Invalid number of factor pairs found\"\n    return sum(factors[0])\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n\n    median_index = len(sequence) // 2\n\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n\n    return median\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    \n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                total_apples = small_boxes * 5 + medium_boxes * 7 + large_boxes * 10\n                if total_apples == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n                    \n    return min_boxes\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the equation\n    x = symbols('x')\n\n    # Set up the equation x/3 + 6/3 = 5\n    equation = Eq(x/3 + 6/3, 5)\n\n    # Solve the equation\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    time_hours = 15 / 60  # converting 15 minutes to hours\n    distance_miles = miles_per_hour * time_hours\n    distance_kilometers = distance_miles * 1.60934  # conversion factor from miles to kilometers\n    return distance_kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n    \n    equation1 = Eq(frogs_begin - dragonflies_begin, 9)\n    equation2 = Eq(frogs_begin - (11-10), dragonflies_begin + (11-10))\n\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # When there's one entrance\n    total_check_in_one_entrance = check_in_per_entrance * 16\n    # Total visitors in the line after 16 min is 0, which means total visitors arrived is equal\n    # to the total check-in by one entrance.\n    total_visitors_arrived = visitors_per_minute * 16\n\n    # When there are two entrances\n    total_check_in_two_entrances = total_visitors_arrived  # number of visitors doesn't change\n    time_with_two_entrances = total_check_in_two_entrances / (2 * check_in_per_entrance)\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    advance_per_day = 5\n    slide_per_night = 3\n    current_distance = 0\n    days = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += advance_per_day\n        \n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n    \n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - cookies_given_away\n    number_of_bottles = cookies_left / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for cookies and muffins\n    cookies, muffins = symbols('cookies muffins')\n    \n    # Equation representing the number of cookies baked\n    eq1 = Eq(cookies, muffins + 24)\n    # Equation representing the total left after selling\n    eq2 = Eq((3/4) * muffins + (5/8) * cookies, 74)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (cookies, muffins))\n    \n    # Solution for the number of cookies initially baked\n    return solution[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 25 == 0:\n            return number\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        if (1+2+3+A+4+5+6+A+7+8+9+A) % 9 == 0 and A % 5 != 0 and A % 2 == 0:\n            return A\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Define costs for Richard's expenses\n    metro_cost = 5  # Cost of metro both ways\n    coffee_cost = 3  # Cost of a cup of coffee each\n    ticket_cost = 7  # Cost of entry to the game\n\n    # Calculate total available money after Richard's own expenses\n    remaining_money = 40 - metro_cost - coffee_cost - ticket_cost\n    \n    # Calculate the cost per friend\n    cost_per_friend = metro_cost + coffee_cost + ticket_cost\n    \n    # Calculate the maximum number of friends Richard can treat\n    max_friends = remaining_money // cost_per_friend\n    \n    return max_friends\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is true, then all statements are true, which is a contradiction.\n    # If statement 2 is true, then one of the statement below is correct, which is a contradiction.\n    # If statement 3 is true, then it would imply either 1 or 2 is true, which we've \n    #     already established leads to a contradiction.\n    # If statement 4 is true, then all statements above are correct, which is again a contradiction.\n    # If statement 5 is true, then this implies that none of the statements are correct, \n    #     this is the only scenario that doesn't contradict itself, as one and only one statement is true.\n\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of coins\n    x = symbols('x')\n    \n    # One quarter showing heads before flipping\n    heads_before = x / 4\n    # After flipping two more, one third showing heads\n    heads_after = (x / 3)\n    # Equation representing the relationship\n    equation = Eq(heads_before + 2, heads_after)\n    \n    # Solve the equation for the number of coins\n    total_coins = solve(equation, x)\n    \n    return total_coins[0]\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let's denote the time taken by the driver to reach the destination as 't' minutes.\n    # Since the speed ratio is 13:2, and they cover the same distance,\n    # the time ratio will be the inverse, which is 2:13.\n    # This means the cyclist will take 13/2 times longer to cover the distance.\n\n    # Let 't' be the time taken by the driver and 't_cyclist' be the time taken by the cyclist.\n    # From the problem we have:\n    # t_cyclist = t + 143\n\n    # Using the inverse ratio of speed for time,\n    # t_cyclist / t = 13 / 2\n\n    # By substituting t_cyclist\n    # (t + 143) / t = 13 / 2\n    # 2*(t + 143) = 13t\n    # 2t + 286 = 13t\n    # 286 = 13t - 2t\n    # 286 = 11t\n    # t = 286 / 11\n\n    t = 286 / 11\n    return t\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    # Number of trains, cars, and flights available\n    trains = 4\n    cars = 3\n    flights = 2\n    \n    # Using the law of addition to calculate the total number of ways\n    total_ways = trains + cars + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    road_length = 500\n    days_to_pave = 5\n    meters_per_day = road_length / days_to_pave\n    return meters_per_day\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "def solution():\n    from math import factorial\n    \n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n-r))\n    \n    # There are 6 \"slots\" around the 5 singing shows where 3 comedy\n    # shows can take position. See this as S (singing) and _ (slots):\n    # _ S _ S _ S _ S _ S _\n    \n    # We choose 3 out of 6 slots for comedy\n    # S can be arranged 5! ways and C can be arranged 3! ways\n    total_arrangements = nCr(6, 3) * factorial(5) * factorial(3)\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    recurring_sequence = '23456' * 420  # 5 repeating digits * 420 times gives 2100 digits\n    sum_of_digits = sum(int(digit) for digit in recurring_sequence)\n    return sum_of_digits\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n    middle_value = numbers[middle_index]\n    return middle_value\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    original_number = (12 + 9) * 2\n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for i in range(41, 60):\n        if i % 4 == 2 and i % 6 == 2:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    \n    # Since rotations are considered the same, we fix one person's position \n    # and arrange the remaining 5 people around the table.\n    num_people = 5\n\n    # The number of ways to arrange the remaining 5 people\n    # is the number of permutations of these 5 people.\n    ans = factorial(num_people)\n\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    smallest_even_number = float('inf')\n    \n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0: # check if the last digit is even\n            num = int(''.join(map(str, perm)))\n            smallest_even_number = min(smallest_even_number, num)\n            \n    return smallest_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    s = symbols('s')  # number of steps in the escalator\n    # When Peter walks at 1 step per second, escalator moves s - 10 steps in 10 seconds\n    # When Peter walks at 2 step per second, escalator moves s - 16 steps in 8 seconds\n    \n    # Set the distance (in steps) that the escalator travels as equal for both scenarios\n    equation = Eq((s - 10) / 10, (s - 16) / 8)\n    \n    # Solve the equation for number of steps\n    steps = solve(equation, s)[0]\n    \n    return steps\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    total_quarters = total_dollars * quarters_in_one_dollar\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    # Total amount spent by Theo\n    total_spent = 10 * 100 - 388  # convert pounds to pence\n\n    # Amount spent on the chocolate bar\n    chocolate_cost = 72\n\n    # Calculate amount spent on balloons by subtracting chocolate cost\n    balloons_spent = total_spent - chocolate_cost\n\n    # Cost of each balloon\n    balloon_cost = 20\n\n    # Calculate the number of balloons\n    num_balloons = balloons_spent // balloon_cost\n\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    numbers = [3, 4, 10]\n    ans = reduce(lcm, numbers)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n    result = (percentage / 100) * total_length\n    return result\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    max_students_per_kayak = 4\n    \n    # Calculate the minimum number of kayaks needed\n    kayaks_needed = (students + max_students_per_kayak - 1) // max_students_per_kayak\n    \n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n\n    spent_money = total_money * spent_fraction\n    remaining_money = total_money - spent_money\n\n    price_per_cupcake = spent_money / (5 + (6 * 2 / 3))\n    max_cupcakes = remaining_money // price_per_cupcake\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    expression1 = 4 + (2 * 13)\n    expression2 = (4 + 2) * 13\n    ans = expression2 - expression1\n\n    return ans\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Since the ages are consecutive, let the age of the youngest dwarf be y.\n    # The ages of the youngest three are then y, y+1, y+2.\n    # Their sum is said to be 42.\n\n    # Sum of the ages of the youngest three:\n    # y + (y+1) + (y+2) = 42\n    # 3y + 3 = 42\n    # 3y = 42 - 3\n    # 3y = 39\n    # y = 13\n\n    # Age of the youngest dwarf\n    youngest_age = 39 // 3\n\n    # The ages of the dwarfs form an arithmetic progression:\n    # y, y+1, y+2, y+3, y+4, y+5, y+6\n    # We want the sum of the oldest three ages:\n    # (y+4) + (y+5) + (y+6)\n    # 3y + 15\n\n    # Sum of the ages of the oldest three\n    sum_oldest_ages = 3 * youngest_age + 15\n\n    return sum_oldest_ages\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [2, 3, 5]\n    perm = permutations(numbers, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Let x be the number of pieces of paper that were cut into three parts.\n    # Initially, there were 10 pieces.\n    # After cutting x pieces into three parts each, we gain 2 extra pieces per paper cut since each paper is now 3 pieces instead of 1.\n    # So the equation is: 10 - x + 2x = 16\n    # Therefore, x = 16 - 10\n    x = 16 - 10\n    \n    # The solution gives us the number of pieces that were cut into three parts.\n    return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Given that 6 workers can produce 120 parts in 4 minutes\n    # Find the production rate per worker per minute\n    parts_per_worker_per_minute = 120 / (6 * 4)\n    \n    # Given that 3 workers can produce the parts for a machine in 10 minutes\n    # Find the total parts produced by 3 workers in 10 minutes\n    total_parts_produced = parts_per_worker_per_minute * 3 * 10\n    \n    return int(total_parts_produced)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    num = 2\n    while True:\n        # Form the number by multiplying 10 and adding 5, or using string concatenation\n        str_num = '2' + '5' * num\n        int_num = int(str_num)\n        root = sqrt(int_num)\n        \n        # Check if the square root is an integer\n        if root.is_integer():\n            count += 1\n\n        # Check if the number has exceeded the number with digits of 5s\n        # that we can represent accurately as an integer in Python\n        if len(str(int_num)) != num + 1:\n            break\n\n        num += 1\n\n    return count\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divisors_of_2240 = divisors(2240)\n\n    # Find the largest divisor for which 2240 divided by it is a square\n    for divisor in reversed(divisors_of_2240):\n        if is_square(2240 // divisor):\n            return divisor\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 0.70\n    non_swimming_boys = (total_pupils - swimming_pupils) * (40 / (100 - 40))\n    girls_swimming = 200\n    girls_total = swimming_pupils - (total_pupils - swimming_pupils - non_swimming_boys) + girls_swimming\n\n    return int(girls_total)\n\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_ratio\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_to_n = sum(range(1, n+1))\n    A = sum_to_n ** 2\n    return A\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown amount of 10% sugar water\n    x = symbols('x')\n\n    # Equation representing the total sugar from both solutions\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n\n    # Solve the equation for x\n    amount_of_10_percent_sugar_water = solve(equation, x)[0]\n\n    return amount_of_10_percent_sugar_water\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = (original_price - final_price) / original_price * 100\n\n    return total_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let's denote the mass of one chocolate as c and the mass of the empty jar as j.\n    # According to the problem we have two equations:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # We can solve these two equations to find the values of j and c\n    # First, let's find c by subtracting the first equation from the second:\n    c = (317 - 185) / (17 - 5)  # (j + 17c) - (j + 5c) = 317 - 185\n\n    # Now we can find the mass of the jar by substituting the value of c into the first equation:\n    j = 185 - 5 * c  # j + 5c = 185\n\n    # Now we can find the mass of the jar with 10 chocolates:\n    mass_with_10_chocolates = j + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    n = 200\n    count = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            count += 1\n    # Subtract one to exclude the number itself (200=200)\n    return count - 1\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_op(custom_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Lana's and Mark's sweets\n    lana, mark = symbols('lana mark')\n\n    # Given total sweets\n    total_sweets = 674\n\n    # Create equations based on the problem statement\n    equation1 = Eq(lana + mark, total_sweets)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (lana, mark))\n\n    # Calculate the difference in the number of sweets they originally had\n    difference = solutions[lana] - solutions[mark]\n\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    dorothy_stickers = 96\n    timmy_stickers = dorothy_stickers // 8\n    kevin_stickers = timmy_stickers + 45\n    return kevin_stickers\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Define the entire holiday as 'x' days.\n    x = symbols('x')\n    # Equation representing the total days spent in different activities.\n    # x/2 (music store) + x/4 (reading and relaxing at home) + 4 (friend's house) + 14 (summer camp) = x (total days)\n    equation = Eq((x / 2) + (x / 4) + 4 + 14, x)\n    # Solve the equation for 'x'\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Because there is a wheat at every corner of the rectangle, we will subtract\n    # these from the total count when calculating the number of gaps along each side.\n    # We have 4 corners, so we subtract 4 wheats from the total to account for this.\n    total_wheat_minus_corners = 116 - 4\n\n    # The wheat is planted evenly along the sides, and since we have two pairs\n    # of equal opposite sides in a rectangle, we divide the number of wheats\n    # by 2 to get the number of wheats on the length and the width.\n    wheat_per_side = total_wheat_minus_corners // 2\n    \n    # Now there are wheat_per_side + 1 gaps on each length and width,\n    # because there is one more gap than there are wheats.\n    # We can now find out the distance between each wheat by dividing \n    # the total length of each side by the number of gaps\n    \n    # For the length (204m side), since there is a wheat at each end,\n    # the number of gaps is wheat_per_side - 1.\n    length_distance = 204 / (wheat_per_side // 2 + 1)\n\n    # For the width (144m side), similarly, we do the same.\n    width_distance = 144 / (wheat_per_side // 2 + 1)\n    \n    # Since the question asks for the distance between every 2 wheat,\n    # the answer will be the same for both width and length,\n    # because the wheat is planted uniformly. We can return either.\n    return length_distance\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # Since each cat catches fish independently, the time it takes for any cat to catch a fish\n    # remains the same regardless of the number of cats or fish.\n    time_per_cat_per_fish = 10  # minutes\n\n    # Therefore, for 5 cats to catch 5 fish, each cat will catch one fish, taking the same 10 minutes.\n    # The number of cats does not speed up the process for catching one fish per cat.\n    time_for_5_cats_to_catch_5_fish = time_per_cat_per_fish\n\n    return time_for_5_cats_to_catch_5_fish\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the weight of the watermelon and pineapple\n    watermelon, pineapple = symbols('watermelon pineapple')\n    \n    # Given that the watermelon is 5 times heavier than the pineapple\n    eq1 = Eq(watermelon, 5 * pineapple)\n    \n    # The watermelon is 5.6 kg heavier than the pineapple\n    eq2 = Eq(watermelon, pineapple + 5.6)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (watermelon, pineapple))\n    \n    return solution[watermelon]\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_after_morning = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_after_morning\n    made_bracelets = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - made_bracelets\n\n    return int(more_bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_weeks = 4\n\n    combined_rate = total_people / combined_weeks\n    gloria_rate = combined_rate - ellie_rate\n\n    weeks_gloria = total_people / gloria_rate\n    \n    return weeks_gloria\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Given values\n    field_length = 144\n    field_width = 204\n    total_wheat = 116\n    corner_wheat = 4\n\n    # The wheat on the corners are counted once for each side\n    # So we subtract them from the total count when calculating the wheat on each side\n    wheat_on_edges = total_wheat - corner_wheat\n\n    # Wheat is planted along the perimeter of the rectangle\n    # Since we have two lengths and two widths, we divide by 2\n    wheat_per_side = wheat_on_edges // 2\n\n    # One side (length and width) has wheat_per_side/2 (since wheat_per_side includes both length and width)\n    wheat_per_length = wheat_per_side // 2\n    wheat_per_width = wheat_per_side // 2\n\n    # The spaces between wheat is one less than the number of wheat on that side\n    spaces_per_length = wheat_per_length - 1\n    spaces_per_width = wheat_per_width - 1\n\n    # The distance between wheat is thus the side length divided by the number of spaces on that side\n    distance_between_wheat_length = field_length / spaces_per_length\n    distance_between_wheat_width = field_width / spaces_per_width\n        \n    # Since the field is rectangular, the distance between wheat must be the same for both length and width\n    # So, we can return any of the two calculated distances\n    return distance_between_wheat_length\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n    for perm in permutations('123456789', 4):\n        A, C, E, F = perm\n        num1 = int('5' + A + '2' + '0' + C + E + F)\n        num2 = int(E + F + A + '2' + '0' + C)\n        if 5 * num1 == 6 * num2:\n            return int(F + A + C + E)\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.40 + 60 * (x)  # x is the percentage of rice in food B\n    mixture_rice_percentage = 0.28\n\n    # Set the equation for the mixture rice percentage\n    equation = total_rice / total_weight - mixture_rice_percentage\n    # Solve for x\n    x = (mixture_rice_percentage * total_weight - 15 * 0.40) / 60\n\n    # Convert the decimal to a percentage\n    rice_percentage_in_B = x * 100\n\n    return rice_percentage_in_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # milliliters per minute\n    total_minutes = 2 * 60  # 2 hours into minutes\n    total_volume = rate_per_minute * total_minutes  # total volume in milliliters\n    total_volume_liters = total_volume / 1000  # converting milliliters to liters\n\n    return total_volume_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    length_of_road = 150\n    distance_between_trees = 10\n    \n    num_trees = (length_of_road // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let x be the distance of the shopping mall from the starting point.\n    # Then Barbara walked x meters and Catherine walked x - 60 meters\n    # when Barbara reached the shopping mall.\n    \n    # The time taken for both to reach their respective destinations is the same.\n    # Therefore, we can equate the time taken by both Barbara and Catherine.\n\n    # Time taken by Barbara = Distance covered by Barbara / Speed of Barbara\n    # Time taken by Catherine = Distance covered by Catherine / Speed of Catherine\n\n    # Since both Barbara and Catherine started walking at the same time, the time taken should be equal.\n    # Therefore, we can setup the equation as follows:\n    # x / 60 = (x - 60) / 45\n\n    # Solving the above equation for x we get:\n    # (x / 60) = ((x - 60) / 45)\n    # Cross multiply the denominators to solve for x:\n    # 45 * x = 60 * (x - 60)\n    # 45x = 60x - 3600\n    # 15x = 3600\n    # Divide both sides by 15 to solve for x\n    # x = 3600 / 15\n    x = 3600 / 15\n    \n    # Return the calculated distance\n    return x\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Using variables a, b, c, d for the four distinct positive whole numbers in descending order.\n    # Thus, a > b > c > d.\n    # Given: d + (a + b + c) / 3 = 39 -> multiply by 3 to get rid of the denominator: 3d + a + b + c = 117 -> 1)\n    # Given: a + (d + b + c) / 3 = 51 -> multiply by 3 to get rid of the denominator: 3a + d + b + c = 153 -> 2)\n    # From 1) we get that (a + b + c) = 117 - 3d\n    # From 2) we get that (b + c + d) = 153 - 3a\n    # Adding both we get: 2*(a + b + c + d) = 270 - 3d - 3a -> a + b + c + d = 135 - (3/2)*(d + a) -> 3)\n    \n    # Let's rearrange and express d in terms of a:\n    # 39 = d + (a + b + c) / 3 = d + (117 - 3d) / 3 \n    # 117 = 3d + 117 - 3d -> 0 = 0, this is always true so it's not helping us to find d.\n    \n    # Let's arrange expression 2) in terms of d:\n    # 51 = a + (153 - 3a) / 3\n    # 51 = a + 51 - a -> This simplifies to 51 = 51, not helping to find a value for a.\n\n    # For maximum value of a, d should be smallest and vice versa (based on the average calculations)\n    # since they are distinct whole numbers, let d be 1\n    # then we have a + b + c = 117 - 3*1 = 114\n    # and b + c + 1 = 153 - 3*a\n    # To maximize a, we minimize b and c.\n    \n    # Firstly, let's observe the two equalities:\n    # (b+c+d) + a = 153       (1)\n    # (b+c+1) + 3a = 153      (2)\n    # From (1) and (2), we get (d - 1) + 2a = 0\n    # We find d in terms of a, d = 1 - 2a\n    # Since d must be a positive integer, the smallest value for a which makes d still positive is when a = 1 (then, b and c will take values that are larger than a and d)\n    \n    # Now, we calculate the maximum value of 'a' by incrementing 'a' starting from 1:\n    largest_a = 1\n    while True:\n        d = 1 - 2 * largest_a\n        if d <= 0:\n            break\n        largest_a += 1\n\n    largest_a -= 1  # The last increment made d non-positive, so we subtract 1 from a\n\n    return largest_a\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the book and the pen\n    book, pen = symbols('book pen')\n\n    # Equations based on the given information\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n\n    total_received = ten_dollar_notes * 10 + five_dollar_notes * 5 + twenty_cent_coins * 0.20\n    money_spent = 100 - total_received\n\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    # A + B + C = 200\n    equation1 = Eq(A + B + C, 200)\n    # A/B = 4/3 => 3A = 4B\n    equation2 = Eq(3 * A, 4 * B)\n    # A = C + 20\n    equation3 = Eq(A, C + 20)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # declare symbols\n    x, y = symbols('x y')\n\n    # create the equation\n    equation = Eq(3*x + y + 21, 2 * (0.5 * y + x))\n\n    # solve the equation with regard to x\n    solutions = solve((equation,), (x,), dict=True)\n\n    return solutions[0][x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_to_fry_one_plate = 3  # minutes\n    total_time_available = 18  # minutes\n\n    num_of_plates = total_time_available // time_to_fry_one_plate\n\n    return num_of_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students = 50\n    facing_teacher = students - len(set(range(4, students+1, 4)).union(set(range(6, students+1, 6))))\n    \n    return facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    return 471471471471 // 157157157157\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2 / 5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7 / 9\n    \n    return int(second_day_sold)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "from math import ceil\n\ndef solution():\n    apples = 29\n    min_apples = 3\n\n    # Using Pigeonhole Principle, divide the total apples by the minimum number of apples to get the minimum class size.\n    class_size = ceil(apples / min_apples)\n\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways_to_pick = boys * girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(10, 100):\n        if isprime(i):\n            reverse_i = int(str(i)[::-1])\n            if i != reverse_i and isprime(reverse_i):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original = 140\n    new = 87.5\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')\n\n    equation1 = Eq(green + blue, 140)\n    equation2 = Eq((green - 28), (blue - (2/5)*blue))\n\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # As the alcoholic goes to three fixed bars at random,\n    # the probability of choosing any one of the bars is 1/3.\n\n    # Since the alcoholic is not at two of the bars, the probability\n    # that they are at the third bar is 1 - P(not at the first bar) - P(not at the second bar).\n    \n    # The probability of not being at the first bar is 2/3,\n    # and the probability of not being at the second bar is 2/3.\n\n    # However, as these two probabilities overlap (since they both cover the event of him being at the third bar),\n    # we don't simply add them together. Instead, we need to subtract the probability of not being\n    # at the first AND second bar from 1.\n\n    # The probability of being at the third bar is then:\n    prob_third_bar = 1 - (2/3) * (2/3)\n\n    return prob_third_bar\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    eliot_future_age = 16\n    years_difference = 4\n    eliot_current_age = eliot_future_age - years_difference\n    cousin_current_age = eliot_current_age // 2\n    cousin_future_age = cousin_current_age + years_difference\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    number1 = 387\n    number2 = 729\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish = 16\n    caught_fish = 100\n    released_fish = 100\n\n    estimated_total_fish = (caught_fish * released_fish) / marked_fish\n\n    return int(estimated_total_fish)\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    num1 = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    num2 = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    ans = num1 / num2\n    return ans\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let the distance Nancy walks be x meters\n    # Then Randy walks x + 10 meters\n\n    # Since for every 2 meters Nancy walks, Randy walks 3 meters, we have their ratio\n    # (x + 10) / x = 3 / 2\n\n    # Cross multiplying to solve for x (the distance Nancy walks)\n    # 2 * (x + 10) = 3 * x\n    # 2x + 20 = 3x\n    # x = 20 meters\n\n    # Distance Nancy walks is x, so Randy walks x + 10 meters, i.e., 30 meters\n    # Total distance between them when they set off is sum of both distances\n    total_distance = 20 + 30\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    equation1 = Eq(ali, (bronson + charlie)/2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    series1 = sum(range(10, 21, 2))\n    series2 = sum(range(9, 20, 2))\n    \n    ans = series1 - series2\n    \n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years, their total age is 53 years\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let n be the repeating decimal 0.2014141414...\n    # We can express n as the sum of the non-repeating part and the repeating part:\n    # n = 0.201 + 0.0004141414...\n    # Let's multiply n by 10000 to shift the repeating part to the left of the decimal point:\n    # 10000n = 2014.141414...\n    # and subtract the original n from it:\n    # 10000n - n = 2014.141414... - 0.2014141414...\n    # Simplifying the above gives us:\n    # 9999n = 2014\n    # Now we can find n by dividing both sides of the equation by 9999:\n    n = 2014 / 9999\n    # The value of x is then n multiplied by 9900 since x/9900 = n\n    x = n * 9900\n    # Finally, we return the whole number part of x, but since we want x to be a whole number\n    # and we have constructed x to be a whole number, we can just return x as is\n    return int(x)\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(10):\n            for one in range(10):\n                if hundred + ten + one == 8 and len({hundred, ten, one}) == 3 and one % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for number in range(100000, 1000000):\n        if str(number)[-1] == '2':\n            new_number_str = '2' + str(number)[:-1]\n            new_number = int(new_number_str)\n            if new_number == number // 3:\n                return number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first = 25\n    failed_second = 12\n    passed_second_failed_first = 3\n\n    # Using the inclusion-exclusion principle:\n    # Total passed both exams = passed first - (passed second but failed first)\n    passed_both = passed_first - passed_second_failed_first\n\n    # Total failed both exams is the same as those who only failed the second exam\n    # Total passed only the first exam = Total passed first exam - Total passed both exams\n    passed_only_first = passed_first - passed_both\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num = solve_congruence(*congruences)\n    while num[0] < 500:\n        num = (num[0] + num[1], num[1])\n        \n    ans = num[0] if num[0] < 1000 else None\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n\n    remainder = total_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # As every digit will appear in each place (hundreds, tens, units) exactly twice\n    # when forming all possible 3-digit numbers without repetition (abc, acb, bac, bca, cab, cba),\n    # each place contributes to the sum as (a + b + c) * 2.\n    # Therefore, the sum of all these three-digit numbers is:\n    # Sum = 2*(a+b+c) * (100 + 10 + 1), since there are 100s, 10s and 1s places.\n\n    a, b, c = symbols('a b c')\n    sum_all = 2 * (a + b + c) * (100 + 10 + 1)\n\n    return sum_all\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be a non-zero digit\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            product = ab * ba\n            if product % 100 == 0:  # Check if ones and tens digits are zero\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    rate_per_hour = 78 / 6.5\n    hours_needed = 300 / rate_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of potatoes in the small sack\n    x = symbols('x')\n\n    # The large sack holds 20% more potatoes than the small sack\n    # So the large sack holds x + 0.2x = 1.2x potatoes\n    large_sack = 1.2 * x\n\n    # Equation: small sack + large sack = total potatoes\n    equation = Eq(x + large_sack, 77)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate the number of potatoes in the large sack\n    large_sack_potatoes = 1.2 * solution[0]\n\n    return int(large_sack_potatoes)\n\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # equation for the total fruits Mrs. Lee had initially\n    equation1 = Eq(oranges + apples, 125)\n    # equation for the number of oranges and apples left after selling\n    equation2 = Eq(oranges - 35, (apples / 2))\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5 / 9\n    decimal_value = round(fraction, 2)\n    return decimal_value\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # Least 5-digit palindrome\n    least_5_digit_palindrome = 10001\n    \n    # Greatest 6-digit palindrome\n    greatest_6_digit_palindrome = 999999\n    \n    # Difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "import math\n\ndef solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins = math.ceil(students / cabin_capacity)\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the number of coins as a symbol\n    coins = symbols('coins')\n\n    # The first equation is based on the initial condition\n    # One quarter of the coins are showing heads\n    equation1 = Eq(coins / 4, coins / 4)\n\n    # After turning two more coins, one third of the coins show heads\n    # (coins / 4) + 2 is the new number of heads and it should be equal to coins / 3\n    equation2 = Eq((coins / 4) + 2, coins / 3)\n\n    # Solving both equations for the number of coins\n    solutions = solve(equation2, coins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # Since there are 6 books on the right of the picture book,\n    # and the picture book is the 14th from the left,\n    # we can calculate the total number of books as follows:\n    num_books = 14 + 6  # 14 to the left of the picture book and 6 to its right\n    return num_books\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Starting from the right, we first account for the 3-digit numbers from 100 to 1200.\n    # Each has 3 digits, so there are 1101 of them.\n    numbers_3_digits = range(100, 1201)\n    total_3_digits = 3 * len(numbers_3_digits)  # Total digits from 100 to 1200 (inclusive)\n\n    # Check if the 2011th digit from the right is in this range.\n    if total_3_digits >= 2011:\n        # It's within the 3-digit numbers, calculate the exact number and digit.\n        # We need to subtract one more to get the correct 0-based index\n        index_from_left_3_digits = total_3_digits - 2011\n        # Calculate which number it is and what digit (0=first, 1=second, 2=third)\n        number_index = index_from_left_3_digits // 3\n        digit_within_number = index_from_left_3_digits % 3\n\n        # Now, we get the actual number and return the digit.\n        actual_number = numbers_3_digits[number_index]\n        return int(str(actual_number)[digit_within_number])\n    else:\n        # If it's not within the 3-digit numbers, proceed with 2-digit numbers.\n        numbers_2_digits = range(10, 100)\n        total_2_digits = 2 * len(numbers_2_digits)  # 2 digits for each number from 10 to 99\n        total_1_and_2_digits = total_2_digits + 9  # 1 digit for each number from 1 to 9\n        \n        remaining_digits = 2011 - total_3_digits\n        \n        if total_1_and_2_digits >= remaining_digits:\n            # It's within the 2-digit or 1-digit numbers\n            index_from_left_1_and_2_digits = total_1_and_2_digits - remaining_digits\n            \n            if index_from_left_1_and_2_digits < 9:\n                # It's a 1-digit number\n                actual_number = 1 + index_from_left_1_and_2_digits\n                return int(str(actual_number)[0])\n            else:\n                # It's a 2-digit number\n                index_from_left_2_digits = index_from_left_1_and_2_digits - 9\n                number_index = index_from_left_2_digits // 2\n                digit_within_number = index_from_left_2_digits % 2\n                \n                actual_number = numbers_2_digits[number_index]\n                return int(str(actual_number)[digit_within_number])\n        else:\n            return None  # The digit does not exist.\n        \nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_number = 50\n    multiple_of = 5\n    # Find the largest multiple of 5 that is less than or equal to 50\n    largest_multiple = last_number - (last_number % multiple_of)\n    # Calculate number of terms\n    number_of_terms = largest_multiple // multiple_of\n    # Use the formula for the sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_of_multiples = number_of_terms / 2 * (multiple_of + largest_multiple)\n    return int(sum_of_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # speed of the first planet in km/minute\n    speed_planet2 = 40  # speed of the second planet in km/minute\n    time_passed = 5     # time in minutes\n\n    # distance = speed * time\n    distance_travelled_planet1 = speed_planet1 * time_passed\n    distance_travelled_planet2 = speed_planet2 * time_passed\n\n    # The planets are moving towards each other, so the total distance is the sum of distances\n    # they travelled individually.\n    total_distance_apart = distance_travelled_planet1 + distance_travelled_planet2\n    \n    return total_distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, motorbikes = symbols('cars motorbikes')\n\n    # Equation for number of vehicles\n    equation1 = Eq(cars + motorbikes, 140)\n\n    # Equation for number of tyres\n    equation2 = Eq(4 * cars + 2 * motorbikes, 490)\n\n    solutions = solve((equation1, equation2), (cars, motorbikes))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Two-digit numbers can't start with 0, so we have 5 choices for the first digit (1-5)\n    first_digit_choices = 5\n    # Since repetition is allowed, we still have 6 choices for the second digit (0-5)\n    second_digit_choices = 6\n    # The total number of two-digit numbers is the product of the choices for each digit\n    total_numbers = first_digit_choices * second_digit_choices\n    return total_numbers\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    common_difference = 34 - 26\n    \n    num_terms = ((last_term - first_term) // common_difference) + 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    sale_price = 64\n    discount_rate = 0.2\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_volume = 36\n    ratio_apple = 4\n    ratio_orange = 5\n    ratio_sum = ratio_apple + ratio_orange\n\n    apple_juice_needed = (total_volume * ratio_apple) / ratio_sum\n\n    return apple_juice_needed\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, solve\n    \n    a, n = symbols('a n', integer=True)\n    # Setup equations based on the remainders and the number n\n    eq1 = (190 - a) % n\n    eq2 = (137 - (a + 4)) % n\n    eq3 = (101 - (a + 6)) % n\n\n    # Solve the equations\n    res = solve([eq1, eq2, eq3], (a, n))\n\n    # Since the problem does not specify that n must be minimized or that a has a certain range,\n    # take the first valid solution. There may be multiple valid solutions but we're interested\n    # in any valid number 'n' and its corresponding 'a' that could have produced the remainders.\n    valid_res = [r for r in res if r[n] > 0 and r[a] >= 0]  # n must be positive and a non-negative\n    n_value = valid_res[0][n]\n\n    # Now find the remainder when 299 is divided by the number n\n    remainder = 299 % n_value\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n\n    days = 0\n    distance = 0\n\n    while True:\n        days += 1\n        distance += climb_per_day\n        if distance >= total_distance:\n            break\n        distance -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    \n    num_boxes = total_avocados // per_box\n    \n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    number = (result - 12) / 2\n    return number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    num_students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * num_students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 200))  # Generate a list of prime numbers\n    max_sum = 0\n    for x in primes:\n        if (200 - x) % (x + 2) == 0:  # Check if y is an integer\n            y = (200 - x) // (x + 2)\n            if y in primes and y != x and x * (2 + y) == 200 + y:  # Check if y is a prime and different from x\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    # For 4 and 5, there's only 1 of each.\n    \n    # Calculate the factorial of the total digits.\n    total_permutations = factorial(total_digits)\n    \n    # Divide by the factorial of the count of each repeated digit to avoid overcounting.\n    permutations = total_permutations // (factorial(count_2) * factorial(count_3))\n    \n    return permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Bud spends 2p which is one-quarter of her money.\n    # Let's denote the total money Bud had initially as `total_money`.\n    # According to the problem, 2p = 1/4 * total_money\n    total_money = 2 * 4  # Multiply both sides by 4 to isolate `total_money`.\n\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    total_rounds = teams * (teams - 1) // 2\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    expr1 = Fraction(31, 6) + Fraction(31, 5)\n    expr2 = Fraction(1, 6) + Fraction(1, 5)\n    ans = expr1 / expr2\n    \n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    equation4 = Eq(doc + sleepy, dopey + sneezy)\n    equation5 = Eq(dopey, sneezy)\n    equation6 = Eq(dopey, bashful)\n    equation7 = Eq(dopey, grumpy)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7 / 9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    perm = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = perm[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # Speed of construction per day\n    speed_per_day = 1000 / 5\n\n    # Total days to construct a 2600-meter highway\n    days_to_construct_2600 = 2600 / speed_per_day\n\n    return days_to_construct_2600\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time_initial = 5\n    time_target = 3\n\n    speed = distance / time_initial\n    distance_target = speed * time_target\n\n    return distance_target\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees / 4\n    return int(trees_per_side)\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    num_terms = (last_term - first_term + 1)\n    \n    # If the number of terms is even, the sum is the same as the parity of first_term\n    # If the number of terms is odd, the sum is the opposite of the parity of first_term\n    if num_terms % 2 == 0:\n        ans = 'Even' if first_term % 2 == 0 else 'Odd'\n    else:\n        ans = 'Odd' if first_term % 2 == 0 else 'Even'\n    \n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let q, r, s represent the numbers on the hats of Qiang, Rory, and Sophia respectively\n    q, r, s = symbols('q r s')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(r + s, 11)\n    equation2 = Eq(q + s, 17)\n    equation3 = Eq(q + r, 22)\n\n    # Solve the system of equations for the values on the hats\n    solutions = solve((equation1, equation2, equation3), (q, r, s))\n\n    # The largest number will be the largest value in the solution\n    largest_number = max(solutions[q], solutions[r], solutions[s])\n\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Total number of intervals between trees is one less than the number of trees\n    num_intervals = 30 - 1\n\n    # Distance between each tree\n    distance_between_trees = 5\n\n    # Total length of the road is the number of intervals times the distance between each\n    road_length = num_intervals * distance_between_trees\n\n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    result = 1.5\n    for i in range(3, 10):\n        result *= 1 + (1/i)\n    return result\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Andy drove 70 miles in 90 minutes, that's 1.5 hours\n    total_time = 1.5  \n    \n    # Average speed(x) during the first 30 minutes means he'd drive 0.5 * x miles in the first 30 minutes\n    # Second 30 minutes at (x - 20) mph, he'd drive 0.5 * (x - 20) miles\n    # Last 30 minutes at (x + 10) mph, he'd drive 0.5 * (x + 10) miles\n    # Sum of these distances should be 70 miles\n    equation = Eq(0.5 * x + 0.5 * (x - 20) + 0.5 * (x + 10), 70)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 346):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n\n    buses_needed = -(-total_people // max_per_bus)  # Ceiling division \n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    denise_prize, total_prize = symbols('denise_prize total_prize')\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    total_prize_money = solve(equation, total_prize)\n\n    return total_prize_money[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    import math\n\n    # total players except coach\n    total_players = 6\n    \n    # positions available next to coach for captain\n    captain_positions = 2\n    \n    # positions to arrange remaining players\n    remaining_positions = total_players - 1\n    \n    # calculate the number of ways to arrange the remaining players\n    arrangements = math.factorial(remaining_positions)\n    \n    # apply the principle of multiplication\n    ans = captain_positions * arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    total_students = 0\n    boys, girls = 0, 0\n    # Start with a single boy as the smallest possible square\n    layer = 1\n    while True:\n        # Determine the number of boys and girls in the current layer\n        if layer % 2 != 0:\n            boys += (layer * 4) - 4 if layer > 1 else 1\n        else:\n            girls += (layer * 4) - 4\n\n        # Calculate the difference, update the total and check the condition\n        if (boys - girls) == 20:\n            break\n        layer += 1\n\n    # Calculate the total number of students (sum of arithmetic series)\n    total_students = (1 + (layer ** 2)) * layer * layer // 2\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    penguins = symbols('penguins')\n    equation1 = Eq(3 * penguins + 25, 6 * penguins - 5)\n    \n    solutions = solve(equation1, penguins)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    def term(n):\n        # The n-th term can be determined by the sum of an integer series\n        return int(((-1 + (1 + 8 * n) ** 0.5) / 2) + 1)\n    \n    sum_of_terms = sum(term(x) for x in range(1, 31))\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25/100) * 20 + (1/5) * 30 + (2/3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f'1{a}7731')\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    votes_cindy = 47\n    votes_others = total_votes - votes_cindy\n    votes_to_win = (votes_others // 2) + 1\n\n    additional_votes_needed = votes_to_win - votes_cindy\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    from fractions import Fraction\n    from decimal import Decimal, getcontext\n    \n    # Set precision for Decimal\n    getcontext().prec = 9\n    \n    # Evaluate the first expression\n    first_expr_num = Decimal(7) / Decimal('-3.333333333')  # Recurring decimal for -3.3...\n    first_expr_den = Decimal('-0.027') ** Decimal('1/3')   # Cube root of -0.027\n    first_expr = first_expr_num / first_expr_den\n    \n    # Evaluate the second expression\n    second_expr_num = Decimal(2**3) / Decimal(4**2)\n    second_expr_den = Decimal('0.125') * (Decimal('1.8') - (Decimal('0.2') * Decimal(7)))\n    second_expr = second_expr_num / second_expr_den\n    \n    # Evaluate the third expression - note that 0.142857 is the decimal expansion of 1/7 (recurring)\n    third_expr_first_part = Decimal('0.1') / (Decimal(1) / Decimal(7))\n    third_expr_second_part = Decimal(2) * Decimal('0.3')\n    third_expr = third_expr_first_part + third_expr_second_part\n    \n    # Calculate the final answer\n    ans = first_expr + second_expr - third_expr\n    \n    # Convert answer to Fraction for exact representation\n    ans = ans.quantize(Decimal('1.000000000'))\n    frac_ans = Fraction(ans).limit_denominator()\n    \n    return frac_ans.numerator / frac_ans.denominator\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Chelsia's and Brian's money\n    chelsia_money, brian_money = symbols('chelsia_money brian_money')\n\n    # Equation representing 3/4 of Chelsia's money is equal to 5/6 of Brian's money\n    equation1 = Eq((3/4) * chelsia_money, (5/6) * brian_money)\n    # Chelsia has $24 more than Brian\n    equation2 = Eq(chelsia_money, brian_money + 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia_money, brian_money))\n\n    # The sum of Chelsia's and Brian's money\n    total_money = solutions[chelsia_money] + solutions[brian_money]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005.\n    # This means she was born on 10th May 1955 (2005 - 50).\n\n    # James was 20 years old on 10th May 1997.\n    # This means James was born on 10th May 1977 (1997 - 20).\n\n    # To find out how old Gina was when James was born,\n    # we subtract Gina’s birth year from James's birth year: 1977 - 1955.\n    \n    gina_birth_year = 1955\n    james_birth_year = 1977\n    ginas_age_when_james_born = james_birth_year - gina_birth_year\n\n    return ginas_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the total sales for July.\n    x = symbols('x')\n\n    # Equation representing salary calculation based on sales.\n    salary_equation = 2500 + 0.02 * x + 0.05 * (x - 25000) - 3300\n\n    # Solve the equation only for the sales over $25000.\n    # The first piece of the commission is a constant since it's\n    # always 2% of $25000, which is $500.\n    # If the sales are less than or equal to 25000, then there's no additional commission.\n    # Therefore, we only consider the situation where sales are greater than 25000.\n    sales_equation = salary_equation.subs(x, 25000 + symbols('y'))\n    sales_solution = solve(sales_equation)\n\n    # Calculate total sales by adding the constant $25000 to the commission part.\n    total_sales = 25000 + sales_solution[0]\n\n    return total_sales\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n\n    # Initial condition\n    equation1 = Eq(ryan / audrey, 2 / 7)\n\n    # After Ryan bought and Audrey gave away marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    solutions = solve((equation1, equation2), (ryan, audrey))\n\n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n\n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2\n\n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    probability_first_attempt = 0.4\n    probability_second_attempt_given_failure = 0.5\n    probability_third_attempt_given_failure = 0.3\n\n    # Probability that they pass on the first attempt\n    prob_pass_first = probability_first_attempt\n    \n    # Probability that they fail the first attempt but pass on the second\n    prob_fail_first_pass_second = (1 - probability_first_attempt) * probability_second_attempt_given_failure\n    \n    # Probability that they fail the first two attempts but pass on the third\n    prob_fail_first_two_pass_third = (1 - probability_first_attempt) * (1 - probability_second_attempt_given_failure) * probability_third_attempt_given_failure\n    \n    # Total probability of passing before the fourth attempt\n    prob_pass_before_fourth = prob_pass_first + prob_fail_first_pass_second + prob_fail_first_two_pass_third\n\n    return prob_pass_before_fourth\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 0\n    num_pages = 0\n    \n    while total_digits < 1014:\n        num_pages += 1\n        total_digits += len(str(num_pages))\n    \n    return num_pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_from_A_to_B = 2\n    ways_from_B_to_C = 3\n    total_ways = ways_from_A_to_B * ways_from_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    # Using the arithmetic series sum formula: S_n = n/2 * (first_term + last_term)\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 1\n    for i in range(1, 16):\n        n *= i\n    zeros = 0\n    while n % 10 == 0:\n        zeros += 1\n        n //= 10\n    return zeros\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age / 4 + 32, age - 22)\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n    # Start with a square of side 1 (which will be a boy) and keep adding layers\n    # Each layer added around a square of side n consists of 2n + 2(n+1) = 4n + 2 children\n    # Each new layer will alternate between boys and girls\n    # The difference between boys and girls after k layers will be 4k since the first layer has 1 boy\n    \n    # We write the total number of students as the sum of the first k odd squares, which is k^2\n    # We write the difference of 44 as 4k, which gives us the equation k^2 - 4k - 44 = 0\n\n    equation = Eq(total_students**0.5 - 4*((total_students**0.5 - 1)/2), 44)\n\n    # We solve for k\n    solutions = solve(equation, total_students)\n\n    # We filter out the negative solution, if it exists\n    ans = [sol for sol in solutions if sol.is_real and sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n\n    # Calculate distance climbed in the first 5 days\n    first_five_days_climb = 5 * daily_climb\n\n    # On the sixth day, the snail reaches the top\n    sixth_day_reach = first_five_days_climb + sixth_day_climb\n\n    # Since on the sixth day the snail climbs out, the total distance climbed\n    # will be equal to the total height of the burrow\n    # Therefore, we can calculate how far the snail slides down during the night\n    # by considering that before the sixth day it did not climb out\n    nightly_slide = total_distance - sixth_day_reach\n\n    return nightly_slide\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples = 0\n    for a in range(1, 48 - 3):\n        for b in range(a + 1, 48 - 2):\n            for c in range(b + 1, 48 - 1):\n                d = 48 - (a + b + c)\n                if d > c:\n                    max_apples = max(max_apples, b)\n\n    return max_apples\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # The strategy is to minimize the number of trips involving the slowest people.\n    # The quickest two cross first, then the quickest comes back with the boat.\n    # The two slowest cross together, and then the second quickest returns.\n    # Finally, the two quickest cross again.\n    \n    # Initially we set the time to 0.\n    total_time = 0\n    \n    # Eddie (1 min) and Jack (2 min) cross first; Jack's time is used as he's slower.\n    total_time += 2\n    # Eddie (1 min) goes back with the boat.\n    total_time += 1\n    # Rose (5 min) and Mary (10 min) cross; Mary's time is used as she's slower.\n    total_time += 10\n    # Jack (2 min) returns with the boat.\n    total_time += 2\n    # Eddie (1 min) and Jack (2 min) cross again; Jack's time is used as he's slower.\n    total_time += 2\n    \n    return total_time\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum((i ** 2 for i in range(1, 90, 2))) - sum((i ** 2 for i in range(2, 90, 2)))\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let L and W represent the original length and width of the rectangle\n    L, W = symbols('L W')\n    \n    # Create an equation for the new perimeter based on the problem statement\n    new_perimeter_eq = Eq(2 * (L + 12) + 2 * W, 38)\n    \n    # Solve the new perimeter equation for W in terms of L\n    W_from_L = solve(new_perimeter_eq, W)[0]\n    \n    # The original perimeter equation is 2*L + 2*W\n    # Substitute W from the above solution into this equation to get the original perimeter in terms of L\n    original_perimeter = 2 * L + 2 * W_from_L\n    \n    # We know that W_from_L is in terms of L, and since there is no other given that relates L and W,\n    # we cannot obtain a numerical value, hence we will represent the perimeter with both L and W\n    # Note: since there is no additional information to find out L or W, we assume there is a mistake in the problem\n    # and provide the parameterized answer which can be further solved with additional information\n    return original_perimeter\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    import math\n    num_students = 4\n    ans = math.factorial(num_students)\n    return ans\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are three types of food: chocolate (c), peaches (p), strawberries (s)\n    # Jenny eats chocolate on the first day, so for the second day she has two choices: (p) or (s)\n    # For the third day, Jenny again has two choices, but they depend on the second day's choice\n    # If Jenny eats (p) on the second day, she can only eat (s) on the third day, and vice versa\n    \n    ways = 0\n    food_choices = ['p', 's']  # Possible choices after eating chocolate\n    \n    # Loop through each choice for the second day\n    for second_day_food in food_choices:\n        # Loop through each choice for the third day, which must be different than the second day food\n        for third_day_food in food_choices:\n            if second_day_food != third_day_food:\n                ways += 1\n                \n    return ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    n = 8\n    ans = (n - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    remainder_after_tv = 1 - 5/9\n    remainder_after_table = remainder_after_tv * (1 - 3/4)\n    total_salary = 160 / remainder_after_table\n    cost_of_tv = total_salary * 5/9\n    return cost_of_tv\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # Since the table is circular and rotations are considered the same,\n    # we can fix one person's position and arrange the remaining 6.\n    ans = factorial(6)  # 6! ways to seat the remaining people after fixing one seat\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    ans = 50 / (5/3)\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    john_current_age, emma_current_age = symbols('john_current_age emma_current_age')\n\n    # In 3 years, John's age and Emma's age\n    john_future_age = john_current_age + 3\n    emma_future_age = emma_current_age + 3\n\n    # Equations based on the problem statement\n    equation1 = Eq(john_future_age + emma_future_age, 27)\n    equation2 = Eq(emma_current_age, john_current_age - emma_current_age)\n\n    # Solving the simultaneous equations\n    solution = solve((equation1, equation2), (john_current_age, emma_current_age))\n\n    return solution[emma_current_age]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    daily_earnings = 70\n    num_days = 6  # Monday to Saturday\n\n    total_earnings = daily_earnings * num_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    points_to_choose = 3\n    num_triangles = comb(num_points, points_to_choose)\n    return num_triangles\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n    \n    total_sheets = reams * quires_per_ream * sheets_per_quire\n    \n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    tom_speed = 48\n    \n    # Jack's speed is 50 km/h\n    jack_speed = 50\n    \n    # Jack left 3 hours later than Tom\n    jack_late_by_hours = 3\n    \n    # Distance covered by Jack in those 3 hours (when Tom was alone on the road)\n    initial_tom_distance = tom_speed * jack_late_by_hours\n    \n    # After another 5 hours, Tom and Jack are 15 km away from each other\n    # Let's calculate the distance covered by both after these additional 5 hours\n    additional_time = 5\n    \n    # Tom's distance after the additional 5 hours\n    additional_tom_distance = tom_speed * additional_time\n    \n    # Jack's distance after the additional 5 hours\n    additional_jack_distance = jack_speed * additional_time\n    \n    # Total distance covered by Tom until the point they are 15 km apart\n    total_tom_distance_covered = initial_tom_distance + additional_tom_distance\n    \n    # Total distance covered by Jack until the point they are 15 km apart\n    total_jack_distance_covered = additional_jack_distance\n    \n    # The total distance between A and B is the sum of distances each has covered including the 15 km\n    # that they are still apart.\n    total_distance_AB = total_tom_distance_covered + total_jack_distance_covered + 15\n    \n    return total_distance_AB\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # The angle for water in the pie chart\n    water_angle = 36\n    # Since a full circle is 360 degrees, the water percentage is \n    # the water angle divided by the full angle\n    water_percentage = water_angle / 360\n    \n    # The percentage of people who chose cola\n    cola_percentage = 0.30\n    \n    # The percentage of people who chose tea (one quarter) \n    tea_percentage = 0.25\n    \n    # We know that the sum of all percentages is 1\n    # Thus, we can find the percentage of people who chose coffee by subtracting all other known percentages from 1\n    coffee_percentage = 1 - (tea_percentage + cola_percentage + water_percentage)\n    \n    # We know that 7 people chose coffee, which allows us to find the total number of people\n    total_people = 7 / coffee_percentage\n    \n    # Since the total number of people must be a whole number, we round it to the nearest integer\n    return round(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    # Assuming each child has 2 legs and each dog has 4 legs\n    # Let's use the 'Children' variable for number of children and calculate dogs based on that\n    dogs = 3 * children\n    total_legs = 2 * children + 4 * dogs  # Total number of legs\n\n    equation = Eq(total_legs, 56)\n    solution = solve(equation, children)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 1 - 2/5\n    present_pupils = 18\n\n    total_pupils = present_pupils / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    ans = 5.2 + 6.7 + 4.8\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday_cookies, sunday_cookies = symbols('saturday_cookies sunday_cookies')\n    \n    equation1 = Eq(saturday_cookies, 4 * sunday_cookies - 5)\n    equation2 = Eq(saturday_cookies, sunday_cookies + 43)\n\n    solutions = solve((equation1, equation2), (saturday_cookies, sunday_cookies))\n\n    return solutions[saturday_cookies]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance_between_trees = 2\n\n    # Since trees are planted at each corner, we should not double count those.\n    # Subtract the four corners from the total perimeter before dividing by the distance between trees.\n    trees_on_length_side = (length - 2 * distance_between_trees) // distance_between_trees\n    trees_on_width_side = (width - 2 * distance_between_trees) // distance_between_trees\n\n    # Total number of trees planted equals trees on length sides plus trees on width sides\n    # multiplied by 2 (since there are 2 length sides and 2 width sides), plus 4 for the corners.\n    total_trees = 2 * (trees_on_length_side + trees_on_width_side) + 4\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_m = 1.36\n    height_in_cm = height_in_m * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax_paid = income * tax_rate\n    money_after_tax = income - tax_paid\n    return money_after_tax\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    price_adult = 20\n    price_child = 15\n\n    min_adults = 2\n    children = 0\n\n    while True:\n        charge_for_adults = min_adults * price_adult\n        remaining_charge = total_charge - charge_for_adults\n        \n        if remaining_charge >= 0 and remaining_charge % price_child == 0:\n            children = remaining_charge // price_child\n            break\n        min_adults += 1\n\n    return children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**6):  # Limit the range to a reasonable number to find the special number\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750  # in millilitres\n    ratio_squash_to_water = 1 / 9  # 1 part squash to 9 parts water\n\n    # Calculate the total volume of the drink\n    total_volume = total_squash * (1 + ratio_squash_to_water)\n\n    # Calculate the number of bottles that can be completely filled\n    volume_per_bottle = 1000  # 1 litre is 1000 millilitres\n    num_bottles = total_volume // volume_per_bottle  # Using floor division to get full bottles\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (0.6 * 100) / 180\n    return result\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Thomas' solution:\n    # book_cost = 1/3\n    # bag_cost = 1/2 * (1 - book_cost) = 1/2 * (1 - 1/3) = 1/2 * 2/3 = 1/3\n    # total_cost = book_cost + bag_cost = 1/3 + 1/3 = 2/3\n    # total_cost_books_and_bag = 132\n    # 2/3 of the initial amount spent equals to 132\n    # 1/3 of the initial amount equals to 132 / 2\n    # initial_amount = 3 * (132 / 2)\n    book_and_bag_fraction = 1/3 + 1/2 * (2/3)  # The correct calculation of the fraction spent on book and bag\n    total_cost = 132\n    one_unit_cost = total_cost / book_and_bag_fraction\n    return one_unit_cost\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    return pow(221, 2020, 7)\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Calculating the last two digits of each term modulo 100\n    last_two_digits_6_to_2015 = pow(6, 2015, 100)\n    last_two_digits_2015_times_6 = (2015 * 6) % 100\n    last_two_digits_2015_to_6 = pow(2015, 6, 100)\n    \n    # Summing up the last two digits of individual terms modulo 100 to find the last two digits of the sum\n    result = (last_two_digits_6_to_2015 + last_two_digits_2015_times_6 + last_two_digits_2015_to_6) % 100\n    \n    return result\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # Initialize the answer variable\n    ans = None\n    \n    # Since B=2 and D=0, the equation becomes:\n    # 5 x 2x0xx2 = 6 x xx2x02\n    # meaning that the 3rd digit from the 5x multiplication is 0\n    # and the last digit from the 6x multiplication is 2\n    # We iterate over the possible values for A, C, E, and F,\n    # which are the digits from 1 to 9, as 0 is already used by B and D.\n    for A in range(1, 10):\n        for C in range(1, 10):\n            for E in range(1, 10):\n                for F in range(1, 10):\n                    # Ensure all digits are distinct\n                    if len({A, 2, 0, C, E, F}) == 6:\n                        ABCDEF = A*100020 + 2000 + C*10 + E*1000 + F\n                        EFABCD = E*100020 + F*10000 + A*100 + 200 + 0*10 + C\n                        \n                        # Check if the condition from the equation is met\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            ans = 1000*F + 100*A + 10*C + E\n                            return ans\n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since the given factors are 1, 2, 4, 7, and 8, and there are 8 factors in total,\n    # it implies that the number must be a multiple of these factors.\n\n    # Given factors imply that the unknown number has a prime factorization involving 2 and 7.\n    # Since we have 2^3 = 8 as a factor, our number could be 2^3 * 7 = 56. \n    # It has 1, 2, 4, 7, 8, 14, 28, 56 as its factors, which are 8 in total.\n\n    number = 2**3 * 7  # 56\n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_rate = 0.10\n    discount_amount = original_price * discount_rate\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    # Let x be the total number of animals in the farm initially.\n    # Let c be the number of cows and g be the number of goats initially.\n    # We know that c = 0.65x and g = x - c\n    from sympy import symbols, Eq, solve\n\n    x, c, g = symbols('x c g')\n    initial_cows = Eq(c, 0.65 * x)\n    initial_goats = Eq(g, x - c)\n    \n    # If 240 more cows and goats were added, the total becomes x + 240.\n    # The percentage of cows increased by 20%, so now it is 65% + 20% = 85% of (x + 240).\n    # The number of goats doubled, so now it is 2g.\n    new_total = x + 240\n    new_cows = Eq(c + 240, 0.85 * new_total)\n    new_goats = Eq(2 * g, new_total - (c + 240))\n\n    # Solve the system of equations\n    solutions = solve((initial_cows, initial_goats, new_cows, new_goats), (x, c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the total number of cookies in the box.\n    # In the second month, James sold 7/20 more cookies than in the first month.\n    # So in the second month, James sold 1680 + 7/20 * 1680 cookies\n    cookies_sold_second_month = 1680 + (7/20) * 1680\n\n    # The remaining cookies kept by James after the second month is reduced by 3/20, which means\n    # the cookies kept after second month = cookies kept after first month - 3/20 * total cookies\n    cookies_kept_first_month = 1680\n    cookies_kept_second_month = cookies_kept_first_month - (3/20) * cookies_kept_first_month\n\n    # The rest of the cookies James sold in the second month is:\n    # total cookies - cookies sold in the second month\n    cookies_sold_second_month_remaining = cookies_kept_second_month - cookies_sold_second_month\n\n    # Now, we set up the equation\n    # cookies_sold_second_month + cookies_sold_second_month_remaining = x (total cookies)\n    x = cookies_sold_second_month + cookies_sold_second_month_remaining\n\n    return x\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n    # Since Amy is directly behind Jolene, we can find the queue length by adding their positions and subtracting 1\n    total_children = jolene_position + amy_position - 1\n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    jump_up = 5\n    slide_down = 3\n    effective_jump = (2 * jump_up) - slide_down\n    tree_height = 40\n    jumps = 0\n\n    # the height that the monkey can jump before the final jump to the peak\n    peak_before_jump = effective_jump\n    while peak_before_jump < tree_height:\n        jumps += 2\n        peak_before_jump += effective_jump\n        \n    # considering the final jump(s)\n    if (tree_height - peak_before_jump + effective_jump) <= jump_up:\n        jumps += 1\n    else:\n        jumps += 2\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    perimeter = 432 * 5  # Side length times the number of sides of the pentagon\n    sunflower_spacing = 4\n    # Subtracting by one because we need to count the corner sunflowers only once\n    num_sunflowers = (perimeter // sunflower_spacing) - 4\n    return num_sunflowers + 5  # Adding the corner sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # £3 is 300p\n    num_stamps = pounds_to_pence // stamp_cost_pence\n    \n    return num_stamps\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences can be represented as:\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 9 (mod 11)\n    congruences = [(1, 5), (2, 6), (9, 11)]\n\n    # Solve the system of congruences\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_time = 2\n    # One round trip is going across the river and coming back\n    round_trip_time = trip_time * 2\n\n    # Each round trip ferries boat_capacity people, but one person must return with the boat\n    # So effectively each round trip ferries boat_capacity - 1 people.\n    effective_capacity = boat_capacity - 1\n    full_trips_required = total_people // effective_capacity\n    remaining_people = total_people % effective_capacity\n    \n    # Total time takes full trips time and the time for remaining people\n    # Full trips take round_trip_time. Subtract the final return trip because the last trip has no return.\n    total_time = full_trips_required * round_trip_time\n    \n    # If there are remaining people, we need one final trip to take them across with no return trip.\n    if remaining_people > 0:\n        total_time += trip_time  # Add final trip time for remaining people\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let t be the time Ryan drives at his usual speed.\n    # His usual speed is 45 miles/hour.\n    # His reduced speed is 30 miles/hour.\n    # The distance Ryan drives is the same in both cases.\n    # We set up the equation: 45t = 30(t + 2)\n\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n    equation = Eq(45 * t, 30 * (t + 2))\n    time_usual_speed = solve(equation, t)\n\n    return time_usual_speed[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum of the first sequence: 3 to 10\n    sum_first_sequence = sum(range(3, 11))\n    \n    # Calculate the sum of the second sequence: 10 to 3 (excluding 10)\n    sum_second_sequence = sum(range(4, 10))\n    \n    # The total sum is the sum of both sequences\n    total_sum = sum_first_sequence + sum_second_sequence\n    \n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "from sympy.functions.combinatorial.numbers import nT\n\ndef solution():\n    return nT(5)\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3  # Only the remainder mod 3 is relevant\n    return a\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    import math\n\n    numerator = (4.219 ** 2) / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n\n    result = numerator / denominator\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for number of students\n    students = symbols('students')\n    \n    # If he gives each student 6 sweets, he will be short of 26 sweets.\n    # So, total sweets are students * 6 - 26\n    equation1 = Eq(students * 6 - 26, students * 5)\n    \n    # Solve for the number of students\n    num_students = solve(equation1, students)[0]\n    \n    # If he gives each student 5 sweets, he will be short of 5 sweets.\n    # total sweets = students * 5 - 5\n    total_sweets = num_students * 5 - 5\n    \n    return total_sweets\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Given that there are 8 trees, if it's possible for the sum of the fruits\n    # to be 225, then the average number of fruits per tree should be an integer\n    # because the difference between neighbouring trees is always 1.\n    \n    # Check if the total sum 225 can be evenly divided by the number of trees\n    if 225 % 8 != 0:\n        # The sum cannot be evenly divided by the number of trees, \n        # which means we cannot have such a distribution with a difference of 1\n        return False\n    \n    # If it is possible, the average number of fruits per tree is an integer.\n    # Since there are 8 trees and the difference between neighboring trees is 1,\n    # we can find a sequence where the middle two numbers average to the total average.\n    avg_fruits = 225 // 8\n    \n    # Since the number of trees is even, there are two middle trees.\n    # The fruits on these two middle trees must be avg_fruits and (avg_fruits - 1)\n    # or (avg_fruits + 1) and avg_fruits. And the total fruits of the two middle trees\n    # should still be an even number because the difference must be 1 (an odd number).\n    # Since avg_fruits is odd (225 is odd and divisible by 8 gives an odd number),\n    # we would end up with an odd and an even number for the middle trees, summing to an odd number.\n    # This would violate the requirement that the sum of the middle trees must be even.\n    # Hence, it is not possible.\n    \n    return False\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Leo's current age as L and his son's current age as S\n    L, S = symbols('L S')\n\n    # The first statement gives us: L - S = S - 4 => L - 2S = -4\n    equation1 = Eq(L - 2 * S, -4)\n\n    # The second statement gives us: (L + (L - S)) = 70 => 2L - S = 70\n    equation2 = Eq(2 * L - S, 70)\n\n    # Now we solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (L, S))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of years later (n)\n    n = symbols('n')\n\n    # Create the equation for the problem\n    # dad's age + n = 4 * (heidi's age + n)\n    equation = Eq(50 + n, 4 * (8 + n))\n\n    # Solve the equation\n    solution = solve(equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # We want to arrange 4 singing (S) and 3 dancing (D) performances.\n    # S must be between every 2 Ds. There are two cases for D arrangements:\n    # 1. DSDSDSD: this case is not possible because we need at least 4 S which we do not have.\n    # 2. _D_SD_SD_: the underscores represent the S performance slots, and at least one S must be placed there.\n\n    # If we treat each _ + D as a single unit, we have four units: _D, _D, _D, and _.\n    # We must fill these 4 slots with 4 S performances such that each slot gets at least one S.\n\n    # We can define a helper function to calculate n choose k\n    def n_choose_k(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Calculate the number of ways to allocate 4 S to 4 slots with each slot getting at least 1 S\n    # This is a simple case where we just need to put 1 S in each slot: 1 way to do it.\n    ways_to_allocate_singing = 1\n\n    # Now, we need to arrange these units. We can think of them as distinct items:\n    # 3 units of _D and 1 unit of _. So, we have 4 items to arrange in total.\n    # The number of arrangements of 4 distinct items is 4! (factorial of 4)\n    ways_to_arrange_units = factorial(4)\n\n    # Finally, the total number of ways Tom can arrange the performances:\n    ways_to_arrange_performances = ways_to_allocate_singing * ways_to_arrange_units\n\n    return ways_to_arrange_performances\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    sum_first_three = 120 * 3\n    sum_four_numbers = 150 * 4\n    fourth_number = sum_four_numbers - sum_first_three\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    ans = (11 * 14 + 26) / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "from sympy import symbols, solve\n\ndef solution():\n    r = symbols('r', integer=True)\n    equation = Eq(216*r, r**2)\n    r_value = solve(equation, r)\n    ans = [val for val in r_value if val.is_integer and val > 0]\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3 / 13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_up = 8\n    slide_down = 3\n    net_climb = climb_up - slide_down\n    days_to_reach_top = 9\n    \n    # Calculate distance climbed after 8 full days and nights\n    total_climb_after_full_days = net_climb * (days_to_reach_top - 1)\n    \n    # On the 9th day, the snail climbs the remaining distance which is equal to its daily climb\n    # as it reaches the top without sliding down\n    total_climb_on_last_day = total_climb_after_full_days + climb_up\n    \n    return total_climb_on_last_day\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = remainder + 1  # The smallest divisor that can give a remainder is always one more than the remainder.\n  \n    dividend = quotient * smallest_divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    reduced_price = original_price * (1 - discount)\n    return reduced_price\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    both_languages = (french_teachers + japanese_teachers) - total_teachers\n    only_french_teachers = french_teachers - both_languages\n    \n    return only_french_teachers\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one bag of sweets (b) and one can of drink (c)\n    b, c = symbols('b c')\n\n    # Setting up the equations based on the given information\n    # Rachel's purchase: 3 bags of sweets + 5 cans of drink = £4.90\n    equation1 = Eq(3*b + 5*c, 4.90)\n    # Rosie's purchase: 1 bag of sweets + 3 cans of drink = £2.70\n    equation2 = Eq(b + 3*c, 2.70)\n\n    # Solving the system of equations for b and c\n    solutions = solve((equation1, equation2), (b, c))\n\n    # Getting the cost of one bag of sweets\n    return solutions[b]\n\n# Call the solution function and assign the result to the variable ans\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n    total_ways = factorial(6)  # Total ways without restriction\n    teddy_leftmost_ways = factorial(5)  # Ways with Teddy on the furthest left\n    return total_ways - teddy_leftmost_ways\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += common_difference\n\n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    ans = total_pence * fraction\n    return int(ans)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if (number // 10 + number % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    for i in range(1, 280):\n        if sum(range(i, i+7)) == 280:\n            return max(range(i, i+7))\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    # Difference of squares formula (a^2 - b^2) = (a - b)(a + b)\n\n    # Applying the formula to each pair of terms in the given expression\n    term1 = (1000 - 990) * (1000 + 990)\n    term2 = (980 - 970) * (980 + 970)\n    term3 = (20 - 10) * (20 + 10)\n\n    # Summing up the differences with alternating signs\n    ans = term1 + term2 + term3\n\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    ans = sum(-i if i % 4 == 2 else i for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The given series can be expressed in terms of n^3, where n ranges from 2 to 10.\n    # Therefore, we can use the formula for the sum of cubes up to n, which is (n(n+1)/2)^2.\n    sum_cubes = sum(n**3 for n in range(2, 11))\n\n    return sum_cubes\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    # Iterate through possible values for A and B\n    for A in range(100, 1000):\n        for B in range(A+1, 1000):\n            # Check if A and B have only two equal digits\n            if sorted(str(A)[:2]) == sorted(str(B)[:2]) or \\\n               sorted(str(A)[1:]) == sorted(str(B)[1:]) or \\\n               (str(A)[0] == str(B)[0] and str(A)[-1] == str(B)[-1]):\n                # Check if the highest common factor of A and B is 75\n                if math.gcd(A, B) == 75:\n                    # Update max_sum if we find a new maximum\n                    max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial as fact\n\ndef solution():\n    # Tom can arrange the 5 magazines in 5! ways.\n    # There are 6 places where the storybooks can be placed (5 between magazines + 1 at the end).\n    # Choose 5 places from these 6 to place the storybooks, which can be done in 6C5 ways.\n    # The storybooks themselves can be arranged in 5! ways.\n    # Therefore, the total number of arrangements is 5! * 6C5 * 5!\n    \n    magazines_perm = fact(5)\n    storybooks_perm = fact(5)\n    places_for_storybooks = 6\n    choose_places_storybooks = fact(places_for_storybooks) // (fact(places_for_storybooks - 5) * fact(5))\n\n    return magazines_perm * choose_places_storybooks * storybooks_perm\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    next_throw = False\n\n    for throw in throws:\n        if next_throw:\n            position -= throw\n            next_throw = False\n        elif throw == 6:\n            next_throw = True\n        else:\n            position += throw\n\n    ans = position\n    return ans\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define two symbols for the amount of money Alex and Brayden originally had\n    alex, brayden = symbols('alex brayden')\n    \n    # Create equations based on the problem statement\n    # 1. The total amount of money they had\n    equation1 = Eq(alex + brayden, 756)\n    # 2. The amounts after Alex gave $65 to Brayden, and Alex had three times as much as Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    # Brayden's original amount of money is what we're looking for\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # Let n be the smallest number of fruit gums.\n    # The problem states that after eating 2 in music lesson and sharing one third of the remaining,\n    # the number of fruit gums left must be divisible by 4 (equal amount in  the next four lessons).\n\n    n = 6  # We start our guess at 6 as it's the smallest number that is divisible by 3 and leaves a whole number when 2 is subtracted\n\n    # We use an infinite loop and will break out of it once we find the smallest n that meets all criteria.\n    while True:\n        remaining_after_music_lesson = n - 2  # After eating 2 in the music lesson\n        shared_with_friends = remaining_after_music_lesson / 3  # Shared one third with friends\n        \n        # Check if shared_with_friends is a whole number and the remaining is divisible by 4\n        if shared_with_friends.is_integer() and (remaining_after_music_lesson - shared_with_friends) % 4 == 0:\n            break  # We found the smallest n\n        \n        n += 1  # Increment n to check the next number\n\n    return n\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate_money = 13\n    james_money = 28\n    \n    # Calculate the amount of money they will each have after James gives Kate some money, which is the average\n    total_money = kate_money + james_money\n    final_each_have = total_money / 2\n    \n    # The amount James gave to Kate is the difference between what James originally had and what they both have after\n    amount_james_gives = james_money - final_each_have\n    \n    return amount_james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    number = 17.1\n    one_tenth_of_number = number / 10\n    return one_tenth_of_number\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = 420000 + A * 1000 + 28 * 10 + B\n            if number % 99 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    # Initial average of 10 numbers\n    initial_average = 10\n    # Average after removing one number\n    new_average = 9\n    # The total sum of the 10 numbers\n    total_sum_initial = initial_average * 10\n    # The total sum of the remaining 9 numbers\n    total_sum_new = new_average * 9\n    # The value of the number that is removed\n    removed_number = total_sum_initial - total_sum_new\n    \n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    time_seconds = 300\n\n    # Convert speed from km/h to m/s by multiplying by (1000 m / 1 km) and dividing by (3600 s / 1 h)\n    speed_ms = speed_kmh * (1000 / 3600)\n\n    # Calculate the distance in meters\n    distance_meters = speed_ms * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount each brother and sister receives when sharing equally\n    x = symbols('x')\n\n    # When only brothers share the amount, each receives x+20 more\n    # The sum of money shared is the same in both cases.\n    # When shared among three brothers and a sister (4 people), the total sum is 4*x\n    # When shared among three brothers, the total sum is 3*(x+20)\n    # These two expressions must be equal for the total sum to remain the same\n    equation = Eq(4*x, 3*(x+20))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The original sum of money is 4 times the amount each person received when all four shared equally\n    original_sum = 4 * solution[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Calculate the sum of the series of odd numbers from 1 to 21\n    n = (21 // 2) + 1  # Total number of terms in the odd sequence\n    \n    # Using the formula for the sum of the first n odd cubes:\n    # 1³ + 2³ + 3³ + ...... + n³ = (1 + 2 + 3 + ...... + n)²\n    # Since we only need odd numbers, we'll use the sum of the first n natural numbers (1+2+...+n = n(n+1)/2)\n    # but only take into account the terms for odd numbers, which is (n/2) for this case.\n    ans = (n * (n // 2))**2\n\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of beads left\n    red, green, blue = symbols('red green blue')\n\n    # Equation1: Total beads left\n    equation1 = Eq(red + green + blue, 350)\n\n    # Equation2: Red beads is twice the number of green beads\n    equation2 = Eq(red, 2 * green)\n\n    # Equation3: Blue beads is 50 fewer than red beads\n    equation3 = Eq(blue, red - 50)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n\n    # Calculate the original number of blue beads\n    original_blue = solutions[blue] + 112\n\n    return original_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Since the average of 4 numbers out of 5 is given, we can multiply\n    # the average by 4 to get the sum of those four numbers.\n    sums_of_four = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    \n    # The sum of all 5 numbers would be the sum of the 4 smallest numbers (which are used to calculate the smallest average)\n    # plus the largest number. This sum would be equal to each individual sum of four numbers plus the excluded (fifth) number.\n    # So the excluded number is equal to the total sum minus each sum of four numbers.\n\n    total_sum = min(sums_of_four) + max(sums_of_four)  # Smallest sum of 4 + largest sum of 4 gives the sum of the 4 smallest numbers plus the largest number.\n    \n    # Now, find the largest excluded number, which would be the largest number among all 5 numbers.\n    largest_excluded_number = max(total_sum - sum_of_four for sum_of_four in sums_of_four)\n    \n    return largest_excluded_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    # Given values\n    total_art_books = 360\n    art_fraction = 1/3\n    science_fraction = 4/5\n\n    # Calculate the equivalent number of science books\n    science_books = (total_art_books * art_fraction) / science_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n    equation1 = Eq(jared, katelyn * 5 / 2)\n    equation2 = Eq(jared - katelyn, 60)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    principal = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n    \n    amount_after_three_years = principal * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n    \n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total_estimate = sum(rounded_numbers)\n    return total_estimate\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n    \n    # Find the greatest common divisor (GCD)\n    gcd_all = gcd(gcd(textbooks_chinese, textbooks_math), textbooks_nature)\n    \n    return gcd_all\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Qiqi's speed\n    s_qiqi = 60  # in m/min\n    \n    # Weiling's speed\n    s_weiling = 72  # in m/min\n    \n    # Weiling starts 2 minutes later\n    t_delay = 2  # in minutes\n    \n    # Weiling arrives 4 minutes before Qiqi\n    t_early = 4  # in minutes\n    \n    # Let the distance between the library and the school be d meters\n    # Qiqi's travel time is t minutes, then Weiling's travel time is (t - t_delay - t_early) minutes\n    # We can build the equation:\n    # s_qiqi * t = d (1)\n    # s_weiling * (t - t_delay - t_early) = d (2)\n    \n    # Equating (1) and (2), we get:\n    # s_qiqi * t = s_weiling * (t - t_delay - t_early)\n    # Solving for t gives us the travel time for Qiqi\n    t = (s_weiling * t_delay + s_weiling * t_early) / (s_weiling - s_qiqi)\n    \n    # Using equation (1) to find the distance d\n    d = s_qiqi * t\n    \n    return d\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    star_speed, nini_speed = symbols('star_speed nini_speed')\n    \n    # Star + Nini = Whole work\n    equation1 = Eq(5 * star_speed + 20 * nini_speed, 1)\n    equation2 = Eq(20 * star_speed + 8 * nini_speed, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (star_speed, nini_speed))\n    \n    # Calculate time for Nini to finish the job by herself\n    time_for_nini = 1 / solutions[nini_speed]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # To share 16 sausages among 24 people, each person should get 16/24 of a sausage.\n    # This fraction simplifies to 2/3 of a sausage per person.\n    # To achieve this with the least number of cuts, we need to find the smallest number that is divisible\n    # by both the number of people (24) and the number of parts each sausage must be divided into (3).\n    # The least common multiple (LCM) of 24 and 3 will give us the smallest number of sausage pieces\n    # that can be shared equally. Then we will subtract the original number of sausages (16)\n    # to find the number of cuts, because we start with 16 whole sausages and each cut increases\n    # the number of pieces by one.\n    \n    # Calculate LCM of 24 (people) and 3 (pieces per sausage)\n    from math import gcd\n    lcm = (24 * 3) // gcd(24, 3)\n    \n    # Calculate the number of cuts required. Starts at 16 sausages, need lcm pieces\n    cuts = lcm - 16\n    \n    return cuts\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Total work is the same for both scenarios (W)\n    W = 900 * 4  # Total work done by 4 companies in 5 days\n\n    # Work done by one company in 5 days (W1)\n    W1 = W / 4\n\n    # Total work to do for the 2700 m expressway (W2)\n    W2 = 2700  # As 1 company is considered, no multiplication with the number of companies\n\n    # Since the total work W stays the same, we can set up the proportion\n    # (W1/5) = (W2/days_needed) -> days_needed = (W2*5)/W1\n\n    days_needed = (W2 * 5) / W1\n\n    return days_needed\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # St Petersburg is 3 hours ahead of Manchester\n    time_difference = timedelta(hours=3)\n\n    # Richard meets the plane at 12 noon, St Petersburg time\n    arrival_time_st_petersburg = datetime.strptime('12:00', '%H:%M')\n\n    # Calculate the departure time from Manchester\n    departure_time_manchester = arrival_time_st_petersburg - time_difference\n\n    # Format the time in HH:MM AM/PM format\n    ans = departure_time_manchester.strftime('%I:%M %p')\n\n    return ans\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_pounds = 2.2\n    kg = 5\n    pounds = kg * kg_to_pounds\n    return pounds\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # If Ben is 6th from the front, and Frank is 9th from the back,\n    # and there are 10 people in between them,\n    # we can calculate the total number of people as follows:\n    \n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_in_between = 10\n\n    # Ben's position from the back will be behind all the people in between and Frank\n    ben_position_from_back = people_in_between + frank_position_from_back + 1\n\n    # The total number of people can be calculated by adding Ben's position from the back\n    # and his position from the front, and then subtracting 1 because we counted Ben twice\n    total_people = ben_position_from_front + ben_position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_quantity = 6\n\n    # Calculate the total quantity based on the coffee.\n    total_quantity = (coffee_quantity * total_ratio) / coffee_ratio\n    return total_quantity\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    num = 100  # starting from the smallest 3-digit number\n    while True:\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    return sum([(-1)**(i+1) * (34 - 2 * i) for i in range(1, 17)])\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72\n    total = 140\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n    red = (2 / 5) * total_marbles\n    green = (1 / 3) * total_marbles\n    yellow = 96\n\n    equation = Eq(red + green + yellow, total_marbles)\n\n    solutions = solve(equation, total_marbles)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    # Initialize the sum\n    total_sum = 0\n    # Initialize the term to be added\n    term = 1\n    \n    # Loop to add terms\n    for i in range(2015):\n        # Add the term to the total and then find the last four digits\n        total_sum = (total_sum + term) % 10000\n        # Update the term by multiplying by 10 and adding 1\n        # to get the next number with all 1s\n        term = (term * 10 + 1) % 10000\n\n    # Store the answer\n    ans = total_sum\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Unit digit of 13^242\n    unit_digit_13 = pow(13, 242, 10)  # Calculating the last digit by using modulo 10\n    \n    # Unit digit of 17^379\n    unit_digit_17 = pow(17, 379, 10)  # Calculating the last digit by using modulo 10\n    \n    # Unit digit of 4^2012\n    unit_digit_4 = pow(4, 2012, 10)  # Calculating the last digit by using modulo 10\n    \n    # Since we only care about the unit digits, we can multiply these directly\n    product_unit_digit = (unit_digit_17 * unit_digit_4) % 10\n\n    # Adding the unit digits\n    unit_digit = (unit_digit_13 + product_unit_digit) % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If we take 3 marbles, then there are 3 scenarios based on the pigeonhole principle:\n    # 1. 2 blue marbles and 1 yellow marble\n    # 2. 2 yellow marbles and 1 blue marble\n    # 3. 1 blue marble and 1 yellow marble\n    # In scenarios 1 and 2, we already have 2 marbles of the same color.\n    # Therefore, taking 3 marbles guarantees at least 2 marbles of the same colour.\n    # Hence, the answer is 3.\n\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    for john_age in range(1, 100):  # Assuming a reasonable upper limit for John's age\n        mary_age = john_age - 1\n        product_parents = john_age * mary_age\n        \n        # Check if product of parents' ages next year will be greater than 2020\n        if (john_age + 1) * (mary_age + 1) <= 2020:\n            continue\n        \n        # Since product of parents is less than 2019, we move to find children ages\n        for first_child_age in range(1, 100):\n            second_child_age = first_child_age + 2\n            third_child_age = first_child_age + 4\n            product_children = first_child_age * second_child_age * third_child_age\n            \n            # Check if product of children's ages next year will be greater than 2020\n            if (first_child_age + 1) * (second_child_age + 1) * (third_child_age + 1) <= 2020:\n                continue\n            \n            # If both products also less than 2019, we got a potential solution.\n            if product_parents < 2019 and product_children < 2019:\n                sum_ages = john_age + mary_age + first_child_age + second_child_age + third_child_age\n                return sum_ages\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote the original sum of money as x.\n\n    # According to the problem statement:\n    # x - 36 is the money left after buying plates.\n    # 3/4 * (x - 36) is the money spent on cups.\n    # Then, 1/6 * x is the money left after all spending.\n\n    # Therefore, we can set up the equation:\n    # x - 36 - 3/4 * (x - 36) = 1/6 * x\n\n    # From the equation above, we can find x:\n    x = symbols('x')\n    equation = Eq(x - 36 - 3/4 * (x - 36), 1/6 * x)\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        A = (100*perm[0] + 10*perm[1] + perm[2]) + \\\n            (100*perm[1] + 10*perm[2] + perm[3]) + \\\n            (100*perm[2] + 10*perm[3] + perm[4]) + \\\n            (100*perm[3] + 10*perm[4] + perm[5]) + \\\n            (100*perm[4] + 10*perm[5] + perm[6]) + \\\n            (100*perm[5] + 10*perm[6] + perm[7]) + \\\n            (100*perm[6] + 10*perm[7] + perm[8])\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert the time the bicyclist takes to travel 1 mile into total seconds\n    time_per_mile_seconds = 2 * 60 + 30\n\n    # Convert 1 hour into seconds\n    one_hour_seconds = 1 * 60 * 60\n\n    # Calculate the number of miles traveled in 1 hour\n    miles_in_one_hour = one_hour_seconds / time_per_mile_seconds\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Calculate the number of integers with varying digits\n    # Start with single digit '8'\n    count = 1\n    # Then two digits '80' through '89': 10 options\n    count += 10\n    # Then three digits '800' through '899': 100 options\n    count += 100\n    # Continue until the count exceeds 2012\n    \n    num_digits = 1 # Initial number of digits\n    while count < 2012:\n        num_digits += 1\n        count += 10**(num_digits - 1)\n    \n    # Find how many numbers to count back to get to the 2012th number\n    remaining = count - 2012\n    \n    # Now, we need to construct the number:\n    # Start with '8' and the appropriate number of '9's, then subtract the remaining count\n    number = int('8' + '9' * (num_digits - 1)) - remaining\n    \n    return number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    n = 5  # Number of students (terms in the sequence)\n    # Let the middle term be 'm', which is the mean of the arithmetic sequence\n    # Then the five terms are: (m - 2), (m - 1), m, (m + 1), (m + 2)\n    # The sum of an arithmetic sequence is given by: n * m\n    # n * m = 160\n    \n    m = 160 // n\n    # The largest number of balls is (m + 2), the last term in the sequence\n    return m + 2\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    count = 0\n    # Since there are minimum numbers of envelopes required for boxes A, B, C,\n    # we start the count for each of these from their minimum and go up to 15 minus the sum of the other minimums.\n    for A in range(2, 15):\n        for B in range(4, 15):\n            for C in range(3, 15):\n                D = 15 - (A + B + C)\n                # D cannot have a negative number of envelopes, so we break if that's the case.\n                if D < 0:\n                    break\n                # If the count for box D is 0 or higher, we have a valid distribution.\n                if A + B + C + D == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    return 25 / 100 * 80\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    tax = 7000\n    first_bracket_taxed = 20000 * 0.15\n    remaining_tax = tax - first_bracket_taxed\n    income_over_first_bracket = remaining_tax / 0.20\n    total_income = 20000 + income_over_first_bracket\n\n    return total_income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2*(x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * 1/10\n    return result\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n    \n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    # We want to find the GCD of the three rope lengths\n    ans = gcd(gcd(length1, length2), length3)\n    \n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    # Let x be the number of packs of potato chips each store originally had.\n    # After Store A sold 290 packs, it had x - 290 packs left.\n    # At this point, Store B had 3 times as many packs as Store A, so Store B had 3 * (x - 290) packs.\n    # We also know that Store B originally had x packs, since the stores had an equal number.\n    # Setting up the equation: x - 290 = 3 * (x - 290)\n    # Now, solve for x to find out how many packs each store had originally.\n\n    x = symbols('x')\n    equation = Eq(x - 290, 3 * (x - 290))  # The equation derived from the problem\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n    num_packs_each_store = solution_x[0]\n\n    # The total number of packs of potato chips both stores had altogether at first is 2 * x.\n    total_packs = 2 * num_packs_each_store\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys  # Girls count\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_went_home = 5\n    boys_went_home = 3\n    girls_went_home = students_went_home - boys_went_home\n\n    # Calculate the number of girls who had a packed lunch\n    girls_packed_lunch = girls - girls_school_lunch - girls_went_home\n\n    # Total number of students who had a packed lunch\n    total_packed_lunch = boys_packed_lunch + girls_packed_lunch\n\n    return total_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolates_cost = 20 * 6\n    total_milk_chocolates_cost = 20 * 5\n    total_strawberry_chocolates_cost = 20 * 4\n\n    total_cost = total_dark_chocolates_cost + total_milk_chocolates_cost + total_strawberry_chocolates_cost\n    total_chocolates = 20 + 20 + 20\n\n    average_cost = total_cost / total_chocolates\n\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_first_5_days = 720\n    total_sets_needed = 3600\n    rate_per_day = sets_made_in_first_5_days / 5\n    remaining_sets_needed = total_sets_needed - sets_made_in_first_5_days\n    remaining_days = remaining_sets_needed / rate_per_day\n    total_days = remaining_days + 5\n    return total_days\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal_repr = str(Fraction(1, 13))\n    recurring_cycle = decimal_repr[2:]  # Remove the \"0.\"\n    cycle_length = len(recurring_cycle)\n    target_position = 2022 % cycle_length  # Modulus to find position in cycle\n    if target_position == 0:  # If modulus is 0, take last digit of cycle\n        target_position = cycle_length\n    # Subtract 1 because string is indexed from 0\n    ans = int(recurring_cycle[target_position - 1])\n    return ans\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return 100 // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # Speed of the train in meters per second\n    time = 19   # Time in seconds to pass the tree\n\n    length = speed * time  # Distance formula: speed = distance/time\n\n    return length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let the rate of drinking of the man be `m` barrels per day\n    # Let the rate of drinking of the wife be `w` barrels per day\n\n    # If the man can finish one barrel in 15 days, his rate is 1/15 barrel per day\n    m = 1/15\n    \n    # Together, they can finish the barrel in 12 days, their combined rate is 1/12 barrel per day\n    combined_rate = 1/12\n    \n    # The wife's drinking rate is the difference between the combined rate and the man's rate\n    w = combined_rate - m\n    \n    # The wife will take 1/w days to finish the barrel on her own\n    wife_days = 1/w\n\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    discount_quantity = 3\n    free_books = 1\n    desired_books = 5\n    paid_books = desired_books - (desired_books // (discount_quantity + free_books))\n    \n    total_price = paid_books * book_price\n\n    return total_price\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_number = symbols('sam_number')\n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n\n    sam_number_solution = solve(equation, sam_number)\n\n    return sam_number_solution[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n    distance = mount_fuji_tip - turpan_depression_base\n    return distance\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    # Let's denote children as x\n    children = symbols('children')\n\n    # According to the question\n    women = (2/5) * total_people\n    men = 3 * children\n\n    # There were 190 more women than children\n    equation1 = Eq(women, children + 190)\n\n    # Since total people is the sum of men, women, and children\n    equation2 = Eq(total_people, men + women + children)\n\n    # Now let's substitute the value of men from the first relation\n    # And women from the given fraction into the total people equation\n    substituted_eqn = equation2.subs({women: (2/5) * total_people, men: 3*children})\n\n    # Solving the system of equations equation1 and substituted_eqn\n    solutions = solve((equation1, substituted_eqn), (children, total_people))\n\n    return solutions[total_people]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    total_pencils = 35 * total_pupils  # Average * Number of pupils\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n    \n    # Let the number of boys be x\n    # Then, the number of girls will be (total_pupils - x)\n    \n    # Set up the equation:\n    # boys_pencils_avg * x + girls_pencils_avg * (total_pupils - x) = total_pencils\n    # 20x + 60(40 - x) = 35 * 40\n\n    # Solve for x\n    x = (girls_pencils_avg * total_pupils - total_pencils) / (girls_pencils_avg - boys_pencils_avg)\n\n    return int(x)\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        num = int('1' * i)\n        total += num\n    return total % 100\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20  # students who participate only in coding competition\n    math_only = 21 - 20    # students who participate only in math competition\n    both_competitions = 20 # students who participate in both competitions\n\n    total_students = coding_only + math_only + both_competitions\n\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    ans = 0\n    for a in range(2, 15):\n        for b in range(4, 15):\n            for c in range(3, 15):\n                d = 15 - (a + b + c)\n                if d >= 0:\n                    ans += 1\n    return ans\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    result_without_decimal = symbols('x')\n    \n    wrong_division = 2.11 * result_without_decimal\n    correct_division = wrong_division + 98.01\n\n    # Since the wrong result is 98.01 less than the true result,\n    # we solve for x using the equation 2.11 * x = correct_result - 98.01\n    equation = Eq(wrong_division, correct_division - 98.01)\n\n    true_result = solve(equation, result_without_decimal)[0]\n\n    return true_result\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variables for price per apple and banana\n    price_apple, price_banana = symbols('price_apple price_banana')\n\n    # Translate the conditions into equations\n    equation1 = Eq(6 * price_apple + 7 * price_banana, 8 * price_apple + 4 * price_banana)\n    equation2 = Eq(6 * price_apple + 7 * price_banana, 8 * price_apple)\n\n    # Solve the system of equations for the price of one apple and one banana\n    solutions = solve((equation1, equation2), (price_apple, price_banana))\n\n    # Calculate the number of bananas he can afford for the price of 8 apples\n    num_bananas = Eq(8 * price_apple, price_banana * solutions[price_banana])\n\n    # Solve to find the number of bananas\n    bananas = solve(num_bananas)[0]\n\n    return bananas\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    both_competitors = math_competitors + art_competitors - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john, choon_mui = symbols('john choon_mui')\n\n    # Define the equations\n    equation1 = Eq(john, choon_mui)\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    # Calculate how much money John had left\n    john_left = solutions[john] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    speed_mph = 65  # speed in miles per hour\n    time_hours = 15 / 60  # time in hours (15 minutes)\n    distance_miles = speed_mph * time_hours  # distance in miles\n\n    miles_to_km_factor = 1.60934  # conversion factor from miles to kilometers\n    distance_km = distance_miles * miles_to_km_factor  # distance in kilometers\n\n    return distance_km\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for male and female visitors\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # Create equations based on the given information\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    equation2 = Eq(female_first_day * 1.15 + male_first_day * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10\n    increased_amount = original_amount + (original_amount * percentage_increase / 100)\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # actual yacht length in meters\n    scale_ratio = 1 / 20  # scale of the model (1:20)\n    model_length_m = actual_length_m * scale_ratio  # length in meters\n    model_length_cm = model_length_m * 100  # converting length from meters to centimeters\n\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n    \n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return seconds_per_week\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Derangement for n objects, !n, also known as subfactorial or \"number of complete derangements\"\n    # For 4 people, the formula for derangement is !4 = 4! * (1 - 1/1! + 1/2! - 1/3! + 1/4!)\n    n = 4\n    derangement = int(factorial(n) * (1 - 1/factorial(1) + 1/factorial(2) - 1/factorial(3) + 1/factorial(4)))\n    return derangement\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                count += 1\n                ways.append((die1, die2))\n\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_height = 11\n    day_climb = 3\n    night_slide = 1\n    net_climb = day_climb - night_slide\n    days = 0\n\n    while True:\n        days += 1\n        total_height -= day_climb\n        if total_height <= 0:\n            break\n        total_height += night_slide\n\n    return days\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n    \n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    # Let's denote the initial number of eggs as x.\n    # After the first sale, he sells x/2 + 5 eggs, leaving him with x - (x/2 + 5) eggs.\n    # After the second sale, he sells (x - (x/2 + 5))/2 - 4, leaving him with 15 eggs.\n    # We set up the equation: 15 = x - [(x/2 + 5) + ((x - (x/2 + 5))/2 - 4)]\n    \n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = 15 - (x - ((x/2 + 5) + ((x - (x/2 + 5))/2 - 4)))\n    \n    # Solving the equation will give us the initial number of eggs x\n    initial_eggs = solve(equation, x)\n    \n    # Return the solution which must be a positive whole number\n    ans = [egg for egg in initial_eggs if egg > 0 and egg.is_integer]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_pay = hourly_rate * 8 * 5  # assuming a week has 5 working days\n    remaining_debt = 700 - weekly_pay\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    # Since the number provides the same remainder when divided by \n    # both 7 and 13, we can use the Chinese Remainder Theorem.\n    # We are looking for a number x such that:\n    # x ≡ 2 (mod 7)\n    # x ≡ 2 (mod 13)\n    \n    for number in range(2, 100, 7):  # We increment by 7 since it must leave a remainder of 2 when divided by 7\n        if number % 13 == 2:  # We check if the remainder is also 2 when divided by 13\n            return number\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n\n    # The vertical form of the given puzzle seems to be:\n    #    A\n    #  + A\n    #  + A\n    # -----\n    #   AAA (which is the number 111, 222, etc., since this is the addition of three identical single-digit numbers)\n\n    # We need to find such a number AAA that is divisible by 3 (as it is sum of three As)\n    # and is three digits with all the same digits. We check numbers from 111 to 999.\n\n    for num in range(1, 10):\n        if num * 111 % 3 == 0:\n            solution = num * 111\n            break\n\n    return solution\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for number in range(100, 1000):\n        num_str = str(number)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    # The number of days in 2 weeks is 2*7\n    arjun_period = 14\n    # Yahya's haircut period is already in days\n    yahya_period = 10\n    \n    # Least Common Multiple of the two periods\n    days_until_same_day = lcm(arjun_period, yahya_period)\n    \n    return days_until_same_day\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Jack runs the first 280 meters at a speed of 7 meters per second\n    time_for_first_part = 280 / 7\n\n    # Jack runs the middle 400 meters at a speed of 5 meters per second\n    time_for_middle_part = 400 / 5\n\n    # Jack runs the last part (800-280-400=120 meters) at a speed of 8 meters per second\n    time_for_last_part = 120 / 8\n\n    # The total time spent is the sum of time spent in each part\n    total_time = time_for_first_part + time_for_middle_part + time_for_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(0, 10):\n        for digit2 in range(0, 10):\n            number = int(f\"2{digit1}9{digit2}\")\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_between_trees = 7\n    num_trees = (highway_length - distance_between_trees) // distance_between_trees\n    \n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    return 34 + 2 - 11 + 14\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note_value = 50\n    loss_due_to_fake_note = fake_note_value\n    total_loss = cost_of_shoes + loss_due_to_fake_note\n\n    return total_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1  # (99 - 21) / 1 + 1\n    sum_seq = (first_term + last_term) * num_terms // 2  # (21 + 99) * num_terms / 2\n    return sum_seq\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    result = (5/7) * 112\n    return result\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, we need to account for the worst-case scenario where we draw all blue balls first.\n    # Since there are 6 blue balls, drawing 6 balls could still result in no white balls being drawn.\n    # Therefore, we need to draw one more ball to guarantee a white ball.\n\n    num_blue_balls = 6\n\n    # To guarantee a white ball, we need to draw one more than the total number of blue balls.\n    balls_needed = num_blue_balls + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat students A, B, and C as a single entity because they must always be together.\n    # Hence, we have 8 entities to arrange - ABC group and the other 7 students.\n    entities_to_arrange = 8\n    \n    # There are 8! ways to arrange these 8 entities.\n    total_arrangements = factorial(entities_to_arrange)\n    \n    # Now, within the ABC group, A, B, and C can be arranged in 3! ways.\n    abc_arrangements = factorial(3)\n    \n    # The total number of ways the students can line up is:\n    # The number of ways to arrange the 8 entities multiplied by\n    # the number of ways to arrange A, B, and C within their group.\n    ans = total_arrangements * abc_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    num_str = ''  # Initialize the string that will contain the concatenated numbers\n    for i in range(1, 31):  # Concatenate all numbers from 1 to 30\n        num_str += str(i)\n\n    # Since we need the smallest number after removing 46 digits,\n    # we should remove the least significant digits first. That is,\n    # remove the digits from the right end of the string.\n    smallest_num_str = num_str[:-46]  # Remove the last 46 characters\n\n    # Now, to ensure we don't have a leading '0', which would make the number invalid,\n    # we remove digits from the right end until we encounter a non-zero digit\n    while smallest_num_str.endswith('0'):\n        smallest_num_str = smallest_num_str[:-1]\n\n    # Convert the resulting string back into an integer\n    ans = int(smallest_num_str)\n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    ans = comb(15, 4)\n    return ans\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    ans = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return ans\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    return 2000 - 222\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20  # Length of each short ruler in centimeters\n    overlap_length = 3       # Length of the overlapping part in centimeters\n    num_rulers = 3           # Number of short rulers\n\n    # Total length of the bundle is the sum of lengths of individual rulers\n    # minus the lengths of the overlapping parts (two overlaps for three rulers)\n    total_length = (short_ruler_length * num_rulers) - (overlap_length * (num_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n\n    while used_cups >= 7:\n        # Make new cups from used cups\n        new_cups_made = used_cups // 7\n        new_cups += new_cups_made\n\n        # Subtract the used cups that were turned into new cups\n        used_cups -= new_cups_made * 7\n\n        # Add the new cups to the pool of used cups for further recycling\n        used_cups += new_cups_made\n\n    return new_cups\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert meters to centimeters\n    spacing_cm = 15\n    first_cauliflower_offset_cm = 20\n    cauliflower_width_cm = 45\n\n    # Calculate the available space by subtracting the space for the first cauliflower and its offset\n    available_space_cm = plot_length_cm - first_cauliflower_offset_cm - cauliflower_width_cm\n\n    # The number of cauliflowers is the number of spaces between them plus one for the first cauliflower\n    num_cauliflowers = available_space_cm // spacing_cm + 1\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Time spent jogging: 7:30 AM - 6:30 AM = 1 hour\n    jogging_time = 1  # hour\n    jogging_speed = 6  # miles per hour\n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Time spent walking: 9:30 AM - 7:30 AM = 2 hours\n    walking_time = 2  # hours\n    walking_speed = 5  # miles per hour\n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    a_students = 8\n    b_students = 12\n    c_students = 20\n\n    # Calculate GCD of the three class sizes\n    common_factor = gcd(gcd(a_students, b_students), c_students)\n\n    return common_factor\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    badminton, bowling = symbols('badminton bowling')\n    \n    equation1 = Eq(badminton, 3 * bowling)  # Badminton Club had thrice as many members as the Bowling Club\n    equation2 = Eq(badminton - 36, bowling - 4)  # After members left, both clubs have the same number of members\n    \n    solutions = solve((equation1, equation2), (badminton, bowling))\n    \n    # Number of members each club had in the end (after members left)\n    badminton_end = solutions[badminton] - 36\n    bowling_end = solutions[bowling] - 4\n    \n    return badminton_end, bowling_end\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Number of pages used per day\n    days_1_to_3_pages = 14\n    days_4_to_5_pages = 9\n    day_6_pages = 12\n    # Number of days\n    days_1_to_3_count = 3\n    days_4_to_5_count = 2\n    day_6_count = 1\n\n    # Total pages used\n    total_pages = (days_1_to_3_pages * days_1_to_3_count) + \\\n                  (days_4_to_5_pages * days_4_to_5_count) + \\\n                  (day_6_pages * day_6_count)\n\n    # Total days\n    total_days = days_1_to_3_count + days_4_to_5_count + day_6_count\n\n    # Average pages used per day\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4e2  # 3.4 * 10^2 meters/second\n    distance = 1.5e3        # 1.5 kilometers converted to meters\n\n    time = distance / speed_of_sound  # Time = Distance / Speed\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n\n    return difference\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    count_2 = 0\n    count_5 = 0\n    \n    for number in range(301, 1000):\n        while number % 2 == 0:\n            count_2 += 1\n            number //= 2\n        while number % 5 == 0:\n            count_5 += 1\n            number //= 5\n    \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_sum = 504\n    average = 126\n    difference = 6\n\n    # Since the average is 126 and there is a total of 504, we can find the number of cards\n    num_cards = total_sum // average\n\n    # The numbers are in an arithmetic sequence as the difference between the greatest and smallest is 6\n    # Given an odd starting point and odd difference, all numbers will be odd\n    # Since there are 4 cards, the numbers are structured [smallest, ..., greatest]\n    # The difference between adjacent cards will be difference/(num_cards-1)\n    adjacent_difference = difference // (num_cards - 1)\n\n    # Calculate the smallest number\n    # smallest + (num_cards - 1) * adjacent_difference = greatest\n    # total_sum = smallest + (smallest + adjacent_difference) + ... + (smallest + 3 * adjacent_difference)\n    # total_sum = 4 * smallest + 6 * adjacent_difference\n    # smallest = (total_sum - 6 * adjacent_difference) / 4\n    smallest_number = (total_sum - 6 * adjacent_difference) // num_cards\n\n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n    \n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    result = sum(1 / i for i in range(10, 20))\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 1\n    return x\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and (num - 1) % 13 == 0:\n            return num\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds\n    rabbit_speed = 330 # m/min\n    turtle_speed = 30 # m/min\n    \n    # Initial head start for the rabbit\n    rabbit_headstart = 10 * rabbit_speed # m\n\n    # Time for the rabbit to finish the race after sleeping\n    time_after_sleep_to_finish = (6990 - rabbit_headstart) / rabbit_speed \n    \n    # Total time rabbit actually ran\n    total_rabbit_running_time = 10 + time_after_sleep_to_finish # min\n\n    # Time the turtle runs\n    total_turtle_running_time = 6990 / turtle_speed # min\n\n    # Difference in running time between the rabbit and the turtle\n    time_difference = total_rabbit_running_time - total_turtle_running_time\n\n    # If time difference is negative, rabbit wins, otherwise turtle wins\n    if time_difference < 0:\n        winner = \"rabbit\"\n        # Distance between when the rabbit finishes\n        distance_between = abs(time_difference) * turtle_speed\n    else:\n        winner = \"turtle\"\n        # Distance between when the turtle finishes\n        distance_between = abs(time_difference) * rabbit_speed\n\n    return (winner, distance_between)\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    only_english = 20 - 15\n    only_math = 35 - 15\n    both_classes = 15\n    total_students = only_english + only_math + both_classes\n    return total_students\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of girls as g and the number of boys as b.\n    g, b = symbols('g b')\n    # According to the problem, we have these equations:\n    # b = g + 90 (there are 90 more boys than girls)\n    # g + b = 1690 (total number of pupils)\n    \n    # Solve the two equations\n    solution_gb = solve((Eq(b, g + 90), Eq(g + b, 1690)), (g, b))\n    # Get the number of girls and boys\n    num_girls = solution_gb[g]\n    num_boys = solution_gb[b]\n    \n    # Now, split the girls and boys into swimmers and non-swimmers\n    # Let's denote girls who can swim as gs and girls who cannot swim as gn.\n    # Let's denote boys who can swim as bs and boys who cannot swim as bn.\n    \n    # The ratio of girls who can swim to who cannot is 31:49, so\n    # gs / gn = 31 / 49\n    # gs = 31/80 * g\n    # gn = 49/80 * g\n    \n    # The number of boys who can swim is 120 less than the non-swimmer boys\n    # bs = bn - 120\n    # But we also know that b = bs + bn\n    \n    # Combine these relations to express bs and bn\n    bs, bn = symbols('bs bn')\n    \n    # bs + bn = b\n    # bs = bn - 120\n    \n    solution_bs_bn = solve((Eq(bs + bn, num_boys), Eq(bs, bn - 120)), (bs, bn))\n    num_boys_swim = solution_bs_bn[bs]\n    num_boys_nswim = solution_bs_bn[bn]\n    \n    # Calculate the number of girl swimmers and non-swimmers\n    num_girls_swim = (31 / 80) * num_girls\n    num_girls_nswim = (49 / 80) * num_girls\n    \n    # Finally, the number of pupils who cannot swim is the sum of girls and boys who cannot swim.\n    num_cannot_swim = num_girls_nswim + num_boys_nswim\n    \n    return int(num_cannot_swim)\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 0.10\n    number_of_years = 2020 - 2018\n    \n    initial_amount = final_amount / ((1 + increase_rate) ** number_of_years)\n    \n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial as fact\n\ndef solution():\n    total_ways = fact(7) # Total ways to arrange 7 people\n    block_ways = fact(3) # Ways to arrange the 3 people who don't want to stand next to each other in a block\n    total_block_ways = block_ways * fact(5) # Ways to arrange the block of 3 people + 4 remaining people\n    ans = total_ways - total_block_ways\n    return ans\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    n = 789\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    n = 20 - 10 + 1  # Number of terms\n    sum_seq = n * (10 + 20) // 2  # Sum of arithmetic sequence formula: n/2 * (first term + last term)\n    return sum_seq\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    num_rows = 25\n    first_term = 10\n    # To find the common difference, we use the fact that the fourth term a_4 = a_1 + 3d.\n    fourth_term = 25\n    common_difference = (fourth_term - first_term) // 3\n   \n    # Total number of athletes is the sum of the arithmetic series:\n    # Sum = n/2 * (2*a_1 + (n - 1)*d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    average_A = 76\n    average_B = 67\n    average_combined = 70\n    students_A = 20\n\n    # total score for team A\n    total_A = average_A * students_A\n\n    # Let x be the number of students in team B\n    # total score for team combined\n    total_combined = average_combined * (students_A + x)\n\n    # Because the total combined score is the sum of scores from both teams,\n    # we have the equation: total_A + average_B * x = total_combined\n    # Solving for x gives us the number of students in team B\n\n    # Rewrite the equation\n    # average_B * x = total_combined - total_A\n    # x = (total_combined - total_A) / average_B\n\n    # Calculate total_combined placeholder using a variable x\n    x = symbols('x')\n    total_combined_placeholder = average_combined * (students_A + x)\n\n    # Now we set up the equation and solve for x\n    equation = Eq(total_A + average_B * x, total_combined_placeholder)\n\n    # Solve the equation\n    num_students_B = solve(equation, x)[0]\n\n    return num_students_B\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    # The pigeonhole principle dictates that if n items are put into m containers, with n > m, \n    # then at least one container must contain more than one item.\n    # To guarantee that the school with the most participants had at least 4 participants\n    # We need to find the maximum number of schools such that when the 100 participants\n    # are evenly distributed, no school gets 4 or more participants.\n\n    # If there were s schools and each had exactly 3 participants, that would make a total of 3 * s participants.\n    # We are looking for the largest s such that 3 * s is still less than or equal to 100.\n    # If 3 * s exceeded 100, then by the pigeonhole principle, at least one school would have to have 4 or more participants.\n    \n    # Therefore, find the largest number s such that 3 * s <= 100\n    max_schools = 100 // 3  # This gives the integer division result of 100 / 3\n    \n    return max_schools\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            # Convert the hour and minute into string format and combine them\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count if there are at least two '4's in the time\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    min_product = float('inf')\n\n    for perm in permutations(digits, 6):\n        num1 = 100 * perm[0] + 10 * perm[1] + perm[2]\n        num2 = 100 * perm[3] + 10 * perm[4] + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_steps_per_roll = 6  # Maximum steps one can go with a regular dice\n    desired_position = 25  # The 25th position which Sam wants to reach\n    times = (desired_position - 1) // max_steps_per_roll + 1\n\n    return times\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for i in range(15):\n        if 0 <= 15 - i <= 9:\n            return i * 10 + (15 - i)\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    perms = permutations(range(1, 10), 7)  # Generate all 7-digit permutations of 1-9\n    max_product = -1  # Initialize max product\n    min_product = float('inf')  # Initialize min product\n\n    for perm in perms:\n        abcd = perm[0]*1000 + perm[1]*100 + perm[2]*10 + perm[3]  # Form the 4-digit number\n        efg = perm[4]*100 + perm[5]*10 + perm[6]  # Form the 3-digit number\n\n        # Check if their sum is equal to 1993\n        if abcd + efg == 1993:\n            product = abcd * efg\n            max_product = max(max_product, product)  # Update max product\n            min_product = min(min_product, product)  # Update min product\n\n    return max_product - min_product\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    common_difference = -50\n\n    # Using the formula for the nth term of an arithmetic sequence\n    # last_term = first_term + (n - 1) * common_difference\n    # Find the number of terms n where last_term is the smallest term greater than or equal to 19\n    n = 1\n    while first_term + (n - 1) * common_difference >= 19:\n        n += 1\n    n -= 1  # Adjust because loop exits after exceeding the limit\n\n    # Calculate the sum using the formula for the sum of the first n terms of an arithmetic sequence\n    # sum = n/2 * (first_term + last_term)\n    # where last_term is the nth term\n    last_term = first_term + (n - 1) * common_difference\n    sum_of_sequence = n * (first_term + last_term) / 2\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    result = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return result\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_per_hour = 40\n    slip_back = 10\n    effective_climb = climb_per_hour - slip_back\n\n    # Hours taken to reach just below the top\n    hours_just_below = (depth - climb_per_hour) // effective_climb\n\n    # Final hour to get out of the hole\n    final_hour = 1\n\n    total_hours = hours_just_below + final_hour\n    \n    return total_hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "def solution():\n    from sympy import isprime\n\n    # Start with the largest possible number less than 30 and go down\n    for num in range(29, 0, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    missing_number = 3989 - (3000 + 80 + 9)\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # calculate the rate per typist\n    words_per_minute = 6000 / 20\n    typists = 5\n    rate_per_typist = words_per_minute / typists\n    \n    # number of typists reduced to\n    remaining_typists = 5 - 2\n    \n    # total rate for remaining typists\n    total_rate_remaining_typists = rate_per_typist * remaining_typists\n\n    # total words to type\n    total_words = 9000\n    \n    # time needed for remaining typists to type out 9000 words\n    time_needed = total_words / total_rate_remaining_typists\n    \n    return time_needed\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    total_money = 0.96 * 8\n    price_per_lettuce = total_money / 6\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    initial_plants = 11\n    remaining_plants = 3\n    total_distance = 30\n\n    initial_intervals = initial_plants - 1\n    new_intervals = remaining_plants - 1\n\n    initial_spacing = total_distance / initial_intervals\n    new_spacing = initial_spacing * initial_intervals / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # Convert start time to minutes past midnight\n    end_time = 14 * 60 + 5    # Convert end time to minutes past midnight\n    duration = end_time - start_time  # Duration of call in minutes\n    cost_per_minute = 14  # Cost in pence per minute\n\n    total_cost = duration * cost_per_minute  # Total cost of the call\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    percentage = 40 / 100\n    number = 320\n    result = percentage * number\n    return result\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17/10/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('20/12/2023', '%d/%m/%Y')\n    \n    sundays_count = 0\n    \n    while start_date <= end_date:\n        if start_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        start_date += timedelta(days=1)\n    \n    # Subtract one if the starting day itself is a Sunday\n    if datetime(2023, 10, 17).weekday() == 6:\n        sundays_count -= 1\n\n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_payment = pen_price + ruler_price\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # There are three positions for the digits (hundreds, tens, ones).\n    # Each position can either be a 2 or a 3.\n    # However, at least one 2 and at least one 3 must be present.\n    \n    # Case 1: All digits are the same - not allowed\n    # Case 2: Two digits are 2 and one digit is 3 - there are 3 ways to place digit 3.\n    # Case 3: Two digits are 3 and one digit is 2 - there are 3 ways to place digit 2.\n    \n    # Total ways is the sum of case 2 and case 3.\n    \n    count = 3 + 3  # Each case provides 3 combinations\n    return count\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    import math\n    ans = math.factorial(5)  # As there are 5 skiboards and 5 people, this is a permutation of 5 items taken 5 at a time\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percent_increase = (increase / original_price) * 100\n    return percent_increase\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of strawberry tarts\n    # Then 2x will be the number of apple tarts\n    strawberry_tart_cost, apple_tart_cost = symbols('strawberry_tart_cost apple_tart_cost')\n\n    # Given that a strawberry tart costs $0.40 more than an apple tart\n    equation1 = Eq(strawberry_tart_cost, apple_tart_cost + 0.40)\n\n    # The total amount spent on tarts is $40\n    # Total cost for strawberry tarts = x * (apple_tart_cost + 0.40)\n    # Total cost for apple tarts = 2x * apple_tart_cost\n    # The total is the sum of both, which equals $40\n    total_cost = 40\n    equation2 = Eq(strawberry_tart_cost + 2 * apple_tart_cost, total_cost)\n\n    # Solve the system of equations for the price of each tart\n    solutions = solve((equation1, equation2), (strawberry_tart_cost, apple_tart_cost))\n\n    # To get the number of tarts bought, divide the total cost\n    # by the cost of one tart (either strawberry or apple).\n    # It's the same due to the equal amount spent.\n    # Thus, strawberry_tart_cost / (apple_tart_cost + 0.40) gives number of strawberry tarts\n    number_of_strawberry_tarts = total_cost / (solutions[apple_tart_cost] + 0.40)\n    number_of_apple_tarts = 2 * number_of_strawberry_tarts\n\n    return int(number_of_strawberry_tarts + number_of_apple_tarts)\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import gcd\n    from fractions import Fraction\n\n    # Convert minutes to seconds for easier calculation\n    total_seconds = 9 * 60 # 9 minutes\n\n    # Convert the times for the other traffic lights to seconds\n    first_light_sec = Fraction(1, 2) * 60\n    second_light_sec = Fraction(3, 4) * 60\n\n    # Calculate the Least Common Multiple (LCM) of the first two traffic lights\n    lcm = (first_light_sec * second_light_sec) // gcd(first_light_sec, second_light_sec)\n\n    # Find the smallest time for the third light that is more than 30 seconds\n    # and also a factor of the total seconds (9 minutes)\n    third_light_sec = min(filter(lambda t: t >= 30 and total_seconds % t == 0,\n                                 range(30, total_seconds + 1, 30)))\n\n    return third_light_sec\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n    \n    henry_position_from_right = total_children - henry_position_from_left + 1\n    children_between_henry_tony = abs(henry_position_from_right - tony_position_from_right) - 1\n    \n    return children_between_henry_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres = metres * 1000\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    amount_lent = 4\n    amount_paid_back = 0.30 * amount_lent\n    amount_owed = amount_lent - amount_paid_back\n    return amount_owed\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    # Let the total number of puzzle pieces be x.\n    # On the first day, Tim fits 20% of x, which is 0.2 * x.\n    # On the second day, Tim fits another 60 pieces, so the total fitted is 0.2 * x + 60.\n    # The ratio of fitted to unfitted pieces is 2:5, which means fitted pieces is 2 parts, and unfitted is 5 parts.\n    # Since fitted + unfitted = total, we have 2 parts + 5 parts = 7 parts.\n    # Therefore, the fitted pieces (0.2 * x + 60) represent 2/7 of the total pieces.\n    # Forming the equation: (0.2 * x + 60) = (2/7) * x\n    # Solving for x gives us the total number of pieces.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.2 * x + 60, 2/7 * x)\n    total_pieces = solve(equation, x)[0]\n\n    return total_pieces\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15\n    rose_speed = 10\n    time_hours = 10\n\n    distance = (jack_speed + rose_speed) * time_hours\n\n    return distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Each cat has 4 legs, each dog has 4 legs, the rabbit has 4 legs, and each bird has 2 legs.\n    # Let's denote the number of birds as b.\n    # Total legs from cats and dogs: 4 cats * 4 legs each + 2 dogs * 4 legs each = 16 legs\n    # Total legs from the rabbit: 1 rabbit * 4 legs = 4 legs\n    # Equation for the total number of legs including birds: 16 (cats and dogs) + 4 (rabbit) + 2b (birds) = 28\n    # Let's solve for b (number of birds).\n    birds_legs = 28 - (16 + 4)\n    b = birds_legs // 2  # Each bird has 2 legs, we use integer division\n    return b\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # Consider only odd factors\n        if 24 % i == 0:\n            n += i\n    return n\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_initial = 40\n\n    # Melvin gained cards from Nelson\n    melvin_gained = (5/8) * melvin_initial\n    melvin_after_gain = melvin_initial + melvin_gained\n\n    # Melvin and Nelson each lost cards to Oliver\n    melvin_lost = (1/4) * melvin_initial\n    nelson_lost = melvin_lost\n    oliver_gained = melvin_lost * 2  # Melvin and Nelson's loss is Oliver's gain\n\n    # After first round of losses\n    melvin_after_loss = melvin_after_gain - melvin_lost\n    nelson_after_loss = -nelson_lost  # Nelson only loses here, initial amount unknown\n    oliver_after_gain = oliver_gained\n\n    # Last round, Melvin gained cards from Nelson\n    melvin_final_gain = (1/8) * melvin_initial\n    nelson_final_loss = -melvin_final_gain\n\n    # Final amounts\n    melvin_final = melvin_after_loss + melvin_final_gain\n    nelson_final = nelson_after_loss + nelson_final_loss\n    oliver_final = oliver_after_gain\n\n    # Since they all have the same amount\n    total_cards = 3 * melvin_final\n\n    return total_cards\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2  # Common difference of the arithmetic sequence\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    ans = (2 * 5) + (1 * 5) == (2 + 1) * 5\n    return ans\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Let x be the age Polly is when the sum of her children's ages equals her own age.\n    # When Polly is x years old, her first child is x - 20, her second x - 22, and her third x - 24.\n    # According to the problem, x = (x - 20) + (x - 22) + (x - 24)\n    # Simplify the equation: x = 3x - 66\n    # Solve for x: 2x = 66\n    x = 66 // 2\n    \n    return x\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from sympy import divisors\n\n    # List of numbers on the cards\n    cards = [6, 12, 35, 175, 245, 300]\n    \n    # Find all divisors for each product\n    divisors_products = {card: set(divisors(card)) for card in cards}\n    \n    # Check for any two cards that share divisors with any three other cards\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            product_two_cards = cards[i] * cards[j]\n            divisors_two = divisors_products[cards[i]].union(divisors_products[cards[j]])\n            for k in range(len(cards)):\n                if k != i and k != j:\n                    for l in range(k+1, len(cards)):\n                        if l != i and l != j:\n                            for m in range(l+1, len(cards)):\n                                if m != i and m != j:\n                                    product_three_cards = cards[k] * cards[l] * cards[m]\n                                    divisors_three = divisors_products[cards[k]].union(divisors_products[cards[l]]).union(divisors_products[cards[m]])\n                                    # If the divisors match, excluding the 1 and the product itself, then we've found a match\n                                    if divisors_two == divisors_three and product_two_cards == product_three_cards:\n                                        # Return the one card that was not picked\n                                        picked_cards = {cards[i], cards[j], cards[k], cards[l], cards[m]}\n                                        for card in cards:\n                                            if card not in picked_cards:\n                                                return card\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiple = 5\n\n    weight_without_presents = total_weight / (multiple - 1)\n\n    return weight_without_presents\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # If four years ago the combined age was 10, then now the combined age is 10 + 4 * 2\n    combined_age_now = 10 + 4 * 2\n    \n    # Two years from now, each dog will be 2 years older, so the combined age will be \n    combined_age_in_2_years = combined_age_now + 2 * 2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    # Initialize the answer to None; if conditions aren't met, answer will remain None\n    ans = None\n    # Iterate through the number of possible big boxes from 0 to 9\n    for big_boxes in range(10):\n        # Calculate how many small boxes would be needed\n        small_boxes = (50 - 6 * big_boxes) / 4\n        # Check if we used less than 10 boxes and small_boxes is an integer (fully packed)\n        if big_boxes + small_boxes < 10 and small_boxes.is_integer():\n            ans = big_boxes\n            break\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let's denote the smaller number as x and larger number as y.\n    # According to the problem we have two equations:\n    # y - x = 39 (1)\n    # x + y = 59 (2)\n    # We can solve these equations to find x and y.\n\n    # Adding both equations (1) and (2) we get:\n    # y - x + x + y = 39 + 59\n    # 2y = 98\n    # y = 98 / 2\n    y = 98 / 2\n\n    # Now we can find x by substituting the value of y in equation (2)\n    # x + y = 59\n    # x = 59 - y\n    x = 59 - y\n\n    return x\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution # Here, ans references the function but does not call it. It should be called with specific x and y values."
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    amount = 340\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n\n    years = 0\n    while mother_age != 3 * (justin_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n    # If Cora gives Qingle 8 sweets, Qingle will have 4 more sweets than Cora.\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    # Solve the equation\n    solution = solve(equation1, (cora, qingle))\n\n    # The difference in number of sweets they have at first\n    difference = solution[cora] - solution[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(1, 10):  # Since a is a digit in hundred's place, it can't be 0.\n        for b in range(10):  # b is a digit so it can be from 0 to 9.\n            for c in range(10):  # c is also a digit so it can be from 0 to 9.\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Prime factorization of the given products\n    product_AB = 30  # 2 * 3 * 5\n    product_BC = 35  # 5 * 7\n    product_CA = 42  # 2 * 3 * 7\n\n    # Calculate the square of the product of A, B, and C\n    product_ABC_squared = product_AB * product_BC * product_CA  # 2^2 * 3^2 * 5^2 * 7^2\n\n    # Since A, B, and C are natural numbers, the product of A, B, and C is the cube root of the square\n    from math import isqrt\n\n    product_ABC = isqrt(product_ABC_squared)\n\n    # Now we can find individual numbers by dividing the product_ABC by one of the products\n    A = product_ABC // product_BC  # product_ABC / BC\n    B = product_ABC // product_CA  # product_ABC / CA\n    C = product_ABC // product_AB  # product_ABC / AB\n\n    # Sum of A, B, and C\n    return A + B + C\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + 3 * other_faucet_rate\n    hours_to_fill = 1 / combined_rate\n    return hours_to_fill\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, b (the y-intercept) is 0.\n    b = 0\n    # Now we only need to find the slope m, which we can find using the point (4,8).\n    # The slope m can be found by the formula m = y2 - y1 / x2 - x1.\n    # We use the origin (0,0) as point 1 (x1, y1) and (4,8) as point 2 (x2, y2).\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n    m = (y2 - y1) / (x2 - x1)\n    # Now we can write the equation as y = mx + b\n    # Substituting the values of m and b we found:\n    return f\"y = {m}x + {b}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, eric = symbols('jane eric')\n    \n    # Initial ratio of Jane's to Eric's seashells\n    initial_ratio = Eq(jane, 5/7 * eric)\n    \n    # Ratio after Eric gives Jane 6 seashells\n    new_ratio = Eq((jane + 6) / (eric - 6), 11/13)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (jane, eric))\n    \n    # Total number of seashells they have\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    warren_adds = 20\n    naida_subtracts = 1\n    largest_number = 0\n    current_number = 0\n\n    while warren_adds >= 1:\n        current_number += warren_adds\n        largest_number = max(largest_number, current_number)\n        \n        current_number -= naida_subtracts\n        largest_number = max(largest_number, current_number)\n\n        warren_adds -= 1\n        naida_subtracts += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    min_even = float('inf')\n\n    # Create all permutations of the digits\n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Check if the last digit is even (to make the entire number even)\n            num = int(''.join(map(str, perm)))  # Convert tuple to integer\n            if num < min_even and len(str(num)) == 5:  # Check if this number is the smallest even 5-digit number found so far\n                min_even = num\n\n    return min_even\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n    piano_and_violin = piano_players // 4\n\n    neither = total_pupils - (piano_players + violin_players - piano_and_violin)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_period = 11\n\n    total_amount = principal * (1 + rate_of_interest * time_period)\n\n    return total_amount\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    factors = [48, 925, 38, 435]\n    two_count = 0\n    five_count = 0\n\n    for factor in factors:\n        while factor % 2 == 0:\n            two_count += 1\n            factor //= 2\n        while factor % 5 == 0:\n            five_count += 1\n            factor //= 5\n    \n    # The number of zeros is determined by the minimum of two_count and five_count\n    zeros = min(two_count, five_count)\n\n    return zeros\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import sympy as sp\n\n    # Isosceles right triangle has sides in the ratio of 1:1:sqrt(2) and the area A1 = 1/2 * 2 * 2\n    A1 = 2\n\n    # The region where the distance from the point to the right angle vertex is less than 1\n    # is a quarter circle with radius 1\n    # Area of quarter circle A2 = 1/4 * pi * 1^2\n    A2 = sp.pi / 4\n\n    # Probability P = A2 / A1\n    P = A2 / A1\n\n    return float(P)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10, 4):\n            B = A - 1\n            C = int(D / 4)\n            if len({A, B, C, D}) == 4:\n                original = A * 1000 + B * 100 + C * 10 + D\n                reversed_num = D * 1000 + C * 100 + B * 10 + A\n                if original * 4 == reversed_num:\n                    return original\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    initial = (result - 10) * 3\n    return initial\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    school_leave_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_ride_duration = timedelta(minutes=18)\n    home_arrival_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    first_walk_duration = bus_catch_time - school_leave_time\n    bus_dropoff_time = bus_catch_time + bus_ride_duration\n    second_walk_duration = home_arrival_time - bus_dropoff_time\n\n    total_walk_duration = first_walk_duration + second_walk_duration\n    total_walk_minutes = total_walk_duration.total_seconds() // 60\n\n    return int(total_walk_minutes)\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_sum = mean_value * (len(numbers) + 1)\n    a = total_sum - sum(numbers)\n\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    value = 2030452\n    missing_number = (value - 30000 - 452) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    result = 0.20 * 8880\n    return result\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    half_ribbon_length_m = (ribbon_length_cm / 2) / 100\n    return half_ribbon_length_m\n    \nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 1 + 7  # including Victoria\n    total_rows = 1 + 1 + 8  # including the row Victoria is in\n    total_pupils = pupils_per_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # According to the Pigeonhole Principle, to guarantee one pair of the same colour,\n    # Lina might draw one sock of each colour before she gets a matching pair.\n    # Since there are three colours, she would draw one of each colour in the worst case.\n    # After having one of each colour, the next sock she takes out must match one of them.\n\n    # 1 white + 1 grey + 1 black (1 of each to ensure no pair)\n    # The next (4th) sock MUST be a pair with one of the three.\n    socks_needed = 3 + 1  # Total number of socks to guarantee a pair\n\n    return socks_needed\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq((number + 3) / 4 * 9, 81)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / ((20 + 11 - i) * (i)) for i in range(11, 16))\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = 3/4 * total_candy\n    remaining_candy = total_candy - given_to_lily\n    given_to_brother = 1/3 * remaining_candy\n    final_candy = remaining_candy - given_to_brother\n    return final_candy\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    distance_travelled = 6300 - 1800\n    time_taken = 30  # minutes from 8.00am to 8.30am\n\n    speed = distance_travelled / time_taken  # in meters per minute\n\n    remaining_distance = 1800\n    time_to_reach = remaining_distance / speed  # time in minutes to reach friend's house from 8.30am\n\n    # Time at 8.30am in minutes since midnight\n    time_at_830am = (8 * 60) + 30  \n\n    # Calculate the time he reaches at his friend's house\n    arrival_time_in_minutes = time_at_830am + time_to_reach\n\n    # Convert time back to hours and minutes\n    arrival_hour = int(arrival_time_in_minutes // 60)\n    arrival_minute = int(arrival_time_in_minutes % 60)\n\n    # Format the time to HH:MM\n    arrival_time = f\"{arrival_hour:02d}:{arrival_minute:02d}\"\n\n    return arrival_time\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables for percentage of sugar in Mrs. Smith's second drink\n    x = symbols('x')\n\n    # Mr. Smith's total sugar\n    total_sugar_smith = (300 * 0.50) + (600 * 0.20)  # 50% of 300 mL + 20% of 600 mL\n\n    # Mrs. Smith's total sugar without the second drink\n    total_sugar_mrs_smith_without_x = (700 * 0.10)  # 10% of 700 mL\n\n    # Total volume of drinks mixed by Mr. Smith and Mrs. Smith\n    total_volume_smith = 300 + 600  # 900 mL\n    total_volume_mrs_smith = 700 + 300  # 1000 mL\n\n    # Setting the equation for the equality of sugar percentage in both drinks\n    equation = Eq((total_sugar_mrs_smith_without_x + 300 * (x / 100)), total_sugar_smith)\n\n    # Solving the equation for x\n    solution_x = solve(equation, x)\n\n    # Rounding the result to two decimal places\n    x_value = round(solution_x[0], 2)\n\n    return x_value\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_7 = 7\n    may_age_10 = 10\n    kenny_age_diff = 2\n\n    # Kenny's brother's age when May is 10\n    kenny_brother = symbols('kenny_brother')\n    \n    # Kenny's age when May is 10\n    kenny_age = kenny_brother + kenny_age_diff\n    \n    # The sum of the ages of Kenny and his brother when May is 10 will be 3 times May's age\n    age_eq = Eq((kenny_age + kenny_brother), 3 * may_age_10)\n\n    # Solve for Kenny's brother's age\n    kenny_brother_age_10 = solve(age_eq, kenny_brother)[0]\n\n    # Kenny's age when May is 10\n    kenny_age_10 = kenny_brother_age_10 + kenny_age_diff\n    \n    # Age difference between Kenny and May this year\n    age_difference = kenny_age_10 - may_age_7\n\n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Price per individual muffin and donut\n    price_muffin = 6 / 3\n    price_donut = 10 / 7\n    \n    # Search for the amount of money Amy had initially by trying different amounts\n    for money in range(1, 10000):  # Arbitrary upper limit to money\n        # Calculate the number of muffins and donuts Amy could buy with half her money\n        donuts = (money / 2) // price_donut\n        muffins = (money / 2) // price_muffin\n        \n        # Check if the difference is 54\n        if donuts - muffins == 54:\n            return money\n    \n    return \"Not enough trials\"\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n\n    total_pancakes = pancakes_per_minute * minutes\n\n    return total_pancakes\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    min_apples_per_child = 1\n    \n    # Since each child gets at least one apple, we give out the minimum first.\n    total_apples -= children * min_apples_per_child\n    \n    # Now distribute the remaining apples to the child who gets the most.\n    most_apples_for_one_child = total_apples + min_apples_per_child  # We add back one because we initially subtracted one for each child\n    \n    return most_apples_for_one_child\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_difference = 80 - 40\n\n    # Calculate mum's age in 2008\n    mum_age_2008 = 40 + (2008 - 1996)\n\n    # Calculate grandmother's age when mum was 25\n    grandmothers_age_when_mum_was_25 = (25 + age_difference)\n\n    return grandmothers_age_when_mum_was_25\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Cost\n    cost_price = 10 # in pounds\n    \n    # Total weight of sweets and weight per bag\n    total_weight = 5 * 1000  # converting 5 kg to grams\n    weight_per_bag = 250     # in grams\n    \n    # Number of bags\n    number_of_bags = total_weight / weight_per_bag\n    \n    # Selling price per bag\n    selling_price_per_bag = 0.65 # in pounds (65 pence converted to pounds)\n    \n    # Total selling price\n    total_selling_price = number_of_bags * selling_price_per_bag\n    \n    # Profit calculation\n    profit = total_selling_price - cost_price\n    \n    # Percentage profit calculation\n    percentage_profit = (profit / cost_price) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # There are 5 intervals between the 4th and 9th teeth.\n    num_intervals = 9 - 4\n\n    # The length of each interval is 30mm/5 = 6mm.\n    interval_length = 30 / num_intervals\n\n    # There are 99 intervals in total for a comb with 100 teeth.\n    total_intervals = 100 - 1\n\n    # Calculate the total length of the comb in mm.\n    total_length_mm = total_intervals * interval_length\n\n    # Convert the length to cm.\n    total_length_cm = total_length_mm / 10\n\n    return total_length_cm\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5!  # Total ways to arrange 5 people without restrictions\n    adjacent_ways = 2 * 4!  # Ways to arrange where the 2 specific people are adjacent\n    \n    ans = total_ways - adjacent_ways\n    return ans\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    from sympy import symbols, solve\n\n    zyan, xuan_ying, sicheng = symbols('zyan xuan_ying sicheng')\n\n    eq = Eq(zyan + xuan_ying + sicheng, 5)\n    \n    # Since each person gets at least one ice-cream, we subtract one for each\n    # and distribute the remaining two among three friends\n    sols = solve([eq], (zyan, xuan_ying, sicheng))\n\n    # The solution will give us the number of non-negative solutions for the equation\n    # This is equivalent to distributing 2 identical items to 3 people which can be\n    # calculated using the \"stars and bars\" method (n+k-1)C(k-1) where n is the\n    # number of items and k is the number of people.\n    ways = math.comb(2 + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = (2 / 3) * total_vegetables\n    remaining_vegetables = total_vegetables - monday_sales\n    tuesday_sales = (2 / 5) * remaining_vegetables\n    total_sales = monday_sales + tuesday_sales\n    return total_sales\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of water in containers P and Q\n    P, Q = symbols('P Q')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(P, 4 * Q) # P has 4 times as much water as Q\n    equation2 = Eq(P, Q + 2700) # P has 2700ml more water than Q\n    \n    # Solve the equations for Q\n    solutions = solve((equation1, equation2), (P, Q))\n    \n    return solutions[Q]\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # We need to ensure getting 16 balls of one color and 13 balls of another color\n    # Worst case scenario: we pick 15 balls from each color without getting 16 of any\n    # So for each of the 5 colors, we could have up to 15 balls\n    # After picking 15 from each, the next ball we pick will be the 16th of that color\n    max_each_color_without_16th = 15\n    num_colors = 5\n\n    # After ensuring one color with 16 balls, pick up to 12 more balls from other colors without getting 13 of any\n    max_others_without_13th = 12\n\n    # We ensure getting 16 of one color, then pick in the worst case without getting 13 of another\n    balls_picked = (max_each_color_without_16th * num_colors) + 1 + (max_others_without_13th * (num_colors - 1))\n\n    # To this count we just need to add 1 to ensure we have 13 balls of another color\n    # because at this point we have ensured 12 of each of the remaining four colors\n    balls_picked += 1\n\n    return balls_picked\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_away = total_biscuits / 4\n    remaining = total_biscuits - given_away\n\n    return int(remaining)\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define unknowns\n    A, B, C = symbols('A B C')\n\n    # Define equations based on the given relationships\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # B is what the question is asking for, so we return that\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the cost of one table, and c be the cost of one chair\n    t, c = symbols('t c')\n    \n    # Equation 1: The cost of 2 tables and 5 chairs is £220\n    equation1 = Eq(2 * t + 5 * c, 220)\n    \n    # Equation 2: The cost of 1 table is the same as the cost of 3 chairs\n    equation2 = Eq(t, 3 * c)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n    \n    # Since we want the cost of each table, we select t from the solutions\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    # List of numbers\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    # Calculate the sum using the built-in sum() function\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    from sympy import solve, symbols\n    \n    # Define the symbol for the total amount of money Julie had initially\n    julie_money = symbols('julie_money')\n    \n    # Create the equation based on the given information\n    # Julie spent 1.55 on coffee and 2.25 on a muffin\n    # After spending, she has four fifths of her money left\n    # (julie_money - (1.55 + 2.25)) = (4/5) * julie_money\n    equation = julie_money - (1.55 + 2.25) - (4/5) * julie_money\n    \n    # Solve the equation for julie_money\n    solution = solve(equation, julie_money)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann = 3\n    sana = 6\n    nancy = 8\n    total_coins = joann + sana + nancy\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Lucas and his mother start 20 miles apart\n    total_distance = 20\n    remaining_distance = 4\n    \n    # The ratio of the speeds of Lucas to his mother is 3:5\n    lucas_speed_ratio = 3\n    mother_speed_ratio = 5\n    total_ratio = lucas_speed_ratio + mother_speed_ratio\n    \n    # They are now 4 miles apart, so they have covered 20 - 4 = 16 miles together\n    # We use the speed ratio to distribute this distance between Lucas and his mother\n    distance_covered_together = total_distance - remaining_distance\n    lucas_walk = (distance_covered_together * lucas_speed_ratio) / total_ratio\n    \n    return lucas_walk\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    num_terms = 30\n    first_term = 50\n    last_term = first_term - (num_terms - 1)\n\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n\n    # Finding the unit rate\n    pizzas_per_person = pizzas_initial / people_initial\n\n    # Finding the total pizzas needed for 35 people\n    pizzas_needed = pizzas_per_person * people_final\n\n    return int(pizzas_needed) if pizzas_needed.is_integer() else round(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    while num_teams > 1:\n        num_teams /= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n    \n    count = 0\n    for number in range(1, 2017):\n        if math.sqrt(number * 72).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Julie, Marion, and Ethan's earnings\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Create equations based on the given information\n    equation1 = Eq(marion, 2 * julie)                   # Marion earns twice the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)                     # Ethan earns five times the amount Julie earns\n    equation3 = Eq(ethan - marion, 168)                  # The difference between Ethan and Marion's earnings is $168\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    # Calculate the total earnings\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    \n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    # each big class student gets 2 apples and 3 oranges\n    # each small class student gets 2 apples and 2 oranges\n    # total apples = 2*big + 2*small = 48\n    # total oranges = 3*big + 2*small = 55\n\n    equation1 = Eq(2 * big + 2 * small, 48)\n    equation2 = Eq(3 * big + 2 * small, 55)\n\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[small]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    total_lollipops = 10\n    total_cost = cost_per_lollipop * total_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (0, 5),\n        (6, 7),\n        (7, 8)\n    ]\n\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    d, e = symbols('d e') # Danny's and Efron's current ages\n    y = symbols('y')      # Number of years after which the ratio will be 5:3\n\n    # System of equations based on the problem statement\n    equation1 = Eq(d - e, 30)\n    equation2 = Eq(d / e, 8 / 3)\n    \n    # Find the current ages of Danny and Efron\n    current_ages = solve((equation1, equation2), (d, e))\n    d_age = current_ages[d]\n    e_age = current_ages[e]\n\n    # Ratio equation after 'y' years\n    equation3 = Eq((d_age + y) / (e_age + y), 5 / 3)\n\n    # Solve for 'y', the number of years after which the ratio will be 5:3\n    future_ratio = solve((equation3), (y))\n\n    return future_ratio[0]\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    butter_per_cookie = 40 / 100\n    butter_needed = butter_per_cookie * 150\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    ans = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return ans\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    group_stage_games_per_group = (4 * (4 - 1)) // 2  # Single round-robin among 4 teams\n    total_group_stage_games = group_stage_games_per_group * 8  # 8 groups\n\n    knockout_games = 16 - 1  # Knockout rounds from last 16 to the final, one team remains, so 15 matches\n\n    total_games = total_group_stage_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10): # second_digit < 5, otherwise first_digit would not be a single digit\n        first_digit = 1 + 2 * second_digit\n        if first_digit < 10: # first_digit needs to be a single digit\n            for third_digit in range(10): # third_digit from 0 to 9\n                if 9 < first_digit + second_digit + third_digit < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n    \n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    n = 1\n    matches = 0\n    while matches < 15:\n        matches = n * (n - 1) // 2\n        if matches == 15:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    total_combinations = pencils * rulers * pens\n\n    return total_combinations\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) is the number of incorrect answers\n    # We have the equation points_correct * x + points_incorrect * (total_questions - x) = total_points\n    # Solving for x gives us the number of correct answers\n    for x in range(total_questions+1):\n        if points_correct * x + points_incorrect * (total_questions - x) == total_points:\n            return x\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorts, t_shirt = symbols('shorts t_shirt')\n    \n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n    \n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n    \n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if 0 <= ones < 10:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n    \n    return third_term\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of triangles as t, then the number of quadrilaterals as t + 82.\n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n    \n    # Since there are given numbers of pentagons,\n    pentagons_number = 2\n    \n    # Each triangle has 3 sides, each quadrilateral has 4 sides, each pentagon has 5 sides,\n    # And total sides are given to be 394. We can set up the equation as follows:\n    sides_equation = Eq(3 * triangles + 4 * (triangles + 82) + 5 * pentagons_number, 394)\n\n    # Now, solve for the number of triangles\n    triangles_solution = solve(sides_equation, triangles)[0]\n    \n    # Subtract the number of triangles and pentagons from total shapes to get the quadrilaterals.\n    quadrilaterals_number = triangles_solution + 82\n\n    return quadrilaterals_number\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the number of sweets Rachel originally has, and a represent Alice's.\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 sweets, they will have the same number.\n    equation1 = Eq(r - 10, a + 10)\n    \n    # After eating 8 sweets each, Rachel has 3 times as many as Alice.\n    equation2 = Eq(r - 8 - (a - 8), 3 * (a - 8))\n    \n    # Solve the equations for r and a.\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate the total number of sweets they originally had.\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # since there are 4 lamp posts, there are 3 gaps between them\n\n    total_distance = distance_between_each * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for i in range(105, 1000, lcm):  # Start from 105 as it's the smallest 3-digit number divisible by 3, 5, and 7\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of teams\n    total_teams = 150 // 3\n    \n    # Number of teams with only 1 boy\n    one_boy_teams = 15\n    \n    # Number of teams with two or more boys\n    two_or_more_boys_teams = 27\n    \n    # Number of all-boy teams is twice the number of all-girl teams\n    # Let x be the number of all-girl teams\n    # Then the number of all-boy teams is 2x\n    # The total number of teams is the sum of teams with one boy, teams with two or more boys, and all-boy teams plus all-girl teams\n    # total_teams = one_boy_teams + two_or_more_boys_teams + all_boys_teams + all_girls_teams\n    # total_teams = one_boy_teams + two_or_more_boys_teams + 2x + x\n    # Solving for x gives:\n    all_girl_teams = total_teams - one_boy_teams - two_or_more_boys_teams\n    \n    # Using the condition that all-boy teams is twice the all-girl teams, we have:\n    # 2x = all_girl_teams\n    all_boy_teams = 2 * all_girl_teams\n    \n    # The rest of the teams must have one boy only\n    one_boy_only_teams = total_teams - all_boy_teams - all_girl_teams\n    \n    # Number of girls is 3 times the number of all-girl teams plus 2 times the number of teams with exactly one boy\n    num_girls = 3 * all_girl_teams + 2 * one_boy_only_teams\n    \n    return num_girls\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Time difference between arriving at 10 am and 8 am is 2 hours\n    time_difference = 2\n    \n    # Distance is the same, so we can create a relationship between speed and time\n    # Using the formula: Distance = Speed * Time\n    \n    # Let the time to travel at 10 km/h be t hours; thus at 15 km/h it is (t - 2) hours\n    # The distances are equal at different speeds:\n    # 10 km/h * t = 15 km/h * (t - 2)\n    \n    # Solve for t\n    t = (15 * 2) / (15 - 10)\n    \n    # Now, to find the speed needed to arrive at 9 am\n    # It means he needs to arrive 1 hour earlier than the time he arrives when cycling at 10 km/h\n    # Therefore, the time to travel will be (t - 1)\n    # Let the required speed be s; thus, the distance can also be written as s * (t - 1)\n    \n    # Since the distance is the same, we have the equation:\n    # 10 km/h * t = s * (t - 1)\n    # Solve for the speed s\n    s = 10 * t / (t - 1)\n\n    return s\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_digits = sum(int(digit) for digit in str(product))\n    return sum_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert both numbers from base 7 to base 10\n    num1 = int(str(61), 7)\n    num2 = int(str(34), 7)\n\n    # Perform subtraction in base 10\n    result_base10 = num1 - num2\n\n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # The worst case is that Dilly keeps picking up gloves without getting a matching pair.\n    # We need to ensure that eventually she will pick a matching pair.\n\n    # There are two colors: blue and green.\n\n    # Maximum number of gloves Dilly could pick without getting a matching pair is:\n    # 1 left-hand blue + 2 left-hand green + 3 right-hand blue = 6\n\n    # But when she picks the next glove, she will definitely have a matching pair because\n    # either she will pick a right-hand green glove, making the total of gloves with her 7,\n    # or she will pick any other glove which will make a pair with the gloves she already has.\n\n    # Therefore, the minimum number of gloves Dilly should pick to be sure of having a matching pair is 7.\n    ans = 7\n\n    return ans\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_each_initially = 12\n    additional_students = 1\n    total_candies = initial_students * candies_each_initially\n    total_students_after = initial_students + additional_students\n    candies_each_after = total_candies // total_students_after\n    return candies_each_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    \n    jacob_height = (raj_height + david_height) / 2\n    \n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    num_cards = 0\n    while True:\n        num_cards += 1\n        if num_cards % 4 == 3 and num_cards % 5 == 4 and num_cards % 7 == 6:\n            break\n    return num_cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_price = 120\n    depreciation_rate = 0.04\n    years = 5\n    final_value = initial_price * (1 - depreciation_rate) ** years\n    \n    return round(final_value, 4)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_students = 0\n    boys_more_than_girls = 52\n\n    for girls in range(1, 500, 2):  # Assumed max limit for girls would not exceed 500\n        boys = girls + 2  # Boys are on the outer layer, hence one more row and column\n        total_boys = boys * boys\n        total_girls = girls * girls\n        if total_boys - total_girls == boys_more_than_girls:\n            total_students = total_boys + total_girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for unknowns\n    eugene_pins_before, yuna_pins_before = symbols('eugene_pins_before yuna_pins_before')\n\n    # Equation 1: Eugene had 3 times as many pins as Yuna initially.\n    equation1 = Eq(eugene_pins_before, 3 * yuna_pins_before)\n\n    # Equation 2: After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene.\n    equation2 = Eq(yuna_pins_before + 76, (7/9) * eugene_pins_before)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (eugene_pins_before, yuna_pins_before))\n\n    return solutions[eugene_pins_before]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_freq = {letter: word.count(letter) for letter in set(word)}\n    total_ways = factorial(len(word))\n    for freq in letter_freq.values():\n        total_ways //= factorial(freq)\n    return total_ways\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8\n    hundreds = 2\n\n    number = hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # The divisibility rule for 9 states that a number is divisible by 9 if the sum\n    # of its digits is divisible by 9. Let's sum the known digits first.\n    sum_of_digits = 1 + 2 + 3 + 4 + 5  # sum of the first five digits\n    # We need to find the value for A such that the whole number is divisible by 9\n    for A in range(10):\n        if (sum_of_digits + A) % 9 == 0:\n            # The divisibility rule for 4 states that a number is divisible by 4 if its\n            # last two digits form a number that is divisible by 4.\n            # Since A affects only the last digit, we only need to consider the last two digits.\n            last_two_digits = 10 * 5 + A  # the last two digits are \"5A\"\n            remainder = last_two_digits % 4\n            return remainder\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Since Kelly starts first, to ensure her victory,\n    # she needs to leave a multiple of 3 matches after her first turn.\n    # This way, no matter whether Dan picks 1 or 2 matches,\n    # Kelly can always pick 2 or 1 matches to maintain the multiple of 3.\n    \n    # To make 11 a multiple of 3 after her turn,\n    # Kelly needs to pick a certain number of matches so that\n    # the number of matches left is a multiple of 3.\n    # 11 is not a multiple of 3, but 9 is the closest multiple of 3 below 11.\n    # So Kelly needs to take away (11 - 9) matches, which is 2.\n    matches_to_take = 11 % 3\n\n    # If matches_to_take is 0, it means that Kelly should take away 2\n    # because taking away 1 will give Dan the winning position.\n    matches_to_take = 2 if matches_to_take == 0 else matches_to_take\n\n    return matches_to_take\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    \n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n    \n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    solutions = solve(equation, (total_flowers))\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    # Convert mixed numbers to improper fractions for easier computation\n    numerator_1 = (5 * 7 + 1) / 7\n    numerator_2 = (3 * 11 + 3) / 11\n    numerator_3 = (1 * 23 + 13) / 23\n    denominator_1 = (3 * 7 + 3) / 7\n    denominator_2 = (2 * 11 + 2) / 11\n    denominator_3 = (1 * 23 + 1) / 23\n\n    # Add fractions in the numerator and denominator separately\n    numerator_total = numerator_1 + numerator_2 + numerator_3\n    denominator_total = denominator_1 + denominator_2 + denominator_3\n\n    # Divide the total of the numerator by the total of the denominator to get the answer\n    ans = numerator_total / denominator_total\n\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n    num_kids = 3\n    ans = factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    # Let's assign a variable to the square\n    square = symbols('square')\n    \n    # Now we set up the equation, making one side equal to zero\n    equation = Eq(4 * square - 3 - 65, 0)\n    \n    # Solving the equation\n    solutions = solve(equation, square)\n    \n    # Since we are expecting a single value we can return the first (and only) solution\n    return solutions[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    # Let's assume all vehicles are motorcycles; \n    # they would have 2 wheels each.\n    # So, 27 motorcycles would have a total of 27 * 2 = 54 wheels.\n    all_motorcycles_wheels = total_vehicles * 2\n    \n    # Now the number of extra wheels must be because of cars.\n    # Every car adds 2 more wheels than a motorcycle.\n    extra_wheels = total_wheels - all_motorcycles_wheels\n    # The number of cars will be the extra wheels divided by 2\n    # because every car has 2 wheels more than a motorcycle.\n    num_cars = extra_wheels // 2\n\n    return num_cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    # Let's denote the number of stickers Nicole had originally as 'n'\n    \n    # We know the following:\n    # 1. Nicole had more stickers than Jason initially, so n > 20\n    # 2. After giving Jason 18 stickers, Jason had 38 stickers (20 + 18)\n    # 3. After giving Jason 18 stickers, Nicole had 5 fewer stickers than Jason\n    \n    # Therefore, we can express Nicole's amount after giving the stickers as (n - 18)\n    # And we know that (n - 18) should be 5 stickers less than what Jason has after receiving 18 stickers\n    # So, (n - 18) = (38 - 5)\n\n    # Let's solve for the original number of stickers 'n'\n    jason_after = 20 + 18\n    nicole_after = jason_after - 5\n    nicole_original = nicole_after + 18\n\n    return nicole_original\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume: V = l * b * h\n\n    # Increase in length: l_new = l * 1.1\n    # Reduction in breadth: b_new = b * (4/5)\n    # Ratio of new height to original height: h_new = h * (11/10)\n\n    # New volume: V_new = l_new * b_new * h_new\n    # V_new = (l * 1.1) * (b * 4/5) * (h * 11/10)\n\n    # New volume as a percentage of original volume\n    # V_new_percent = (V_new / V) * 100\n    # V_new_percent = ((l * 1.1 * b * 4/5 * h * 11/10) / (l * b * h)) * 100\n    # V_new_percent = (1.1 * 4/5 * 11/10) * 100\n\n    new_volume_percentage = (1.1 * 4/5 * 11/10) * 100\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    for i in range(0, 39): # Maximum possible quantity for 2g weights to keep total ≤ 77g\n        for j in range(0, 26): # Maximum possible quantity for 3g weights to keep total ≤ 77g\n            if (2 * i + 3 * j) == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    number_of_intervals = 9\n\n    # Convert the total distance to meters\n    total_distance_m = total_distance_km * 1000\n\n    # Calculate the distance between each marshal\n    distance_between_marshals = total_distance_m / (number_of_intervals + 1)\n\n    return distance_between_marshals\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n\n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    size_of_square = int(total_tiles ** 0.5)\n    \n    red_tiles = sum((2*i + 1) ** 2 for i in range(size_of_square // 2))\n    green_tiles = total_tiles - red_tiles\n\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n\n    correct_average = correct_total / 7\n\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    # Calculate the interest for the first year\n    first_year_interest = principal * rate\n    # Add the first year's interest to the principal for the second year\n    second_year_principal = principal + first_year_interest\n    # Calculate the interest for the second year\n    second_year_interest = second_year_principal * rate\n    # Return the total interest earned in two years (first year + second year)\n    return first_year_interest + second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_to_paint_one_picture = 10  # minutes\n    total_time_available = 80  # one hour and twenty minutes in minutes\n\n    number_of_pictures = total_time_available / time_to_paint_one_picture\n\n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_number = 1 + 4/7\n    return round(decimal_number, 1)\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurrent_sequence = \"428571\"\n    index = (69 - 1) % len(recurrent_sequence)\n    ans = int(recurrent_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let initial cost be represented by 100 units (for simplicity)\n    initial_cost = 100\n    # He planned to earn a 50% profit overall\n    planned_profit = initial_cost * 0.50\n\n    # On the first day, he sold 70% of goods at a 50% profit\n    first_day_sales = initial_cost * 0.70\n    first_day_profit = first_day_sales * 0.50\n    \n    # Remaining goods (30%) to be sold on the second day\n    second_day_goods = initial_cost * 0.30\n    second_day_sales_cost = second_day_goods\n\n    # Total profit made was 82% of the planned profit\n    total_profit = planned_profit * 0.82\n\n    # Calculate the profit made on the second day\n    second_day_profit = total_profit - first_day_profit\n    \n    # If the profit of the second day is negative, it implies a discount (loss)\n    discount = (second_day_sales_cost - second_day_profit) - second_day_sales_cost\n    \n    # Calculate the discount rate\n    discount_rate = (discount / second_day_sales_cost) * 100\n    \n    return discount_rate\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_mass = 300 + 200  # Total mass of the combined solution\n    mass_salt_dylan = 300 * 0.35  # Mass of salt in Dylan's solution\n    mass_salt_daisy = 200 * 0.50  # Mass of salt in Daisy's solution\n    total_mass_salt = mass_salt_dylan + mass_salt_daisy  # Total mass of salt in the combined solution\n    \n    concentration = total_mass_salt / total_mass  # Concentration of the resulting solution\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let the number of widgets Megacorp sold in 2014 be x\n    # Therefore, Vastco sold 68% more, which is 1.68x in 2014\n    # In 2015, Vastco's sales rose by 32%, so it sold 1.32 * 1.68x = 2.2176x\n    # In 2015, Vastco only sold 44% more widgets than Megacorp, so if y is the number of widgets Megacorp sold in 2015,\n    # Vastco sold 1.44y in 2015.\n    # Set 1.44y equal to 2.2176x to find the relationship between x and y\n    # 1.44y = 2.2176x => y = (2.2176/1.44) * x = 1.54x\n    # Megacorp's sales rose to y in 2015 from x in 2014, which is a (y - x) / x increase\n    # Percentage increase = ((1.54x - x) / x) * 100%\n    percentage_increase = ((1.54 - 1) / 1) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    sweets_left = y / 2\n    return sweets_left\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n\n    while empty_bottles >= 4:\n        new_bottles, empty_bottles = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles += new_bottles\n\n        if empty_bottles == 3:\n            total_bottles += 1  # borrow one empty bottle\n            empty_bottles = 0  # return the borrowed one\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Count the number of digits for numbers with 1 digit\n    digits_1_digit = 9  # There are 9 one-digit numbers: 1-9\n\n    # Count the number of digits for numbers with 2 digits\n    digits_2_digits = (99 - 10 + 1) * 2  # Numbers from 10 to 99, each has 2 digits\n\n    # Count the number of digits for numbers with 3 digits\n    digits_3_digits = (113 - 100 + 1) * 3  # Numbers from 100 to 113, each has 3 digits\n\n    # Sum all the digits together\n    total_digits = digits_1_digit + digits_2_digits + digits_3_digits\n\n    return total_digits\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for children's ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Given equations\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(older_daughter - younger_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n    \n    # Possible age range based on conditions\n    for os in range(1, 55):\n        for ys in range(1, 55):\n            for od in range(1, 55):\n                for yd in range(1, 55):\n                    # Check if all equations are satisfied\n                    if ys - os == 3 and od - yd == 2 and ys == 2 * od and os + ys + od + yd == 55:\n                        # Return youngest child's age\n                        return min(os, ys, od, yd)\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n\n    equation = Eq(pearls / 2 + pearls / 4 + pearls / 6 + 3, pearls)\n\n    total_pearls = solve(equation, pearls)\n\n    return total_pearls[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_workers = 3\n    single_worker_days = workers * days_for_workers\n    return single_worker_days\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n    \n    brother_erasers = (total_erasers - difference) // 2\n\n    return brother_erasers\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(4)  # Total ways to arrange 4 people without restriction\n    ways_with_all_same = 3  # 3 ways if all choose the same entrance\n    ways_with_one_different = factorial(3) * 3 * 3  # 3 entrances to choose from, permute the other 3 people and for each there are 3 entrances\n    ways_with_two_different = factorial(3) * 3 * (3-1) * 2 / 2  # Choose 2 out of 3 entrances, arrange 3 people in those, and divide by 2 because order among the two entrances doesn't matter\n\n    # Total different ways - the ways that all are the same - the ways that only one person is at a different entrance\n    ans = total_ways - ways_with_all_same - ways_with_one_different - ways_with_two_different\n    \n    return int(ans)\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    final_earnings = 92\n\n    # Let's assume all glasses were delivered safely, that is he earns $1 per glass\n    # Then we will subtract $2 for every broken glass ($1 for not delivering safely + $1 for the penalty)\n    # So for each broken glass, he earns $2 less\n    # We calculate the number of broken glasses by deducting the final earnings from total earnings if none were broken\n\n    broken_glasses = (total_glasses - final_earnings) // 2\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round-robin competition each team plays every other team once.\n    # If there are n teams, the total number of games played is n*(n-1)/2.\n    # We need to find n such that n*(n-1)/2 = 45.\n\n    # Initialize count of teams to 1\n    n = 1\n    while True:\n        # Check if the current count of teams produces 45 games\n        if n * (n - 1) // 2 == 45:\n            break\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayank_number = symbols('mayank_number')\n\n    equation = Eq(2 * mayank_number + 4, 40)\n\n    solution = solve(equation, mayank_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boats, people_per_boat, total_people = symbols('boats people_per_boat total_people')\n    \n    equation1 = Eq(people_per_boat, 9)\n    equation2 = Eq(total_people / (boats - 1), people_per_boat)\n    equation3 = Eq(total_people / (boats + 1), 6)\n\n    solutions = solve((equation1, equation2, equation3), (boats, people_per_boat, total_people))\n\n    return solutions[total_people]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_of_7_bananas = 98  # in pence\n    cost_of_1_banana = cost_of_7_bananas / 7\n    cost_of_15_bananas = cost_of_1_banana * 15\n\n    money_given = 12 * 100  # convert pounds to pence\n    change_in_pence = money_given - cost_of_15_bananas\n\n    change_in_pounds = change_in_pence / 100  # convert pence back to pounds\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for x in range(1, 57, 2):\n        if x + (x + 2) + (x + 4) == 57:\n            return x\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Since the equation (number * 3 = 6) needs to be solved, we can conclude that the number must be 2.\n    number = 6 / 3\n    return int(number)\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x in range(3, 16):\n        for y in range(3, 16):\n            z = 15 - x - y\n            if z >= 3 and x <= y <= z:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    return 37 * 4 * 5\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, peter = symbols('john peter')\n\n    # John had 180 more cookies than Peter\n    eq1 = Eq(john - peter, 180)\n\n    # After selling, John had 4/5 of her cookies, and Peter sold 3/10 of his cookies\n    # John then had 1/2 as many cookies as Peter\n    eq2 = Eq((4/5) * john, (1/2) * (peter - (3/10) * peter))\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n    multiples_of_4 = [j for j in range(5, 16) if j % 4 == 0]\n\n    common_number = [x for x in factors_of_36 if x in multiples_of_4]\n\n    # Since the question implies there is only one such number, we return the first one found\n    return common_number[0]\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    \n    pencils = 32\n    pens = 40\n    \n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    perm = permutations(digits, 4)\n    \n    min_sum = float('inf')\n    for p in perm:\n        num1 = p[0]*10 + p[1]\n        num2 = p[2]*10 + p[3]\n        min_sum = min(min_sum, num1 + num2)\n        \n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    previous_average = 60\n    total_previous_tests = 4\n    score_fifth_test = 70\n\n    total_score = (previous_average * total_previous_tests) + score_fifth_test\n    new_average = total_score / (total_previous_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    total_apples = (total_horses * apples_per_horse) + (total_pigs * apples_per_pig) + (total_rabbits * apples_per_rabbit)\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Loop for the first digit (cannot be 0)\n        for j in range(10): # Loop for the second digit\n            if (i + j) < 10: # The sum of the first two digits must be less than 10\n                count += 1  # If conditions are met, increment count\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    # Full price of each cup of ice-cream\n    full_price_per_cup = 4\n    # Total number of cups Pip wants to buy\n    total_cups = 6\n\n    # The two sale plans and their discounts\n    plan_A_discount = 1  # dollars off of each cup\n    plan_B_discount = 10  # percent off of the total price\n\n    # Calculating the total cost for each plan\n    cost_with_plan_A = (full_price_per_cup - plan_A_discount) * total_cups\n    cost_with_plan_B = full_price_per_cup * total_cups * (1 - plan_B_discount / 100)\n\n    # Choose the plan with the least cost\n    ans = min(cost_with_plan_A, cost_with_plan_B)\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Number of peaches Eddie gets\n    peaches = symbols('peaches')\n\n    # Number of students in Class A and Class B\n    a_students, b_students = symbols('a_students b_students')\n\n    # Class A conditions\n    equation1 = Eq(a_students * 5 + 10, peaches)\n\n    # Class B conditions\n    equation2 = Eq(b_students * 8 + 2, peaches)\n\n    # Relation between students in Class A and B\n    equation3 = Eq(a_students, b_students + 3)\n\n    # Solving equations for number of peaches\n    solutions = solve((equation1, equation2, equation3), (peaches, a_students, b_students))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let x be the amount Jayden had left.\n    # Then 3x will be the amount Benson had left.\n    # Benson spent $74, and Jayden spent $120.\n    # Total money Benson had initially is 74 + 3x\n    # Total money Jayden had initially is 120 + x\n    # They had a combined total of $590 initially.\n    # So, 74 + 3x + 120 + x = 590\n    # Simplifying the equation: 4x + 194 = 590\n    # Solving for x: 4x = 590 - 194\n    # x = (590 - 194) / 4\n    x = (590 - 194) // 4\n\n    return x\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    s = sum(int('2' * i) for i in range(1, 2018))\n    last_5_digits = str(s)[-5:]\n    ans = sum(int(digit) for digit in last_5_digits)\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    water_fraction = 3/4\n    water_in_drink = total_orange_drink * water_fraction\n    return water_in_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres_to_centimetres = 212.4 * 100\n    return metres_to_centimetres\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    # Since we know the answer must be a whole number and it is the same in each box,\n    # we can use a brute force method to try all possible whole numbers from 1 up to 380.\n    for number in range(1, 380):\n        # We check if replacing the boxes with the current number satisfies the equation.\n        if number * number + number == 380:\n            # If the equation is satisfied, we return the number as it is the answer.\n            return number\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Betty be b meters per minute, \n    # and the speed of Kevin be k meters per minute.\n    b, k = symbols('b k')\n\n    # Betty reaches the grocery store in 6 minutes, \n    # so the distance to the store from the cinema is 6b meters.\n    # In 6 minutes, Kevin has walked 150 meters, so his speed is k=150/6 he reaches the store in another 3 minutes\n    # This means the distance to the store from the cinema is also 3k meters.\n\n    # When Kevin reaches the store and Betty is 900 meters away from the cinema, \n    # Betty has walked for 9 minutes (6 minutes earlier, plus 3 minutes at the same time as Kevin).\n    # So, Betty's distance from the cinema is 9b meters, which equals to the store distance (6b) plus 900 meters.\n    \n    # We set up the equations:\n    # 6b = 3k (Both Betty and Kevin traveled to the store)\n    # 9b = 6b + 900 (Betty is 900 meters away from the cinema after 9 minutes)\n\n    # Solving these equations:\n    equations = [\n        Eq(6*b, 3*k),\n        Eq(9*b, 6*b + 900)\n    ]\n\n    # Solve the simultaneous equations to find the speeds b and k\n    speeds = solve(equations, (b, k))\n\n    # Now we can find how many minutes earlier Betty leaves than Kevin does:\n    # We know Kevin's speed, and that he took 3 minutes to travel to the store, implying the total distance:\n    distance_to_store = speeds[k] * 3\n\n    # Since Betty took 6 minutes to reach the store, the time she left earlier is:\n    # (Distance to store / Betty's speed) - Kevin's time to the store\n    time_difference = (distance_to_store / speeds[b]) - 3\n\n    return time_difference\n\nans = solution()"
    ]
}