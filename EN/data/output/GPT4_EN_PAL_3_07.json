{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9  # 9:00\n    end_time = 10   # 10:00\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_money = 90\n    spent_on_skirt_ratio = 0.40\n    remaining_after_bag_ratio = 1 - 0.20  # 100% - 20%\n\n    initial_money = remaining_money / (1 - spent_on_skirt_ratio) / remaining_after_bag_ratio\n\n    return initial_money\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Using the formula for the sum of squares from first_term to n:\n    # 1^2 + 2^2 + ... + n^2 = n(n + 1)(2n + 1)/6,\n    # But we want the sum from first_term^2 to n^2,\n    # So, we subtract the sum from 1^2 to (first_term-1)^2 from the total sum.\n    total_sum = n * (n + 1) * (2 * n + 1) // 6\n    subtract_sum = (first_term - 1) * first_term * (2 * (first_term - 1) + 1) // 6\n    ans = total_sum - subtract_sum\n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    students = 0\n    while True:\n        if (students + 5)**0.5 % 1 == 0 and (students + 31)**0.5 % 1 == 0:\n            return students\n        students += 1\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n    \n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    \n    # Let's denote x as the number of apples Amy gives to John.\n    # After giving x apples, Amy will have (amy - x) apples, and John will have (john + x) apples.\n    # We are given that after the exchange, Amy should have 4 more apples than John.\n    # Hence, we can set up the following equation: amy - x = john + x + 4\n    # Solving for x gives us:\n    \n    x = (amy - john + 4) // 2\n    return x\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    # Let the cost of the house sold at a profit be x and at a loss be y.\n\n    # Sale price is 110% of x (because 10% profit) and 90% of y (because 10% loss)\n    # So, 1.1 * x = sale_price and 0.9 * y = sale_price\n\n    # To solve for x and y:\n    x = sale_price / 1.1\n    y = sale_price / 0.9\n\n    # Now, the profit or loss is the difference between the sale prices and the cost prices\n    profit_or_loss = (sale_price * 2) - (x + y)\n\n    return int(profit_or_loss)\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    return permutations(9, 4)\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "网络故障，请重试"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dad_age = 43\n\n    equation = Eq(dad_age, 4 * tom_age - 5)\n\n    tom_age_solution = solve(equation, tom_age)\n\n    return tom_age_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n\n    total_combinations = blouse_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    return fraction_value > decimal_value\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "import itertools\n\ndef solution():\n    ways = 0\n    for permutation in itertools.permutations(['A', 'B', 'C', 'D', 'E']):\n        if permutation.index('A') > permutation.index('B') \\\n           and permutation.index('A') < permutation.index('C'):\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    cupcakes_per_egg = 15 / 3\n    eggs_used = cupcakes / cupcakes_per_egg\n    return int(eggs_used)\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    num_notes = symbols('num_notes')\n    total_amount = 280\n\n    # 5 * num_notes + 10 * num_notes + 20 * num_notes = total_amount\n    # Combine like terms: 35 * num_notes = total_amount\n    equation = Eq(5 * num_notes + 10 * num_notes + 20 * num_notes, total_amount)\n\n    solutions = solve(equation, num_notes)\n\n    return int(solutions[0])\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Jogging speed in km per hour\n    jogging_speed = 8\n    # Number of hours she jogs (From 6:30 am to 8:30 am)\n    jogging_hours = 2\n    # Distance traveled while jogging\n    jogging_distance = jogging_speed * jogging_hours\n    \n    # Walking speed is half the jogging speed\n    walking_speed = jogging_speed / 2\n    # Number of hours she walks (From 8:30 am to 9:30 am)\n    walking_hours = 1\n    # Distance traveled while walking\n    walking_distance = walking_speed * walking_hours\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n    \n    def square(M, N):\n        return 8 * M - N * N\n    \n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2  # Start with the smallest prime\n    while True:\n        if isprime(p) and isprime(p + 107):\n            break\n        p += 1\n    \n    return p\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2 = pow(2, 100, 10)\n    last_digit_7 = pow(7, 100, 10)\n    last_digit_9 = pow(9, 100, 10)\n\n    ans = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n    return ans\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 10  # Since there are 10 odd numbers from 1 to 19\n    ans = (1/6) * n * (n + 1) * (2 * n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    minibusses_needed = (students + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Initialize an array to store the number of marbles in each pile\n    marble_counts = [0] * 4\n    \n    # We start with the maximum number in the last (biggest) pile,\n    # and the minimum number in the first pile.\n    # We decrement the biggest pile and increment the smallest pile\n    # until the piles are ordered correctly.\n    marble_counts[3] = 16\n    while (marble_counts[3] >= marble_counts[2] or\n           marble_counts[2] >= marble_counts[1] or\n           marble_counts[1] >= marble_counts[0] or\n           sum(marble_counts) != 16):\n        \n        marble_counts[3] -= 1\n        for i in range(3):\n            marble_counts[i] += 1\n            if sum(marble_counts) == 16 and len(set(marble_counts)) == 4:\n                break\n\n    return marble_counts[3]\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    sum = 0\n    for i in range(1, 2008):\n        sum += (i**2 + (i+1)**2) / (i * (i+1))\n    ans = round(sum)\n    return ans\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = (1 * 60) + (60 // 2) + (60 // 3) + (60 // 4) + (60 // 5)\n    return A\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    result = 24 / 100 * 25\n    return result\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let x be the number of girls in the class.\n    # Average height was supposed to be 163 cm, but was recorded as 159 cm due to an error.\n    # The error in recording was from 126 cm to 162 cm, which is a difference of 36 cm.\n    # The total sum of the error affected the average, which means the total error divided by the number\n    # of girls equals the difference in average heights recorded (163 - 159 = 4 cm per girl).\n    \n    # We have the equation: total_error / x = average_error_per_girl\n    # Which translates to: 36 / x = 4\n    # Solving for x gives us the number of girls.\n    \n    total_error = 36\n    average_error_per_girl = 163 - 159\n    x = total_error / average_error_per_girl\n\n    return int(x)\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2\n    sum_of_series = (n * (n + 1) // 2)**2\n    return sum_of_series\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n    \n    ans = hash_op(200, 199)\n    for i in range(188, 1, -1):\n        ans = hash_op(ans, i)\n        \n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = 1\n    for i in range(2, 10):\n        result *= 1 + (1/i)\n    return result\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    beth, ken = symbols('beth ken')\n    \n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    solutions = solve((equation1, equation2), (beth, ken))\n\n    total_seashells = solutions[beth] + solutions[ken]\n\n    return total_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    # lengths of the ribbons\n    ribbon_lengths = [56, 42, 84]\n\n    # compute the greatest common divisor (GCD) of ribbon lengths\n    greatest_length = gcd(gcd(ribbon_lengths[0], ribbon_lengths[1]), ribbon_lengths[2])\n    \n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_number = 9876543\n    ans = original_number + 10000\n    return ans\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Danny takes 12 minutes to go from the first floor to the fourth floor.\n    # Assuming each interval between floors takes the same amount of time,\n    # there are 3 intervals (1st to 2nd, 2nd to 3rd, and 3rd to 4th).\n    \n    # Calculate the time for one interval.\n    time_per_interval = 12 / 3\n    \n    # The time from the first floor to the second floor is one interval.\n    return time_per_interval\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $2 and $10 notes.\n    two_dollar, ten_dollar = symbols('two_dollar ten_dollar')\n\n    # Equation 1: Total number of notes.\n    eq1 = Eq(two_dollar + ten_dollar, 40)\n\n    # Equation 2: Number of $10 notes after spending.\n    eq2 = Eq(ten_dollar - 0.4 * ten_dollar, (4/5) * (two_dollar - 0.25 * two_dollar))\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (two_dollar, ten_dollar))\n\n    # Calculate the amount spent on the gift.\n    amount_spent = 0.4 * solutions[ten_dollar] * 10 + 0.25 * solutions[two_dollar] * 2\n\n    return amount_spent\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for n in range(1, 50):\n        if int((n ** 3 - 2) ** 0.5) == (n ** 3 - 2) ** 0.5:\n            return n ** 3 - 2\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Total oranges to distribute after giving each kid 2 oranges\n    oranges_to_distribute = 13 - 3 * 2\n    \n    # Number of partitions for n identical items into k distinct boxes\n    # is comb(n + k - 1, k - 1)\n    # Since we need to distribute remaining oranges to 3 kids\n    ways = comb(oranges_to_distribute + 3 - 1, 3 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    x, y = symbols('x y')\n    \n    # Original equation\n    equation1 = Eq(x + y, 11.63)\n    \n    # Equation with decimal shift\n    equation2 = Eq(x + y/10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return int(100 * abs(solutions[x] - solutions[y]))\n    \nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7/8) * 32\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n    \n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Each term in the series (1 + (1/2^k)) can be written as (2^k + 1) / (2^k).\n    # When multiplying these terms together, the denominator of a term cancels out the numerator of the next term.\n    # This is due to the pattern of powers of 2.\n    # Therefore,  the resulting fraction will be the numerator of the last term in the product (which is 2^(2^2009)) over the denominator of the first term (which is 1).\n    # The numerator of the first term is 1 which won't cancel and needs to be multiplied with the result.\n    # Since the equation is equal to 2 * (1 - 1 / (2^(2^n))), we can set up an equation:\n    # (2^(2^2009) + 1) / 1 = 2 * (1 - 1 / (2^(2^n))).\n    # The numerator on the left must match the numerator on the right for the fractions to be equivalent.\n    # So, 2^(2^2009) + 1 = 2 * (2^(2^n)) - 1.\n    # This simplifies to 2^(2^2009) + 1 = 2^(2^n + 1) - 1.\n    # Let's compare the exponents:\n    # 2^2009 = 2^n + 1\n    # 2^n = 2^2009 - 1\n    # n = 2009 - 1\n    # n = 2008\n    return 2008\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sally and John's current age\n    sally, john = symbols('sally john')\n\n    # Equation representing that Sally will be 6 times John's age in 3 years\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n\n    # Equation representing the sum of their current ages\n    equation2 = Eq(sally + john, 50)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    licia, krisnam, imran = symbols('licia krisnam imran')\n    \n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n    \n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n    \n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # Ensuring that P is not a leading zero\n            continue\n        paso = p * 1000 + a * 100 + s * 10 + o\n        opas = o * 1000 + p * 100 + a * 10 + s\n        if paso + opas == 11106:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 1 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n\n    # Initial condition total water\n    equation1 = Eq(harry + liam, 640)\n\n    # After transfer, Harry has thrice the water as Liam\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day_questions = 3\n    common_difference = 3\n    number_of_days = 7\n\n    total_questions = sum(first_day_questions + common_difference * day for day in range(number_of_days))\n\n    return total_questions\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w represent the number of days it takes for the wife to drink the barrel on her own\n    man_rate = 1/15  # The man's rate of drinking per day\n    wife_rate = symbols('wife_rate')\n    \n    # Combined rate of the man and wife together\n    combined_rate = man_rate + wife_rate\n    # They finish the barrel in 12 days when working together\n    equation = Eq(combined_rate, 1/12)\n    \n    # Solve for the wife's rate\n    solution = solve(equation, wife_rate)\n    # Calculate the number of days by taking the reciprocal of the rate\n    wife_days = 1 / solution[wife_rate]\n    \n    return wife_days\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for white, red, black in product(range(9), range(5), range(6)):\n        if 3 <= 9-white <= 8 and 2 <= 5-red <= 5 and 0 <= 6-black <= 3 and white + red + black == 10:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Let's call the number of beans peeled in the first hour 'a' and the increment 'd'.\n    # The given sequence then is a, a+d, a+2d, a+3d\n    # Since we are given three terms from 9 o'clock to 12 o'clock,\n    # We have the following sequence: 20, 28, 36\n    # This means 28 - 20 = d and 36 - 28 = d\n    # d = 8\n    d = 8\n\n    # Now knowing the difference d between hours, we can find out how many beans\n    # were peeled in the first hour by subtracting d twice from the number of beans\n    # peeled from 9 to 10, which is 20.\n    # a = 20 - 2*d\n    a = 20 - 2 * d\n\n    return a\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            for k in range(10):\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    return 2**10 % 3\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the total number of pearls originally on the strand.\n    # According to the problem:\n    # Half fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand: 3\n    # The sum of these should be equal to the total number of pearls (x).\n    # x/2 + x/4 + x/6 + 3 = x\n\n    # To solve for x, multiply both sides by the Common Denominator (12) to clear the fractions:\n    # 6x + 3x + 2x + 36 = 12x\n\n    # Combine like terms and solve for x:\n    # 11x + 36 = 12x\n    # 36 = x\n\n    return 36\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    add = 2\n    while term < 100:\n        if term + add >= 100:\n            break\n        term += add\n        add += 2\n    return term\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    # The sum of the first three numbers\n    sum_first_three = 120 * 3\n    \n    # The sum of all four numbers\n    sum_all_four = 150 * 4\n    \n    # The fourth number is the difference between the sum of all four and the first three\n    fourth_number = sum_all_four - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_weight = 60\n    half_mangoes_weight = half_weight - (full_weight - half_weight)\n\n    empty_basket_weight = half_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, so there are 5 people in front of Pip\n    # There are 5 children between Pip and Bud, including Bud.\n    # Bud is 6th from the end, so there are 5 people behind Bud.\n    total_children = 5 + 5 + 6 + 5  # Front of Pip + Between + Pip + Behind Bud\n    return total_children\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Chinese Remainder Theorem states that there is a unique solution modulo \n    # the product of the moduli if the moduli are pairwise co-prime.\n    # Here, the numbers are consecutive even numbers. So if the first number is x,\n    # the next even number is x+2 which needs to be a multiple of 8 and the third is x+4, \n    # which needs to be a multiple of 9. We are looking for the smallest positive such x.\n\n    # We are setting up congruences:\n    # x ≡ 0 (mod 7) because the first number is a multiple of 7\n    # x + 2 ≡ 0 (mod 8) because the second number is a multiple of 8\n    # x + 4 ≡ 0 (mod 9) because the third number is a multiple of 9\n\n    # We rearrange the congruences to see them in the standard form:\n    # x ≡ 0 (mod 7)\n    # x ≡ -2 ≡ 6 (mod 8) because -2 is equivalent to 6 mod 8\n    # x ≡ -4 ≡ 5 (mod 9) because -4 is equivalent to 5 mod 9\n\n    # Now we use the Chinese Remainder Theorem to solve the system of congruences.\n    # We use the sympy.ntheory.modular.solve_congruence function, the inputs are tuples \n    # of (remainder, modulo)\n    congruences = [(0, 7), (6, 8), (5, 9)]\n    x = solve_congruence(*congruences)[0]\n\n    # x is the first number, the sum of the 3 numbers will be x + (x+2) + (x+4)\n    return x + (x+2) + (x+4)\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    # first term (a1) of arithmetic sequence\n    a1 = 10\n    # calculating common difference (d) using the information that 25 athletes are in the 4th row\n    # an = a1 + (n-1)*d, where an is the nth term, and n is the nth number\n    d = (25 - a1) / (4 - 1)\n    \n    # total number of terms (n)\n    n = 25\n    \n    # sum of arithmetic series (Sn) = n/2 * (2a1 + (n-1)*d)\n    Sn = n / 2 * (2 * a1 + (n - 1) * d)\n    \n    return int(Sn)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_now = 29 * 6  # Total age of the family now\n    total_age_children = 64  # Given total age of children\n    total_age_parents = total_age_now - total_age_children  # Total age of the parents now\n    \n    number_of_parents = 6 - len(\"children\")  # Assuming 'children' refers to more than one child\n    total_age_parents_3_years_ago = total_age_parents - (3 * number_of_parents)\n    \n    average_age_parents_3_years_ago = total_age_parents_3_years_ago / number_of_parents\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_given = 5\n    total_paintings_required = 56\n\n    paintings_per_day = total_paintings_done / total_days_given\n    remaining_paintings = total_paintings_required - total_paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return int(more_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    total = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    ans = total // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n\n    leaves = (total_papers - 1) // interval\n\n    return leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # Given terms' positions and their values\n    term5 = 8\n    term12 = 50\n    \n    # Position difference\n    position_diff = 12 - 5\n    \n    # Calculate the common difference\n    common_difference = (term12 - term5) / position_diff\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Generate all permutations for crossing the river\n    for p in permutations(times):\n        # The total time includes the time of the two fastest going first, \n        # the fastest coming back, the two slowest going together, \n        # and finally the fastest crossing again.\n        time = p[0] + (2 * p[1]) + p[2] + p[3]\n        min_time = min(min_time, time)\n\n    return min_time\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_value = min(numbers, key=lambda x: abs(x - 0.1))\n\n    return closest_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution_dict = solve(equation, x)\n    \n    return solution_dict[x]\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    # Since each time we are summing three consecutive terms of the arithmetic sequence,\n    # the sum will be '3 times the middle term' of those three terms.\n    # And each term increases by 3 from the previous term (common difference).\n    # When we remove the first three terms, the next three initial terms will start with\n    # a value that is 9 more than the original first term because:\n    # New first term = Old first term + 3 terms skipped * common difference\n    # We continue this process until 3 numbers are left.\n\n    # Find the number of terms in the original sequence.\n    first_term = 2\n    last_term = 242\n    common_difference = 3\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Since we are removing 3 terms at a time, find the number of iterations\n    # that would take place until we're left with 3 terms.\n    # This is equivalent to the number of groups of 3 we can form from the original sequence.\n    iterations = (number_of_terms - 3) // 3\n\n    # The second term after the last iteration will be:\n    # the original second term + (iterations * 3 terms skipped * common difference)\n    second_term_final = 5 + (iterations * 3 * common_difference)\n\n    return second_term_final\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    num_sisters = 4\n    num_brothers = 3\n    # Including Jacob\n    num_children = num_sisters + num_brothers + 1\n    return num_children\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Let x be the total distance Maria covers in meters.\n    # Let s be the speed in meters per minute.\n    # Therefore, s = x / 30 since Maria usually takes 30 minutes to cover the distance.\n    # After it rains, her speed is reduced by 20%, so her new speed becomes 0.8s.\n    # The time it takes her to run the remaining distance (x - 2400 meters) at her original speed is (x - 2400) / s.\n    # The time it takes her to run 2400 meters at her reduced speed is 2400 / (0.8s).\n    # Since she's 5 minutes late, total time is 30 + 5 minutes.\n    # The equation becomes (x - 2400) / s + 2400 / (0.8s) = 35.\n    # Simplifying the equation by multiplying through by 0.8s gives us:\n    # 0.8(x - 2400) + 2400 = 0.8 * 35 * s\n    # 0.8x - 1920 + 2400 = 28 * (x / 30)\n    # 0.8x + 480 = 28x / 30\n    # Multiply through by 30 to get rid of the denominator:\n    # 24x + 14400 = 28x\n    # 4x = 14400\n    # x = 14400 / 4\n    # x = 3600 meters\n    # The length of the journey is 3600 meters.\n\n    x = 3600\n    return x\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n    \n    work_rate_per_person = 1 / (initial_people * initial_days)\n    total_work = 1 \n    required_people = total_work / (work_rate_per_person * target_days)\n    \n    additional_people_needed = int(required_people - initial_people)\n    return additional_people_needed + (1 if additional_people_needed == required_people - initial_people else 0)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return value_after_years\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    total_students = 1050\n    transfer_students = 20\n\n    # If A_original is the original number of students in school A,\n    # then (A_original - 20) will be the number of students in school A after transfer,\n    # and (total_students - A_original + 20) will be the number of students in school B after transfer.\n    # According to the problem, we have the equation: (A_original - 20) = (total_students - A_original + 20) + 10\n\n    A_original = (total_students + transfer_students + 10) // 2\n\n    return A_original\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # The temperature at 5:00 am\n    rate_of_increase = 2  # Degrees Celsius per hour\n    time_difference = 5.5  # Hours passed from 5:00 am to 10:30 am\n\n    final_temp = initial_temp + (rate_of_increase * time_difference)\n\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Mrs Chan had\n    x = symbols('x')\n\n    # After spending in shop A, the remaining amount is: (x/2) - 1\n    # After spending in shop B, the remaining amount is: ((x/2 - 1)/2) - 2\n    # After spending in shop C, the remaining amount is: (((x/2 -1)/2 - 2)/3) - 3\n    # And finally, Mrs Chan has $49 left.\n\n    money_after_A = x / 2 - 1\n    money_after_B = money_after_A / 2 - 2\n    money_after_C = money_after_B / 3 - 3\n\n    # Create equation based on the remaining money after shopping in shop C\n    equation = Eq(money_after_C, 49)\n\n    # Solve for x\n    initial_money = solve(equation, x)[0]\n\n    return initial_money\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    ans = 12321 // 37\n    return ans\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the top shelf have x number of books\n    x = symbols('x')\n\n    # There are 7 shelves, each with 3 fewer books than the one below\n    # So we have a descending arithmetic sequence: x, x-3, x-6, ..., x-18\n    # The sum of the books on all shelves should be 280\n    # Sum of arithmetic sequence: n/2 * (first_term + last_term)\n    # Here, n=7 (number of shelves)\n    equation = Eq(7/2 * (x + (x - 18)), 280)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Create symbols for Pip, Bud, and Bob's weight\n    pip, bud, bob = symbols('pip bud bob')\n    \n    # Equations based on the average weight information\n    eq1 = Eq((pip + bud) / 2, 30)\n    eq2 = Eq((pip + bob) / 2, 33)\n    eq3 = Eq((bud + bob) / 2, 36)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (pip, bud, bob))\n    \n    # Pip's weight is the first element of the solutions tuple\n    return solutions[pip]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Assuming Darrell draws the worst case scenario where he gets no green pencils\n    # He could draw all blue and then all white pencils, that would be 3 + 3 = 6 pencils\n    # To get at least one green pencil for sure, he should draw one more after that\n    return 6 + 1\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors\n\n    # Find the divisors of 2240\n    divs = divisors(2240)\n\n    # Find which divisors make 2240/n a square\n    n_values = [n for n in divs if (2240 // n)**0.5 % 1 == 0]\n\n    # Assuming there is only one such n, return it\n    if len(n_values) == 1:\n        return n_values[0]\n    else:\n        raise ValueError(\"Multiple or no divisors found that satisfy the condition.\")\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    \n    days_sweep = 3\n    days_mop = 5\n    days_cook = 9\n    days_clean_windows = 3 * 7  # 3 weeks converted to days\n\n    ans = lcm(days_sweep, days_mop, days_cook, days_clean_windows)\n    \n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    # Using the inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(kids * 18, candies + 12)\n    equation2 = Eq((kids + 2) * 15, candies)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_2_years_ago = (dad_age_now - 2) - (avril_age_now - 2)\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt, cbrt\n    \n    numerator = pow(-4.56, 2) - pow(8.1, 3)\n    denominator = pow(7.2, 3) * (-sqrt(6 + 3/4) + 30.15)\n    expression = 16.7 - cbrt(numerator / denominator)\n\n    return round(expression, 3)\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let x be the number of years later when the sum of their ages is 48\n    # Oliver's age x years later: 20 + x\n    # Lin's age x years later: 26 + x\n    # The sum of their ages x years later will be 20 + x + 26 + x\n    \n    # We set up the equation\n    # 20 + x + 26 + x = 48\n    # 2x + 46 = 48\n    # 2x = 2\n    # x = 1\n    \n    # So it will be 1 year later when the sum of their ages is 48\n    return 1\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Let 'd' be the distance Jayden walks until the first meeting\n    # Let the time taken for the first meeting be 't'\n    # Jayden's speed ratio is 7, Carter's is 4, the sum is 7+4 = 11\n    # In the same time 't', Jayden walks 7/11 of the total distance 440m\n    # Carter walks 4/11 of the total distance in time 't'\n    d = (7/11) * 440\n    \n    # The distance d is the distance from place A to the first meeting point\n    return d\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_lim, mrs_lim = symbols('mr_lim mrs_lim')\n\n    equation1 = Eq((mr_lim - 7) / (mrs_lim - 7), 6/5)\n    equation2 = Eq(mr_lim + mrs_lim, 69)\n\n    solutions = solve((equation1, equation2), (mr_lim, mrs_lim))\n\n    return solutions[mr_lim]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Total score for the 5 students = average score * number of students\n    total_score_5_students = 87 * 5\n    \n    # Total score for the 6 students when Jim is included = new average score * number of students\n    total_score_6_students = 88 * 6\n    \n    # Jim's score is the difference between the total score with him and without him\n    jim_score = total_score_6_students - total_score_5_students\n    \n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth = 6\n    full_length = one_fifth * 5\n    one_third = full_length / 3\n    return one_third\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the number of stickers Sam had initially\n    # Let p be the number of stickers Peter had initially\n    # Let j be the number of stickers John had initially\n    s, p, j = symbols('s p j')\n    \n    # According to the problem:\n    # Sam and Peter had stickers in the ratio 7 : 5 before giving away any\n    # Sam gave away 20% of his stickers, Peter gave away 20% of his stickers\n    # Let's set up the equations\n    equation1 = Eq(s / p, 7 / 5)\n    \n    # John's stickers increased by 80%. Therefore, the stickers John received is 80% of his original amount\n    # John received 20% of Sam's and Peter's stickers\n    equation2 = Eq(j * 0.80, s * 0.20 + p * 0.20)\n    \n    # After the transaction, Sam has 20 stickers more than John\n    equation3 = Eq(s - s * 0.20, j + 20)\n    \n    # Now we solve these equations for s, p, and j\n    solutions = solve((equation1, equation2, equation3), (s, p, j))\n    \n    # We only want the number of stickers Peter had initially\n    return solutions[p]\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    first_discount = original_price * 0.10\n    new_price_after_first_discount = original_price - first_discount\n    second_discount = new_price_after_first_discount * 0.20\n    final_price = new_price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    cost_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    profit = 2945\n\n    total_cost = n * cost_price_per_bat\n    total_revenue = (n - remaining_bats) * selling_price_per_bat\n    equation = Eq(total_revenue, total_cost + profit)\n\n    number_of_bats = solve(equation, n)\n\n    return number_of_bats[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    # Situation after spending\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n\n    # Initially, both have the same amount of money\n    equation2 = Eq(raja, kumar)\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    minibusses_needed = -(-boys // capacity)  # Ceiling division to get the number of minibusses\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Calculate how many triangles equal to a diamond\n    ans = solutions[diamond] / solutions[triangle]\n    \n    return ans\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair, table = symbols('chair table')\n    \n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n    \n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    last_6_mean = (total_sum - 4 * (1111 - 240)) / 6\n    return last_6_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money = 60  # Pip's money in pence\n    bud_money = 1.10 * 100  # Bud's money in pence (£1.10 to pence)\n    \n    total_money_pence = pip_money + bud_money\n    total_money_pounds = total_money_pence / 100  # Convert total money back to pounds\n\n    return total_money_pounds\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    combined_time = 10  # Time to fill the bath using both taps\n    # Let x be the time it takes for the hot tap to fill the bath on its own.\n    # Then the cold tap takes x/2 to fill the bath as it's twice as fast.\n    # 1/x is the part of the bath filled by the hot tap in one minute,\n    # and 2/x is the part of the bath filled by the cold tap in one minute.\n    # Combined, in one minute, they fill 1/x + 2/x = 3/x of the bath.\n    # Therefore, the bath is filled in 10 minutes, so 3/x = 1/10.\n    # Solving for x gives us the time it takes for the hot tap to fill the bath.\n    x = 3 / (1/combined_time)\n    cold_tap_time = x / 2  # Since the cold tap is twice as fast\n    \n    return cold_tap_time\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            if I != P:\n                IS = 10 * I + S\n                PI = 10 * P + I\n                if 4 * IS == PI:\n                    return PI\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Distance of each part of the race\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n\n    # Speeds for each part of the race\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Time for each part of the race, calculated as distance/speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time spent is the sum of time for all parts\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    # Given ratio of Joyce's speed to Lori's speed is 3:2\n    joyce_speed_ratio = 3\n    lori_speed_ratio = 2\n\n    # Lori's speed is 2 meters per second\n    lori_speed = 2  # meters per second\n\n    # Calculate Joyce's speed based on the ratio\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n\n    # Calculate the distance Joyce can run in 10 seconds\n    time_in_seconds = 10\n    distance_joyce_runs = joyce_speed * time_in_seconds\n\n    return distance_joyce_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3\n    prob_over_25 = prob_over_25_given_over_20 * prob_over_20\n    return prob_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    danny_speed = symbols('danny_speed')\n\n    # Distance Don walks\n    don_distance = 360\n\n    # Total distance to the library\n    total_distance = 780\n\n    # Distance Danny walks\n    danny_distance = total_distance - don_distance\n\n    # Don walks at 60 metres per minute\n    don_speed = 60\n\n    # Time taken for Don to meet Danny\n    # Since Don and Danny start at the same time, they take the same time to meet\n    time_to_meet = don_distance / don_speed\n\n    # Create equation for Danny's speed based on the distance and time\n    equation = Eq(danny_speed * time_to_meet, danny_distance)\n\n    # Solve for Danny's speed\n    speed_solution = solve(equation, danny_speed)\n\n    return speed_solution[0]\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n    \n    return num_games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_used = 792\n    total_pages = 0\n    current_digit_count = 0\n\n    for digit_place in range(1, 6):\n        new_digit_count = current_digit_count + 9 * digit_place * (10 ** (digit_place - 1))\n\n        if new_digit_count >= digits_used:\n            remaining_digits = digits_used - current_digit_count\n            total_pages += (remaining_digits + digit_place - 1) // digit_place\n            break\n        else:\n            total_pages += 9 * (10 ** (digit_place - 1))\n            current_digit_count = new_digit_count\n\n    return total_pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    # Using the Inclusion-Exclusion Principle\n    only_one_event = (rope_skipping + long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all weights to grams\n    flour_g = 1000 + 500\n    sugar_g = 1000 + 200\n    butter_g = 900\n    \n    # Total mixture weight in grams\n    total_mixture_g = flour_g + sugar_g + butter_g\n    \n    # Divide by the number of cake tins\n    mixture_per_tin_g = total_mixture_g / 8\n    \n    return mixture_per_tin_g\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum([i/j for i in range(1, 11) for j in range(i, 11)])\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    from math import factorial\n\n    # There are 2 ways to position A and B (A on the left and B on the right, or B on the left and A on the right)\n    ab_position_ways = 2\n\n    # There are factorial(2) ways to arrange the other two people, C and D, in the remaining two positions.\n    cd_arrangement_ways = factorial(2)\n\n    # Multiplying the two gives the total number of ways A, B, C, and D can line up with the given restrictions.\n    total_ways = ab_position_ways * cd_arrangement_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    ans = (20 * 27) / 30\n    return ans\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # To ensure Janice gets at least 4 marbles of the same colour in the worst-case scenario,\n    # she should pick 3 marbles from each colour, which would amount to 3*3 = 9.\n    # But this does not guarantee 4 marbles of the same colour yet, because she could still have\n    # 3 red, 3 blue, and 3 green.\n    # Therefore, she needs to pick one more marble to guarantee a fourth marble of the same colour.\n    # As per the Pigeonhole principle, the extra marble will make 4 of one colour,\n    # because there are only 3 colours.\n    \n    # Number of marbles picked to ensure at least 4 of the same colour:\n    marbles = (3 * 3) + 1\n    return marbles\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n\n    for p in permutations(digits, 2):\n        two_digit_numbers.add(''.join(p))\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    \n    # Since the number is even, the last digit should be 4.\n    # Among the remaining digits, find the smallest combination\n    # by sorting [5, 7, 9] in ascending order to get the smallest number in the thousands and hundreds place.\n    remaining_digits = sorted([5, 7, 9])\n\n    # Construct the smallest 4-digit even number\n    smallest_number = int(str(remaining_digits[0]) + str(remaining_digits[1]) + str(remaining_digits[2]) + '4')\n    \n    return smallest_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # We'll use the Chinese Remainder Theorem to find such a number.\n    # The number can be written in the form: number = 7k + 5 = 13m + 11\n\n    # We'll look for the largest two-digit number that satisfies these conditions.\n    # Let's iterate from the largest two-digit number (99) down to the smallest (10) \n    # to find the largest possible number that satisfies both conditions.\n\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num  # Found the largest number that satisfies both conditions\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n    # The total work done is equivalent to the product of workers and days.\n    total_work = workers * days\n    # If one worker is doing the same amount of work alone, the days required would be equal to the total work.\n    days_for_one_worker = total_work / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # Define the variables\n    x, y = 0, 0\n    # John's claim\n    johns_claim = 10*x + y == 45\n\n    # Find the correct equations from the given problem statement\n    equation1 = 6*(10*x + y) + 25  # This represents 6 times A plus 25\n    equation2 = 200*x + 10*y       # This represents B\n\n    # Check if the equation John suggested doesn't solve the given problem\n    if equation1 != equation2:\n        # John is wrong, we need to find the correct A by solving the correct equation\n        # The correct equation is:\n        # 60x + 6y + 25 = 200x + 10y\n        # Let's find the values for x and y that satisfy this equation.\n        for x in range(1, 10):  # x cannot be 0 since it's a two-digit number\n            for y in range(10):  # y can be from 0 to 9\n                if 60*x + 6*y + 25 == 200*x + 10*y:\n                    return 10*x + y  # Returning the correct value of A\n    \n    return johns_claim  # If by any case the John's claim is True, return his claim\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    # Initialize the list to hold the state of lockers, True for unlocked, False for locked\n    lockers = [True] * 100  # All lockers start unlocked\n\n    # For numbers divisible by 3, toggle the locker state\n    for i in range(2, 100, 3):\n        lockers[i] = not lockers[i]\n\n    # For numbers divisible by 5, toggle the locker state\n    for i in range(4, 100, 5):\n        lockers[i] = not lockers[i]\n\n    # Count the number of unlocked lockers (True)\n    ans = lockers.count(True)\n\n    return ans\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Function to evaluate an expression with brackets added\n    def evaluate_expression(exp):\n        try:\n            return eval(exp)\n        except ZeroDivisionError:\n            return float('inf')  # Return infinity on division by zero\n\n    # Original expression\n    expression = \"285+15/5-2\"\n\n    # Generate all possible bracket variations for the expression\n    possible_brackets = [\n        \"({})+15/5-2\",\n        \"(285+{})/5-2\",\n        \"285+({}/5)-2\",\n        \"285+15/({}-2)\",\n        \"285+({})-2\",\n        \"285+15/({})\",\n        \"(285+15/5)-2\",\n        \"285+(15/5-2)\",\n        \"(285+15)/5-2\",\n        \"285+(15/5)-2\",\n        \"((285+15)/5)-2\",\n        \"285+((15/5)-2)\",\n        \"(285+(15/5))-2\",\n        \"285/(15/(5-2))\",\n        \"(285/15)/(5-2)\",\n        \"((285+15)/(5-2))\"\n    ]\n\n    # Generate all different results from the bracket variations\n    results = set()\n    for bracket_variation in possible_brackets:\n        # Filling the bracket with the appropriate part of the original expression\n        current_exp = bracket_variation.format(*expression.split('+')) if '{}' in bracket_variation else bracket_variation\n\n        # Evaluate the expression and add to the results set\n        result = evaluate_expression(current_exp)\n        results.add(result)\n\n    # Return the number of unique results\n    return len(results)\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    for i in range(len(perm)):\n        if perm[i] == 'A':\n            index_a = i\n        elif perm[i] == 'D':\n            index_d = i\n        elif perm[i] == 'E':\n            index_e = i\n    # A should be in the middle of B and C, so A cannot be at the ends\n    if index_a == 0 or index_a == len(perm) - 1:\n        return False\n    # Check if D and E are not next to each other\n    if abs(index_d - index_e) == 1:\n        return False\n    # Check if A is between B and C\n    if ('B' not in perm[:index_a] and 'B' not in perm[index_a+1:]) or ('C' not in perm[:index_a] and 'C' not in perm[index_a+1:]):\n        return False\n    return True\n\ndef solution():\n    count = 0\n    # Generate all permutations of the students excluding A\n    for perm in permutations('BDEFG'):\n        # Insert A into every possible position in the permutation\n        for i in range(len(perm) + 1):\n            new_perm = list(perm)\n            new_perm.insert(i, 'A')\n            # Generate all possible positions for the pair F, G, since they want to be together\n            for j in range(len(new_perm)):\n                for k in range(j+1, len(new_perm)):\n                    if new_perm[j] == 'F' and new_perm[k] == 'G':\n                        # If the permutation is valid, increase the count\n                        if count_valid_permutations(new_perm):\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # The ratio of Nicolas's speed to Yiding's speed is the same at any given time.\n    # When Nicolas is at level 4, Yiding is at level 3, so the ratio is 4:3.\n    nicolas_current_level = 4\n    yiding_current_level = 3\n    \n    # When Nicolas reaches level 16, we want to find out Yiding's level.\n    nicolas_target_level = 16\n    \n    # Ratio stays the same, so calculate Yiding's level using the same ratio 4:3.\n    # Yiding's level = (Yiding's current level * Nicolas's target level) / Nicolas's current level\n    yiding_target_level = (yiding_current_level * nicolas_target_level) / nicolas_current_level\n    \n    return int(yiding_target_level)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the cost of one cake and y as the money Lucy has\n    x, y = symbols('x y')\n\n    # Create two equations based on the problem statement\n    # Equation for buying 10 cakes: 10x - y = 11\n    # Equation for buying 13 cakes: 13x - y = 26\n    equation1 = Eq(10 * x - y, 11)\n    equation2 = Eq(13 * x - y, 26)\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    total_children = 4 + 6\n\n    average_mass = total_mass / total_children\n\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    quotient = 11\n    remainder = 5\n    divisor = 12\n\n    number = (quotient * divisor) + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    start = 4.6\n    end = 13.8\n    halfway = (start + end) / 2\n    return halfway\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    known_scores = [37, 53, 29, 41]\n\n    total_score = mean_score * total_matches\n    x = total_score - sum(known_scores)\n\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    letter_counts = {\"C\": 1, \"H\": 1, \"E\": 3, \"S\": 1}\n    total_letters = sum(letter_counts.values())\n    \n    arrangements = factorial(total_letters)\n    for count in letter_counts.values():\n        arrangements //= factorial(count)\n    \n    return arrangements\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_seven_count = 8 * 9 * 9\n    \n    at_least_two_sevens = total_three_digit_numbers - no_seven_count\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals initially be x.\n    # Let the initial number of goats be g.\n    x, g = symbols('x g')\n\n    # Initial conditions\n    # Since 65% were cows, 35% were goats.\n    initial_goats = Eq(g, 0.35 * x)\n\n    # After adding 240 animals, we have x + 240 total animals.\n    # The percentage of cows is 65% + 20% = 85%\n    # This means the percentage of goats is now 15%, however, it is stated that the number of goats doubled.\n\n    # So the new number of goats is 2 * g, and this also should be 15% of the new total x + 240\n    new_goats = Eq(2 * g, 0.15 * (x + 240))\n\n    # Solve the simultaneous equations to find the value of g (initial goats)\n    solutions = solve((initial_goats, new_goats), (x, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 9\n        new_number = int('9' + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # Minimum possible positive integer divisor\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Abigail's and Jonathan's ages\n    abigail, jonathan = symbols('abigail jonathan')\n    \n    # Abigail is 6 years older than Jonathan\n    equation1 = Eq(abigail, jonathan + 6)\n    \n    # Six years ago she was twice as old as he\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    # Return Jonathan's age\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_rate = 1 / 40\n    bob_rate = 1 / 60\n    total_days_together = 27\n    total_work = alice_rate * total_days_together + bob_rate * total_days_together\n    alice_days_off = (1 - total_work) / alice_rate\n    return alice_days_off\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a - b\n\n    ans = custom_operation(4, 3) - custom_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0 and ((A * 100 + B * 10 + A) + (C * 100 + D * 10 + C)) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3*apple + 2*banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    original_amount = 200\n    new_amount = 250\n    increase = new_amount - original_amount\n    percentage_increase = (increase / original_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the number of days to finish reading and p be the number of pages\n    d, p = symbols('d p')\n    \n    # Setting up the equations based on the problem statement\n    equation1 = Eq(30 * (d + 2), p)\n    equation2 = Eq(39 * (d - 4), p)\n    \n    # Solving the equations for d and p\n    solutions = solve((equation1, equation2), (d, p))\n    \n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '20202022020202'  # one complete cycle in the sequence\n    cycle_length = len(sequence)\n    number_of_twos_in_cycle = sequence.count('2')\n\n    full_cycles = 535 // cycle_length\n    remaining_digits = 535 % cycle_length\n\n    twos_full_cycles = full_cycles * number_of_twos_in_cycle\n    twos_in_remaining_digits = sequence[:remaining_digits].count('2')\n\n    total_twos = twos_full_cycles + twos_in_remaining_digits\n\n    return total_twos\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    return (36 * 37 * 38 * 39 * 40 * 41) % 7\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_cookies = 55\n\n    total_cookies = morning_cookies + afternoon_cookies\n    remaining_cookies = total_cookies - given_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of 50-cent coins, and y be the initial number of 1-dollar coins\n    x, y = symbols('x y')\n\n    # The initial condition that 2/7 of the coins were 50 cents\n    equation1 = Eq(x, 2/7 * (x + y))\n\n    # After receiving 10 one-dollar coins and $5 worth of fifty-cent coins, he has twice as many 1-dollar coins\n    # 5 dollars worth of fifty-cent coins is 5 / 0.5 = 10 fifty-cent coins\n    equation2 = Eq(y + 10, 2 * (x + 10))\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The total initial number of coins is the sum of initial 50-cent and 1-dollar coins\n    initial_coins = solutions[x] + solutions[y]\n\n    return initial_coins\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men_count = 354\n    children_count = 165\n    women_count = total_passengers - (men_count + children_count)\n    return women_count\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    total_tickets = 19\n    total_amount = 75\n    \n    # price for each adult ticket\n    adult_ticket_price = 5\n    \n    # price for each child ticket\n    child_ticket_price = 3\n    \n    # use a loop to try each possible number of adult tickets\n    for adults in range(total_tickets + 1):\n        children = total_tickets - adults\n        if (adults * adult_ticket_price + children * child_ticket_price) == total_amount:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n    equation1 = Eq(dress, 3 * belt)  # Dress costs thrice as much as belt\n    equation2 = Eq(shirt, 2 * dress)  # Shirt costs twice as much as dress\n    equation3 = Eq(shirt - belt, 155)  # The difference between shirt and belt is $155\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n    \n    # Calculate the difference between the cost of the dress and the shirt\n    dress_cost = solutions[dress]\n    shirt_cost = solutions[shirt]\n    difference = shirt_cost - dress_cost\n\n    return difference\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(a, b):\n        return (a ** 2 - b ** 2) / (a - b)\n\n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols representing marbles for Anna, Betsy, and Charlene\n    anna, betsy, charlene = symbols('anna betsy charlene')\n    \n    # Write equations representing the relationships between marbles\n    total_marbles_eq = Eq(anna + betsy + charlene, 168)  # total number of marbles\n    transfer_charlene_betsy_eq = Eq(charlene - 15, betsy + 15)  # Charlene gave 15 marbles to Betsy\n    transfer_betsy_anna_eq = Eq(betsy + 15 - 8, anna + 8)  # Betsy gave 8 marbles to Anna\n\n    # Ratio of marbles\n    ratio_eq = Eq(anna/betsy, 2/5) & Eq(anna/charlene, 2/7) & Eq(betsy/charlene, 5/7)\n    \n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, transfer_charlene_betsy_eq, transfer_betsy_anna_eq, ratio_eq), (anna, betsy, charlene))\n\n    # Since Betsy gave away marbles, we add back to find the original number she had\n    return solutions[betsy] + 8\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_save = 7\n    brenda_daily_save = 6\n    andy_total_save = 378\n    days_andy_saved = andy_total_save / andy_daily_save\n\n    brenda_total_save = brenda_daily_save * days_andy_saved\n\n    return int(brenda_total_save)\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    wrong_points = -2\n    total_points = 44\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_points + wrong_answers * wrong_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    new_length = original_length * 1.10  # Increase by 10%\n    new_breadth = original_breadth * 4/5  # Reduced to 4/5\n    new_height = original_height * 11/10  # Ratio of new height to original height is 11:10\n\n    original_volume = original_length * original_breadth * original_height\n    new_volume = new_length * new_breadth * new_height\n\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    num_contestants = 8\n    # Calculate permutations since order matters for gold, silver, bronze\n    ways = factorial(num_contestants) // factorial(num_contestants - 3)\n    \n    return ways\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n\n    num_triangles = comb(num_points, num_vertices)\n\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    numbers = [30, 40, 50]\n    sum_of_numbers = sum(numbers) * 3\n    return sum_of_numbers\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_percentage = 100 - 60\n    remaining_masks = 360\n    total_masks = remaining_masks / (remaining_percentage / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour + 26, second_hour)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # If we want to maximize the number of questions Noa can solve,\n    # we should minimize the number of questions the other students solve.\n    # Let's assign the minimum possible number of questions to the other\n    # four students while keeping their counts distinct starting from 1.\n    # This means the other four students will solve 1, 2, 3, and 4 questions respectively.\n    # The rest will be solved by Noa\n\n    # Calculate the total number of questions solved by Noa's classmates\n    other_students = 1 + 2 + 3 + 4 # This is the sum of the first 4 natural numbers\n\n    # The number Noa can solve is\n    noa = 40 - other_students # Subtract the questions solved by others from the total\n\n    return noa\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n    difference = hottest_temperature - coldest_temperature\n    return difference\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be Scan's current age and t be Ted's current age\n    s, t = symbols('s t')\n\n    # The ratio of Scan's age to Ted's age is 1:4\n    equation1 = Eq(s, t / 4)\n\n    # The ratio of their ages 4 years from now will be 1:3\n    equation2 = Eq(s + 4, (t + 4) / 3)\n\n    # Solve the equations to find the current ages\n    current_ages = solve((equation1, equation2), (s, t))\n\n    # Let x be the number of years ago when the ratio was 1:9\n    x = symbols('x')\n\n    # The ratio x years ago was 1:9\n    equation3 = Eq(s - x, (t - x) / 9)\n\n    # Substitute the current ages into the equation\n    equation3_subs = equation3.subs({s: current_ages[s], t: current_ages[t]})\n\n    # Solve for x\n    x_value = solve(equation3_subs, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Calculate the distance Star jogs (from 6:30 am to 7:30 am)\n    jogging_time = 1  # 1 hour\n    jogging_speed = 6.5  # in miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the distance Star walks (from 7:30 am to 9:30 am)\n    walking_time = 2  # 2 hours\n    walking_speed = 4.5  # in miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Calculate the total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    return 9 * 100\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    result = 200 * 30 * 60\n    return result\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climb = 10\n    slide = 1\n    day_reach = 0\n    current_height = 0\n    \n    while current_height < height:\n        day_reach += 1\n        current_height += climb\n        if current_height >= height:\n            break\n        current_height -= slide\n        slide += 1\n    \n    return day_reach\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let the number of guppies be g.\n    # Then, the number of goldfish is 2 * g.\n    # The number of mollies is 2 times the number of goldfish, so it is 2 * (2 * g) = 4 * g.\n    # We know that the total number of mollies is 276.\n    # Therefore, we have 276 = 4 * g, which implies g = 276 / 4.\n    g = 276 / 4\n\n    # The number of mollies (m) is 4 * g.\n    m = 4 * g\n    \n    # The difference between the number of mollies and the number of guppies is m - g.\n    difference = m - g\n\n    return int(difference)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 300  # Convert 3 meters to centimeters\n    real_tree_height_cm = 12 * 100  # Convert real tree height from meters to centimeters\n    model_tree_height = real_tree_height_cm * scale_ratio\n    return model_tree_height\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'f' be the foldable bicycles, and 'nf' be the non-foldable bicycles.\n    f, nf = symbols('f nf')\n\n    # Initial number of bicycles is the total sold and those left.\n    equation1 = Eq(f + nf, 476)\n\n    # Bicycles left after selling some: \n    # f * 4/7 are left foldable bikes, and nf * 5/9 are left non-foldable bikes.\n    # Together with the sold bikes, they total the original amount of bikes.\n    equation2 = Eq(f * 4/7 + nf * 5/9 + 208, 476)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (f, nf))\n\n    # Total sold foldable bikes equals original foldable bikes minus left foldable bikes.\n    foldable_sold = solutions[f] - (solutions[f] * 4/7)\n\n    return foldable_sold\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    marks_per_correct = 8\n    marks_deducted_per_wrong = 4\n    target_score = 100\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = (correct * marks_per_correct) - (wrong * marks_deducted_per_wrong)\n        if score == target_score:\n            return correct\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # If each of the 20 students can get at most 2 pieces of candy,\n    # then the total number of candies Valeria can distribute without\n    # guaranteeing that there's a student with at least 3 is:\n    # 20 students * 2 pieces per student = 40 pieces\n    max_candies_without_3 = 20 * 2\n\n    # To ensure that there's always a student with at least 3 pieces\n    # of candy, we add 1 more piece to the total number:\n    min_candies_with_3 = max_candies_without_3 + 1\n\n    return min_candies_with_3\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining = 6000\n    used_fraction = 5/8\n    original_amount = remaining / (1 - used_fraction)\n    return original_amount\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60\n    total = 765\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    \n    # Number of gaps between lamp posts is equal to the total number of flowers divided by the flowers between each two posts\n    number_of_gaps = total_flowers / flowers_between_posts\n    \n    # Since there needs to be one more post than there are gaps, add 1 to the number of gaps to get number of posts\n    number_of_posts = number_of_gaps + 1\n    \n    # The distance between each two lamp posts is the length of the road divided by the number of gaps\n    distance_between_posts = 50 / number_of_gaps\n    \n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # There are 6 books to the left of the favorite book\n    books_on_left = 6\n\n    # The favorite book is the 14th from the right\n    books_on_right_from_fav = 14\n\n    # We subtract one from the books on the right because we have counted the\n    # favorite book in both, books_on_left and books_on_right_from_fav.\n    # Hence the total books are the sum of books on left, books on right (excluding the favorite)\n    # and the favorite book itself.\n    total_books = books_on_left + books_on_right_from_fav - 1\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease_temp = 17\n\n    final_temp = initial_temp - decrease_temp\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    num_trees = (road_length // tree_interval) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    return 48 * (5/4)\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    n = 5  # We want the 5th term\n\n    # use the formula for nth term of a geometric sequence: ar^(n-1)\n    nth_number = first_number * (ratio ** (n - 1))\n\n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return result\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Side length of the square lawn\n    side_length = 12\n    # Distance from each edge to plant bushes\n    distance_from_edge = 1.5\n    # Distance between bushes\n    distance_between_bushes = 3\n    \n    # Effective length to plant bushes\n    effective_length = side_length - 2 * distance_from_edge\n    # Number of bushes along one side, rounded down to fit within the effective length\n    num_bushes_per_side = effective_length // distance_between_bushes\n    \n    # Total bushes is the sum of bushes on all four sides minus the 4 corners counted twice\n    total_bushes = num_bushes_per_side * 4 - 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    sweets_to_give_away = total_sweets - sweets_for_sister\n    number_of_friends = 6\n    \n    sweets_per_friend = sweets_to_give_away // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # If no two children receive the same number of apples and every child gets at least one apple,\n    # we can sort them in increasing order of apples received, each getting one more than the previous.\n    # In such ordering, let's denote the amount of apples the first child gets as 'x'.\n    # Then the subsequent children get 'x+1', 'x+2', 'x+3', and 'x+4' apples respectively.\n    # The total number of apples is 19, so we have the following equation:\n    # x + (x+1) + (x+2) + (x+3) + (x+4) = 19\n    # Simplifying we get: 5x + 10 = 19\n    # Solving for 'x' we get: 5x = 9, x = 9 / 5, which is not an integer.\n    # Since every child must get a whole number of apples, we start the distribution from x=1.\n    # So the distribution would be 1, 2, 3, 4, and (19 - 10) for the last child.\n\n    apples_left = 19 - (1 + 2 + 3 + 4)\n    max_apples_for_one_child = apples_left\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_rate_per_hour = 1 / (12 * 8)\n    q_rate_per_hour = 1 / (8 * 10)\n    \n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n    combined_rate_per_day = combined_rate_per_hour * 8\n    \n    days_to_complete = 1 / combined_rate_per_day\n    return days_to_complete\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    faster_van_speed = 132  # speed in km/h\n    slower_van_speed = 78   # speed in km/h\n    time_in_hours = 8       # time after which we calculate the distance\n\n    # Calculate the distance travelled by each van\n    distance_faster_van = faster_van_speed * time_in_hours\n    distance_slower_van = slower_van_speed * time_in_hours\n\n    # The total distance apart is the sum of the individual distances\n    distance_apart = distance_faster_van + distance_slower_van\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    num_apples = 78\n    even_divisors = [i for i in range(2, num_apples + 1, 2) if num_apples % i == 0]\n    return len(even_divisors)\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Pinkie's original score\n    original_score = symbols('original_score')\n\n    # Create the equation as per the problem statement\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    # Solve the equation for the original score\n    solved_score = solve(equation, original_score)\n\n    return solved_score[0]\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given exchange rates\n    rabbits_per_goat = 9 / 3\n    goats_per_cow = 2 / 4\n    \n    # Calculate how many goats we can get for 1 cow\n    goats_for_one_cow = 1 / goats_per_cow\n    \n    # Calculate how many rabbits we can get for 1 cow\n    rabbits_for_one_cow = goats_for_one_cow * rabbits_per_goat\n    \n    # Calculate how many rabbits we can get for 2 cows\n    rabbits_for_two_cows = 2 * rabbits_for_one_cow\n\n    return rabbits_for_two_cows\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score = 168\n    \n    # Let's say all attempted questions are correct.\n    max_score = 4 * attempted_questions\n    # The difference between max_score and actual score gives us the total penalty for wrong answers.\n    total_penalty = max_score - score\n    # Each wrong question has a penalty of 4+1=5 points (4 for not scoring and 1 for being penalized).\n    wrong_questions = total_penalty // 5\n    # The number of correct questions is the remainder of the attempted questions.\n    correct_questions = attempted_questions - wrong_questions\n    \n    return correct_questions\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n    last_term = first_term + (num_rows - 1) * difference\n    \n    total_seats = (num_rows * (first_term + last_term)) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, pens = symbols('pencils pens')\n\n    # Original ratio of pencils to pens is 4:5\n    original_ratio = Eq(pencils/pens, 4/5)\n\n    # After taking out a pen and replacing it with a pencil, the ratio becomes 7:8\n    new_ratio = Eq((pencils + 1)/(pens - 1), 7/8)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (pencils, pens))\n\n    total_items = solutions[pencils] + solutions[pens]\n\n    return total_items\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # The worst scenario before getting a pair of white socks:\n    # He could take all red and all black socks.\n    red_socks = 10\n    black_socks = 10\n    # He would then take one white sock and finally another one to make a pair.\n    white_socks_for_a_pair = 2\n    # Summing up all the socks taken before obtaining a pair of white socks.\n    total_socks = red_socks + black_socks + white_socks_for_a_pair \n\n    return total_socks\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hashed_op(a, b):\n        return a * b - 5 * a + 8\n    \n    result = hashed_op(10, 9)\n    result = hashed_op(result, 8)\n    result = hashed_op(result, 7)\n    result = hashed_op(result, 6)\n    result = hashed_op(result, 5)\n    result = hashed_op(result, 4)\n\n    return result\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 40\n    girls_count = 72\n    girls_percentage = 100 - boys_percentage\n    \n    total_children = (girls_count * 100) / girls_percentage\n    \n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    final_count = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return final_count\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    # Let's denote the total cost of all books as C (100% of the initial cost)\n    # Planned profit is 60%, so planned selling price is 160% of C, thus planned profit is 60% * C\n    \n    # On the first day, 70% of the books are sold at 60% profit\n    # The selling price for the first day is therefore 70% * (160% * C) = 112% * C\n\n    # The total profit after both days is 80% of the planned profit\n    # So the actual profit is 80% * (60% * C) = 48% * C\n\n    # Let's denote the discount rate on the second day as D%\n    # The remaining 30% of the books are sold at (100% - D%) of the cost\n    # Selling price for the second day is therefore 30% * (100% - D%) * C\n\n    # The sum of the selling prices for both days is the cost plus the actual profit\n    # 112% * C + 30% * (100% - D%) * C = 100% * C + 48% * C\n    # 112% + 30% - 0.3 * D% = 148%\n    # 142% - 0.3 * D% = 148%\n    # 0.3 * D% = 142% - 148%\n    # 0.3 * D% = -6%\n    # D% = (-6% / 0.3)\n    # D% = -20% (A negative discount means an additional markup)\n\n    # Since a negative discount rate doesn't make sense in this context,\n    # we can assume that we've made a mistake. Let's re-evaluate the calculation\n    # We should have:\n\n    # (112% * C) + 30% * (100% - D%) * C = 100% * C + 48% * C\n    # (112% * C) + (30% - 0.3 * D%) * C = 148% * C\n    # 112% + 30% - 0.3 * D% = 148%\n    # 0.3 * D% = 142% - 148%\n    # 0.3 * D% = -6%\n    # D% = -6% / 0.3\n    # D% = -20%\n\n    # Since a negative value for the discount rate does not make sense, we re-examine the calculation\n    # We initially took 80% of the planned profit; thus, the actual selling price on both days combined is\n    # 100% * C + 80% * (60% * C) = 100% * C + 48% * C = 148% * C\n\n    # The second day's sale should make up the difference between the first day's sale and the total\n    # Thus, the selling price on the second day should be:\n    # 148% * C - 112% * C = 36% * C\n    # This is for the 30% of the books, so per book selling price on the second day is:\n    # (36% * C) / (30% * C) * 100% = 120% per book\n\n    # But on the second day, the books were sold at a discount, thus:\n    # 120% = 100% - D%\n    # Therefore:\n    # D% = 100% - 120%\n    # D% = -20%\n\n    # This implies that the discount rate calculation has to be redone since discount cannot be negative.\n    # The mistake is in assuming the 120% selling price per book, which was wrong. The 36% * C corresponds to\n    # the total amount obtained from selling the 30% books, not per book price. Thus we need to divide by 30%\n    # to get the actual per book selling price:\n    D = (100 - ((36/30) * 100))\n    \n    return D\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    last_page_before_missing = 14\n    first_page_after_missing = 35\n\n    # Calculate the number of missing page numbers (inclusive of start and end)\n    num_missing_pages = first_page_after_missing - last_page_before_missing - 1\n\n    # Assume each sheet contains a page on each side\n    num_missing_sheets = num_missing_pages // 2\n    \n    # If the number of missing pages is odd, add one to account for the last single-page sheet\n    if num_missing_pages % 2 != 0:\n        num_missing_sheets += 1\n\n    return num_missing_sheets\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the price of a tuna puff and y be the price of a curry puff\n    x, y = symbols('x y')\n\n    # Equation based on the total cost of puffs\n    eq1 = Eq(12*x + 19*y, 39.60)\n\n    # Equation based on the cost relation between tuna puffs and curry puffs\n    eq2 = Eq(y, x - 0.20)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n\n    for tens in digits:\n        for ones in digits:\n            if tens != ones:\n                number = tens * 10 + ones\n                if number % 2 == 1:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_sec = 200\n    time_min = time_sec / 60\n\n    distance = speed_m_per_min * time_min\n\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 20, 2):\n        product *= (1 + 2/i)\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let c represents the number of cows and g represents the number of goats initially\n    c, g = symbols('c g')\n\n    # Initial condition: 65% of the animals were cows\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 more animals, the percentage of cows increased by 20%\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # The number of goats doubled\n    equation3 = Eq(2 * g, g + 240)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    required_length_cm = 400 * 85\n    roll_length_cm = 20 * 100\n\n    rolls_needed = required_length_cm / roll_length_cm\n    if rolls_needed != int(rolls_needed):\n        rolls_needed = int(rolls_needed) + 1\n    else:\n        rolls_needed = int(rolls_needed)\n\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n    \n    future_sum_age = Eq(emma + john, 27)\n    age_difference = Eq(john, emma + 7)\n    \n    solutions = solve((future_sum_age, age_difference), (emma, john))\n    \n    return solutions[emma] - 3  # Subtract 3 years to get the current age of Emma\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    food = (5 / 6) * remainder\n    saving = remainder - food\n\n    equation = Eq(food, donation + 78)\n\n    ans = solve(equation, salary)\n\n    return ans[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of powers of 2 repeats every 4 cycles: 2, 4, 8, 6\n    last_digit_2 = (2 ** (2017 % 4)) % 10\n    \n    # The last digit of powers of 3 repeats every 4 cycles: 3, 9, 7, 1\n    last_digit_3 = (3 ** (2017 % 4)) % 10\n    \n    # The last digit of the entire expression is the product of the last digits\n    ans = (last_digit_2 * last_digit_3) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    # Hypothesis: Assume all children are boys, hence all receive 2 balloons.\n    # Therefore, with 38 children, total balloons = 38 * 2.\n    # Now, for every girl, we have two less boys and two extra balloons.\n    # So, we will add 2 balloons each time we assume one boy to be girl.\n\n    total_children = 38\n    all_boys_balloons = total_children * 2\n    total_balloons = 126\n\n    # Calculate the difference that is caused by assuming a child is a girl\n    balloon_difference = total_balloons - all_boys_balloons\n\n    # Number of extra balloons per girl (since girl gets 4 and we assumed 2 for boy)\n    extra_balloons_per_girl = 4 - 2\n\n    # Number of girls\n    number_of_girls = balloon_difference // extra_balloons_per_girl\n\n    # Number of boys\n    number_of_boys = total_children - number_of_girls\n\n    return number_of_boys\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time in minutes that David walks at the increased speed\n    t = symbols('t')\n    \n    # David walks at 150m/min for the first 10 mins, then at 200m/min for t minutes\n    # Total distance: (speed_initial * time_initial + speed_increased * time_increased = total_distance)\n    equation = Eq(150 * 10 + 200 * t, 3700)\n    \n    # Solve for t\n    time_increased_speed = solve(equation, t)[0]\n    \n    # Total time spent walking: time_initial + time_increased_speed\n    total_time = 10 + time_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    # Given terms\n    term_7 = 57\n    term_15 = 89\n    # Distance between the terms\n    term_distance = 15 - 7 \n    # Calculate the common difference\n    common_difference = (term_15 - term_7) / term_distance\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 400:\n        return ans\n        ans += 2 * 3 * 5 * 7  # Increase by the product of the moduli\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    digits = set(range(10)) - {4, 7, 1, 9}\n    for A in digits:\n        for B in (digits - {A}):\n            for C in (digits - {A, B}):\n                number = 4700000 + A * 1000 + B * 100 + C\n                if number % 9 == 0:\n                    return A + B + C, number\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_per_week = 45 - 60  # she buys 45 new sweets and eats 60 sweets\n    \n    # Find number of weeks where sweets_left is greater than 150\n    weeks = 0\n    while sweets_left > 150:\n        sweets_left += sweets_per_week\n        weeks += 1\n    \n    return weeks\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # There are 3 choices for each of the three places in a three-digit number.\n    ways = 3 * 3 * 3\n    return ways\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of an apple and an orange\n    apple, orange = symbols('apple orange')\n\n    # Jessie's purchase: 2 apples and 1 orange = 40p\n    # Bella's purchase: 1 apple and 2 oranges = 35p\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    # Carrie buys 1 apple and 1 orange\n    carrie_cost = solutions[apple] + solutions[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    num_rackets = 2\n\n    money_spent_on_rackets = racket_price * num_rackets\n    remaining_money = total_money - money_spent_on_rackets\n    num_balls = remaining_money / ball_price\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Since we have 4 balls of each color, drawing 4 balls could result in all of them being the same color. \n    # To ensure 1 different color, we would need to draw one more ball, which could be the same as the first 4 or a different color. \n    # To guarantee 2 different colors, we would need to draw another ball, ensuring we have at least 2 different colors in 6 draws.\n    # To make absolutely sure we have 3 different colored balls, we need to draw one more ball. \n    # At worst, this last ball will be the third color, which gives us 7 balls drawn.\n    return 7\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    # Initialize the given values\n    heinz_chocolates = 87\n    heinz_weekly_gain = 4\n    jed_chocolates = 137\n    jed_weekly_loss = 6\n\n    # Initialize the number of weeks\n    weeks = 0\n    \n    # Loop until Heinz and Jed have the same number of chocolates\n    while heinz_chocolates != jed_chocolates:\n        # Update chocolate count for both Heinz and Jed\n        heinz_chocolates += heinz_weekly_gain\n        jed_chocolates -= jed_weekly_loss\n        # Increment the week count\n        weeks += 1\n    \n    # Return the number of weeks when they have the same number of chocolates\n    return weeks\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points, and a right-angled triangle can be formed if one side is a diameter of the circle.\n    # Since the circle is split into 12 equal parts, each part subtends 360/12 = 30 degrees at the center.\n    # A straight line subtends 180 degrees, so it will pass through 180/30 = 6 points.\n    # We have 12 choices for the first point (one end of the diameter).\n    # Once the diameter is chosen, there are 5 remaining points (not 6, to avoid counting the point diametrically opposite)\n    # to choose for the third point of the triangle (the point that will be the right angle).\n    # Therefore, there are 12 * 5 right-angled triangles in total.\n\n    num_triangles = 12 * 5\n    return num_triangles\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6\n    donuts_eaten = 3\n    \n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n\n    return int(durians_left)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the weight of a box of apples (A) and a box of oranges (O)\n    A, O = symbols('A O')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(3*A + 5*O, 270)\n    equation2 = Eq(3*A + 7*O, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, O))\n\n    return solutions[A], solutions[O]\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    # 1 racket + 5 shuttlecocks = 205g\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    # 2 rackets + 15 shuttlecocks = 515g\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is in the exact middle, then the number of animals before the tiger\n    # equals the number of animals after the tiger.\n    # The tiger is also the 11th animal, so there are 10 animals before it.\n    num_animals_before_tiger = 10\n    \n    # If the number of animals before the tiger is the same as after,\n    # then the total number of animals is the number before,\n    # plus the tiger itself, plus the number after (which is the same as before).\n    total_animals = num_animals_before_tiger + 1 + num_animals_before_tiger\n    \n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Nancy originally divides the 24 roses into 3 vases\n    roses_in_each_vase_first = 24 // 3\n    \n    # Her mother brings more roses and Nancy divides all roses into 4 vases now\n    # Each vase should have the same number of roses as before\n    total_vases = 4\n    total_roses = roses_in_each_vase_first * total_vases\n\n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    cost_haribo = 50\n    cost_mamee = cost_haribo - 30\n    cost_jelly = 6 * cost_mamee\n    ans = cost_jelly / 100\n    return ans\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    total_sum = 2405 + 1827\n    number_words = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', \n                    6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', \n                    11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', \n                    15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', \n                    19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', \n                    50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', \n                    90: 'Ninety', 100: 'Hundred', 1000: 'Thousand'}\n\n    def number_to_words(n):\n        if n < 20:\n            return number_words[n]\n        elif n < 100:\n            if n % 10 == 0:\n                return number_words[n]\n            else:\n                return number_words[n // 10 * 10] + ' ' + number_words[n % 10]\n        elif n < 1000:\n            if n % 100 == 0:\n                return number_words[n // 100] + ' ' + number_words[100]\n            else:\n                return number_words[n // 100] + ' ' + number_words[100] + ' and ' + number_to_words(n % 100)\n        elif n < 1000000:\n            if n % 1000 == 0:\n                return number_to_words(n // 1000) + ' ' + number_words[1000]\n            else:\n                return number_to_words(n // 1000) + ' ' + number_words[1000] + ', ' + number_to_words(n % 1000)\n    \n    ans = number_to_words(total_sum)\n    return ans\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n    \n    # Will hates to eat candy in mint flavour, so we do not count it.\n    max_candies_he_can_eat = lemon_flavour + cherry_flavour\n    \n    return max_candies_he_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Loop through each possible four-digit number\n    for A in range(1, 10):  # A cannot be 0\n        for B in range(10):  # B can be 0 to 9\n            for C in range(10):  # C can be 0 to 9\n                for D in range(1, 10, 2):  # D must be an odd positive digit (divisible by 5)\n                    if B % 2 == 0:  # AB is divisible by 2\n                        if (B*10 + C) % 3 == 0:  # BC is divisible by 3\n                            if (A*100 + B*10 + C) % 9 == 0:  # ABC is divisible by 9\n                                if (B*100 + C*10 + D) % 11 == 0:  # BCD is divisible by 11\n                                    # All conditions are satisfied\n                                    return A*1000 + B*100 + C*10 + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    total_price = 2 * cheese_cake_price\n    return total_price\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1\n\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the two sons and two daughters\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Create the equations based on the given conditions\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(older_daughter, younger_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Find the youngest child's age from the solutions\n    youngest_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    original_number = solve(equation, x)[0]\n\n    return original_number\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21  # cm\n    ratio_height = 3\n    ratio_width = 4\n    \n    # Find the width using the given ratio\n    width = (height / ratio_height) * ratio_width\n    \n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    wallet, watch = symbols('wallet watch')\n\n    # Set up the equations\n    eq1 = Eq(2 * wallet + 3 * watch, 433)\n    eq2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations\n    solved_values = solve((eq1, eq2), (wallet, watch))\n\n    return solved_values[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    # Since the decimal form of 3/7 is 0.428571 with the digits 428571 repeating,\n    # we just need to sum up the digits in the repeating section sufficient times.\n    \n    # Getting the repeating section as a string\n    repeat_section = \"428571\"\n\n    # Calculate the length of the repeating section\n    repeat_length = len(repeat_section)\n\n    # Find how many full repeats of the sequence there will be in 58 digits\n    full_repeats = 58 // repeat_length\n\n    # Find the number of leftover digits after the full repeats\n    leftover_digits = 58 % repeat_length\n\n    # Summing the digits in the full repeats\n    sum_full_repeats = sum(map(int, repeat_section)) * full_repeats\n\n    # Summing the leftover digits\n    sum_leftover = sum(map(int, repeat_section[:leftover_digits]))\n\n    # Total sum of the first 58 digits after the decimal point\n    total_sum = sum_full_repeats + sum_leftover\n\n    return total_sum\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    # Total number of books\n    total_books = 3 + 4 + 2 + 2\n    \n    # Use the formula for permutations of indistinguishable items:\n    # (n! / (n1! * n2! * n3! * ... * nk!))\n    # where n is the total number of items and n1, n2, n3, ..., nk are the numbers of indistinguishable items.\n    \n    permutations = factorial(total_books) // (factorial(3) * factorial(4) * factorial(2) * factorial(2))\n\n    return permutations\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution exchanged between bottles A and B\n    x = symbols('x')\n\n    # The amount of sugar in bottle A after exchange\n    sugar_A = 50 * 0.11 - 0.11 * x + 0.47 * x\n    # The amount of sugar in bottle B after exchange\n    sugar_B = 50 * 0.47 - 0.47 * x + 0.11 * x\n    # The amount of solution in bottle A after exchange\n    solution_A = 50\n    # The amount of solution in bottle B after exchange\n    solution_B = 50\n    \n    # Since the concentrations are the same, we get this equation\n    equation = Eq(sugar_A / solution_A, sugar_B / solution_B)\n\n    # Solve for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_length = 13\n    difference = 25\n    nicks_length = toms_length + difference\n\n    return nicks_length - toms_length\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    chicken_tenders_students = 18\n    total_students = 50\n    \n    percent = (chicken_tenders_students / total_students) * 100\n    \n    return percent\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # convert meters to centimeters\n    plant_spacing_cm = 40\n    first_plant_distance_cm = 20\n    \n    # The effective planting length is the total plot length minus the distance to the first plant (from one side only as we are considering one row)\n    effective_planting_length_cm = plot_length_cm - first_plant_distance_cm\n    \n    # Add one because we count the first cauliflower as well\n    num_cauliflowers = (effective_planting_length_cm // plant_spacing_cm) + 1\n    \n    return num_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '3', '6']\n    perm = set(permutations(cards, 3))\n    return len(perm)\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    count = 0\n    # Iterate through the possible number of candies in the first pile\n    for x1 in range(1, 12):  \n        # Iterate through the possible number of candies in the second pile\n        for x2 in range(x1+1, 13):  \n            # Iterate through the possible number of candies in the third pile\n            for x3 in range(x2+1, 14): \n                # The number of candies in the fourth pile is determined by subtraction\n                x4 = 15 - (x1 + x2 + x3)\n                # Since x4 must be greater than x3, check if this is the case\n                if x4 > x3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base_value = 250\n\n    ans = (percentage / 100) * base_value\n\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    # Convert everything to metres\n    initial_metres = 3.7\n    added_centimetres = 64 / 100  # Convert 64 cm to metres\n    subtract_metres = 2\n    subtract_centimetres = 7 / 100  # Convert 7 cm to metres\n    \n    # Perform the calculation\n    total_metres = (initial_metres + added_centimetres) - (subtract_metres + subtract_centimetres)\n    \n    return total_metres\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbolic variables for the price of a banana and a pear\n    banana, pear = symbols('banana pear')\n\n    # We have two equations based on the problem statement:\n    # Max's purchase: 1 banana + 2 pears = 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    # Emily's purchase: 1 banana + 1 pear = 62p\n    equation2 = Eq(banana + pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_count = 0\n    primes = []\n    \n    for num in range(1, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            prime_count += 1\n            primes.append(num)\n    \n    return prime_count, primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    # Setup the equations based on the problem statement\n    eq1 = Eq(edmund, 2 * susan)\n    eq2 = Eq(peter, 3 * edmund)\n    eq3 = Eq(lucy, peter / 2)\n    eq4 = Eq(lucy + peter + edmund + susan, 120)\n\n    # Solve the system of equations\n    sol = solve((eq1, eq2, eq3, eq4), (lucy, peter, edmund, susan))\n\n    # Extract the solution for Lucy\n    return sol[lucy]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a > 21:\n            break\n    return a\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    frac_apples = 5 / 8\n    num_apples = total_fruit * frac_apples\n    num_pears = total_fruit - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # Since the sequence is a geometric sequence with a common ratio of 2\n    # The nth term of the sequence can be expressed as 2^(n-1)\n    # Therefore, we calculate the 20th and 17th terms\n    term_20 = 2**(20-1)\n    term_17 = 2**(17-1)\n    \n    # now we divide the 20th term by the 17th term\n    ans = term_20 / term_17\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    max_product = 0\n\n    for i in range(1, sum_of_numbers):\n        product = i * (sum_of_numbers - i)\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for three types of rabbits\n    black, white, grey = symbols('black white grey')\n\n    # Total number of black, white and grey rabbits\n    equation1 = Eq(black + white + grey, 59)\n\n    # Total number of black and white rabbits is 11 more than the number of grey rabbits\n    equation2 = Eq(black + white, grey + 11)\n\n    # The number of black rabbits is 9 less than the white rabbits\n    equation3 = Eq(black, white - 9)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6  # Monday to Saturday\n    total_earnings = daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    average_initial = 60\n    people_initial = 3\n    total_books_initial = average_initial * people_initial\n    \n    average_after_dennis = average_initial + 10\n    people_after_dennis = people_initial + 1\n    total_books_after_dennis = average_after_dennis * people_after_dennis\n    \n    dennis_books = total_books_after_dennis - total_books_initial\n\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_height = 16\n    climb_rate = 5\n    slide_rate = 3\n    current_height = 0\n    day = 0\n\n    while current_height < total_height:\n        day += 1\n        current_height += climb_rate\n        if current_height >= total_height:\n            break\n        current_height -= slide_rate\n\n    return day\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import primerange, isprime\n    from math import sqrt, floor\n    \n    # Finding the smallest two-digit prime number\n    smallest_two_digit_prime = next(iter(primerange(10, 100)))\n    \n    # Finding the largest two-digit square number\n    largest_square_root = floor(sqrt(99))\n    largest_two_digit_square_number = largest_square_root**2\n    \n    # Calculating the product\n    product = smallest_two_digit_prime * largest_two_digit_square_number\n    \n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    # Since flags are placed at a consistent distance, the distance between two consecutive flags is the same.\n    # The distance between the first and fourth flags is the distance between three intervals (1->2, 2->3, 3->4).\n    interval_distance = distance_1_to_4 / 3\n\n    # To find the distance between the first and the ninth flags, we need the distance over 8 intervals (1->2, ..., 8->9).\n    distance_1_to_9 = interval_distance * 8\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_height = (johns_height / ratio_john) * ratio_mike\n\n    return mikes_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths_place = 7\n    tenths_place = 6\n    ones_place = 4\n\n    ans = ones_place + tenths_place * 0.1 + hundredths_place * 0.01\n    return ans\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22  # Speed of the ship in still water in km/h\n    speed_current = 3  # Speed of the current in km/h\n    distance = 200  # The distance to travel downstream in km\n\n    speed_downstream = speed_ship + speed_current  # Speed downstream in km/h\n\n    time = distance / speed_downstream  # Time in hours\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    peaches, A, B = symbols('peaches A B')\n    \n    # From problem statement\n    # If all peaches are given to class A: peaches = 5A + 10\n    # If all peaches are given to class B: peaches = 8B - 2\n    # Number of students in class A is three more than class B: A = B + 3\n    \n    # Equations based on the problem statement\n    equation1 = Eq(peaches, 5*A + 10)\n    equation2 = Eq(peaches, 8*B - 2)\n    equation3 = Eq(A, B + 3)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (peaches, A, B))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    for correct in range(11):\n        wrong = 10 - correct\n        score = correct * 6 - wrong * 2\n        if score == 36:\n            return correct\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    travel_ways = trains + buses + flights\n\n    return travel_ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    return 78.2 - 31.45 + 5.245 - 2.3\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 7 Ds and 1 S is (7+1)!\n    initial_ways = factorial(7 + 1)\n    \n    # Place the remaining 2 Sketches (S) in the 8 possible positions between Ds\n    positions_for_sketches = 8\n    ways_to_place_sketches = positions_for_sketches * (positions_for_sketches - 1)\n    \n    # Calculate total number of ways\n    total_ways = initial_ways * ways_to_place_sketches\n    return total_ways\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, solve, Eq, Integer\n\n    h = symbols('h')\n    equation = Eq(Integer(28512) / h, h**2)\n    \n    possible_values = solve(equation, h)\n    \n    for value in possible_values:\n        if int(value) == value and value.is_positive:\n            return value\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Best-case scenario: Bart picks a red M&M, then a yellow, having two different colors, but he could get another red instead.\n    red_yellow = 1 + 1\n    # Next-best scenario: If he keeps drawing red M&M's then he needs to pick all red and one more of another color.\n    all_red_and_one_more = 3 + 1\n    # However, assuming the worst-case that he picks 2 of the same color, he needs to take all of one color and at least 2 of another color to guarantee two different colors.\n    two_colors_guarantee = max(red_yellow, all_red_and_one_more, 3 + 2)\n\n    return two_colors_guarantee\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    import math\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    # Each father shakes hands with fathers, mothers, and children from other families \n    # There are two fathers, two mothers, and one child in other families\n    handshakes_fathers = 5 * (families - 1) * families\n\n    # Each mother shakes hands with fathers and children from other families\n    # There are two fathers and one child in other families\n    handshakes_mothers = 3 * (families - 1) * families\n\n    # Each child shakes hands with fathers and mothers from other families\n    # There are two fathers and two mothers in other families\n    handshakes_children = 4 * (families - 1) * families\n\n    # Each handshake is counted twice (once for each person), so divide by 2\n    total_handshakes = (handshakes_fathers + handshakes_mothers + handshakes_children) // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_part = \"85274\"\n    index = (79 - 1) % len(recurring_part)  # Adjust index for 0-based and find the position\n    ans = int(recurring_part[index])\n    return ans\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]\n    \n    # There are 5 possibilities for each digit, and there are three digits in a three-digit number.\n    # Thus, use the multiplication rule of counting.\n    total_numbers = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    \n    return total_numbers\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n    # Numbers divisible by 17 and 19 are also divisible by 17*19=323\n    # Start with the largest three-digit number and go down to find the largest number that satisfies the condition\n    for num in range(999, 99, -1):\n        if (num + 2009) % 323 == 0:\n            max_number = num\n            break\n    return max_number\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # We are going to use the difference of squares formula: a^2 - b^2 = (a - b)(a + b)\n    # Here, we recognize that 31415926 and 31415925 are consecutive integers, so we can express\n    # the operation as a difference of squares by increasing the second term by 1 and then subtracting 1:\n    # 31415926^2 - 31415927 * 31415925 = (31415926^2 - 31415925^2) - 31415925\n    # Now, considering a = 31415926 and b = 31415925, we can apply the formula:\n    \n    a = 31415926\n    b = 31415925\n\n    diff_of_squares = (a - b) * (a + b)\n\n    # Since (a - b) = 1, the expression simplifies to\n    ans = diff_of_squares - b\n\n    return ans\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_pages = 62\n    expected_sum = (total_pages * (total_pages + 1)) // 2\n    actual_sum = 1939\n    \n    missing_page = expected_sum - actual_sum\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # If Jane draws one marble at a time, to ensure the worst case scenario:\n    # She could draw all 4 red marbles, all 7 green marbles, all 6 blue marbles\n    # To guarantee the next marble is of a different color, she must draw at least one orange marble.\n    # Hence, she needs to draw at least 1 + 4 (red) + 7 (green) + 6 (blue) to ensure she gets 4 different colors.\n    \n    ans = 1 + 4 + 7 + 6  # 1 is for the orange marble which ensures getting the fourth color\n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 1000):\n        if i + (i + 1) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    hours = 40  # No charge for first 40 hours\n\n    # Calculate additional hours charged at $5 per hour up to 50 hours\n    if bill > 0:\n        additional_hours = min((bill // 5), 10)\n        hours += additional_hours\n        bill -= additional_hours * 5\n\n    # Calculate additional hours charged at $8 per hour from 50 to 60 hours\n    if bill > 0 and hours < 60:\n        additional_hours = min((bill // 8), 10)\n        hours += additional_hours\n        bill -= additional_hours * 8\n\n    # Calculate additional hours charged at $15 per hour after 60 hours\n    if bill > 0:\n        additional_hours = bill // 15\n        hours += additional_hours\n\n    return hours\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    number_of_years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** number_of_years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # We can define a recursive function to calculate the number of ways Jimmy can climb to a certain step\n    def ways_to_step(step):\n        if step == 5:  # if the step is the muddy 5th step, there are 0 ways to step on it\n            return 0\n        if step < 0:  # if the step index is negative, there are 0 ways to climb down (invalid scenario)\n            return 0\n        if step == 0: # if the step index is 0, there's 1 way to be at the ground level (no steps taken)\n            return 1\n        # The number of ways to reach a certain step is the sum of the ways to reach each of 3 previous steps\n        # making one, two, or three steps, as long as it doesn't involve stepping on the muddy (5th) step\n        return ways_to_step(step - 1) + ways_to_step(step - 2) + ways_to_step(step - 3)\n    \n    # Possible paths to avoid step 5 are to go from step 4 directly to 6, thus skipping 5\n    # So we need to calculate the ways to reach step 4 and from there directly to step 6 and onward to step 10\n    ans = ways_to_step(4) * ways_to_step(10 - 6)\n    return ans\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    daily_earning = 60\n    days_in_a_week = 7\n    total_earning = daily_earning * days_in_a_week\n    return total_earning\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # The smallest four odd positive numbers are 1, 3, 5, and 7.\n    # We subtract their sum from the total to find the largest possible fifth number.\n    remaining_sum = 85 - (1 + 3 + 5 + 7)\n    # The remaining number is the largest possible odd number.\n    return remaining_sum\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    tax_eq = Eq(T * 30000 / 100 + (income - 30000) * (T + 3) / 100, (T + 1) * income / 100)\n\n    solutions = solve(tax_eq, (T, income))\n    \n    # Find and return the solution where income is greater than 30000\n    annual_income = [s[1] for s in solutions if s[1] > 30000]\n    return annual_income[0]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship_still_water = 88  # Ship's speed in still water (km/h)\n    speed_current = 12  # Current's speed (km/h)\n    \n    # Speed of the ship downstream is the sum of its own speed and the current's speed\n    speed_downstream = speed_ship_still_water + speed_current\n    \n    distance = 500  # The distance to travel downstream (km)\n    \n    # Time = Distance / Speed\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of 20-cent and 50-cent coins\n    num_20, num_50 = symbols('num_20 num_50')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(num_20 + num_50, 21)  # There are 21 coins in total\n    equation2 = Eq(20*num_20 + 50*num_50, 630)  # The total value of the coins is $6.30, which is 630 cents\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (num_20, num_50))\n    \n    return solutions[num_50]\n\n# Get the answer by calling the function\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distances walked by Alan and Phillip as D\n    # We'll denote the speed per minute of Alan as S\n\n    D, S = symbols('D S')\n\n    # Phillip walks 15 meters more per minute than Alan and takes 12 minutes\n    # The distance Phillip walks is D = S * 12 + 12 * 15\n    # Alan arrives 3 minutes later so he walks for 15 minutes\n    # The distance Alan walks is also D, so for him D = S * 15\n\n    # These give us two equations:\n    # D = S * 12 + 12 * 15\n    # D = S * 15\n\n    equation1 = Eq(D, S * 12 + 12 * 15)\n    equation2 = Eq(D, S * 15)\n\n    # We now solve these two equations to find S and then D\n    solutions = solve((equation1, equation2), (D, S))\n\n    return solutions[D]\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    from math import isqrt\n\n    count = 0\n    num = 2\n    while num <= 2*(10**10):\n        # Check if the number is a perfect square\n        root = isqrt(num)\n        if root * root == num:\n            count += 1\n        # Append \"5\" to the end of the number by calculating num * 10 + 5\n        num = num * 10 + 5\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice_original, tom_original = symbols('alice_original tom_original')\n    alice_spent = 36\n    alice_remaining_difference = 25.40\n    tom_had = 68.10\n\n    # Equation representing money Alice has after spending\n    equation1 = Eq(alice_original - alice_spent, tom_original - alice_remaining_difference)\n    # Equation representing money Tom originally had\n    equation2 = Eq(tom_original, tom_had)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice_original, tom_original))\n\n    return solutions[alice_original]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean_five = 28\n    mean_twelve = 11\n\n    total_five = mean_five * 5\n    total_twelve = mean_twelve * 12\n\n    mean_total = (total_five + total_twelve) / (5 + 12)\n\n    return mean_total\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (original_price * discount_percentage) / 100\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length_with_benches = 74\n    space_between_benches = 7\n    number_of_benches = 9\n\n    # Total spaces between benches is one less than the number of benches\n    total_spacing = (number_of_benches - 1) * space_between_benches\n    # Length of one bench is the total length minus the spacing, divided by the number of benches\n    bench_length = (total_length_with_benches - total_spacing) / number_of_benches\n\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, candies = symbols('a b candies')\n\n    eq1 = Eq(4 * a, candies - 20)\n    eq2 = Eq(6 * b, candies + 16)\n    eq3 = Eq(a, 2 * b)\n\n    solutions = solve((eq1, eq2, eq3), (a, b, candies))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    cut_arms = 21\n    grow_arms = 5\n    original_arms = cut_arms\n\n    # Every time 5 arms are cut, 1 grows back, so net 4 arms are removed. \n    # Subtract 1 to account for the final cut which doesn't trigger new growth.\n    # As the 21st cut won't cause an arm to grow, we subtract 1 from the cut arms for calculations.\n    return original_arms + (cut_arms - 1) // grow_arms * (grow_arms - 1)\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    total_sum = 2021\n    third_greatest = 246\n    remaining_sum_after_third = total_sum - third_greatest  # sum of the remaining 9 numbers\n\n    min_possible_values = list(range(1, 3))  # 1 and 2 are the smallest possible for the two smallest numbers\n    remaining_sum_after_min_values = remaining_sum_after_third - sum(min_possible_values)  # sum of the remaining 7 numbers excluding two smallest\n    \n    min_value_fourth_great = remaining_sum_after_min_values - sum(range(4, 10))  # minimum sum of the largest 6 numbers\n\n    return min_value_fourth_great\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # If we take out 6 coins, they could all be of the same color (either all gold or all silver).\n    # The next coin we take out must be of a different color to guarantee 2 different colored coins.\n    # Therefore, we need to take out 6 + 1 = 7 coins to be sure that we have 2 different colored coins.\n    return 7\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Given the distance between the 1st and 5th tree is 20 cm\n    # This implies there are 4 intervals between these 5 trees (1st to 2nd, 2nd to 3rd, 3rd to 4th, 4th to 5th).\n    num_intervals_1_to_5 = 5 - 1\n    distance_per_interval = 20 / num_intervals_1_to_5  # Distance for each interval.\n\n    # Now we find the number of intervals between the 8th and the 14th tree.\n    num_intervals_8_to_14 = 14 - 8\n    distance_8_to_14 = num_intervals_8_to_14 * distance_per_interval  # Total distance between 8th and 14th tree.\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Since we want non-adjacent numbers to be mutually exclusive,\n    # No two adjacent numbers can share a common divisor greater than 1.\n    # To achieve this, we must select only prime numbers and 1\n    # because any two prime numbers do not share a common divisor other than 1.\n    \n    from sympy import primerange\n\n    # Get all prime numbers from 1 to 24\n    primes = list(primerange(1, 25))\n    # We can include number 1, as it is coprime with every other number\n    primes.append(1)\n\n    # The maximum number of natural numbers that can be selected is\n    # the number of prime numbers in the range plus one (for number 1)\n    num_primes = len(primes)\n\n    return num_primes\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for number in range(1, 511):\n        count += str(number).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    # Direct calculation according to the Law of Addition and Multiplication\n    ans = (38 * 32) + (37 * 33) + (36 * 34)\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    \n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    # We want Jerry's current age\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    grey, father = symbols('grey father')\n    \n    # When Grey was born, his father was 30 years old\n    equation1 = Eq(father - grey, 30)\n    \n    # This year, the age of Grey's father is three times that of Grey's age\n    equation2 = Eq(father, 3 * grey)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (grey, father))\n    \n    # Return the age of Grey's father this year\n    return solutions[father]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Parts for Bud and Pip\n    parts_bud = 1\n    parts_pip = 5\n\n    # Total parts\n    total_parts = parts_bud + parts_pip\n\n    # Create a list of parts\n    parts = [parts_bud, parts_pip]\n    names = ['Bud', 'Pip']\n\n    # Create a bar graph\n    plt.figure(figsize=(5,3))\n    plt.bar(names, parts, color=['blue', 'red'])\n    plt.xlabel('Names')\n    plt.ylabel('Parts')\n    plt.title('Parts Graph of Apples between Bud and Pip')\n\n    # Save the graph to a file\n    plt.savefig('parts_graph.png')\n    plt.close()\n    return 'parts_graph.png'\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction = numerator / denominator\n    ans = 10 * fraction\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n    \n    # Applying the Pigeonhole Principle\n    min_books_on_most_loaded_layer = (total_books + total_layers - 1) // total_layers\n\n    return min_books_on_most_loaded_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    \n    # calculate the number of terms using the formula for the nth term of an arithmetic sequence\n    # nth_term = first_term + (n - 1) * difference\n    n = ((last_term - first_term) // difference) + 1\n    \n    # calculate the sum of an arithmetic sequence using the formula\n    # sum = n / 2 * (first_term + last_term)\n    sum_of_terms = n * (first_term + last_term) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    \n    # Create all permutations of the numbers 3, 6, 9 with length 3 for three-digit numbers\n    perms = permutations([3, 6, 9], 3)\n    \n    # Convert to a list to count the number of permutations\n    perm_list = list(perms)\n    \n    return len(perm_list)\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    result = 0.12 + 0.345 + 0.6789\n    return result\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for hundred in range(1, 3):  # 0 cannot be in hundred's place\n        for ten in range(0, 3):  # 0, 1, or 2 can be in ten's place\n            for unit in range(0, 3):  # 0, 1, or 2 can be in unit's place\n                if hundred != ten and ten != unit and hundred != unit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    ans = cows - pigs\n    return ans\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = remainder + 1\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    hazel_current_age = y - 3\n    jessica_current_age = hazel_current_age - 3\n    next_year_multiplier = 1\n\n    # Hazel's age next year\n    hazel_next_year_age = hazel_current_age + next_year_multiplier\n    # Jessica's age next year\n    jessica_next_year_age = jessica_current_age + next_year_multiplier\n\n    # Total age next year\n    total_age_next_year = hazel_next_year_age + jessica_next_year_age\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, goats = symbols('total_animals goats')\n    \n    # 65% of the animals were cows initially\n    cows = 0.65 * total_animals\n    \n    # After 240 more cows and goats were added:\n    # - the percentage of cows becomes 65% + 20% = 85%\n    # - the number of goats doubles\n    new_total_animals = total_animals + 240\n    new_cows = 0.85 * new_total_animals\n    new_goats = 2 * goats\n    \n    # Set up the equations based on the descriptions above\n    equation1 = Eq(total_animals - cows, goats)\n    equation2 = Eq(new_total_animals - new_cows, new_goats)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (total_animals, goats))\n    \n    return solutions[goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    first_section_cm = 30\n    second_section_cm = 1.5 * 100  # converting meters to cm\n    third_section_cm = 150 / 10    # converting mm to cm\n\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    difference = 38 - melanie_age\n    uncle_age = melanie_age + difference\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students = range(1, 51)\n    facing_teacher = [student for student in students if student % 4 != 0 and student % 6 != 0]\n    return len(facing_teacher)\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # Degree of the monomial is given by the sum of the exponents of the variables.\n    # In the monomial -x^3y^(2n), the degree is 3 (from x^3) + 2n (from y^(2n)).\n    # We are given that the degree is 5.\n    \n    # Set up the equation for the degree\n    degree_of_monomial = 3 + 2 * n\n    \n    # Since the degree is 5, we have\n    degree_of_monomial = 5\n    \n    # Now we solve for n\n    # 3 + 2 * n = 5\n    # Solving for n gives us:\n    n = (5 - 3) / 2\n    \n    # Return n\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(2, 1) + Fraction(3, 8) + Fraction(6, 1) + Fraction(9, 12) + Fraction(1, 1) + Fraction(14, 16)\n    return result\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_in_3_years = amy_age_5_years_ago\n    sister_age_now = sister_age_in_3_years - 3\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different numbers/letters,\n    # to ensure that we have at least one pair, we will use the Pigeonhole Principle.\n    # We would need to draw one more than 13 different possible cards, because at the 14th card,\n    # we are guaranteed to repeat at least one of the numbers/letters no matter how we pick them.\n    return 13 + 1\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for num in range(100, 1000, 2):  # Even 3-digit numbers start from 100 and end at 998, increment by 2\n        if sum(int(digit) for digit in str(num)) == 21:\n            return num\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/i for i in range(j+1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part = 18\n    whole = (part * 5) / 3\n\n    return whole\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):  # Start at 10, the smallest two-digit number\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cacti, sunflowers = symbols('cacti sunflowers')  # Define the symbols for cacti and sunflowers\n    eq1 = Eq(cacti - sunflowers, 6)                 # cacti = sunflowers + 6\n    eq2 = Eq(2*cacti + 7*sunflowers, 156)           # 2*cacti + 7*sunflowers = 156\n\n    solution = solve((eq1, eq2), (cacti, sunflowers))\n\n    return solution[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    \n    # Equation: 8*book_price + 3*0.40 = 3*book_price + 8*0.40 + 1.00\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1.00)\n    \n    book_cost = solve(equation, book_price)\n    \n    return book_cost[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_sum = sum((2 * i) ** 2 for i in range(1, 11))\n    odd_sum = sum((2 * i - 1) ** 2 for i in range(1, 11))\n    return even_sum - odd_sum\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    poured_water = 2 * 6\n    remaining_water = total_water - poured_water\n    return remaining_water\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of Liverpool fans at first\n    # then x + 1000 will be the number of Manchester United fans at first\n    # after 30 minutes, the number of Liverpool fans becomes x + 472\n    # after 30 minutes, the number of Manchester United fans becomes x + 1000 + 4836\n    # The number of Manchester United fans is 3 times that of Liverpool fans\n    x = symbols('x')\n    equation = Eq((x + 1000 + 4836), 3 * (x + 472))\n    # solve for x\n    sol = solve(equation)\n\n    return sol[0]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')  # Price of one book\n    pencil_price = 40  # Price of one pencil in pence\n    \n    # Sarah's total cost (in pence) is 100 more (since 1 pound = 100 pence) than Rebecca's total cost\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 100)\n    \n    # Solve for the price of the book\n    book_price_solution = solve(equation, book_price)\n    \n    # Return the price in pounds\n    return book_price_solution[0] / 100  # Convert from pence to pounds\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_extra_points = 18\n    jack_points = andrew_points + jack_extra_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ans = comb(total_players, players_needed)\n    return ans\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    final_amount = 3 + 2  # Money after giving $2 to Mike and being left with $3\n\n    # Since Andy gave half the remaining money to Nini and had final_amount left,\n    # she had 2 * final_amount before giving it to Nini.\n    before_nini = 2 * final_amount\n\n    # Similarly, she had 2 * before_nini before giving half to Bob.\n    before_bob = 2 * before_nini\n\n    # And finally, Andy had 2 * before_bob before giving half to her mother.\n    original_money = 2 * before_bob\n\n    return original_money\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    sum_numbers = 4867 + 285\n    return sum_numbers\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol x\n\n    equation = Eq(7*x + 3*(x + 5), 45)  # Construct the equation\n\n    solutions = solve(equation, x)  # Solve for x\n\n    return solutions[0]  # Return the solution (assuming there's only one solution)\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n\n    equation1 = Eq(peaches, 5 * students_A + 10)\n    equation2 = Eq(peaches, 8 * students_B - 2)\n\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    digit_length = 1\n    number_count = 9\n    while True:\n        if 2023 <= digit_length * number_count:\n            break\n        else:\n            2023 -= digit_length * number_count\n            digit_length += 1\n            number_count *= 10\n    \n    number_str = str((2023 - 1) // digit_length + 10**(digit_length - 1))\n    digit_in_number = (2023 - 1) % digit_length\n    ans = int(number_str[digit_in_number])\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - first_number - second_number\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of T-shirts and c be the number of caps\n    t, c = symbols('t c')\n\n    # We know the ratio of T-shirts to caps is 8:5, so we have the equation 8c = 5t\n    equation1 = Eq(8 * c, 5 * t)\n\n    # Siti sold 1/4 of the t-shirts and 1/5 of the caps\n    # The total amount collected from selling the items is $132\n    # So we have the equation (1/4)t * 3 + (1/5)c * 5 = 132\n    equation2 = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    # We only need the number of T-shirts\n    return solutions[t]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 1999 - 11  # The year of birth can be found by subtracting 11 from 1999 (since the 11th birthday is on 1/1/99)\n    age_on_31_12_01 = 2001 - birth_year  # The age on 31/12/01 can be calculated by subtracting the birth year from 2001\n    return age_on_31_12_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the given digits\n    digits = [4, 6, 2, 5]\n    permuted_numbers = [''.join(map(str, p)) for p in permutations(digits)]\n\n    # Filter out the odd numbers and convert them to integers\n    odd_numbers = [int(number) for number in permuted_numbers if int(number) % 2 != 0]\n\n    # Return the smallest odd number\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    boat_capacity = 6\n\n    full_trips = total_students // boat_capacity\n    remaining_students = total_students % boat_capacity\n\n    if remaining_students > 0:\n        full_trips += 1  # One more trip for the remaining students\n\n    return full_trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    number_to_find = 36\n\n    ordinal_number = (number_to_find - first_term) // common_difference + 1\n\n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the number of cards Eric has initially\n    x = symbols('x')\n    \n    # Joe has 7 times as many game cards as Eric\n    joe_initial = 7 * x\n    \n    # Joe gives 'y' game cards to Eric to make their both number of cards 168\n    y = symbols('y')\n    \n    # After giving 'y' cards, Joe and Eric have 168 cards each\n    equation1 = Eq(joe_initial - y, 168)\n    equation2 = Eq(x + y, 168)\n    \n    # Solve the system of equations to find the values of 'x' and 'y'\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    # The ones and tens digits should be among the single-digit primes\n    prime_digits = [2, 3, 5, 7]\n    \n    for tens in prime_digits:\n        for ones in prime_digits:\n            N = tens*10 + ones\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    escapees = 5\n    additional_catch = 9\n\n    total_catch = (initial_catch - escapees) + additional_catch\n\n    return total_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time_available = 80  # 1 hour and 20 minutes is 80 minutes\n    num_pictures = total_time_available / time_per_picture\n    return num_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # Directly opposite in a circle means half the number of total people are between them.\n    # 19 - 6 gives the number of people between them counting from 6 to 19.\n    people_between = 19 - 6\n    # Total people is twice the people between since it's a circle and they are opposites.\n    total_people = 2 * people_between\n    # Return the total number of people\n    return total_people\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    total_apples = 10\n    # As the two groups must have different numbers of apples,\n    # we iterate from 1 to total_apples // 2 to avoid duplications\n    # because splitting into (1,9) is the same as (9,1)\n    for apples_in_group in range(1, total_apples // 2 + 1):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    return factorial(5)\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    # Let's denote the number of pears Anne has by 'a', and the number Charlie has by 'c'.\n    # From the problem we know that:\n    # a + c = total_pears\n    # a - 6 = c + 6\n    # Combining these equations we get:\n    # (a - 6) + (a - 6) = total_pears\n    # 2 * (a - 6) = total_pears\n    # a - 6 = total_pears / 2\n    # a = total_pears / 2 + 6\n\n    a = total_pears / 2 + 6\n    return int(a)\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming = 14\n    joanne_swimming = 5\n    difference = amy_swimming - joanne_swimming\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    # Iterate through possible values for a, b, c, and d\n    for a in range(1, 10):  # a cannot be zero as it's the leftmost digit\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    # Construct the number abcd and calculate the expression\n                    abcd = a * 1000 + b * 100 + c * 10 + d\n                    abc = a * 100 + b * 10 + c\n                    ab = a * 10 + b\n                    if abcd + abc + ab + a == 1370:\n                        return abcd  # Return the value of abcd if the expression equals 1370\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # Before receiving stamps\n    equation1 = Eq(isaac, 5 * joseph)\n    # After receiving stamps\n    equation2 = Eq(joseph + 154, 9 / 10 * isaac)\n\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial = 1\n    for i in range(1, 30):\n        factorial *= i\n\n    count_zeroes = 0\n    while factorial % 10 == 0:\n        count_zeroes += 1\n        factorial //= 10\n\n    return count_zeroes\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    base_8_str = \"12345654321\"\n    base_10_int = int(base_8_str, 8)\n    remainder_sum = base_10_int % 7 + base_10_int % 9\n    return remainder_sum\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let x be the length of the path\n    # The ratio of the speed of Linda to Ted is 3:4, which is also the ratio of the distances they jogged\n    # Linda jogged 1200 m when she met Ted, so Ted jogged x - 1200 m\n    # Linda's distance over Ted's distance is 3:4, so 1200 / (x - 1200) = 3/4\n    # Solving for x gives us the length of the path\n    # 1200 * 4 = 3 * (x - 1200)\n    # 4800 = 3x - 3600\n    # 8400 = 3x\n    # x = 2800\n    return 2800\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2 + 0 + 1 + 8 + A) % 9 == 0:\n            number = int(f\"2018{A}\")\n            remainder = number % 8\n            return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # According to Ryan's statement\n    squirrels_in_front_of_Ryan = 5\n    # According to Elvis's statement\n    squirrels_behind_Elvis = 7\n    \n    # Since Ryan is in front of Elvis, and there is only 1 squirrel between them,\n    # we need to add 1 (squirrel between Ryan and Elvis), 1 (Ryan himself), and 1 (Elvis himself)\n    total_squirrels = squirrels_in_front_of_Ryan + squirrels_behind_Elvis + 1 + 1 + 1\n    \n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This is a classic problem of derangements, also known as subfactorials or !n\n    # subfactorial(n) is often denoted by !n\n    # It can be solved using a recursive formula: !n = (n-1)(!(n-1) + !(n-2))\n    \n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    return numerator / denominator\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n\n    ans = (percentage / 100) * total_weight\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initial number of pupils in School P and School Q\n    p, q = symbols('p q')\n\n    # Initial ratio condition\n    initial_ratio = Eq(p/q, 2/3)\n\n    # After admitting 240 primary one pupils to each school, the new ratio condition\n    new_ratio = Eq((p + 240) / (q + 240), 3/4)\n\n    # Solve the equations to find the values of p and q\n    solutions = solve((initial_ratio, new_ratio), (p, q))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    total_sum = sum(range(1, 20, 2))\n    return total_sum\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Jack's current age\n    jack_now = symbols('jack_now')\n\n    # Create the equation based on the problem statement\n    # Jack's age five years ago: jack_now - 5\n    # Jack's age in eight years: jack_now + 8\n    # The equation: Jack's age five years ago (jack_now - 5) is half the age he will be in 8 years (jack_now + 8)\n    equation = Eq(jack_now - 5, (jack_now + 8) / 2)\n\n    # Solve the equation for Jack's current age\n    solution = solve(equation, jack_now)\n\n    # Return Jack's current age from the solution\n    return solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora spent 70% of her money on a bag\n    percentage_spent_on_bag = 70\n\n    # The remainder is therefore 100% - 70% = 30%\n    remainder = 100 - percentage_spent_on_bag\n\n    # She then spent 3/8 of the remainder on a purse\n    fraction_spent_on_purse = 3 / 8\n\n    # The percentage of her original money she spent on a purse is:\n    # (3/8 of the remainder) = (3/8 * 30%) of her original money\n    percentage_spent_on_purse = fraction_spent_on_purse * remainder\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n    \n    # Timmy used 12 fewer straws than Kenny\n    equation1 = Eq(timmy, kenny - 12)\n    # Ron used 20 more straws than Kenny\n    equation2 = Eq(ron, kenny + 20)\n    # The three children used 284 straws altogether\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    # Calculate the total number of candies originally\n    total_candies = 5 * 12\n    # After one more student joins, there are now 6 students\n    students_after = 5 + 1\n    # Redivide the candies among 6 students\n    candies_each_after = total_candies // students_after\n    return candies_each_after\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"EDUCATION\")\n    total_vowels = len(\"EUAIO\")\n    total_consonants = total_letters - total_vowels\n\n    # Total arrangements without any restrictions\n    total_arrangements = factorial(total_letters)\n\n    # Total arrangements with all vowels together\n    # Treating the vowels as a single unit plus the consonants - (5 vowels + 4 consonants)\n    arrangements_vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n\n    # Subtracting arrangements with all vowels together from total arrangements\n    ans = total_arrangements - arrangements_vowels_together\n    return ans\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n\n    solution_value = solve(equation, x)\n\n    return solution_value[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    sweets_bought = 11\n    wrappers = 11\n    total_sweets = sweets_bought\n\n    while wrappers >= 3:\n        new_sweets = wrappers // 3\n        total_sweets += new_sweets\n        wrappers = wrappers % 3 + new_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given angles\n    angle_BAC = 50\n\n    # The sum of angles in a triangle is 180 degrees.\n    sum_of_angles_triangle = 180\n\n    # Since BP and CP are angle bisectors, angles ABP and PBC are equal,\n    # as well as angles ACP and PCB.\n    # Let x represent the magnitude of angle ABP and PBC, and y represent the magnitude of angle ACP and PCB.\n    # Then angle ABC = 2x and angle ACB = 2y, \n    # and by the triangle sum theorem, angle BAC + angle ABC + angle ACB = 180, we have\n    # 50 + 2x + 2y = 180.\n    # Therefore, 2x + 2y = 180 - 50\n\n    angle_ABC_and_ACB = sum_of_angles_triangle - angle_BAC\n\n    # Now we know that angle BPC is an external angle to triangle ABP and triangle ACP, so\n    # m_angle_BPC = angle ABP + angle ACP\n    # m_angle_BPC = x + y\n    # But from above, 2x + 2y = angle_ABC_and_ACB, so x + y is half of that.\n\n    angle_BPC = angle_ABC_and_ACB / 2\n\n    return angle_BPC\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40', '%H:%M')\n    duration = timedelta(hours=4, minutes=50)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    total_cost = 10\n    selling_price_per_bag = 0.65\n    weight_per_bag = 250\n    total_weight = 5000\n\n    num_bags = total_weight / weight_per_bag\n    total_revenue = num_bags * selling_price_per_bag\n    \n    profit = total_revenue - total_cost\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # The number of different ways from Ayton to Beeton to Ceeton to Deeton\n    ayton_beeton_ceeton_deeton = 4 * 5 * 6\n\n    # The direct number of different ways from Ayton to Deeton\n    ayton_deeton = 3\n\n    # Total number of different ways from Ayton to Deeton is the sum of the above two\n    total_ways = ayton_beeton_ceeton_deeton + ayton_deeton\n\n    return total_ways\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each bird type\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Equation 1: The number of two-tailed birds is 5 more than twice as many as the number of eight-tailed birds.\n    eq1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n\n    # Equation 2: The number of three-tailed birds is 2 more than half the number of six-tailed birds.\n    eq2 = Eq(three_tailed, 2 + 0.5 * six_tailed)\n\n    # Equation 3: The total number of tails is 2 less than four times as many as the total number of heads.\n    eq3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed, 4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n\n    # Equation 4: The difference between the total number of heads and their tails is 241.\n    eq4 = Eq((two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    # Extracting the number of three-tailed birds\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    return 20 * 3 // 15\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_difference\n\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return round(ans, 2)\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    max_number = 2016\n    count_doubly_underlined = 0\n\n    # Check all numbers from 1 to 2016\n    for number in range(1, max_number + 1):\n        underline_count = 0\n        \n        # Check if the number is a multiple of 2, 3, or 4\n        if number % 2 == 0:\n            underline_count += 1\n        if number % 3 == 0:\n            underline_count += 1\n        if number % 4 == 0:\n            underline_count += 1\n        \n        # If the number is underlined exactly twice, increase the count\n        if underline_count == 2:\n            count_doubly_underlined += 1\n\n    return count_doubly_underlined\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe_initial = symbols('joe_initial')\n\n    sally_initial = 3.75\n    spent_each = 2.50\n    remaining_total = 5\n\n    # Equation representing the total remaining money after they both buy ice-cream cones\n    equation = Eq(sally_initial - spent_each + joe_initial - spent_each, remaining_total)\n\n    # Solve for Joe's initial amount of money\n    sol = solve(equation, joe_initial)\n\n    return sol[joe_initial]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_average = 135\n    last_5_days_average = 151\n    total_days = 8\n\n    total_trees_first_3_days = first_3_days_average * 3\n    total_trees_last_5_days = last_5_days_average * 5\n\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    average_trees = total_trees / total_days\n\n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "def solution():\n    from math import comb\n\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate combinations for each possible pair\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vege = comb(salads, 1) * comb(vegetables, 1)\n    salad_sandwich = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vege = comb(soups, 1) * comb(vegetables, 1)\n    soup_sandwich = comb(soups, 1) * comb(sandwiches, 1)\n    vege_sandwich = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    # Sum all combinations\n    ans = salad_soup + salad_vege + salad_sandwich + soup_vege + soup_sandwich + vege_sandwich\n    \n    return ans\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(0, 10):\n            for one in range(0, 10, 2):\n                if hundred + ten + one == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    eq = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    magic_number_solution = solve(eq, magic_number)\n\n    return magic_number_solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    total_students = 0\n    boys_diff = 32\n    side_length = 1\n    \n    # Since the boys are on the outermost layer and then alternate, we can start from the smallest\n    # square (1x1) and add layers of boys and girls until the difference is equal to boys_diff.\n    \n    while True:\n        girls = (side_length - 2) ** 2 if side_length > 1 else 0\n        boys = side_length ** 2 - girls\n        \n        if boys - girls == boys_diff:\n            total_students = boys + girls\n            break\n        \n        side_length += 2  # Increase the side length by 2 to account for the next layer of boys and girls\n    \n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        if (isprime(n) and\n            isprime(n + 2) and\n            isprime(n + 4) and\n            isprime(n + 106) and\n            isprime(n + 308)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters / 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    # Let x be the mass of strawberries, and (x + 448) be the mass of mangoes.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # mass of strawberries\n\n    # Equation: After giving away 900g mangoes, strawberries is twice the mass of mangoes.\n    equation = Eq(x, 2 * ((x + 448) - 900))\n\n    mass_of_strawberries = solve(equation, x)\n\n    return mass_of_strawberries[0]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples - lemons, 12)\n    total_items_solution = solve(equation, total_items)\n\n    lemons_number = lemons.subs(total_items, total_items_solution[0])\n\n    return int(lemons_number)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent Max's original amount of money\n    # Let a represent Anthony's original amount of money\n    m, a = symbols('m a')\n\n    # Max buys the chocolates, so he spends $12\n    equation1 = Eq((m - 12) / a, 2 / 5)\n\n    # Anthony buys the chocolates, so he spends $12\n    equation2 = Eq(m / (a - 12), 8 / 13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Return the amount Max had originally\n    return solutions[m]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    # Let the total number of red stickers be 'r' and blue stickers be 'b'.\n    # Since they are equal initially, let's assume r = b\n    # Liz gave away 2/3 of her red stickers, which means she kept 1/3 of her red stickers.\n    # Let the fraction of blue stickers Liz kept be 'x', so she gave away (1-x) fraction of her blue stickers.\n    # The total stickers she kept is 1/3 of red (which is r), plus x times blue (which is b).\n\n    # Initial equation based on the description:\n    # (1/3)r + xb = (1/4)(r + b)\n    # Since r = b, (1/3)r + xb = (1/4)(2r)\n    # Solving for x: (1/3) + x = 1/2\n    # x = 1/2 - 1/3 = (3-2)/6 = 1/6\n    # Fraction of blue stickers Liz gave away: 1 - x = 1 - 1/6 = 5/6\n\n    x = 1 - (1/2 - 1/3)\n    \n    return x\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Total pens is 20 and total kids is 6\n    # By giving each child one pen, we have 20 - 6 pens left to distribute\n    pens_remaining = 20 - 6\n\n    # This is a problem of distributing n identical items into r distinct groups\n    # which is equivalent to calculating Combination (n+r-1, r-1)\n    # Pens are identical and kids are distinct\n    # Here n = pens_remaining and r = 6 (number of kids)\n    # We use the formula: C(n+r-1, r-1) = (n+r-1)! / [n! * (r-1)!]\n\n    total_ways = factorial(pens_remaining + 6 - 1) // (factorial(pens_remaining) * factorial(6 - 1))\n\n    return total_ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    last_digit = 4\n    cycle = [4, 6, 4, 6]  # 4^1 = 4, 4^2 = 16, 4^3 = 64, 4^4 = 256 -> pattern repeats every 4 powers\n    # Get the position of the last digit in the cycle for 444^2022\n    position = 2022 % len(cycle)\n    # We need to access the last digit, adjust the zero-based index\n    position = position - 1 if position > 0 else -1\n    return cycle[position]\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # To minimize the biggest pile, we distribute the marbles into increasing piles.\n    for biggest_pile in range(1, 16):\n        for pile2 in range(1, biggest_pile):\n            for pile3 in range(1, pile2):\n                for pile4 in range(1, pile3):\n                    if pile4 + pile3 + pile2 + biggest_pile == 16:\n                        return biggest_pile\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # First, convert all quantities to a common unit, let's use millimetres.\n    conversions = {\n        'millimetres': 1,\n        'centimetres': 10,\n        'metres': 1000,\n        'kilometres': 1000000\n    }\n    \n    # Pairs of value and unit to be compared\n    quantities = [\n        (10, 'millimetres'),\n        (100, 'centimetres'),\n        (10, 'metres'),\n        (2, 'kilometres'),\n        (2800, 'centimetres'),\n        (2500, 'metres'),\n        (100, 'millimetres'),\n        (100, 'metres')\n    ]\n    \n    # Convert all quantities to millimetres\n    millimetres = [value * conversions[unit] for value, unit in quantities]\n    \n    # Find the minimum value in millimetres (smallest length)\n    min_length = min(millimetres)\n    \n    return min_length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # total number of days\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    # sum of arithmetic series\n    total_pages = (num_days / 2) * (first_day_pages + last_day_pages)\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4', '5', '6']\n    odd_digits = ['1', '3', '5'] # List of odd digits\n    count = 0\n\n    for perm in permutations(digits, 3):\n        # Ensure last digit is odd to create an odd number\n        if perm[2] in odd_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    # Number of students that can swim\n    swim = 20\n    # Number of students that can play basketball\n    basketball = 25\n    # Number of students that can do both swimming and basketball\n    both = 10\n    # Number of students that can do neither\n    neither = 9\n    \n    # Using Inclusion-Exclusion Principle to calculate the total number of students\n    total_students = (swim + basketball) - both + neither\n    \n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 4.\n    # The first term a_1 = 3, and the last term a_n is 19.\n    # The sum of an arithmetic sequence can be calculated as:\n    # S_n = n/2 * (a_1 + a_n)\n    \n    a_1 = 3\n    a_n = 19\n    common_difference = 4\n\n    # Calculate the number of terms n\n    n = (a_n - a_1) // common_difference + 1\n\n    # Calculate the sum S_n\n    S_n = n * (a_1 + a_n) // 2\n    \n    return S_n\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            return current_steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(C - A, 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = sum(str(i).count('4') for i in range(1, 201))\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4*pupils, 8)\n    equation2 = Eq(6*pupils - bookmarks, 10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    for cows in range(total_animals + 1):\n        ducks = total_animals - cows\n        if 4 * cows + 2 * ducks == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    total_children = 11 + 5\n    total_average_height = 122.5\n    girls_average_height_more = 3.2\n    \n    # average height of boys\n    boys_average_height = (total_average_height * total_children - girls_average_height_more * 11) / total_children\n    \n    # average height of girls\n    girls_average_height = boys_average_height + girls_average_height_more\n    \n    return girls_average_height\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Using the concept of inductive recursion, which is a pattern where the nth term\n    # is dependent upon the (n-1)th term, we use the formula for the maximum number\n    # of regions created with n lines (or triangles in this case):\n    # R_n = R_(n-1) + n, with R_1 = 2 (the first line creates two parts)\n    #\n    # Here, a triangle can be thought of as contributing 3 lines.\n    # We will calculate R_3, R_6, R_9, R_12, and R_15 where R_3 = 7\n    # R_3 is the base case, as 1 triangle divides the plane into 2 + 3 = 5 parts,\n    # and then we add 1 for the outer region which gives 7.\n\n    R_n_minus_1 = 7  # The maximum regions for 3 lines (1 triangle)\n    total_regions = R_n_minus_1\n    lines_count = 6  # Starting from the second triangle, which adds 3 more lines\n\n    # For each subsequent set of 3 lines (each triangle), apply the inductive step\n    for n in range(2, 6):  # We have triangle 2 through 5 to add\n        R_n = R_n_minus_1 + lines_count\n        total_regions = R_n\n        R_n_minus_1 = R_n\n        lines_count += 3  # Each triangle adds 3 more lines to the previous count\n\n    return total_regions\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    total_students = 70\n    total_average = 66\n    girls_average = 70\n    boys_average = 63\n    \n    # Total students equation\n    total_students_eq = Eq(boys + girls, total_students)\n    # Average score equation, based on the scores and the number of boys and girls\n    average_score_eq = Eq(boys*boys_average + girls*girls_average, total_students * total_average)\n    \n    # Solving the system of equations\n    solutions = solve((total_students_eq, average_score_eq), (boys, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    n = 9  # Total number of terms\n\n    # We know that the sum of an arithmetic sequence is given by\n    # S = n/2 * (first_term + last_term)\n    # and the difference (common difference) between consecutive terms for odd numbers is 2.\n\n    # Let's denote the first term of the sequence as 'first_term'.\n    # The last term will then be 'first_term + 2*(n-1)' since there are (n-1) differences (steps) each of 2.\n    # We can setup the equation for the sum:\n    # 1503 = n/2 * (first_term + first_term + 2*(n-1))\n\n    # Solving for first_term gives us:\n    first_term = (1503 * 2 / n - 2 * (n - 1)) // 2\n\n    return first_term\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # Given terms and their positions in the sequence\n    term_pos_1 = 32\n    term_value_1 = 157\n    term_pos_2 = 108\n    term_value_2 = 537\n\n    # Calculate the common difference\n    common_difference = (term_value_2 - term_value_1) / (term_pos_2 - term_pos_1)\n\n    # Calculate the first term\n    first_term = term_value_1 - (term_pos_1 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of candies Donna had at first\n    x = symbols('x')\n    \n    # Donna kept half of the number of candies plus 3 candies\n    donna_kept = (x / 2) + 3\n\n    # The remaining candies given to Jane\n    jane_got = x - donna_kept\n\n    # Jane ate 1/3 of the candies plus 4 candies\n    jane_ate = (jane_got / 3) + 4\n    \n    # The remaining candies given to Kate\n    kate_got = jane_got - jane_ate\n\n    # Kate ate 1/4 of the candies and had 42 candies left\n    kate_ate_plus_left = (kate_got / 4) + 42\n    \n    # Solve the equation where kate_got is equal to kate_ate_plus_left\n    equation = Eq(kate_got, kate_ate_plus_left)\n\n    # solve the equation\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 3 other individuals that A can pass the ball to.\n    # After A passes to one of them, say B, there are two possibilities for the second pass:\n    # B can pass it to either C or D (but not back to A, as they pass it immediately).\n    # Let's say B passes to C. Now C has two options: pass back to B (who passes it to A), or pass to D (who then passes it to A).\n    # Overall, each of the three individuals has 2 options to pass the ball such that it eventually returns to A.\n    # Since there are 3 individuals to start with, each with 2 options, we have a total of 3*2 = 6 methods.\n\n    return 3 * 2\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let's denote the number of storybooks Anthea has initially as A.\n    # The problem says that after giving 4 books, Jason and Anthea will have the same number of books.\n    # Therefore, we can write the following equation:\n    # Jason's books after giving = Anthea's books after receiving\n    # (30 - 4) = A + 4\n    # We can now solve for A:\n    A = 30 - 4 - 4\n\n    # The difference of the number of storybooks between Jason and Anthea at first is:\n    difference = 30 - A\n    \n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    from itertools import permutations\n\n    # Get all permutations of the digits 0-9, where the positions represents the letters P, Q, R, S, T, respectively\n    for P, Q, R, S, T in permutations(range(10), 5):\n        # Base condition of the problem (no leading zero for two-digit numbers)\n        if Q == 0:\n            continue\n        \n        # Conditions that must be satisfied for a valid solution\n        if R == (P + S) % 10 and (P + S) // 10 == (R + Q) % 10 and T == (R + Q) // 10:\n            return Q * 10 + P\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    from math import lcm  # Least Common Multiple\n    ans = lcm(4, 10)\n    return ans\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2  # William's jogging speed in meters per second\n    time_s = 12 * 60   # 12 minutes converted into seconds\n\n    distance = speed_m_per_s * time_s  # Total distance jogged\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_2020_and_505 = 505\n    other_factor_2020 = 4\n    other_factor_505 = 1\n    term1_multi_68 = other_factor_2020 * 68\n    term2_multi_128 = other_factor_505 * 128\n\n    ans = common_factor_2020_and_505 * (term1_multi_68 + term2_multi_128)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    # Let the efficiency of A be 2 units/day and B be 1 unit/day\n    # Also, let the total work be represented as W (in units)\n\n    # As given, A finishes 12 days before B\n    # So, A takes x days and B takes x + 12 days to complete W units of work\n    # Therefore, A's work is 2W = 2x units and B's work is W = x + 12 units\n\n    # From A's work: 2W = 2x => W = x\n    # From B's work: W = x + 12 => x = W - 12\n\n    # W = x and x = W - 12 => W = W - 12 => 12 = W - W => 12 = 0 (which is not possible)\n    # We made a mistake, let's make A's daily work 2 units and B's daily work 1 unit\n    # Therefore, in terms of work done, A's total work is 2 * (x - 12) and B's total work is x\n    # Since W = A's total work = B's total work:\n    # 2 * (x - 12) = x\n\n    # Solving the above equation will give us the days required for B to finish the job.\n    # After getting the days for B, we can calculate their combined work per day (A's 2 units + B's 1 unit)\n    # And finally, we will find out in how many days they both can complete the work together.\n\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(2 * (x - 12), x)\n    days_b = solve(equation, x)[0]\n\n    # Hence, A takes (days_b - 12) days and B takes days_b days\n    # Combined efficiency of A and B per day = 2 (for A) + 1 (for B) = 3 units/day\n    # They will take W / 3 days to complete the work together\n\n    # Let's solve for W now\n    W = days_b  # Total work is equal to the number of days B takes (as B's efficiency is 1 unit/day)\n\n    combined_efficiency_per_day = 3  # A's and B's combined work per day\n    days_together = W / combined_efficiency_per_day\n\n    return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    change = 4.83\n    newspaper_cost = 2.20\n    \n    tissues_cost = total_paid - change - newspaper_cost\n    \n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Let the number of boys (and initially also girls) be b.\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')\n    # Equation representing the scenario after some boys and girls left.\n    equation = Eq(b - (3/5)*b, (b - 42) - 12)\n    # Solving the equation.\n    total_boys = solve(equation, b)[0]\n    # Since the number of boys equals the number of girls initially,\n    # the total number of students is twice the number of boys or girls.\n    total_students = total_boys * 2\n\n    return total_students\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours for the time differences\n    time_late = 12 / 60\n    time_early = -4 / 60\n\n    # Define the time difference in terms of speed and distance\n    # Let the actual time to travel the distance be 't' hours, and the distance be 'd' km.\n    # For speed 3 km/h, time taken is t + 1/5 hours (12 minutes)\n    # For speed 5 km/h, time taken is t - 1/15 hours (4 minutes)\n    # Since distance = speed * time, we can write two equations:\n    # 3 * (t + 1/5) = d (first case - late by 12 minutes)\n    # 5 * (t - 1/15) = d (second case - early by 4 minutes)\n    \n    # We can equate both distances to find 't':\n    # 3 * (t + 1/5) = 5 * (t - 1/15)\n    # Solve for 't':\n    t = (3 / 5 * 1/5 + 5 / 15) / (5 - 3)\n    \n    # Now use 't' to calculate the distance 'd':\n    d = 3 * (t + 1/5)\n    \n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3']\n    count = 0\n    for r in range(1, len(digits) + 1):\n        count += len(list(permutations(digits, r)))\n    return count\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 * tomatoes + 3\n\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Rachel's candy as r and Alice's candy as a\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's remaining candy\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate the total amount of candy originally\n    total_candy = solutions[r] + solutions[a]\n    \n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio of boys to girls: 3:2\n    equation1 = Eq(boys/girls, 3/2)\n    \n    # After 12 boys and 12 girls joined the group, the ratio became 19:14\n    equation2 = Eq((boys+12)/(girls+12), 19/14)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of children in the Botanic Gardens that afternoon\n    total_children = solutions[boys] + solutions[girls] + 12 + 12\n    \n    return total_children\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    temperature_increase = 13 - (-8)\n    return temperature_increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # Four different colored socks in a row\n    ways_different_colors = factorial(4)\n    \n    # Two different colored pairs of socks in a row\n    ways_two_pairs = factorial(4) // (factorial(2) * factorial(2))\n\n    return ways_different_colors, ways_two_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    value_A = 40\n    value_B = value_A // 2\n    value_C = value_B // 2\n    total_value = value_A + value_B + value_C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    T_earth = 1  # period on Earth in seconds\n    g_earth = 9.81  # gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # gravity on Moon in m/s^2\n    \n    # The period of a pendulum T is proportional to the square root of (length / gravity)\n    # T_moon = T_earth * sqrt(g_earth / g_moon)\n    T_moon = T_earth * sqrt(g_earth / g_moon)\n    \n    return T_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    \n    red_tiles = 0\n    green_tiles = 0\n\n    for i in range(1, side_length+1, 2):  # Each odd layer is red\n        red_tiles += (side_length - i + 1) ** 2\n\n    green_tiles = total_tiles - red_tiles  # Rest are green\n    \n    dominant_color_count = max(red_tiles, green_tiles)\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n    else:\n        dominant_color = 'green'\n    \n    return dominant_color, abs(dominant_color_count - (total_tiles // 2))\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar_1 = 23\n    length_iron_bar_2 = 37\n    length_welded_part = 3\n\n    full_length = length_iron_bar_1 + length_iron_bar_2 - length_welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    # Let w be the number of questions William answers correctly.\n    w = symbols('w')\n    \n    # Justin gets 24 more points than William, so Justin's score is w + 24.\n    # The sum of their scores is 96, i.e., 6w + 6(w + 24) = 96.\n    # The equation for the above description is:\n    equation = Eq(6 * w + 6 * (w + 24), 96)\n    \n    # Solve the equation to find the number of questions William answers correctly.\n    solved_w = solve(equation, w)\n    \n    return solved_w[0]\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n    duration = end_date - start_date\n    return duration.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    for A in range(0, 10):\n        if (A + A + A) == (A * 111):\n            return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    work_rate_a = 1 / 15\n    # B's work rate per day\n    work_rate_b = 1 / 10\n    \n    # Work done by A and B together in 3 days\n    work_done_3_days = 3 * (work_rate_a + work_rate_b)\n    \n    # Remaining work to be done after 3 days\n    remaining_work = 1 - work_done_3_days\n    \n    # Number of days B needs to finish the remaining work\n    days_for_b = remaining_work / work_rate_b\n    \n    return days_for_b\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people_in_outer_layer = 4 * (int(100 ** 0.5)) - 4\n    return people_in_outer_layer\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # = -4, because the sequence is decreasing\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += common_difference  # next term in the sequence\n    \n    return num_terms\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the initial amount of cash Hugo had.\n    x = symbols('x')\n\n    # Hugo gave 3/7 of his cash to his sister, so he has 4/7 left.\n    # Then he gave 1/8 of the remaining cash to his mum, so he has 7/8 of the 4/7 left.\n    # In the end, he had 280 left.\n    equation = Eq((4/7) * (7/8) * x, 280)\n\n    # Solve the equation for x.\n    initial_amount = solve(equation, x)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    total_apples = 80\n    min_apples = 3\n\n    # Using the pigeonhole principle, we can find the minimum class size when one student gets at least 3 apples.\n    # In the worst case, every other student would get 2 apples.\n    # Hence, after giving 3 apples to one student, we're left with 80 - 3 apples, which we distribute as 2\n    # per student.\n    \n    # total_apples - min_apples gives the number of apples left after one student receives 3 apples.\n    # We divide this by 2 (since each of the remaining students gets at least 2 apples) to get the class size.\n    # We add 1 to the result since we've already distributed 3 apples to 1 student.\n    \n    class_size = 1 + ((total_apples - min_apples) // 2)\n    \n    return class_size\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The strategy involves ensuring that after Tom's turn, the number of cards in Pile A and Pile B\n    # is always a multiple of the 'magic number'. For this specific game, the magic number is 36.\n    # This is because 88 mod 36 = 52 mod 36, which means Tom must keep this property to ensure his win.\n    magic_number = 36\n    \n    pile_a_cards = 88\n    pile_b_cards = 52\n    \n    # Tom's strategy:\n    # Make sure that after his turn, the number of cards in both piles is equal modulo the magic number.\n    # Calculate the difference between pile A and B modulo the magic number.\n    diff_mod_magic_number = (pile_a_cards - pile_b_cards) % magic_number\n    \n    # Find out from which pile to take the cards to even out the modulo.\n    if diff_mod_magic_number == 0:\n        # This means the piles are already balanced modulo the magic number.\n        # Tom must disrupt the balance in his favor. He should take the modulo from the larger pile.\n        num_cards_to_take = pile_a_cards % magic_number\n        if num_cards_to_take == 0:\n            num_cards_to_take = magic_number\n            \n        # We return the pile and number of cards Tom should take from that pile.\n        return ('A', num_cards_to_take)\n    else:\n        # If the difference (modulo the magic number) is not zero, Tom should take cards from\n        # the bigger pile to maintain the modulo balance.\n        if pile_a_cards > pile_b_cards:\n            return ('A', diff_mod_magic_number)\n        else:\n            return ('B', diff_mod_magic_number)\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red, white / 2)\n    equation2 = Eq(white, 3/4 * black)\n    equation3 = Eq(red + white + black, 34)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    total_cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return total_cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # As 2014! will have at least one 2 and one 5 as factors, its last digit will be 0.\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5             # Area of the square base\n    hole_area = 1 * 1             # Area of the square hole\n    effective_base_area = base_area - hole_area  # Subtracting hole area from base area\n    height = 480 / effective_base_area          # Volume divided by base area gives the height\n    \n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    ans = sum(i * (2 * i - 1) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    pencils_for_pen = pen_cost // pencil_cost\n    \n    return pencils_for_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y, g = symbols('y g')  # y for yellow beads, g for green beads\n    # Initial ratio of yellow to green beads: 3:2\n    equation1 = Eq(y/g, 3/2)\n    # After buying more beads, the ratio of green to yellow is 3:2\n    equation2 = Eq((g + 20)/(y + 5), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y, g))\n\n    # Compute the total number of beads he had at first\n    total_beads = solutions[y] + solutions[g]\n\n    return total_beads\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Divide by 6 to correct for overcounting\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n\n    total_marbles_at_first = marbles_given_to_brother + marbles_given_to_each_sister * 2 + marbles_left_with_henry\n\n    return total_marbles_at_first\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # For two-digit palindromes: 11 to 99 with the same digit\n    for i in range(1, 10):\n        count += 1\n    \n    # For three-digit palindromes: 101 to 999 with the first and last digits the same\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum(2 * i - 1 for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    time_met = 4\n\n    # distance they met\n    distance_met = (amy_speed + christen_speed) * time_met\n\n    # time for Christen to reach Amy's starting point\n    time_christen_to_amy = distance_met / christen_speed\n\n    return time_christen_to_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    ans = 617 + 385\n    return ans\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    marks_correct = 4\n    marks_wrong = -1\n    total_score = 110\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * marks_correct + wrong * marks_wrong\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = 0.35 * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    lemon_ratio = 4\n    chocolate_ratio = 5\n    total_ratio = lemon_ratio + chocolate_ratio\n    lemon_cakes = (lemon_ratio / total_ratio) * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    ans = lcm(2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Starting from Lily, she can pass the ball to Cici or April (2 options)\n    # Whoever receives the ball from Lily has 2 options to pass next (Cici -> April or April -> Cici, or vice versa)\n    # So in total, for 2 passes starting from Lily, there are 2 * 2 ways\n\n    count = 2 * 2\n    return count\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    total_count = 0\n    # There are 9 possibilities (1-9) for the first digit (hundreds place)\n    # because it cannot be 0\n    first_digit_count = 9\n    \n    # There are 10 possibilities (0-9) for the second digit (tens place)\n    # But one digit is already used in the hundreds place, so we subtract one to get 9\n    second_digit_count = 9\n    \n    # There are two types of numbers to consider:\n    # Type 1: The number with the two distinct digits are in the first two places (e.g., 212)\n    # For this type, the third digit (ones place) must be the same as the second digit\n    # So, there's only 1 possibility for the third digit.\n    # Type 2: The number with the two distinct digits, one is in the hundreds place\n    # and the other one could be in the tens or ones place (e.g., 211 or 121).\n    # For this type, there are 2 possibilities for the distribution of the digits\n\n    # For both types combined, the count is multiplied by 2\n    type_multiplication_factor = 2\n    \n    # Multiply the counts of each place\n    total_count = first_digit_count * second_digit_count * type_multiplication_factor\n\n    return total_count\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    average_first_four = 89\n    total_first_four = average_first_four * 4\n    fifth_assignment_score = 94\n    \n    total_five_assignments = total_first_four + fifth_assignment_score\n    average_five_assignments = total_five_assignments / 5\n    \n    return average_five_assignments\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, judy, books = symbols('lily judy books')\n\n    # After Lily sends books to Judy, they both have the same amount\n    equation = Eq(lily - books, judy + books)\n\n    # But initially, Lily had more books than Judy\n    # This means the books Lily had initially is the same as the books Judy will have after Lily sends her some\n    # We express this with another equation\n    equation2 = Eq(lily, judy + 2 * books)\n\n    # Solve the set of equations for the number of books transferred\n    solutions = solve((equation, equation2), (lily, judy, books))\n\n    # The solution we want is the difference Lily had more than Judy, which is 2 * books\n    return solutions[books]*2\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobble_arms = 5\n\n    wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = wibble_arms * wibbles\n    remaining_arms = total_arms - total_wibble_arms\n\n    wobbles = remaining_arms // wobble_arms\n\n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) // 9\n            if isprime(b) and 7 * a + 9 * b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == 1 + ones):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for each person's collection amount\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Alan collected 74, and Bilal collected 86\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n\n    # Chloe collects twice as much as David\n    equation3 = Eq(chloe, 2 * david)\n    # David raises three times as much as Emily\n    equation4 = Eq(david, 3 * emily)\n    # Sum of collections equals 400\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (alan, bilal, chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    amount = 420\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    # There are 60 seconds in a minute\n    # 32 minutes is the initial amount of time\n    total_seconds = 32 * 60  \n    \n    # Calculate a quarter of 1/6 of 1/8 of the total seconds\n    quarter_of_sixth_of_eighth = total_seconds * (1/8) * (1/6) * (1/4)\n    \n    return int(quarter_of_sixth_of_eighth)\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # time for Maverick to catch up with Kelvin according to Maverick\n    maverick_time = 24 / 60  # convert minutes to hours\n\n    # distance traveled by Maverick in that time\n    maverick_distance = 15 * maverick_time\n\n    # extra distance Maverick needs to cover to catch up with Kelvin\n    extra_distance = 10  # km\n\n    # time for Maverick to cover the extra distance at relative speed\n    # relative speed = speed of Maverick - speed of Kelvin\n    relative_speed = 15 - 10  # km/h\n\n    # time = distance / speed\n    required_time = extra_distance / relative_speed\n\n    # If Maverick's time is different from the required time, then Kelvin is correct\n    correct_time = maverick_time != required_time\n\n    # Kelvin's estimate (if he is correct)\n    kelvin_time = correct_time * required_time * 60  # convert hours back to minutes\n\n    return kelvin_time\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    def custom_op(a, b):\n        return a + b - (a * b) / 910\n\n    result = 1\n    for i in range(2, 2017):\n        result = custom_op(result, i)\n\n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    return (113 - 5) / 9\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    # The correct application of the principle of multiplication\n    ways = boys * girls\n\n    return ways\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            if x1 + x2 < 6:\n                x3 = 6 - x1 - x2\n                if x3 >= 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_marks = 5\n    wrong_marks = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_marks + wrong_answers * wrong_marks\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total distance covered by plum trees\n    total_distance_for_plum_trees = (41 - 1) * 4\n    \n    # Since pine trees are planted at regular intervals of 5m\n    # The number of pine trees will be one more than the number of intervals\n    number_of_pine_trees = (total_distance_for_plum_trees // 5) + 1\n    \n    return number_of_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger man, and y be the current age of the older man\n    x, y = symbols('x y')\n    \n    # When the older man was x years old, the younger was 4 years old\n    # At that point the difference in age was x - 4.\n    # So when the younger man will be y years old (the current age of the older man),\n    # the older man will be y + (x - 4) years old.\n    \n    # Translating the sentences into equations:\n    # 1. When I was your age (younger man's current age x), you (younger man) were 4 years old.\n    # Since the age difference stays the same: y - x = x - 4\n    \n    # 2. When I (older man) am your age (younger man's current age x), you (younger man) will be 61.\n    # So, in (y - x) years, younger man will be x + (y - x) = 61\n    \n    equation1 = Eq(y - x, x - 4)\n    equation2 = Eq(x + y - x, 61)\n    \n    # Solving the equations simultaneously.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The younger man's current age is x\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    # If ten people can build a bridge in 9 hours\n    # work_done = number_of_people * time_taken\n    work_done = 10 * 9  # This is the total work done to build the bridge\n    \n    # To build the bridge in 3 hours, divide the total work by 3 hours\n    # The number of people needed would be the total work divided by the time taken (3 hours)\n    people_needed = work_done / 3\n\n    return people_needed\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    cost_of_bag = 120\n    fraction_spent_on_bag = 2/5\n    remaining_after_book = cost_of_bag / fraction_spent_on_bag\n    original_amount = remaining_after_book / (1 - 1/3)\n    return original_amount\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.60)\n    initial_watermelons = remaining_after_first_day / (2/3)\n    return int(initial_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_summand = 5\n    # Sum squares formula: sum = (1/6)*n*(n+1)*(2*n+1)\n    sum_all_squares = (1/6) * n * (n + 1) * (2 * n + 1)\n    sum_excluded_squares = (1/6) * (first_summand - 1) * first_summand * (2 * (first_summand - 1) + 1)\n    ans = sum_all_squares - sum_excluded_squares\n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 13 and len(set([x1, x2, x3])) == 3:\n                        count += 1\n    # Each combination is counted 3! times because it could be in any order, so divide by 6.\n    return count // 6\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Assuming Jessica is at position x\n    # Jessica's position: x\n    # Judy's position: x + 1 (since they are adjacent)\n    # Desks in front of Jessica: 5\n    # Desks behind Judy: 7\n    # Desks between Jessica and Judy: x - 5 (in front of Jessica) - 1 (Jessica's own desk)\n    # Similarly, the desks between Judy and the end of the column are 7 - 1 (Judy's own desk)\n    # Total desks = Desks in front of Jessica + Jessica's desk + Judy's desk + Desks behind Judy\n    # Total desks = 5 + 1 + 1 + 7\n    total_desks = 5 + 1 + 1 + 7\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    for boys in range(152 + 1):\n        if (boys - boys / 11) == (152 - boys - 5):\n            return boys\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = 0.75 * x - 5 - 2.5\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start = 1000\n    difference = -11\n    term = start\n    while term >= 0:\n        term += difference\n    return term + difference  # to get the first negative term\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    return product % 100  # Get the last two digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    first_number = 0.11\n    second_number = 2 * midpoint - first_number\n\n    return second_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    num_classmates = 17\n\n    sweets_per_classmate = total_sweets // num_classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio = 7 / 12\n    toffees = chocolates * ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for number in range(28, 41):\n        if number % 4 == 0 and 9 in set(factors(number)):\n            return number\n\ndef factors(n):\n    return [i for i in range(1, n + 1) if n % i == 0]\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes = 24\n    lychees = 19\n    total_cost = 2826\n    cost_mango = 56\n\n    cost_lychee = (total_cost - (cost_mango * mangoes)) / lychees\n\n    return cost_lychee\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n    \n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A == 0: # No leading zero for a number\n            continue\n        num1 = A * 1000 + B * 100 + C * 10 + A\n        num2 = A * 10 + B\n        product = num1 * num2\n        if str(product) == str(num1 * num2).zfill(6) and str(num1 * num2).count(\"0\") == 3: # Exactly three zeros in the result\n            return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    teams = 6\n    games = comb(teams, 2)\n    return games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5 * (3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    three_digit_numbers = set([''.join(permutation) for permutation in permutations(cards, 3) if permutation[0] != '0'])\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the number of £10 shirts, y is the number of £15 shirts\n    equation1 = Eq(10 * x + 15 * y, 555)\n    equation2 = Eq(x + y, 50)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    jog_time = 1  # Susan jogs for 1 hour\n    walk_time = 2  # Susan walks for 2 hours\n\n    jog_speed = 5  # jogging speed in miles per hour\n    walk_speed = 3  # walking speed in miles per hour\n\n    total_distance = (jog_time * jog_speed) + (walk_time * walk_speed)\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    for i in range(100):\n        if (i + (i + 1) + (i + 2) + (i + 3) + (i + 4)) == 100:\n            return i\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # From the multiplication tiling puzzle:\n    #   PQR\n    # x   S\n    # -----\n    #  PQR\n    # PQRS\n    # -----\n    # PQRS\n\n    # Since the multiplication of PQR by S results in a number that starts with P and ends with R,\n    # it implies that S * R ends with R. Hence, S must be 1.\n    # Assigning S = 1 implies that the other numbers remain as P, Q, and R.\n\n    # Therefore, P + Q + R + S = P + Q + R + 1\n    # Since we only need P + Q + R, we just remove the '+ 1' from the calculation.\n    # P, Q, and R are not changed by the multiplication by 1, so we can conclude that P + Q + R is the sum of\n    # P, Q, and R in PQR, which can be any 3-digit number.\n\n    # However, since there is no 'S' digit in the final answer, and S is 1,\n    # it indicates that PQR must be a 3-digit number such that when multiplied by 1,\n    # it remains the same three digits. Those digits can be any from 1 to 9.\n    # Technically, we could choose any digits for P, Q, and R, but for simplicity, we can set P = 1, Q = 0, R = 1.\n    # which makes P + Q + R = 1 + 0 + 1 = 2\n\n    return 2\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors and exponents\n    factors = factorint(44000)\n    \n    # The cube of a number has exponents that are multiples of 3\n    # We have to find q such that 44000/q is a cube. \n    # Thus, each prime factor of q should be adjusted so that\n    # the remaining exponent in 44000 is a multiple of 3.\n    q = 1\n    for prime, exponent in factors.items():\n        # If the exponent is not a multiple of 3, we multiply q by the\n        # prime factor enough times to make the exponent in 44000/q\n        # a multiple of 3.\n        if exponent % 3 != 0:\n            q *= prime ** (3 - (exponent % 3))\n            \n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_large_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    \n    oranges_left = total_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    \n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    balls_left_over = 2\n\n    bags_used = (total_balls - balls_left_over) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # In the worst case, you will draw 2 cards of each number (2 * 13 numbers = 26 cards),\n    # without getting 3 of the same number. The next card you draw must create a set of\n    # three cards with the same number\n    # Therefore, you need the previous 26 cards + 1 more card to guarantee 3 with the same number\n    return 26 + 1\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Defining possible cards for each suit\n    spades = {'A', 'J', 'K'}\n    hearts = {'3', '5', 'K'}\n    diamonds = {'2', '7', 'J'}\n    clubs = {'A', '7'}\n\n    # Step 1: Eddie says he does not know the card. So it cannot be a suit with a unique number.\n    # This means the card cannot be Hearts 3 or Hearts 5 as those are the only hearts with that number.\n    # It also cannot be Diamonds 2 since it's the only diamond with that number.\n    # Clubs A and Spades A can also be eliminated since Eddie would know it would be one of those two if it were an Ace.\n    # Remaining possibilities: \n    # Spades: {'J', 'K'}, \n    # Hearts: {'K'}, \n    # Diamonds: {'7', 'J'}, \n    # Clubs: {'7'}\n\n    # Step 2: Avril says that now she knows the card for sure after Eddie said: \"Neither do you.\"\n    # For Avril to know for sure, the number of the card cannot appear in more than one suit.\n    # This means that the number 7 is not possible because it could be either Diamonds or Clubs.\n    # Remaining options: \n    # Spades: {'J', 'K'}, \n    # Hearts: {'K'}, \n    # Diamonds: {'J'}.\n\n    # Step 3: Eddie then knows the card after Avril says she knows it.\n    # For Eddie to know, it cannot be a King, since there are two possibilities (Spades and Hearts).\n    # So the only number that fits the criteria is Jack, and since only Spades and Diamonds have Jacks,\n    # and Diamonds is the only suit that can have the card now, it must be the diamonds Jack.\n    \n    # Answer: The card is the Jack of Diamonds.\n    return 'Diamonds J'\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_trees = 21\n    total_distance = 800\n    # Since there are trees on both ends, we have one less interval than the number of trees.\n    intervals_between_trees = total_trees - 1\n    distance_between_trees = total_distance / intervals_between_trees\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    joey_method = 38 // 2\n    joey_answer = andy_notebooks - joey_method\n    correct_answer = (andy_notebooks - andy_gives) // 2\n\n    if joey_answer == correct_answer:\n        return True, joey_answer\n    else:\n        return False, correct_answer\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    total_distance = 90\n    num_trees = 9\n    num_gaps = num_trees + 1  # There is always one more gap than the number of trees\n\n    distance_between_each_tree = total_distance / num_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    primes_count = 0\n    original_number = 200\n    \n    # Check the hundreds digit (change it from 0 to 9 except 2 which is the original)\n    for i in range(0, 10):\n        if i != 2:\n            number = int(f\"{i}00\")\n            if isprime(number):\n                primes_count += 1\n    \n    # Check the tens digit (change it from 0 to 9)\n    for i in range(0, 10):\n        number = int(f\"2{i}0\")\n        if isprime(number):\n            primes_count += 1\n                \n    # Check the units digit (change it from 1 to 9; it cannot be 0 as even numbers cannot be prime)\n    for i in range(1, 10):\n        number = int(f\"20{i}\")\n        if isprime(number):\n            primes_count += 1\n\n    return primes_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 72)\n    eq2 = Eq(x, 2 * y)\n\n    solution = solve((eq1, eq2), (x, y))\n    smaller_number = solution[y]\n\n    return smaller_number\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    # Given numbers\n    given_numbers = [3, 4, 6, 10]\n    # Given mean value\n    mean_value = 5\n    # Total count of numbers\n    total_count = 5\n    # Total sum of numbers\n    total_sum = mean_value * total_count\n    # Calculate the sum of given numbers\n    sum_given_numbers = sum(given_numbers)\n    # Calculate the fifth number\n    fifth_number = total_sum - sum_given_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_emily = 25\n    danny_position_from_back = 14\n    emily_position_from_back = danny_position_from_back + 1\n\n    total_people = people_in_front_of_emily + emily_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Each cut creates one additional section, thus\n    # cutting a piece of wood into 4 sections requires 3 cuts.\n\n    # Calculate the number of cuts needed to cut the wood 5 times.\n    # Since cutting it into 4 sections is done 5 times, we multiply the number of cuts by 5.\n    cuts_needed = 3 * 5\n\n    # Emma needs 12 minutes to make 3 cuts.\n    # Therefore, we calculate the time needed for the given number of cuts.\n    minutes_per_cut = 12 / 3\n    total_minutes_needed = minutes_per_cut * cuts_needed\n\n    return total_minutes_needed\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    pages_per_day_slow, days_late, pages_per_day_fast, days_early, total_pages, deadline = symbols(\n        'pages_per_day_slow days_late pages_per_day_fast days_early total_pages deadline')\n    \n    # Given data from the question\n    pages_per_day_slow = 30  # Slow reading speed\n    pages_per_day_fast = 39  # Fast reading speed\n    days_late = 2            # Days late if reading at the slow speed\n    days_early = 4           # Days early if reading at the fast speed\n\n    # Formulate the equations based on the given data\n    equation1 = Eq(pages_per_day_slow * (deadline + days_late), total_pages)\n    equation2 = Eq(pages_per_day_fast * (deadline - days_early), total_pages)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (total_pages, deadline))\n    \n    return solutions[deadline], solutions[total_pages]  # Days to finish the book, Total pages in the book\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    pages_with_5 = 30\n    count = 0\n    page = 1\n    while count < pages_with_5:\n        if '5' in str(page):\n            count += str(page).count('5')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    return 13.23 / 9\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Define the equation according to the given problem\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    \n    # Solve the equation for x\n    solution_x = solve(equation, x)\n    \n    # Return the solution\n    return solution_x[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n    \n    days = (total_rooms / workers) / rooms_per_worker_per_day\n    \n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Kate buys 1 apple and 2 oranges for 48p\n    equation1 = Eq(apple + 2 * orange, 48)\n\n    # Jade buys 1 apple and 1 orange for 31p\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money = symbols('pocket_money')\n    tennis_ball_price = symbols('tennis_ball_price')\n\n    # First week: 4 tennis balls + 27p\n    equation1 = Eq(4 * tennis_ball_price + 27, pocket_money)\n    \n    # Convert £1.51 to pence\n    money_left_second_week = 151  # Since 1 pound = 100 pence\n\n    # Second week: 2 tennis balls + £1.51\n    equation2 = Eq(2 * tennis_ball_price + money_left_second_week, pocket_money)\n\n    # Now we solve the two equations to find the value of pocket_money\n    solutions = solve((equation1, equation2), (pocket_money, tennis_ball_price))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    # Total seconds in 3/4 of an hour\n    total_seconds = (3 / 4) * 60 * 60\n    \n    # Pages Yola can read in 3/4 of an hour\n    pages = 30\n    \n    # Seconds per page\n    seconds_per_page = total_seconds / pages\n    \n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    remaining_badges = total_badges - given_badges\n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        s = str(i)\n        if s.count('0') == 1 and '00' not in s:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money each person has\n    jason, will, tom = symbols('jason will tom')\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    # Return the amount of money Tom has\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e represent Elias' original number of stickers\n    # Let a represent Aileen's original number of stickers\n    e, a = symbols('e a')\n\n    # Elias had 5 times as many stickers as Aileen\n    equation1 = Eq(e, 5 * a)\n\n    # After Elias gave away 88 stickers and Aileen lost 8 stickers, they had the same number of stickers\n    equation2 = Eq(e - 88, a - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, a))\n\n    # Calculate the number of stickers each had in the end\n    elias_end = solutions[e] - 88\n    aileen_end = solutions[a] - 8\n\n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    num_staircases = 3\n    total_steps = steps_per_staircase * num_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let's call the number of times they eat their respective portions of cheese as 'n'\n    # So, Thomas eats 5n pieces of cheese, and Gerald eats 3n pieces of cheese\n    \n    # According to the problem, they eat 104 pieces in total\n    # 5n + 3n = 104 => 8n = 104 => n = 104 / 8 => n = 13\n\n    n = 104 / 8\n    \n    # Now, we can calculate how much cheese Thomas and Gerald ate\n    thomas_cheese = 5 * n\n    gerald_cheese = 3 * n\n    \n    # Finally, we find out how much more cheese Thomas ate than Gerald\n    more_cheese_thomas = thomas_cheese - gerald_cheese\n\n    return int(more_cheese_thomas)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    return sum(numbers)\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    sum_decimal = int('25', 8) + int('37', 8)\n    ans = oct(sum_decimal)[2:]\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    return (8 / 11) * 1.54\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of girls be g\n    # Then the number of boys is 2/7 of the number of girls, so it's (2/7) * g\n    # Total number of children (c) is g + (2/7) * g = (9/7) * g\n    # The number of adults (a) is 2/3 of the number of children, so it's (2/3) * c = (2/3) * (9/7) * g\n    # It is given that there are 1228 more adults than boys, hence a = (2/7) * g + 1228\n    # Let's substitute a and solve for g\n\n    from sympy import symbols, Eq, solve\n\n    g = symbols('g')\n    equation = Eq((2/3) * (9/7) * g, (2/7) * g + 1228)\n    g_value = solve(equation, g)[0]\n    b_value = (2/7) * g_value\n    c_value = (9/7) * g_value\n    a_value = (2/3) * c_value\n\n    total_people = g_value + b_value + a_value\n    return int(total_people)\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let the number of tennis rackets initially purchased be x\n    # Cost price of x tennis rackets = 150x\n    # Selling price of x tennis rackets = 175(x - 8), since 8 are left\n    # Total profit = 525\n\n    profit_per_racket = 175 - 150  # Profit made on each racket sold\n    total_profit = 525 + 8 * 175  # Total profit including the price of rackets left\n\n    # Calculate the number of rackets using profit\n    num_rackets_purchased = total_profit // profit_per_racket\n\n    return num_rackets_purchased\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let the initial amount of money that Chloe and Gordon had be x.\n    # According to the problem:\n    # Chloe's remaining amount is x - 20*d, where d is the number of days.\n    # Gordon's remaining amount is x - 25*d.\n    # We also know that when Chloe has $157 left, Gordon has $82 left.\n    # So we have the equations:\n    # x - 20*d = 157\n    # x - 25*d = 82\n    # Subtracting the second equation from the first gives us:\n    # 20*d - 25*d = 157 - 82\n    # -5*d = 157 - 82\n    # d = (157 - 82) / -5\n    # d = 75 / 5\n    d = (157 - 82) // 5\n    # Now we can find the initial amount x for Gordon by substituting the value of d back into:\n    # x = Gordon's remaining amount + 25*d\n    # x = 82 + 25*d\n    x = 82 + 25 * d\n\n    return x\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n + n*(n-1)//2 + (n*(n-1)*(n-2)*(n-3))//24\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's say P_original and Q_original are the total original values of jewels in P and Q respectively\n    P_original, Q_original = symbols('P_original Q_original')\n\n    # Since transferring a £5000 jewel from P to Q increases the average value of each jewel in both boxes by £1000\n    # The average value of the jewels in P was (P_original / 3) and becomes ((P_original - 5000) / 2) after the transfer\n    # The average value of the jewels in Q was (Q_original / 3) and becomes ((Q_original + 5000) / 4) after the transfer\n\n    # Set up the equations based on the fact that the average increases by £1000 in each box\n    equation1 = Eq((P_original - 5000) / 2, (P_original / 3) + 1000)\n    equation2 = Eq((Q_original + 5000) / 4, (Q_original / 3) + 1000)\n\n    solutions = solve((equation1, equation2), (P_original, Q_original))\n\n    # The total value of all 6 jewels is the sum of P_original and Q_original\n    total_value = solutions[P_original] + solutions[Q_original]\n\n    return total_value\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    \n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    melon_cost = 15\n    bad_melons = total_melons / 5\n\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n\n    total_revenue = remaining_melons * selling_price_per_melon\n    profit = total_revenue - melon_cost\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    oranges_total = 150\n    apples_total = 100\n    oranges_leftover = 17\n    apples_leftover = 5\n\n    # Calculate the number of oranges and apples that were actually divided\n    oranges_divided = oranges_total - oranges_leftover\n    apples_divided = apples_total - apples_leftover\n\n    # The number of neighbours will be the greatest common divisor of the two numbers\n    neighbours = gcd(oranges_divided, apples_divided)\n\n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10 # cm\n    cross_interval = 1 # cm\n    # Add 1 since there is a cross at both the beginning and the end\n    total_crosses = (line_length // cross_interval) + 1\n    return total_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    ans = 6.23 - 5.72\n    return ans\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    balloons = ['red', 'red', 'green', 'yellow', 'yellow', 'green']\n    pattern_length = len(balloons)\n    \n    # Find the number of complete patterns that can be made within 75 balloons\n    complete_patterns = 75 // pattern_length\n    \n    # Find the number of remaining balloons that don't form a complete pattern\n    remaining_balloons = 75 % pattern_length\n    \n    # Count the number of green balloons in a complete pattern\n    green_in_pattern = balloons.count('green')\n    \n    # Initial count of green balloons based on complete patterns\n    green_count = complete_patterns * green_in_pattern\n    \n    # Count any additional green balloons in the remaining portion\n    for i in range(remaining_balloons):\n        if balloons[i] == 'green':\n            green_count += 1\n    \n    return green_count\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    # Let x be the initial number of marbles Sandra had more than Jessica.\n    # Then, in the beginning, Sandra had x more marbles than Jessica.\n    # After giving 13 marbles to Jessica, Sandra would have x - 13 marbles\n    # and Jessica would have x + 13 marbles.\n    # The problem states Sandra now has 6 fewer marbles than Jessica:\n    # (x - 13) + 6 = x + 13\n    # Solving this equation for x gives us the initial difference in marbles.\n\n    # x - 13 + 6 = x + 13\n    # Bring the x terms to one side and the constant terms to the other side\n    x = (13 - 6 + 13)\n\n    return x\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    # total distance between 1st and 6th lamp post is 60m\n    total_distance_1_to_6 = 60\n    # number of intervals between 1st and 6th lamp post is 6 - 1\n    intervals_1_to_6 = 6 - 1\n    # distance between two adjacent lamp posts\n    distance_between_lamps = total_distance_1_to_6 / intervals_1_to_6\n    \n    # number of intervals between 1st and 9th lamp post is 9 - 1\n    intervals_1_to_9 = 9 - 1\n    # total distance between 1st and 9th lamp post\n    total_distance_1_to_9 = distance_between_lamps * intervals_1_to_9\n    \n    return total_distance_1_to_9\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    total_ones = 15\n    total_twos = 14\n\n    n = 0\n    current_ones_count = 0\n    current_twos_count = 0\n    \n    while current_ones_count < total_ones or current_twos_count < total_twos:\n        n += 1\n        current_ones_count += str(n).count('1')\n        current_twos_count += str(n).count('2')\n\n    return n\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # If each of the seven friends received 26 pieces of candy\n    friends_candy = 7 * 26\n    \n    # Kate was left with 22 pieces after sharing\n    kate_candy_left = 22\n    \n    # Total candy at school, before Kate ate hers\n    total_candy_school = friends_candy + kate_candy_left\n    \n    # Total initial candy (considering she ate 1/3 at home, so 2/3 was brought to school)\n    total_initial_candy = (total_candy_school * 3) // 2\n    \n    return total_initial_candy\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor = 9\n    bob_floor = 5\n    top_floor = 25\n\n    ratio = bob_floor / andy_floor\n    bob_at_top = ratio * top_floor\n    \n    return int(bob_at_top)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if int(f'12{m}') == 9 * int(f'1{m}') - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    words, speed = symbols('words speed')\n    original_time = 3\n    increased_speed = speed + 30\n    time_with_increased_speed = original_time - 1\n\n    # Original speed equation\n    original_equation = Eq(words, speed * original_time)\n    # Increased speed equation\n    increased_speed_equation = Eq(words, increased_speed * time_with_increased_speed)\n\n    solution = solve((original_equation, increased_speed_equation), (words, speed))\n\n    return solution[words]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # Initialize all lights to be off (0 represents off, 1 represents on)\n\n    # Ms. Lily presses switches labeled with odd numbers (1, 3, 5, 7, 9)\n    for i in range(1, 11, 2):\n        lights[i-1] = 1  # Toggle lights with odd labels\n    \n    # Sam presses each switch with an even number 7 times\n    for i in range(2, 11, 2):\n        lights[i-1] = (lights[i-1] + 7) % 2  # Toggle each even-labeled light 7 times\n    \n    # Count the number of lights that are on\n    ans = sum(lights)\n    \n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the original amounts of water in pails A and B as a and b respectively.\n    a, b = symbols('a b')\n    \n    # According to the problem, we have two equations:\n    # Equation 1: a = 2/3 * b\n    equation1 = Eq(a, 2/3 * b)\n    \n    # Equation 2: After transferring the water:\n    # (a + 4) = 7/8 * (b - 4)\n    equation2 = Eq(a + 4, 7/8 * (b - 4))\n    \n    # We solve these equations simultaneously to find the values of a and b.\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # The total amount of water is the sum of water in Pail A and Pail B\n    total_water = solutions[a] + solutions[b]\n    \n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    day_climb = 3\n    night_slip = 2\n    total_climbed = 0\n    days = 0\n\n    while total_climbed < depth:\n        days += 1\n        total_climbed += day_climb\n        if total_climbed >= depth:\n            break\n        total_climbed -= night_slip\n    \n    return days\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    # Let x be the cost of a chair, then 2x is the cost of a table\n    # According to the problem, we have: 2 * (2x) + 3 * x = 280\n    # Simplifying, we get: 4x + 3x = 280 => 7x = 280 => x = 280 / 7\n    x = 280 / 7\n    # The cost of a table is 2x\n    table_cost = 2 * x\n    return table_cost\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    total_volume = 900  # 900 ml of rose syrup\n    initial_sugar = 6 / 100 * total_volume  # initial sugar content in ml\n\n    # Let x be the amount of sugar added in ml\n    # The new total volume is total_volume + x\n    # The new sugar content is initial_sugar + x\n    # The new concentration is (initial_sugar + x) / (total_volume + x)\n    # We set the new concentration equal to 10% and solve for x.\n    \n    # (initial_sugar + x) / (total_volume + x) = 10 / 100\n    # 10 / 100 * (total_volume + x) - initial_sugar = x\n    # (10 * total_volume) / 100 + (10 * x) / 100 - initial_sugar = x\n    # (10 * total_volume) / 100 - initial_sugar = x - (10 * x) / 100\n    # (10 * total_volume) / 100 - initial_sugar = (90 * x) / 100\n    # x = ((10 * total_volume) / 100 - initial_sugar) * (100 / 90)\n    x = ((10 * total_volume) / 100 - initial_sugar) * (100 / 90)\n    \n    return x\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_passed = 2\n    total_parts_needed = 100\n\n    parts_per_hour = parts_made / hours_passed\n    remaining_parts = total_parts_needed - parts_made\n    hours_needed = remaining_parts / parts_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    total_bars = 4\n    total_cost = cost_per_bar * total_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # To ensure we get 3 different colored balls in the worst case scenario,\n    # we must consider the situation where we could pick all balls of the same color first.\n    # After picking all 5 balls of one color, we still cannot guarantee 3 different colors.\n    # Then we pick another color, all 5 balls again, we now have 2 different colors.\n    # With the next pick, we are guaranteed to have the third color.\n    # So, 5 (first color) + 5 (second color) + 1 (guaranteed third color) = 11.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 4 + 2 * grade4)\n    equation2 = Eq(grade6, 8 + 3 * grade4)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Calculate the total number of ways to choose 2 balls of the same color\n    same_color_pairs = 5 * comb(2, 2)  # C(2,2) ways for each of the 5 colors.\n\n    # Calculate the total number of ways to choose 2 balls of different colors\n    different_color_pairs = comb(5, 2) * comb(2, 1) * comb(2, 1)  # C(5,2) color pairs, each color with C(2,1) possibilities.\n\n    # The total number of distinct pairs without considering order\n    total_pairs = same_color_pairs + different_color_pairs\n\n    # Applying the pigeonhole principle, we need one more person than the number of distinct pairs\n    # because if the number of people equals the number of distinct pairs, there's a chance everyone could have\n    # a unique pair. To guarantee a repeat pair, we need one extra person.\n    ans = total_pairs + 1\n\n    return ans\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # In order to ensure that there are two numbers whose product is divisible by 4,\n    # we consider the worst-case scenario involving numbers that are not divisible by 4.\n    \n    # Integers divisible by 4 will fulfill the condition upon drawing the second one.\n    # Integers not divisible by 2 (odds) will not fulfill the condition unless paired\n    # with a multiple of 4, but they will not create the worst case.\n    # Therefore, the concern is with numbers divisible by 2 but not 4 (2 mod 4).\n\n    # Count numbers divisible by 2 but not 4 in the range 10 to 41\n    count_2_mod_4 = len([i for i in range(10, 42) if i % 4 == 2])\n\n    # We can draw all these numbers, they will not fulfill the condition.\n    # To ensure that we meet the condition, we need to draw one more number.\n    # This last drawn number can be anything other than these particular numbers.\n    \n    ans = count_2_mod_4 + 1  # Add one to the count for the next draw.\n    \n    return ans\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham_cards, melissa_cards = symbols('hisham melissa')\n\n    total_cards = 876\n    initial_ratio = Eq(melissa_cards, 2 * hisham_cards)\n    after_sharing = Eq(hisham_cards + (melissa_cards - hisham_cards) / 2, melissa_cards - (melissa_cards - hisham_cards) / 2)\n\n    solutions = solve((initial_ratio, hisham_cards + melissa_cards - total_cards), (hisham_cards, melissa_cards))\n\n    hisham_initial = solutions[hisham_cards]\n    melissa_initial = solutions[melissa_cards]\n\n    cards_to_give = melissa_initial - (total_cards / 2)\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    # The common difference d can be found by subtracting the first term from the third term\n    # and then dividing by the number of steps between them, which is 2 in this case.\n    \n    common_difference = (third_term - first_term) / 2\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    piece_length = total_length_cm / 2\n    return piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum((50+x)*(50-x) for x in range(0, 5))\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(1, 10):\n        square = i**2\n        if square >= 10 and square < 100:\n            largest_two_digit_square = square\n        else:\n            break  # We've reached a square number outside two-digits\n    \n    # Calculate the product of the smallest two-digit prime and the largest two-digit square\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n    \n    # The difference in their ages will remain constant\n    age_difference = father_age - brian_age\n    \n    # Look for the next age where Brian's age is the reverse of his father's\n    while True:\n        # Increment their ages by 1\n        brian_age += 1\n        father_age += 1\n        \n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_dollars = cost_in_euros * euro_to_dollar_rate\n    return cost_in_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef calculate_expression(a, b, c, d, e, f, g, h, j):\n    return a + b / c + (d / e) * f - (g + h / j)\n\ndef solution():\n    max_value = -float('inf')\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        result = calculate_expression(a, b, c, d, e, f, g, h, j)\n        if result.is_integer() and result > max_value:\n            max_value = result\n    return int(max_value)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 56)\n    return ans\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    total_seniors = 8\n    average_juniors = 10\n    average_all = 14\n\n    total_score_all = average_all * (total_juniors + total_seniors)\n    total_score_juniors = average_juniors * total_juniors\n\n    total_score_seniors = total_score_all - total_score_juniors\n    average_seniors = total_score_seniors / total_seniors\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_value = 9700\n    smallest_possible_value = rounded_value - 50\n    return smallest_possible_value\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Total books before adding new ones\n    total_books_before = 3900\n    \n    # Total books after adding new ones\n    total_books_after = total_books_before + 510\n    \n    # Original ratio of the books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    # Original number of books of each language\n    original_chinese = (ratio_chinese / total_ratio) * total_books_before\n    original_malay = (ratio_malay / total_ratio) * total_books_before\n    original_english = (ratio_english / total_ratio) * total_books_before\n    \n    # Increased number of books of each language\n    increased_chinese = original_chinese * 1.20  # increased by 20%\n    increased_malay = original_malay * 1.10      # increased by 10%\n    \n    # Remaining books are all English\n    increased_english = total_books_after - (increased_chinese + increased_malay)\n    \n    # Percentage increase in number of English books\n    percentage_increase_english = ((increased_english - original_english) / original_english) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_age_4_years_ago = 10\n    # Since 4 years have passed, we need to add 4 years for each dog\n    combined_age_now = combined_age_4_years_ago + 2 * 4\n    # Now add 2 more years for the future combined age\n    combined_age_in_2_years = combined_age_now + 2 * 2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    score_per_correct = 4\n    score_per_incorrect = -2\n\n    for correct in range(total_questions):\n        incorrect = total_questions - 1 - correct  # Rex didn't answer one question\n        score = correct * score_per_correct + incorrect * score_per_incorrect\n        if score == 66:\n            return correct\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_questions = 90\n    correct = symbols('correct')\n\n    # Mochi answered 60% of the questions\n    answered = total_questions * 0.6\n    wrong = answered - correct\n    score_correct = correct * 5\n    score_wrong = wrong * -2\n    score_unanswered = (total_questions - answered) * 1\n\n    # Eq representing the total score\n    equation = Eq(score_correct + score_wrong + score_unanswered, 264)\n\n    solutions = solve(equation)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # By the Pigeonhole Principle, if we have n containers and we want at least 2 apples in one container,\n    # we can distribute (n - 1) + 2 apples so that at least one container will have 2 apples.\n    containers = 10\n    # The least number of apples following the conditions is (containers - 1) + 2\n    min_apples = (containers - 1) + 2\n    \n    return min_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10**(2018 + 4))\n    denominator = 92 / (10**(2019 + 2))\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    cookies_wanted = 300\n\n    butter_needed = (butter_used * cookies_wanted) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n    original_dedra = dedra * 4\n\n    # Dedra and Timm both received $72 each\n    dedra += 72\n    timm += 72\n\n    # Now Dedra has twice as much money as Timm\n    equation = Eq(dedra, 2 * timm)\n\n    # Solve the equation\n    solution = solve((equation, Eq(original_dedra, dedra - 72)), (dedra, timm))\n\n    return solution[original_dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    length_so_far = 0\n    num = 1\n\n    while True:\n        length_of_number = len(str(num))\n        if length_so_far + length_of_number >= 1000:\n            break\n        length_so_far += length_of_number\n        num += 1\n\n    remaining_length = 1000 - length_so_far\n    final_number_str = str(num)\n    ans = int(final_number_str[remaining_length - 1])\n\n    return ans\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Number of fruits containing only Vitamin A, C, or E\n    only_a = 62 - 48 - 36 + 25  # Subtract fruits containing AC and AE, then add back fruit containing ACE\n    only_c = 90 - 48 - 50 + 25  # Subtract fruits containing AC and CE, then add back fruit containing ACE\n    only_e = 68 - 36 - 50 + 25  # Subtract fruits containing AE and CE, then add back fruit containing ACE\n\n    # Number of fruits containing exactly two Vitamins\n    only_ac = 48 - 25  # Subtract fruits containing all three vitamins (ACE)\n    only_ae = 36 - 25  # Subtract fruits containing all three vitamins (ACE)\n    only_ce = 50 - 25  # Subtract fruits containing all three vitamins (ACE)\n\n    # Number of fruits containing all three vitamins\n    all_ace = 25\n\n    # Total types of fruits studied\n    total = only_a + only_c + only_e + only_ac + only_ae + only_ce + all_ace\n\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    people_behind = 14\n    total_people = 23\n    people_in_front = total_people - people_behind - 1  # Subtract 1 to exclude Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    # Total number of pupils\n    total_pupils = 18\n    # Number of pupils to be seated\n    pupils_to_seat = 3\n\n    # Calculate the number of ways to seat 3 pupils in a row from 18 pupils\n    # Using permutations since the order of seating matters\n    num_ways = factorial(total_pupils) / factorial(total_pupils - pupils_to_seat)\n\n    return int(num_ways)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = 4\n    jason = symbols('jason')\n\n    # Jason is older than Jack\n    equation1 = Eq(jason > jack_age, True)\n    \n    bruce = jason  # Bruce's age is the same as Jason's\n    willie = jason  # Willie's age is the same as Jason's\n    \n    # The total age of the 4 children is 19 years\n    equation2 = Eq(jack_age + jason + bruce + willie, 19)\n    \n    solutions = solve((equation1, equation2), (jason))\n    \n    # Since there could be multiple solutions, we filter out the one that makes sense (Jason age greater than Jack's age)\n    valid_solutions = [s for s in solutions if s > jack_age]\n    \n    return valid_solutions[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let x be the number of friends\n    # Let y be the total number of erasers Andy had\n    \n    # If each friend received 5 erasers, 3 erasers would be left:\n    # 5x + 3 = y\n    \n    # If each friend received 6 erasers, Andy would be short of 2 erasers:\n    # 6x - 2 = y\n    \n    # Therefore, we have two equations:\n    # 5x + 3 = 6x - 2\n    # Solve for x:\n    x = 3 + 2  # Rearrange the equation to find x\n    \n    # Use x to find y:\n    y = 5 * x + 3\n    \n    return y\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's age and Jake's age\n    john_age, jake_age = symbols('john_age jake_age')\n\n    # Equation 1: The sum of their ages is 44\n    equation1 = Eq(john_age + jake_age, 44)\n    \n    # Equation 2: In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake_age + 14, 2 * (john_age + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, jake_age))\n\n    # John's age in 14 years\n    john_age_in_14_years = solutions[john_age] + 14\n\n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    number_of_years = 3\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** number_of_years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the children\n    youngest = symbols('youngest')\n\n    # Equation representing the age of the oldest child\n    oldest = 6 * youngest\n\n    # Differences between the ages of consecutive children (15 months each)\n    age_differences = sum([15 * i for i in range(8)]) / 12  # Convert months to years\n\n    # Equation representing the difference between the oldest and the youngest\n    age_difference_eq = Eq(oldest - youngest, age_differences)\n\n    # Solve the equation for the youngest child's age\n    solved_ages = solve(age_difference_eq, youngest)\n\n    # Return the age of the youngest child\n    return solved_ages[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # The only operation that can change the order of operations is multiplication\n    # Thus, the smallest result will occur when the multiplication is minimized\n    # This can be done by ensuring the multiplication is done with the smallest numbers possible\n    # 15 + (5 * (5 + 15)) - 6 + 7 = 15 + (5 * 20) - 6 + 7 = 15 + 100 - 6 + 7\n    \n    # Calculating the value with the inserted brackets\n    ans = 15 + (5 * (5 + 15)) - 6 + 7\n    \n    return ans\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    sum_series = 0\n    for i in range(1, 2008):\n        sum_series += (i**2 + (i+1)**2) / (i * (i+1))\n    ans = round(sum_series)\n    return ans\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for original_number in range(1000, 10000):\n        new_number = int(str(original_number % 10) + str(original_number // 10))\n        if new_number - original_number == 5877:\n            return original_number\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has.\n    # Then Cayden has x + 5 sweets.\n\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Jiaxiang will have x + 10 sweets,\n    # and Cayden will have (x + 5) - 10 = x - 5 sweets.\n\n    # The difference between the number of sweets they have now is \n    # |(x + 10) - (x - 5)| = |x + 10 - x + 5| = |15|,\n    # which is simply 15 regardless of the value of x.\n    \n    return 15\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1\n    last_multiple = 150 // 11\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Average score of 5 pupils\n    average_score_5 = 72\n    # Total score of 5 pupils\n    total_score_5 = average_score_5 * 5\n    \n    # New average score including Mary's score\n    new_average_score_6 = 75\n    # Total score of all 6 pupils\n    total_score_6 = new_average_score_6 * 6\n    \n    # Mary's score is the difference between the total scores\n    marys_score = total_score_6 - total_score_5\n    \n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60  # m/s\n\n    # Time taken for the train to completely cross the bridge\n    time = (train_length + bridge_length) / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * 3/4\n    return afternoon_cookies\n    \nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for num in range(999, 0, -2):  # start from the greatest odd number\n        # num is divisible by 9 && tens place divisible by 4\n        if num % 9 == 0 and int(str(num)[1]) % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from itertools import combinations\n\ndef solution():\n    doughnuts = 11  # Total number of doughnuts\n    students = 4    # Total number of students\n    doughnuts -= students  # Each student gets at least one doughnut\n\n    # This is a combinations with repetition problem: (n+k-1) choose (k-1)\n    positions = list(range(doughnuts + students - 1))\n    count = len(list(combinations(positions, students - 1)))\n\n    return count\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    minutes_taken = distance_to_market // walking_speed\n    \n    if distance_to_market % walking_speed != 0:\n        minutes_taken += 1\n    \n    return minutes_taken\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Worst case: Drawing all marbles except one of each color still does not guarantee 4 different colors\n    worst_case_without_4_colors = (4 - 1) + (7 - 1) + (6 - 1) + (2 - 1)\n    # Drawing one more marble will ensure the fourth color\n    least_to_draw_for_4_colors = worst_case_without_4_colors + 1\n    \n    return least_to_draw_for_4_colors\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    coins = [5, 10, 20, 50, 100]  # multiples of 5 pence represented in pence\n    total_change = sum(coins)  # total change in pence\n    amount_spent = 500 - total_change  # amount spent in pence (500 pence in a five pound note)\n\n    return amount_spent  # return the amount in pence\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_honey = 50\n    desired_honey = 90\n    current_hives = 5\n\n    additional_honey_needed = desired_honey - current_honey\n    honey_per_hive = current_honey / current_hives\n\n    additional_hives_needed = additional_honey_needed / honey_per_hive\n\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    n = 23\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    # We'll use the sympy library to solve this system of equations problem.\n    from sympy import symbols, Eq, solve\n\n    # Let's define our symbols. x for $10 notes and y for $2 notes.\n    x, y = symbols('x y')\n\n    # We know the total number of notes is 38.\n    equation1 = Eq(x + y, 38)\n\n    # After spending, David is left with thrice as many $10 notes as $2 notes.\n    equation2 = Eq((1 - 0.8) * x, 3 * (1 - 0.75) * y)\n\n    # Now we solve the equations to get the values of x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Unpacking the number of $10 notes (x) and $2 notes (y).\n    ten_notes, two_notes = solutions[x], solutions[y]\n\n    # Total amount spent on the fan is 80% of the $10 notes and 75% of the $2 notes.\n    cost_of_fan = 0.8 * 10 * ten_notes + 0.75 * 2 * two_notes\n\n    return cost_of_fan\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "import math\n\ndef solution():\n    horizontal_distance = 15 - 9  # East 15km minus West 9km\n    vertical_distance = 3 + 5  # North 3km plus North 5km\n    shortest_distance = math.sqrt(horizontal_distance ** 2 + vertical_distance ** 2)  # Pythagorean theorem\n    return shortest_distance\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Ali's and Kumar's erasers\n    ali, kumar = symbols('ali kumar')\n    \n    # Given ratios\n    orig_ratio = Eq(ali / kumar, 7/5)\n    new_ratio = Eq((ali - 10) / (kumar + 10), 1/5)\n    \n    # Solve the system of equations\n    solutions = solve((orig_ratio, new_ratio), (ali, kumar))\n    \n    # Find the total number of erasers\n    total_erasers = solutions[ali] + solutions[kumar]\n    \n    return total_erasers\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the prices\n    banana, pear = symbols('banana pear')\n\n    # Equations based on the problem statement\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_minutes = 8 * 60 + 20  # Convert hours to minutes\n    activity_and_break = 45 + 20  # Time for each activity and the break after it\n\n    # Since the break does not occur after the last activity, we need to adjust the total time\n    total_time_activities = total_time_minutes - 20  # Remove last break time\n\n    # Calculate the number of activities\n    number_of_activities = total_time_activities // activity_and_break\n\n    return number_of_activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let a, b, c represent the weights of Adam, Ben, Carl respectively.\n\n    # Adam and Ben together weigh 102.\n    a_and_b = 102\n    # Ben and Carl together weigh 97.\n    b_and_c = 97\n    # Adam and Carl together weigh 92.\n    a_and_c = 92\n\n    # The sum of all three individual weights will be adding up (a_and_b, b_and_c, a_and_c)\n    # But this sum includes two of each person's weights (2a + 2b + 2c).\n    double_total_weight = a_and_b + b_and_c + a_and_c\n\n    # Divide the sum by 2 to obtain the total weight of Adam, Ben, and Carl.\n    total_weight = double_total_weight / 2\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        numb = int(''.join(perm))\n        if numb > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the number of days B takes to finish the work\n    b = symbols('b')\n    \n    # A's efficiency is twice B's, so A takes half the time of B\n    # A finishes in b/2 days and is able to finish 5 days less than B\n    equation = Eq(b/2, b - 5)\n    \n    # Solve for b\n    days_for_B = solve(equation, b)\n    \n    return days_for_B[0]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    num = 123456\n    # The divisibility rule for 11 is that the difference between\n    # the sum of the digits in odd positions and the sum of the\n    # digits in even positions should be either 0 or divisible by 11.\n    odd_digits_sum = sum(int(digit) for i, digit in enumerate(str(num)) if i % 2 == 0)\n    even_digits_sum = sum(int(digit) for i, digit in enumerate(str(num)) if i % 2 != 0)\n    is_divisible = (odd_digits_sum - even_digits_sum) % 11 == 0\n    remainder = (odd_digits_sum - even_digits_sum) % 11\n    \n    george_correct = is_divisible and remainder == 1\n\n    return george_correct, remainder\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100  # final length in meters (converted from cm)\n\n    melted_length_m = initial_length_m - final_length_m  # length melted in meters\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n    \n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Create an array to store the number of ways to climb to each step\n    dp = [0] * (9 + 1)\n    \n    # Base case initialization\n    dp[0] = 1  # There is one way to start (at step 0)\n    \n    # Fill the array using inductive recursion method\n    for i in range(1, 10):\n        if i >= 1:\n            dp[i] += dp[i - 1]\n        if i >= 4:\n            dp[i] += dp[i - 4]\n    \n    # The answer is the number of ways to reach the 9th step\n    return dp[9]\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    answer = 3549 // 7\n    return answer\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5 * initial_passengers) + 7\n    after_second_stop = after_first_stop - (1/4 * after_first_stop) + 13\n    return int(after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Calculate the total number of terms in the sequence\n    n_terms = int((10 - 0.5) / 0.5) + 1\n\n    # Calculate the sum of integers in the sequence\n    sum_of_integers = sum([i * 0.5 for i in range(1, n_terms + 1)])\n\n    # Use the formula for the sum of cubes: (1 + 2 + ... + n)^2\n    ans = sum_of_integers ** 2\n\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # Mr. Jones estimates to the nearest £5\n    # Therefore, the least amount his bill could be is £2.5 less than his estimate\n    estimate = 35\n    difference = 5 / 2  # Nearest £5 means within £2.5 above or below the estimate\n\n    # The least amount of the shopping bill\n    least_amount = estimate - difference\n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum = 22\n    future_sum = 40\n\n    years_until_future_sum = future_sum - current_sum\n\n    return years_until_future_sum\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * (1/5)\n\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    # Since each school orders at least 98 and at most 102, let's start from 98\n    # and use three nested loops for the three schools.\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            for school3 in range(98, 103):\n                if school1 + school2 + school3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n    rabbit_position_from_left = elephant_position - toys_between - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Nancy can complete the book in 6 days, which means her daily work rate is 1/6.\n    nancy_rate = 1 / 6\n    # Together, Nancy and Tim can complete the book in 4 days, which means their combined daily work rate is 1/4.\n    combined_rate = 1 / 4\n    # Tim's daily work rate is the combined rate minus Nancy's rate.\n    tim_rate = combined_rate - nancy_rate\n    # The time it takes for Tim to complete the book by himself is the inverse of his daily work rate.\n    tim_days = 1 / tim_rate\n\n    return tim_days\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan and his 3 sisters\n    biscuits_each = total_biscuits // people\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass of the sauce to grams\n    total_mass_in_grams = 172000  # 172 kg = 172000 g\n    \n    # The ratio of the packets\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n    \n    # Mass of each packet of P, Q, and R in grams\n    mass_p = 300  # grams\n    mass_q = 400  # grams\n    mass_r = 500  # grams\n\n    # Calculate the total ratio units\n    total_ratio_units = ratio_p + ratio_q + ratio_r\n\n    # Mass contributed by each ingredient based on the ratio\n    mass_per_unit = total_mass_in_grams / total_ratio_units\n    packets_p = (mass_per_unit * ratio_p) / mass_p\n    packets_q = (mass_per_unit * ratio_q) / mass_q\n    packets_r = (mass_per_unit * ratio_r) / mass_r\n\n    # Total number of packets used\n    total_packets = packets_p + packets_q + packets_r\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 0, 13, 12]  # Assign 0 to 'a' and include it in the list\n    mean = 12\n    total_sum = mean * len(numbers)  # Calculate the total sum of all numbers\n\n    # Calculate the sum of known numbers\n    known_sum = sum(numbers)\n\n    # The value of 'a' is the difference between total sum and the known sum\n    a = total_sum - known_sum\n\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for consistency\n    first_traffic_light = 60  # every minute\n    second_traffic_light = 90  # every 1.5 minutes\n    third_traffic_light_min = 30  # at least 30 seconds\n\n    # Least common multiple of the first two traffic lights' times\n    lcm_first_second = lcm(first_traffic_light, second_traffic_light)\n    \n    # The third traffic light must factor into the total 9-minute cycle\n    total_cycle = 9 * 60  # convert 9 minutes to seconds\n    \n    # Find the LCM of all three traffic lights\n    # Start from the LCM of the first two and increment by 1 second until finding\n    # a value that is a divisor of the total cycle and is greater than 30 seconds\n    for third_traffic_light in range(lcm_first_second, total_cycle + 1):\n        if total_cycle % third_traffic_light == 0 and third_traffic_light > third_traffic_light_min:\n            return third_traffic_light / 60  # Convert seconds back to minutes\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimetres\n    pink_ribbon_cm = 2.5 * 100  # Convert metres to centimetres\n    blue_ribbon_cm = 220  # Already in centimetres\n    orange_ribbon_cm = 30.5  # Already in centimetres\n    \n    # Compare the lengths to find the longest ribbon\n    longest_ribbon_length = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n    \n    if longest_ribbon_length == pink_ribbon_cm:\n        return \"pink\"\n    elif longest_ribbon_length == blue_ribbon_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    preparation_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = preparation_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    \n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n    \n    total_people = (red_cars * red_car_capacity) + (blue_cars * blue_car_capacity) + (green_cars * green_car_capacity)\n    total_cars = red_cars + blue_cars + green_cars\n    \n    average_capacity = total_people / total_cars\n    \n    return average_capacity\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 0\n    for i in range(1, 4):\n        number_str = '4' * i\n        result += int(number_str)\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n\n    percent_boys = (boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollar_cost = 64\n    exchange_rate = 1.25\n    us_dollar_cost = canadian_dollar_cost / exchange_rate\n    return us_dollar_cost\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given numbers\n    rachel_speed = 84 # km/h\n    rachel_time_later = 1.5 # hours later that Eleanor reaches City G\n    eleanor_total_time = 4 # hours taken by Eleanor\n    \n    # Rachel's distance traveled in the 1.5 hours after Eleanor has reached City G\n    rachel_distance_after = rachel_speed * rachel_time_later \n    \n    # Total distance Rachel would travel if she had reached City F\n    # Comprises the 39km she's yet to travel and the distance she covered in the last 1.5 hours\n    rachel_total_distance_to_f = rachel_distance_after + 39 \n    \n    # Time taken by Rachel to travel from where she passed Eleanor to City F\n    rachel_time_to_f = rachel_total_distance_to_f / rachel_speed\n    \n    # Since Rachel and Eleanor were traveling towards each other and met at some point,\n    # the time Rachel traveled until she met Eleanor must be the same as the time Eleanor\n    # traveled until she met Rachel.\n    # Therefore, the time Eleanor traveled after meeting Rachel is her total travel time\n    # minus the time they both traveled before meeting each other.\n    eleanor_time_after_meeting = eleanor_total_time - rachel_time_to_f\n    \n    # Eleanor's speed is calculated based on the distance she covered after meeting Rachel,\n    # divided by the time she took to reach City G after that. This will be equal to the\n    # distance between the two cities divided by her total travel time.\n    # The distance Eleanor covered after meeting Rachel can be calculated by summing the\n    # distance traveled by Rachel in the last 1.5 hours and the 39km remaining for Rachel to reach City F.\n    eleanor_distance_after_meeting = rachel_distance_after + 39\n    eleanor_speed = eleanor_distance_after_meeting / eleanor_time_after_meeting\n    \n    # The distance between the two cities is Eleanor's speed multiplied by her total travel time.\n    distance_between_cities = eleanor_speed * eleanor_total_time\n    \n    return distance_between_cities\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # shelving starts at index 1 from both ends.\n    # 8th shelf from the front, 10th from the back.\n    \n    # Let total_shelves be the total number of shelves.\n    # 8th from the front means there are 7 shelves before it.\n    # 10th from the back means there are 9 shelves after it.\n    # Combining both we get the equation:\n    # total_shelves = 7 (shelves before) + 1 (the shelf itself) + 9 (shelves after)\n    \n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score_needed = 90 * 5\n    # Maximum score per student is 100\n    # Hence, we start from the highest possible score and go down\n    for lowest_score in range(1, 101):\n        # We collect scores in a descending order\n        # assuming the first student scored the lowest and next scored +1 and so on\n        scores = [lowest_score + i for i in range(5)]\n        # Check if the total is satisfying the condition\n        if sum(scores) == total_score_needed and len(set(scores)) == 5:\n            # If we find the condition, we can break\n            return lowest_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for lengths of Rope A, B, and C in cm\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 3 * B)         # A is 3 times B\n    equation2 = Eq(C, B + 56)        # C is 56cm longer than B\n    equation3 = Eq(A, C + 130)       # A is 130cm longer than C\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculating the total length in cm\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    all_possible_combinations = list(combinations('ABCDE', 3))\n    favorable_combinations = [combo for combo in all_possible_combinations if 'A' in combo and 'B' in combo]\n    \n    probability = len(favorable_combinations) / len(all_possible_combinations)\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_male = 50\n    total_female = 70\n    percent_male_students = 16\n    percent_female_students = 10\n    \n    male_students = (percent_male_students / 100) * total_male\n    female_students = (percent_female_students / 100) * total_female\n\n    total_members = total_male + total_female\n    total_students = male_students + female_students\n\n    percent_students = (total_students / total_members) * 100\n\n    return percent_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200\n    concentration1 = 35\n\n    volume2 = 300\n    concentration2 = 50\n\n    total_volume = volume1 + volume2\n    total_concentration = ((volume1 * concentration1) + (volume2 * concentration2)) / total_volume\n\n    return total_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    return 48 * 3 // 4\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_has = 37\n    john_has = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have amy_has - x apples\n    # and John will have john_has + x apples\n\n    # We want to find x such that Amy has 4 more apples than John\n    # amy_has - x = (john_has + x) + 4\n    # Solve for x\n    x = (amy_has - john_has - 4) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # Let x be the number of papers the teacher has to mark per hour originally.\n    # Then she plans to mark 5*x papers in total.\n    # After working for one hour, she has 4*x papers left to mark in 4 hours,\n    # which means she needs to mark (4*x)/4 = x papers per hour originally.\n    # But she finds out she needs to mark x+6 papers per hour to finish in time.\n    # Also, if she marks x+10 papers per hour, she finishes an hour early,\n    # which means she finishes in 3 hours, marking a total of (x+10)*3 papers.\n    # Since the total number of papers doesn't change, we have the equation:\n    # 5*x = (x+10)*3\n    # Solving for x, we get:\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 5*x - (x+10)*3\n    solution_x = solve(equation, x)[0]\n\n    # Now we can find the total number of papers.\n    total_papers = 5 * solution_x\n    return total_papers\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) What fraction of the chicken pies more than vegetable pies?\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken = Fraction(more_chicken_than_vegetable, chicken_pies)\n\n    # (2) What fraction of the vegetable pies less than fruit pies?\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable = Fraction(less_vegetable_than_fruit, vegetable_pies)\n\n    return (fraction_more_chicken, fraction_less_vegetable)\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    markers_per_bag = 5\n\n    number_of_bags = markers_left // markers_per_bag\n    \n    return number_of_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'j' be the cost of one jug and 'c' the cost of one cup\n    j, c = symbols('j c')\n    \n    # The first equation represents the cost of 4 jugs and 5 cups\n    equation1 = Eq(4*j + 5*c, 85)\n    \n    # The second equation represents the cost of 2 jugs and 2 cups\n    equation2 = Eq(2*j + 2*c, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):       # 'a' must be from 1 to 9 as it's the first digit of a 2-digit number\n        for b in range(10):      # 'b' can be from 0 to 9 as it's the second digit of a 2-digit number\n            ab = 10 * a + b      # representation of a 2-digit number ab\n            ba = 10 * b + a      # representation of a 2-digit number ba\n            if 8 * ab == 3 * ba: # according to the given equation\n                return ab        # if the condition is satisfied, return the number ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    \n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 208):  # Since the pages are numbered from 1 to 207 inclusive\n        for digit in str(page):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_made = 3/4\n\n    total_designs = made_designs / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of each wristband be 'w' and each cap be 'c'\n    c, w = symbols('c w')\n\n    # Given that the cost of each cap is 3 times the cost of each wristband\n    eq1 = Eq(c, 3 * w)\n    \n    # Let 'm' be the total money Caleb had initially\n    m = symbols('m')\n\n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands\n    eq2 = Eq((2/5) * m, 4 * c + 6 * w)\n\n    # Solve the equations to find the cost of caps and wristbands\n    solutions = solve((eq1, eq2), (c, w, m))\n    c_value = solutions[c]\n    m_value = solutions[m]\n\n    # Calculate the remaining money after the first purchase\n    remaining_money = m_value - (2/5) * m_value\n\n    # He bought some more caps with 1/3 of his remaining money\n    money_spent_on_more_caps = (1/3) * remaining_money\n    number_of_more_caps = money_spent_on_more_caps / c_value\n\n    # He already bought 4 caps initially\n    total_caps = 4 + number_of_more_caps\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h_initial = 3000  # initial height in meters\n    h_final = 2000  # final height in meters\n\n    # Using conservation of energy to calculate the final velocity\n    # Potential energy at the start + Kinetic energy at the start = Potential energy at the end + Kinetic energy at the end\n    # m*g*h_initial + 0 = m*g*h_final + (1/2)*m*v_final^2\n    # (m*g*h_initial) - (m*g*h_final) = (1/2)*m*v_final^2\n    # 2*g*(h_initial - h_final) = v_final^2\n    # Taking the square root to find v_final\n    # v_final = sqrt(2*g*(h_initial - h_final))\n\n    # Define velocity as a symbol\n    v_final = symbols('v_final')\n\n    # Define the equation\n    equation = Eq(v_final**2, 2 * g * (h_initial - h_final))\n\n    # Solve the equation for v_final velocity\n    solution = solve(equation, v_final)\n\n    # We choose the positive root since velocity as the skydiver falls would be positive downwards\n    ans = max(solution)\n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 different numbers and we need a sequence of 4 consecutive ones\n    # In the worst case, we can take one from each of the non-consecutive sequence (1, 3, 5, 7, 9, 11, 13)\n    # And then (2, 4, 6, 8, 10, 12), so we have two sets that don't have 4 in a row\n    # The next card we take, no matter which it is, will create a consecutive sequence\n    # Since there are four different patterns, we need to multiply the number of cards by the number of patterns\n    max_non_consecutive_cards = 2 * ((13 - 1) // 4)\n\n    # Draw one more to ensure we get 4 consecutive numbers\n    return (max_non_consecutive_cards + 1) * 4\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Store the fixed numbers\n    fixed_positions = {0: 3, 2: 1, 6: 7}\n\n    # Store the remaining available digits\n    remaining_digits = set(range(10)) - set(fixed_positions.values())\n\n    for perm in permutations(remaining_digits):\n        # Insert fixed numbers into the permutation\n        num_list = list(perm)\n        num_list.insert(0, fixed_positions[0])\n        num_list.insert(2, fixed_positions[2])\n        num_list.insert(6, fixed_positions[6])\n\n        # Check divisibility for all numbers\n        divisible = True\n        for i in range(1, 10):\n            num_to_check = int(''.join(map(str, num_list[:i+1])))\n            if num_to_check % (i+1) != 0:\n                divisible = False\n                break\n        if divisible:\n            # Construct the answer in the desired format\n            ans = {chr(65+i): digit for i, digit in enumerate(num_list)}\n            return ans\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_three_years_ago = ashley_current_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brother_current_age = brother_age_three_years_ago + 3\n\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    page_num = 1\n    printed_count = 0\n\n    while printed_count < 89:\n        if (page_num - 1) % 3 != 0:\n            printed_count += 1\n        page_num += 1\n\n    return page_num - 1\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = 5 * adults + 3 * children\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15  # Multiples of both 3 and 5 are multiples of 15\n\n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    grandma_age_difference = 60 - 20\n    grandma_current_age = tom_current_age + grandma_age_difference\n\n    return grandma_current_age\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_b = symbols('candies students_b')\n\n    students_a = 2 * students_b\n    equation1 = Eq(4 * students_a, candies - 20)\n    equation2 = Eq(6 * students_b, candies + 16)\n\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pence_count in range(6):  # Jeremy can use between 0 and 5 ten-pence coins\n        for twenty_pence_count in range(4):  # Jeremy can use between 0 and 3 twenty-pence coins\n            for fifty_pence_count in range(2):  # Jeremy can use either 0 or 1 fifty-pence coin\n                if (10 * ten_pence_count + 20 * twenty_pence_count + 50 * fifty_pence_count) == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Implementing the Pigeonhole Principle\n    # We have 2 colors, so to guarantee two stickers of the same color,\n    # we must take out 1 more than the total number of colors.\n    number_of_colors = 2\n    stickers_to_take = number_of_colors + 1\n    \n    return stickers_to_take\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    blue = 5 \n    orange = 4\n    yellow = 2\n    \n    # Worst case: she picks all yellow, then all orange, then finally blue\n    # She needs to take one more to ensure she has 4 of the same color\n    ans = yellow + orange + (4 - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Each duckling has 2 legs\n    duckling_legs = 4 * 2\n    # Each baby goose has 2 legs\n    baby_goose_legs = 2 * 2\n    # All the ducklings and baby geese legs\n    total_bird_legs = duckling_legs + baby_goose_legs\n\n    # Remaining legs must belong to the lambs\n    # Lambs have 4 legs each\n    remaining_legs = 36 - total_bird_legs\n    # Number of lambs\n    num_lambs = remaining_legs // 4\n\n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')  # Define variables for boys and girls\n\n    # Equation based on the ratio given: 3 times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)  \n\n    # Equation based on the total number of sweets: boys get 2 sweets, girls get 4\n    equation2 = Eq(2 * boys + 4 * girls, 570)  \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 1, 9, 2]\n    \n    numbers = [''.join(map(str, p)) for p in permutations(digits)]\n    \n    max_number = max(numbers)\n    min_number = min(numbers)\n    \n    return int(max_number) - int(min_number)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Each layer forms a square; the top layer has 1^2 = 1 box,\n    # the second layer has 2^2 = 4 boxes,\n    # and the third layer has 3^2 = 9 boxes.\n    # We sum up the number of boxes for the top three layers\n    ans = (1 ** 2) + (2 ** 2) + (3 ** 2)\n    return ans\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n\n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n\n    total_copies = total_copies_A + total_copies_B\n\n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    a = 1.2 + 1.23 + 1\n    b = 1.2 + 1.23\n    ans = a * a - a * b\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    # Let x be the time it takes for the son to do the work alone\n    # Work done = time * rate, So for farmer rate = 1/24\n    # For the son, rate = 1/x\n    # When working together for 16 hours, they finish 1 job (harvesting)\n    # So, (1/24 + 1/x) * 16 = 1 \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/24 + 1/x) * 16, 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles = average_smiles_per_day * days_in_january\n\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n\n    num_students = 40\n    side_length = int(math.sqrt(num_students))\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    annie_sugar = 300 * 0.15\n    becky_sugar = 400 * 0.25\n    carol_sugar = 300 * 0.35\n\n    total_sugar = annie_sugar + becky_sugar + carol_sugar\n    total_solution = 300 + 400 + 300\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    \n    # Distance when the ball falls for the first time\n    first_fall_distance = initial_height\n    \n    # Distance when the ball bounces back up to half the initial height\n    first_bounce_distance = initial_height / 2\n    \n    # Distance when the ball falls the second time\n    second_fall_distance = first_bounce_distance\n    \n    # Total distance travelled is the sum of the first fall, the bounce up, and the second fall\n    total_distance_travelled = first_fall_distance + first_bounce_distance + second_fall_distance\n    \n    return total_distance_travelled\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Timmy and Kevin's stickers\n    timmy, kevin = symbols('timmy kevin')\n    \n    # Dorothy has 3 less than 9 times as many stickers as Timmy\n    dorothy_eq = Eq(9 * timmy - 3, 96)\n    \n    # Kevin has 45 more stickers than Timmy\n    kevin_eq = Eq(kevin, timmy + 45)\n    \n    # Solve the equations\n    solutions = solve((dorothy_eq, kevin_eq), (timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    num_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_number_of_5s = num_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    ways_to_place_all = factorial(total_children)  # Total ways without restrictions\n    \n    # Calculate the ways that Hugh stands between Louise and Richard.\n    # This is equivalent to treating Louise, Hugh, Richard as one unit plus the 2 other children.\n    # First, determine the positions for the unit and the 2 other children.\n    ways_unit = factorial(total_children - 2)  # Louise-Hugh-Richard treated as one unit\n    \n    # Within this unit, there are 2 ways Louise and Richard can be positioned around Hugh since he cannot be between them.\n    ways_louise_richard = 2\n    \n    ways_hugh_between = ways_unit * ways_louise_richard  # Total ways Hugh is between Louise and Richard\n    \n    # Subtract the unwanted ways from the total ways\n    ans = ways_to_place_all - ways_hugh_between\n    \n    return ans\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "from fractions import Fraction\n\ndef solution():\n    total_matches = 10 / (1 - Fraction(2, 5) - Fraction(7, 20))\n    wins = Fraction(2, 5) * total_matches\n    draws = Fraction(7, 20) * total_matches\n    points = 3 * wins + 1 * draws\n    return points.numerator  # Assuming the final answer should be an integer number of points.\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's calculation based on his wrong understanding is:\n    quotient = 9\n    remainder = 2\n    johnny_answer = (quotient * remainder) + 4  # Here is his error\n\n    # The correct calculation should be:\n    correct_answer = (quotient * 4) + remainder\n\n    # Check if Johnny's answer is correct\n    is_correct = (johnny_answer == correct_answer)\n    \n    # Return the correct working if his answer is not correct\n    if not is_correct:\n        return correct_answer\n    else:\n        return johnny_answer\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    for i in range(2, 41, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_spent = (4 * 75) + (3 * 95) # in pence\n    total_spent_pounds = total_spent / 100 # convert to pounds\n\n    change = 10 - total_spent_pounds # £10 note - total spent\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10 * initial_price\n    new_price_after_first_discount = initial_price - first_discount\n\n    second_discount = 0.20 * new_price_after_first_discount\n    final_price = new_price_after_first_discount - second_discount\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    # Total sum of the 8 numbers\n    total_sum = 8 * 555\n    \n    # Let the mean of the last 5 numbers be x\n    # Then, the mean of the first 3 numbers will be x - 296\n    # We can write the total sum of the numbers as:\n    # 3 * (x - 296) + 5 * x = total_sum\n    \n    # We solve this equation for x\n    x = (total_sum + 3 * 296) / 8\n    \n    return x\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    max_number = 100\n    count_by = 2\n    multiples = max_number // count_by\n    return multiples\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the number of stickers each person has\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    # Establish equations based on the problem statement\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    days_for_5_people = 15\n    days_for_x_people = 5\n\n    work_done_by_one_person_in_one_day = 1 / (5 * days_for_5_people)\n    total_work = 1  # representing the entire bridge\n\n    work_needed_per_person_per_day_for_x_people = total_work / (days_for_x_people * 5)\n    number_of_people_needed = total_work / (work_done_by_one_person_in_one_day * days_for_x_people)\n    additional_people_needed = number_of_people_needed - 5\n\n    return int(additional_people_needed)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_in_one_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_in_one_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    \n    bud_position_from_front = pip_position + children_between + 1\n\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(rasidah - 3/5*rasidah, 2*(chai_seng - 6/7*chai_seng))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    \n    years_ago = symbols('years_ago')\n    equation = Eq(isaac_current_age - years_ago, (mother_current_age - years_ago) / 3)\n    solutions = solve(equation, years_ago)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Grandma's age when divided by 4, 5, and 9 has remainders 2, 3, and 6, respectively.\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Apply the Chinese Remainder Theorem to find the solution to the given congruences.\n    age = solve_congruence(*congruences)\n\n    return age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_pound = 1 / 2.2\n    kg = pounds * kg_per_pound\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        return sum(range(a, b)) - b\n\n    ans = custom_op(5, 10) - custom_op(4, 9)\n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8         # Elena's speed in m/s\n    cat_speed = 3           # Her cat's speed in m/s\n    distance_behind = 500   # Distance Elena is behind her cat in meters\n\n    # Relative speed between Elena and her cat\n    relative_speed = elena_speed - cat_speed\n\n    # Time taken to catch up is distance divided by relative speed\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_diffs = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    next_second_diff = second_diffs[-1]\n    next_diff = differences[-1] + next_second_diff\n    next_number = 50 + next_diff\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from itertools import permutations\n\n    # Find all permutations of the set {1,2,3,4,5} with a length of 5\n    perm = permutations([1, 2, 3, 4, 5], 5)\n\n    # Check if the last digit is even and count such permutations\n    count_even = sum(1 for p in perm if p[-1] % 2 == 0)\n\n    return count_even\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for i in range(15):  # Since the sum of digits is 15, starting from smallest digit\n        j = 15 - i  # The second digit needed to make the sum 15\n        if 0 < i < 10 and 0 < j < 10:  # Check if both digits are within valid range (1-9)\n            return i * 10 + j  # The number is constructed by multiplying the first digit by 10 and adding the second\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_mean = 50\n    initial_total_weight = initial_mean * 8\n    new_mean = 52\n    new_total_weight = new_mean * 9\n    extra_apple_weight = new_total_weight - initial_total_weight\n    \n    return extra_apple_weight\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    return int(250**0.5)\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    from sympy import symbols, Eq, solve, I\n    \n    x = symbols('x')\n    equation = Eq(I * x**0.5, 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    numbers = [99, 98, 97, 96]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_time = pages / 50\n    new_time = pages / (50 + 20)\n    equation = Eq(original_time - new_time, 2)\n\n    solutions = solve(equation, pages)\n    return solutions[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    total_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)  # January 28th, 2013\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    candidate_date = start_date + one_year\n\n    while True:\n        # Leap year adjustment\n        if candidate_date.year % 4 == 0 and (candidate_date.year % 100 != 0 or candidate_date.year % 400 == 0):\n            candidate_date += one_day\n\n        if candidate_date.weekday() == 0:  # 0 is Monday\n            return candidate_date.year\n        else:\n            candidate_date += one_year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges - apples, 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Arbitrary upper limit\n        dividend = divisor * 8 + 7  # Division with Remainder formula\n        if dividend % divisor == 7:  # To satisfy the remainder condition \n            return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs for 1 hour from 6:30am to 7:30am\n    jog_time = 1  # hour\n    jog_speed = 6  # miles per hour\n    jog_distance = jog_speed * jog_time\n\n    # Star walks for 2 hours from 7:30am to 9:30am\n    walk_time = 2  # hours\n    walk_speed = 5  # miles per hour\n    walk_distance = walk_speed * walk_time\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_per_day * days_saved\n    amount_left = original_amount + total_saved - lent_to_brother - spent_on_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.1\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # in cents\n    additional_rate = 5  # in cents per minute\n    total_cost = 140  # in cents (since 1.4 dollars equals 140 cents)\n\n    if total_cost <= base_rate:\n        minutes = 15\n    else:\n        additional_cost = total_cost - base_rate\n        additional_minutes = additional_cost // additional_rate\n        minutes = 15 + additional_minutes\n\n    return minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Last digit of powers of 2 and 3 cycles in a pattern\n    power_cycle_2 = [2, 4, 8, 6]\n    power_cycle_3 = [3, 9, 7, 1]\n\n    # Since there are 2017 times in each pattern, we want the last element of each cycle\n    # after 2017 repetitions. However, 2017 modulo the cycle length (4) gives us the\n    # position in the cycle for the 2017th power.\n    last_digit_2 = power_cycle_2[(2017 - 1) % 4]\n    last_digit_3 = power_cycle_3[(2017 - 1) % 4]\n\n    # Now, we multiply the last digit of those to get the last digit of the entire expression\n    last_digit = (last_digit_2 * last_digit_3) % 10  # We're interested in the last digit only\n\n    return last_digit\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define a new operation\n    def custom_operation(a, b):\n        return a + b - ((a + b) // 10) * 2\n    \n    # Apply the operation to 9 and 20\n    ans = custom_operation(9, 20)\n    \n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(((number - 4) / 2) + 11, 37)\n\n    initial_number = solve(equation, number)\n\n    return initial_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = -(-56 // 5) * 5  # Ceiling division to get the first multiple of 5 greater than or equal to 56\n    last_multiple = (120 // 5) * 5   # Floor division to get the last multiple of 5 less than or equal to 120\n\n    if last_multiple < first_multiple:  # if no multiple found in range\n        return 0\n\n    num_multiples = ((last_multiple - first_multiple) // 5) + 1\n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    gina_50_year = 2005\n    james_20_year = 1997\n    james_age_when_gina_35 = 20 - (gina_50_year - james_20_year) + (50 - 35)\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    # To find the number of quarters in 2 1/2, we divide 2 1/2 by 1/4\n    # First convert the mixed number to an improper fraction: 2 1/2 = 5/2\n    numerator = 5\n    denominator = 2\n\n    # Divide the improper fraction by 1/4\n    # This is equivalent to multiplying by the reciprocal: (5/2) * (4/1)\n    quarters = (numerator * 4) / denominator\n\n    return int(quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Lucy's position from front\n    lucy_position = 5\n    # Eddie's position from back\n    eddie_position = 9\n    # Number of people between Lucy and Eddie\n    people_between = 2\n    \n    # Calculate the total number of people in line\n    total_people = lucy_position + people_between + eddie_position\n    \n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 9))  # Possible remainders\n\n    for number in range(1, 3*5*7*8):  # Least common multiple of 3, 5, 7, 8 is the search space\n        remainders = [number % 3, number % 5, number % 7, number % 8]\n        if set(remainders) == set(primes):\n            return number\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # convert meters to centimeters\n    cut_length_cm = 5 * 100 + 8      # convert meters to centimeters\n    \n    remaining_length_cm = total_length_cm - cut_length_cm  # calculate remaining length in cm\n    stripe_length_cm = remaining_length_cm / 9             # divide the remaining length into 9 stripes\n\n    stripe_length_m = stripe_length_cm // 100             # convert centimeters to meters\n    stripe_length_cm_remainder = stripe_length_cm % 100   # get the remainder in centimeters\n\n    return stripe_length_m, stripe_length_cm_remainder\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number we are trying to find\n    x = symbols('x')\n\n    # Construct the equation based on the problem statement\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the number of orchids, y be the number of tulips, and z be the number of roses at first\n    \n    x, y, z = symbols('x y z')\n\n    # The ratio of the number of orchids to the number of tulips is 3 to 5\n    eq_ratio = Eq(x/y, 3/5)\n\n    # After selling 40% of the orchids, 1/5 of the tulips, and 25% of the roses\n    eq_remaining = Eq((x - 0.4*x) + (y - y/5) + (z - 0.25*z), 2644)\n\n    # Total number of flowers at first is 3616\n    eq_total = Eq(x + y + z, 3616)\n\n    # System of equations\n    solution = solve((eq_ratio, eq_remaining, eq_total), (x, y, z))\n    orchids_at_first = solution[x]\n\n    return orchids_at_first\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    # Total number of pupils\n    total_pupils = 30\n    # Pupils who are right-handed\n    right_handed = 21\n    # Number of girls in the class\n    girls = 16\n    # Assuming all boys are right-handed\n    right_handed_boys = right_handed - girls if right_handed > girls else 0\n    # Since not all girls are right-handed, the smallest number of girls who are right-handed\n    # would be if all boys are right-handed, then the remaining right-handed are girls\n    right_handed_girls = right_handed - right_handed_boys\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    equation1 = Eq(12 * books, 9 * (books - 14))  # Each book costs $12, each file costs $9 and 14 more books than files\n    equation2 = Eq(12 * books + 9 * (books - 14), 336)  # Total cost is $336\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if (chickens * 2) + (rabbits * 4) == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    return 0.012 + 2.03 + 0.1456\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Use pattern for ones digit of powers to find the last digit for each number in the sum\n    ones_digit = [(base ** 2013) % 10 for base in range(1, 10)]\n    # Calculate the sum of the ones digits\n    result_ones_digit = sum(ones_digit) % 10\n    return result_ones_digit\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In a worst-case scenario, Peter could pick one red, one blue and one black before getting two of the same color.\n    # So after three picks he still does not have two socks of the same color. \n    # On the fourth pick, he is guaranteed to get two of the same color because there are only three colors.\n    min_socks_to_pick = 4\n    return min_socks_to_pick\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    departure_time = datetime(year=1, month=1, day=2, hour=20)  # 8pm, July 2nd\n    arrival_time = datetime(year=1, month=1, day=3, hour=1) + timedelta(hours=7) # 1am, July 3rd, +7 hours difference\n    \n    flight_duration = arrival_time - departure_time\n    \n    return flight_duration.seconds // 3600  # Convert seconds to hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    digits = 0\n    for i in range(1, 10):\n        if 131 >= 10 ** i:\n            digits += i * (10 ** i - 10 ** (i - 1))\n        else:\n            digits += i * (131 - 10 ** (i - 1))\n            break\n    return digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score = 168\n    \n    # Four marks given for each correct answer\n    # Minus one mark for each incorrect answer\n    # x = number of correct answers, y = number of wrong answers\n    # 4x - y = score\n    # x + y = attempted_questions\n    \n    # y = x + y - x\n    # y = attempted_questions - x\n    \n    # 4x - (attempted_questions - x) = score\n    # 4x - attempted_questions + x = score\n    # 5x - attempted_questions = score\n    # 5x = score + attempted_questions\n    \n    correct_answers = (score + attempted_questions) // 5\n    \n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    # Eugene had 5 times as many coins as Sid\n    equation1 = Eq(eugene, 5 * sid)\n    \n    # After Eugene used 71 coins and Sid used 16 coins, they had 51 coins left altogether\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n    \n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    # Let the two numbers be x and y with x > y\n    # x + y = 71 (sum of the numbers)\n    # x - y = 9 (difference of the numbers)\n    \n    # Adding both equations, we get 2x = 80\n    # Therefore x = 80 / 2 = 40, which is the bigger number\n    x = (71 + 9) // 2\n    return x\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are 2 choices for the first digit (1 or 2, as we cannot have 0 as the first digit for a 2-digit number)\n    first_digit_choices = 2\n    # There are 3 choices for the second digit (0, 1, or 2, since here repetition is allowed and 0 can be used)\n    second_digit_choices = 3\n    # By the multiplication principle, the total number of 2-digit numbers is the product of the choices for each digit\n    total_numbers = first_digit_choices * second_digit_choices\n    return total_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smallest even number\n    x = symbols('x')\n    equation = Eq(5*x + 2*4*5/2, 200)  # Sum of an arithmetic sequence with common difference of 2\n\n    smallest_number = solve(equation, x)[0]\n    return smallest_number\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred in grams\n    x = symbols('x')\n\n    # Initial amounts of sugar in each container\n    sugar_A_start = 50 * 0.10\n    sugar_B_start = 30 * 0.20\n\n    # Amount of sugar after transferring x grams of solution\n    sugar_A_end = sugar_A_start - 0.10 * x + 0.20 * x\n    sugar_B_end = sugar_B_start + 0.10 * x - 0.20 * x\n\n    # Total volume of water after transferring x grams of solution\n    water_A_end = 50 - x + x\n    water_B_end = 30 - x + x\n\n    # Concentration of sugar in each container after the transfer\n    concentration_A = sugar_A_end / water_A_end\n    concentration_B = sugar_B_end / water_B_end\n\n    # Equation for the concentrations to be the same\n    equation = Eq(concentration_A, concentration_B)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    ans = sum(100 / reduce(lambda x, y: x * y, range(97, 97 - i, -1)) for i in range(4))\n    return ans\n\nfrom functools import reduce\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # It takes 8 minutes to cut the wood into 5 sections,\n    # which means we make 4 cuts (since the first section doesn't require a cut).\n    cuts_for_5_sections = 4\n    time_for_5_sections = 8\n    \n    # The time per cut is the total time divided by the number of cuts.\n    time_per_cut = time_for_5_sections / cuts_for_5_sections\n    \n    # To cut the wood 6 times, we need to find out the total time by multiplying\n    # the time per cut by 6 (since each cut takes the same amount of time).\n    cuts_for_6_sections = 6\n    time_for_6_sections = time_per_cut * cuts_for_6_sections\n    \n    return time_for_6_sections\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n\n    # Peter needs more than half of the total votes to be elected.\n    # Hence, we calculate half of the total votes and subtract Peter's current votes.\n    votes_needed = (total_votes // 2) + 1 - peter_votes\n\n    return votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(boys - girls, 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    max_value = max(numbers)\n    return max_value\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # Define the total amount in pounds\n    total_amount_pounds = 4.90\n    # Convert total amount to pence\n    total_amount_pence = total_amount_pounds * 100\n    # Given that there are an equal number of 5p, 10p, and 20p coins.\n    # Let x be the number of each type of coin.\n\n    # Total amount in pence will be the sum: 5x + 10x + 20x = 35x\n    # We solve for x using the total amount in pence.\n    # Equation: 35x = total_amount_pence\n\n    # Solve for x.\n    x = total_amount_pence / 35\n\n    # Total number of coins is the sum of all three types of coins: 3x.\n    total_coins = 3 * x\n\n    return int(total_coins)\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n\n    percentage_reduction = (reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Total sweets eaten is a sum of an arithmetic sequence.\n    # We are given that the total sum of the arithmetic sequence is 135,\n    # and the number of terms (days) is 9.\n\n    # Let the first term of the sequence be a, and the common difference be d.\n    # As per the question, d = 3 (because each day he ate 3 more than the day before).\n\n    # Using the formula for the sum of n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d),\n    # where S_n is the sum of n terms, n is the number of terms, a is the first term, and d is the common difference.\n    # We have S_9 = 135, n = 9, and d = 3.\n\n    # Now we solve for a.\n    n = 9\n    d = 3\n    S_n = 135\n\n    # S_n = n/2 * (2a + (n - 1)d)\n    # 135 = 9/2 * (2a + (9 - 1) * 3)\n    # 135 = 9/2 * (2a + 24)\n    # 135 = 4.5 * (2a + 24)\n    # 30 = 2a + 24\n    # 6 = 2a\n    # a = 3 (sweets on the first day)\n\n    a = 3\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a + (n - 1)d\n    # The number of sweets he ate on the last day (which is the 9th day) would be:\n    # a_9 = a + (9 - 1) * d\n    # a_9 = 3 + 8 * 3\n    # a_9 = 3 + 24\n    # a_9 = 27\n    \n    a_n = a + (n - 1) * d\n    return a_n\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    total_money = 100\n    money_spent_on_book = total_money * 0.10\n    remaining_money = total_money - money_spent_on_book\n    money_spent_on_DVD = remaining_money * 0.20\n    final_money_left = remaining_money - money_spent_on_DVD\n\n    return final_money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28\n    cost_of_gift = 20\n\n    remaining_amount = (initial_amount - cost_of_gift) * 100  # Convert to cents\n\n    return remaining_amount\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    balance = principal * (1 + rate) ** time\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = 0\n    for page_number in range(1, 186):  # The range function stops at n-1, so 186 to include page 185.\n        total_digits += len(str(page_number))\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 0.10\n    monthly_divisor = 12\n\n    pay_rise_amount = annual_salary * pay_rise_percentage\n    new_annual_salary = annual_salary + pay_rise_amount\n    new_monthly_salary = new_annual_salary / monthly_divisor\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4*x - 5 * (4 - x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    return 704 - 457\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Loop through all possible months (1 to 12) and days (1 to 31)\n    for month in range(1, 13):\n        for day in range(1, 32):\n            # Calculate the products according to Betty's hints\n            product_month = month * 31\n            product_day = day * 12\n            \n            # Check if the addition of the two products equals 376\n            if product_month + product_day == 376:\n                # Format the date as \"ddmm\" and return as a string\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    missing_number = (4.08 * 20 - 1.08 * 20) / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(119, 98, -2):\n        sum += sign * i\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_price = 6  # in pounds\n    protractor_price = 30 / 100  # in pounds (30p converted to pounds)\n\n    # Discounts\n    calculator_discount = 1/4\n    protractor_discount = 1/2\n\n    # Sale prices after discount\n    sale_calculator_price = calculator_price * (1 - calculator_discount)\n    sale_protractor_price = protractor_price * (1 - protractor_discount)\n\n    # Number of items bought\n    calculators_bought = 8\n    protractors_bought = 20\n\n    # Total cost\n    total_cost = (sale_calculator_price * calculators_bought) + (sale_protractor_price * protractors_bought)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_required = 40\n    milk_required = 80\n    tom_flour = 25\n    \n    tom_milk = (milk_required * tom_flour) / flour_required\n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    sweets_initial = sweets_left + sweets_taken\n    return sweets_initial\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    younger, older = symbols('younger older')\n    # Let the number of years it takes for the younger elephant to reach the older elephant's current age be 'x'\n    equation = Eq(older, younger + 18 + (older - 62))\n\n    solutions = solve((equation, Eq(younger, 18)), (younger, older))\n\n    return solutions[older]\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # The amount of grass that oxen can eat is proportional to the number of oxen and the amount of time.\n    # Therefore, 27 oxen * 6 weeks = 23 oxen * 9 weeks = total amount of grass on the farm.\n    total_grass = 27 * 6\n  \n    # We need to find the number of weeks for 21 oxen to finish the grass\n    # 21 oxen * number_of_weeks = total_grass\n    number_of_weeks = total_grass / 21\n  \n    return number_of_weeks\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02) ** 2\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    weight_in_tonnes = 1.194\n    two_thirds_of_weight = (2 / 3) * weight_in_tonnes\n    weight_in_kilograms = two_thirds_of_weight * 1000  # since 1 tonne = 1000 kilograms\n    return weight_in_kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Time spent biking\n    biking_time_hours = 1  # From 7:30 AM to 8:30 AM\n\n    # Time spent on the train\n    train_time_hours = 2  # From 8:30 AM to 10:30 AM\n\n    # Speeds\n    biking_speed_mph = 10  # miles per hour\n    train_speed_mph = 50  # miles per hour\n\n    # Distance calculation\n    biking_distance = biking_speed_mph * biking_time_hours\n    train_distance = train_speed_mph * train_time_hours\n\n    # Total distance traveled\n    total_distance = biking_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for the number of balls in each box.\n    A, B, C = symbols('A B C')\n    \n    # We solve the equation A + B + C = 5 considering A, B, C are nonnegative integers.\n    # This problem is equivalent to a stars and bars problem, where we need to \n    # place two bars in between 5 balls to divide them into three sections (boxes).\n    # So the number of ways to place the two bars among the balls (with 5 + 2 slots) is:\n    slots = 5 + 2\n    bars = 2\n    \n    # Calculating the combinations which is \"slots choose bars\", \n    # which is same as \"(n+k-1) choose (k)\" for the nonnegative integer solutions.\n    num_ways = math.comb(slots - 1, bars)\n    \n    return num_ways\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for blue, red, and green marbles.\n    red, blue, green = symbols('red blue green')\n    \n    # Equation representing the description:\n    # red = blue + 25\n    # green = red + 32\n    # red + blue + green = 112\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(red + blue + green, 112)\n    \n    # Solve the equations.\n    solutions = solve((equation1, equation2, equation3), (red, blue, green))\n    \n    # Return the number of blue marbles.\n    return solutions[blue]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letters_count = {char: word.count(char) for char in set(word)}\n    total_perms = factorial(len(word))\n\n    for count in letters_count.values():\n        total_perms //= factorial(count)\n\n    return total_perms\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Since Lucas is the 3rd from the front and 2nd from the back, there are 3 + 2 - 1 rows\n    # because Lucas is counted in both front and back rows, we subtract 1 to get unique row count\n    rows = 3 + 2 - 1\n    \n    # Similarly, Lucas is 4th from the left and 3rd from the right giving us the columns\n    # Again, subtract 1 to avoid counting Lucas twice\n    columns = 4 + 3 - 1\n    \n    # The total number of students is rows times columns\n    ans = rows * columns\n    return ans\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    def digits_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    number = 217\n    while digits_sum(number) != 9:\n        number += 1\n        \n    return number\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Ema's and Keng Wee's initial amounts of money\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Equation for the initial amount Ema had in terms of Keng Wee's amount\n    equation1 = Eq(ema, keng_wee - 360)\n\n    # Equation for the amount of money left after spending\n    # Ema spent 1/4 and Keng Wee spent 4/7 of their initial money\n    equation2 = Eq(ema - ema / 4, keng_wee - 4 * keng_wee / 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    # Return Keng Wee's initial amount of money\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    one_tenth_of_square = one_fourth_of_36 * 10\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Since Lucas is the 3rd from the front and 2nd from the back,\n    # there must be 3 + 2 - 1 rows (subtracting 1 because Lucas is counted twice)\n    rows = 3 + 2 - 1\n    \n    # Similarly, since Lucas is the 4th from the left and the 3rd from the right,\n    # there must be 4 + 3 - 1 columns\n    columns = 4 + 3 - 1\n    \n    # The total number of students is the product of rows and columns\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls_before, boys = symbols('girls_before boys')\n    girls_after = girls_before + 2\n\n    equation1 = Eq(girls_before, 9/11 * boys)\n    equation2 = Eq(girls_after, 10/11 * boys)\n\n    solutions = solve((equation1, equation2), (girls_before, boys))\n\n    total_students_after = solutions[girls_before] + 2 + solutions[boys]\n    return total_students_after\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Start with the initial 1 in the sequence\n    for n in range(2, 11):  # Loop from 2 to 10\n        ans += sum([(i / n) for i in range(1, n + 1)])  # Adding ascending fractions\n        ans += sum([(i / n) for i in range(n - 1, 0, -1)])  # Adding descending fractions\n    return ans\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_money = 5 * 100  # Convert pounds to pence\n    cost_milk = 3 * 31  # Cost of 3 litres of milk\n    cost_crisps = 2 * 17  # Cost of 2 packets of crisps\n    cost_bread = 78  # Cost of 1 large loaf of bread\n    cost_magazine = 105  # Cost of 1 magazine, converted to pence\n\n    total_cost = cost_milk + cost_crisps + cost_bread + cost_magazine\n    change = total_money - total_cost\n\n    return change\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim_tiles, tan_tiles = symbols('lim_tiles tan_tiles')\n\n    equation1 = Eq(lim_tiles, 5 * tan_tiles)\n    equation2 = Eq(lim_tiles + tan_tiles, 390)\n\n    solutions = solve((equation1, equation2), (lim_tiles, tan_tiles))\n\n    difference = solutions[lim_tiles] - solutions[tan_tiles]\n\n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    zehan_current = symbols('zehan_current')\n\n    equation = Eq(zehan_current + 12, 3 * zehan_current)\n\n    solution = solve(equation, zehan_current)\n\n    return solution[zehan_current]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Choose 1 out of A, B, or C\n    ways_to_choose_one = comb(3, 1)\n    \n    # Choose the remaining 4 from the 12 students (15 - 3 already considered)\n    ways_to_choose_the_rest = comb(12, 4)\n    \n    # Multiply the two to get the total number of combinations\n    total_ways = ways_to_choose_one * ways_to_choose_the_rest\n    \n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    # Let the initial amount of lemon juice be x ml.\n    # According to the problem, initially the ratio is 2:3, so water will be (3/2) * x.\n    \n    # After adding 80 ml of lemon juice the new ratio becomes 6:5.\n    # Hence, the new amount of lemon juice is x + 80 ml and water remains (3/2) * x.\n    \n    # The new ratio can be expressed as:\n    # (x + 80) / ((3/2) * x) = 6 / 5\n    # 5 * (x + 80) = 6 * (3/2) * x\n    # 5x + 400 = 9x\n    # 4x = 400\n    # x = 100\n    \n    # Hence, initially there were 100 ml of lemon juice in the bottle.\n    return 100\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio\n\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n\n    solutions = solve(equation, (x, y))\n\n    return solutions[2 * x - y]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    \n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.30  # 30% increased speed\n    late_time = 9 / 60  # Late by 9 minutes, converted to hours\n\n    # Since the car is traveling at increased speed for the time it was late,\n    # we can calculate the distance it covers in that time with the increased speed.\n    # The car must cover the entire distance in the same time it would have at the usual speed.\n\n    # usual_time = distance / usual_speed\n    # increased_time = distance / increased_speed\n    # increased_time = usual_time - late_time\n    \n    # From the above equations, we have:\n    # distance / increased_speed = distance / usual_speed - late_time\n    # Solving for distance, we get:\n    # distance = late_time * usual_speed * increased_speed / (increased_speed - usual_speed)\n\n    distance = late_time * usual_speed * increased_speed / (increased_speed - usual_speed)\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    original_number = (80 * 8 + 8) / 8 - 8\n    return original_number\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, s be the original speed, and t be the original time\n    d, s, t = symbols('d s t')\n\n    # If speed increases by 25%, time taken decreases by 20 minutes\n    equation1 = Eq(t - (20/60), d / (s * 1.25))\n\n    # If speed decreases by 45 m/min, time taken increases by 75%\n    equation2 = Eq(t * 1.75, d / (s - 45))\n\n    # Original relation between speed, distance, and time\n    equation3 = Eq(d, s * t)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3), (d, s, t))\n\n    # Return the distance\n    return solution[d]\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    # let's denote:\n    # x = number of red ropes\n    # y = number of blue ropes\n    # We have two equations from the problem statement:\n    # x + y = 10 (since there are a total of 10 ropes)\n    # 2x + 3y = 26 (since the total length of the ropes is 26m and each red rope is 2m and each blue is 3m)\n    \n    # We iterate over possible values for x and compute y to see if it satisfies both conditions\n    for x in range(11):  # x can be from 0 to 10 as there are only 10 ropes\n        y = 10 - x\n        if 2 * x + 3 * y == 26:\n            return x  # We return the number of red ropes\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both = 21\n\n    only_one_event = (skipping_rope - both) + (long_jump - both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # variable declaration for kim's total savings\n    savings = symbols('savings')\n\n    # expression representing the amount given to her mother\n    mother_given = savings / 3\n\n    # amount spent on dresses and earrings\n    spent_amount = 177 + 129\n\n    # money left is 50% of what she gave her mother\n    money_left = mother_given / 2\n\n    # total savings equation\n    equation = Eq(savings - mother_given - spent_amount, money_left)\n\n    # solve for savings\n    total_savings = solve(equation, savings)\n\n    return total_savings[0]\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half_year = 366\n    average_second_half_year = 65\n    months_in_half_year = 6\n\n    total_second_half_year = average_second_half_year * months_in_half_year\n    \n    total_year = total_first_half_year + total_second_half_year\n    months_in_year = 12\n    \n    average_per_month = total_year / months_in_year\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7):  # We use 9*7 because it's the least common multiple of 7 and 9\n        if (i % 7 == 0) and (i % 9 == 2):\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    total = 22\n    count = 0\n    for i in range(1, total//2):\n        if i != total - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    total_used = brownies + cookies + muffins\n\n    return total_used\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    # Given the difference between the smallest factor (which is always 1 for any number)\n    # and the greatest factor (which is the number itself for any number since a number is always\n    # divisible by itself) is 41, thus A - 1 = 41, where A is the greatest factor or the number itself.\n    A = 41 + 1\n    \n    # The 7th multiple of A is simply 7 times A.\n    seventh_multiple = A * 7\n    \n    return seventh_multiple\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # The ratio provided is the height to width ratio\n    ratio_height = 3\n    ratio_width = 4\n\n    # Given height of the TV screen\n    height = 21  # in cm\n\n    # Calculate the width using the ratio\n    width = (ratio_width / ratio_height) * height  # in cm\n\n    # Calculate the perimeter of the screen\n    perimeter = 2 * (height + width)  # Perimeter formula is 2*(height+width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    product = 1\n    for i in range(2, 12):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the larger number and y be the smaller number\n    # we know that x - y = 36 (difference between the two numbers)\n    # and x + y = 98 (sum of the two numbers)\n\n    # From the two equations, we can express y in terms of x:\n    # y = x - 36\n    # Substituting the value of y in the sum equation we get\n    # x + (x - 36) = 98\n    # Simplifying we get\n    # 2x = 98 + 36\n    # 2x = 134\n    # x = 134 / 2\n    x = 134 / 2\n\n    # Now we find y\n    y = x - 36\n\n    # y is the smaller number\n    return y\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    common_difference = 2\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Finding the last digit of a number raised to power is periodic\n    # For 4 and 9, the last digit would repeat every 2 times.\n    # For 7 and 11 (or 1 as the last digit), the last digit would repeat every 4 times.\n    # Since all the numbers are raised to the power of 100 which is divisible by 2 and 4\n    # We just need to find the last digit of 4^2, 9^2, 7^4 and 1^4 and multiply them\n\n    last_digit_4 = (4**2) % 10\n    last_digit_9 = (9**2) % 10\n    last_digit_7 = (7**4) % 10\n    last_digit_11 = (1**4) % 10\n\n    last_digit = (last_digit_4 * last_digit_9 * last_digit_7 * last_digit_11) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    # Total number of questions\n    total_questions = 60\n    # Meng answered 70% of the questions\n    answered_questions = total_questions * 0.7\n    # Marks for correct answer\n    correct_mark = 3\n    # Deduction for wrong answer\n    wrong_deduction = -1\n    # Total score\n    total_score = 78\n    \n    # We need to set up the equation:\n    # correct_mark * correct_answers + wrong_deduction * (answered_questions - correct_answers) = total_score\n    # Then we solve for correct_answers\n    \n    correct_answers = (total_score - wrong_deduction * answered_questions) / (correct_mark - wrong_deduction)\n    return int(correct_answers)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    files, rulers = symbols('files rulers')\n    \n    # Given the cost of 6 files and 10 rulers is $40\n    equation1 = Eq(6 * files + 10 * rulers, 40)\n    \n    # Solve the equation to find the individual price of files and rulers\n    solutions = solve(equation1, (files, rulers))\n    \n    files_cost = solutions[files]\n    rulers_cost = solutions[rulers]\n    \n    # Now calculate the cost of 9 files and 15 rulers\n    total_cost = 9 * files_cost + 15 * rulers_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    # let j represents Jessie's money\n    j = symbols('j')\n\n    # John had 5/13 of Jessie's money, so John has (5/13)*j\n    # Jessie transferred $600 to John, so John's money becomes (5/13)*j + 600\n    # After transferring, Jessie has j - 600\n    # John's money is now 50% of Jessie's money, so\n    # (5/13)*j + 600 = 1/2 * (j - 600)\n\n    equation = (5/13) * j + 600 - 1/2 * (j - 600)\n\n    # solve the equation\n    jessie_money = solve(equation, j)[0]\n    john_money = (5/13) * jessie_money + 600\n\n    # total money is Jessie's money plus John's money\n    total_money = jessie_money + john_money\n\n    return total_money\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    time_format = \"%H:%M\"\n    \n    time_in = datetime.strptime(\"10:30\", time_format)\n    time_out = datetime.strptime(\"11:00\", time_format)\n    \n    bake_time = time_out - time_in\n    return bake_time.seconds // 60\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Initialize counters for the digits 1 and 2\n    counter_1 = 0\n    counter_2 = 0\n    N = 0\n    \n    # Keep incrementing N and count the occurrences of digits 1 and 2\n    while counter_1 < 15 or counter_2 < 14:\n        N += 1\n        # convert the number to a string and count the digits\n        counter_1 += str(N).count('1')\n        counter_2 += str(N).count('2')\n    \n    # The correct value of N will be the one right before\n    # digits 1 and 2 exceed their limits\n    return N - 1\n\n# Call the function and store the answer\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each person's number of lollipops\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    # Set up the equations based on the information given\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 * sheena / 5)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    # Get the number of lollipops that Sheena has\n    return solutions[sheena]\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # t_shirts / caps = 8 / 5\n    eq1 = Eq(t_shirts * 5, caps * 8)\n    \n    # 1/4 of T-shirts sold at $3 each and 1/5 of caps sold at $5 each\n    eq2 = Eq((t_shirts / 4) * 3 + (caps / 5) * 5, 132)\n\n    solutions = solve((eq1, eq2), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost_bananas = 3 * 12  # cost of bananas in pence\n    total_cost_apples = 5 * 11  # cost of apples in pence\n    total_cost = total_cost_bananas + total_cost_apples  # total cost in pence\n\n    money_paid = 200  # money paid in pence (£2 coin)\n\n    change = money_paid - total_cost  # change in pence\n\n    # Convert change to pounds and pence\n    change_pounds = change // 100\n    change_pence = change % 100\n\n    # Final answer in pounds (float format)\n    ans = change_pounds + change_pence / 100\n\n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    number_of_children = 7\n    age_difference = 2\n\n    harvir_age = youngest_age + (number_of_children - 1) * age_difference\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    total_spent = calendar_price + ball_price\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    # Use fractions to represent the amount of flour used and left\n    muffins_flour = 1/5\n    cookies_flour = 1/2\n    remaining_flour = 360/1000  # Convert grams to kilograms\n\n    # Calculate the initial amount of flour\n    initial_flour = muffins_flour + cookies_flour + remaining_flour\n\n    return initial_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # define the cost of each orange and lemon in pence\n    orange_price = 26\n    lemon_price = 30\n    total_spent = 500  # total amount spent in pence (£5 = 500p)\n    \n    # we iterate over the number of oranges and lemons to find combinations that sum to 500p\n    for oranges in range(total_spent // orange_price + 1):\n        for lemons in range(total_spent // lemon_price + 1):\n            if (oranges * orange_price + lemons * lemon_price) == total_spent:\n                return oranges + lemons  # returns the total number of oranges and lemons bought\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # For a circular table, we consider one person as a fixed point, which reduces\n    # the permutation by one person. Hence, for n people, we have (n-1)! permutations.\n    num_people = 4\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original = symbols('original')\n    equation = Eq(original + 24, 3 * original)\n    \n    solution = solve(equation, original)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n\n    boxes_needed = -(-total_cookies // cookies_per_box)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male, female = symbols('male female')\n\n    equation1 = Eq(male, female + 450)\n    equation2 = Eq(female * 1.15 + male * 0.82, 1354)\n\n    solutions = solve((equation1, equation2), (male, female))\n\n    total_first_day = solutions[male] + solutions[female]\n\n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        if A == 0: # Leading digit can't be zero\n            continue\n        F = E - 2\n        H = A + 1\n        if F < 0 or F > 9 or F in p or H in p: # Check if F and H are valid and distinct\n            continue\n        if (E * 10000 + F * 1000 + C * 100 + B * 10 + H) == (A * 10000 + E * 1000 + D * 100 + C * 10 + B) * 4:\n            return (E * 10000 + F * 1000 + C * 100 + B * 10 + H)\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since the pencils are identical and the pencil cases are identical, we use stars and bars method.\n    # We place 2 bars to create 3 sections (pencil cases) among 7 stars (pencils).\n    # Number of ways to arrange 7 stars and 2 bars is (7 + 2) choose 2, which is 9 choose 2.\n    from math import comb\n    num_ways = comb(7 + 2 - 1, 2 - 1)\n    return num_ways\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Sum of all books\n    biographies_factorial = factorial(3)\n    science_fictions_factorial = factorial(4)\n    magazines_factorial = factorial(2)\n    schoolbooks_factorial = factorial(2)\n\n    # The number of ways to arrange all books\n    all_books_factorial = factorial(total_books)\n\n    # Divide by the factorial of each group to account for indistinguishability within each group\n    ans = all_books_factorial // (biographies_factorial * science_fictions_factorial * magazines_factorial * schoolbooks_factorial)\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n\n    robots_per_week = robots_per_day * days_per_week\n\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    step = 9\n    while start_number > 0:\n        last_number = start_number\n        start_number -= step\n    return last_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000\n    num_friends = 5\n    cost_per_friend = total_cost / num_friends\n    return cost_per_friend\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # Male visitors on the first day = female visitors + 450\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    \n    # On the second day visitors counts changed\n    male_second_day = male_first_day * (1 - 0.18)\n    female_second_day = female_first_day * (1 + 0.15)\n    \n    # Total number of visitors on the second day was 1354\n    equation2 = Eq(male_second_day + female_second_day, 1354)\n    \n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n    \n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_amount = 555\n    cost_without_name = 10\n    cost_with_name = 15\n\n    # Lets assume all kids bought the £10 shirt\n    # Then deduct the difference for each £15 shirt\n    # The difference is the cost_with_name - cost_without_name\n    # The number of children who paid for names is the total difference\n    # divided by the extra cost per child for having the name on the shirt.\n    \n    total_kids = 50\n    total_without_names = total_kids * cost_without_name\n    difference = total_amount - total_without_names\n    extra_cost = cost_with_name - cost_without_name\n    \n    kids_with_names = difference // extra_cost\n    \n    return kids_with_names\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time in minutes David walks after increasing his speed\n    t = symbols('t')\n\n    # Distance walked before speed increase: 150 m/min * 10 min = 1500 m\n    distance_before_increase = 150 * 10\n\n    # Distance walked after speed increase: (150 m/min + 50 m/min) * t = 200t m\n    distance_after_increase = 200 * t\n\n    # Total distance walked = distance before increase + distance after increase = 3700 m\n    equation = Eq(distance_before_increase + distance_after_increase, 3700)\n\n    # Solve for t\n    time_after_increase = solve(equation, t)[0]\n\n    # Total time walked = time before increase + time after increase\n    total_time = 10 + time_after_increase\n\n    return total_time\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    leo, jason = symbols('leo jason')\n    equation1 = Eq(leo - jason, 220)\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    solutions = solve((equation1, equation2), (leo, jason))\n    \n    return solutions[jason]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    # Initially there are 40 students\n    students = 40\n    # Position starts from 1 and we're looking for even positions only.\n    # Every round, the position doubles because students in odd positions leave.\n    position = 1\n    while students > 1:\n        # Each round, half of the students leave (odd-numbered positions)\n        students //= 2\n        # The remaining students are the ones originally in even positions, so\n        # the position of the remaining students effectively doubles.\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Convert Singapore takeoff time into London time when the plane took off\n    singapore_takeoff_hour = 5\n    london_takeoff_hour = (singapore_takeoff_hour - 7) % 24  # Adjust for time difference and use modulo to account for day change\n\n    # The time when the plane landed in London (no need to convert, as this is already London local time)\n    london_landing_hour = 11\n\n    # Since the flight can't be negative in time and the modulo operation might make it seem so\n    # we have to consider the fact that the flight could have gone into the next day\n    if london_landing_hour < london_takeoff_hour:\n        flight_duration = (24 - london_takeoff_hour) + london_landing_hour\n    else:\n        # Calculate the flight duration\n        flight_duration = london_landing_hour - london_takeoff_hour\n\n    return flight_duration\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_last_day = 80\n    increase_per_day = 5\n    pages_first_day = 20\n    days = 1\n    \n    while total_pages_last_day > pages_first_day + days * increase_per_day:\n        total_pages_last_day -= pages_first_day + days * increase_per_day\n        days += 1\n\n    total_pages = (days * (2 * pages_first_day + (days - 1) * increase_per_day)) // 2 + total_pages_last_day\n    \n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds_kg = 4/9\n    cashew_kg = 1/3\n    difference = almonds_kg - cashew_kg\n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    correct_product = quotient * divisor\n    total = correct_product + remainder\n\n    is_correct = (total == 22)\n\n    return (not is_correct, total)  # Return a tuple where the first value indicates if Johnny's answer is incorrect and the second value is the correct total.\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    # Initialize sum\n    total = 0\n    # Initialize sign\n    sign = 1\n    # Loop from 54 to 2 with a step of -2\n    for i in range(54, 1, -2):\n        total += sign * i\n        # Switch sign\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # The smallest multiple of 5\n    second_digit = 1  # The smallest odd number among the natural numbers\n    third_digit = 9  # The largest single digit odd number\n    fourth_digit = 0  # The smallest even number\n    fifth_digit = 8  # The largest single digit that is a multiple of 2\n    sixth_digit = 3  # The smallest odd number greater than 1 in nature\n    # For the seventh digit, the number is a multiple of both 2 and 5, so it must end in 0\n    seventh_digit = 0  \n\n    # To obtain the phone number in string format, concatenate each digit after converting them to strings\n    phone_number = str(first_digit) + str(second_digit) + str(third_digit) + \\\n                   str(fourth_digit) + str(fifth_digit) + str(sixth_digit) + str(seventh_digit)\n\n    # Convert the string phone number to an integer\n    ans = int(phone_number)\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:  # check if the first digit of any number is not 0\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n\n    for n in range(1, 11):\n        sequence.extend([n] * n)\n\n    median_position = len(sequence) // 2\n    \n    if len(sequence) % 2 == 0:\n        median = (sequence[median_position - 1] + sequence[median_position]) / 2\n    else:\n        median = sequence[median_position]\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length_cut = symbols('length_cut')\n    \n    # Equation representing the relationship after cutting the ropes\n    equation = Eq(3 * (29 - length_cut), 65 - length_cut)\n    \n    # Solving the equation to find the length that has been cut\n    length_cut_solution = solve(equation, length_cut)\n    \n    return length_cut_solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n    expected_5_rolls = total_rolls * probability_of_five\n    return expected_5_rolls\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return 12 / 18 * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    # A:B = 2:3\n    equation1 = Eq(A/B, 2/3)\n    # B:C = 6:5\n    equation2 = Eq(B/C, 6/5)\n    # (A + B + C)/3 = 45\n    equation3 = Eq((A + B + C)/3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for x, which represents the cost of one dress\n    x = symbols('x')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(6 * 7 * x + 3 * 35, 441)\n    \n    # Solve the equation for x\n    dress_cost = solve(equation, x)\n    \n    # Return the cost of one dress\n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits = [1, 3, 5, 7, 9]  # List of odd digits\n    # For a 3-digit number with all odd digits, we have 5 choices for each digit\n    ans = len(odd_digits) * len(odd_digits) * len(odd_digits)\n    return ans\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011  # Each fraction in the pattern has a numerator of 1, so the pattern tells us that the denominator is always one less than the number of fractions.\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1 / 12\n    both_rate = 1 / 8\n    lazy = symbols('lazy')\n\n    lazy_rate = 1 / lazy\n\n    equation = Eq((energetic_rate + lazy_rate), both_rate)\n\n    solutions = solve(equation, lazy)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let's denote the original length as L and the width as W.\n    # The perimeter of a rectangle is given by P = 2*L + 2*W\n    # If the length is increased by 12 cm, the new length is L + 12\n    # The new perimeter is given by P_new = 2*(L + 12) + 2*W = 38\n\n    # We rearrange the equation to solve for the original length L\n    # 38 = 2*L + 24 + 2*W\n    # 14 = 2*L + 2*W\n    # 7 = L + W\n\n    # Since we're looking for the perimeter of the original rectangle,\n    # we want to solve for 2*L + 2*W, but we know that L + W = 7\n    # Hence, the perimeter of the original rectangle is 2*(L + W) = 2*7 = 14 cm\n\n    original_perimeter = 2*7\n\n    return original_perimeter\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    equation1 = Eq(jamie_anne, natasha + 18)\n    equation2 = Eq(jamie_anne / natasha, 5 / 3)\n\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    # Since b is on both sides of the equation, it cancels out. So we just need to compare ab + ba to aab.\n    # This gives us the equation 10a + b + 10b + a = 100a + 10a + b.\n    # Simplifying it gives us 11(a + b) = 110a + b. After cancelling out b, we get 11a = 110a, where a must be 0\n    # But a cannot be zero as it is the hundreds digit in aab, hence we must look for another solution\n    \n    for a in range(1, 10):  # a cannot be 0 because we're dealing with a 3-digit number 'aab'\n        for b in range(0, 10):\n            if 10*a + b + 10*b + a == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    mina_coins_left = solutions[mina] - 12\n\n    return mina_coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remainder_after_monday\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remainder_after_tuesday / bag_weight\n  \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    num_students = 123\n    total_flour = flour_per_student * num_students\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count_7 = 0\n    for i in range(1, 121):\n        count_7 += str(i).count('7')\n    return count_7\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles 11 - 1 = 10 lamp post intervals in 50 seconds.\n    # Therefore, Uncle Sam's speed is 10 lamp post intervals in 50 seconds.\n    speed = 10 / 50  # lamp post intervals per second\n\n    # After 80 seconds, Uncle Sam will have cycled past:\n    lamp_posts_cycled = speed * 80  # in terms of lamp post intervals\n\n    # However, we are interested in how many lamp posts, not intervals; thus we need to add 1:\n    lamp_posts_cycled += 1  # to account for the initial lamp post\n\n    return int(lamp_posts_cycled)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # There are 6 flowers on each of the 4 sides\n    flowers_per_side = 6\n    total_sides = 4\n    \n    # However, since a flower is embroidered at each of the four corners,\n    # these corner flowers are being counted twice (once for each side that meets at the corner).\n    # So we need to subtract the 4 corner flowers that have been counted twice.\n    total_flowers = (flowers_per_side * total_sides) - (4 * (2 - 1))\n    \n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    total_items_solution = solve(equation, total_items)\n\n    lemons_count = total_items_solution[0] - apples.subs(total_items, total_items_solution[0]) - bananas.subs(total_items, total_items_solution[0])\n\n    return lemons_count\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Factor sum for the digit in the ones place\n    ones_place_factor_sum = sum(set(i for j in range(1, 5) for i in [j, 4//j] if 4 % j == 0))\n    \n    # The digit in the hundreds place is 800, so it's actually 8\n    hundreds_digit = 8\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_digit = hundreds_digit + 1\n    \n    # The digit in the tens place is the difference between the digit in the hundreds place and the digit in the ones place\n    tens_digit = hundreds_digit - ones_place_factor_sum\n    \n    # Construct the number\n    number = 40000 + (thousands_digit * 1000) + (hundreds_digit * 100) + (tens_digit * 10) + ones_place_factor_sum\n    \n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n    football_field_length = basketball_court_length + additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount_percentage = (original_price - 67.50) / original_price * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    min_value = Fraction(3, 10)\n    max_value = Fraction(5, 16)\n\n    s = 1\n    while True:\n        r_min = s * min_value\n        r_max = s * max_value\n        if r_min < int(r_min) + 1 < r_max:\n            return s\n        s += 1\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    total = total_two_days / (5/6)\n    return int(total)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Maximum capacity for the bus when only children are on board.\n    max_children = 40\n    # Maximum capacity for the bus when only adults are on board.\n    max_adults = 24\n    # The number of children already on the bus.\n    children_on_bus = 15\n    \n    # Calculate the remaining capacity for children.\n    remaining_capacity_for_children = max_children - children_on_bus\n    \n    # Equivalent number of adults that can replace the remaining children.\n    # Using cross multiplication: 40 children = 24 adults\n    equivalent_adults_for_remaining_children = (remaining_capacity_for_children * max_adults) / max_children\n    \n    # Calculate the greatest number of adults by taking the floor of the equivalent adults as we can't have part of an adult on the bus.\n    greatest_number_of_adults = int(equivalent_adults_for_remaining_children)\n    \n    return greatest_number_of_adults\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # Given number is 28\n    given_number = 28\n    # Calculate the greatest common divisor of the number and its square\n    # to find the smallest multiplier to make it a perfect square\n    smallest_multiplier = given_number // gcd(given_number, given_number**2)\n    \n    return smallest_multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3\n    time_available = 12\n    pancakes_per_time = 2 / time_for_2_pancakes\n\n    total_pancakes = pancakes_per_time * time_available\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n    min_students_same_size = (num_students // num_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    amount_spent_dvd = 740\n    amount_left_after_dvd = salary - amount_spent_dvd\n    amount_spent_tv = (3/4) * amount_left_after_dvd\n    amount_left = (1/5) * salary\n\n    equation = Eq(amount_spent_dvd + amount_spent_tv + amount_left, salary)\n\n    ans = solve(equation, salary)\n\n    return ans[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    # Let Russell's current age be r\n    r = symbols('r')\n\n    # Create the equation according to the problem\n    equation = Eq(r + 32, 4 * (r - 16))\n\n    # Solve the equation\n    solutions = solve(equation, r)\n\n    # Return Russell's current age\n    return solutions[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total_value = 120\n    \n    ans = (percentage / 100) * total_value\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    num1 = 6\n    num2 = 19\n    # The numbers are directly opposite in a circle, so their positions must be half the circle apart.\n    people = (num2 - num1) * 2\n    return people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Looping over the possible values for A and B, since C is dependent on A\n    for A in range(10):\n        for B in range(10):\n            # Constructing Pip's number with the ABCA pattern\n            pips_number = 1000 * A + 100 * B + 10 * A + A\n            # Constructing Bud's number by reversing the units and tens digits\n            buds_number = 1000 * A + 100 * A + 10 * B + A\n            # Checking if the sum of Pip's and Bud's numbers equals 5510\n            if pips_number + buds_number == 5510:\n                return pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Let the initial number of students in Class 6A be x.\n    # Then the initial number of students in Class 6B is (9/4) * x.\n    # After reshuffling, 3 students moved from Class 6A to Class 6B, and 18 students moved from Class 6B to Class 6A.\n    # The final number of students in both classes is equal, let's call this equal number y.\n    # So the equations will be:\n    # For Class 6A: x - 3 + 18 = y\n    # For Class 6B: (9/4) * x + 3 - 18 = y\n    # We set the two y's equal to each other since the final number is equal for both classes:\n    # x - 3 + 18 = (9/4)x + 3 - 18\n    # Simplifying the equation:\n    # x + 15 = (9/4)x - 15\n    # Bringing the terms involving x to one side and constants to the other:\n    # x - (9/4)x = -15 - 15\n    # Simplifying further:\n    # x(1 - (9/4)) = -30\n    # x(-5/4) = -30\n    # Then we can solve for x:\n    # x = (-30) / (-5/4)\n    # x = (-30) * (-4/5)\n    # x = 30 * 4/5\n    # So, the initial number of students in Class 6A was:\n    x = 30 * 4 / 5\n    return int(x)\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make one cut.\n    # To split a rod into 5 pieces, we need 4 cuts.\n    # Therefore:\n\n    num_cuts_needed = 5 - 1\n    time_per_cut = 2\n\n    total_time = num_cuts_needed * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # He walks from the first floor to the fourth floor in 6 minutes\n    # That's a span of 3 floors (from 1st to 4th is 3 intervals)\n    time_for_3_floors = 6\n\n    # To walk from the first floor to the tenth floor is a span of 9 floors\n    # If 3 floors take 6 minutes, 9 floors would take 3 times longer\n    time_for_9_floors = time_for_3_floors * (9 / 3)\n\n    # Return the time for 9 floors (from 1st to 10th)\n    return time_for_9_floors\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    original_biscuits = 100\n    original_chocolate = 40\n    available_biscuits = 75\n\n    chocolate_needed = (available_biscuits * original_chocolate) / original_biscuits\n    \n    return chocolate_needed\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n\n    # Calculate the number of shelves with spelling books\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n\n    # Calculate the number of shelves with math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n\n    # Since each shelf with math books contains 4 math books\n    math_books_per_shelf = 4\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return int(total_math_books)\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earning = 90\n    num_days = 7  # From Monday to Sunday\n\n    total_earnings = average_daily_earning * num_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n\n    return combinations\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # The total number of students in the first game\n    total_students_first_game = 16 * 2\n    # The total number of students in the second game\n    total_students_second_game = 22 * 2\n\n    # The number of new students is the difference between the two games' students\n    new_students = total_students_second_game - total_students_first_game\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Convert distances to time by dividing each by the speed\n    time_first_part = 280 / 7\n    time_middle_part = 400 / 5\n    time_last_part = (800 - 280 - 400) / 8\n\n    # Add up all the times to get the total time\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - 9*6 - 7*6\n    return ans\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of Anna, Betsy, and Charlene's marbles be a, b, and c.\n    a, b, c = symbols('a b c')\n\n    # Setup the equations based on the problem statement\n    # After transactions:\n    # Anna's marbles: a + 8\n    # Betsy's marbles: b + 15 - 8 = b + 7\n    # Charlene's marbles: c - 15\n    # Total marbles = a + b + c = 168\n    # Final ratio of marbles: (a + 8) : (b + 7) : (c - 15) = 2 : 5 : 7\n\n    # Setup the equations\n    equation1 = Eq(a + b + c, 168)\n    equation2 = Eq((a + 8) * 5, (b + 7) * 2)\n    equation3 = Eq((a + 8) * 7, (c - 15) * 2)\n\n    # Use sympy.solve to solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards is sum of yellow, red, and green cards\n    # Calculate permutations with repetitions\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    # Let the original amount of lollipops be 5x and gumdrops be 7x\n    # After adding 120 pieces of each, the ratio becomes 4:5,\n    # So we have (5x + 120) / (7x + 120) = 4/5\n    # Cross multiply to find the value of x\n    # 5 * (5x + 120) = 4 * (7x + 120)\n    # 25x + 600 = 28x + 480\n    # Solving for x gives us x = 40\n    \n    x = 40\n    # Original amounts are 5x and 7x\n    original_lollipops = 5 * x\n    original_gumdrops = 7 * x\n    # Total original amounts\n    total_original = original_lollipops + original_gumdrops\n    \n    # New amounts are original amounts plus 120\n    new_lollipops = original_lollipops + 120\n    new_gumdrops = original_gumdrops + 120\n    # Total new amounts\n    total_new = new_lollipops + new_gumdrops\n    \n    return total_new\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    diff = 3\n    harry_flowers = luna_flowers - diff\n    return harry_flowers\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    digits = 0\n    for i in range(1, 268 + 1):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = 32 / 2  # since 32 / n = n / 2, we can deduce 32 = n * 2 or n = 32 / 2\n    return n\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    width = 136  # Convert meters to centimeters to avoid floating point arithmetic\n    height = 80  # Convert meters to centimeters\n\n    square_side = gcd(width, height)  # Find the largest square side length\n    num_squares = (width // square_side) * (height // square_side)  # Calculate the number of squares\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    # 3-digit odd numbers have the last digit as an odd number\n    # We have two odd numbers: 5 and 7, which can be used for the last digit\n    odd_digit_options = 2\n    \n    # For the first and second digits, we can use any of the three numbers: 4, 5, or 7\n    # Since we're allowed to repeat numbers, we have 3 options for each of the first two digits\n    first_digit_options = 3  # Cannot be 0, hence only 4, 5, and 7 are valid (3 options)\n    second_digit_options = 3\n    \n    # According to the multiplication rule of counting, the total number of ways\n    # we can form the three-digit odd number is the product of number options for each place\n    total_ways = first_digit_options * second_digit_options * odd_digit_options\n\n    return total_ways\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_5 = (201 - 1) // 5  # Numbers divisible by 5\n    count_7 = (201 - 1) // 7  # Numbers divisible by 7\n    count_5_and_7 = (201 - 1) // (5 * 7)  # Numbers divisible by both 5 and 7\n\n    # Applying the inclusion-exclusion principle\n    ans = count_5 + count_7 - count_5_and_7\n\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one durian, one pineapple, and one watermelon\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Eq1: The cost equation according to Chris's purchase\n    equation1 = Eq(1 * durian + 2 * pineapple + 3 * watermelon, 440)\n\n    # Eq2: The cost equation according to Dylan's purchase\n    equation2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations for the prices of durian, pineapple, and watermelon\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n', integer=True, positive=True)\n    # Calculate the total number of games played in a season with n teams\n    # Each team plays each other team twice\n    total_games = Eq(n * (n - 1), 60)  # 30 matches, each match played twice\n\n    solution = solve(total_games, n)\n\n    # Since the problem specifies a league, we take the positive solution\n    return max(solution)\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    # The pattern is adding 2 to the previous number and\n    # alternating between subtraction and addition.\n    # Calculate the sum of the series using formula of\n    # sum of arithmetic progression: n/2 * (first_term + last_term)\n    # For the positive terms (100, 98, ..., 2), which is an arithmetic progression:\n    n_positive = 50  # There are 50 even numbers from 2 to 100\n    first_positive_term = 2\n    last_positive_term = 100\n    sum_positive_terms = n_positive / 2 * (first_positive_term + last_positive_term)\n\n    # For the negative terms (-99, -97, ..., -1), which is also an arithmetic progression:\n    n_negative = 50  # There are 50 odd numbers from 1 to 99\n    first_negative_term = -99\n    last_negative_term = -1\n    sum_negative_terms = n_negative / 2 * (first_negative_term + last_negative_term)\n\n    # The final answer is the sum of the positive terms plus the sum of the negative terms\n    ans = sum_positive_terms + sum_negative_terms\n    return int(ans)\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 1350): # The original number will have '0' as the last digit, so it should be less than 1350\n        if i * 10 == i + 135: # 'i' is the value without the zero, 'i*10' is the value it should have been\n            return i * 10\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    result = (49 * 57) + 7\n    return result\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise\n    # 80% chose Grade A math, 35% chose Grade B math\n    # 10% chose neither. Therefore, 90% chose at least one subject\n    # We know that A union B = A + B - A intersect B\n    # 80% + 35% - both = 90% -> both = 25%\n    # We are given that both is 75 students, which represents 25% of the total students\n    # Therefore, x * 25% = 75\n    # So x = 75 / 25% = 75 / 0.25 = 300 students in total\n\n    total_students_chose_both = 75\n    percentage_chose_both = 0.25\n\n    total_students = total_students_chose_both / percentage_chose_both\n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2 * 10\n    hundreds = 3 * 100\n\n    number = hundreds + tens + ones\n    \n    return number\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    # Since the boat can only carry 5 people, and there's no boatman, \n    # every trip across will need at least 1 student to steer and bring the boat back.\n    # For 37 students to cross, we will need a multiple of 4 (since one student is needed to steer back).\n    \n    # The trips across the river will carry as many as possible each time (5 people),\n    # while the trips back will carry only 1 (the student who returns the boat).\n    \n    students_to_cross = 37\n    boat_capacity = 5\n    trip_across = 0  # We start with 0 trips\n\n    while students_to_cross > 0:\n        # A trip across the river, 5 go over but 1 needs to return\n        trip_across += 1\n        if students_to_cross <= boat_capacity:\n            # If the remaining students can all fit in a single trip, we don't need to come back\n            return trip_across * 2 - 1\n        else:\n            # Since 1 student returns with the boat, subtract 4 from the total students remaining\n            students_to_cross -= (boat_capacity - 1)\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    num = factorial(100)\n    denom = factorial(99) + factorial(98)\n\n    ans = num / denom\n\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom math import prod\n\ndef number_of_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\ndef solution():\n    # All the possible combinations of picking 9 numbers from 1 to 13\n    combos = combinations(range(1, 14), 9)\n    possible_answers = []\n\n    for combo in combos:\n        # Map each number to its number of factors\n        factor_counts = {num: number_of_factors(num) for num in combo}\n\n        # Find the two numbers with unique number of factors\n        unique_factors = {v: k for k, v in factor_counts.items() if list(factor_counts.values()).count(v) == 1}\n        \n        # If there are two and only two numbers with a unique factor count, proceed\n        if len(unique_factors) == 2:\n            # Get the numbers with unique factor counts\n            unique_numbers = list(unique_factors.values())\n            \n            # Check if the rest of the combo satisfies the conditions stated by Alice and May\n            for i in range(9):\n                for j in range(i+1, 9):\n                    # Conditions given by Alice and May\n                    if unique_numbers[i] % 2 == 1 and unique_numbers[j] == unique_numbers[i] - 2:\n                        # Form the set of remaining numbers not in the current combination\n                        remaining = set(range(1, 14)) - set(combo)\n                        # Store each valid answer\n                        possible_answers.append(prod(remaining))\n    \n    # Assuming the problem has a unique solution, return the single product\n    return possible_answers[0] if len(possible_answers) == 1 else None\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 4, 6, 9]\n    all_permutations = list(permutations(digits))\n    sum_of_numbers = 0\n    \n    for perm in all_permutations:\n        number = sum(digit * (10 ** i) for i, digit in enumerate(reversed(perm)))\n        sum_of_numbers += number\n        \n    average = sum_of_numbers / len(all_permutations)\n    \n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the original number of boys, which is also the original number of girls.\n    b, g = symbols('b g')\n    equation = Eq((b - 60) * 2, g - 12)\n    \n    # Both b and g are equal at first\n    g = b\n    \n    # Substitute g with b in the equation as they are equal\n    modified_equation = equation.subs({g: b})\n    \n    # Solve for the number of boys\n    solutions = solve(modified_equation, b)\n    \n    # Return the number of boys at the gathering at first\n    return solutions[0]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for ones in range(10):\n        for tens in range(10):\n            if ones != tens and ones + tens == 15:\n                if ones % 2 == 0:  # Ensuring the number is even\n                    return 900 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # van speed in km/h\n    speed_car = 120  # car speed in km/h\n\n    # Van's head start distance in km after 3 hours\n    head_start = speed_van * 3\n\n    # Relative speed between car and van in km/h\n    relative_speed = speed_car - speed_van\n\n    # Time needed for the car to catch up with the van in hours\n    time_to_catch_up = head_start / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = 4 + 1  # Four hats plus the option of not taking a hat\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    return hats * shirts * pants * skirt\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert 0.(01) to a fraction\n    numerator = 1\n    denominator = 99\n    # Calculate the square of the fraction\n    numerator_squared = numerator ** 2\n    denominator_squared = denominator ** 2\n    # Convert the fraction back to recurring decimal to find the length of repetend\n    ans = len(str(denominator_squared))\n    return ans\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    pages_per_minute_a = 300 / 12\n    pages_per_minute_b = 300 / 10\n    total_pages_per_minute = pages_per_minute_a + pages_per_minute_b\n    pages_in_half_hour = total_pages_per_minute * 30  # 30 minutes in 1/2 hour\n    \n    return pages_in_half_hour\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # total_items represents the total number of items Rena bought\n    total_items = symbols('total_items')\n\n    # Creating equations based on the problem statement\n    apple_fraction = 2/3\n    banana_fraction = 1/9\n    lemon_fraction = 1 - (apple_fraction + banana_fraction)  # Since apples + bananas + lemons = 1 (the whole)\n\n    # Equation: 2/3 of total_items - 1 * lemon count (total_items * lemon_fraction) = 12\n    equation = Eq(apple_fraction * total_items - lemon_fraction * total_items, 12)\n\n    # Solving the equation for total_items\n    total_items_solution = solve(equation, total_items)[0]\n\n    # Calculate the number of lemons Rena bought\n    num_lemons = total_items_solution * lemon_fraction\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the variables for the number of durian, chocolate, and strawberry puffs sold\n    d, c, s = symbols('d c s')\n\n    # we have three equations based on the problem statement\n    # 1. the ratio of the types of puffs sold\n    ratio_equation = Eq(d/s, 3/2)\n\n    # 2. the ratio of the types of puffs sold\n    ratio_equation2 = Eq(d/c, 3/4)\n    \n    # 3. the total money collected\n    total_money_equation = Eq(5*d + 3*c + 4*s, 560)\n\n    # solve the system of equations for the number of each puff sold\n    solutions = solve((ratio_equation, ratio_equation2, total_money_equation), (d, c, s))\n\n    # amount of money collected from durian puffs\n    money_from_durian_puffs = 5 * solutions[d]\n\n    return money_from_durian_puffs\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(1, 19), 4):\n        A, B, C, D = perm\n        Zachary, Yvonne, Xavier, Waylon = perm\n        \n        if not (A > C and A < D): continue\n        if not (B < Xavier): continue\n        if not (D == 5 * Yvonne): continue\n        if not (Xavier - (Zachary + 2) == (Zachary + 2) - Waylon): continue\n        if not (Zachary == Yvonne + Xavier): continue\n        \n        return A\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # There will be only 8 small cubes that have exactly three faces painted\n    # They are the cubes at the corners of the cuboid\n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):  # Tens digit must be from 1 to 9\n        for ones in range(10):  # Ones digit can be from 0 to 9\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n\n            if swapped_number == ((original_number // 3) + 1):\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    interest_first_period = 1.06 ** 3\n    interest_second_period = 1.08 ** 2\n    \n    amount_after_first_period = initial_investment * interest_first_period\n    final_amount = amount_after_first_period * interest_second_period\n    \n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raisin_roll, donut = symbols('raisin_roll donut')\n    \n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students from each school\n    school_a = 24\n    school_b = 36\n    school_c = 42\n\n    # Compute the greatest common divisor (gcd) of the three numbers\n    ans = gcd(gcd(school_a, school_b), school_c)\n\n    return ans\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count_3 = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            count_3 += date_str.count(\"3\")\n    return count_3\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let the first term be a and the common difference be d\n    n1, sum1 = 9, 99\n    n2, sum2 = 27, 540\n    n3 = 16\n    \n    # Using the formula for the sum of the first n terms of an arithmetic sequence\n    # Sum_n = n/2 * (2a + (n-1)d)\n    # We have two equations:\n    # (1) sum1 = n1/2 * (2a + (n1-1)d)\n    # (2) sum2 = n2/2 * (2a + (n2-1)d)\n    # We need to find the value of a and d to compute the sum of the first 16 terms\n    \n    # From the first equation (1)\n    # 99 = 9/2 * (2a + (9-1)d)\n    # From the second equation (2)\n    # 540 = 27/2 * (2a + (27-1)d)\n    \n    # Now we can solve these two equations to find a and d\n    from sympy import symbols, Eq, solve\n    a, d = symbols('a d')\n    equation1 = Eq(9/2 * (2*a + (9-1) * d), 99)\n    equation2 = Eq(27/2 * (2*a + (27-1) * d), 540)\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Get a and d from solutions\n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    # Now we calculate the sum of the first 16 terms using the value of a and d found\n    sum3 = n3/2 * (2*a_val + (n3-1) * d_val)\n    \n    return sum3\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(1, 10):\n            for units_digit in range(1, 10):\n                if hundreds_digit % tens_digit == 0 and hundreds_digit % units_digit == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = (12 * (12 + 1)) // 2\n    if total_numbers % 2 == 1:\n        return 12\n    else:\n        return 11.5\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n\n    digits = [4, 5, 8]\n    perm = permutations(digits)\n\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for number in range(7, 41):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # In each group of 4 teams, each team plays 3 matches (against the other 3 teams)\n    # There are 8 groups in total\n    group_games_per_group = 4 * 3 // 2  # Each match is counted twice when iterating team pairs\n    group_stage_games = group_games_per_group * 8\n\n    # Calculate the number of games in the knockout round\n    # Round of 16, quarter-finals, semi-finals, 3rd place match, and final\n    knockout_games = 16 // 2 + 8 // 2 + 4 // 2 + 2 // 2 + 1  # Each match has 2 teams\n\n    # Total number of games in the World Cup\n    total_games = group_stage_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n    \n    red_flash_rate = 4  # red light flashes per minute\n    green_flash_rate = 6  # green light flashes per minute\n    \n    # Calculate the least common multiple of the flash rates\n    flash_lcm = lcm(red_flash_rate, green_flash_rate)\n    \n    # Calculate how many times they flash together in a minute\n    flashes_together_per_minute = flash_lcm // red_flash_rate\n    \n    # Calculate the total number of flashes together in an hour\n    total_flashes_together = flashes_together_per_minute * 60\n    \n    return total_flashes_together\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let the number you are thinking of be x\n    # The operation described is 3x + 1 = 22\n    # To find x, we perform the inverse operations\n\n    result = 22 - 1  # Subtracting 1 from the answer 22\n    number = result / 3  # Dividing the result by 3 to get the original number\n\n    return number\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.4 * total_paintings)\n    still_lifes = total_paintings - landscapes\n    \n    french_landscapes = 25\n    total_french = 40\n    non_french_landscapes = landscapes - french_landscapes\n    non_french_still_lifes = total_french - french_landscapes\n    \n    still_lifes_non_french = still_lifes - non_french_still_lifes\n    \n    return still_lifes_non_french\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # ml of rose syrup + ml of water\n    max_volume_per_glass = total_volume // 9  # Greatest integer volume per glass\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_in_first_mixture = 100 * 0.5\n    rice_in_second_mixture = 400 * 0.8\n    total_rice = rice_in_first_mixture + rice_in_second_mixture\n    concentration_of_rice = (total_rice / total_weight) * 100\n    return concentration_of_rice\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    s = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(s)[-5:]\n    ans = sum(int(digit) for digit in last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        str_i = str(i)\n        new_i = int(str_i[1:] + str_i[0])\n        if new_i - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    sum_of_ages_target = 48\n    \n    years_later = (sum_of_ages_target - (oliver_current_age + lin_current_age)) // 2\n\n    return years_later\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda num: abs(num - 1))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    # Current ages\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    \n    # Ages 2 years ago\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    \n    # Difference in their ages 2 years ago\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    num = 35\n    while True:\n        # Convert number to string to check last two digits and sum of digits\n        str_num = str(num)\n        sum_of_digits = sum(int(digit) for digit in str_num)  # Sum of all digits\n        if str_num.endswith('35') and sum_of_digits == 35:   # Check conditions\n            return num\n        num += 35  # Increase by the multiple of 35\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n\n    initial_amount = 8 * y\n    spent_on_watch = 4 * y\n    spent_on_handbag = 20\n    remaining_amount = initial_amount - (spent_on_watch + spent_on_handbag)\n\n    amount_per_child = y - 5\n\n    equation = Eq(remaining_amount, 2 * amount_per_child)\n\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    years = 99  # Number of years from 1901 to 2000 (inclusive)\n    leap_years = len([year for year in range(1901, 2001) if (year % 4 == 0)])\n    \n    normal_years = years - leap_years\n    days_in_leap_years = leap_years * 366\n    days_in_normal_years = normal_years * 365\n    total_days = days_in_leap_years + days_in_normal_years\n\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit = 10\n    spend = 8\n\n    deposit_days = (total_days + 1) // 2\n    spend_days = total_days // 2\n\n    total_deposits = deposit_days * deposit\n    total_spent = spend_days * spend\n\n    final_amount = initial_amount + total_deposits - total_spent\n\n    return final_amount\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15\n    days_for_20_horses = total_hay / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count_total = 0\n    count_div_3 = 0\n    count_div_7 = 0\n    count_div_both = 0\n    \n    for num in range(1, 100):\n        if num % 3 == 0:\n            count_div_3 += 1\n        if num % 7 == 0:\n            count_div_7 += 1\n        if num % 3 == 0 and num % 7 == 0:\n            count_div_both += 1\n    \n    count_total = 99  # Numbers from 1 to 99 (less than 100)\n    # Apply Inclusion-Exclusion Principle\n    ans = count_total - count_div_3 - count_div_7 + count_div_both\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12  # Number of terms (hours)\n    a1 = 1  # First term\n    an = n  # Last term\n\n    # Sum of the first n terms of an arithmetic sequence: S_n = n/2 * (a1 + an)\n    strikes = n / 2 * (a1 + an)\n\n    return int(strikes)\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # nina has more buttons than james\n    equation1 = Eq(james + nina, 22)\n    # when nina gives james 4 buttons, they have the same amount\n    equation2 = Eq(james + 4, nina - 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    \n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    score_for_correct = 5\n    deduction_for_wrong = 2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * score_for_correct - wrong * deduction_for_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n\n    adults = (total_people * ratio_adults) / ratio_sum\n\n    return adults\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # m/s\n    angle = 37  # degrees\n    g = 9.81  # m/s^2, acceleration due to gravity\n\n    # Converting angle to radians for calculation\n    angle_rad = math.radians(angle)\n\n    # Using formula: h = v^2 * sin^2(angle) / (2 * g)\n    h = (initial_speed**2) * (math.sin(angle_rad)**2) / (2 * g)\n\n    # Using trigonometry to find the distance along the ramp: d = h / sin(angle)\n    d = h / math.sin(angle_rad)\n\n    return (h, d)\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    num_children = 9\n    first_receiver = 3\n\n    last_receiver = (first_receiver + total_candies - 1) % num_children\n    # If the result is 0, it means the last candy goes to the 9th child\n    if last_receiver == 0:\n        last_receiver = num_children\n\n    return last_receiver\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    coin_weight = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    ten_pence_coins = total_value / 10  # number of ten-pence coins\n\n    total_weight = coin_weight * ten_pence_coins  # total weight of all coins\n\n    return total_weight\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Total number of balls for each color\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n\n    # To ensure getting 2 groups of 4 balls of the same colour,\n    # take all balls except for one less than two groups i.e. 4 + 3 because once we pick the final 4 of any color,\n    # we would have two groups of 4 balls of the same color\n    # Taking all blue and orange would still ensure us to have at least 4 of some color\n    # Then Sheilah must take at least one yellow ball.\n\n    # So Sheila needs to take all the yellow balls and all but one of the blue and orange balls\n    balls_needed = yellow_balls + (blue_balls + orange_balls - 1)\n\n    return balls_needed\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n\n    # In each match, 3 players are knocked out and 1 remains\n    # Therefore, the number of matches required is the number of times we can remove 3 players\n    # Since we want a single overall winner, we need to count the number of matches until 63 players are knocked out\n    matches_required = (players - 1) // (players_per_match - 1)\n  \n    return matches_required\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    # Given odd numbers are in arithmetic progression, we can calculate the sum by using the formula for the sum of an arithmetic series\n    # sum = n/2 * (first_term + last_term), where n is the number of terms\n    first_term = 1\n    last_term = 99\n    n = (last_term - first_term) // 2 + 1 # (99 - 1)/2 + 1 to find number of terms\n    sum_of_numbers = n/2 * (first_term + last_term) # applying the formula for the sum of an arithmetic series\n    return int(sum_of_numbers)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Starting the search\n    for num in range(1000, 10000):  # Alice's house number is a 4-digit number\n        first_digit = num // 1000\n        remaining_number = num % 1000\n        new_num = remaining_number * 10 + first_digit\n        if new_num == num + 4707:\n            return num\n    return None\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    bags_of_flour = 4\n\n    flour_weight = (total_weight - cheese_weight) / bags_of_flour\n\n    return flour_weight\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    from sympy import symbols, solve, Eq\n    \n    # Let a be the first term and d be the common difference of the arithmetic sequence\n    a, d = symbols('a d')\n    \n    # The sum of the first n terms of an arithmetic sequence is given by: n/2 * (2*a + (n-1)*d)\n    # Form the equations for the sum of the first 9 terms and the sum of the first 23 terms\n    sum_9_terms_eq = Eq((9/2) * (2*a + (9-1)*d), 72)\n    sum_23_terms_eq = Eq((23/2) * (2*a + (23-1)*d), 736)\n    \n    # Solve the equations for a and d\n    solutions = solve((sum_9_terms_eq, sum_23_terms_eq), (a, d))\n    \n    # With the solved values of a and d, calculate the sum of the first 16 terms\n    a_value = solutions[a]\n    d_value = solutions[d]\n    \n    sum_16_terms = (16/2) * (2*a_value + (16-1)*d_value)\n    \n    return sum_16_terms\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assuming we need to find out how many CDs Richard could buy in St Petersburg\n    # with the same amount of money and that CD prices in St Petersburg are given.\n    # Since the price is not specified, the problem is unsolvable\n    # as it is; assuming a price is needed for solving this problem.\n    # We will pretend the price in St Petersburg is £7 for the sake of demonstration.\n\n    # Price of CD in England\n    price_in_england = 14\n    # Hypothetical price of CD in St Petersburg\n    price_in_st_petersburg = 7\n\n    # Number of CDs Richard could buy in St Petersburg\n    cds_in_st_petersburg = price_in_england // price_in_st_petersburg\n\n    return cds_in_st_petersburg\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n    \n    def iscube(n):\n        return round(n ** (1/3)) ** 3 == n\n    \n    for age in [28, 39, 52, 84]:\n        if isprime(age + 1) and iscube(age + 12):\n            for year in primerange(1, age):\n                if (age - 3) == year**2:\n                    return age\n    return None\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    product = 168 * 91\n    return product\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To guarantee getting 2 chips of different colors, he needs to consider the worst case.\n    # If he takes one from each color, he will definitely have two different colors.\n    # Therefore, at most he might have to take 1 red, 1 yellow, and 1 brown.\n    # However, since he only needs 2, the worst case would be taking all 3 of one color and 1 of another.\n    # So he would need to take the max number of one color plus 1 to ensure 2 different colors.\n\n    # Number of M&Ms of each color\n    red = 3\n    yellow = 4\n    brown = 5\n\n    # The worst case is taking all of one color and one more, to guarantee two different colors\n    ans = max(red, yellow, brown) + 1\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # From the problem we can deduce the relations between their speeds\n    # Let's assume Andrew makes A steps, Bernice makes B steps and Cassandra makes C steps in the same time\n    # Andrew to Bernice ratio = 5:3, therefore A:B = 5:3\n    # Bernice to Cassandra ratio = 6:10, therefore B:C = 6:10\n\n    # Calculate Andrew to Cassandra ratio by combining the two ratios (A:B and B:C)\n    # A:C = (A:B) * (B:C) = (5:3) * (6:10)\n    # A:C = (5*6):(3*10)\n    # A:C = 30:30\n    # A:C = 1:1\n    # This means Andrew and Cassandra climb at the same speed\n\n    # Since their speeds are the same, when Cassandra reached level 19, Andrew also reached level 19\n    return 19\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    for x in range(1000):  # Arbitrary range, 1000 was chosen to be safely higher than expected x value\n        if new_operation(2, new_operation(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = '2345'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_patterns = 43 // len(pattern)\n    remaining_digits = 43 % len(pattern)\n    \n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    number_of_quizzes = 4\n    minutes_per_hour = 60\n\n    total_time_minutes = time_per_quiz_minutes * number_of_quizzes\n    total_time_hours = total_time_minutes / minutes_per_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    km = 4.7\n    cm_per_km = 100000  # There are 100,000 centimeters in a kilometer\n    ans = km * cm_per_km\n    return ans\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandsons_ages) != grandpa:\n        years += 1\n        grandpa += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chair, table = symbols('chair table')\n    equation1 = Eq(table, 3 * chair)\n    equation2 = Eq(4 * table + 9 * chair, 504)\n\n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, (40//5)+1):\n        for ten_p in range(0, (40//10)+1):\n            if (five_p*5 + ten_p*10) == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_driven_before_turning_back = 40 / 60 \n\n    # Distance covered by Samuel before turning back\n    distance_covered_by_samuel = 66 * time_driven_before_turning_back\n\n    # Given that both reached Town Y at the same time\n    # Let's say time taken to reach Town Y by Shafur after Samuel turns back is 't' hours\n    # Then the total time taken by Shafur to reach Town Y is t + (40/60) hours\n    # And the total time taken by Samuel to reach Town Y is t hours (because he turns back immediately after 40 mins)\n\n    # Since both reach at the same time, the distances covered by both would be equal when they reach Town Y\n    # Thus, for Shafur, total distance covered = 54 * (t + 40/60)\n    # For Samuel, total distance covered = (distance covered before turning back) + 66 * t\n\n    # Setting up the equation:\n    # 54 * (t + 40/60) = distance_covered_by_samuel + 66 * t\n    # Distance covered by Samuel before turning back needs to be subtracted back since he turned back to Town X\n\n    # Solving for t\n    t = (distance_covered_by_samuel) / (66 - 54)\n\n    # Using t to find the distance between Town X and Town Y\n    # using either Shafur's or Samuel's travel details. Let's use Shafur's.\n    distance_between_X_and_Y = 54 * (t + time_driven_before_turning_back)\n\n    return distance_between_X_and_Y\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    term = first_term\n    number_of_terms = 0\n    \n    while term > 0:\n        number_of_terms += 1\n        term += common_difference\n        \n    return number_of_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits_product = eval('*'.join(str(number)))\n        if 100 <= digits_product <= 999:\n            return number\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n\n    num_vases = -(-flowers // vase_capacity)\n\n    return num_vases\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first = (38 // 3) + 1 if 38 % 3 else 38 // 3\n    last = 81 // 3\n    ans = last - first + 1\n    return ans\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n\n    num1 = 12\n    num2 = 15\n\n    ans = lcm(num1, num2)\n\n    return ans\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Sum of the sequence from 3 to 10\n    first_part_sum = sum(range(3, 11))\n    # Sum of the sequence from 10 to 3\n    second_part_sum = sum(range(10, 2, -1))\n    # Total sum\n    total_sum = first_part_sum + second_part_sum\n    return total_sum\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Expression part 1: 7 divided by -3.333... is -2.1\n    part1_numerator = 7 / (-10/3)\n    part1_denominator = (-0.027) ** (1/3)\n    # expression part 1 result\n    part1_result = part1_numerator / part1_denominator\n    \n    # Expression part 2: 2^3 divided by 4^2 is 0.5\n    part2_numerator = (2**3) / (4**2)\n    part2_denominator = 0.125 * (1.8 - (0.2 * 7))\n    # expression part 2 result\n    part2_result = part2_numerator / part2_denominator\n\n    # Expression part 3: 0.1 divided by repeating decimal is 7, subtract (2 * 0.3) = -0.1\n    part3_result = (0.1 / 0.142857) - (2 * 0.3)\n    \n    # Evaluate the entire expression\n    ans = part1_result + part2_result - part3_result\n    \n    return ans\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 0.75 * bud), 6/5)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones_after_jan = 78 * 2 - 13  # Inverse operation for February\n    initial_phones = (remaining_phones_after_jan + 22) * 2  # Inverse operation for January\n    \n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    base_number = (18 * 7) / 3\n    part_of_number = (base_number * 5) / 6\n    return part_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1 # In a knockout tournament, each game eliminates one player\n\n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438  # Total number of pens and pencils\n    more_pens = 50     # Mrs. Raj bought 50 more pens than pencils\n\n    # Let's denote the number of pencils as x.\n    # Then the number of pens will be x + 50.\n    # The total number of pens and pencils is x + (x + 50) = 438.\n\n    # By solving the equation we get:\n    # 2x + 50 = 438\n    # 2x = 388\n    # x = 194\n    \n    x = (total_items - more_pens) / 2\n    return int(x)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate total expenses per period.\n    jan_to_apr_expense = 500 * 4  # January to April (4 months)\n    may_to_jul_expense = 300 * 3  # May to July (3 months)\n    aug_to_sep_expense = 400      # August to September (2 months total)\n    oct_to_dec_expense = 300 * 3  # October to December (3 months)\n\n    # Calculate total expense.\n    total_expense = jan_to_apr_expense + may_to_jul_expense + aug_to_sep_expense + oct_to_dec_expense\n\n    # Calculate the average monthly expense from January to December.\n    num_months = 12\n    average_expense = total_expense / num_months\n\n    return average_expense\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    additional_apples = 16\n    total_apples = initial_apples + additional_apples\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_packets = 4\n    amount_needed_per_packet = 70\n    total_amount_needed = total_packets * amount_needed_per_packet\n    shortfall = 15\n\n    total_amount_had = total_amount_needed - shortfall\n    return total_amount_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    # Initial count of the digit '3'\n    count_of_3 = 0\n\n    # Go through each number in the sequence \n    for number in range(4, 52):\n        # Convert the number to string and count the occurrences of '3'\n        count_of_3 += str(number).count('3')\n\n        # If the count reaches the digit '3' in the number '23',\n        # we can break the loop as we found the position\n        if count_of_3 == 1:\n            # The digit '3' in the number '23' is in the position\n            # equal to the current index in the sequence plus one\n            # because the index is 0-based and we want the count to be 1-based\n            ans = number - 3  # since the sequence starts from 4, we subtract 3\n            break\n\n    return ans\n\n# Call the function to get the answer\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    number_of_people = 5\n    games_played = number_of_people - 1  # Because in a knockout tournament, each game eliminates one player\n\n    return games_played\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    ans = 19 + 6 + 12 + 13 + 21 + 4 + 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # Since the book is at positions 8 from front and 10 from back, \n    # the total number of shelves will be 8 + 10 - 1\n    # -1 because the shelf where the book is located is counted twice (from the front and the back)\n    total_shelves = 8 + 10 - 1\n    return total_shelves\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marbles each girl initially has\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Create the equations based on the problem statement\n    total_marbles_eq = Eq(anna + betsy + charlene, 168)  # Total number of marbles\n    marbles_after_charlene_gives_to_betsy = Eq(charlene - 15, charlene)  # Charlene gives 15 to Betsy\n    marbles_after_betsy_gives_to_anna = Eq(betsy + 15 - 8, betsy)  # Then, Betsy gives 8 to Anna\n    ratio_eq = Eq((anna + 8) / (betsy + 15 - 8) / (charlene - 15), 2 / 5 / 7)  # Final ratio 2:5:7\n\n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, marbles_after_charlene_gives_to_betsy, \n                       marbles_after_betsy_gives_to_anna, ratio_eq), (anna, betsy, charlene))\n\n    # Return Betsy's initial amount of marbles\n    return solutions[betsy]\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_left = 3\n    from_right = 7\n    from_front = 7\n    from_back = 4\n\n    total_rows = from_front + from_back - 1\n    total_columns = from_left + from_right - 1\n\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # combined age 4 years ago\n    combined_age_4_years_ago = 10\n    \n    # each year, each dog ages 1 year, so in 4 years, each dog ages 4 years\n    # since there are 2 dogs, we multiply by 2\n    age_increase_in_4_years = 4 * 2\n    \n    # combined age now\n    combined_age_now = combined_age_4_years_ago + age_increase_in_4_years\n\n    # each year, each dog ages 1 year, so in 2 years, each dog ages 2 years\n    # since there are 2 dogs, we multiply by 2\n    age_increase_in_2_years = 2 * 2\n    \n    # combined age in 2 years\n    combined_age_in_2_years = combined_age_now + age_increase_in_2_years\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorize the number 2016\n    factors = factorint(2016)\n    \n    # Each child's age must be a factor of 2016 so we need to find combinations of factors that are all less than 10.\n    # The prime factorization of 2016 is 2^5 * 3^2 * 7^1.\n    # To get four different ages all less than 10, we have two possibilities:\n    # 2, 2*2, 2*2*2, 3*3*7 or 2, 2*2, 2*2*2*2, 3*7\n    # The first set doesn't work because 2*2*2 (8) is not under 10.\n    # The second set is valid so we use this one.\n    \n    ages = [2, 2*2, 2*2*2*2, 3*7]  # 2, 4, 16, 21\n    sum_of_ages = sum(ages)\n\n    return sum_of_ages\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return ans\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers\n    equation1 = Eq(girls, boys - 1)\n\n    # Each girl has half as many sisters as brothers\n    equation2 = Eq(girls - 1, 2 * (boys - girls))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # The sum of boys and girls will give the total number of children\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    coins_10p = symbols('coins_10p')\n    total_value = 1575  # £15.75 is equivalent to 1575p\n\n    # Let's denote the number of 10p coins as coins_10p\n    # According to the given conditions we have:\n    # 5p coins = 0.5 * coins_10p\n    # 20p coins = 2 * coins_10p\n    # The total number of coins is the value of each multiplied by their count\n\n    equation = Eq(5 * (0.5 * coins_10p) + 10 * coins_10p + 20 * (2 * coins_10p), total_value)\n\n    # Solve the equation for the number of 10p coins\n    solutions = solve(equation, coins_10p)\n    coins_10p_value = solutions[0]\n\n    # Now calculate the number of 20p coins which is twice the number of 10p coins\n    coins_20p_value = 2 * coins_10p_value\n\n    return coins_20p_value\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_chocolate = 60\n    fraction_eaten = 3/5\n    \n    original_mass = remaining_chocolate / (1 - fraction_eaten)\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Andy's total distance driven is 70 miles\n    # Distance = Speed * Time\n    # Since time is given in minutes, convert it into hours (30 minutes = 0.5 hour)\n\n    # Distance driven in the first 30 minutes\n    distance_first_30 = x * 0.5\n\n    # Distance driven in the second 30 minutes\n    distance_second_30 = (x - 20) * 0.5\n\n    # Distance driven in the last 30 minutes\n    distance_last_30 = (x + 10) * 0.5\n\n    # Total distance equation\n    equation = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_6_number = str(remainder) + base_6_number\n        base_10_number //= 6\n    return int(base_6_number)\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    for max_apples in range(1, 28):\n        remaining_apples = 27 - max_apples\n        # other children should get different number of apples\n        children = 4\n        sums = sum(range(1, children+1))  # smallest sum if all get different apples\n        if remaining_apples >= sums and  children * (children + 1) // 2 <= remaining_apples:\n            other_apples = [i for i in range(1, children+1)]\n            found = True\n            for i in range(children):\n                if remaining_apples - sum(other_apples) > other_apples[-1]:\n                    other_apples[-1] += 1\n                    other_apples.sort()\n                else:\n                    break\n            if sum(other_apples) + max_apples == 27:\n                return max_apples\n            else:\n                continue\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    tip_percentage = 10 / 100\n    note_amount = 50\n\n    total_cost = total_cost_per_person * number_of_people\n    total_tip = total_cost * tip_percentage\n    total_payment = total_cost + total_tip\n    change_received = note_amount - total_payment\n    \n    return change_received\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    depth = 10\n    day_climb = 4\n    night_slide = 2\n    current_height = 0\n    day_count = 0\n\n    while current_height < depth:\n        day_count += 1 # the snail starts climbing at the beginning of the day\n        current_height += day_climb  # snail climbs in the day\n        if current_height >= depth:  # snail reaches or exceeds the top of the well during the day\n            break\n        current_height -= night_slide  # snail slides down during the night\n\n    return day_count\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # If Jason takes 3 marbles first, then no matter what number Belinda takes (1-3),\n    # Jason can always adjust his next move to ensure that the total number of\n    # marbles taken by both is 4. This pattern can continue until they reach 25 marbles,\n    # where Jason will then take the last marble to make Belinda lose.\n    # Thus, he should take 2 marbles in the first turn.\n    \n    # The general strategy is to always keep the number of marbles remaining\n    # after Jason's turn as a multiple of 4. Starting from 1 marble less than\n    # the losing number (26), the closest multiple of 4 is 24. Therefore,\n    # in the first turn, Jason should leave 24 marbles, meaning he should take\n    # 2 marbles (26 - 24 = 2).\n    \n    first_move = 2\n    return first_move\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    sum_divisible = 2013\n    n = 1\n    while True:\n        series_sum = 5 * n * (n + 1) // 2  # sum of arithmetic series formula (n/2)*(first + last)\n        if series_sum % sum_divisible == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    ways = []\n    for nums in combinations(range(1, 25), 7):\n        if sum(nums) == 25 and len(set(nums)) == 7:\n            ways.append(nums)\n    return ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability that the alcoholic is not at the first bar\n    p_not_at_first = 1 - 1/3  # Since there are three bars and the choice is random\n\n    # Similarly, the probability that the alcoholic is not at the second bar\n    p_not_at_second = 1 - 1/3  # Since there are three bars and the choice is random\n\n    # The probability of the alcoholic being at the third bar\n    # given he is not at the first two bars is the product of probabilities\n    # because the events are independent\n    p_at_third = p_not_at_first * p_not_at_second\n\n    return p_at_third\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let G be the amount of grass grown per week and C be the amount of cows the pasture can sustain for 6 weeks\n    G, C = symbols('G C')\n\n    # Equation for 120 cows eating up the grass in 12 weeks\n    equation1 = Eq(120 * 12, G * 12 + 120 * 6)\n\n    # Equation for 150 cows eating up the grass in 8 weeks\n    equation2 = Eq(150 * 8, G * 8 + 150 * 6)\n\n    # Equation for C cows eating up the grass in 6 weeks\n    equation3 = Eq(C * 6, G * 6 + C * 6)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (G, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    days_spent = 3 * 7  # 3 weeks\n    end_date = start_date + timedelta(days=days_spent)\n    return end_date.strftime(\"%d %B\")\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the price of a pencil and m the price of a marker\n    p, m = symbols('p m')\n\n    # Setting up the equations according to the problem statement\n    equation1 = Eq(3 * p + 2 * m, 13)\n    equation2 = Eq(2 * p + 3 * m, 12)\n\n    # Solving the system of equations for p and m\n    solutions = solve((equation1, equation2), (p, m))\n\n    # Calculating the total cost of 7 pencils and 7 markers\n    total_cost = 7 * solutions[p] + 7 * solutions[m]\n\n    return total_cost\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    total_students = 0\n    layer_diff = 55\n    boy_count = 0\n    girl_count = 0\n    layer = 0\n\n    while boy_count - girl_count != layer_diff:\n        layer += 1\n        if layer % 2 == 0:\n            girl_count += (layer * 4)\n        else:\n            boy_count += (layer * 4)\n\n        total_students = boy_count + girl_count\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    # Let x be the number of volunteers and y the total number of trees.\n    # From the problem statements we have the following two equations:\n    # 4x + 5 = y (each volunteer plants 4 trees and 5 trees are left)\n    # 7(x - 1) = y (each of the x - 1 volunteers plants 7 trees, while one volunteer has nothing to plant)\n    \n    # We can solve these two equations to find the value of x and y.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(4*x + 5, y)\n    equation2 = Eq(7*(x - 1), y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    num_volunteers = solutions[x]\n    num_trees = solutions[y]\n\n    return num_volunteers, num_trees\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given proportion 10:x = 14:21\n    # Cross multiply to get the relation\n    # 10 * 21 = 14 * x\n    x = (10 * 21) / 14\n    \n    return int(x)\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 6\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of stickers in Bag A be a\n    # and the initial number of stickers in Bag B be b\n    a, b = symbols('a b')\n\n    # Total number of stickers initially\n    equation1 = Eq(a + b, 270)\n\n    # After moving stickers, Bag B has a - 56 stickers\n    # and Bag A has b + 56 stickers\n    # The ratio of Bag B to Bag A is 3:2\n    equation2 = Eq((b + 56) / (a - 56), 3 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    percent = 5\n    number = 180\n\n    ans = (percent / 100) * number\n\n    return ans\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 30 - 28 + 26 - 24 + 22 - 20 + 18 - 16 + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 25\n    common_difference = 3\n    n = 10\n\n    first_term = nth_term - (n - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    ans = -(-total_cakes // cakes_per_box)  # Using ceiling division because we can't have a fraction of a box.\n\n    return ans\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # Lovelle and Makayla had 3998 muffins altogether\n    equation1 = Eq(lovelle + makayla, 3998)\n\n    # After selling, Lovelle and Makayla had an equal number of muffins\n    equation2 = Eq(lovelle - 462, makayla - (2/5) * makayla)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_money = symbols('initial_money')\n    book_fraction = 1/4\n    bag_fraction = 2/7\n\n    # Equation representing the total cost of the book and the bag\n    equation = Eq((book_fraction + bag_fraction) * initial_money, 225)\n    \n    # Solving for the initial amount of money Irene had\n    solved = solve(equation, initial_money)\n\n    return solved[0]\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # The worst-case scenario to ensure 10 cards of the same color:\n    # Take all 16 cards of the largest color group + \n    # Take 9 cards from each of the remaining 3 color groups\n    # Because after that, the next card will guarantee a 10th card in one of those three groups\n\n    cards_needed = 16 + 3 * 9 + 1\n\n    return cards_needed\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    # Number of spaces between daffodils is one less than the number of daffodils\n    number_of_spaces = 8 - 1\n    # Gap between each daffodil is 1.1 meters\n    gap_per_space = 1.1\n    # Total length of the gaps\n    total_gap_length = number_of_spaces * gap_per_space\n    # Total length of the row including the daffodils\n    # Since the row begins and ends with a daffodil, there's no additional length to add.\n    row_length = total_gap_length\n    \n    return row_length\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # Starting at 1 and going up one each time, the maximum count of different positive integers\n    # is reached when we can no longer use the next integer without exceeding the sum of 30.\n    # This problem is equivalent to finding the largest triangular number that is less than or equal to 30.\n    # A triangular number is of the form n*(n+1)/2, so we are looking to solve for n in n*(n+1)/2 <= 30\n    n = 1\n    while n * (n + 1) // 2 <= 30:\n        n += 1\n    # Subtract 1 because the loop increments n once more after the last valid sum is less than or equal to 30.\n    return n - 1\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87  # Total length of the ribbon\n    number_of_pieces = 30  # Number of pieces to cut into\n\n    length_per_piece = total_length / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(number):\n        return sum([i for i in range(1, number // 2 + 1) if number % i == 0])\n    \n    number = 2\n    while True:\n        if sum_of_factors(number) == number:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    # Since the boxes are identical, we only need to count distinct combinations.\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):  # x2 must be larger than x1\n            x3 = 9 - (x1 + x2)\n            if x3 > x2:  # x3 must be larger than x2 to be distinct\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    portion_jane = 2\n    portion_alex = portion_jane * 1.5  # Alex drinks 50% more than Jane\n    total_portion = portion_jane + portion_alex\n\n    alex_drinks = (total_juice * portion_alex) / total_portion\n\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    minutes_taken = distance_to_market / walking_speed\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n    \n    # We calculate the number of ways to select groups considering at least 1 boy\n    for boys_in_group in range(1, min(total_boys, group_size) + 1):\n        girls_in_group = group_size - boys_in_group\n        ways_to_select_boys = comb(total_boys, boys_in_group)\n        ways_to_select_girls = comb(total_girls, girls_in_group)\n        total_ways += ways_to_select_boys * ways_to_select_girls\n\n    return total_ways\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    total_friends = 6\n\n    fruits_each_friend = (total_pear + total_strawberry + total_chocolate) // total_friends\n\n    return fruits_each_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let the initial amount of money Bud had be x.\n    # After spending 1/4 of it on a book, she is left with (3/4)x.\n    # She then spends 2/5 of the remaining money on a bag, so she spends (2/5)*(3/4)x on the bag.\n    # We know the bag costs £60.\n    # So we can set up the equation (2/5)*(3/4)x = 60.\n    # To find x, we need to solve this equation.\n    \n    # Calculate the initial amount of money (x).\n    x = 60 / ((2/5) * (3/4))\n    \n    return x\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits = 0\n    page_number = 1\n\n    while digits < total_digits:\n        digits += len(str(page_number))\n        if digits > total_digits:\n            break\n        page_number += 1\n\n    return page_number - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242):\n        if number % 2 != 0 and number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total distance covered by peach trees\n    total_distance_peach_trees = (41 - 1) * 3\n\n    # Calculate the number of lamp posts\n    # Since there are lamp posts at both ends, we subtract 1 from the lamp posts count\n    num_lamp_posts = (total_distance_peach_trees // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for digit_i in range(10):\n        for digit_j in range(10):\n            total_price = int(f\"{digit_i}679{digit_j}\")\n            if total_price % 72 == 0:\n                unit_price = total_price // 72\n                return unit_price\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of students in class A and B\n    a, b = symbols('a b', integer=True)\n    \n    # Define symbol for the number of candies\n    candies = symbols('candies', integer=True)\n    \n    # Equations given by the problem\n    equation1 = Eq(4*a, candies - 20) # Eq(4a + 20, candies)\n    equation2 = Eq(6*b, candies + 16) # Eq(6b - 16, candies)\n    equation3 = Eq(a, 2*b)           # Number of students in class A is twice of B\n    \n    # Now let's solve these equations\n    solutions = solve((equation1, equation2, equation3), (a, b, candies))\n    \n    # We are interested in the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40          # speed of the train in meters per second\n\n    time_to_pass = train_length / speed  # time in seconds for the train to pass the pole\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Iterate through all 2-digit numbers\n        digits_sum = sum([int(digit) for digit in str(i)])  # Calculate sum of digits\n        if digits_sum % 5 == 0:  # Check if sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    dvd_cost = total_savings / 3\n    remaining_after_dvd = total_savings - dvd_cost\n    book_cost = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_cost\n    \n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits_initial = 32\n    years = 3\n\n    # Calculate rabbits after each year considering wolves eat half of them\n    for year in range(1, years + 1):\n        rabbits_born = 3 * rabbits_initial  # 3 times as many rabbits as last year\n        rabbits_after_wolves = rabbits_born // 2  # wolves eat half\n        rabbits_initial = rabbits_after_wolves  # update the number of rabbits for next year\n\n    return rabbits_initial\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    time_for_first_mile = 1 / 60  # hours to travel 1 mile at 60 mph\n    time_for_second_mile = 1 / 30  # hours to travel 1 mile at 30 mph\n\n    total_time = time_for_first_mile + time_for_second_mile\n    total_distance = 2  # miles\n\n    average_speed = total_distance / total_time  # miles per hour\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    \n    num_washes = (target_amount + amount_per_wash - 0.01) // amount_per_wash\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    # Initial number of candies eaten\n    initial_candies = 2\n    # Number of days after the first day\n    days_after_first = 3\n    # Total number of candies eaten on the fourth day\n    candies_on_fourth_day = initial_candies * (2 ** days_after_first)\n    \n    return candies_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earning = 70\n    number_of_working_days = 6  # from Monday to Saturday\n\n    total_earning = average_daily_earning * number_of_working_days\n\n    return total_earning\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1, angle2 = symbols('angle1 angle2')\n\n    equation1 = Eq(angle1, 2 * angle2)\n    equation2 = Eq(angle1 + angle2 + 90, 180)\n\n    solutions = solve((equation1, equation2), (angle1, angle2))\n\n    return solutions[angle1]\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown natural number and 'a'\n    n, a = symbols('n a', integer=True)\n\n    # Setting up the equations based on the remainders\n    eq1 = Eq(290 % n, a)\n    eq2 = Eq(235 % n, a + 2)\n    eq3 = Eq(200 % n, a + 5)\n\n    # Since the number is greater than 1, we specify n > 1\n    solutions = solve((eq1, eq2, eq3), (n, a), dict=True)\n\n    # Filter out the solutions where we require n to be greater than 1\n    valid_solutions = [sol[n] for sol in solutions if sol[n] > 1]\n\n    return min(valid_solutions)  # Return the smallest natural number that satisfies the conditions\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if P != I and P != S and I != S:\n                    PI = P * 10 + I\n                    IS = I * 10 + S\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # Calculate the average age, which will be the middle value in the sequence\n    avg_age = 765 // 9\n\n    # Since ages are consecutive numbers, the middle age is the average\n    middle_age = avg_age\n\n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n\n    # Create equations based on the problem\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_for_six_days = 3 * 6\n    sunday_sunshine = 10\n    total_sunshine_for_whole_week = total_sunshine_for_six_days + sunday_sunshine\n    average_sunshine_per_day = total_sunshine_for_whole_week / 7\n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed\n    \n    time_walking_to_school = 24  # min\n    total_distance = walking_speed * time_walking_to_school  # m\n    half_distance = total_distance / 2\n    \n    time_walking_half = half_distance / walking_speed\n    time_running_half = half_distance / running_speed\n    \n    total_time = time_walking_half + time_running_half\n    \n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    num_trees = 79\n    road_length = 320\n\n    # Subtract one from number of trees because the distance is between the trees\n    num_intervals = num_trees - 1\n\n    # Distance between each tree is total length divided by number of intervals\n    distance_between_trees = road_length / num_intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys_total = 120\n    girls_total = 80\n    boys_saw_movie = boys_total * 0.5\n    girls_saw_movie = girls_total * 0.6\n    total_pupils_saw_movie = boys_saw_movie + girls_saw_movie\n    return int(total_pupils_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    # Let's denote the total savings by x.\n    # According to the problem:\n    # Kim gave 1/3 of savings -> (1/3) * x\n    # Amount spent on dresses -> $177\n    # Amount spent on earrings -> $129\n    # Amount left is half of what she gave to her mother -> (1/2) * ((1/3) * x)\n\n    # The equation can be established as follows:\n    # Total savings = Amount given to mother + Amount spent on dresses + Amount spent on earrings + Amount left\n    # x = (1/3)*x + 177 + 129 + (1/2)*((1/3)*x)\n\n    # To solve for x:\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x, (1/3)*x + 177 + 129 + (1/2)*((1/3)*x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    for basket1 in range(0, 7):\n        for basket2 in range(0, 7 - basket1):\n            basket3 = 6 - basket1 - basket2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    length_cut = 15\n\n    leftover = total_length % length_cut\n\n    return leftover\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    ans = 1 + 3/100\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    possible_values = []\n    for N in range(12, 2018):\n        if 2018 % N == 11:\n            possible_values.append(N)\n    return sum(possible_values)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum(skirts_per_day * (worker + 1) for worker in range(9))\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):  # There can't be more than 8 chickens\n        cows = 8 - chickens\n        if (chickens * 2) + (cows * 4) == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3  # the common difference of the sequence\n    potential_terms = range(30, 61)  # create a range from 30 to 60 (inclusive)\n\n    valid_terms = [term for term in potential_terms if (term - first_term) % difference == 0]\n\n    return valid_terms\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 // 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    num_digits = 0\n    number = 1\n    \n    while True:\n        num_in_number = len(str(number))\n        if num_digits + num_in_number >= 2023:\n            break\n        num_digits += num_in_number\n        number += 1\n    \n    position = 2023 - num_digits - 1\n    return int(str(number)[position])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(1 * apple + 1 * banana, 0.48)\n\n    # Solving the equations to find the cost of one apple and one banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculating the cost for 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable T\n    T = symbols('T')\n\n    # Equation based on the given problem statement\n    tax_equation = Eq(0.08 * 50000 + (0.08 + T/100) * (150000 - 50000), 15000)\n\n    # Solve for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    woody_score = 66\n    not_attempted = 1\n    correct_point = 4\n    incorrect_point = -2\n\n    # Let's denote correct answers as c and incorrect answers as i\n    for c in range(total_questions - not_attempted + 1):\n        i = total_questions - not_attempted - c\n        score = c * correct_point + i * incorrect_point\n        if score == woody_score:\n            return c\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has and a be the number Alice has\n    r, a = symbols('r a')\n\n    # First scenario: if Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # Second scenario: after eating 8 pieces each, Rachel has 3 times as many as Alice\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Total number of candies initially\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n\n    # Pigeonhole principle: if there are n pigeons and m pigeonholes, and n > m, then at least one pigeonhole must contain more than n // m pigeons.\n    most_births = -(-total_boys // days_in_january)  # Ceiling division to find the minimum number of boys born on the busiest day\n\n    return most_births\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Create a list to keep track of the numbers formed\n    numbers = []\n    \n    # Iterate through each possible position for the digits\n    for first_digit in [2, 3]:  # The first digit cannot be 0 in a three-digit number\n        for second_digit in [0, 2, 3]:  # The second digit can be one of the three given digits\n            for third_digit in [0, 2, 3]:  # The third digit can also be one of the three given digits\n                # Check that all digits are not the same\n                if first_digit != second_digit and second_digit != third_digit and first_digit != third_digit:\n                    # Form the number and add to the list\n                    number = (first_digit * 100) + (second_digit * 10) + third_digit\n                    numbers.append(number)\n    \n    # Return the total count of different numbers formed\n    return len(numbers)\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    total_cars = 31\n    space_between_cars = 5\n\n    other_cars_total_length = (total_cars - 1) * other_car_length\n    total_space_length = (total_cars - 1) * space_between_cars * 2  # spaces before and after each car\n    total_length = first_car_length + other_cars_total_length + total_space_length\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # From the given values and positions, we can determine the common difference\n    # 120 - 105 = 15, 135 - 120 = 15\n    common_difference = 15\n    \n    # To find the first term, we use the 7th term (which is 105) and subtract 6 times the common difference\n    first_term = 105 - (7 - 1) * common_difference\n    \n    # To find the 100th term, we use the first term and add 99 times the common difference\n    hundredth_term = first_term + (100 - 1) * common_difference\n    \n    return hundredth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given = 23\n    remaining_chocolates = total_chocolates - chocolates_given\n    return remaining_chocolates\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    total_count = 0\n\n    # Generate all permutations for the 5 students without A, B, C\n    for perm in permutations('DEFG'):\n        lineup = ''.join(perm)\n        # Insert D and E as a pair in all possible positions\n        for i in range(len(lineup) - 1):\n            if lineup[i] == 'D' or lineup[i + 1] == 'E':\n                continue\n            for j in range(i + 2, len(lineup) + 1):\n                with_de = lineup[:i+1] + 'DE' + lineup[i+1:]\n\n                # Insert A, B, C such that A is between B and C\n                for k in range(len(with_de) + 1):\n                    for l in range(k, len(with_de) + 1):\n                        final_lineup = with_de[:k] + 'B' + with_de[k:l] + 'A' + with_de[l:] + 'C'\n                        # Count each valid lineup\n                        total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5  # Sue's ratio + Sarah's ratio + Ian's ratio\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) // sarah_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost_per_packet = 73  # in pence\n    cakes_cost_per_cake = 113  # in pence, since £1.13 is 113p\n\n    total_biscuits_cost = 7 * biscuits_cost_per_packet\n    total_cakes_cost = 9 * cakes_cost_per_cake\n\n    total_cost_in_pence = total_biscuits_cost + total_cakes_cost\n    total_cost_in_pounds = total_cost_in_pence / 100  # converting pence to pounds\n\n    amount_paid = 20  # in pounds\n    \n    change = amount_paid - total_cost_in_pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter at first.\n    initial_condition = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter.\n    sam_gives = 0.20 * sam\n    sam_after_giving = sam - sam_gives\n    peter_after_receiving = peter + sam_gives\n\n    # Peter gives 25% of his stickers to Sam after receiving from Sam.\n    peter_gives = 0.25 * peter_after_receiving\n    sam_final = sam_after_giving + peter_gives\n    peter_final = peter_after_receiving - peter_gives\n\n    # Sam had 96 stickers more than Peter in the end.\n    final_condition = Eq(sam_final, peter_final + 96)\n\n    # Solve the equations\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('2:50 PM', '%I:%M %p')\n    time_spent_before_lunch = timedelta(minutes=10 + 20)\n    time_spent_on_lunch = timedelta(minutes=20)\n    \n    home_arrival_time = lunch_end_time - (time_spent_before_lunch + time_spent_on_lunch)\n    \n    return home_arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "def solution():\n    from math import factorial as fact\n    \n    # For 3-digit numbers:\n    # We can use the digits 2, 0, 1, 7 but we can't use 0 as the first digit.\n    # So we have 3 options for the first digit, and then 3 and 2 options for the \n    # second and third digit respectively.\n    three_digit_numbers = 3 * 3 * 2\n    \n    # For 4-digit numbers:\n    # All digits must be used, so we have 4 options for the first digit,\n    # then 3, 2 and 1 options for the second, third and fourth digits respectively.\n    four_digit_numbers = fact(4)  # 4! (4 factorial)\n    \n    # Total numbers is the sum of the two possibilities\n    total = three_digit_numbers + four_digit_numbers\n\n    return total\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    x = 1\n    while True:\n        if x % 3 == 2 and x % 4 == 2 and x % 5 == 2 and x % 7 == 1:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    return 6.5 / 0.5\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5  # a1\n    common_difference = 3  # d\n    num_terms = 14  # n\n\n    # Use the formula for the sum of an arithmetic sequence: S_n = n/2 * (2a + (n-1)d)\n    ans = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    return ans\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_nines(page):\n        return str(page).count('9')\n\n    pages = 0\n    nines_count = 0\n\n    while nines_count < 181:\n        pages += 1\n        nines_count += count_nines(pages)\n\n    return pages\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    # Let's denote x as the number of initial crystals\n\n    # Jason sold 10 more than half of his crystals to Yvonne: (x / 2) + 10\n    # He mined 20 more crystals in Singapore, so he now has: (x / 2) + 10 + 20\n    # He sold 14 crystals to Cherlyn: (x / 2) + 10 + 20 - 14\n    # He has 35 crystals in the end: (x / 2) + 10 + 20 - 14 = 35\n\n    # Setting up the equation based on the above explanation\n    equation = Eq((initial_crystals / 2) + 10 + 20 - 14, 35)\n\n    # Solving the equation\n    solved = solve(equation, initial_crystals)\n\n    # Getting the number of initial crystals\n    initial_crystals_count = solved[0]\n\n    return initial_crystals_count\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_pattern = 2\n    total_pattern = 1 + 2 + 2  # black + white + grey\n    grey_rabbits = 14\n    total_rabbits = (grey_rabbits / grey_pattern) * total_pattern\n\n    return int(total_rabbits)\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 5, 8]\n    all_numbers = sorted(set(int(''.join(map(str, perm))) for perm in permutations(digits, 3) if perm[0] != 0))\n    return all_numbers[-1] - all_numbers[0]\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    A = 12\n    B = 15\n    C = 18\n\n    # Calculate the greatest common divisor (GCD) of the three numbers\n    gcd_AB = gcd(A, B)\n    gcd_ABC = gcd(gcd_AB, C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "def solution():\n    count = 0\n    for d1 in range(1, 5):\n        for d2 in range(1, 5):\n            for d3 in range(1, 5):\n                for d4 in range(1, 5):\n                    if len({d1, d2, d3, d4}) == 4:\n                        if d4 % 2 == 0:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    from sympy import divisors\n\n    factors_of_180 = divisors(180)\n    count = sum(1 for factor in factors_of_180 if factor % 9 == 0)\n    \n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2 * u, 5 * u - 220)\n    \n    solution = solve(equation, u)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # Find the value of 'a' such that 26a539 is divisible by 9\n    # According to the divisibility rule for 9, the sum of the digits must be divisible by 9\n    # Thus, 2 + 6 + a + 5 + 3 + 9 must be divisible by 9\n    sum_of_other_digits = 2 + 6 + 5 + 3 + 9\n    # The digit 'a' would have to make the total sum a multiple of 9\n    # Find the smallest 'a' (0-9) that satisfies this condition\n    for a in range(10):\n        if (sum_of_other_digits + a) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    yi_yen, kyra = symbols('yi_yen kyra')\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n    \n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n    \n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    total_cost = cost_per_box * 12\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # 200 pence in £2\n    single_price = 12   # price for one sweet in pence\n    bundle_price = 30   # price for three sweets in pence\n    bundle_size = 3     # number of sweets in a bundle\n\n    # Calculate maximum number of bundles can be bought\n    max_bundles = total_pence // bundle_price\n    pence_remaining = total_pence - max_bundles * bundle_price\n\n    # Calculate additional sweets can be bought with the remaining pence\n    additional_sweets = pence_remaining // single_price\n\n    # Total sweets is the sweets in bundles plus any additional singles\n    total_sweets = max_bundles * bundle_size + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_10 = 10\n    kenny_age_x, brother_age_y = symbols('kenny_age_x brother_age_y')\n    kenny_brother_sum_3_times_may_age_10 = Eq(kenny_age_x + brother_age_y, 3 * may_age_10)\n    kenny_2_years_older_than_brother = Eq(kenny_age_x, brother_age_y + 2)\n\n    solutions = solve((kenny_brother_sum_3_times_may_age_10, kenny_2_years_older_than_brother), \n                      (kenny_age_x, brother_age_y))\n    \n    kenny_current_age = solutions[kenny_age_x] + (10 - 7)  # Correction for current age\n    may_current_age = 7\n    \n    age_difference = kenny_current_age - may_current_age\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since we need at least 1 ball in each box, start by placing one ball in each box.\n    # We are left with 10 - 7 = 3 balls to distribute.\n    remaining_balls = 10 - 7\n\n    # With 7 boxes, we have 6 \"gaps\" between the boxes where the remaining balls could go.\n    # This is a classic stars and bars problem, where we have 3 identical balls (stars)\n    # to put into 6 gaps (bars) between the boxes.\n\n    # The formula for the number of ways to distribute n identical objects into k different\n    # boxes is comb(n + k - 1, k - 1).\n    # In our case, n = remaining_balls and k = 7.\n\n    ans = comb(remaining_balls + 7 - 1, 7 - 1)\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # The optimal strategy in such a game would be to leave the other player with a situation where they have \n    # no other option but to set you up for the win on their next turn. For example, leaving the other player with \n    # 4 candies ensures your victory, since whether they choose to eat 1 or 2 candies, you can eat the remaining and win.\n\n    # The sequence of optimal moves is to always aim to leave a multiple of 3 candies after your turn:\n    # 10 (starting number of candies)\n    # 9 (Felix wants to leave either this or any other multiple of 3 to John)\n    # 8\n    # 7 (by eating 1 or 2 candies, Felix can always leave a multiple of 3 to John)\n    # 6  (multiple of 3)\n    # 5\n    # 4 (again by eating 1 or 2 candies, Felix can leave a multiple of 3 to John)\n    # 3  (multiple of 3, victory assured for Felix)\n    # 2 or 1 (John's possible moves)\n    \n    # Start by going first and leaving the opponent with 9 candies (Eat 1 candy)\n    # When John is left with 9 candies, no matter what he eats (1 or 2), Felix can eat (2 or 1) to leave John with 7 candies.\n    # Felix then leaves John with 4 candies.\n    # Finally Felix will be left with 3 candies and he can eat them all to win.\n\n    # Felix should go first and always leave a multiple of 3 candies for John.\n\n    # This setup ensures victory regardless of whether John eats 1 or 2 candies as Felix will always be able\n    # to eat candies such that John is left with 9, 6, or 3 candies, thus Felix will get to eat the last candy.\n\n    go_first = True\n    strategy = \"Leave a multiple of 3 candies\"\n\n    return go_first, strategy\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tank_capacity = symbols('tank_capacity')\n\n    equation1 = Eq(tank_capacity - 5, 4)\n    equation2 = Eq(tank_capacity - (3 * 4), 3)\n\n    solutions = solve((equation1, equation2), (tank_capacity))\n\n    return solutions[tank_capacity]\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    pipe_length = 305\n    each_pipe_length = 5\n    num_pipes = pipe_length // each_pipe_length\n    if pipe_length % each_pipe_length != 0:\n        num_pipes += 1\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count_twice = 0\n    for number in range(1, 2017):\n        times_underlined = 0\n        if number % 2 == 0:\n            times_underlined += 1\n        if number % 3 == 0:\n            times_underlined += 1\n        if number % 4 == 0:\n            times_underlined -= 1  # because this number has already been counted once for being a multiple of 2\n        if times_underlined == 2:\n            count_twice += 1\n    return count_twice\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 28:\n        if '3' in str(page):\n            count += str(page).count('3')\n        page += 1\n    return page - 1  # since page was incremented after the last '3' found\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]\n    brother_sum = sum(zoey_coins) // 2\n\n    for coin in zoey_coins:\n        if sum(zoey_coins) - coin == brother_sum * 2:\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4) # Ways to choose 4 girls out of 8\n    boys_ways = comb(12, 3) # Ways to choose 3 boys out of 12\n\n    total_ways = girls_ways * boys_ways # Total ways is the product of the ways to choose girls and boys\n\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "网络故障，请重试"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # converting 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # converting 16.35 to minutes\n    time_missed_first_bus = first_bus_time + 4  # 4 minutes late\n    time_to_wait = second_bus_time - time_missed_first_bus  # waiting time for the next bus\n    \n    return time_to_wait\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation represents removing 1/11 of the boys and 5 girls\n    # and the resulting number of boys and girls are the same\n    equation1 = Eq((boys - boys / 11), (girls - 5))\n    # Equation represents the total number of students\n    equation2 = Eq(boys + girls, 152)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    \n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries_needed = (workers + capacity - 1) // capacity\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men = symbols('men')\n    women = 4 * men\n    equation = Eq(women, men + 126)\n    \n    num_men = solve(equation, men)[0]\n    num_women = 4 * num_men\n    \n    total_people = num_men + num_women\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    next_four_days_average = 20\n    next_four_days_total = next_four_days_average * 4\n    last_two_days = 60\n\n    total_pages = first_three_days + next_four_days_total + last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 200:\n        if ans >= 100:\n            return ans\n        ans += 4*5*9  # Increase by the least common multiple until the number is a three-digit number.\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    room = 1\n    while True:\n        students_4 = 4 * room + 6\n        rooms_5 = (students_4 - 1) // 5\n        if room - rooms_5 == 1:\n            ans = students_4\n            break\n        room += 1\n    return ans\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    # Loop through each possibility for the three dice, making sure they're different\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                # Check if the dice have different values and if they sum up to 12\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_initial_age = 70\n    grandsons_ages = [6, 12, 18]\n    sum_grandsons_ages = sum(grandsons_ages)\n    years = 0\n\n    while bill_initial_age + years != sum_grandsons_ages + years * 3:\n        years += 1\n\n    return bill_initial_age + years\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    # Total sum of the seven numbers\n    total_sum_initial = 7 * 9\n\n    # Total sum of the six numbers after one is removed\n    total_sum_after_removal = 6 * 10\n\n    # The number that was removed\n    removed_number = total_sum_initial - total_sum_after_removal\n\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    fraction_left = 1 / 3\n    people_left = total_people * (1 - fraction_left)\n    return people_left\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    aytown_interval = 15  # Trains from Aytown arrive every 15 minutes\n    beeville_interval = 12  # Trains from Beeville arrive every 12 minutes\n    ceeford_interval = 8  # Trains from Ceeford arrive every 8 minutes\n\n    # Calculate the least common multiple to find the next time they all arrive together\n    interval_lcm = lcm(aytown_interval, beeville_interval, ceeford_interval)\n\n    # Since the first arrival is at 10:00 am, we add the LCM to this start time\n    hours_passed, minutes_passed = divmod(interval_lcm, 60)\n    next_arrival_hour = 10 + hours_passed\n    next_arrival_minute = minutes_passed\n    # Formatting the time. If next_arrival_minute is single digit, add leading zero.\n    next_arrival_str = f\"{next_arrival_hour}:{next_arrival_minute:02d}\"\n\n    return next_arrival_str\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Using the Inclusion-Exclusion Principle for three sets:\n    # n(A ∪ B ∪ C) = n(A) + n(B) + n(C) - n(A ∩ B) - n(A ∩ C) - n(B ∩ C) + n(A ∩ B ∩ C)\n    # Since we want the least possible number of students who play all three sports, we assume\n    # n(A ∪ B ∪ C) = total_students and solve for n(A ∩ B ∩ C)\n\n    # We also know that n(A ∩ B ∩ C) cannot be negative, and the overlaps (n(A ∩ B), etc.)\n    # cannot be more than total_students, hence we start from the maximum possible overlaps of two sets,\n    # and then we calculate the least n(A ∩ B ∩ C)\n\n    max_two_sports_overlap = min(swimmers + cyclists - total_students, \n                                 swimmers + table_tennis_players - total_students, \n                                 cyclists + table_tennis_players - total_students)\n\n    # Calculation of n(A ∩ B ∩ C) given n(A ∪ B ∪ C) = total_students\n    # It becomes n(A ∩ B ∩ C) = n(A) + n(B) + n(C) - (n(A ∪ B ∪ C) + max_two_sports_overlap)\n    all_three = swimmers + cyclists + table_tennis_players - total_students - max_two_sports_overlap\n\n    return all_three\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    # Extract the common factor 3999 from the expression\n    common_factor = 3999\n    # Simplify the expression using the extracted common factor\n    simplified_expression = (common_factor * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    # Calculate the value of the simplified expression\n    ans = simplified_expression / common_factor\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_taken = 30  # time taken to pass a tree in seconds\n    train_length = 360  # length of the train in meters\n\n    # Speed is distance divided by the time\n    speed = train_length / time_taken  # speed in meters per second\n\n    # Convert speed to meters per hour by multiplying with 3600 (since 1 hour = 3600 seconds)\n    speed_mph = speed * 3600 / 1000  # speed in kilometers per hour\n\n    return speed_mph\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    climb_rate = 3\n    slide_rate = 1\n    net_distance = climb_rate - slide_rate  # Net distance covered in one full day\n    day = 0\n    current_distance = 0\n    \n    while True:\n        day += 1\n        current_distance += climb_rate  # The distance the snail climbs during the day\n        # Check if the snail has reached or surpassed the total distance after climbing during the day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_rate  # The distance the snail slides down at night\n\n    return day\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To ensure 4 marbles of different colors are drawn, we pick marbles considering the worst case scenario\n    # Worst case: picking all marbles of the most abundant color first, then the second most, and so on.\n    # Since there are 12 red, 9 blue, 8 yellow, and 3 red again, and we need to ensure 4 different colors,\n    # we take all but one of each color except for the last where we take 1. (12-1) + (9-1) + (8-1) + 1 = 28\n    \n    return 12 + 9 + 8 - 3\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Since numbers are assigned in a sequential manner, the difference between\n    # two directly opposite points in a circle configuration would be half the\n    # total number of people in the circle.\n    opposite_difference = (24 - 10) // 2\n\n    # The total number of people is twice the difference between opposite points.\n    total_people = opposite_difference * 2\n\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    # Adam's total weekly pocket money\n    total_money = 80\n    \n    # Money spent on books and stationery is 20%\n    books_and_stationery = 0.20 * total_money\n    \n    # Let's say the money spent on transport is x\n    # Then money spent on food is 3x, because it's 3 times the transport\n    # Money saved is food - 6, so it's 3x - 6\n    # The total money spent is on books, stationery, food, and transport, so:\n    # books_and_stationery + 3x (food) + x (transport) + (3x - 6) (savings) = total_money\n    \n    # From the above equation, we solve for x\n    x = symbols('x')\n    equation = Eq(books_and_stationery + 3 * x + x + (3 * x - 6), total_money)\n    transport_money = solve(equation, x)[0]\n    \n    # Use the transport money to find the savings\n    savings = 3 * transport_money - 6\n    \n    # Calculate the percentage of the total money that goes to savings\n    savings_percent = (savings / total_money) * 100\n    \n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    \n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    robot_a = 24 \n    robot_b = 64 \n\n    ans = lcm(robot_a, robot_b)\n\n    return ans\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total_count = 0\n    \n    # Only these two cases are possible: 4 digit numbers and 5 digit numbers\n    \n    # For 4 digit numbers, all permutations are valid because they will always\n    # be less than 5120 and more than 3267.\n    # So we calculate permutations of 4 digits chosen from 6.\n    from itertools import permutations\n    \n    # 4 digit numbers\n    four_digit_permutations = list(permutations([1, 2, 3, 4, 5, 6], 4))\n    total_count += len(four_digit_permutations)\n\n    # For 5 digit numbers, first digit can only be 3, 4 or 5\n    # Because the number formed has to be less than 5120\n    # If first digit is 3 or 4, the remaining 4 digits can be any permutation of the remaining 5 digits\n    # If first digit is 5, the second digit can only be 1\n    \n    # 5 digit numbers starting with 3 or 4\n    five_digit_starting_with_3_or_4 = list(permutations([1, 2, 3, 4, 5, 6], 4))\n    total_count += 2 * len(five_digit_starting_with_3_or_4)  # multiplied by 2 for both 3 and 4\n\n    # 5 digit numbers starting with 51\n    five_digit_starting_with_51 = list(permutations([2, 3, 4, 5, 6], 3))  # one less because the second digit is fixed (1)\n    total_count += len(five_digit_starting_with_51)\n    \n    return total_count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    for i in range(10, 100):  # A 2-digit number ranges from 10 to 99\n        if 75 % i == 0 and i % 6 == 3:\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    for i in range(10, 100):\n        if i - 41 == 50:\n            wrong_minuend = i\n            break\n    correct_subtrahend = int(str(14)[::-1])\n    correct_difference = wrong_minuend - correct_subtrahend\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40 - i*2 - (38 - i*2) for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples_each = 5\n    sisters_count = 4\n    apples_left = 20\n\n    total_eaten = justin_apples + sisters_apples_each * sisters_count\n    total_apples_before = total_eaten + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount_after_4_years = 7320.5\n    years = 4\n\n    interest_rate = (amount_after_4_years / principal) ** (1 / years) - 1\n\n    return round(interest_rate * 100, 2)\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let the original number of soldiers in each row/column be x\n    # number of soldiers in original square array is x^2\n    # After 31 soldiers join, the array becomes (x+1) by (x+1) -> total soldiers = (x+1)^2\n    # The difference between the old array and new array should be 31 soldiers\n    # Therefore, the equation to solve is (x+1)^2 - x^2 = 31\n\n    # Expanding and simplifying the equation we get:\n    # x^2 + 2x + 1 - x^2 = 31\n    # 2x + 1 = 31\n    # 2x = 30\n    # x = 15\n\n    # Now we find the total number of soldiers in the new array:\n    # (x+1) * (x+1) -> (15+1)*(15+1) = 256\n    \n    return 256\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    first_part = 3.2 + 6.77 + 8.88\n    second_part = 6.77 + 8.88 + 6.3\n    third_part = 3.2 + 6.77 + 8.88 + 6.3\n    fourth_part = 6.77 + 8.88\n\n    ans = (first_part * second_part) - (third_part * fourth_part)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n\n    february_saved = total_saved - january_saved - march_saved\n\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original = 176\n    new = 88\n    percent_change = ((new - original) / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # time in minutes to paint one picture\n    total_time = 80  # total time available in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08 # 8%\n    num_years = 4\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** num_years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    children = 5\n    # Each of the other children gets at least one apple\n    minimum_apples_for_others = 1 * children\n    # Subtract the minimum apples for others from total to find maximum possible for Ann\n    max_apples_for_ann = total_apples - minimum_apples_for_others\n    \n    return max_apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "from sympy import divisors, gcd\n\ndef solution():\n    factors_of_M = factors_of_N = [3**i * 5**j for i in range(6) for j in range(6)]\n\n    valid_sums = []\n\n    # Check each combination where the gcd is 75 and count the divisors\n    for M in factors_of_M:\n        if gcd(M, 75) == 75:\n            for N in factors_of_N:\n                if gcd(N, 75) == 75 and gcd(M, N) == 75:\n                    if len(divisors(M)) == 12 and len(divisors(N)) == 10:\n                        valid_sums.append(M + N)\n\n    # The problem is constructed such that there will be only one unique solution to this\n    ans = valid_sums[0]\n    return ans\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combos for pants and shirts\n    pants_shirts_combos = shirts * pants\n    \n    # Combos for shoes when wearing pants\n    pants_shoes_combos = pants_shirts_combos * shoes\n    \n    # Combos for dresses with shoes or heels\n    dresses_combos = dresses * (shoes + heels)\n    \n    # Total combinations\n    total_combos = pants_shoes_combos + dresses_combos\n    \n    return total_combos\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy = symbols('book teddy')\n    equation1 = Eq(4*book + 8*tedy, 164)\n    equation2 = Eq(2*book + 3*tedy, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    \n    # Convert all masses to grams\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Calculate the mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Calculate the difference between the mass of the pack of soil and the pack of sand\n    mass_difference_g = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the mass difference back to kg and g\n    mass_difference_kg = mass_difference_g // 1000\n    mass_difference_g = mass_difference_g % 1000\n\n    return mass_difference_kg, mass_difference_g\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nina, james = symbols('nina james')\n\n    # Total number of buttons before giving away\n    equation1 = Eq(nina + james, 22)\n\n    # After Nina gave James 4 buttons, they have the same amount\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (nina, james))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 4 - incorrect * 2\n        if score == 29:\n            return correct\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern = [1, 2, 3, 4, 5]\n    length = 52\n    full_cycles = length // len(pattern)\n    partial_cycle_len = length % len(pattern)\n\n    sum_full_cycle = sum(pattern) * full_cycles\n    sum_partial_cycle = sum(pattern[:partial_cycle_len])\n\n    return sum_full_cycle + sum_partial_cycle\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_needed_per_kite = 0.36\n    total_paper = 4.8\n\n    kites_made = total_paper / paper_needed_per_kite\n\n    return int(kites_made)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_distance = 320\n    trees = 79\n    intervals = trees + 1\n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen the fisher traded 10 fish for 4 rabbits, which is a ratio of fish to rabbits as 10:4 or 5:2\n    fish_to_rabbit_ratio = 5 / 2\n    \n    # Oscar traded 5 rabbits for 6 packs of wheat, which is a ratio of rabbits to wheat packs as 5:6\n    rabbit_to_wheat_ratio = 5 / 6\n    \n    # Dennis wants 12 packs of wheat, \n    # Owen needs to figure out how many fish it represents in the fish-rabbit-wheat trading chain.\n    # First calculate how many rabbits 12 packs of wheat represent\n    rabbits_for_twelve_wheat = 12 / rabbit_to_wheat_ratio  # the inverse of rabbits:wheat ratio for 12 wheat packs\n    \n    # Now calculate how many fish these rabbits represent\n    fish_for_rabbits = rabbits_for_twelve_wheat * fish_to_rabbit_ratio\n    \n    return fish_for_rabbits\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    long_rod = Fraction(10) + Fraction(4, 5)\n    short_rod = Fraction(3, 10)\n\n    num_short_rods = long_rod / short_rod\n\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price_for_30 = 2800\n\n    cost_without_deal = 20 * single_laptop_price\n    cost_per_laptop_with_deal = deal_price_for_30 / 30\n    cost_with_deal_for_20 = 20 * cost_per_laptop_with_deal\n\n    savings = cost_without_deal - cost_with_deal_for_20\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange the singing performances\n    sing_perms = factorial(6)\n\n    # There are 5 \"slots\" between the singing performances where dancing performances can be placed\n    # D S D S D S D S D S D (S = Singing, D = Dancing)\n    # There are 7 places to put dancing performances: beginning, end, and 5 slots between singing.\n    # Choose 4 places out of 7 to place dancing performances\n    positions_to_choose = 7\n    dance_positions = factorial(positions_to_choose) // (factorial(4) * factorial(positions_to_choose - 4))\n\n    # Calculate total ways by multiplying permutations for singing and combinations for dancing positions\n    total_ways = sing_perms * dance_positions\n\n    return total_ways\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    penguins = symbols('penguins')\n\n    # Equation for giving 3 fish to each penguin with 5 fish left\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    # Solve the equation\n    solution = solve(equation1, penguins)\n\n    # Return the number of penguins\n    return solution[penguins]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    subtracted_instead_of_adding = -26\n    correct_result = incorrect_result - subtracted_instead_of_adding + 26\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_m_k = 4 / 5\n    kelly_height = matthew_height / ratio_m_k # Kelly's height is larger; divide Matthew's height by the ratio.\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 35 / 100 * 80\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Possible score combinations at half time, based on the final score 3-2:\n    # Team A could have 0, 1, 2, or 3 goals by half-time.\n    for goals_A in range(4):\n        # Team B could have 0, 1, or 2 goals by half-time.\n        for goals_B in range(3):\n            # For a valid half-time score, the number of goals scored by\n            # Team A in the second half should be non-negative\n            second_half_goals_A = 3 - goals_A\n            # Same for Team B, non-negative second-half goals\n            second_half_goals_B = 2 - goals_B\n            # It's a valid half-time score if both teams have scored\n            # an amount of goals in the second half that, when added\n            # to their half-time scores, equals the final score\n            if second_half_goals_A >= 0 and second_half_goals_B >= 0:\n                count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    \n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if (10 * a + b) + (10 * b + a) + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    total_cookies = 1002\n    # Let the number of cookies Emma baked be x.\n    # Then Clara baked 5 times as many cookies as Emma, so she baked 5x.\n    # The total is therefore x + 5x = 1002.\n\n    # We solve the simple equation 6x = 1002 for x.\n    emma_cookies = total_cookies / 6\n\n    return int(emma_cookies)\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n\n    ans = comb(num_students, num_monitors)\n    \n    return ans\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the total number of girls, and b is the total number of boys\n    g, b = symbols('g b')\n\n    # Number of girls and boys who can swim\n    swim_girls = (3 / 8) * g\n    swim_boys = (3 / 5) * b\n\n    # Number of girls and boys who cannot swim, which are equal\n    non_swim = 20 / 2 # As they are equal in number\n\n    # The number of girls and boys who cannot swim is thus (g - swim_girls) and (b - swim_boys)\n    eq1 = Eq(g - swim_girls, non_swim)\n    eq2 = Eq(b - swim_boys, non_swim)\n\n    # Total number of pupils (girls + boys)\n    total_pupils_eq = Eq(g + b, 2 * non_swim + swim_girls + swim_boys)\n\n    # Solve the system of equations for g and b\n    solutions = solve((eq1, eq2, total_pupils_eq), (g, b))\n\n    # Calculate the total number of pupils\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike is always the second in line, the number of rows and columns\n    # must be such that he is always one away from the edge in a rectangular array.\n    # To meet that condition, the dimensions of the array must be (Mike's row +1) and (Mike's column +1).\n    # The smallest such rectangle that is not a line (1xN or Nx1) is 3x3, with Mike in the position (2,2).\n\n    # Let's find suitable pairs of factors for student desk arrangements.\n    num_students = 0\n    for rows in range(3, 101):  # assuming a reasonable upper limit for a classroom size\n        for cols in range(3, 101):\n            # Check if Mike's position can be second from any edge in the array,\n            # meaning (2,2), (2,cols-1), (rows-1, 2), (rows-1, cols-1)\n            if 2 in (rows, cols) or (rows - 1) in (2, cols) or (cols - 1) in (2, rows):\n                num_students += rows * cols\n\n    return num_students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_half_weight = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = half_full_weight - mangoes_half_weight\n    \n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percent = 85\n    total_amount = 400\n    ans = (percent / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 8.5 - 4 * (x - 1.5) + 3.2 * (x - 2) - (2.5 * x + 3 * (2.5 - x))\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    ans = 32 * 125 * 23\n    return ans\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Let's denote the total number of sweets as x.\n    # According to the problem, Pip ate 3/5 of them and 16 were left for Bud.\n    # So, Bud has 2/5 of the sweets, which equals to 16.\n    \n    # Let's find x from the equation:\n    # (2/5) * x = 16\n    # x = 16 * (5/2)\n    \n    total_sweets = 16 * (5/2)\n    \n    return total_sweets\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    product = 6 * 5\n    percent_of_40 = (product / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_originally = 3\n    number_of_cups_mandy_wants = 5\n    \n    cost_per_cup = total_cost_for_3_cups / number_of_cups_originally\n    total_cost_for_mandy = cost_per_cup * number_of_cups_mandy_wants\n    \n    return total_cost_for_mandy\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    big_house_capacity = 4\n    \n    # Calculate the amount of rabbits that big houses can accommodate\n    big_houses_rabbits = big_houses * big_house_capacity\n    \n    # Calculate the amount of rabbits left for small houses\n    remaining_rabbits = total_rabbits - big_houses_rabbits\n    \n    # Calculate rabbits per small house\n    small_house_capacity = remaining_rabbits // small_houses\n    \n    return small_house_capacity\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days = 7  # Monday to Sunday is 7 days\n\n    total_earnings = average_daily_earnings * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += i**2\n        else:\n            ans -= i**2\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # There is one way to reach the 0th step (no steps)\n\n    for i in range(1, 7):\n        ways[i] = sum(ways[max(0, i-3):i])\n\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n\n    present_children = total_children - absent_children\n\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July (March, April, May, June, July)\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_result = 21 + 22 + 23\n    for i in range(1, sum_result + 1):\n        if 2 * 3 * i == sum_result:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Abigail and Ryan's ages\n    abigail, ryan = symbols('abigail ryan')\n    \n    # Establish the equations based on the problem statement\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    # Calculate Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance = 150\n\n    upstream_speed = speed_in_still_water - speed_of_current\n    time_upstream = distance / upstream_speed\n    \n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    num = None\n    for i in range(1, 100):\n        if i % 3 == 2 and i % 4 == 3 and i % 5 == 4:\n            num = i\n            break\n    return num\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4 if 56 % 4 == 0 else ((56 // 4) + 1) * 4\n    last_multiple = (92 // 4) * 4 if 92 % 4 == 0 else ((92 // 4)) * 4\n    \n    if first_multiple > last_multiple:\n        return 0\n    \n    count = (last_multiple - first_multiple) // 4 + 1\n    return count\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(60, 0, -1):\n        sum += i * sign\n        if i % 2 == 0:\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Only the ones digit of the base (999) will affect the ones digit of the result.\n    base_ones_digit = 9\n    \n    # 9^1 ends with 9\n    # 9^2 ends with 1\n    # 9^3 ends with 9\n    # 9^4 ends with 1\n    # ... and it repeats every 2 powers\n    # So, the powers of 9 alternate between ending in 9 and 1.\n\n    # Since 99 is odd, 999^99 will end with the same digit as 9^1, which is 9.\n    ones_digit = 9\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define Claire's current age as a symbol\n    claire_current_age = symbols('claire_current_age')\n    \n    # Set up the equation according to the problem\n    # In 6 years, Claire will be three times her current age.\n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n\n    # Solve the equation\n    current_age_solution = solve(equation, claire_current_age)\n\n    # Claire's age two years from now\n    claire_future_age = current_age_solution[0] + 2\n\n    return claire_future_age\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    late_departure = 15\n    late_arrival = 5\n    reduced_time_fraction = 11 / 12\n\n    # Let the original journey time be T\n    # The actual journey time = reduced_time_fraction * T\n    # It arrived late by late_arrival minutes and left late by late_departure minutes\n    # So, actual journey time = T + late_arrival - late_departure\n    # Setting the equations equal: reduced_time_fraction * T = T + late_arrival - late_departure\n    # Solving for T gives us: T = (late_departure - late_arrival) / (1 - reduced_time_fraction)\n    \n    T = (late_departure - late_arrival) / (1 - reduced_time_fraction)\n    \n    return T\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total = 5.42 * 25\n    part = 5.42 * 5\n    missing_number = (total - part) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # UK currency coins denominations in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Susan's bus fare in pence\n    bus_fare = 44\n\n    # Start with a large denomination (eg. a £2 coin) which is greater than the bus fare\n    # to minimize the number of coins that change hands\n    for coin in coins:\n        if coin > bus_fare:\n            change = coin - bus_fare\n            break\n            \n    # Counter for the smallest number of coins\n    num_coins = 1  # Initial coin paid by Susan\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            num_coins += 1\n            if change == 0:\n                break\n        if change == 0:\n            break\n\n    return num_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # The worst case scenario using the pigeonhole principle\n    # is that Jane could pick all marbles of one color before picking another color.\n    # We need to ensure she picks 4 different colored marbles.\n    \n    # Red (4), Green (7), Blue (6), Orange (2)\n    # In worst case, she could pick all blue (6), all red (4),\n    # all but one green (6) before she gets an orange one, which is the fourth color.\n    # Thus, total = blue + red + green (minus one) + orange \n    total = 6 + 4 + 6 + 1  # Orange does not need to be subtracted because it provides the 4th color\n    \n    return total\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_legs = legs_per_chicken * 9\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_climb = 3\n    night_slide = 1\n    effective_climb = day_climb - night_slide\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_climb\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_slide\n    \n    return day_count\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n-r))\n    \n    # The problem can be transformed into a problem of distributing 15\n    # indistinguishable items into 4 distinguishable boxes where each box has at least 1 item. \n    # This is a combination problem with repetition, which is C(n-1, k-1) = C(15, 3).\n    \n    ans = nCr(19 - 1, 4 - 1)\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorbikes, tricycles, vans = symbols('motorbikes tricycles vans')\n    wheels_m = 2  # each motorbike has 2 wheels\n    wheels_t = 3  # each tricycle has 3 wheels\n    wheels_v = 4  # each van has 4 wheels\n\n    # Equation 1: There are 35 more motorbike and van wheels than tricycle wheels.\n    equation1 = Eq(wheels_m * motorbikes + wheels_v * vans - wheels_t * tricycles, 35)\n    # Equation 2: There are 13 more tricycle and van wheels than motorbike wheels.\n    equation2 = Eq(wheels_t * tricycles + wheels_v * vans - wheels_m * motorbikes, 13)\n    # Equation 3: Total wheels.\n    equation3 = Eq(wheels_m * motorbikes + wheels_t * tricycles + wheels_v * vans, 101)\n\n    solutions = solve((equation1, equation2, equation3), (motorbikes, tricycles, vans))\n\n    # How many more motorbikes than vans are there?\n    more_motorbikes = solutions[motorbikes] - solutions[vans]\n\n    return more_motorbikes\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a, b = 2, 3\n    while a < 100:\n        a, b = b, a + b\n    return a\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Since the pencil cases cannot be empty, we will start with\n    # 1 pen in each, leaving us with 3 pens to distribute.\n    remaining_pens = 6 - 3\n\n    # We can consider this as a problem of placing 3 indistinguishable items\n    # into 3 distinguishable boxes, which is equivalent to finding the number\n    # of solutions to the equation x1 + x2 + x3 = 3, where x1, x2, and x3\n    # are non-negative integers. This is a problem of \"stars and bars\" or \"balls and urns\".\n\n    # The number of ways to do this is \"n+k-1 choose k\", where n is the number of pens\n    # and k the number of pencil cases, so here it would be \"3+3-1 choose 3\"\n\n    from math import comb\n\n    ans = comb(remaining_pens + 3 - 1, 3)\n    return ans\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tank_a, tank_b, tank_c, tank_d = symbols('tank_a tank_b tank_c tank_d')\n    tank_d = 41  # Given\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(tank_a, 5 * tank_b)\n    equation2 = Eq(tank_b, tank_c + 5)\n    equation3 = Eq(tank_c + tank_d, tank_a)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (tank_a, tank_b, tank_c))\n\n    return solutions[tank_b]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2 * i + 2)**2 - (2 * i)**2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    cups_needed = 30\n    gallons_needed = cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # Pip and Bud are also in the line, so we add 2 to the total\n    ans = people_in_front_of_pip + people_behind_bud + 2\n    return ans\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef count_valid_dates(year):\n    valid_dates_count = 0\n    for month in range(1, 13):  # 12 months\n        if month < 10:\n            month_str = '0' + str(month)\n        else:\n            month_str = str(month)\n        for day in range(1, 32):  # max 31 days\n            # Check if the day is valid for the month\n            if (month in [4, 6, 9, 11] and day > 30) or (month == 2 and (day > 29 or (day == 29 and not leap_year(year)))):\n                continue\n            if day < 10:\n                day_str = '0' + str(day)\n            else:\n                day_str = str(day)\n            date_str = str(year) + month_str + day_str\n            if date_str.count('0') == date_str.count('1') == date_str.count('2'):\n                valid_dates_count += 1\n    return valid_dates_count\n\ndef solution():\n    year = 2014\n    return count_valid_dates(year)\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # The sum of all 8 numbers is the average (6) multiplied by 8.\n    total_sum = 6 * 8\n\n    # Current sum for the given numbers without p and q.\n    current_sum = sum([4, 5, 6, 9, 3, 9])\n\n    # Sum of p and q.\n    sum_p_q = total_sum - current_sum\n\n    # Numbers given ordered\n    num_list = sorted([4, 5, 6, 9, 3, 9])\n\n    # To minimize q, we need to minimize p.\n    # Start by assuming p as the immediate greater number than the smallest number in the list, \n    # which maintains p < q but still makes the full list sorted.\n    for p in range(num_list[0] + 1, sum_p_q // 2 + 1):\n        q = sum_p_q - p\n        if q - num_list[-1] == 6 or num_list[0] - p == -6:\n            return q\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports.\n    both_sports = symbols('x')\n\n    # Given that the number of students who like football is three times who like both sports.\n    football = 3 * both_sports\n\n    # Given that the number of students who like basketball is four times who like both sports.\n    basketball = 4 * both_sports\n\n    # According to the Inclusion-Exclusion Principle:\n    # Total students = students who like football + students who like basketball - students who like both sports.\n    # 36 = football + basketball - both_sports\n    total_students_equation = Eq(football + basketball - both_sports, 36)\n    \n    # Solve the equation for x to find the number of students who like both sports.\n    solutions = solve(total_students_equation, both_sports)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    # The remainders indicate a common number in congruences when divided by 7, 11, and 13\n    # To find such number we look for a number n that satisfies:\n    # n % 7 = 3, n % 11 = 7, and n % 13 = 9\n    # Since 7, 11, and 13 are coprime, their product will be the step.\n    step = 7 * 11 * 13\n    # We need to find the smallest n that satisfies the congruences above\n    # Start with the smallest number that satisfies the first congruence\n    minimum = 3\n    while True:\n        # Check if the current minimum satisfies other two congruences\n        if (minimum % 11 == 7) and (minimum % 13 == 9):\n            break\n        # If not, increment by the step (LCM of 7, 11, 13)\n        minimum += step\n    # Since we need a five-digit number, we check if minimum is five digits\n    if len(str(minimum)) < 5:\n        minimum += step * (10**4 // step)  # Scale up to the smallest five-digit multiple of the step\n    return minimum\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    time_jacob = 3  # time taken by Jacob to reach home in hours\n    time_adam = 3 + 0.5  # time taken by Adam to reach home in hours (additional 30 mins)\n\n    speed_jacob = 80  # Jacob's speed in km/h\n    speed_adam = 60  # Adam's speed in km/h\n\n    # calculating distances\n    distance_jacob_home = time_jacob * speed_jacob\n    distance_adam_home = time_adam * speed_adam\n\n    # total distance between homes\n    total_distance = distance_jacob_home + distance_adam_home\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    difference = 5\n    term_index = 21\n\n    term = first_term + (term_index - 1) * difference\n\n    return term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def new_mult(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n\n    result = new_mult(new_mult(new_mult(1, 2), 3), 4)\n    result = new_mult(result, 5)\n\n    # Find the largest integer not exceeding the result\n    ans = int(result)\n\n    return ans\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # The prime factorization of 252 is 2^2 * 3^2 * 7\n    # To find the total number of factors, we use the formula:\n    # If n = p1^e1 * p2^e2 * ... * pk^ek, then the number of factors of n is (e1+1)(e2+1)...(ek+1)\n    \n    # For 252, the exponents are 2, 2, and 1 for the prime factors 2, 3, and 7, respectively.\n    factors_of_252 = (2 + 1) * (2 + 1) * (1 + 1)\n    return factors_of_252\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # According to the Pigeonhole Principle, putting n items into m containers,\n    # if n > m, then at least one container has more than floor(n/m) items.\n    # So here we take the ceiling of total_cakes divided by total_layers.\n\n    max_cakes_in_layer = -(-total_cakes // total_layers) # Ceiling division\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    GST_rate = 7 / 100\n    GST_paid = 0.91\n    \n    cost_before_GST = GST_paid / GST_rate\n\n    return cost_before_GST\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Worst case: Lucy takes one marble of each color before getting two of the same color.\n    # 1 blue + 1 yellow (worst case scenario without having two of the same color) + 1 (to ensure she has two of the same color).\n    return 1 + 1 + 1  # She must take at least 3 marbles to guarantee two marbles of the same color.\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    weight_kg = 2.49 + 3\n    weight_g = 670 + 80\n    total_weight_g = (weight_kg * 1000) + weight_g\n    return total_weight_g\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Least Common Multiple (LCM) will give the time in seconds when they'll meet\n    meet_time_in_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the hours and minutes from the seconds\n    hours = meet_time_in_seconds // 3600\n    minutes = (meet_time_in_seconds % 3600) // 60\n    seconds = meet_time_in_seconds % 60\n\n    # Calculate the time they meet\n    start_hour = 10  # 10 a.m. is the starting time\n    start_minutes = 0\n\n    meet_hour = start_hour + hours\n    meet_minutes = start_minutes + minutes\n    meet_second = seconds\n\n    # Adjust for any overflow\n    if meet_minutes >= 60:\n        meet_hour += meet_minutes // 60\n        meet_minutes = meet_minutes % 60\n    meet_hour = meet_hour % 24  # adjust in case of crossing to the next day\n\n    return f'{meet_hour:02d}:{meet_minutes:02d}:{meet_second:02d}'\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time = 60  # Total exercise time in minutes\n    cycling_fraction = 1/3\n    jogging_time = total_exercise_time * (1 - cycling_fraction)\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    justin_age = solve(equation, justin)\n\n    return justin_age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # Given arithmetic sequence: 22, 18, 14, 10, 6, 2\n    # Common difference (d) can be obtained by subtracting consecutive terms\n    common_difference = 18 - 22  # -4\n\n    # Last given term (a_n) in the sequence is 2\n    last_term = 2\n\n    # Next term in the sequence (n) is obtained by adding the common difference to the last term\n    n = last_term + common_difference\n\n    return n\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Total number of apples\n    total_apples = 30\n    # Number of children\n    children = 6\n    \n    # Because each child must get at least one apple and they must get different numbers of apples,\n    # let's start by giving one apple to each of the children.\n    # This ensures that each child gets an apple.\n    total_apples -= children\n    \n    # Now let's find the maximum number of apples one child can get.\n    # To maximize the number of apples for one child, we must give out the minimum number to others.\n    # Given the differences must all be at least 1, we can arrange the remaining apples in ascending order:\n    # 1, 2, ..., (children - 1), with the last child getting the rest.\n    \n    # Calculate the remaining apples after distributing the minimum to other children.\n    for i in range(1, children):\n        total_apples -= i\n        \n    # The last child gets the remaining apples.\n    max_apples_for_one_child = total_apples\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    eco_friendly_consumption = 72.8\n    tom_additional_gallons = 6 + 3/4\n    \n    sam_gallons = distance / eco_friendly_consumption\n    tom_gallons = sam_gallons + tom_additional_gallons\n    tom_consumption_rate = distance / tom_gallons\n    \n    return tom_consumption_rate\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # In the worst case scenario, Bart picks chips of the same color before getting two different ones.\n    # Since there are more brown chips, he could potentially pick all brown first.\n    # After picking all brown, the next chip he picks must be of a different color,\n    # because only red and yellow are left.\n    # So he needs to pick all 5 brown chips plus 1 more chip to get 2 different colors.\n\n    num_brown = 5\n    # Need to pick one more to ensure a different color\n    to_ensure_different_color = 1\n\n    # Total number of chips Bart needs to take out\n    num_chips = num_brown + to_ensure_different_color\n\n    return num_chips\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        num = int(f\"24572{i}\")\n        if num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum([(2*i + 1)**2 for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    # Linda has 2 shirts and 2 skirts\n    # She can pair each shirt with each of the skirts\n    # Using the Principle of Multiplication:\n    shirt_options = 2\n    skirt_options = 2\n    outfit_combinations = shirt_options * skirt_options\n\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = sum(str(i).count('6') for i in range(1, 101))\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    sequence = [1, 3, None, 27, 81]\n    ratio = sequence[4] // sequence[3]\n    sequence[2] = sequence[1] * ratio\n    return sequence[2]\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    a7 = 105\n    a8 = 120\n    common_difference = a8 - a7\n    a1 = a7 - (7 - 1) * common_difference\n    a100 = a1 + (100 - 1) * common_difference\n    return a100\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n    sum_base_10 = num1 + num2\n    ans = \"\"\n    while sum_base_10 > 0:\n        ans = str(sum_base_10 % 7) + ans\n        sum_base_10 //= 7\n    return ans if ans else \"0\"\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    \n    initial_ratio = Eq(oranges/lemons, 3/5)\n    final_ratio = Eq((oranges - 48)/lemons, 1/2)\n    solutions = solve((initial_ratio, final_ratio), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    num_rabbits = 8\n    num_days = 5\n    \n    total_carrots = carrots_per_day_per_rabbit * num_rabbits * num_days\n    \n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate how much of a bale each animal eats per day\n    horse_eats_per_day = 1 / 2\n    cow_eats_per_day = 1 / 3\n    sheep_eats_per_day = 1 / 12\n\n    # Calculate total consumption by all animals per day\n    total_eats_per_day = horse_eats_per_day + cow_eats_per_day + sheep_eats_per_day\n\n    # Calculate how many days the bales will last\n    days = 22 / total_eats_per_day\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    return (5/8) * 160\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother, daughter = symbols('mother daughter')\n\n    # When the daughter reaches the mother's age\n    equation1 = Eq(mother - daughter, 75)\n\n    # When the mother was the daughter's age\n    equation2 = Eq(mother - daughter, daughter - 3)\n\n    solutions = solve((equation1, equation2), (mother, daughter))\n\n    return solutions[mother]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    ans = 146 * 37\n    return ans\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef count_valid_dates(year):\n    count = 0\n    digits = [year // 1000, (year // 100) % 10, (year // 10) % 10, year % 10]\n    for month in range(1, 13):\n        if month < 10:\n            month_digits = [0, month]\n        else:\n            month_digits = [month // 10, month % 10]\n        for day in range(1, 32):\n            if day < 10:\n                day_digits = [0, day]\n            else:\n                day_digits = [day // 10, day % 10]\n            combined_digits = digits + month_digits + day_digits\n            if combined_digits.count(0) == combined_digits.count(1) == combined_digits.count(2):\n                count += 1\n    return count\n\ndef solution():\n    return count_valid_dates(2014)\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Situation: Isabella wants 3 red apples, but she picks without looking.\n    # To ensure she gets 3 red apples, she could pick all non-red apples \n    # and then 3 red apples.\n    \n    # Total non-red apples\n    non_red_apples = 11 + 7\n    \n    # Number of picks to ensure 3 red apples\n    picks_to_ensure_3_red = non_red_apples + 3\n    \n    return picks_to_ensure_3_red\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Maximum number of left-handed pupils (which can be all boys at most)\n    left_handed = total_pupils - right_handed\n    \n    # The smallest number of right-handed girls will be when all the left-handed pupils are boys\n    # and the remaining boys are right-handed.\n    # So, if there are any right-handed pupils remaining, they would have to be girls.\n    right_handed_girls = max(0, right_handed - (total_pupils - girls))\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.20\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "from itertools import combinations\n\ndef solution():\n    # Total number of games in a single round-robin tournament\n    # with 6 teams can be calculated using the combinations formula nC2 (6C2)\n    total_games = len(list(combinations(range(6), 2)))\n    \n    # In each game, 2 points are distributed (either 2 for the winner and 0 for the loser, or 1 each for a tie)\n    # Therefore, the total number of points distributed over the entire tournament is 2 times the total number of games\n    total_points = 2 * total_games\n    \n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n    \n    minibuses_needed = (children + minibus_capacity - 1) // minibus_capacity\n    \n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    numbers = [101, 97, 102, 99, 98, 103, -100]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane needs to get 4 different colored marbles, in the worst case scenario,\n    # she keeps drawing only 3 different colors without the fourth color, so she has\n    # to draw all of the marbles of these 3 colors.\n    \n    # Calculate the total number of marbles of the three most numerous colors\n    max_three_colors = sorted([4, 7, 6, 2], reverse=True)[:3]\n    total_marbles = sum(max_three_colors)\n    \n    # To ensure she gets the fourth color, she needs to draw one more marble than the total\n    # of the three most numerous colors.\n    return total_marbles + 1\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls, girls_swim + girls_not_swim)  # Total girls is the sum of girls who can swim and who cannot\n    equation3 = Eq(boys, boys_swim + boys_not_swim)  # Total boys is the sum of boys who can swim and who cannot\n    equation4 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of girls who can swim to girls who cannot\n    equation5 = Eq(boys_swim, boys_not_swim - 120)  # Boys who can swim is 120 less than boys who cannot\n    equation6 = Eq(girls + boys, 1690)  # Total number of pupils in the school\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Sum of pupils who cannot swim\n    not_swim_total = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return not_swim_total\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for i in range(1, 101):\n        if i % 2 == 0 and i % 3 == 0 and i % 5 == 0 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    # Initialize the number of trailing zeros and the current value of n\n    zeros = 0\n    n = 1\n\n    # We want to find how many times 10 is a factor of the factorial of n\n    # 10 can be factored into 2 and 5. Since there are always more 2s than 5s\n    # in the factorization of a factorial, we only need to count the number of 5s\n    while zeros < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            zeros += 1\n            temp //= 5\n\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 14)) # Since 7b < 41, b must be less than 6, and since a, b are primes we only check till 13\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_1 = 7 / 4\n    price_per_pc_2 = 8.5 / 6\n    ans = \"4pc\" if price_per_pc_1 < price_per_pc_2 else \"6pc\"\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # There are 6*6 possible outcomes when two dice are rolled.\n    total_outcomes = 6 * 6\n    \n    # Calculate the number of outcomes where the sum of the dice is greater than 10: \n    # These can only be (5, 6), (6, 5), and (6, 6).\n    favorable_outcomes = 3\n    \n    # The probability of rolling a sum greater than 10.\n    probability = favorable_outcomes / total_outcomes\n    \n    # The expected payout per game is 10 times the probability of winning.\n    expected_payout = 10 * probability\n    \n    # The expected cost (loss) per game is the bet minus the expected payout.\n    expected_loss_per_game = 1 - expected_payout\n    \n    # The expected total loss over 60 games.\n    total_expected_loss = 60 * expected_loss_per_game\n    \n    return total_expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_on_phone = 740\n    remaining_after_phone = salary - spent_on_phone\n    spent_on_rent = 0.75 * remaining_after_phone\n    remaining_after_rent = salary - spent_on_phone - spent_on_rent\n    equation = Eq(remaining_after_rent, salary / 5)\n\n    ans = solve(equation, salary)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_of_basket = total_weight_with_apples - weight_of_3_apples - (2 * (weight_of_3_apples / 3))\n\n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    numbers = [2, 3, 4]\n    all_permutations = set()\n\n    for i in range(1, len(numbers)+1):\n        all_permutations.update(permutations(numbers, i))\n\n    return len(all_permutations)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Initial time 02:31\n    hours, minutes = 2, 31\n    \n    # Convert all the time to minutes for easier calculations\n    total_minutes = hours * 60 + minutes\n    \n    # We need to find the next time when all digits 0, 1, 2, 3 appear together\n    # Loop until we find that time\n    while True:\n        total_minutes += 1  # Increase the time by one minute\n\n        # Convert the minutes back to hours and minutes\n        hours = total_minutes // 60 % 24  # Mod by 24 to ensure 24-hour format\n        minutes = total_minutes % 60\n\n        # Format the hours and minutes to get a 4-digit string\n        time_str = f\"{hours:02d}{minutes:02d}\"\n\n        # Check if all digits 0, 1, 2, 3 are in the time string\n        if all(digit in time_str for digit in \"0123\"):\n            break\n\n    # Once found, subtract the initial time from the total minutes to get the difference\n    answer = total_minutes - (2 * 60 + 31)\n\n    return answer\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    # After class, Pip drank 100ml and there was 150ml left, so before drinking it was 100ml + 150ml\n    before_drinking_after_class = 100 + 150\n    # Before class, Pip drank half of it, so the original amount is twice the amount before drinking after class\n    original_amount = before_drinking_after_class * 2\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(second_hour - first_hour, 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lynn_start, mary_start, lynn_left, mary_left = symbols('lynn_start mary_start lynn_left mary_left')\n    \n    equation1 = Eq(lynn_start, mary_start)\n    equation2 = Eq(lynn_left, lynn_start - 160)\n    equation3 = Eq(mary_left, mary_start - 58)\n    equation4 = Eq(mary_left, 3 * lynn_left)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (lynn_start, mary_start, lynn_left, mary_left))\n    \n    return solutions[lynn_left]\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    diamond_result = diamond(4, 2)\n    triangle_result = triangle(diamond_result, 6)\n\n    return triangle_result\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_on_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_on_monday\n    sold_on_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_on_tuesday\n    bag_weight = 3/4\n    \n    num_bags = remaining_after_tuesday / bag_weight\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60 / 100\n    tickets_remaining = 28\n    total_capacity = tickets_remaining / (1 - percent_sold)\n    return int(total_capacity)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # A divisor smaller than the quotient would give a larger quotient\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    sum = 0\n    for i in range(64, 43, -2):\n        sum = sum + i - (i-2)\n    return sum\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            correct_minuend = tens * 10 + ones\n            incorrect_subtrahend = 50 + 3\n            correct_subtrahend = 30 + 2\n            if correct_minuend - incorrect_subtrahend == 36:\n                correct_difference = correct_minuend - correct_subtrahend\n                return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n\n    num_jugs = -(-total_juice_ml // jug_capacity_ml)  # Ceiling division\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Initial total number of balls\n    target_percentage = 0.90  # Target percentage of red balls\n    blue_balls = 1  # Number of blue balls remains constant\n \n    # Calculate the number of red balls that would make up 90% of the total balls\n    # (total_balls - red_balls_removed) * 0.90 = 49 - red_balls_removed\n    red_balls_removed = 49 - (total_balls * target_percentage)\n\n    return int(red_balls_removed)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    total = 0\n    numerator = 100\n    denominator = 97\n    for i in range(0, 97):\n        total += numerator / denominator\n        numerator *= 99 - i\n        denominator *= 96 - i\n    return total\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n    \n    matches_weight = total_weight_with_matches - empty_box_weight\n    weight_per_match = matches_weight / number_of_matches\n    \n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    total_animals = 1300\n    total_legs = 3440\n    legs_per_cow = 4\n    legs_per_bird = 2\n\n    # Assuming all animals are birds, compute the \"extra\" legs if some are actually cows\n    legs_if_all_birds = total_animals * legs_per_bird\n    extra_legs = total_legs - legs_if_all_birds\n    \n    # Since each cow has two more legs than a bird, divide the extra legs by 2 to find the number of cows\n    cows = extra_legs // (legs_per_cow - legs_per_bird)\n    \n    return cows\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Assign symbols to the unknown velocities post-collision\n    v_x, v_y = symbols('v_x v_y')\n\n    # Conservation of momentum equations\n    # Momentum before impact = Momentum after impact\n    # Car 1 has momentum in the y-direction\n    # Car 2 has momentum in the x-direction and moving west implies negative direction\n    equation_x = Eq(500 * -30 + 500 * 0, 1000 * v_x)\n    equation_y = Eq(500 * 0 + 500 * 20, 1000 * v_y)\n\n    # Solve for the velocities\n    solutions = solve((equation_x, equation_y), (v_x, v_y))\n\n    # Calculate the magnitude of the velocity vector\n    v_magnitude = (solutions[v_x]**2 + solutions[v_y]**2)**0.5\n\n    return v_magnitude\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Start with the greatest 3-digit odd number and decrement by 2 to maintain oddness\n    number = 999\n    \n    while number >= 100:  # Ensure the number is 3-digit\n        if number % 9 == 0:  # Check if divisible by 9\n            tens_digit = (number // 10) % 10  # Extract the tens place digit\n            if tens_digit % 4 == 0:  # Check if tens place is divisible by 4\n                return number\n        number -= 2  # Decrement by 2 to check the next odd number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    ben_given_pens = 28\n    \n    # After giving Ben 28 pens, Jenny will have:\n    jenny_pens_after = jenny_pens - ben_given_pens\n    \n    # Since Jenny and Ben will have the same number of pens, Ben originally had:\n    ben_pens = jenny_pens_after\n\n    return ben_pens\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Distance between first and last tree\n    total_distance = (21 - 1) * 2\n    \n    # Number of lamp posts is equal to\n    # the total distance divided by the interval of lamp posts plus 1 \n    # (since there's one at each end)\n    num_lamp_posts = (total_distance // 10) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # 5 laptops + 4 DVD players = 14438\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    \n    # 1 laptop + 1 DVD player = 2960\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n\n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total weight of the original group, and n be the number of people in the original group.\n    x, n = symbols('x n')\n    \n    # The average weight of the original group before Aaron joined.\n    average_before_aaron = Eq(x / n, 61 - 45)\n    \n    # The average weight of the group after Aaron joined.\n    average_after_aaron = Eq((x + 45) / (n + 1), 61)\n    \n    # The average weight of the group after Ben joined.\n    average_after_ben = Eq((x + 45 + 71) / (n + 2), 62)\n    \n    # Solve the system of equations.\n    solutions = solve((average_before_aaron, average_after_aaron, average_after_ben), (x, n))\n    \n    # The original average weight before Aaron and Ben joined.\n    original_average = solutions[x] / solutions[n]\n    \n    return original_average\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    for triangle in range(10):\n        for square in range(10):\n            for pentagon in range(10):\n                if len(set([triangle, square, pentagon])) == 3:\n                    if 2 * (triangle + square + pentagon) == triangle * 10 + square:\n                        return triangle\n    return None\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101): # Ensure the numbers are distinct and j > i\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum([int(digit) for digit in pattern])\n    pattern_length = len(pattern)\n    \n    complete_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n    \n    total_sum = complete_patterns * pattern_sum\n    total_sum += sum([int(pattern[i]) for i in range(remaining_digits)])\n    \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # total cost in pounds\n    coffee_cost = 3.69  # coffee cost in pounds\n    milk_cost_pence = 89  # milk cost in pence\n\n    milk_cost = milk_cost_pence / 100  # converting pence to pounds\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)  # calculating the cost of sugar\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        if hour == (12 - hour) * 2:\n            return hour\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Balls in the worst case scenario without getting 4 of the same color:\n    # All 5 blue balls, All 4 orange balls and 3 yellow balls = 12 balls.\n    # The next ball, regardless of its color, will be the 4th ball of its color.\n    # Therefore, Sheila must take out this many balls to ensure she has 4 of the same color.\n    balls_needed = 5 + 4 + 3 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n     return 2 + 12 * (8 - 3) // 4\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    oranges_weight = 4.1\n    mangoes_weight = 2\n\n    total_cost = (orange_price_per_kg * oranges_weight) + (mango_price_per_kg * mangoes_weight)\n    \n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_count = len(numbers) + 1  # Including 'a'\n    \n    # Sum of all numbers including 'a'\n    total_sum = mean_value * total_count\n    \n    # Sum of given numbers\n    sum_given_numbers = sum(numbers)\n    \n    # Calculate 'a'\n    a = total_sum - sum_given_numbers\n    \n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work done by A in one day \n    work_a = 1 / 15\n    # Work done by B in one day\n    work_b = 1 / 10\n    # Work done by both in one day\n    work_both = work_a + work_b\n    # Total work done by A and B together for 4 days\n    work_done_4_days = work_both * 4\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n    # Days B needs to finish the remaining work\n    days_for_b_to_finish = remaining_work / work_b\n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the first half of the sequence\n    first_half_sum = sum(range(1, 14))\n    # As the sequence is symmetric, the second half has the same sum\n    second_half_sum = first_half_sum\n    # Add the two sums together to get the total sum\n    total_sum = first_half_sum + second_half_sum\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    num_students = 0\n    diff = 52\n    for girls_layer in range(1, 100):\n        boys = (girls_layer + 2)**2 - girls_layer**2\n        girls = (girls_layer + 1)**2 - (girls_layer - 1)**2\n        if boys - girls == diff:\n            num_students = (girls_layer + 2)**2\n            break\n    return num_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # Our aim is to minimize the number of test tubes, which means we want to\n    # perform the test in such a way that each test can indicate for multiple bottles.\n    # This is essentially a problem of expressing the number of bottles in binary form,\n    # since in binary, each digit represents an exponential increase in value (2^0, 2^1, 2^2, ...).\n    # If we take logarithm base 2 of the number of bottles, we can find the number of binary digits\n    # necessary to represent all bottles, which also indicates the minimum number of test tubes.\n\n    import math\n    \n    num_bottles = 1000\n\n    # Calculate the minimum number of test tubes required to represent all bottles in binary\n    min_test_tubes = math.ceil(math.log(num_bottles, 2))\n\n    return min_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    duck_legs = 4 * 2  # 4 ducklings with 2 legs each\n    goose_legs = 2 * 2  # 2 baby geese with 2 legs each\n    total_known_legs = duck_legs + goose_legs\n    lamb_legs = 36 - total_known_legs  # Total legs minus known legs\n    num_lambs = lamb_legs // 4  # Each lamb has 4 legs\n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    litres = 2.5\n    millilitres_per_litre = 1000\n    n = litres * millilitres_per_litre\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # Calculate the sweets before the fourth day\n    before_fourth_day = remaining_sweets * 4\n\n    # Calculate the sweets before the third day\n    before_third_day = before_fourth_day * 5\n\n    # Calculate the sweets before the second day\n    before_second_day = before_third_day * 6\n\n    # Calculate the sweets before the first day (initial number of sweets)\n    initial_sweets = before_second_day * 7\n\n    return initial_sweets\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    charlene, emerald, hebe = symbols('charlene emerald hebe')\n\n    # Hebe ate 1/4 and had 42 left, so total cookies with Hebe before eating were (1/4)*cookies + 42 = cookies\n    equation1 = Eq(hebe + hebe / 4, 42 + hebe)\n\n    # Emerald ate 1/3 and gave hebe cookies, so total cookies with Emerald before eating were (1/3)*cookies + 4 = cookies - hebe\n    equation2 = Eq(emerald / 3 + 4 + hebe, emerald)\n\n    # Charlene kept 1/2 and 8 and gave the remaining to Emerald\n    equation3 = Eq(charlene / 2 + 8 + emerald, charlene)\n\n    solutions = solve((equation1, equation2, equation3), (charlene, emerald, hebe))\n\n    return solutions[charlene]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n\n    num_kids = ((last_term - first_term) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams in the league.\n    n = symbols('n', integer=True)\n\n    # Each team plays n-1 other teams twice, so the total number of matches is n*(n-1).\n    # We need to find n such that n*(n-1)/2 = 30 (since each match is counted twice in n*(n-1)).\n    equation = Eq(n*(n-1)/2, 30)\n\n    # Solve the equation for n\n    num_teams = solve(equation, n)\n\n    # Filter out the negative solution, since a negative number of teams does not make sense.\n    ans = [team for team in num_teams if team.is_positive][0]\n\n    return ans\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_per_day = 720 / 5  # Calculate the number of sets made per day\n    total_days = 3600 / sets_per_day  # Calculate the total number of days needed to complete the order\n\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Define a function to calculate the number of ways to climb to a certain step\n    # This function is based on the Fibonacci sequence since the number of ways to get to step n\n    # is the sum of ways to get to step n-1 and the ways to get to step n-2\n    def num_ways_to_step(step):\n        if step == 1:\n            return 1\n        if step == 2:\n            return 2\n        return num_ways_to_step(step - 1) + num_ways_to_step(step - 2)\n    \n    # Step on the 5th step -> 2 subproblems: climbing to step 5 and climbing from step 5 to step 10\n    ways_to_step_5 = num_ways_to_step(5)\n    # After climbing 5 steps, we have 5 steps remaining, \n    # so we can reuse the num_ways_to_step function as the problem is same\n    ways_from_step_5_to_10 = num_ways_to_step(5)\n    \n    # Calculate total number of ways by multiplying the two subproblems\n    total_ways = ways_to_step_5 * ways_from_step_5_to_10\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    number = 2*2*2*3*8*5*5*25\n    zeros = 0\n    while number % 10 == 0:\n        zeros += 1\n        number //= 10\n    return zeros\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    from math import sqrt, floor, ceil\n\n    lower_bound = ceil(sqrt(40))  # Lowest integer square root above 40\n    upper_bound = floor(sqrt(50))  # Highest integer square root below 50\n\n    # Since we are looking for a square number between 40 and 50,\n    # there should only be one square number if any.\n    ans = None\n    for n in range(lower_bound, upper_bound+1):\n        square = n ** 2\n        if 40 < square < 50:\n            ans = square\n            break\n\n    return ans\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    total_water_ml = 150\n    water_per_cup_ml = 40\n    num_cups = 3\n\n    water_used = water_per_cup_ml * num_cups\n    water_left = total_water_ml - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let alice's current age be 'a' and her sister's age be 's'\n    alice, sister = symbols('alice sister')\n\n    # Given: Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n\n    # In 10 years' time, their total age will be 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # Solve the system of equations for alice and her sister\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    # Return Alice's current age\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    n1 = 1\n    while True:\n        if n1 * (n1 + 1) * (n1 + 2) * (n1 + 3) == 3024:\n            return n1 + 3\n        n1 += 1\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cards\n    bob, alan = symbols('bob alan')\n\n    # Given: Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Given: Colin gives Bob 25 cards\n    # Given: Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    # Return the number of cards Alan has\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from math import lcm\n\ndef solution():\n    # Find LCM of the pack sizes to ensure an equal number of packs\n    pack_lcm = lcm(6, 8, 9, 15)\n    \n    # Calculate the minimum number of packs needed to get at least 1000 markers\n    # Each LCM number of packs will contain pack_lcm markers\n    min_packs = -(-1000 // pack_lcm) # Ceiling division to get minimum packs\n\n    ans = min_packs * 4  # There are 4 types of packs\n    return ans\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    # Each handshake involves 2 students, so we divide by 2 to avoid double counting.\n    ans = (num_students * (num_students - 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n    \n    num_apples_anne = solve(total_apples, anne)\n    \n    return num_apples_anne[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest_num = min(numbers, key=lambda x: abs(x - target))\n    return closest_num\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    twenty_percent_of_ninety = 0.20 * 90\n    ninety_percent_of_twenty = 0.90 * 20\n    return abs(twenty_percent_of_ninety - ninety_percent_of_twenty)\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    # 0.1(1)992517 -> 1/9 + 0.099251(7)\n    # 0.2(3)4567   -> 2/9 + 0.034567\n    \n    # 0.099251(7), to fraction = x/99000\n    # n/99000 = 9925/99000 + 7/900 repeating portion\n    # n = 9925 + 7*100\n    \n    # 0.034567, to fraction = y/900000\n    # m/900000 = 34567/900000 + 7/9000 repeating portion\n    # m = 34567 + 7*1000\n\n    n = 9925 + 7 * 100\n    m = 34567 + 7 * 1000\n    \n    # Find the nth decimal place where 7 appears for both decimals\n    for i in range(1, 99000 * 900000):\n        if (i * n) % 99000 == 0 and (i * m) % 900000 == 0:\n            return i\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n\n    # Calculate the amount of water based on the ratio\n    water_amount = (water_ratio * orange_amount) / orange_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2*x - 5), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    target_average = 8.5\n    scores = [7.9, 8.3, 8.8, 8.6]\n    current_sum = sum(scores)\n    total_judges = 5\n\n    # Total score Ellie needs to get from all judges to have an average of at least 8.5\n    required_total_score = target_average * total_judges\n    # The score the final judge needs to give Ellie so she can achieve the target average\n    final_judge_score = required_total_score - current_sum\n\n    return final_judge_score\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Johnny's calculation\n    johnny_multiplication = quotient * remainder\n    johnny_addition = johnny_multiplication + divisor\n    \n    # Correct calculation\n    correct_number = (quotient * divisor) + remainder\n    correct = johnny_addition == correct_number\n\n    return correct_number if not correct else johnny_addition\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the interest rate per year as \"r\"\n    principal = 10000\n    interest = 816\n    r = symbols('r')\n    \n    # The interest earned at the end of the second year is the sum of interest from both years\n    # Since the interest is compounded annually, the equation for the total interest is:\n    # principal * r + principal * (1 + r) * r = interest\n\n    # The above equation simplifies to:\n    # principal * r + principal * r + principal * r ** 2 = interest\n    \n    equation = Eq(principal*r + principal*r*(1 + r), interest)\n    solution = solve(equation, r)\n\n    # We only need the positive solution because interest rate cannot be negative\n    positive_solution = [sol.evalf() for sol in solution if sol.evalf() > 0][0]\n    \n    # Converting the interest rate to a percentage\n    interest_rate_per_year = positive_solution * 100\n    \n    return interest_rate_per_year\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    return (43 - 7) // 2\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n    \n    # pages read in all days except the first and the last\n    remaining_pages = total_pages - first_day_pages - last_day_pages\n    \n    # The sequence of pages read each day forms an arithmetic progression.\n    # Since we know the first term (a), the last term (l), and the sum (S) of the progression,\n    # we can use the formula for the sum of n terms of an arithmetic progression S = n/2 * (a + l)\n    # to find n, the number of terms (including the first day and the last day).\n    \n    # The sum of arithmetic progression excluding the first and the last day is\n    # S' = remaining_pages = (n - 2)/2 * (a' + l'), where a + d = a' and l' + d = l\n    \n    # So,\n    # remaining_pages = (n - 2)/2 * ((a + d) + (l - d))\n    # 2 * remaining_pages = (n - 2) * (a + l)\n    # 2 * remaining_pages / (a + l) + 2 = n\n    \n    # We use the sum of n terms of an arithmetic progression:\n    # S = total_pages = n/2 * (first_day_pages + last_day_pages)\n    # n = 2 * total_pages / (first_day_pages + last_day_pages)\n    \n    n = 2 * total_pages / (first_day_pages + last_day_pages)\n    # Subtract the first and last day to find n - 2\n    n = n - 2\n    \n    # Now, using the remaining pages and n - 2 we can find d\n    # (n - 2) * (a + l + (n - 3) * d) / 2 = remaining_pages\n    # 2 * remaining_pages = (n - 2) * (a + l) + (n - 2) * (n - 3) * d\n    # d = (2 * remaining_pages - (n - 2) * (a + l)) / (n - 2) * (n - 3)\n    \n    d = (2 * remaining_pages - (n - 2) * (first_day_pages + last_day_pages)) / ((n - 2) * (n - 3))\n    \n    return int(d)\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Hannah's speed be x cm/s\n    hannah_speed = symbols('hannah_speed')\n\n    # Peter's speed is 15 cm/s faster than Hannah's\n    peter_speed = hannah_speed + 15\n\n    # The ratio of time taken by Peter and Hannah is 3:4 (time = distance/speed)\n    # Since the distance is the same, we can equate the ratios of their speeds\n    equation = Eq(3 / hannah_speed, 4 / peter_speed)\n\n    # Solve for Hannah's speed\n    hannah_speed_value = solve(equation, hannah_speed)[0]\n\n    return hannah_speed_value\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_minutes = 90\n    spent_multiple_choices = 23\n    spent_fill_in_blank = 35\n\n    remaining_time = total_minutes - (spent_multiple_choices + spent_fill_in_blank)\n\n    return remaining_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_length = 850  # in meters\n    train_speed = 30    # in meters per second\n    time = 45           # in seconds\n\n    # distance covered by the train = train's length + tunnel's length\n    distance_covered = train_speed * time\n\n    # tunnel's length = distance covered by the train - train's length\n    tunnel_length = distance_covered - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume original number of coins as 'f' for fifty-cent coins and 'd' for one-dollar coins\n    f, d = symbols('f d')\n\n    # Given that 2/7 of his coins were fifty-cent coins, so 5/7 must have been one-dollar coins\n    # f = 2/7 * (f + d)\n    # d = 5/7 * (f + d)\n    eq1 = Eq(f, 2/7 * (f + d))\n    eq2 = Eq(d, 5/7 * (f + d))\n\n    # After his mother gave him the coins\n    # f_new = f + 5*2 (because each fifty-cent makes $1 so 5 dollars will make 5/0.5 = 10 coins)\n    # d_new = d + 10\n    # It is also given that now he has twice as many one-dollar coins as fifty-cent coins\n    # d_new = 2 * f_new\n    eq3 = Eq(d + 10, 2 * (f + 10))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (f, d))\n\n    # We want the total number of coins he had at first, which is f+d\n    total_coins_initial = solutions[f] + solutions[d]\n\n    return total_coins_initial\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    entrants = ['Joe', 'Mike', 'Tina']\n    entrances = [1, 2, 3, 4]\n    count = 0\n    \n    for perm in permutations(entrants):\n        for e1 in entrances:\n            for e2 in entrances:\n                for e3 in entrances:\n                    # Joe and Mike cannot join the same entrance\n                    if e1 != e2 and (perm[0] != 'Joe' or perm[1] != 'Mike') and (perm[0] != 'Mike' or perm[1] != 'Joe'):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    # Number of regions created by n circles\n    circles = 5\n    regions_by_circles = 1 + circles * (1 + circles) // 2\n\n    # Each line can intersect a circle at most 2 times and can intersect other lines once\n    line = 1\n    additional_regions_by_line = circles * 2 + line\n\n    # Total regions\n    total_regions = regions_by_circles + additional_regions_by_line\n\n    return total_regions\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    cost_for_first_3_tons = 4 * 3\n    fixed_service_fee = 4\n    remaining_budget = 109 - cost_for_first_3_tons - fixed_service_fee\n\n    cost_per_additional_ton = 3\n\n    additional_tons_possible = remaining_budget // cost_per_additional_ton\n\n    total_tons = 3 + additional_tons_possible\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    money_spent = total_money - saved_money\n    \n    # Let's assume the amount spent on transportation is x\n    # Then the amount spent on food is 2x\n    # And together they must add up to the money spent, which is:\n    # x + 2x = 3x\n    # Hence,\n    # 3x = money_spent\n    \n    amount_spent_on_transportation = money_spent / 3\n    amount_spent_on_food = 2 * amount_spent_on_transportation\n    \n    return amount_spent_on_food\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_divisor = quotient + 1  # The smallest possible divisor that will still provide a remainder of 6\n    smallest_dividend = smallest_divisor * quotient + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy gardener to mow the lawn on his own\n    x = symbols('x')\n\n    # Quick gardener's working rate is 1 lawn per 12 hours\n    quick_rate = 1 / 12\n\n    # Lazy gardener's working rate is 1 lawn per x hours\n    lazy_rate = 1 / x\n\n    # Together they have a working rate that completes 1 lawn per 8 hours\n    combined_rate = 1 / 8\n\n    # Equation representing the combined working rate\n    equation = Eq(quick_rate + lazy_rate, combined_rate)\n\n    # Solve the equation for x\n    lazy_time = solve(equation, x)\n\n    return lazy_time[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples / 3 + oranges / 2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    total_fruits = solutions[apples] * 3 + solutions[oranges] * 2\n    \n    return total_fruits\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    bala, carl, daniel = symbols('bala carl daniel')\n\n    equation1 = Eq(bala, 320 + daniel)\n    equation2 = Eq(bala, 1/2 * (amelia + carl + daniel))\n    equation3 = Eq(carl, 3/4 * (amelia + bala + daniel))\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9  # Candy from Eve and Alice\n    number_of_girls = 3   # Eve, Alice, and Irene\n    # Divide the total candy by the number of girls\n    each_girl_gets = total_candy // number_of_girls\n    return each_girl_gets\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    given_tomatoes = 7\n\n    matthew_tomatoes = (belinda_tomatoes - given_tomatoes) / 2\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total = 182\n    dress_cost = 5 * x\n    skirt_cost = 3 * x\n    remaining = 5 * x\n\n    equation = Eq(total, dress_cost + skirt_cost + remaining)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    \n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    # Start with the first term\n    ans = 1 * 2\n\n    # Add subsequent terms\n    for i in range(2, 9, 2):  # The last sequence goes up to the 8th odd number, which is 15 (but excluded)\n        product = 1\n        for j in range(1, i + 1):  # Multiply the current sequence of odds, and multiply by 1 for each term.\n            product *= (2 * j - 1)\n        ans += product\n\n    # Last term is simply the 14th even number\n    ans += 14\n\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity = 990  # capacity of the jug in mL\n    cups_filled = 3\n    half_full_capacity = total_capacity / 2\n    capacity_per_cup = half_full_capacity / cups_filled\n    return capacity_per_cup\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "from math import lcm\n\ndef solution():\n    green_line_interval = 5\n    red_line_interval = 6\n\n    interval_lcm = lcm(green_line_interval, red_line_interval)\n    minutes_until_same_time = interval_lcm\n\n    hours, minutes = divmod(minutes_until_same_time, 60)\n    next_time_hour = 5 + hours\n    next_time_minute = minutes\n\n    # Convert to 24-hour format if needed\n    if next_time_hour >= 24:\n        next_time_hour -= 24\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n    position_from_back = total_cars - position_from_front + 1\n    return position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Olivia walks to the 101th tree which means she walks past 100 trees\n    distance_walked = 100 * 3  # 3 meters per tree\n\n    # Time taken to walk past 100 trees in minutes\n    time_taken = 3\n\n    # Olivia's walking speed is constant, so we calculate her speed\n    speed = distance_walked / (time_taken * 60)  # speed in meters per second\n\n    # Total distance to Olivia's home is 4000 meters\n    total_distance = 4000\n\n    # Time taken to travel to school is total distance divided by speed\n    # Time is converted to minutes by multiplying by 60\n    total_time = (total_distance / speed) / 60  # time in minutes\n\n    return total_time\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # Create the equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solve the equations for the price of an apple and a banana\n    prices = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * prices[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # Calculate n based on the sequence 4, 8, 12, ..., 124\n    n = 124 // 4\n\n    # Calculate the sum of squares based on the formula for the sum of squares of the first n numbers\n    sum_squares = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Since the sequence is 4^2, 8^2, ..., (4n)^2, we need to multiply by 4^2 = 16\n    ans = sum_squares * 16\n\n    return ans\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(n ** 2 for n in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    fish_per_rabbit = 5 / 2  # Owen traded 5 fish for 2 rabbits\n    wheat_per_rabbit = 7 / 4  # Oscar traded 4 rabbits for 7 packs of wheat\n    wheat_per_fish = wheat_per_rabbit / fish_per_rabbit  # Determine how many packs of wheat per fish\n    fish_for_14_wheat = 14 / wheat_per_fish  # Calculate how many fish for 14 packs of wheat\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = 'ABC'\n    people = 'LJAJ'\n    count = 0\n\n    for perm in permutations(people, 4):\n        entered = {entrance: perm[i] for i, entrance in enumerate(entrances)}\n        if all(value in perm for value in entered.values()):\n            count += 1\n\n    return count // 6  # Divide by 6 to account for repetitions\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers\n    # Since the total number of questions is 6, we have x + y = 6\n    # For every correct answer, Valerie scores 5 marks\n    # For every incorrect answer, 2 marks are deducted\n    # Therefore, the total score is 5x - 2y = 23\n    # We can now solve this system of equations\n    \n    # Let's use symbolic computation to solve this\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # create equations based on the problem statement\n    equation1 = Eq(x + y, 6)  # total questions equation\n    equation2 = Eq(5*x - 2*y, 23)  # total score equation\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n\n    # 65% of the animals were cows initially, so 35% were goats\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n\n    # After adding 240 animals, cows became 85% and the number of goats doubled\n    equation3 = Eq(c + 240, 0.85 * (c + g + 240))\n    equation4 = Eq(2*g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    age = solve(equation, justin)\n    \n    return age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    minutes_per_drawing = 124\n    number_of_drawings = 111\n\n    total_minutes = minutes_per_drawing * number_of_drawings\n\n    return total_minutes\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    result, _ = solve_congruence(*congruences)\n\n    ans = result\n    while ans < 100:\n        return ans\n        ans += lcm_of_moduli\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n\n    # Check if the cost is above $50 for promotion 2\n    if total_cost >= 50:\n        discount = 15\n    # Check if the cost is above $20 for promotion 1, and not $50\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n\n    final_pay = total_cost - discount\n\n    return final_pay\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_six_cases = books_per_case * 6\n    return total_books_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # Calculate arrangements for boys and girls separately\n    boys_arrangements = factorial(2) # 2 boys can switch places with each other\n    girls_arrangements = factorial(3) # 3 girls can be arranged in 3! ways\n\n    # Total arrangements is the product of boys and girls arrangements\n    # since the position of boys is fixed, only girls arrangements change\n    total_arrangements = boys_arrangements * girls_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Since the ages are distinct and Tom's age is a multiple of 3, Tom has to be 9 years old.\n    # Jason is younger than Tom, so Jason is 6 years old.\n    # Therefore, Adam is the one left, so he is 10 years old.\n    \n    return 10\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num_str = \"2023\"\n    count = 1\n    while True:\n        num = int(num_str * count)\n        if num % 11 == 0:\n            return count\n        count += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # After picking 2 red, 2 white, and 2 yellow, you could still have only 2 colors.\n    # Therefore, you need to pick one more ball to ensure 3 different colors.\n    return 2*3 + 1\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Define equations based on given relationships\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Get the number of triangles that equal a diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5/8\n    cost_of_laptop = total_money * fraction_used\n    return cost_of_laptop\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # The problem is to distribute 28 apples to 6 children such that each gets at least one apple and no two get the same number.\n    # We will start by giving 1 apple to each child except Avril.\n    # This leads to 28 - 5 = 23 apples remaining for Avril.\n    # We then have to ensure that the remaining children get a different number of apples each and more than 1 because Avril should get the most.\n    # The smallest distinct numbers are 2, 3, 4, 5, and 6, which sum up to 20. Thus Avril can get 28 - 20 = 8 apples.\n    \n    total_apples = 28\n    min_apples_per_child = 1  # Each of five other children gets at least one apple.\n    \n    # We assign the least number of distinct apples to the other children\n    other_children_apples = sum(range(min_apples_per_child + 1, min_apples_per_child + 6))\n    \n    # Avril gets the remaining apples\n    avril_apples = total_apples - other_children_apples\n    return avril_apples\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # ratio of speeds Jocye:Lori\n\n    # Calculate Jocye's speed based on the ratio\n    jocye_speed = lori_speed * ratio_jocye_lori\n\n    # Calculate the distance Jocye runs in 10 seconds\n    distance_jocye_runs = jocye_speed * 10\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    new_average = 70\n    initial_sum = initial_average * 2\n    new_sum = new_average * 3\n    new_number = new_sum - initial_sum\n\n    return new_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    difference = 23 - 16\n    last_term = 79\n    num_people = ((last_term - first_term) // difference) + 1\n    return num_people\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Ken's money = k, Lisa's money = l, Amount given = x\n    k, l, x = symbols('k l x')\n\n    # Equation-1: Initially, Ken had $15 more than Lisa\n    equation1 = Eq(k, l + 15)\n    \n    # Equation-2: After giving x amount, Ken has $21 less than Lisa\n    equation2 = Eq(k - x, l + x - 21)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (k, l, x))\n\n    # Return the amount Ken gave to Lisa\n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += (10 - i)\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a1 = symbols('a1')  # First day's cookies\n    d = 6  # Common difference: each day ate 6 more than the previous day\n    n = 5  # Number of terms (days)\n    \n    # Sum of arithmetic sequence formula: S_n = n/2 * (2*a1 + (n-1)*d)\n    # We know the total sum S_n = 100\n    S_n = 100\n    equation = Eq(n/2 * (2*a1 + (n-1)*d), S_n)\n\n    solution = solve(equation, a1)\n\n    return solution[0]\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    leave_school = datetime.strptime('15:22', '%H:%M')\n    catch_bus = datetime.strptime('16:01', '%H:%M')\n    bus_trip = datetime.strptime('18', '%M')\n    get_home = datetime.strptime('16:35', '%H:%M')\n\n    walking_to_bus = (catch_bus - leave_school).total_seconds() / 60\n    bus_drop_off = get_home - bus_trip\n    walking_home = (get_home - bus_drop_off).total_seconds() / 60\n\n    total_walking_time = walking_to_bus + walking_home\n\n    return total_walking_time\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_blue = 18\n    total_red = 6\n    total_orange = 8\n    \n    # Worst case: pick all blue and orange marbles first\n    worst_case = total_blue + total_orange\n    \n    # Ensure getting at least 2 red marbles\n    marbles_needed = worst_case + 2\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_num = int(''.join(map(str, sorted(digits))))\n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # The pattern is 1, 1, 2, 2, 2, 3, 3, 3, 3, ..., 8, 8, 8, 8, 8, 8, 8, 8\n    # Calculate the total number of elements in the sequence up to 8\n    total_numbers = sum([i for i in range(2, 10)])  # From 2 1's, 3 2's up to 8 8's\n\n    # Since the median is the middle value, find the position\n    median_position = (total_numbers + 1) // 2\n\n    # Determine which number occupies the median position\n    running_total = 0\n    for i in range(1, 9): # Loop through the numbers 1 to 8\n        running_total += i\n        if running_total >= median_position:\n            # Found the number at the median position\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students_facing_teacher = 30\n    for student in range(1, 31):\n        turns = 0\n        if student % 2 == 0:\n            turns += 1\n        if student % 3 == 0:\n            turns += 1\n        if turns % 2 != 0:\n            students_facing_teacher -= 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) // (4 - 1)\n    total_rows = 25\n    \n    last_term = first_term + (total_rows - 1) * difference\n    total_athletes = (total_rows * (first_term + last_term)) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Since there are 3 doors and 1 car, the initial probability of choosing the car is 1/3.\n    # If the host opens a door with a goat, which he will always do, switching will now give a 2/3 chance.\n    # This is because if you initially chose a goat (2/3 probability),\n    # the other goat will be revealed and switching will give the car.\n    # If the initial choice was the car (1/3 probability), the switch would result in a goat.\n\n    # Since the problem is asking for the best choice, you should switch to gate 2,\n    # as switching gives a higher probability to win the car (2/3).\n    # Hence, return 2 as the gate number to choose.\n    \n    return 2\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_sequence = num_terms * (first_term + last_term) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 2\n    while True:\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total = sum(n * (n + 1) for n in range(1, 32))\n    return total\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n    spent_on_CDs = 3 * original_sum / 4  # 3/4 spent on CDs\n    remaining_after_CDs = original_sum - spent_on_CDs\n    spent_on_batteries = remaining_after_CDs / 4  # 1/4 of remaining spent on batteries\n    remaining_after_batteries = remaining_after_CDs - spent_on_batteries\n    equation = Eq(remaining_after_batteries, original_sum / 3)\n\n    ans = solve(equation, original_sum)\n    return ans[0]\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    total_people = 1 + 12  # Tommy and his 12 friends\n    minutes_per_person = 142\n    total_time = total_people * minutes_per_person\n    return total_time\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # If 7 trainers can catch 7 pokemon in 7 minutes, \n    # then the rate of each trainer is 1 pokemon per 7 minutes.\n\n    # To catch 49 pokemon in 49 minutes, the number of trainers needed\n    # will be the same because each trainer can catch 7 pokemon in 49 minutes.\n    \n    return 7\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Total books = 7\n    # Students = 3\n    # Each student gets 1 book, so we need to choose\n    # 1 book for each student from the 7 books.\n    # Number of ways = 7C1 * 6C1 * 5C1\n    \n    ways = factorial(7) // (factorial(1) * factorial(7 - 1)) * \\\n           factorial(6) // (factorial(1) * factorial(6 - 1)) * \\\n           factorial(5) // (factorial(1) * factorial(5 - 1))\n    \n    return ways\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown value\n    op_plus = symbols('op_plus')\n\n    # Create the equation op_plus * 9 + 47 - op_plus = 84 + 27\n    equation = Eq(op_plus * 9 + 47 - op_plus, 84 + 27)\n\n    # Solve the equation for the unknown symbol\n    solutions = solve(equation, op_plus)\n    \n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The number is basically 928 repeated 33 times, as three digits (928) will be repeated to make up 99 digits.\n    # The number is:\n    # 928928928...928, with 33 repetitions of 928\n\n    # Since we're interested in the remainder when this large number is divided by 9,\n    # we can make use of the fact that the remainder of a repeated pattern when divided by 9\n    # is the same as the remainder of the pattern itself divided by 9\n    # since 9*111...111 (with the same number of digits as the pattern repeats) = 999...999 \n    # is always divisible by 9\n\n    # Find the remainder of 928 divided by 9\n    remainder_of_928 = 928 % 9  # This would be 2, since 9*103 = 927 and 928 - 927 = 1\n\n    # Since the number 928 is repeated 33 times, and 33 is divisible by 9,\n    # the remainder when the entire number is divided by 9 will simply be the\n    # same as the remainder of 928 divided by 9\n    remainder_of_repeated_928 = remainder_of_928 * 33 % 9\n\n    return remainder_of_repeated_928\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_people = 1500\n\n    percentage_incorrect = (incorrect_people / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let's denote the number of bars each person bought as n.\n    # Eliot's amount spent: 12p * n\n    # Maya's amount spent: 17p * n\n    # Eliot's change: 300p - 12n\n    # Maya's change: 400p - 17n\n    # According to the problem, their changes are the same: 300p - 12n = 400p - 17n\n\n    # Rearranging the equation to find n\n    change_diff = 17 - 12  # Difference in price per bar in pence\n    amount_diff = 400 - 300  # Difference in amount paid in pence\n    n = amount_diff / change_diff\n\n    return int(n)  # The number of bars should be an integer\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 0, 2, 3]  # Given digits\n    # To form the smallest 4-digit even number, we arrange the digits in ascending order\n    # and make sure the last digit (units place) is even.\n    digits.sort()\n    # If the smallest digit after 0 is even, place it at the end; otherwise, place the\n    # second smallest even digit at the end.\n    if digits[1] % 2 == 0:\n        even_digit = digits.pop(1)\n    else:\n        even_digit = digits.pop(2)\n    # Move any 0's to the second position to avoid creating a 3-digit number\n    if digits[0] == 0:\n        digits.insert(1, digits.pop(0))\n    # The final number will have the even digit at the end (units place)\n    digits.append(even_digit)\n    # Convert to integer\n    return int(''.join(map(str, digits)))\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let x, y, z be the three numbers, with x < y < z\n    # Given sum of three numbers\n    total_sum = 56\n    # Given average of smallest two numbers\n    avg_smallest_two = 14\n    # Given average of largest two numbers\n    avg_largest_two = 22\n\n    # From the given data we have\n    # x + y = avg_smallest_two * 2 = 28\n    # y + z = avg_largest_two * 2 = 44\n    # x + y + z = total_sum = 56\n\n    # Solving for y, we get\n    y = total_sum - (avg_smallest_two * 2 + avg_largest_two * 2) / 2\n\n    return y\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10\n    container_volume = 2\n\n    num_containers = total_volume / container_volume\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    # Jackson and Chloe's current ages sum up to 54\n    equation1 = Eq(jackson + chloe, 54)\n    \n    # In 3 years, Jackson will be 5 times older than Chloe\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n    \n    # Jackson's age after 3 years\n    jackson_age_in_3_years = solutions[jackson] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for num in range(41):\n        if '2' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    result1 = 66 * 2 + 66 * 3\n    result2 = 66 * 5\n\n    return result1 == result2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one pork dumpling and one bun\n    price_dumpling, price_bun = symbols('price_dumpling price_bun')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(6 * price_dumpling + 4 * price_bun, 92)\n    equation2 = Eq(3 * price_dumpling + 1 * price_bun, 41)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (price_dumpling, price_bun))\n\n    return solutions[price_dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_fare = 8.5\n    base_distance = 1.8\n\n    # Calculate additional fare paid by subtracting the base fare\n    additional_fare_paid = total_fare - base_fare\n\n    # Calculate distance covered with the additional fare\n    additional_distance = additional_fare_paid / additional_fare_per_km\n\n    # Total distance is the sum of base distance and additional distance\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Given that at least one student gets at least 3 apples.\n    # Using the pigeonhole principle.\n    # If every student gets 2 apples, the maximum number of students is:\n    max_students_with_two_apples = 80 // 2\n\n    # Since at least one student gets at least 3 apples,\n    # the number of students has to be one less than the maximum with two apples.\n    class_size = max_students_with_two_apples - 1\n\n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    bars_received = 8\n    original_bars = bars_received * 2\n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    children_per_big_car = 4\n    children_per_small_car = 2\n\n    big_cars_needed = boys_in_big_cars // children_per_big_car\n    small_cars_needed = girls_in_small_cars // children_per_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, yellow, blue = symbols('red yellow blue')\n    \n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    # current ages\n    julias_age = 7\n    mother_age = 36\n    father_age = 42\n\n    # current sum of ages\n    current_sum = julias_age + mother_age + father_age\n\n    # find the number of years until the sum of their ages is 100\n    years_until_sum_hundred = (100 - current_sum) // 3\n\n    return years_until_sum_hundred\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds = ounces / 16\n    kilograms = pounds / 2.2\n    return round(kilograms, 1)  # rounding to 1 decimal to find best approximation\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    sum_sequence = sum(range(5, 81)) + sum(range(5, 80))\n    return sum_sequence\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        abc = p[0] * 100 + p[1] * 10 + p[2]\n        bcd = p[1] * 100 + p[2] * 10 + p[3]\n        cde = p[2] * 100 + p[3] * 10 + p[4]\n        defg = p[3] * 100 + p[4] * 10 + p[5]\n        efg = p[4] * 100 + p[5] * 10 + p[6]\n        fgh = p[5] * 100 + p[6] * 10 + p[7]\n        ghi = p[6] * 100 + p[7] * 10 + p[8]\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    initial_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = initial_price - final_price\n    total_discount_percentage = (total_discount / initial_price) * 100\n    return total_discount_percentage\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    people = 'ABCDE'\n    count = 0\n    for p in permutations(people):\n        if p.index('A') < p.index('B') < p.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    result = 0\n    for i in range(3, 2019, 7):\n        result += 2019 / (i * (i + 7))\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # This looks like a pattern within the square of the numbers\n    # The pattern seems to be that the result equals the number of squares between the numbers\n    # For 10, the square is 100, and the next square number is 121 (which is 11^2), there is 1 number between - 1\n    # For 11, the square is 121, and the next square number is 144 (which is 12^2), there are 2 numbers between - 2^2 = 4\n    # We need to find the same for 55\n    # The square of 55 is 3025, and the next square number is 56^2 = 3136, there are 56 - 55 = 1 number between\n    # Therefore, the number we seek is simply 1^2.\n    \n    return 1**2\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_six_digit_numbers = sorted(set(int(''.join(p)) for p in permutations(digits, 6) if p[0] != '0'))\n    return all_six_digit_numbers[504]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # Since 0 cannot be at the hundreds place, we have two choices for the first digit (2 or 3)\n    # For the tens place, we can have any of the 3 digits\n    # For the units place, we can only have the remaining digit\n    # So, we have 2 choices for the first position, and then 2 choices for the second position\n    # (as one of the three digits is already used), and 1 choice for the last position\n    count = 2 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, then (36 - g) will be the number of boys\n    g = symbols('g')\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Equation representing the weighted average of girls and boys\n    equation = Eq(girls_average * g + boys_average * (total_students - g), total_average * total_students)\n\n    # Solve the equation to find the number of girls\n    number_of_girls = solve(equation, g)[0]\n\n    return number_of_girls\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    alice_rate = 1 / 40\n    bob_rate = 1 / 60\n    total_time = 27\n\n    # Equation representing the total work done by Alice and Bob\n    # alice_work + bob_work = 1 job\n    # alice_rate * (total_time - days_off) + bob_rate * total_time = 1\n    from sympy import symbols, Eq, solve\n    days_off = symbols('days_off')\n\n    equation = Eq(alice_rate * (total_time - days_off) + bob_rate * total_time, 1)\n\n    days_off_solution = solve(equation, days_off)\n\n    return days_off_solution[0]\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples_of_6_and_9 = []\n\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples_of_6_and_9.append(i)\n\n    return multiples_of_6_and_9\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red / white, 1/2)\n    equation2 = Eq(white / black, 3/4)\n    total_balls_eq = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, total_balls_eq), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Since it's an arithmetic sequence, we can find the common difference.\n    # d = a_n - a_(n-1) = 120 - 105 = 135 - 120\n    difference = 120 - 105\n    \n    # n-th term of arithmetic sequence: a_n = a_1 + (n-1)*d\n    # We know the 7th term is 105, so we can find the first term:\n    # 105 = a_1 + (7-1)*difference\n    first_term = 105 - (7 - 1) * difference\n    \n    # Now we find the 100th term with the formula.\n    # a_100 = a_1 + (100-1)*difference\n    hundredth_term = first_term + (100 - 1) * difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # You need to take out at most 3 socks to be sure to have at least one matching pair.\n    # If you take out 2 socks, they could be of different colors, one red and one blue.\n    # But when you take out the third sock, you will definitely have a matching pair \n    # since there are only two colors.\n\n    # Number of socks to take out to be sure of getting at least one matching pair:\n    return 3\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Age of the dogs combined four years ago\n    total_age_four_years_ago = 24\n    \n    # In 4 years, each dog ages 4 years, so together they age 4*3=12 years\n    age_increase_over_4_years = 4 * 3  \n    \n    # Their combined age now\n    current_combined_age = total_age_four_years_ago + age_increase_over_4_years\n    \n    # In 2 years, each dog ages 2 years, so together they age 2*3=6 years\n    age_increase_over_next_2_years = 2 * 3 \n\n    # Their combined age in 2 years' time\n    combined_age_in_2_years = current_combined_age + age_increase_over_next_2_years\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of marbles Ryan and Audrey have\n    ryan, audrey = symbols('ryan audrey')\n\n    # Set up the initial ratio\n    initial_ratio = Eq(ryan / audrey, 2 / 7)\n\n    # Set up the final ratio\n    final_ratio = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the system of equations\n    solution = solve((initial_ratio, final_ratio), (ryan, audrey))\n\n    return solution[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    \n    # Each hour, the hour hand moves by 360 degrees / 12 hours = 30 degrees\n    # Each minute, the hour hand moves by 30 degrees / 60 minutes = 0.5 degrees\n    # Each minute, the minute hand moves by 360 degrees / 60 minutes = 6 degrees\n    \n    hour_angle = (hour % 12) * 30 + (minute * 0.5)\n    minute_angle = minute * 6\n    \n    angle = abs(hour_angle - minute_angle)\n    \n    # The smaller angle between the hands is either angle or 360 - angle\n    ans = min(angle, 360 - angle)\n    \n    return ans\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_ate = 4\n    sisters_ate_each = 5\n    number_of_sisters = 4\n    apples_left = 20\n\n    total_apples_eaten = justin_ate + (sisters_ate_each * number_of_sisters)\n    initial_apples_in_basket = total_apples_eaten + apples_left\n\n    return initial_apples_in_basket\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # black + white + red\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n\n    black_beads_in_full_pattern = 3 * 2\n    black_beads = black_beads_in_full_pattern * full_patterns\n\n    if remaining_beads >= 3:\n        black_beads += 3\n    else:\n        black_beads += remaining_beads\n    \n    return black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    required_time = 13 + 23 + 8 + 27\n    school_time = datetime.strptime('7:45 AM', '%I:%M %p')\n    wake_up_time = school_time - timedelta(minutes=required_time)\n    return wake_up_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    sum = 0\n    for i in range(60, 0, -4):\n        sum += (i + (i-1) - (i-2) - (i-3))\n    return sum\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chickens, ducks, cows = symbols('chickens ducks cows')\n    # chickens = ducks\n    # 1 head each, legs: chicken = 2, ducks = 2, cows = 4\n    # Total heads = 51, total legs = 160\n    \n    # heads equation: chickens + ducks + cows = 51\n    # legs equation: 2*chickens + 2*ducks + 4*cows = 160\n    # Since chickens = ducks, we can use only chickens for both.\n    heads_eq = Eq(chickens + chickens + cows, 51)\n    legs_eq = Eq(2*chickens + 2*chickens + 4*cows, 160)\n\n    solutions = solve((heads_eq, legs_eq), (chickens, cows))\n    \n    return solutions[chickens]\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                totals.add(total)\n\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice / 5\n    abigail_drank = 200\n    anna_drank = 120\n    \n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    \n    return juice_left\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n    entrances = [1, 2, 3, 4]  # Represent the 4 entrances\n\n    for perm in permutations(entrances, 3):\n        # perm[0], perm[1], and perm[2] represent the entrances for Joe, Mike, and Tina respectively\n        if perm[0] != perm[1]:  # Joe and Mike cannot use the same entrance\n            total_ways += 1\n\n    return total_ways\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    ans = percentage * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # distance in nautical miles\n    time_days = 13   # time in days\n    time_hours = 22  # additional time in hours\n\n    total_time_hours = time_days * 24 + time_hours  # total time in hours\n\n    average_speed = distance / total_time_hours  # average speed in nautical miles per hour\n\n    return round(average_speed)  # rounding to the nearest integer\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    total_volume = 2 + 3\n    total_juice = (2 * 0.40) + (3 * 0.70)\n    \n    concentration = (total_juice / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    last_multiple = 150 // 11\n    count = last_multiple - first_multiple + 1\n    return count\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away = 777\n\n    final_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away\n\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + albert_and_bella + people_behind_albert\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age_now = symbols('age_now')\n\n    equation = Eq(age_now + 2, 2 * (age_now - 5))\n\n    solutions = solve(equation, age_now)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                ways.append((x1, x2, x3))\n                count += 1\n    return count, ways\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let the initial number of women be W\n    # Let the initial number of men be M\n    # After 36 women leave, the number of women is W - 36\n    # At this point, W - 36 = (3/5) * M\n    # Then, 48 men leave, the number of men is M - 48\n    # Now the number of men and women are equal: W - 36 = M - 48\n    \n    # From W - 36 = (3/5) * M, we get W = (3/5) * M + 36\n    # From W - 36 = M - 48, we substitute W: (3/5) * M + 36 - 36 = M - 48\n    # Solving for M: (3/5) * M = M - 48, simplifying (2/5) * M = 48\n    # Hence, M = 48 * (5/2), M = 120\n    \n    # Now finding the initial number of women W from initial equation: W = (3/5) * 120 + 36, W = 72 + 36, W = 108\n    \n    # Total people at the bus stop initially: T = M + W, T = 120 + 108\n    T = 120 + 108\n    return T\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    # Calculate the numerator and denominator separately\n    numerator = (1 * 3 * 8) + (2 * 6 * 16) + (3 * 9 * 24)\n    denominator = (1 * 2 * 4) + (2 * 4 * 8) + (3 * 6 * 12)\n    \n    # Divide the numerator by the denominator to get the final result\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(20, 31):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost for three pens at 50p each\n    amount_given = 5  # £5 given by Jennifer\n    change = amount_given - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    difference = english_books - chinese_books\n\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To ensure Fred wins, he needs to leave a multiple of 4 oranges (so George\n    # is forced to leave Fred with a multiple of 4 on his next move)\n    # Since there are 15 oranges, Fred needs to take 15 % 4 = 3 oranges\n    \n    # Game can be won by Fred if he ensures that he leaves a multiple\n    # of 4 oranges for George in each round, which forces George into a losing position\n    \n    # Therefore, Fred should take 3 oranges in his first turn\n    return 3\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime(\"7:15PM\", \"%I:%M%p\")\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cooking_duration\n    return start_time.strftime(\"%I:%M%p\").lstrip('0')\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    difference = 132 - 124 + 1  # +1 because we include both ends of the range\n    # At least 4 students are the same height, so apply Pigeonhole Principle\n    class_size = (difference - 1) * 3 + 4\n    return class_size\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    # Using Inclusion-Exclusion Principle for three sets\n    only_go_checkers = go_checkers - all_three\n    only_go_chess = go_chess - all_three\n    only_checkers_chess = checkers_chess - all_three\n\n    only_go = go - only_go_checkers - only_go_chess - all_three\n    only_checkers = checkers - only_go_checkers - only_checkers_chess - all_three\n    only_chess = chess - only_go_chess - only_checkers_chess - all_three\n\n    total_students = only_go + only_checkers + only_chess + only_go_checkers + only_go_chess + only_checkers_chess + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    target_sum_age = 48\n\n    # Let x be the number of years later\n    x = symbols('x')\n    \n    # Equation representing the sum of their ages in x years\n    equation = Eq(oliver_age_now + x + lin_age_now + x, target_sum_age)\n    \n    # Solve for x\n    num_years = solve(equation, x)\n    \n    return num_years[0]\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    poles = 40\n    distance_between_poles = 3\n\n    total_distance = (poles - 1) * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    cube_root = 245 ** (1/3)\n    if cube_root.is_integer():\n        p = 1\n    else:\n        from sympy import divisors\n        divs = divisors(245)\n        for d in divs:\n            if (d ** 3) % 245 == 0:\n                p = d ** 3 // 245\n                break\n    return p\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm = 736\n    m = cm / 100\n    return m\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48] ) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for the digits we need to find\n    E, S, A, M, O = symbols('E S A M O', integer=True)\n\n    # Define the constraints for each symbol (digit):\n    # They must be different and in the range [0, 9]\n    constraints = [E >= 0, E <= 9,\n                   S >= 0, S <= 9,\n                   A >= 0, A <= 9,\n                   M >= 0, M <= 9,\n                   O >= 0, O <= 9,\n                   E != S, E != A, E != M, E != O,\n                   S != A, S != M, S != O,\n                   A != M, A != O,\n                   M != O]\n\n    # Create the equation based on the problem statement\n    equation = Eq(E*1000 + S*100 + S*10 + E + 2018, S*10000 + A*1000 + S*100 + M*10 + O)\n\n    # Solve the equation with the given constraints\n    solutions = solve((equation,) + tuple(constraints))\n\n    # Since we want the value of S+A+S+M+O\n    sum_value = solutions[0][S] + solutions[0][A] + solutions[0][S] + solutions[0][M] + solutions[0][O]\n\n    return sum_value\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = (1/4) * this_year_production + 1  # Adding 1 ensures last year's production is more than 1/4 of this year\n    return int(last_year_production)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    students_absent = 1 + 1  # one on sick leave and one on personal leave\n    students_present = total_students - students_absent\n    \n    attendance_rate = (students_present / total_students) * 100\n    \n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return (8 * 15) // 5\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    common_difference = 26 - 22\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for n in range(2, 2018):\n        temp_sum = sum([i/n for i in range(1, n)])\n        total_sum += temp_sum\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percent = 30\n    total_amount = 270\n    ans = (percent / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    # Let a be the number of apples and o be the number of oranges.\n    # According to the problem statement, we have two equations:\n    # 3/8 = a/o (original ratio)\n    # 1/3 = (a-1)/o (new ratio after removing one apple)\n    \n    # Let's solve the two equations using sympy\n    from sympy import symbols, Eq, solve\n    \n    a, o = symbols('a o')\n    \n    # Original ratio equation\n    equation1 = Eq(a/o, 3/8)\n    # New ratio equation after removing one apple\n    equation2 = Eq((a-1)/o, 1/3)\n    \n    # Solving the equations for a and o\n    solutions = solve((equation1, equation2), (a, o))\n    \n    return solutions[o]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(100 - x))\n    \n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_savings = 2.4\n    total_savings_target = 150\n    days_needed = total_savings_target / daily_savings\n    weeks_needed = math.ceil(days_needed / 7)\n    \n    return weeks_needed\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    initial_sum = sum(range(1, 15))\n    target_sum = initial_sum + 2019\n    for n in range(1, target_sum):\n        if sum(range(n, n + 8)) == target_sum:\n            return n\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    # Given values\n    mixed_number = 6 + 1/2\n    divisor_fraction = 1/4\n    \n    # Perform division of fractions\n    ans = mixed_number / divisor_fraction\n    \n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Define the weights with a variable for chickens and express others in terms of chicken weight.\n    chicken_weight = 1  # Assume chicken_weight as a unit weight\n    rabbit_weight = 3 * chicken_weight  # Since 2 rabbits equal 6 chickens => 1 rabbit = 3 chickens\n    kangaroo_weight = (4 / 3) * rabbit_weight  # Since 3 kangaroos equal 4 rabbits\n\n    # Now express the weight of one kangaroo in terms of chickens\n    kangaroo_in_chickens = kangaroo_weight / chicken_weight\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim is the 4th in line from the front and 3rd from the back\n    # This implies there are 3 - 1 = 2 people behind him and 4 - 1 = 3 people in front of him\n    rows = 3 + 2 + 1\n\n    # Tim is 1st from left to right and 4th from right to left\n    # This implies there are 4 - 1 = 3 people to his right and 1 - 1 = 0 people to his left\n    columns = 4 + 0\n\n    # The total number of band members is rows * columns\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = 'STATISTICS'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_perms = factorial(len(word))\n    \n    for letter, count in letter_counts.items():\n        total_perms //= factorial(count)\n    \n    return total_perms\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    # Add the factors together first: 836 + 162 + 2\n    sum_of_factors = 836 + 162 + 2\n    # Multiply the common factor by the sum of other factors\n    ans = common_factor * sum_of_factors\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    number_of_notes = total_amount / note_value\n    return int(number_of_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Individual tasks\n    cut_wood = 3\n    weave_rope = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n\n    # The tasks that can be done simultaneously\n    # Weaving rope can be done while cutting wood.\n    # Soaking grass can be done while the wood is drying.\n    # Mowing grass can be done in any of the days when other tasks are also done.\n\n    # Overall time taken will be the sum of the maximum time from the tasks that can be done simultaneously\n    max_time_wood_and_rope = max(cut_wood + choose_wood, weave_rope)\n    max_time_dry_and_soak_grass = dry_wood + soak_grass\n\n    ans = max_time_wood_and_rope + max_time_dry_and_soak_grass + prepare_food\n    return ans\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is 7th from the front and she is exactly in the middle,\n    # which means there are 6 people in front of her and 6 people behind her.\n    # So we calculate total number of dwarves and Snow White in the line.\n    dwarves_in_line = (7 - 1) * 2\n    return dwarves_in_line\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # If each school had only 3 participants, which is one less than the required 4,\n    # we could have maximum schools. If one more school was added, the number of participants\n    # per school would have to be greater than 3 to maintain the total of 100 participants.\n    \n    # Therefore, using the Pigeonhole principle, we divide the total participants by 3 and round up.\n    max_schools = -(-100 // 3)  # Ceiling division to ensure at least 4 participants in the largest group\n    \n    return max_schools\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    # Let b represent the brother's age\n    # From the problem, 3 years ago, Ashley's age was a-3, and the brother's age was b-3\n    # The problem states that Ashley was 2 years older than her brother three years ago\n    # So, a-3 = (b-3) + 2\n    # Given that Ashley's current age (a) is 10, we substitute a with 10 in the equation\n    # 10 - 3 = (b - 3) + 2\n    # By solving the equation, we find the brother's current age (b)\n    \n    a = 10  # Ashley's current age\n    b = (a - 3) - 2 + 3  # Calculate the brother's age based on the relationship\n\n    return b\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    ans = 0\n    for i in range(1, 2019):\n        ans += (2018 + i) / 5 - (2018 + i) // 5\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if round((num / 6)**0.5)**2 == num / 6 and round((num * 6)**(1/3))**3 == num * 6:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    faster_speed = 48\n    slower_speed = 36\n    diff_distance = 70\n\n    # The ratio of distances is the same as the ratio of their speeds\n    ratio = faster_speed / slower_speed\n    \n    # Let the distance the slower train travels be x. Then the faster train travels x + 70.\n    # The distances they travel are proportional to the speeds.\n    # (x + 70) / x = ratio\n    x = diff_distance / (ratio - 1)\n\n    # Now calculate the total distance between the two stations.\n    # Since the faster train travels 70 km more, we add 70 to the slower train's distance.\n    total_distance = x + (x + 70)\n\n    return total_distance\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim is 4th from front and 3rd from back, so there are 4 + 3 - 1 people in his column\n    # (subtract one because Tim is counted in both 4th from the front and 3rd from the back)\n    total_columns = 4 + 3 - 1 \n\n    # Tim is 4th from left and 7th from right, so there are 4 + 7 - 1 people in his row\n    # (subtract one because Tim is counted in both 4th from left and 7th from right)\n    total_rows = 4 + 7 - 1\n\n    # Total number of band members is rows multiplied by columns\n    total_members = total_rows * total_columns\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "def solution():\n    from math import lcm\n    ans = lcm(2, 3, 8)\n    return ans\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Lily's and Gigi's wheat in tonnes as L and G respectively.\n    L, G = symbols('L G')\n\n    # Lily has more wheat than Gigi: L > G (this is not an equation we will use for solving)\n\n    # If Lily gave Gigi 36 tonnes of wheat, she would have 26 tonnes more than Gigi:\n    equation1 = Eq(L - 36, G + 36 + 26)\n\n    # Lily's wheat is 8 times Gigi's wheat: \n    equation2 = Eq(L, 8 * G)\n\n    # Solving the system of equations for L and G\n    solutions = solve((equation1, equation2), (L, G))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_money = 50 + 20 + 10 + 5  # Total money before losing the coin\n    brother_money = total_money / 3  # Brother has half of what Zoe had after losing the coin\n\n    # Check each coin to determine which one she could have lost\n    for lost_coin in [50, 20, 10, 5]:\n        if total_money - lost_coin == 2 * brother_money:\n            return lost_coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        increased_boat_people = 6 * (boat + 1)\n        decreased_boat_people = 9 * (boat - 1)\n        if increased_boat_people == decreased_boat_people:\n            return increased_boat_people\n        boat += 1\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    # The first equation represents giving 18 pieces each with 41 in excess\n    equation1 = Eq(total_chocolates, friends * 18 + 41)\n    \n    # The second equation represents shortage of 34 pieces when giving 23 pieces each\n    equation2 = Eq(total_chocolates, friends * 23 - 34)\n\n    # Solving the two equations for total chocolates and friends\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    # Calculate the remaining chocolates when giving 20 pieces each\n    remaining_chocolates = solutions[total_chocolates] - solutions[friends] * 20\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Rasidah's and Chai Seng's money\n    r, c = symbols('r c')\n    \n    # Equation 1: Rasidah had $48 less than Chai Seng\n    eq1 = Eq(r, c - 48)\n    \n    # Equation 2: Chai Seng spent 6/7 of his money\n    # Equation 3: Rasidah spent 3/5 of her money\n    # After spending, Chai Seng had 1/2 as much money left as Rasidah\n    eq2 = Eq((c * (1 - 6/7)), (r * (1 - 3/5)) / 2)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (r, c))\n    \n    return solutions[r]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # Loop through all possible combinations to find the one that matches the conditions\n    for thousands in range(1, 10):  # thousands digit from 1-9 (4 digits number)\n        for hundreds in range(thousands + 1, 10):  # hundreds digit greater than thousands digit\n            tens = thousands + hundreds  # tens digit is the sum of thousands and hundreds\n            ones = thousands + hundreds + tens  # ones digit is the sum of the other three digits\n\n            if tens >= 10 or ones >= 10:  # Ensure that tens and ones are single digits\n                continue\n\n            if ones > tens and ones > hundreds and ones > thousands:  # ones should be the largest digit\n                if sum([thousands, hundreds, tens, ones]) == 16:  # The sum of all digits must be 16\n                    return ones  # Return ones digit which is Tom's number's last digit\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = [0, 2, 4]\n    count = 0\n    \n    for first_digit in digits[1:]:  # First digit cannot be 0\n        for second_digit in digits:\n            if first_digit != second_digit:  # Digits must be different\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_num = 0\n    for perm in permutations([2, 4, 6, 8], 4):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_num:\n            max_num = num\n    return max_num\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance is the same uphill and downhill\n    distance_uphill = 3 * 5 \n    distance_downhill = 2 * 10\n    \n    total_distance = distance_uphill + distance_downhill\n    total_time = 3 + 2\n    \n    average_speed = total_distance / total_time\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed variables\n    initial_rate = 2  # dollars per kilowatt-hour for the first 5 kilowatt-hours\n    additional_rate = 1  # dollars for each additional kilowatt-hour\n    fixed_fee = 3  # dollars service fee\n    total_amount = 63  # total dollars available\n\n    # Calculate the cost of the first 5 kilowatt-hours\n    initial_cost = 5 * initial_rate\n\n    # Subtract the fixed fee and the initial cost from the total amount\n    remaining_amount = total_amount - fixed_fee - initial_cost\n\n    # Calculate the additional kilowatt-hours that can be used with the remaining amount\n    additional_kwh = remaining_amount / additional_rate\n\n    # Total kilowatt-hour is the sum of the first 5 and the additional kilowatt-hours\n    total_kwh = 5 + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    num = (54 * 7) / 63\n    return num\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congs = [(2, 3), (6, 7), (10, 11)]\n    result, _ = solve_congruence(*congs)\n    return result\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):   # x cannot be 0 because it is the first digit\n        for y in range(10):  # y can be any digit from 0-9\n            A = 10 * x + y   # Applying principle of place value to A\n            B = 400 + 10 * x + y  # Applying principle of place value to B\n            if B == 10 + 7 * A:   # Checking the given condition\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    num = 4320\n    fraction_base = 3 / 2\n    \n    # Prime factorization of num\n    # Get the prime factors of 4320\n    prime_factors = {}\n    # Start with the smallest prime\n    prime = 2\n    while prime * prime <= num:\n        while num % prime == 0:\n            num //= prime\n            prime_factors[prime] = prime_factors.get(prime, 0) + 1\n        prime += 1\n    if num > 1:\n        prime_factors[num] = 1\n    \n    # The highest power of 2 in 4320's prime factorization determines the maximum n\n    # Because 3/2 has a single '2' in the denominator, the maximum n depends on the number of times\n    # 2 appears in the prime factorization of 4320\n    ans = prime_factors.get(2, 0)\n    \n    return ans\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n\n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    weight1 = 20\n    concentration1 = 35 / 100\n\n    weight2 = 30\n    concentration2 = 60 / 100\n\n    total_weight = weight1 + weight2\n    total_juice = (weight1 * concentration1) + (weight2 * concentration2)\n\n    percent_concentration = (total_juice / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the original quantity in warehouse B\n    original_B = symbols('original_B')\n\n    # Write the equation based on the given problem\n    # Warehouse A had 50 + 12 = 62 tons after the shipment\n    # Warehouse B originally had original_B and shipped out 16 tons\n    # After the shipment warehouse A has 2 times the grain of warehouse B\n    equation = Eq(62, 2 * (original_B - 16))\n\n    # Solve the equation for the original quantity in warehouse B\n    solutions = solve(equation, original_B)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # The sequence is a list of consecutive prime numbers.\n    # The missing prime number between 31 and 41 is 37.\n    return 37\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total number of students who passed at least one test\n    total_passed = 43\n\n    # Number of students who passed each individual test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n\n    # At most, the number of pupils who passed all three tests cannot exceed\n    # the number of pupils who passed at least one test minus the sum of pupils\n    # who passed exactly two tests. Since we do not have the information about\n    # exactly two tests, we assume the minimum overlap, which is zero for the maximum\n    # number of pupils passing all three tests.\n\n    # At most, the number of pupils who passed all three tests can be\n    # the minimum number required for the sum to add up to the 43 pupils who\n    # passed at least one test, so we calculate that minimum:\n    min_passed_all_three = (passed_math + passed_science + passed_english) - total_passed\n\n    # If this number is negative, it means it is not possible for anyone to\n    # have passed all three subjects, so the actual maximum is zero.\n    max_passed_all_three = max(0, min_passed_all_three)\n\n    return max_passed_all_three\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    num_boxes = (cookies + box_capacity - 1) // box_capacity\n    return num_boxes\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    ans = 0.50 * 0.20 * 6000\n    return ans\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Ratio of fishes to rabbit\n    fishes_to_rabbit = 3 / 1\n    \n    # Ratio of rabbits to packs of wheat (we invert it to get packs of wheat to rabbits)\n    rabbits_to_packs_of_wheat = 2 / 3\n    \n    # Calculate the combined ratio (fishes to rabbit multiplied by rabbits to packs of wheat)\n    fishes_to_packs_of_wheat = fishes_to_rabbit * rabbits_to_packs_of_wheat\n    \n    # Find out how many fishes for one pack of wheat\n    # Because fishes_to_packs_of_wheat is the number of fishes for 3 packs of wheat, we divide by 3\n    fishes_per_pack_wheat = fishes_to_packs_of_wheat / 3\n    \n    return fishes_per_pack_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    people, benches = symbols('people benches')\n\n    eq1 = Eq(3 * benches - people, 7)\n    eq2 = Eq(people - 7 * benches, 3 * 7)\n\n    solutions = solve((eq1, eq2), (people, benches))\n\n    return solutions[people]\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n    return hours_hired\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    least_solution, _ = solve_congruence(*congruences)\n    \n    # Find the smallest number of pencils meeting the given constraints within the range 400 to 500\n    pencils = least_solution\n    while pencils < 400:\n        pencils += 4 * 5 * 7 # Since 4, 5, and 7 are pairwise coprime, the LCM is their product\n\n    return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    \n    total = ginnie + lyn\n    return total\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_money = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_money * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    favorite_number = (19 + 3) / 2\n    return favorite_number\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10, 2): # hundreds digit must be odd\n        for tens in range(10): # tens digit can be any digit from 0 to 9\n            for ones in range(10): # ones digit can be any digit from 0 to 9\n                if hundreds + tens + ones == 5: # check if the sum of the digits is 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    digit_length = 1\n\n    while total_digits < 1101:\n        pages += 9 * (10 ** (digit_length - 1)) * digit_length\n        if pages > 1101:\n            pages -= 9 * (10 ** (digit_length - 1)) * digit_length\n            break\n        digit_length += 1\n\n    remaining_digits = 1101 - total_digits\n    pages += (remaining_digits + digit_length - 1) // digit_length\n\n    return pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        if i % 2 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    n = 1\n    while True:\n        term = n * (n + 1) // 2\n        if term < 100:\n            largest_two_digit_number = term\n            n += 1\n        else:\n            break\n    return largest_two_digit_number\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_weight = (adam_ben + ben_carl + adam_carl) / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_spend = 23\n    book_price = 3.4\n    magazine_price = 1.6\n\n    # The maximum number of books Clara could buy with £23\n    max_books = total_spend // book_price\n\n    for books in range(int(max_books) + 1):\n        for magazines in range(int(total_spend // magazine_price) + 1):\n            if (books * book_price + magazines * magazine_price) == total_spend:\n                return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38 * 2\n    return sister_notebooks\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2*ashley)\n    equation2 = Eq(justin, 10*ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    return (n * (n + 1)) // 2\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    # Loop through possible ages in Base 10\n    for age in range(1, 100):  # Assuming Mr. Lv's age is below 100 for practicality\n        # Convert the age to a string in Base 3\n        base3_age = ''\n        temp_age = age\n        while temp_age > 0:\n            base3_age = str(temp_age % 3) + base3_age\n            temp_age //= 3\n        \n        # Add \"0\" at the end of the original Base 10 age\n        modified_age = str(age) + \"0\"\n        \n        # Check if the modified age is the same as the Base 3 age\n        if base3_age == modified_age:\n            return age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let o be the number of orchids, t be the number of tulips, and r be the number of roses\n    o, t, r = symbols('o t r')\n\n    # Ratio between orchids and tulips: orchids to tulips is 3:5\n    equation1 = Eq(o / t, 3 / 5)\n    \n    # After selling flowers, 2644 flowers are left\n    equation2 = Eq(o * (1 - 0.40) + t * (1 - 1/5) + r * (1 - 0.25), 2644)\n    \n    # The total number of flowers before selling\n    equation3 = Eq(o + t + r, 3616)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (o, t, r))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5 / 8) + (1 / 17)) * 8 + (9 / 17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            pair = 7007 // i\n            if pair % 7 == 0 and 10 <= pair <= 99:\n                factors.append(i)\n                factors.append(pair)\n                break\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    # Since the table can be rotated, fix one person's position and arrange the remaining 6.\n    ans = factorial(6)\n    return ans\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of the empty bottle\n    # Let y be the mass of the apple juice per unit\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + (5/6)*y, 4.6)\n    equation2 = Eq(x + (2/3)*y, 4.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Solution for x in kilograms, convert to grams by multiplying by 1000\n    mass_of_empty_bottle_in_grams = solutions[x] * 1000\n\n    return mass_of_empty_bottle_in_grams\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    pins = 10\n    piles = 3\n\n    count = 0\n    for x1 in range(1, pins - piles + 2):\n        for x2 in range(1, pins - x1 - piles + 3):\n            x3 = pins - x1 - x2\n            if x1 <= x2 <= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    for i in range(2, 56):\n        if is_prime(i) and is_prime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given\n    cookie_cost = 9\n    # 3 pieces of cheesecake cost same as 5 cookies\n    cheesecake_cost = (5 * cookie_cost) / 3\n    # 3 pieces of chocolate cake cost same as 2 pieces of cheesecake\n    chocolate_cake_cost = (2 * cheesecake_cost) / 3\n    # Cost for 1 piece of chocolate cake\n    return chocolate_cake_cost\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Set up the two equations based on the given problem\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations for basketball and volleyball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9\n    # The digits 2, 0, 1, and 9 are already used, their sum is 12\n    # Remaining digits are 3, 4, 5, 6, 7, 8 (we cannot reuse 0-9 as all digits must be different)\n    # We need to find a combination of A, M, and C such that (A + M + C) + 12 is divisible by 9\n    # and A, M, and C are different digits\n\n    for A in range(3, 10):  # A cannot be 0, 1, 2, or 9\n        for M in range(3, 10):  # M has the same restrictions and must not equal A\n            if M == A:\n                continue\n            for C in range(3, 10):  # C has the same restrictions and must not equal A or M\n                if C == A or C == M:\n                    continue\n                if (A + M + C + 12) % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    A, B, C = symbols('A B C')\n    \n    # Define the equations based on the question\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, 3 * A)\n    equation3 = Eq(C + A, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Extract the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    total_candy = 36\n    difference = 22 - 6  # Difference after eating\n    valeria_candy_now = (total_candy + difference) / 2\n    return int(valeria_candy_now)\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    days_per_quarter = 3\n    total_quarters = 4\n\n    total_days = days_per_quarter * total_quarters\n\n    return total_days\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    decimal_rep = \"857142\"  # Pattern that repeats\n    sum_of_digits = sum(int(decimal_rep[i % len(decimal_rep)]) for i in range(58))\n    return sum_of_digits\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    melissa, mother, years_passed = symbols('melissa mother years_passed')\n\n    # Melissa's age 8 years ago was 8, so now she is melissa = 8 + years_passed\n    # Mother's age 8 years ago was 32, so now she is mother = 32 + years_passed\n    # The current age of Melissa's mother is three times Melissa's current age\n    equation1 = Eq(mother, 32 + years_passed)\n    equation2 = Eq(melissa, 8 + years_passed)\n    equation3 = Eq(mother, 3 * melissa)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (melissa, mother, years_passed))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert recurring decimals to fractions\n    recurring_decimal = 4 + Fraction(73, 99)\n    non_recurring_decimal = 4.73\n    another_non_recurring_decimal = 4.737\n    mixed_recurring_and_non = 4 + Fraction(737, 999)\n\n    # Create a list of the decimal values\n    decimals = [\n        float(recurring_decimal),\n        non_recurring_decimal,\n        4.77,  # There is no need to do anything with a trivial non-recurring decimal\n        float(mixed_recurring_and_non)\n    ]\n\n    # Find the smallest decimal\n    smallest_decimal = min(decimals)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n\n    # Reverse Joel's action\n    joel_half_plus_2 = remaining_plants + 2\n    remaining_plants_after_joel = joel_half_plus_2 * 2\n\n    # Reverse Valerie's action\n    valerie_half_plus_3 = remaining_plants_after_joel + 3\n    remaining_plants_after_valerie = valerie_half_plus_3 * 2\n\n    # Reverse Ethan's action\n    ethan_half_plus_1 = remaining_plants_after_valerie + 1\n    original_plants = ethan_half_plus_1 * 2\n\n    return original_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    # Total distance the train needs to cover to be completely out of the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time is distance divided by speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    return 33 + 29 + 34 + 28 + 27 + 30\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # Point P forms a right triangle with each edge and the cube's diagonal.\n    # Let x be the side length of the cube. Then:\n    # PB corresponds to a face diagonal, which has length x * sqrt(2)\n    # PC corresponds to an edge, which is the side length x itself\n    # PD corresponds to a space diagonal, which has length x * sqrt(3)\n    # PG corresponds to half the space diagonal, since G is the center, so it's (x * sqrt(3)) / 2\n\n    # Create an equation for each condition\n    x = Symbol('x')\n    equation1 = Eq(x * (2 ** 0.5), 60 * (10 ** 0.5))\n    equation2 = Eq(x, 60 * (5 ** 0.5))\n    equation3 = Eq(x * (3 ** 0.5), 120 * (2 ** 0.5))\n    equation4 = Eq((x * (3 ** 0.5)) / 2, 36 * (7 ** 0.5))\n\n    # Solve the system for x\n    # Since we are looking for the side length, it suffices to just solve one equation\n    x_value = solve(equation2, x)[0]\n\n    # PA corresponds to the side length, since A and P are on the same face\n    PA = x_value\n\n    return PA\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of eggs in the basket at first.\n    x = symbols('x')\n\n    # First sale: x / 2 + 16\n    # Second sale: (x - (x / 2 + 16)) / 2 - 7\n\n    # Equation based on the sales and the final number of eggs left:\n    # x - ((x / 2 + 16) + ((x - (x / 2 + 16)) / 2 - 7)) = 18\n    \n    equation = Eq(x - ((x / 2 + 16) + ((x - (x / 2 + 16)) / 2 - 7)), 18)\n    initial_eggs = solve(equation, x)\n\n    return initial_eggs[0]\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    P1, P6 = symbols('P1 P6')\n    \n    # P6 students are counted as 1 each, P1 students are counted as 0.5 each since 2 P1 students carry 1 bucket\n    equation1 = Eq(P6 * 2 + P1 * 0.5, 180)\n    \n    # There are a total of 120 students\n    equation2 = Eq(P1 + P6, 120)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (P1, P6))\n    \n    return solutions[P1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_first_toss = 2  # Heads or Tails\n    outcomes_second_toss = 2  # Heads or Tails\n    \n    total_outcomes = outcomes_first_toss * outcomes_second_toss\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    # There are 5 teams, so we need to calculate the number of ways to choose 2 teams out of 5\n    # without taking order into account. This is a combination problem.\n    from math import comb\n\n    teams = 5\n    # Number of matches is the number of ways to choose 2 teams from 5\n    matches = comb(teams, 2)\n\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a basketball and volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Return the cost of each volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Ratios\n    fish_to_rabbit = 3 / 1\n    rabbit_to_wheat = 2 / 3\n    \n    # Calculate fish to wheat ratio by multiplying the two ratios\n    fish_to_wheat = fish_to_rabbit * (1 / rabbit_to_wheat)\n    \n    # Simplify it to find the number of fish per pack of wheat\n    ans = fish_to_wheat\n    \n    return ans\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's initial solution\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    johnnys_answer = (quotient * remainder) + divisor\n    \n    # Now, let's find the mistake and the correct answer\n    # Johnny has an error in multiplier. Instead of multiplying the quotient by a remainder,\n    # he must multiply quotient by a divisor.\n    correct_product = quotient * divisor\n    \n    # Also, he correctly adds the remainder, but on the incorrect product\n    correct_answer = correct_product + remainder\n    \n    # Return False if his answer is not correct along with the correct answer\n    return (johnnys_answer != correct_answer, correct_answer)\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans, ways\n\nans, ways = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    total_kg = 66.5\n    boxes_for_66_5kg = (boxes_for_14kg / 14) * total_kg\n    return int(boxes_for_66_5kg)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    eddie_future_age = 18\n    age_difference = mike_current_age - eddie_current_age\n    \n    mike_future_age = eddie_future_age + age_difference\n    \n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    students = symbols('students')\n    \n    # Initial state equation: boys = 0.40 * students\n    # After state equation: boys - 16 = (2 / 15) * (students + 16)\n    # Solving the two equations to find the total number of students\n    initial_state = Eq(0.40 * students, (2 / 15) * (students + 16) + 16)\n    solutions = solve((initial_state,), (students,))\n    \n    # Find the number of boys initially and subtract 16 to get the current number of boys\n    initial_boys = solutions[students] * 0.40\n    current_boys = initial_boys - 16\n\n    # Calculate the current total number of students\n    total_students_now = current_boys / (2 / 15) - 16\n\n    # Calculate the number of girls now by subtracting the current number of boys from the total students\n    current_girls = total_students_now - current_boys\n    return int(current_girls)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = ['2', '7', '9']\n    prime_numbers = set()\n\n    for i in range(1, len(digits) + 1):\n        for perm in permutations(digits, i):\n            num = int(''.join(perm))\n            if isprime(num) and num < 100:\n                prime_numbers.add(num)\n    \n    return len(prime_numbers)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions, then calculate\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    first_expr = numerator / denominator\n\n    second_numerator = 3.5 + Fraction(14, 3) + Fraction(32, 15)\n    second_denominator = 0.5 * (Fraction(21, 20) + 4.1)\n    second_expr = second_numerator / second_denominator\n\n    ans = first_expr / second_expr\n    return float(ans)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Iterate over all four-digit numbers for N\n    for N in range(1000, 10000):\n        str_N = str(N)\n        # Iterate over all possible positions for the digit to be removed\n        for i in range(4):\n            # Create the three-digit number M by removing one digit\n            M = int(str_N[:i] + str_N[i+1:])\n            # Check if the difference between N and M is 2021\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Equations based on the problem statement\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n\n    both = (swimming + jogging) - (total_students - neither)\n    \n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A can do 1/15 of the job per day\n    # B can do 1/10 of the job per day\n\n    days_worked_together = 4\n\n    # Total work done by both in 4 days\n    work_done_together = days_worked_together * (1/15 + 1/10)\n\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_together\n\n    # B can do remaining work in\n    days_for_b_to_finish = remaining_work / (1/10)\n\n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    expression1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    expression2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    ticket_price = 112\n    number_of_tickets = 16\n    total_cost = ticket_price * number_of_tickets\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n    num_trees = (road_length // tree_distance) + 1 # Trees at each end count as 1 each\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5   # Linda's rate in problems per minute\n    cici_rate = 1 / 6    # Cici's rate in problems per minute\n\n    combined_rate = linda_rate + cici_rate  # Combined rate in problems per minute\n\n    minutes = 2 * 60  # Total time in minutes\n\n    total_problems = combined_rate * minutes  # Total problems they can do together\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_initial = 37\n    john_initial = 15\n    amy_gives = (amy_initial - john_initial - 4) / 2\n    return amy_gives\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n    \n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    odd_number = 15\n    return odd_number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n    wait_time = bus_interval - (late_time % bus_interval)\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the quantities of each prize\n    X, Y, Z = symbols('X Y Z')\n\n    # Now let's write down the equations based on the given information\n    equation1 = Eq(X, Y + 83) # There are 83 more X than Y\n    equation2 = Eq(Z, X + 24) # There are 24 more Z than X\n    equation3 = Eq(X + Y + Z, 283) # Total number of prizes is 283\n\n    # Solving the equations for X, Y, and Z\n    solutions = solve((equation1, equation2, equation3), (X, Y, Z))\n\n    # Returning the number of Prize Y\n    return solutions[Y]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Number of units of grass needed for 1 goat for 15 days = 1 * 15 = 15\n    # Number of units of grass 14 goats will eat in 15 days = 14 * 15\n    # Number of units of grass needed for 1 rabbit for 8 days = 1 * 8 = 8\n    # Number of units of grass 70 rabbits will eat in 8 days = 70 * 8\n\n    # Since the pasture can feed either the goats or the rabbits, we equate their grass consumption\n    # 14 goats * 15 days of grass = 70 rabbits * 8 days of grass\n    # 1 goat = 4 rabbits in terms of grass consumption \n\n    # Total grass units consumed by all animals\n    total_grass = 14 * 15\n\n    # Since 1 goat eats as much grass as 4 rabbits do in a day:\n    # Replacing 1 goat with 4 rabbits in grass consumption for the provided ratio\n    # Total daily grass consumption by 17 goats and 20 rabbits\n    daily_grass_consumption = 17 * 4 + 20\n\n    # Number of days the pasture can feed 17 goats and 20 rabbits\n    days = total_grass / daily_grass_consumption\n\n    return days\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    num_people = 67\n    total_cost = cost_per_person * num_people\n    return total_cost\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    total = tens + tenths + hundredths\n    return total\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Mr Chan's and Mr Toh's money\n    chan_money, toh_money = symbols('chan_money toh_money')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(1/4 * chan_money, 1/3 * toh_money + 33)\n    equation2 = Eq(chan_money + toh_money, 1000)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chan_money, toh_money))\n\n    return solutions[toh_money]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of erasers each person has\n    sandra, tasha, riley = symbols('sandra tasha riley')\n    \n    # Set up the equations based on the problem description\n    equation1 = Eq(sandra, tasha / 3)  # Sandra has 1/3 of Tasha's erasers\n    equation2 = Eq(riley, (3/5) * sandra)  # Riley has 3/5 of Sandra's erasers\n    equation3 = Eq(tasha - riley, 60)  # Tasha has 60 more erasers than Riley\n\n    # Solve the system of equations for the number of erasers each person has\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n    \n    return solutions[riley]\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climbed_distance = 0\n    day = 0\n    slide_increase = 1\n\n    while climbed_distance < height:\n        day += 1\n        climbed_distance += 10  # climb 10 meters each day\n\n        if climbed_distance >= height:\n            break\n\n        climbed_distance -= slide_increase  # slide down increasing distance each night\n        slide_increase += 1\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    def triangle_operation(n, k):\n        return sum(int(str(n) * i) for i in range(1, k + 1))\n    \n    ans = triangle_operation(4, 3)\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # The original password \"Angel\" is represented by the numbers \"0141705021\"\n    angel_numbers = \"0141705021\"\n    angel_letter_counts = [angel_numbers.count(str(digit)) for digit in range(10)]\n\n    # The attempted password for \"Devil\" is \"4005220912\"\n    devil_numbers = \"4005220912\"\n    devil_letter_counts = [devil_numbers.count(str(digit)) for digit in range(10)]\n\n    # Check if the letter counts for \"Devil\" match those of \"Angel\"\n    if devil_letter_counts == angel_letter_counts:\n        return True  # Andy can unlock the treasure chest\n    else:\n        # Construct the correct password for \"Devil\"\n        correct_password_numbers = \"\".join(str(digit) * count for digit, count in enumerate(angel_letter_counts))\n        return correct_password_numbers  # The correct password\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert repeating decimals to fractions\n    first_term = Fraction(1, 99)\n    second_term = Fraction(12, 99)\n    third_term = Fraction(23, 99)\n    fourth_term = Fraction(34, 99)\n    fifth_term = Fraction(45, 99)\n    sixth_term = Fraction(54, 99)\n    seventh_term = Fraction(78, 99)\n\n    # Sum all fractions\n    total = first_term + second_term + third_term + fourth_term + fifth_term + sixth_term + seventh_term\n\n    # Convert sum to decimal\n    ans = float(total)\n    \n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    a, x = symbols('a x')\n    equation = sqrt(x) - (sqrt(a) - 2 / sqrt(a))\n    x_val = solve(equation, x)[0]\n\n    expression = sqrt(x_val**2 + 8 * x_val)\n    simplified_expression = expression.subs(x, x_val).simplify()\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    # To write 6 as the sum of two or more positive numbers, split it as the sum of at least 2 terms and at most 5 terms\n    # Because 6 = 1+1+1+1+1+1 is six terms and we need two or more, not just one term.\n    for i in range(2, 6):  # from 2 terms to 5 terms\n        for j in range(1, 6):\n            for k in range(j, 6):  # ensure numbers are non-decreasing\n                if i == 2:\n                    if j + k == 6:\n                        count += 1\n                elif i == 3:\n                    for l in range(k, 6):  # ensure numbers are non-decreasing\n                        if j + k + l == 6:\n                            count += 1\n                elif i == 4:\n                    for l in range(k, 6):  # ensure numbers are non-decreasing\n                        for m in range(l, 6):  # ensure numbers are non-decreasing\n                            if j + k + l + m == 6:\n                                count += 1\n                elif i == 5:\n                    for l in range(k, 6):  # ensure numbers are non-decreasing\n                        for m in range(l, 6):  # ensure numbers are non-decreasing\n                            for n in range(m, 6):  # ensure numbers are non-decreasing\n                                if j + k + l + m + n == 6:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Using Pigeonhole Principle\n    max_sheep_in_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return max_sheep_in_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if (i % 3 == 2) and (i % 4 == 2) and (i % 5 == 2) and (i % 7 == 5):\n            return i\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_students = total_boys + total_girls\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age_students = total_age_boys + total_age_girls\n\n    mean_age_students = total_age_students / total_students\n    \n    return mean_age_students\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for number in range(200, 301):\n        if number % 6 == 1 and number % 13 == 8:\n            return number\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n    \n    ans = lcm(raye_cycle, simon_cycle, taylor_cycle)\n    \n    return ans\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Maximum number of balls Sara can take out without having 5 of the same color\n    # At worst, she could take 4 green, 4 yellow, and 2 red, totally 10 balls.\n    max_without_5_same = 4 + 4 + 2\n\n    # The next ball she takes out has to be the 5th of one color, so add one.\n    needed_to_take_out = max_without_5_same + 1\n\n    return needed_to_take_out\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    old_password = \"0141705021\"\n    new_password = \"4005220912\"\n    \n    # Mapping letters in \"Angel\" to corresponding digits\n    angel_to_digit = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n\n    # Mapping digits in old password to corresponding letters\n    digit_to_angel = {v: k for k, v in angel_to_digit.items()}\n    \n    # Constructing the word \"Angel\" from the old password\n    angel_from_old_password = ''.join([digit_to_angel[digit] for digit in old_password])\n    \n    # Replacing each digit in the new password with the corresponding letter\n    devil_from_new_password = ''.join([digit_to_angel.get(digit, '') for digit in new_password])\n    \n    # Checking whether the constructed word from new password is \"Devil\"\n    if devil_from_new_password == \"Devil\":\n        return True\n    else:\n        # If word is not \"Devil\", then construct the correct password\n        correct_password = ''.join([angel_to_digit[letter] for letter in \"Devil\"])\n        return correct_password\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25\n\n    first_term = nth_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # Convert swimming time from minutes to seconds\n    total_time = 10 * 60  # 10 minutes in seconds\n\n    # Speed of Sam and Ben combined\n    combined_speed = 1 + 0.6  # m/s\n\n    # They will meet each time they cover the length of the swimming pool\n    # together considering their combined speed\n    distance_per_meeting = 30  # m\n\n    # The number of times they meet is the total distance covered together\n    # divided by the distance covered per meeting\n    num_meetings = total_time * combined_speed / distance_per_meeting\n\n    return int(num_meetings)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    ans = a*b + c*d\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = 2 * average_bob_cindy  # Since average height is total height divided by 2\n    total_height_three = total_height_bob_cindy + height_doris\n    average_height_three = total_height_three / 3\n    return average_height_three\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    destin, nephew = symbols('destin nephew')\n    \n    # Equation for the future: Destin will be twice his nephew's age\n    equation_future = Eq(destin + 6, 2 * (nephew + 6))\n    \n    # Equation for the past: the ratio of Destin's age to his nephew's age was 5:1\n    equation_past = Eq(destin - 6, 5 * (nephew - 6))\n    \n    # Solve the system of equations\n    solutions = solve((equation_future, equation_past), (destin, nephew))\n    \n    # Calculate the sum of their ages in 10 years' time.\n    sum_of_ages_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n    \n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_pencils_avg = 35\n    boys_pencils_avg = 20\n    girls_pencils_avg = 60\n    \n    # Let the number of boys be b\n    # Then, the number of girls is (40 - b)\n\n    # The total number of pencils for boys and girls can be formulated as:\n    # (boys_pencils_avg * b) + (girls_pencils_avg * (40 - b)) = total_pencils_avg * total_pupils\n\n    # Solve the above equation for b\n    b = (total_pencils_avg * total_pupils - girls_pencils_avg * total_pupils) / (boys_pencils_avg - girls_pencils_avg)\n\n    return int(b)\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of pies each had\n    x = symbols('x')\n    \n    # Mrs Tan now has x + 12\n    # Mrs Lim now has x - 4\n    \n    # Equation based on the condition given in the problem\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solving the equation for x\n    initial_pies = solve(equation, x)\n    \n    # There should be only one solution\n    return initial_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 5]\n    all_possible_numbers = list(permutations(digits))\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "from datetime import datetime\n\ndef solution():\n    format = '%I:%M%p'\n    departure_time = datetime.strptime('6:35AM', format)\n    arrival_time = datetime.strptime('10:22AM', format)\n    \n    time_difference = arrival_time - departure_time\n    minutes_taken = time_difference.total_seconds() / 60\n    \n    return int(minutes_taken)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"3456\"\n    times_repeated = 50 // len(pattern)\n    extra_digits = 50 % len(pattern)\n    sum_repeated = sum(int(digit) for digit in pattern) * times_repeated\n    sum_extra = sum(int(pattern[i]) for i in range(extra_digits))\n    \n    return sum_repeated + sum_extra\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    \n    students_first_group = (fraction_first_group * total_sweets) / sweets_first_group\n    \n    remainder_sweets = total_sweets - (students_first_group * sweets_first_group)\n    fraction_second_group = 1/4\n    \n    students_second_group = (fraction_second_group * remainder_sweets) / 4\n    \n    remainder_sweets_after_second_group = remainder_sweets - (students_second_group * 4)\n    sweets_third_group = 5\n    \n    students_third_group = remainder_sweets_after_second_group / sweets_third_group\n    \n    total_students = students_first_group + students_second_group + students_third_group\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "from sympy import primefactors\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    products = {}\n\n    # Calculate the product of all possible combinations of 2 cards\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            products.setdefault(product, []).append({numbers[i], numbers[j]})\n\n    # Check which product has a corresponding combination of 3 cards\n    for product, combos in products.items():\n        for k in range(len(numbers)):\n            for l in range(k+1, len(numbers)):\n                for m in range(l+1, len(numbers)):\n                    if product == numbers[k] * numbers[l] * numbers[m]:\n                        # Create sets for comparison\n                        combo_of_three = {numbers[k], numbers[l], numbers[m]}\n                        # Find and remove the common sets\n                        for combo in combos:\n                            if combo.issubset(combo_of_three):\n                                combo_of_three -= combo\n                                if len(combo_of_three) == 1:\n                                    # The remaining number is the one not picked\n                                    return next(iter(combo_of_three))\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    difference = father_future_age - tom_age\n    father_current_age = tom_age + difference\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3 / 10) * 54 + 0.3 * 45 + (30 / 100)\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for num in range(999, 0, -2):\n        found = False\n        for a in range(4, num - 6, 2):\n            if is_composite(a):\n                for b in range(a + 2, num - a - 2, 2):\n                    if is_composite(b) and is_composite(num - a - b):\n                        found = True\n                        break\n            if found:\n                break\n        if not found:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from sympy import lcm\n\n    packet_one = 25\n    packet_two = 20\n\n    least_common_multiple = lcm(packet_one, packet_two)\n\n    # Granny starts both packets on March 1st which is day 1\n    day_to_start_again = least_common_multiple + 1\n\n    return day_to_start_again\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    number_one = 17\n    number_two = 35\n    return (number_one + number_two) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    bigger_number = 3 + 1/4\n    smaller_number = 1 + 3/4\n    difference = bigger_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy received $8 and each girl received $5\n    # There are thrice as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(8 * boys + 5 * girls, 580)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    sum = 0\n    for number in range(1, 101):\n        if number % 4 == 3:\n            sum += number\n    return sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2):  # Iterate through possible lengths of the two equal sides\n        for b in range(1, 12 - 2*a + 1):  # Iterate through possible lengths of the base\n            if a + a + b == 12 and a > b:  # Check if the sides form a triangle and follow the triangle inequality theorem\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    sales_tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    sales_tax = bill * sales_tax_percentage\n    total_cost = bill + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elder, younger = symbols('elder younger')\n    \n    # Sum of their current ages\n    current_sum = Eq(elder + younger, 42)\n    \n    # A few years ago, their age relation\n    age_difference = elder - younger\n    past_ages = Eq(younger - age_difference, elder/2)\n    \n    # Solving the equations\n    solutions = solve((current_sum, past_ages), (elder, younger))\n    \n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # Using the Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had_initially = 86\n    gave_away = 29\n    lena_final_count = 100\n    mother_gave = lena_final_count - (lena_had_initially - gave_away)\n    return mother_gave\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n    \n    A = 8\n    B = 12\n    C = 20\n    \n    def find_gcd(x, y):\n        return gcd(x, y)\n    \n    # Find the greatest common divisor (GCD) for all three numbers\n    gcd_AB = find_gcd(A, B)\n    gcd_ABC = find_gcd(gcd_AB, C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    passed_second_exam = total_students - failed_second_exam\n    passed_only_first_exam = passed_first_exam - (passed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # A -> D directly\n    direct_routes = 6\n    \n    # A -> B -> C -> D\n    abc_routes = 7 * 5 * 2\n    \n    # A -> C -> D\n    ac_routes = 4 * 2\n    \n    # Total routes from A to D\n    total_routes = direct_routes + abc_routes + ac_routes\n    \n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    for chocolate in range(1, 255):\n        cheese = 255 - chocolate\n        if chocolate - (0.40 * chocolate) == cheese - (0.75 * cheese):\n            ans = int(chocolate - (0.40 * chocolate))\n            break\n    return ans\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    pencil_cost = 2\n    total_cost = 20\n    number_of_pencils = 3\n    number_of_pens = 2\n\n    cost_of_pencils = pencil_cost * number_of_pencils\n    total_pen_cost = total_cost - cost_of_pencils\n    pen_cost = total_pen_cost / number_of_pens\n\n    return pen_cost\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # Total kilograms of hay in the warehouse\n    total_cattle = 5  # Number of cattle\n    days = 10  # Days the hay can last\n\n    daily_consumption_per_cattle = total_hay / (total_cattle * days)\n\n    return daily_consumption_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(a+1, 10):\n            for c in range(b+1, 10):\n                if a * b * c == 210:\n                    return a\n                \nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Total number of students\n    total_students = 39\n    \n    # Let the number of boys be b and the number of girls be g\n    # b/4 = 2g/5 => 5b = 8g => b/g = 8/5\n    # Also, we know that b + g = 39\n\n    # Thus, we can find b and g using simultaneous equations\n    for b in range(total_students + 1):\n        g = total_students - b\n        if 5 * b == 8 * g:\n            break\n\n    # The difference between the number of boys and girls\n    difference = b - g\n\n    return difference\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3/8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n    \n    full_days = total_locusts // locusts_per_day\n    remaining_locusts = total_locusts % locusts_per_day\n    \n    if remaining_locusts == 0:\n        ans = locusts_per_day\n    else:\n        ans = remaining_locusts\n\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the quantity of $5 and $10 notes\n    fives, tens = symbols('fives tens')\n\n    # Initial conditions\n    equation1 = Eq(fives + tens, 116)  # Total amount of notes\n    equation2 = Eq(tens * 0.4, fives * 0.75 * (4/7))  # The ratio left after spending\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (fives, tens))\n\n    # Calculate spent amounts\n    spent_tens = solutions[tens] * 0.6\n    spent_fives = solutions[fives] * 0.25\n\n    # Calculate the cost of the bag\n    cost = spent_tens * 10 + spent_fives * 5\n\n    return cost\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don_stickers, ben_stickers = symbols('don_stickers ben_stickers')\n\n    # Initial ratio equation: 2/3 = don_stickers/ben_stickers\n    equation1 = Eq(2 * ben_stickers, 3 * don_stickers)\n\n    # New ratio after changes: 6/7 = (don_stickers + 10)/(ben_stickers - 5)\n    equation2 = Eq(6 * (ben_stickers - 5), 7 * (don_stickers + 10))\n\n    # Solve the system of equations for the variables\n    solutions = solve((equation1, equation2), (don_stickers, ben_stickers))\n\n    return solutions[don_stickers]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    ans = 60 * 20\n    return ans\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    return round(726 * 8, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total = 0\n    \n    for num in range(2, 2017):\n        if num % 2 == 0:\n            total += num\n        else:\n            total -= num\n    \n    return total\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    amy_gives = (amy_toys - sally_toys) // 2\n    return amy_gives\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    \n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0  # Initialize the maximum product to a reasonably low number\n\n    # Since a, b, and c are positive integers, a and b can take values from 1 to 29\n    for a in range(1, 30):\n        for b in range(1, 30):\n            c = 31 - a - b\n            # We should ensure that c is also a positive integer\n            if c > 0:\n                max_product = max(max_product, a*b*c)\n    \n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n    \n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # Using the formula for the sum of squares of the first n natural numbers: n(n + 1)(2n + 1)/6\n    # As given, we can calculate the sum of squares from 1 to 20\n    n = 20\n    sum_squares = 2870 # Given sum of squares from the problem statement\n    \n    # Calculate the sum of the sequence (1*3) + (3*5) + (5*7) + ... by observing the pattern\n    sum_seq = 0\n    for i in range(1, 40, 2):\n        sum_seq += i * (i + 2)\n    \n    return sum_seq\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Total arrangements without restrictions\n    total_arrangements = factorial(7)\n\n    # Arrangements where the twins are next to each other\n    twins_together = 2 * factorial(6)  # Treat twins as one unit and multiply by 2 for their internal arrangement\n\n    # Arrangements where the triplets want to stand together\n    triplets_together = factorial(5) * factorial(3)  # Treat triplets as one unit and multiply by 3! for their internal arrangement\n\n    # Arrangements where the triplets and twins are next to each other\n    # This can never occur since the triplets are together as one unit,\n    # thus making fewer than 6 spaces where the twins could go and have more than one option.\n\n    # Subtract impossible configurations from the total\n    ans = total_arrangements - twins_together\n\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    # Calculate the number of intervals between trees\n    num_intervals = road_length // tree_distance\n\n    # The number of trees is one more than the number of intervals\n    num_trees = num_intervals + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    milk_needed = order_cups / cups_per_gallon\n    return milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for d1 in range(10):\n        for d2 in range(10):\n            number = int(f\"21{d1}{d2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n    \n    # Least number of students born in the week having the most births\n    # is the ceiling of total_students divided by days_in_week\n    least_students = (total_students + days_in_week - 1) // days_in_week\n    \n    return least_students\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Since every week has a Friday, we start with the whole number of weeks\n    full_weeks = 55 // 7  # This will give us the number of full weeks\n    remaining_days = 55 % 7  # This will give us the remaining number of days after full weeks\n\n    # As the week consists of 7 days, we can guarantee one Friday per full week. So we start counting Fridays from full weeks\n    fridays = full_weeks\n\n    # Now, we need to check if the remaining days can include any Friday.\n    # We have to account for the case when the vacation might start on a Friday. In that case, we can have an extra Friday.\n    # Since we don't know on which day the vacation starts, we have to consider the case when one of the remaining days is a Friday.\n    # If Summer vacation starts on a day which leaves at least one Friday in the remaining days, we add that one extra Friday.\n    # This means if the remaining_days > 0, then there is at least one Friday in the remaining days.\n    \n    if remaining_days > 0: \n        fridays += 1\n\n    return fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1 / 2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from sympy import lcm\n\n    # Calculate least common multiple (LCM) of the numbers\n    lowest_common_multiple = lcm([2, 3, 4, 5, 6, 8, 9])\n\n    # Start at the LCM and check for each number if remainder is 5 when divided by 7\n    N = lowest_common_multiple\n    while True:\n        if N % 7 == 5:\n            return N\n        N += lowest_common_multiple\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n\n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n    change = 10 - total_cost\n\n    return round(change, 2)  # rounding to 2 decimal places to represent pence\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils // 5\n\n    pupils_go_to_cathedral = total_pupils - pupils_away\n    \n    return pupils_go_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3\n    total_songs = 2\n    total_children = 50\n\n    total_time = time_per_song * total_songs * total_children\n    \n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_5_apples = 580\n    weight_with_2_apples = 280\n\n    weight_of_3_apples = total_weight_with_5_apples - weight_with_2_apples\n    weight_of_5_apples = weight_of_3_apples + weight_with_2_apples\n    \n    weight_of_basket = total_weight_with_5_apples - weight_of_5_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    value_25_percent = 25 / 100\n    value_0_point_3 = 0.3\n    ans = \"0.3\" if value_0_point_3 > value_25_percent else \"25%\"\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1  # The question simply asks for the evaluation of the number 1.\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n\n    # Calculate the number of years required for the initial_amount\n    # to grow to the final_amount with the given interest rate\n    years = 0\n    while initial_amount < final_amount:\n        initial_amount += initial_amount * interest_rate\n        years += 1\n\n    # Check if Bella's statement is correct or not\n    if years == 5:\n        return \"Bella is right.\"\n    else:\n        return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes with 6 donuts each\n    eaten_donuts = 3\n    remaining_donuts = total_donuts - eaten_donuts\n    return remaining_donuts\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    loafs_needed = 35\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7 # Least common multiple of 3 and 7\n    ans = 0\n    multiple = lcm\n    \n    while True:\n        # The number must end in 2, therefore the last digit of the number must be 2\n        if str(multiple)[-1] == '2':\n            ans = multiple\n            break\n        multiple += lcm\n    \n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    ans = days_in_a_week * 2\n    return ans\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    place_value1 = 3 * 10**2  # The value of 3 in the hundreds place\n    place_value2 = 3 * 10**4  # The value of 3 in the ten-thousands place\n\n    difference = place_value2 - place_value1\n\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    # Let x, y, and z represent the hourly work rates of John, Jonah, and Angus respectively\n    # Their combined work rate is (x + y + z) walls per hour\n    # The total work done is 1 wall in this case\n    # 1 wall / (x + y + z) walls/hour = 27 hours\n    # x + y + z = 1/27 walls per hour (combined work rate of John, Jonah, and Angus together)\n    \n    # Jonah and Angus, without John, have a combined work rate of y + z\n    # 1 wall / (y + z) walls/hour = 36 hours\n    # y + z = 1/36 walls per hour (combined work rate of Jonah and Angus without John)\n    \n    # To find out how long John would take to build the wall on his own, we need to find 1/x\n    # x = (combined work rate of John, Jonah, and Angus together) - (combined work rate of Jonah and Angus without John)\n    combined_rate_all = 1 / 27\n    combined_rate_jonah_angus = 1 / 36\n    \n    # Work rate of John (x) is the difference between the combined rates\n    johns_rate = combined_rate_all - combined_rate_jonah_angus\n    \n    # To find the time John takes to build the wall, we calculate 1/x\n    johns_time = 1 / johns_rate\n    \n    return johns_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum([i for i in range(1, 21)])\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    def can_be_made(n, a, b):\n        for i in range(n // a + 1):\n            if (n - i * a) % b == 0:\n                return True\n        return False\n\n    z = 1\n    a = 4 * z\n    b = 5 * z\n    n = 1\n\n    while can_be_made(n, a, b):\n        n += 1\n\n    ans = n - 1\n    return ans\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # 10 positive integers sum up to 1001.\n    # If d is the greatest common divisor, then we can write each integer as d*a_i,\n    # where a_i are some integers that sum up to 1001/d.\n    # We need to maximize d. Since d divides each of the 10 integers, it must also divide their sum, 1001.\n\n    # The sum of the numbers is 1001, which factors to 7 * 11 * 13.\n    # For d to be maximum, we want to use the largest factor.\n    # However, we have to ensure that we can find at least 10 numbers that sum up to 1001 divided by d.\n    # Start checking from the largest factor going down to see if we can find such numbers.\n    \n    # Get the prime factors of 1001 and sort them in descending order\n    prime_factors = sorted([7, 11, 13], reverse=True)\n\n    for d in prime_factors:\n        sum_divided = 1001 // d\n        # Check if we can divide sum_divided by any number from 1 to 10, which gives us the count of integers.\n        for i in range(1, 11):\n            if sum_divided % i == 0:\n                return d  # d is the maximum divisor and is part of the answer.\n    \n    # If no divisor is found in the range, return 1 as the last resort, since 1 divides any integer.\n    return 1\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let c be the current age of Claire and d be the current age of Daniel.\n    # Five years ago, Claire was (c - 5) years old and Daniel was (d - 5) years old.\n    # Five years ago the combined age of Claire and Daniel was 14 years old. So, (c - 5) + (d - 5) = 14.\n    # Simplify the equation: c + d - 10 = 14 => c + d = 24\n    \n    # Their combined current age is 24.\n    # In 3 years, Claire will be (c + 3) years old and Daniel will be (d + 3) years old.\n    # Their combined age in 3 years will be: (c + 3) + (d + 3) = c + d + 6\n    \n    # Since we know c + d = 24 from the equation above, we just add 6 to find their combined age in 3 years.\n    \n    combined_age_now = 24\n    combined_age_in_3_years = combined_age_now + 6\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    # A number is divisible by 12 if and only if it is divisible by both 3 and 4.\n    for a in range(10):\n        for b in range(10):\n            num = 108200 + 10 * a + b\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n\n    weight_4_apples_4_pears = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight_4_apples_4_pears\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length_ribbon1 = 45\n    length_ribbon2 = 30\n\n    ans = gcd(length_ribbon1, length_ribbon2)\n\n    return ans\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    # Let x represent the original number of boys\n    # Let y represent the original number of girls\n    # We know that there are 152 students in total, so x + y = 152\n    # We also know that removing 1/11 of the boys and 5 girls will result in equal numbers\n    # Therefore: x - (1/11)*x = y - 5\n    # We can rewrite this as: 10/11*x = y - 5\n    # We should solve for x and y considering the two equations\n    # 10x = 11y - 55 (from 10/11*x = y - 5 with both sides multiplied by 11)\n    # x = 152 - y (from x + y = 152)\n    \n    # Replacing x in the first equation with 152 - y\n    # 10*(152 - y) = 11y - 55\n    # 1520 - 10y = 11y - 55\n    # 1520 + 55 = 21y\n    # 1575 = 21y\n    y = 1575 / 21\n    \n    # Now we find x\n    x = 152 - y\n    \n    return int(x)\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    first_number = 475\n    second_number = 138\n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 1 and i % 12 == 3:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils / pencils_per_box\n\n    return int(num_boxes)\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    eq1 = Eq(cathy, 3 * amanda)\n    eq2 = Eq(amanda, 2 * bernie)\n    eq3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((eq1, eq2, eq3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Ermintrude lays 50 eggs a day.\n    eggs_per_day = 50\n    \n    # These eggs become adults in 30 days.\n    maturation_period = 30\n    \n    # We are considering a 40-day period.\n    total_days = 40\n    \n    # Only the eggs laid in the first 10 days will mature within the 40-day period.\n    days_when_eggs_mature = total_days - maturation_period\n    \n    # Calculate the total number of new adult fleas after 40 days.\n    new_adult_fleas = days_when_eggs_mature * eggs_per_day\n    \n    return new_adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = (7 * 3) + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french_speakers = 15\n    japanese_speakers = 12\n    italian_speakers = 13\n    french_japanese_speakers = 5\n    french_italian_speakers = 3\n    japanese_italian_speakers = 2\n    all_three_speakers = 1\n\n    total = (french_speakers + japanese_speakers + italian_speakers \n             - french_japanese_speakers - french_italian_speakers - japanese_italian_speakers \n             + all_three_speakers)\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    litres_water = total_orange_drink * fraction_water\n    return litres_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    # Formula to find the sum of an arithmetic series: n/2 * (2*a + (n-1)*d)\n    total_students = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert the mixed numbers to improper fractions\n    num1 = Fraction(21*286 + 21, 286)\n    num2 = Fraction(6*2530 + 647, 2530)\n    num3 = Fraction(1*2829 + 1370, 2829)\n\n    # Perform the arithmetic operations on the fractions\n    result = num1 / num2 * num3\n\n    # Simplify the result if necessary and convert to a mixed number\n    whole_num = result.numerator // result.denominator\n    remainder = result.numerator % result.denominator\n    simplified_fraction = Fraction(remainder, result.denominator)\n\n    if whole_num == 0:\n        ans = simplified_fraction\n    else:\n        ans = f\"{whole_num} {simplified_fraction}\"\n\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the big cuboid\n    length = 6\n    width = 10\n    height = 12\n\n    # Since all small cubes are of the same size, each dimension must be a factor of\n    # the corresponding dimension of the big cuboid. The only factor pair for 720\n    # that matches the cuboid dimensions is (6, 10, 12).\n    # Thus, each small cube is a 1x1x1 cube.\n\n    # Calculate the number of small cubes with one face painted along\n    # the length and width (top and bottom face of the cuboid)\n    top_bottom = (length - 2) * (width - 2) * 2\n\n    # Calculate the number of small cubes with one face painted along\n    # the length and height (side faces of the cuboid)\n    side_length_height = (length - 2) * (height - 2) * 2\n\n    # Calculate the number of small cubes with one face painted along\n    # the width and height (remaining side faces of the cuboid)\n    side_width_height = (width - 2) * (height - 2) * 2\n\n    # The total number of small cubes with exactly one face painted is\n    # the sum of cubes with one face painted from each pair of sides\n    total_painted = top_bottom + side_length_height + side_width_height\n\n    return total_painted\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    ans = 30 / 100 * 1600\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_amount = 3.85\n    pencil_cost = 0.38\n    ruler_cost = 0.59\n    \n    remaining_amount = total_amount - (pencil_cost + ruler_cost)\n\n    return remaining_amount\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables representing the rates of work\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # Eq1: Star's 5 hours of work plus Nini's 20 hours of work finishes the job (1 job)\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n\n    # Eq2: Star's 20 hours of work plus Nini's 8 hours of work finishes the job (1 job)\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    # Solve the system of equations for the rates\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n    \n    # The time for Nini to finish the job by herself is the inverse of her rate\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols\n    anne, maria = symbols('anne maria')\n    \n    # equation based on the problem statement\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (anne, maria))\n    \n    # return Anne's number of apples\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    n = 140  # The total number of candies\n    count = 0\n\n    # Iterate the number of possible piles from 1 up to 140\n    # Note that since the number of candies in each pile is odd,\n    # the number of piles also should be odd. Therefore, starting from 1 and stepping by 2\n    for piles in range(1, n + 1, 2):\n        if n % piles == 0:\n            # Check if the piles contain an odd number of candies\n            candies_per_pile = n // piles\n            if candies_per_pile % 2 == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Assuming he tries one key for each classroom before trying the next key\n    max_tries = 0\n    for i in range(20):\n        max_tries += (20 - i)\n    return max_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks become:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # Since Jerry must take at least 1 stone, and he wants to ensure a win,\n    # he needs to leave the stacks in a state where the number of stones in each stack is equal.\n    # This way, no matter what Tom takes afterward, Jerry can always take the same amount from the other stack,\n    # ensuring that Jerry gets the last stone.\n\n    # To make the stacks equal, Jerry should take 4 stones from Stack A.\n    # This will leave both Stack A and Stack B with 16 stones each.\n\n    return 4, 'A'\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet has 4 pages: front, back on the first side, and front, back on the second side.\n    # For sheet n, the pages are: 2n-1, 2n on the first side, and 2n+1, 2n+2 on the other side.\n    # Since Johnson takes the third sheet, n = 3\n    # Therefore, the pages on the third sheet are 5, 6, 7, and 8.\n    # He adds all the page numbers on that sheet.\n    \n    sheet_number = 3\n    first_page_on_sheet = (sheet_number - 1) * 2 + 1  # Calculate the number of first page on the third sheet\n    \n    # Since each sheet contains consecutive page numbers, we can sum them directly\n    total_sum = first_page_on_sheet + (first_page_on_sheet + 1) + (first_page_on_sheet + 2) + (first_page_on_sheet + 3)\n    \n    return total_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    # Calculate each fraction to keep precision\n    fraction1 = 2017 / 2018\n    fraction2 = 20172017 / 20182018\n    fraction3 = 201720172017 / 201820182018\n\n    # Combine the first two fractions and divide by the third fraction\n    ans = (fraction1 + fraction2) / fraction3\n\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    pages, digits = 0, 0\n    while digits < 933:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = (100 + 98 - 98 + 96 - 96 + 94 - 94 + 92 - 92 + 90 - 90)\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cups = 30 + 50 + 20\n    total_cost = 30 * 5 + 50 * 3 + 20 * 10\n    average_cost = total_cost / total_cups\n    return average_cost\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    digits = 0\n    for i in range(1, 92):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert start time to minutes\n    end_time = (11 * 60) + 6    # Convert end time to minutes\n\n    duration = end_time - start_time  # Calculate the difference in minutes\n\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_students = 0\n    i = 0\n    while True:\n        boys = (i * 2 + 1) ** 2 - (i * 2 - 1) ** 2 if i > 0 else 1\n        girls = ((i + 1) * 2) ** 2 - (i * 2 + 1) ** 2\n        if boys - girls == 32:\n            total_students = ((i + 1) * 2) ** 2\n            break\n        i += 1\n    return total_students\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial Count in each Box A and Box B\n    blue_a, red_a, black_a, green_a = 10, 15, 20, 25\n    blue_b, red_b, black_b, green_b = 10, 15, 20, 25\n\n    # After 20 pens are taken from box A and placed into box B\n    # Since the quantities are not given, we assume worst case:\n    # taking the pens from the colors with the most quantity in box A.\n    # We will start by taking pens from the color with the most pens, i.e., green.\n    green_a -= 20\n\n    # Now we check how many pens need to be returned for each color to ensure \n    # at least 15 pens of each color remain in box A.\n\n    pens_to_return = 0\n\n    if green_a < 15:\n        pens_to_return += (15 - green_a)\n        green_b -= (15 - green_a)\n        green_a = 15\n\n    # Since the number of pens taken was exact to reduce green pens to under 15, \n    # the other colors were not affected, and no further transfers are necessary.\n    # But we are supposed to calculate just for everything it seems. Hence, we keep calculating.\n    \n    if blue_a < 15:\n        pens_to_return += (15 - blue_a)\n        blue_b -= (15 - blue_a)\n        blue_a = 15\n    \n    if red_a < 15:\n        pens_to_return += (15 - red_a)\n        red_b -= (15 - red_a)\n        red_a = 15\n    \n    if black_a < 15:\n        pens_to_return += (15 - black_a)\n        black_b -= (15 - black_a)\n        black_a = 15\n    \n    # Total pens that must be returned from Box B to Box A\n    return pens_to_return\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    fraction = 1 / 8\n    decimal = format(fraction, '.3f')\n    return decimal\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # minimum soft-centres in milk chocolates (assuming all plain could be hard-centre)\n    min_soft_centre_milk = soft_centre_chocolates - plain_chocolates\n\n    # since we can't have negative plain soft-centre chocolates,\n    # the minimum soft-centre milk count must also be the minimum number of plain soft-centres\n    plain_soft_centres = max(soft_centre_chocolates - (total_chocolates - plain_chocolates), 0)\n\n    return plain_soft_centres\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage = 12.5 / 100\n    pupils_playing_violin = 11\n    total_pupils = pupils_playing_violin / percentage\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution # Note that the solution function expects a parameter 'n' to be passed when called."
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dividend, divisor = symbols('dividend divisor')\n\n    equation1 = Eq(dividend % divisor, 11)  # Remainder is 11\n    equation2 = Eq((dividend - 11) // divisor, 29)  # Quotient is 29\n    equation3 = Eq(dividend + divisor, 431)  # Sum is 431\n\n    solutions = solve((equation1, equation2, equation3), (dividend, divisor))\n\n    difference = solutions[dividend] - solutions[divisor]\n\n    return difference\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    # Equation 1: Initial total number of apples and pears\n    equation1 = Eq(apples + pears, 105)\n\n    # Equation 2: After a fraction of apples and pears are sold, the ratio condition\n    equation2 = Eq((apples - apples/3), (pears - pears*2/5) * 5/6)\n\n    # Solve the equations to find the number of apples and pears\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    apples_sold = solutions[apples] / 3\n    pears_sold = solutions[pears] * 2 / 5\n\n    # Calculate the total number of apples and pears sold\n    total_sold = apples_sold + pears_sold\n\n    return total_sold\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    s, p = symbols('s p')  # s stands for the number of stickers, p stands for the number of pupils\n\n    # Equation for giving 13 stickers to each pupil with an excess of 190 stickers\n    equation1 = Eq(s - 13 * p, 190)\n    # Equation for giving 17 stickers to each pupil with an excess of 50 stickers\n    equation2 = Eq(s - 17 * p, 50)\n\n    solutions = solve((equation1, equation2), (s, p))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    num_1p, num_2p, num_5p, num_10p = symbols('num_1p num_2p num_5p num_10p')\n    eq1 = Eq(num_1p * 1 + num_2p * 2 + num_5p * 5 + num_10p * 10, 90)\n    eq2 = Eq(num_1p, num_2p)\n    eq3 = Eq(num_1p, num_5p)\n    eq4 = Eq(num_1p, num_10p)\n    \n    solutions = solve((eq1, eq2, eq3, eq4), (num_1p, num_2p, num_5p, num_10p))\n    \n    total_coins = sum(solutions[num_1p], solutions[num_2p], solutions[num_5p], solutions[num_10p])\n    \n    return total_coins\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played in a complete round-robin tournament\n    # with 6 students where each student plays every other student once.\n    total_games = (6 * (6 - 1)) // 2\n    \n    # Total points to be distributed after all games considering 2 points for a win.\n    total_points = total_games * 2\n    \n    # Sum of the points of the five known students.\n    points_known_students = 7 + 6 + 5 + 4 + 3\n    \n    # Points of the remaining student.\n    remaining_student_points = total_points - points_known_students\n    \n    return remaining_student_points\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C, D as one unit since they are always together.\n    # There are 9 units now (ABCD, E, F, G, H, I, J, K, L)\n    units = 9\n\n    # Permutations for 9 units\n    units_perm = factorial(units)\n\n    # Permutations for A, B, C, D among themselves\n    abcd_perm = factorial(4)\n\n    # Total permutations will be product of units_perm and abcd_perm\n    total_perm = units_perm * abcd_perm\n\n    return total_perm\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = number_of_boys * girls_per_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    # Let's denote the weight of bag A as a and the weight of bag B as b.\n    # According to the problem, we have the following two equations:\n    # a/b = 5/3 and (a - 10)/(b + 10) = 7/5\n\n    # We can represent the two equations as:\n    # 3a = 5b  (Equation 1)\n    # 5(a - 10) = 7(b + 10) (Equation 2)\n\n    # Let's multiply Equation 1 by 5 and Equation 2 by 3 to align coefficients for subtraction:\n    # 15a = 25b   (Equation 1 multiplied by 5)\n    # 15(a - 10) = 21(b + 10) (Equation 2 multiplied by 3)\n\n    # Now, let's substitute from Equation 1 into Equation 2\n    # 15a - 150 = 21 * (15a/25) + 210\n    # 15a - 150 = 21 * (3a/5) + 210\n    \n    # Multiply both sides by 5 to avoid fractions\n    # 75a - 750 = 63a + 1050\n    \n    # Rearrange the equation\n    # 75a - 63a = 1050 + 750\n    # 12a = 1800\n    \n    # Divide both sides by 12 to find a\n    # a = 1800 / 12\n    a = 1800 // 12\n\n    # Now we can find b using Equation 1 above\n    # 3a = 5b\n    # b = (3a) / 5\n    b = (3 * a) // 5\n\n    # The total weight is the sum of a and b\n    total_weight = a + b\n\n    return total_weight\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    product = 48 * 925 * 38 * 435\n    product_str = str(product)\n    zeros = len(product_str) - len(product_str.rstrip('0'))\n    return zeros\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Let 'd' be the difference between the number of players in adjacent lines\n    # Let 'n' be the number of lines\n    # Using the sum formula for an arithmetic sequence: \n    # total_players = n/2 * (first_line_players + last_line_players)\n    # Rearranging the terms to solve for 'n', we get: \n    # 2 * total_players = n * (first_line_players + last_line_players)\n    # This is because the average number of players per line is (first_line_players + last_line_players) / 2\n    n = (2 * total_players) / (first_line_players + last_line_players)\n\n    # The difference 'd' can be calculated by:\n    # d = (last_line_players - first_line_players) / (n - 1)\n    d = (last_line_players - first_line_players) / (n - 1)\n    \n    return int(d)\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # masses in grams\n    largest_mass = max(masses)\n\n    return largest_mass\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the variables\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n    \n    # Defining the equations based on the problem\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_of_girls = 6 / 11\n\n    number_of_girls = total_children * fraction_of_girls\n    number_of_boys = total_children - number_of_girls\n\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import *\n\n    # Known values\n    thefts = 2\n    weeks = 1000 / 7\n    dog_barks_per_week = 3\n    dog_barks_at_thief_prob = 0.9\n\n    # Calculate total number of barks in 1000 days\n    total_barks = weeks * dog_barks_per_week\n\n    # Probability of the dog barking on a specific night\n    prob_bark_given_theft = (dog_barks_at_thief_prob * thefts) / total_barks\n\n    return prob_bark_given_theft\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of students and y be the total number of stickers\n    x, y = symbols('x y')\n    \n    equation1 = Eq(y - 13*x, 190)\n    equation2 = Eq(y - 17*x, 50)\n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # y is the total number of stickers\n    return solutions[y]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    smallest_diff = float('inf')\n    \n    for i in range(123456789, 987654321):\n        num_str = str(i)\n        if len(num_str) == 9 and len(set(num_str)) == 9:\n            for j in range(i+1, 987654322):\n                num_str_j = str(j)\n                if len(num_str_j) == 9 and len(set(num_str_j)) == 9:\n                    diff = j - i\n                    if diff < smallest_diff:\n                        smallest_diff = diff\n                        return smallest_diff\n    return smallest_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the information given\n    original_total = Eq(girls, boys + 65) \n    after_recess = Eq((2/5) * boys, (3/7) * girls) \n\n    # Solve the system of equations for boys and girls\n    solutions = solve((original_total, after_recess), (boys, girls))\n\n    boys_left = (3/5) * solutions[boys]\n    girls_left = (4/7) * solutions[girls]\n\n    total_left = boys_left + girls_left\n\n    return total_left\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for A, B and C\n    A, B, C = symbols('A B C')\n    \n    # Define the equations based on the given ratios and information\n    equation1 = Eq(A/B, 4/5)\n    equation2 = Eq(B/C, 5/6)\n    equation3 = Eq(C - A, 10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Calculate the sum of A, B and C\n    sum_of_ABC = solutions[A] + solutions[B] + solutions[C]\n    \n    return sum_of_ABC\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_bricks = symbols('total_bricks')\n    \n    first_trip = (total_bricks / 2) - 26\n    second_trip = ((total_bricks - first_trip) / 2) + 11\n    third_trip = 68\n    remaining_bricks = 25\n    \n    equation = Eq(first_trip + second_trip + third_trip + remaining_bricks, total_bricks)\n    \n    ans = solve(equation, total_bricks)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    ans = 2412 // 9\n    return ans\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    num_kids = 3\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    total_pupils = Eq(girls + boys, 1690)\n    boys_girls_diff = Eq(boys, girls + 90)\n    girls_swim_ratio = Eq(girls_swim / girls_not_swim, 31/49)\n    boys_swim_diff = Eq(boys_swim, boys_not_swim - 120)\n\n    # Total number of girls who can and can not swim\n    total_girls_swim = Eq(girls_swim + girls_not_swim, girls)\n\n    # Solve the system of equations\n    solutions = solve((total_pupils, boys_girls_diff, girls_swim_ratio,\n                       boys_swim_diff, total_girls_swim),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the total number of pupils who can not swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_not_swim\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # The total number of students must form a square number.\n    # To ensure Mike is always the second in line, the square root of the total number\n    # of students minus one should be an odd number, as he cannot be on the edge (would be 1st or last).\n    # Start with 3 (since Mike is second, the smallest possible square is 2x2, but that contradicts the \"always\" condition)\n    # and check subsequent odd numbers until the condition satisfies.\n    # Increment by 2 to continue checking only odd square roots.\n    \n    i = 3\n    while True:\n        total_students = (i ** 2) + 1  # Add one to complete the square\n        # Verify that Mike is the second in every direction\n        if (i - 1) % 2 == 0 and (i + 1) % 2 == 0:\n            return total_students\n        i += 2\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    digits = 0\n    for page in range(1, 21):  # Pages 1 to 20\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    return 125 * 34 * 25 * 4 * 8\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Geoff's current age + sister's current age = 22\n    # Let's assume Geoff's age = x, and his sister's age = (22 - x)\n    # After y years, Geoff's age = x + y, and his sister's age = (22 - x) + y\n    # We want to find y such that (x + y) + ((22 - x) + y) = 40\n    # Simplifying the equation: 2y + 22 = 40\n    # Solving for y: y = (40 - 22) / 2\n\n    y = (40 - 22) / 2\n    return int(y)\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # A function to calculate the number of ways to reach the nth step\n    def climb_stairs(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n\n        # Recursive call for both step options\n        # This is the sum of ways reaching the current step from two steps below and three steps below\n        return climb_stairs(n - 2) + climb_stairs(n - 3)\n\n    # The number of ways to reach the 10th step\n    return climb_stairs(10)\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n\n    min_dividend = (smallest_divisor * quotient) + remainder\n\n    return min_dividend\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = 1998\n    rep_str = \"\"\n    n = 0\n\n    while True:\n        n += 1\n        rep_str += str(number)\n        rep_num = int(rep_str)\n        \n        if rep_num % 33 == 0:\n            break\n\n    return n * len(str(number))\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # The difference 5877 suggests that changing the ones place digit to the first place\n    # increases the number by 5 in the thousands place, 8 in the hundreds place,\n    # 7 in the tens place, and 7 in the one's place.\n    # Since we're working with a 4-digit number ABCD, after the change it becomes DABC.\n    # Thus, we have DABC - ABCD = 5877.\n    # If D is the original ones place digit, then D must be 5 less than A because\n    # moving D to A's place increases the number by 5000. Also, B, C must be 8 and 7 less\n    # than A, respectively.\n    \n    # Thus, we can form equations:\n    # A - D = 5\n    # A - B = 8\n    # A - C = 7\n    # D = A - 5, where A belongs to [5, 9], since A must be greater than D and is the first digit of a 4-digit number.\n    \n    for A in range(5, 10):      # A can't be more than 9 since it's a single digit, A must be at least 5\n        D = A - 5\n        B = A - 8\n        C = A - 7\n        if B >= 0 and C >= 0:   # B and C must be non-negative because they are digits\n            return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_in_group = group_number\n    second_in_group = group_number ** 2\n    third_in_group = first_in_group * second_in_group\n\n    sum_of_numbers = first_in_group + second_in_group + third_in_group\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n    runs_needed = total_miles / per_run_miles\n    return runs_needed\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3_030_030\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 5 == 3 and number % 6 == 4 and number % 9 == 1:\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 10):  # Two-digit numbers ending in 0 increments of 10\n        if num % 6 == 0 and num % 9 == 0:  # Check if it's a multiple of both 6 and 9\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # Since 7 tens means 70\n\n    correct_answer = original_number + tens_to_add\n\n    johnnys_answer = 5839\n    # Check if Johnny's answer is correct\n    is_correct = johnnys_answer == correct_answer\n\n    return correct_answer if not is_correct else johnnys_answer\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # 3m in cm\n    lengths = [147, 32.5, 67]  # lengths of the three pieces in cm\n    fourth_length = total_length_cm - sum(lengths)\n    return fourth_length\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # The maximum number of different positive integers that add up to 27\n    # can be found by using the smallest positive integers starting from 1.\n    # If we use 1, 2, 3, ... the last number will be the number of integers\n    # that can be used before the sum exceeds 27.\n\n    total = 27\n    current_sum = 0\n    num_count = 0   # To keep track of how many numbers have been used\n\n    for i in range(1, total):\n        # Keep adding the next integer until the sum exceeds the total\n        if current_sum + i <= total:\n            current_sum += i\n            num_count += 1\n        else:\n            break\n\n    return num_count\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probability that A passes and B, C do not\n    p_A = 0.5 * (1 - 0.4) * (1 - 0.2)\n    # Probability that B passes and A, C do not\n    p_B = (1 - 0.5) * 0.4 * (1 - 0.2)\n    # Probability that C passes and A, B do not\n    p_C = (1 - 0.5) * (1 - 0.4) * 0.2\n    # Probability that A and B pass, but not C\n    p_AB = 0.5 * 0.4 * (1 - 0.2)\n    # Probability that A and C pass, but not B\n    p_AC = 0.5 * (1 - 0.4) * 0.2\n    # Probability that B and C pass, but not A\n    p_BC = (1 - 0.5) * 0.4 * 0.2\n    # Probability that all three pass\n    p_ABC = 0.5 * 0.4 * 0.2\n    # Probability that nobody passes\n    p_none = (1 - 0.5) * (1 - 0.4) * (1 - 0.2)\n\n    # Calculate the probability of 0, 1, 2, and 3 people passing\n    prob_0 = p_none\n    prob_1 = p_A + p_B + p_C\n    prob_2 = p_AB + p_AC + p_BC\n    prob_3 = p_ABC\n\n    # Determine the most likely number of people to pass\n    probs = [prob_0, prob_1, prob_2, prob_3]\n    most_likely_num_pass = probs.index(max(probs))\n\n    return most_likely_num_pass\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = pieces_of_paper // interval\n\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    a = 101 + 234 + 567\n    b = 234 + 567 + 89\n    c = 101 + 234 + 567 + 89\n    d = 234 + 567\n    ans = (a * b) - (c * d)\n    return ans\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # The initial value for the first term which is 1\n    for i in range(2, 11):  # Loop from 2 to 10 for the fractions.\n        ans += ((1/i) * (i - 1)) * 2  # (1/i) represents the fraction, multiplied by (i-1) for the count of that fraction, and doubled\n    return ans\n    \nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Using cross-multiplication for the proportion\n    # 10 / x = 14 / 21\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n\n    # Initial ratio\n    equation1 = Eq(watches/caps, 8/11)\n\n    # Final ratio after selling 88 caps\n    equation2 = Eq(watches/(caps - 88), 12/11)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam passes 5 intervals in 30 minutes to get from the first house to the sixth house\n    intervals_passed_for_6_houses = 5\n    time_for_6_houses = 30  # minutes\n    \n    # Total intervals to pass for 10 houses\n    total_intervals_for_10_houses = 9  # Because there are 9 intervals between 10 houses\n    \n    # Calculate the total time needed for 10 houses\n    total_time_for_10_houses = (time_for_6_houses / intervals_passed_for_6_houses) * total_intervals_for_10_houses\n    \n    return total_time_for_10_houses\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == 1/4 * D:\n                B = A - 1\n                C = D - 1\n                ABCD = 1000 * A + 100 * B + 10 * C + D\n                DCBA = 1000 * D + 100 * C + 10 * B + A\n                if ABCD * 4 == DCBA and len({A, B, C, D}) == 4:\n                    return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length = 1.05 * 100  # convert meters to centimeters\n    longer_piece = (2 / 3) * total_length  # longer piece is 2/3 of total since it's twice as long as the other\n    return longer_piece\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # since the line passes through the origin, we know b = 0\n    # We have the point (4, 8) which lies on the line, so we can use it to find the slope m\n    x1, y1 = 0, 0  # origin\n    x2, y2 = 4, 8  # given point\n\n    # slope (m) = (y2 - y1) / (x2 - x1)\n    m = (y2 - y1) / (x2 - x1)\n\n    # We know the linear equation is of the form y = mx + b\n    # And b = 0 since the line passes through the origin\n    # So the equation reduces to y = mx\n    # Therefore, the final equation is y = m * x, where m is what we have found above\n\n    # Return the equation in a string format as per instructions\n    return f\"y={m}x\"\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # pattern is ●○●○○ which is black, white, black, white, white\n    # let b be the number of black balls\n    # the total pattern is repeating every 5 balls, and we have 2 white balls in each pattern\n    # if there are 92 white balls, we have 92 / 2 patterns since we have two white balls per pattern\n    patterns = 92 // 2\n    \n    # now we calculate how many total balls there are by multiplying the patterns with the balls per pattern\n    total_balls = patterns * 5\n    return total_balls\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # To win the game, Jack needs to leave a multiple of (11 + 1)\n    # coins to Ken on his last turn. This is because no matter how many coins\n    # Ken picks up, Jack can always pick up the rest to force a win.\n    # S = k(11+1)+1, for some k, where S is the number of coins left.\n    # We need to find the largest k such that S is less than 2015.\n    \n    coins_total = 2015\n    max_pickup = 11\n    \n    # The strategy is to reduce the total number of coins to a multiple of (max_pickup + 1)\n    # Therefore, Jack should leave 2015 mod (max_pickup+1) coins after his first turn\n    coins_after_first_turn = coins_total % (max_pickup + 1)\n    \n    # If coins_after_first_turn is 0, it means the total number of coins is already a multiple\n    # of 12, which is a losing position for Jack. Jack should then pick up all 11 coins to not\n    # be in the losing position. Else, Jack picks up coins_after_first_turn coins.\n    if coins_after_first_turn == 0:\n        return max_pickup\n    else:\n        return coins_after_first_turn\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            # Convert the hour and minute to strings and concatenate\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count occurrences of '4'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num) if digit in ['0','6','8','9'])\n\n    def transform(num):\n        num_str = str(num)\n        return sum_of_digits(num_str.count('6') + num_str.count('8')*2 + num_str.count('9'))\n\n    ans = transform(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Since the dwarfs were born in seven consecutive years, their ages form an arithmetic sequence.\n    # Let's denote the age of the youngest dwarf as 'a'.\n    # The next ages will then be 'a+1', 'a+2', ... until 'a+6' for the oldest one.\n    # According to the problem, the sum of the ages of the youngest three is 42.\n    # Therefore, we have a + (a+1) + (a+2) = 42\n    \n    # Let's solve this simple equation for 'a'.\n    a = (42 - 3) // 3  # Subtracting the 3 values added to 'a' from 42 and dividing by 3.\n\n    # Now we need to find the age of the oldest one which is 'a+6'.\n    age_oldest = a + 6\n    \n    return age_oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears % 6 == 2) and ((pears + 3) % 7 == 0):\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let x be the initial number of passengers\n    remaining_after_first_stop = 3 / 5  # As two fifths got off\n    remaining_after_second_stop = 2 / 3  # As one third got off\n    passengers_left = 22\n\n    # Calculate the initial number of passengers before both stops\n    initial_passengers = passengers_left / (remaining_after_first_stop * remaining_after_second_stop)\n\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10  # original length in cm\n    shorter_length_mm = 4    # shortened length in mm\n\n    # Convert mm to cm\n    shorter_length_cm = shorter_length_mm / 10\n\n    # Calculate the new length in cm\n    new_length_cm = original_length_cm - shorter_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Sam's and Peter's initial amount of stickers represented as s and p\n    s, p, j = symbols('s p j')\n\n    # Given Sam and Peter had stickers in the ratio 7 : 5\n    equation1 = Eq(s/p, 7/5)\n\n    # Both Sam and Peter gave 20% of their stickers to John\n    # This means Sam will have 80% of his stickers left, so will peter\n    # and John's stickers will increase by 80%\n    equation2 = Eq(0.8 * s + 0.8 * p, 1.8 * j)\n\n    # Sam had 20 stickers more than John in the end\n    equation3 = Eq(0.8 * s, j + 20)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (s, p, j))\n\n    # p is the number of stickers Peter had at first, which is what we need\n    return solutions[p]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Distance covered in each stage of the race\n    distance_first_stage = 420\n    distance_middle_stage = 620\n    # The last stage distance can be calculated as total distance minus the sum of first two stages\n    distance_last_stage = 1200 - distance_first_stage - distance_middle_stage\n\n    # Speed in each stage of the race\n    speed_first_stage = 7\n    speed_middle_stage = 5\n    speed_last_stage = 8\n\n    # Time = Distance / Speed, calculating time spent in each stage\n    time_first_stage = distance_first_stage / speed_first_stage\n    time_middle_stage = distance_middle_stage / speed_middle_stage\n    time_last_stage = distance_last_stage / speed_last_stage\n\n    # Total time is the sum of time for each stage\n    total_time = time_first_stage + time_middle_stage + time_last_stage\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    desired_average = 95\n    test_scores = 100\n    additional_tests = 0\n    \n    while True:\n        additional_tests += 1\n        new_average = (current_total_score + test_scores * additional_tests) / (4 + additional_tests)\n        if new_average >= desired_average:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n    \n    # Equations based on the problem\n    equation1 = Eq(x + y, 72)  # Total number of notes\n    equation2 = Eq(x - 0.9*x, 2*(y - 0.75*y))  # Notes left after spending\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Determine the number of notes\n    num_10_notes = solutions[x]\n    num_2_notes = solutions[y]\n    \n    # Calculating the total amount spent\n    spent_10_notes = 0.9 * num_10_notes * 10\n    spent_2_notes = 0.75 * num_2_notes * 2\n    total_spent = spent_10_notes + spent_2_notes\n    \n    return total_spent\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rate of filling the pool per hour for hoses A, B, and C as a, b, and c\n    a, b, c = symbols('a b c')\n\n    # Hose A and B together fill the pool in 9 hours\n    equation1 = Eq(a + b, 1/9)\n\n    # Hose A and C together fill the pool in 12 hours\n    equation2 = Eq(a + c, 1/12)\n\n    # Hose B and C together fill the pool in 18 hours\n    equation3 = Eq(b + c, 1/18)\n\n    # Solve the system of equations for a, b, and c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # All three hoses working together\n    time_all_three = 1 / (solutions[a] + solutions[b] + solutions[c])\n\n    return time_all_three.evalf()\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # If we take one marker of each color, we have a total of 3 markers.\n    # To ensure we have at least 2 markers of the same color, we need to take one more marker.\n    markers_needed = 3 + 1\n    return markers_needed\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for num_5_dollar_notes in range(58 + 1):\n        num_2_dollar_notes = 58 - num_5_dollar_notes\n        total_value = (num_5_dollar_notes * 5) + (num_2_dollar_notes * 2)\n        if total_value == 164:\n            return num_5_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # The sequence is an arithmetic progression\n    # The common difference can be found as the difference between consecutive terms\n    common_difference = 120 - 105  # This is the difference between the 8th and 7th term\n\n    # Find the first term by subtracting 6 times the common difference from the 7th term\n    first_term = 105 - 6 * common_difference\n\n    # The 100th term can be found by adding 99 times the common difference to the first term\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    total_spent = 187.50\n    price_per_cupcake = total_spent / 36  # Only considering the first purchase\n    price_per_muffin = price_per_cupcake / 3\n    muffins_spent = price_per_muffin * 32  # Calculating the amount spent on muffins\n\n    return muffins_spent\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # We are going to find the smallest number of marbles.\n    # Let's start by assigning the minimum amount of marbles for 8 distinct boxes (2 marbles each)\n    marbles = [2 * i for i in range(1, 9)]\n    # Two boxes have the same number of marbles.\n    # The smallest even number for them, that's not in the existing list, is 2*9.\n    smallest_duplicate = 2 * 9\n    marbles.extend([smallest_duplicate] * 2)\n\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    total = sum(range(1, 10)) + sum(range(4, 9))\n    return total\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    min_pigeons_in_max_cage = (total_pigeons + total_cages - 1) // total_cages\n    return min_pigeons_in_max_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    # One sprinkler is needed between each pair of parterres;\n    # therefore, one fewer sprinkler than the number of parterres is needed.\n    num_sprinklers = num_parterres - 1\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) / 2\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each person originally had.\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Define the equations based on the problem statement.\n    equation1 = Eq(marry, 7/5 * alexis)  # Marry had 7/5 as many stickers as Alexis.\n    equation2 = Eq(marry - 0.20 * marry, charlotte + 0.20 * charlotte + 20)  # Marry and Charlotte's stickers after giving.\n    equation3 = Eq(alexis - 0.20 * alexis, charlotte + 0.80 * charlotte)  # Alexis and Charlotte's stickers after giving.\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n\n    # Return the number of stickers Alexis had at first.\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total length of the road\n    total_length = symbols('total_length')\n\n    # Create the equation based on the problem statement\n    equation = Eq(8 + (1/6)*total_length + 4, (5/12)*total_length)\n\n    # Solve the equation for the total length\n    solution = solve(equation, total_length)\n\n    return solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Since the field is rectangular and wheat is planted along the sides,\n    # the perimeter should be divided by the number of wheat minus the 4 corners.\n    # Calculate the perimeter\n    perimeter = 2 * (144 + 204)\n    \n    # Calculate the number of intervals\n    # The number of intervals equals the number of wheat minus the 4 corners\n    intervals = 116 - 4\n\n    # Calculate the distance between two wheats\n    distance = perimeter / intervals\n\n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    multiple = 35\n    while True:\n        if sum(int(digit) for digit in str(multiple)) == 35 and str(multiple).endswith('35'):\n            return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    avg_height = sum(heights) / len(heights)\n    return avg_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_pine_nuts = 112\n    sunny_pine_nuts = 20\n    rainy_pine_nuts = 12\n\n    # Let x be the number of rainy days\n    # Then (total_days - x) will be the number of sunny days\n    # rainy_pine_nuts * x + sunny_pine_nuts * (total_days - x) = total_pine_nuts\n    # Solve for x\n    x = (total_pine_nuts - sunny_pine_nuts * total_days) / (rainy_pine_nuts - sunny_pine_nuts)\n    \n    return int(x)\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Define the cost of each bundle of bottles\n    single_bottle_cost = 15\n    two_bottle_cost = 28\n    five_bottle_cost = 60\n    \n    # Convert costs to pence\n    total_cost = float('inf')\n    \n    # Try all possible combinations of purchasing packs and individual bottles\n    for five_packs in range(4):  # He needs 17 bottles, so he can't buy more than 3 five packs\n        for two_packs in range(9):  # He can't buy more than 8 two packs because 2 * 9 > 17\n            # Calculate remaining bottles to be purchased as single units\n            remaining_single_bottles = 17 - (five_packs * 5 + two_packs * 2)\n            if remaining_single_bottles < 0:\n                continue  # Skip invalid combinations where he buys more bottles than needed\n            # Calculate the total cost for the current combination\n            current_cost = (five_packs * five_bottle_cost +\n                            two_packs * two_bottle_cost +\n                            remaining_single_bottles * single_bottle_cost)\n            # If the current combination is cheaper, update the total cost\n            if current_cost < total_cost:\n                total_cost = current_cost\n                \n    # Convert the total cost from pence to pounds (£)\n    ans = total_cost / 100\n    \n    return ans\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # With 4 players, the number of rounds needed is the number of players - 1.\n    num_players = 4\n    rounds = num_players - 1\n    \n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    correct_first = 10\n    correct_second = 15\n    correct_both = 7\n\n    correct_only_one = (correct_first - correct_both) + (correct_second - correct_both)\n\n    return correct_only_one\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n    \n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    \n    day_off = (end_date - start_date).days + 1\n    \n    return day_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    # After eating 8 pieces each, Rachel has 3 times as many as Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Total candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5 / 9\n    caps_given_away = 440\n\n    initial_caps = caps_given_away / (1 - remaining_fraction)\n\n    return int(initial_caps)\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # Speed of the train in m/s\n    time = 5    # Time in seconds to pass the tree\n\n    # Distance = Speed x Time\n    length_of_train = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    def fib(n):\n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return a\n\n    return fib(8)\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "from itertools import permutations\n\ndef solution():\n    expressions = [\n        \"285+15/5-2\",\n        \"(285+15)/5-2\",\n        \"285+(15/5)-2\",\n        \"285+15/(5-2)\",\n        \"(285+15)/(5-2)\"\n    ]\n    \n    # Generate a list of permutations for each expression\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    # Total mushrooms gathered equation\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    # Difference in mushrooms gathered equation\n    equalize_mushrooms = Eq(first_hour + 26, second_hour)\n    \n    # Solve the system of equations\n    solutions = solve((total_mushrooms, equalize_mushrooms), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n\n    # Since Bud spends less than £10 on brushes, she can buy at most 3 brushes\n    # (because 4 brushes would cost £12)\n    for brushes in range(4):\n        towels_cost = total_spent - (brushes * brush_price)\n        if towels_cost % towel_price == 0:\n            return brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result = 71\n    number = (result - 8) / 7\n    return number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    fraction_value = Fraction('0.49').limit_denominator()\n    return fraction_value\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "from itertools import permutations\n\ndef solution():\n    digits = '018'\n    # Generate all permutations of 3 digits where the first digit is not 0\n    all_combinations = [int(''.join(p)) for p in permutations(digits, 3) if p[0] != '0']\n    ans = len(all_combinations)\n    return ans\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    # Determine the worst-case scenario for drawing a blue marble\n    # by first drawing all the pink and grey marbles.\n    \n    pink = 9\n    grey = 7\n    # By drawing all pink and grey marbles, we still don't ensure a blue marble,\n    # so we need to draw one more marble which will be blue for sure.\n    \n    # The one extra draw will guarantee a blue marble.\n    draws_needed = pink + grey + 1\n\n    return draws_needed\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days = 14  # two weeks\n    total_miles = miles_per_day * days\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    sales_tax = 30\n\n    price_before_tax = sales_tax / tax_rate\n\n    return price_before_tax\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    for perm in permutations(numbers):\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    # Let x be the number of teddy bears made on the first day.\n    # Total bears can be calculated using the formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d), where n is the number of terms, a is the first term,\n    # and d is the common difference (which is 2 in this case).\n    # Thus, we have 35 = 5/2 * (2x + (5 - 1) * 2)\n    # Simplify the equation to find the value of x (bears made on the first day)\n    x = (total_bears - (days * (days - 1))) // days\n    # Bears made on the fifth day is x + 4 * 2 (since each day she makes 2 more than the previous day)\n    fifth_day_bears = x + 4 * 2\n    return fifth_day_bears\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    fraction1 = 6/7\n    fraction2 = 3/10\n    \n    percentage = (fraction2 / fraction1) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original quantity equation\n    equation1 = Eq(boys, girls - 30)\n\n    # After some left for recess, remaining boys = original boys - 3/5 of the boys\n    # After some left for recess, remaining girls = original girls - 5/8 of the girls\n    # The number of remaining boys and girls are equal\n    equation2 = Eq(boys - 3/5 * boys, girls - 5/8 * girls)\n\n    # Solve the equations simultaneously\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f represent the original number of frogs, and d the original number of dragonflies\n    f, d = symbols('f d')\n\n    # The equations represent the relationship before and after the magic show\n    equation1 = Eq(f, d + 9)\n    equation2 = Eq(f - d, 1)  # Since turning frogs into dragonflies and vice versa doesn't change the total amount\n\n    # Original amount of animals before the magic show\n    original_amount = Eq(f + d, 11 + 10)\n\n    # Solve for f and d\n    solutions = solve((equation1, equation2, original_amount), (f, d))\n\n    return solutions[f]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    total_subtraction = sum(numbers_to_subtract)\n    result = 300 - total_subtraction\n    return result\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    apples_to_give = (amy_apples - john_apples) // 2\n    return apples_to_give\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(25):\n        if (24 - i) / 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Work rates of A+B, B+C, A+C respectively\n    work_rate_AB = 1 / 3\n    work_rate_BC = 1 / 4\n    work_rate_AC = 1 / 8\n    \n    # Adding the work rates of AB, BC, and AC to get the work rate of 2A + 2B + 2C\n    work_rate_2A2B2C = work_rate_AB + work_rate_BC + work_rate_AC\n    \n    # Dividing by 2 to get the work rate of A + B + C\n    work_rate_ABC = work_rate_2A2B2C / 2\n    \n    # The time it takes for A + B + C to finish the job is the reciprocal of their work rate\n    time_ABC = 1 / work_rate_ABC\n    \n    return time_ABC\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Define the original elements of the equation as list for easy manipulation\n    elements = [285, '+', 15, '÷', 5, '-', 2]\n\n    # Define a helper function to calculate the result of the equation\n    def calculate(eq):\n        return eval(\"\".join(map(str, eq)))\n\n    # Store unique results in a set to avoid duplicates\n    results = set()\n\n    # Add brackets in possible positions and evaluate\n    # This includes no brackets, which is the original equation\n    # Since the task specifies one or two pairs of brackets, we'll ignore the no brackets case.\n\n    # One pair of brackets\n    # options (for two operands and one operator inside the brackets):\n    # (285+15)÷5-2\n    results.add(calculate([(elements[0] + elements[2]), elements[3], elements[4], elements[5], elements[6]]))\n    # 285+(15÷5)-2\n    results.add(calculate([elements[0], elements[1], (elements[2] / elements[4]), elements[5], elements[6]]))\n    # 285+15÷(5-2)\n    results.add(calculate([elements[0], elements[1], elements[2], elements[3], (elements[4] - elements[6])]))\n    \n    # Two pairs of brackets\n    # options (for two pairs each containing two operands and one operator):\n    # (285+15)÷(5-2)\n    results.add(calculate([(elements[0] + elements[2]), elements[3], (elements[4] - elements[6])]))\n    results.add(calculate([elements[0], elements[1], (elements[2] / (elements[4] - elements[6]))]))\n    results.add(calculate([(elements[0] + (elements[2] / elements[4])), elements[5], elements[6]]))\n    \n    return len(results)\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    total = 0\n    sign = 1\n    for number in range(100, 0, -1):\n        total += sign * number\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation: (45% of 2kg of sugar water + 15% of x kg of sugar water) / (2kg + x kg) = 25%\n    equation = Eq((0.45 * 2 + 0.15 * x) / (2 + x), 0.25)\n\n    # Solve the equation\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 8 - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n    \n    # if each kid eats 18 candies, 12 more are needed\n    equation1 = Eq(kids * 18, candies + 12)\n    \n    # if each kid eats 15 candies, there are just enough for 2 more kids\n    equation2 = Eq((kids + 2) * 15, candies)\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2), (candies, kids))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(total_sum)[-5:]\n    ans = int(last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 - 6) / 7\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, eugene = symbols('david eugene')\n    \n    # David has thrice as many cupcakes as Eugene\n    equation1 = Eq(david, 3 * eugene)\n    # David has 14 more cupcakes than Eugene\n    equation2 = Eq(david, eugene + 14)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (david, eugene))\n    \n    # David's cupcakes plus Eugene's cupcakes\n    total_cupcakes = solutions[david] + solutions[eugene]\n    \n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    sam, tim = symbols('sam tim')\n    equation1 = Eq(sam + tim, 1170)\n    equation2 = Eq(sam - sam/4 + 663, tim + tim/5)\n\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    return solutions[sam]/4\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    fruit_per_day = 24 / 6\n    total_fruit_over_8_days = fruit_per_day * 8\n    return total_fruit_over_8_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using Chinese Remainder Theorem\n    # x = 1 (mod 2), x = 1 (mod 3), x = 1 (mod 4), x = 1 (mod 6), x = 0 (mod 7)\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    # Ensure the number is between 200 and 300\n    while x < 200:\n        x += 2 * 3 * 4 * 6\n    \n    return x\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Initial number of stamps Sally and Ting have\n    sally_stamps = 40\n    ting_stamps = 32\n    \n    # Let x be the number of stamps Sally gives to Ting\n    # After giving x stamps, Sally has (40 - x) stamps and Ting has (32 + x) stamps\n    # According to the problem, the ratio of their stamps becomes 1:2, hence:\n    # (40 - x) / (32 + x) = 1 / 2\n    # Solving for x gives us the number of stamps Sally gives to Ting\n\n    # Calculate x by cross-multiplication\n    x = symbols('x')\n    equation = Eq((40 - x) * 2, (32 + x) * 1)\n    x_value = solve(equation, x)[0]\n\n    # Calculate the number of stamps Ting has in the end\n    ting_final_stamps = ting_stamps + x_value\n\n    return ting_final_stamps\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # The amount of money available to spend.\n    total_money = 20\n    # The cost per packet of sweets.\n    packet_cost = 4\n    # Number of sweets per packet.\n    sweets_per_packet = 8\n    # Number of free sweets per two packets bought.\n    free_sweets_for_two_packets = 1\n\n    # Calculate how many packets can be bought with the total money.\n    packets_bought = total_money // packet_cost\n    # Calculate the number of free sweets received.\n    free_sweets = (packets_bought // 2) * free_sweets_for_two_packets\n    # Calculate the total number of sweets obtained.\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    # Let t be the time (in minutes) David walks at the increased speed of 200 metres per minute\n    # David walks at 150 metres per minute for the first 10 minutes, so he covers 150 * 10 = 1500 metres\n    # For the remaining time t, he walks at a speed of 200 metres per minute\n    # The total distance covered at the increased speed is 200 * t\n    \n    # Total distance covered is the sum of the two parts:\n    # 1500 metres (first 10 minutes) + 200t metres (next t minutes) = 3700 metres\n    # Thus, we get the equation: 1500 + 200t = 3700\n    \n    # Solving for t\n    t = (3700 - 1500) / 200\n    \n    # Total time spent walking in the park is 10 minutes + t minutes\n    total_time = 10 + t\n    \n    return total_time\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Initial distribution (minimum one piece for each child)\n    initial_pieces = 8  # Since there are 8 children, the minimum to distribute initially is 8\n\n    # Now there are 88 - 8 = 80 pieces of candy left to distribute.\n    # We want to find the least possible number of pieces the child with the most pieces can get.\n    # Let's distribute the remaining candies starting from the smallest increase (which is 1)\n    \n    remaining_pieces = 88 - initial_pieces\n    pieces_for_most = 1  # We start with 1 since it's the smallest increment\n\n    # We start to increment the pieces for each subsequent child, as no two children can have the same amount\n    # Hence, the sequence would be 1, 2, 3, ..., until 8 different amounts are distributed.\n    # The first child gets the least (1 piece), so we increment for the next children.\n\n    for i in range(2, 9):\n        if remaining_pieces - i >= 0:\n            pieces_for_most += i\n            remaining_pieces -= i\n        else:\n            break\n    \n    # The last child (the one who gets the most) will receive the leftover candies\n    # plus the amount they were supposed to get in the even distribution which is i-1.\n    pieces_for_most += remaining_pieces\n    \n    return pieces_for_most\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    return 0.4 - 0.25\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 1.4 * girls)\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of pink, purple, and orange counters\n    pink = 5\n    purple = 7\n    orange = 8\n    \n    # Initial probability of picking a pink counter\n    initial_prob_pink = pink / (pink + purple + orange)\n    \n    # Desired probability of picking a pink counter, which is double the initial\n    desired_prob_pink = 2 * initial_prob_pink\n\n    # Starting with the initial state of the bag, incrementally add pink counters\n    # until the probability of picking a pink counter doubles.\n    extra_counters = 0\n    while True:\n        extra_counters += 1\n        new_prob_pink = (pink + extra_counters) / (pink + purple + orange + extra_counters)\n        if new_prob_pink >= desired_prob_pink:\n            break\n\n    return extra_counters\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    factorial = 1\n    for i in range(1, 17):\n        factorial *= i\n    \n    ans = 0\n    while factorial % 10 == 0:\n        ans += 1\n        factorial //= 10\n    \n    return ans\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Pigeonhole principle calculation\n    # At least two pairs of socks in the same color\n\n    # Max socks taken without getting two pairs in the same color:\n    # 3 different single color socks (3)\n    # + 1 pair of one color (2)\n    # + 2 single socks of the other two colors (2 + 2)\n    # = 3 + 2 + 2 + 2 \n    # This guarantees 1 pair and 3 single socks of different colors.\n\n    # We must take out one more to ensure we have a second pair of same color socks.\n    # So the total is 9 + 1.\n    total_socks = 3 + 2 + 2 + 2 + 1\n\n    return total_socks\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    cupcakes, muffins = symbols('cupcakes muffins')\n    equation1 = Eq(muffins - 12, 2 * (cupcakes - 60))\n    equation2 = Eq(cupcakes, muffins)\n\n    solutions = solve((equation1, equation2), (cupcakes, muffins))\n\n    total = solutions[cupcakes] + solutions[muffins]\n\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angeles = 12.25\n    los_angeles_to_shanghai = shanghai_to_los_angeles + 90 / 60\n    round_trip = shanghai_to_los_angeles + los_angeles_to_shanghai\n    return round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    # Initial ratio\n    equation1 = Eq(eddi/wiya, 3/2)\n\n    # Ratio after Lisa gives Eddi $4\n    equation2 = Eq((eddi + 4)/wiya, 8/5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    # Let x be the amount Helen receives each day.\n    # Then George receives x + 3 each day.\n    \n    # Both of them spend $5 a day, so Helen saves x - 5 each day and George saves (x + 3) - 5 each day.\n\n    # Let y be the number of days after which Helen has saved $60.\n    # Helen's savings: y * (x - 5) = 60\n    # George's savings: y * ((x + 3) - 5) = y * (x - 2) = 60 + 90 = 150\n\n    # Now we have two equations:\n    # 1. y * (x - 5) = 60\n    # 2. y * (x - 2) = 150\n\n    # From equation 1, we find y in terms of x:\n    # y = 60 / (x - 5)\n\n    # Substitute the value of y from equation 1 into equation 2:\n    # (60 / (x - 5)) * (x - 2) = 150\n    # 60 * (x - 2) = 150 * (x - 5)\n    # 60x - 120 = 150x - 750\n    # 90x = 630\n    # x = 7\n\n    # Helen receives $7 each day.\n    return 7\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the terms of AP with common difference 'd' and 'a' as the first term\n    d, a = symbols('d a')\n\n    # 9th term a + 8d is 18 larger than the 15th term a + 14d\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # The sum of the 20th term a + 19d and the 12th term a + 11d is 88 \n    equation2 = Eq(a + 19*d + a + 11*d, 88)\n\n    # Solve the equations for 'd' and 'a'\n    solutions = solve((equation1, equation2), (d, a))\n\n    # Find the 32nd term: a + 31d\n    term_32 = solutions[a] + 31*solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Arithmetic series sum formula: sum = n/2 * (first term + last term)\n    # For 1 to 30\n    n1 = 30\n    sum1 = n1 * (1 + n1) // 2\n    \n    # For 1 to 29 (as 30 is already counted in the first part)\n    n2 = 29\n    sum2 = n2 * (1 + n2) // 2\n    \n    # Total sum\n    ans = sum1 + sum2\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    # Using the Inclusion-Exclusion Principle\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance covered in the first 2 hours\n    initial_distance = 2 * 40\n    \n    # Remaining distance\n    remaining_distance = 280\n    \n    # Total distance covered\n    total_distance = initial_distance + remaining_distance\n    \n    # Speed during the remaining distance\n    speed_remaining = 70\n    \n    # Time taken to cover remaining distance\n    time_remaining = remaining_distance / speed_remaining\n    \n    # Total time taken for the whole trip\n    total_time = 2 + time_remaining\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_numbers = 0\n    \n    # Count for numbers with exactly two sevens\n    for i in range(10):\n        if i != 7:\n            total_numbers += 2  # 77i and i77 cases (where i is any digit other than 7)\n            total_numbers += 1  # i7i case (we count it once)\n\n    # Count for numbers with three sevens (777)\n    total_numbers += 1\n    \n    return total_numbers\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4 = 4\n    pages_3 = 3\n    \n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        if four_page_penpals * pages_4 + three_page_penpals * pages_3 == total_pages:\n            return three_page_penpals\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    num = 768354\n    place_value = (num // 10**2) % 10  # Extracting the digit at hundreds place\n    return place_value * 10**2        # Returning the value of the digit in its place\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    from fractions import Fraction\n\n    A = Fraction(1)\n    \n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n    \n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    m = a0.numerator\n    n = a0.denominator\n    \n    return m + n\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    # Least Common Multiple of 25 and 20\n    days_lcm = lcm(25, 20)\n\n    # Since March 1st is the start day, and we already count it as day 1\n    start_new_packet_day = days_lcm + 1\n    \n    # March has 31 days, and we start counting from March 1\n    # We need to find out the overflow days after March\n    days_after_march = start_new_packet_day - 31\n    \n    # Now we need to calculate the date considering the days in each month\n    # Following the months after March and their respective days\n    months_days = [30, 31, 30, 31, 31, 30, 31, 30, 31, 31]\n    current_month = 4  # We start with April which is the 4th month\n    \n    while days_after_march > months_days[current_month - 4]:\n        days_after_march -= months_days[current_month - 4]\n        current_month += 1\n        \n    # Final date will be in the format (day, month)\n    return (days_after_march, current_month)\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial\n\n    # Since there must be at least one singing performance between every two dancing performances,\n    # we can first place the 4 dancing performances with space for singing performances in between.\n    # There are 5 places where singing performances can be placed around the dancing performances\n    # (one before each dancing performance and one at the end).\n\n    # We have 5 places to put 6 singing performances, which is similar to putting 6 identical balls \n    # into 5 distinguishable boxes with no restrictions. This can be done using combinations with \n    # repetitions also known as stars and bars method:\n    # The number of ways to distribute n identical objects into k distinguishable boxes is\n    # (n+k-1) choose (k-1) i.e., C(n + k - 1, k - 1).\n\n    places_for_singing = 5\n    singing_performances = 6\n\n    ways_to_place_singing = factorial(singing_performances + places_for_singing - 1) / (\n        factorial(places_for_singing - 1) * factorial(singing_performances))\n\n    # After all singing performances are in place, the total number of performances is fixed (10),\n    # and we can think of the 6 singing performances as slots we've placed.\n    # The dancing performances can be arranged among these fixed slots in C(5, 4) ways \n    # (choose 4 places out of the 5 to put dancing performances).\n\n    ways_to_place_dancing = factorial(places_for_singing) / (\n        factorial(places_for_singing - 4) * factorial(4))\n\n    # The total number of ways to arrange the performances is then the product of the number of\n    # ways to place the singing and the dancing performances.\n\n    ans = ways_to_place_singing * ways_to_place_dancing\n    return int(ans)\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Initialize potential digits based on the clues given\n    possible_digits = [set(range(10)) for _ in range(4)]  # Each position can have any digit from 0-9 initially\n\n    # Analyzing clue from \"8765\"\n    for i, digit in enumerate('8765'):\n        possible_digits[i] -= set([int(digit)])  # The digit is not in the right position\n\n    # Digits 8 and 6 or 7 and 5 are right but not in their position. Let's find possible positions for them\n    for combination in [(0, 2), (0, 3), (1, 2), (1, 3)]:\n        for digit in ['8', '6']:\n            possible_digits[combination[0]] |= set([int(digit)])\n            possible_digits[combination[1]] |= set([int(digit)])\n\n    # Analyzing clue from \"1023\"\n    for i, digit in enumerate('1023'):\n        possible_digits[i] -= set([int(digit)])  # The digit is not in the right position\n\n    # Digits 1 and 0 or 2 and 3 are right but not in their position. Let's find possible positions for them\n    for combination in [(0, 2), (0, 3), (1, 2), (1, 3)]:\n        for digit in ['1', '0']:\n            possible_digits[combination[0]] |= set([int(digit)])\n            possible_digits[combination[1]] |= set([int(digit)])\n\n    # Analyzing clue from \"8642\"\n    for i, digit in enumerate('8642'):\n        if i in [0, 1]:  # Digit 8 or 6 is in the right position\n            possible_digits[i] = set([int(digit)])\n        else:\n            possible_digits[i] -= set([int(digit)])  # The digit is not in the right position\n\n    # Analyzing clue from \"5430\"\n    for digit in '5430':\n        for i in range(4):\n            possible_digits[i] -= set([int(digit)])  # None of the digits is right, so remove them from all positions\n\n    # Find the combination that satisfies all conditions\n    for i in range(4):\n        possible_digits[i] = possible_digits[i].pop()\n\n    # Join digits to form the answer\n    ans = ''.join(str(possible_digits[i]) for i in range(4))\n    return ans\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x/4 - 25, 2021)\n    solution_x = solve(equation, x)[0]\n\n    correct_answer = solution_x * 4 + 25\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    prime_factors = {2: 0, 5: 0}\n    numbers = [75, 56, 12, 105]\n    for number in numbers:\n        while number % 2 == 0:\n            prime_factors[2] += 1\n            number //= 2\n        while number % 5 == 0:\n            prime_factors[5] += 1\n            number //= 5\n\n    return min(prime_factors.values())\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'd' be the number of books Donna has, and 'c' be the number of books Chloe has\n    d, c = symbols('d c')\n    \n    equation1 = Eq(c, 4 * d)  # Chloe has 4 times as many books as Donna\n    equation2 = Eq(c - d, 816)  # Chloe has 816 more books than Donna\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (d, c))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's declare a symbol for the unknown variable\n    x = symbols('x')\n\n    # Define the equation based on the provided equation\n    equation = Eq((x + 4) / 8, 3)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The pattern of the last digit of 9 powered to n repeats every 2 times:\n    # 9^1 = 9 (last digit 9)\n    # 9^2 = 81 (last digit 1)\n    # 9^3 = 729 (last digit 9)\n    # 9^4 = 6561 (last digit 1)\n    # ...\n    # As 99 is an odd number, the ones digit of 9^99 will be the same as the ones digit of 9^1.\n    return 9\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 194): # Since 'a' is a prime number, it has to be less than 193\n        if isprime(a):      # Check if 'a' is a prime number\n            if (193 - 3 * a) % 11 == 0:   # Check if 'b' is going to be a whole number\n                b = (193 - 3 * a) // 11   # Calculate 'b'\n                if isprime(b):      # Check if 'b' is a prime number\n                    return a + b    # Return the sum of the prime numbers 'a' and 'b'\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Janice's error: multiplication should not be interpreted as a multiple of 'a' and 'b'\n    # but as a two-digit number 'ab' times 7, so it should have been 7*(10a + b)\n    for a in range(1, 10):  # 'a' cannot be zero since it is the first digit\n        for b in range(10):  # 'b' can be between 0 and 9, inclusive\n            ab = 10 * a + b  # Convert 'ab' to a two-digit number\n            a0b = 100 * a + b  # Convert 'a0b' into a three-digit number where the second digit is zero\n            if ab * 7 == a0b:\n                return ab  # This is the two-digit number we're looking for\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    houses_per_worker_per_day = 14 / (3 * 4)\n    houses_built_by_nine_workers_in_two_days = houses_per_worker_per_day * 9 * 2\n    return houses_built_by_nine_workers_in_two_days\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    adults, children, boys, girls = symbols('adults children boys girls')\n    \n    # adults = 3 * children\n    equation1 = Eq(adults, 3 * children)\n    # boys = 2 * girls\n    equation2 = Eq(boys, 2 * girls)\n    # adults = girls + 176\n    equation3 = Eq(adults, girls + 176)\n    # children = boys + girls\n    equation4 = Eq(children, boys + girls)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n    \n    total_people = solutions[adults] + solutions[children]\n    \n    return total_people\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    # Using brute force to check all age combinations\n    # Start from 1 since ages cannot be zero or negative\n    min_product = float('inf')\n\n    # We'll try every possible combination of ages for the dogs,\n    # but we'll ensure that Bob is the oldest and Fido is the youngest.\n    for bob_age in range(1, 29):\n        for rex_age in range(1, bob_age):  # Rex is younger than Bob\n            for fido_age in range(1, rex_age):  # Fido is younger than Rex and Bob\n                if bob_age != rex_age != fido_age:  # None of the dogs are the same age\n                    if bob_age + rex_age + fido_age == 28:  # Sum of their ages is 28\n                        if fido_age == bob_age - 10:  # Fido is 10 years younger than Bob\n                            product = bob_age * rex_age * fido_age\n                            min_product = min(min_product, product)\n    \n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Number of people at the funfair is a symbol\n    total_people = symbols('total_people')\n    \n    # Equations based on the given information\n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n\n    # There were 20 more children than men\n    equation = Eq(children, men + 20)\n    \n    # Solve the equation to find the total number of people\n    solutions = solve((equation,), (total_people,))\n    \n    # As we have one solution, we return that solution after confirming it's an integer\n    ans = int(solutions[0])\n    return ans\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols/variables\n    cost_per_ball = symbols('cost_per_ball')\n    total_money = symbols('total_money')\n\n    # Define the equations\n    equation1 = Eq(total_money - 5 * cost_per_ball, 15)\n    equation2 = Eq(total_money - 8 * cost_per_ball, -12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cost_per_ball, total_money))\n\n    return solutions[cost_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    # Given that the highest common factor is 75, both numbers must be multiples of 75.\n    # Now we look for two distinct numbers with two equal digits that are multiples of 75.\n    # The largest 3-digit multiple of 75 is 975 (75 * 13).\n    # We'll search for A and B in the range from 75 to 975.\n    # Since A and B have two equal digits, we check only for numbers that adhere to this condition.\n    max_sum = 0\n\n    for A in range(975, 74, -75):  # From the largest multiple down to the smallest in steps of 75.\n        str_A = str(A)\n        if str_A[0] == str_A[1] or str_A[0] == str_A[2] or str_A[1] == str_A[2]:  # Check for two equal digits.\n            for B in range(A-75, 74, -75):  # Start from a multiple less than A and check downwards.\n                str_B = str(B)\n                if (str_B[0] == str_B[1] or str_B[0] == str_B[2] or str_B[1] == str_B[2]) and A != B:\n                    # Also check if B has two equal digits and is different from A.\n                    current_sum = A + B\n                    if current_sum > max_sum:\n                        max_sum = current_sum\n                        break  # Since we are checking in descending order, the first found pair is the largest sum.\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    initial_height_after_first_bounce = height_after_second_bounce / (1/3)\n    initial_height = initial_height_after_first_bounce / (1/3)\n    \n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(1, 30) + Fraction(1, 6)) / Fraction(2, 25) + (2 - Fraction(2, 3)) / Fraction(8, 3)\n    \n    return result\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the work Lee can do per hour, and n be the work Nancy can do per hour\n    l, n = symbols('l n')\n\n    # If they work together, they finish in 10 hours\n    equation1 = Eq(l + n, 1 / 10)\n\n    # Lee works for 6 hours and Nancy works for 20 hours\n    equation2 = Eq(6 * l + 20 * n, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, n))\n\n    # How long it will take for Nancy to finish the job by herself\n    time_for_nancy = 1 / solutions[n]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # Let x be the average score of Class A\n    # Class A has 40 pupils and Class B has 30 pupils\n    # Total number of pupils is 40 + 30 = 70\n    # Total average score for both classes is 90\n    # Class B's average score is 7 marks higher than that of Class A\n\n    # The total score for pupils in both classes is 70 * 90\n    total_score_both_classes = 70 * 90\n    \n    # If x is the average score of Class A\n    # Then average score of Class B is x + 7\n    # Total score of Class A is 40 * x\n    # Total score of Class B is 30 * (x + 7)\n    # The sum of these is equal to the total score for both classes\n    # So, we have the equation: 40 * x + 30 * (x + 7) = total_score_both_classes\n    \n    # Solving for x gives us the average score of Class A\n    # We can then find the average score of Class B by adding 7 to the average score of Class A\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(40 * x + 30 * (x + 7), total_score_both_classes)\n    average_score_class_a = solve(equation, x)[0]\n    \n    # The average score of Class B is\n    average_score_class_b = average_score_class_a + 7\n    \n    # Return the average score of Class B\n    return average_score_class_b\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    value = 1 / (1/(2007*2008) + 1/(2008*2009) + 1/2009)\n    return value\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pence in range(6): # Jeremy has 5 ten-pence coins\n        for twenty_pence in range(4): # Jeremy has 3 twenty-pence coins\n            for fifty_pence in range(2): # Jeremy has 1 fifty-pence coin\n                total = 10 * ten_pence + 20 * twenty_pence + 50 * fifty_pence\n                if total == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    num_boats = -(-students // boat_capacity)\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249 * 250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, caris = symbols('aaron becky caris')\n    equation1 = Eq(aaron - becky, becky - caris)\n    equation2 = Eq(aaron + becky + caris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, caris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n    \n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    total_digits = 0\n\n    for number in range(1, 201):  # Including 200\n        total_digits += len(str(number))\n        \n    return total_digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        num = int(f\"9{a}8{a}\")\n        if num % 15 == 0:\n            return a\n    return None\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for J in range(10):\n        if int(f'125{J}6') % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    number = symbols('number')\n    equation = Eq((number + 7) * 6, 66)\n    original_number = solve(equation, number)[0]\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*9 - 2*x, 33)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Using the formula for the sum of squares\n    sum_of_squares = lambda n: (n * (n + 1) * (2 * n + 1)) // 6\n    # Using the formula for the sum of cubes\n    sum_of_cubes = lambda n: (n * (n + 1) // 2) ** 2\n\n    # Using the distributive law to calculate the sum\n    ans = sum(i * (i + 1) ** 2 for i in range(24))\n    \n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    # The question with the number 11 does not provide a clear problem to solve.\n    # As the instruction given is ambiguous, we will return 11 as the answer\n    # since no other mathematical operation or context is provided.\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    \n    days_in_packet_25 = 25\n    days_in_packet_20 = 20\n    \n    least_common_multiple = lcm(days_in_packet_25, days_in_packet_20)\n    \n    return least_common_multiple\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360\n    ratio_up = 5\n    ratio_down = 4\n    speed_diff = 10  # m/min\n    \n    # Calculate the time spent going up and down\n    time_up = (ratio_up / (ratio_up + ratio_down)) * total_time\n    time_down = (ratio_down / (ratio_up + ratio_down)) * total_time\n    \n    # Let x be the speed going down\n    x = symbols('x')\n    \n    # The distances going up and going down are the same\n    # distance = speed * time -> time_up * (x - speed_diff) = time_down * x\n    equation = Eq(time_up * (x - speed_diff), time_down * x)\n    speed_down = solve(equation, x)[0]\n    \n    # Calculate the distance cycled going up and down\n    distance_up = time_up * (speed_down - speed_diff)\n    distance_down = time_down * speed_down\n    \n    # Total distance cycled is the sum of distances up and down\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    # Let 'd' be the number of days after which the condition is met.\n    # Initial number of watermelons and pineapples\n    watermelons = 94\n    pineapples = 138\n    # Used watermelons and pineapples each day\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n\n    # Remaining watermelons and pineapples after 'd' days\n    # watermelons - watermelons_per_day * d\n    # pineapples - pineapples_per_day * d\n    \n    # The condition that the number of pineapples is 3 times the number of watermelons\n    # pineapples - pineapples_per_day * d = 3 * (watermelons - watermelons_per_day * d)\n\n    # Solving for 'd'\n    d = (pineapples - 3 * watermelons) / (2 * watermelons_per_day)\n\n    return int(d)\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages\n    tom, jerry = symbols('tom jerry')\n\n    # Create equations based on the information given\n    # Tom will be twice his age in 4 years from now\n    equation1 = Eq(tom + 4, 2 * tom)\n    \n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n    \n    # Solve the system of equations\n    ages = solve((equation1, equation2), (tom, jerry))\n    \n    # Find out in how many years from now Jerry's age will be doubled\n    jerry_current_age = ages[jerry]\n    jerry_doubled_age = 2 * jerry_current_age\n\n    # The equation will be current_age + years = doubled_age\n    years = jerry_doubled_age - jerry_current_age\n\n    return years\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    aiden_arrival = 9 * 60 + 22  # Convert 9:22 AM to minutes\n    bus_departure = 9 * 60 + 15  # Convert 9:15 AM to minutes\n\n    if aiden_arrival <= bus_departure:\n        wait_time = bus_departure - aiden_arrival\n    else:\n        # Calculate how many minutes past the previous bus Aiden arrived\n        minutes_past = aiden_arrival - bus_departure\n        # Calculate how many minutes until the next bus\n        wait_time = bus_interval - (minutes_past % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    weeks = days_until_birthday // days_in_week\n    return weeks\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62  # metres per minute\n    brother_speed = 70  # metres per minute\n\n    # They meet after 5 minutes\n    time = 5  # minutes\n\n    # Eddie's distance to the meeting point\n    eddie_distance = eddie_speed * time\n\n    # Brother's distance to the meeting point\n    brother_distance = brother_speed * time\n\n    # Total distance from house to mall is the sum of distances covered by Eddie and his brother\n    total_distance = eddie_distance + brother_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    result = 161 / 46\n    return result\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Yun's transportation\n    yun_cars = 4\n    yun_fruits_kg = 24.2\n    yun_per_car = yun_fruits_kg / yun_cars  # The amount each of Yun's cars carries\n\n    # Yang's transportation\n    yang_trucks = 50\n    yang_fruits_kg = 410\n    yang_per_truck = yang_fruits_kg / yang_trucks  # The amount each of Yang's trucks carries\n\n    # The difference in mass between what each truck and car carried\n    difference = yang_per_truck - yun_per_car\n    return difference\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([(3 + i) ** 2 * (-1) ** i for i in range(49)])\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    # Initial ages of the family members\n    ages = {\n        \"me\": 7,\n        \"brother\": 5,\n        \"mother\": 29,\n        \"father\": 31\n    }\n    # Increment the year until all family members' ages are prime again\n    year = 2017\n    while True:\n        year += 1\n        ages[\"me\"] += 1\n        ages[\"brother\"] += 1\n        ages[\"mother\"] += 1\n        ages[\"father\"] += 1\n\n        # Check if all the new ages are prime\n        if all(isprime(ages[member]) for member in ages):\n            return ages[\"father\"]\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    ans = 9321 - 899\n    return ans\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    # The number of intervals between lamp posts is equal to the number of groups of 3 flowers + 1\n    intervals_between_lamps = total_flowers // flowers_between_lamps + 1\n    total_distance = 50  # meters\n    \n    distance_between_lamps = total_distance / intervals_between_lamps\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    circles = 7\n    intersections = circles * (circles - 1) // 2\n    regions = 1 + circles + intersections + intersections * (circles - 2) // 2 \n    return regions\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_each_friend = 15\n    number_of_friends = 8\n\n    books_given_away = books_given_each_friend * number_of_friends\n    books_packed_in_box = total_books - books_given_away\n\n    return books_packed_in_box\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    power_cycle = [base_unit_digit]  # The cycle starts with 4\n    \n    # Generate the cycle of unit digits for powers of 4\n    while True:\n        next_unit_digit = (base_unit_digit * 4) % 10  # Get next unit digit\n        if next_unit_digit == power_cycle[0]:  # If the cycle repeats, break\n            break\n        power_cycle.append(next_unit_digit)  # Append to the cycle\n    \n    cycle_length = len(power_cycle)\n    # Modulo of the power with the cycle length to find the position in the cycle\n    cycle_position = 2008 % cycle_length\n\n    # The unit digit of 44^2008 will be the same as 4^2008\n    unit_digit = power_cycle[cycle_position - 1]  # cycle_position - 1 because list is 0-indexed\n\n    return unit_digit\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    male_fraction = 3/5\n    number_of_males = total_adults * male_fraction\n    \n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to the three places\n    paths_audio = 6\n    paths_book = 4\n    paths_chapel = 5\n\n    # Number of paths from the three places to school\n    paths_audio_school = 2\n    paths_book_school = 2\n    paths_chapel_school = 3\n\n    # Total number of paths from home to school\n    total_paths = (paths_audio * paths_audio_school +\n                   paths_book * paths_book_school +\n                   paths_chapel * paths_chapel_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins\n    \n    total_value = one_pound_coins * 100 + fifty_p_coins * 50 + twenty_p_coins * 20\n    return total_value / 100  # Convert pence to pounds\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    ans = 76 * 9\n    return ans\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let a, b, c be the weights of Adam, Ben, and Carl, respectively.\n\n    # Adam and Ben weigh 102kg together\n    # Ben and Carl weigh 97kg together\n    # Adam and Carl weigh 93kg together\n\n    # (a + b) + (b + c) + (a + c) = 102 + 97 + 93\n    # 2a + 2b + 2c = 292\n    # a + b + c = 292 / 2\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle = symbols('belle')\n    eddie = symbols('eddie')\n\n    belle_sticks = 49\n    eddie_gave = 11\n\n    equation = Eq(belle + eddie_gave, eddie)\n\n    # Given after receiving 11 sticks from Eddie, Belle and Eddie have the same number\n    solutions = solve(equation.subs(belle, belle_sticks), eddie)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    distance_between_lamps = 2\n    number_of_gaps = 50 - 1  # number of gaps between lamp posts\n\n    length_of_road = number_of_gaps * distance_between_lamps\n\n    return length_of_road\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    result = 198 + 298 + 398 + 498\n    return result\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5/11) + (2/27)) * 11 + (5/27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    num_boxes = 6\n    weight_per_box = 1.3\n\n    total_weight = num_boxes * weight_per_box\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for John and Kofi's coins\n    john, kofi = symbols('john kofi')\n\n    # Equation 1: Total coins\n    total_coins = Eq(john + kofi, 25)\n    \n    # Equation 2: Coins after John gives Kofi four coins\n    coins_after_transfer = Eq(kofi + 4, john - 4 - 3)\n\n    # Solve the system of equations\n    solutions = solve((total_coins, coins_after_transfer), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_per_person = total_tea // 2\n    tea_to_give = tea_per_person - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['2', '4', '6']\n    all_permutations = set(permutations(digits))\n    count = len(all_permutations)\n    \n    return count\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    # Normal rabbits have 1 head and special rabbits have 3 heads. Total heads = 53.\n    equation1 = Eq(normal_rabbits + 3 * special_rabbits, 53)\n\n    # Normal rabbits have 4 feet and special rabbits have 2 feet. Total feet = 102.\n    equation2 = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    # Solving the equations for both variables\n    solutions = solve((equation1, equation2), (normal_rabbits, special_rabbits))\n\n    return solutions[normal_rabbits], solutions[special_rabbits]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = (10 * 100) - total_cost  # converting £10 to pence\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return (18 + 2 + 16)\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    total_pairs = 100 // 2\n    sum_pairs = (100 - 1) * total_pairs\n    return sum_pairs\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    # Neelesh has 4 sweets left after eating one, which means he initially had 5\n    neelesh_initial = 4 + 1\n    \n    # The initial amount Neelesh had is 1/6 of the total Ayesha had\n    total_sweets = neelesh_initial * 6\n    \n    # Ayesha gives 1/6 to Neelesh, so she has 5/6 left\n    ayesha_left = total_sweets - neelesh_initial\n\n    return ayesha_left\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    # Calculate the numerator\n    numerator = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n\n    # Calculate the denominator\n    denominator = sum(1/((20-i)*(i+1)) for i in range(11, 16))\n\n    # Calculate the final result\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weight of one copper ball as c and one iron ball as i.\n    c, i = symbols('c i')\n\n    # First equation: 8 copper balls + 9 iron balls weigh 135 kg\n    equation1 = Eq(8*c + 9*i, 135)\n\n    # Second equation: 6 copper balls + 3 iron balls weigh 75 kg\n    equation2 = Eq(6*c + 3*i, 75)\n\n    # Solving the system of equations for c and i\n    solutions = solve((equation1, equation2), (c, i))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Since 1/70 is a recurring decimal, we need to find its recurring pattern.\n    # The length of this pattern is k where 10^k ≡ 1 mod 70.\n    # To avoid complications with Python's floating point arithmetic,\n    # we will simulate long division until the pattern repeats or until we reach the 500th decimal place.\n\n    remainder = 10  # Start with the remainder after a \"long division\" step\n    remainders_seen = {}  # Store position where each remainder is first seen\n    pattern = ''  # The recurring pattern\n\n    for i in range(1, 501):\n        if remainder in remainders_seen:\n            # If we've seen this remainder before, we've found the repeating pattern\n            start_of_pattern = remainders_seen[remainder]\n            pattern = pattern[start_of_pattern:]\n            break\n        else:\n            # Store the position of this remainder and continue with long division\n            remainders_seen[remainder] = len(pattern)\n            pattern += str(remainder // 70)\n            remainder = (remainder % 70) * 10\n\n    # If we haven't found the repeating pattern within the first 500 digits, then just return the 500th\n    if len(pattern) < 500:\n        return int(pattern[-1])\n    else:\n        # Since the pattern might start after a few non-repeating decimals,\n        # Find where the repeating part starts after the decimal point\n        repeating_start = next(iter(remainders_seen.values()))\n\n        # Adjust the 500th digit index to account for non-repeating part\n        adjusted_index = (500 - repeating_start) % len(pattern)\n\n        # Return the 500th digit in the repeating pattern\n        return int(pattern[adjusted_index])\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    return 4.5 / 5\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    box_a, box_b, box_c = symbols('box_a box_b box_c')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(box_a, 80) # Box A has 80 marbles\n    equation2 = Eq(box_b, 2 * box_c) # Box B has twice as many marbles as Box C\n    equation3 = Eq(box_a + box_b + box_c, 560) # Total marbles in all boxes together\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (box_a, box_b, box_c))\n\n    # Return the number of marbles in Box C\n    return solutions[box_c]\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the number of gummy bears and l represent the number of lollipops\n    g, l = symbols('g l')\n\n    # Equation 1: The ratio g:l is 5:7\n    equation1 = Eq(g/l, 5/7)\n\n    # Equation 2: The new ratio g+120:l+120 is 4:5\n    equation2 = Eq((g + 120)/(l + 120), 4/5)\n\n    # Solve the system of equations for g and l\n    solutions = solve((equation1, equation2), (g, l))\n\n    # Calculate the total number of pieces of candy now\n    total_candy_now = solutions[g] + 120 + solutions[l] + 120\n\n    return total_candy_now\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15 \n    david_weight_pounds = david_weight_stone * 14\n    andrew_weight_pounds = 275\n\n    weight_difference_pounds = abs(david_weight_pounds - andrew_weight_pounds)\n    return weight_difference_pounds\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 10\n    given_term_position = 3\n    given_term_value = 31\n    common_difference = 3  # The difference in the sequence between terms\n\n    # Calculate the first term using the formula: a_n = a_1 + (n - 1) * d\n    first_term = given_term_value - (given_term_position - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    sum_of_numbers = 5 + 15 + 17 + 23\n    repetitions = 3\n    ans = sum_of_numbers * repetitions\n    return ans\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    series_sum = sum(31 + i*11 for i in range(7))\n    return series_sum\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n    \n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n    \n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    ans = 58 * 60\n    return ans\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize a list with 20 elements, all set to False, \n    # representing the 20 first positive integers not yet chosen\n    chosen = [False] * 20\n    \n    # We will pick numbers such that no two numbers differ by 5\n    count = 0\n    for i in range(20):\n        if not chosen[i]:\n            count += 1  # Pick this number\n            \n            # Mark all numbers that differ by 5 from the chosen number as unusable\n            for j in range(0, 20, 5):\n                if 0 <= i+j < 20:\n                    chosen[i+j] = True\n    \n    return count\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct_answer = 12\n    total_marks = (correct_answers * marks_per_correct_answer) + (wrong_answers * 0)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    num = ((2017 + 7/8) * (3 + 2/3)) - (2016.875 * (11/3))\n    denom = ((2017 + 1/3) - 2016.875) * 17\n    fraction = (3 + 23/32)\n    ans = (num / denom) * fraction\n    return ans\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    j, m, d = symbols('j m d')  # j = John's current age, m = Mother's current age, d = Difference in ages\n\n    eq1 = Eq(j + 8, m - 20)     # John's age in 8 years = Mother's age 20 years ago\n    eq2 = Eq(m, j + d)          # m = j + Age difference\n\n    # When mother is 5 times John's age\n    eq3 = Eq(m - d, 5 * (j - d))  # Mother's age - Age difference = 5 times (John's age - Age difference)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (j, m, d))\n\n    # Return John's age when his mother is 5 times his age\n    return solutions[j] - solutions[d]\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_pupil in range(10, 100):\n        total_pencils = f'1{pencils_per_pupil}'\n        if int(total_pencils) % 44 == 0:\n            ans = pencils_per_pupil\n            break\n    return ans\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of letters each person wrote\n    kevin, sara, james = symbols('kevin sara james')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    lcm_4_6 = lcm(4, 6)\n    ans = lcm(lcm_4_6, 7)\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "from sympy import lcm, nextprime\n\ndef solution():\n    # Since we need non-zero remainders which are all different when M is divided by numbers\n    # from 2 to 10, the least common multiple (LCM) of these numbers plus 1 is the smallest\n    # number which fulfills the condition.\n    #\n    # This is because the LCM is evenly divisible by all numbers in the range, so adding 1\n    # to it will give non-zero remainders which are also all different i.e., 1, when divided\n    # by these numbers.\n\n    lcm_val = lcm(range(2, 11))  # Calculate the least common multiple of numbers from 2 to 10\n    ans = lcm_val + 1            # Add 1 to that number to get the smallest possible M\n    return ans\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    tom_time = 24\n    william_time = 8\n    lcm = (tom_time * william_time) // math.gcd(tom_time, william_time)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_size = 4\n    containers_needed = -(-apples // container_size)  # Ceiling division\n    \n    return containers_needed\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    # Given that we have no information about the total amount collected,\n    # it is impossible to determine the exact amount Reema collected.\n    # The problem is underspecified and cannot be solved with the given information.\n    return None\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n\n    total_books = books_about_fish + books_about_birds\n\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Applying the principle of inclusion-exclusion for two sets\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n\n    # One post is needed for every 4 meters plus one for the end of the fence\n    num_posts = (length_of_field // distance_between_posts) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a can't be 0 as it is a two-digit number\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint, prod\n\n    # Factorize 28 into its prime factors\n    factors = factorint(28)\n\n    # To make a perfect square, each prime factor's power must be even.\n    # We should multiply 28 by the prime factors that are to an odd power\n    # to make them all even powers. If a prime factor's power is already even,\n    # we don't need to multiply by it.\n\n    # Find what to multiply by (the minimum number) to achieve even powers\n    to_multiply = prod([p for p, power in factors.items() if power % 2 != 0])\n\n    return to_multiply\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 / 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    ans = (10 + 20 + 30 + 50 + 60 + 70) - (6 + 16 + 26 + 46 + 56 + 66)\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('2:50 PM', '%I:%M %p')\n    total_time_before_lunch = timedelta(minutes=10 + 20)\n    home_arrival_time = lunch_end_time - total_time_before_lunch\n\n    return home_arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Treat A and B as one unit. We now have 5 units to arrange (AB, C, D, E, F)\n    units = 5\n    # The number of ways to arrange these 5 units is 5!\n    unit_arrangements = factorial(units)\n\n    # A and B can switch places within their unit, which is 2! ways\n    ab_arrangements = factorial(2)\n\n    # Total arrangements is the product of unit arrangements and AB arrangements\n    total_arrangements = unit_arrangements * ab_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    years = 5\n    \n    for year in range(years):\n        # Each year, the population increases 5 times\n        initial_population *= 5\n        # Then, half of the population dies\n        initial_population /= 2\n\n    return int(initial_population)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    cost_per_mile = 6\n    fare = symbols('y')\n    distance = symbols('x')\n    \n    equation = Eq(fare, cost_per_mile * distance)\n    return equation\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    ans = max([i for i in range(10, 100) if i % 4 == 3 and i % 5 == 3])\n    return ans\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    # Let Jessie's weight be x grams.\n    # Buzz's weight will then be 3x grams and is also 450g heavier than Jessie.\n    # So, Buzz's weight is x + 450 grams.\n    # We set up the equation 3x = x + 450 since Buzz is three times heavier than Jessie\n    # and also 450g heavier. Solving for x will give us Jessie's weight,\n    # and then we can find Buzz's weight by multiplying by 3.\n\n    # Solving the equation by isolating x:\n    # 3x = x + 450 \n    # 3x - x = 450 \n    # 2x = 450 \n    # x = 450 / 2 \n    # x = 225g (Jessie's weight)\n\n    # Now calculate Buzz's weight:\n    buzz_weight = 3 * 225 # Since Buzz is 3 times the weight of Jessie\n\n    return buzz_weight\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert both numbers from base 3 to base 10\n    num1_base10 = int(str(12101), 3)\n    num2_base10 = int(str(2210), 3)\n\n    # Perform subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Convert the subtraction result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n\n    return ans\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let the total number of steps on the escalator be x\n    # Peter's speed is 1 step/sec and takes 10 sec, so the escalator moves (x-10) steps in 10 sec\n    # When Peter increases his speed to 2 steps/sec, it takes him 8 sec, so the escalator moves (x-16)/2 steps/sec\n    \n    # Now we can set up two equations based on the above statements:\n    # (x - 10) / 10 = speed of the escalator\n    # (x - 16) / 8 = speed of the escalator * 2\n    \n    # Since the speeds are equal just at different rates:\n    # (x - 10) / 10 = (x - 16) / 16\n    \n    # Solving for x gives us the number of steps in the escalator:\n    x = symbols('x')\n    equation = Eq((x - 10) / 10, (x - 16) / 16)\n    ans = solve(equation, x)[0]\n    return int(ans)\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 * purple / 5)\n    equation3 = Eq(red * 4 + green * 5 + purple * 7, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    max_class_size = total_sweets // min_sweets_per_student\n\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Given 246 x 135 = 33210\n    given_product = 33210\n    # Increment the multiplier by 2 (from 246 to 248)\n    addition_due_to_increment = 2 * 135\n    # Calculate the new product by adding the addition due to increment to the given product\n    ans = given_product + addition_due_to_increment\n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval_length = 5\n\n    num_trees = (road_length // interval_length) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum_of_numbers = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum_of_numbers\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # James' height in cm\n    height_difference = 30  # Height difference between James and his brother Mark in cm\n    \n    mark_height = james_height + height_difference  # Calculate Mark's height\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_to_sally = total_blocks / 4\n    remaining_with_ben = total_blocks - given_to_sally\n    return remaining_with_ben\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Since it's even and smaller than the tens digit\n        for tens in range(hundreds + 1, 10, 2):  # It's even and greater than hundreds digit\n            ones = 2 * hundreds\n            if ones > 9:  # The ones digit must be a single digit\n                continue\n            number = 100 * hundreds + 10 * tens + ones\n            if number % 2 == 0 and number % 9 == 0:  # Divisible by 2 and 9\n                return number\n    return None\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    extra_hours = bill\n    \n    # Calculate the bill for hours between 40 and 50\n    if extra_hours > 5 * 10:\n        extra_hours -= 5 * 10\n    else:\n        return free_hours + extra_hours // 5\n    \n    # Calculate the bill for hours between 50 and 60\n    if extra_hours > 8 * 10:\n        extra_hours -= 8 * 10\n    else:\n        return free_hours + 10 + extra_hours // 8\n    \n    # Calculate the bill for hours over 60\n    return free_hours + 10 + 10 + extra_hours // 15\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of chocolate Sally and Ken have initially\n    sally, ken = symbols('sally ken')\n\n    # Create the equation based on the given ratio 5:7\n    equation1 = Eq(sally/ken, 5/7)\n    \n    # Create the equation after Ken gives 24 chocolates to Sally\n    equation2 = Eq(sally + 24, 2 * (ken - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    # Extract the solution for ken after giving 24 chocolates\n    ken_final = solutions[ken] - 24\n\n    return ken_final\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one colour pencil and one notebook\n    colour_pencil, notebook = symbols('colour_pencil notebook')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(5 * colour_pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * colour_pencil + 6 * notebook, 20)\n\n    # Solve the equations for the cost of one colour pencil and one notebook\n    solutions = solve((equation1, equation2), (colour_pencil, notebook))\n\n    # Calculate the total cost of one colour pencil and one notebook\n    total_cost = solutions[colour_pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_triangle = 3\n    sides_of_square = 4\n    \n    thought_number = (sides_of_square * 2) - sides_of_triangle\n\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12\n\n    new_pay = original_pay + (original_pay * increase_percentage / 100)\n\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 1\n    total_pages = 0\n    total_digits = 0\n\n    while total_digits < 1014:\n        total_pages += 1\n        # Update total digits by adding the number of digits used for the current page number\n        total_digits += digits_per_page\n        # Check if moving to a new order of magnitude (more digits per page number)\n        if total_pages == 10 or total_pages == 100 or total_pages == 1000:\n            digits_per_page += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent = 0.75\n\n    joanna_total = joanna_weekly * 5\n    amy_total = (amy_weekly - amy_spent) * 5\n\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n\n    equation = Eq(first_number, 4 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n\n    answer = solve(equation, x)\n\n    return answer[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    sum_ = 0\n    for i in range(1, 8):\n        sum_ += (10 * i) - (6 + (i - 1) * 10)\n    sum_ += 2021\n    return sum_\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "def solution():\n    from math import comb\n\n    total_students = 7 + 6  # Total number of male and female students\n    male_students = 7\n    female_students = 6\n\n    # Total number of committees with at least one female student can be calculated by:\n    # Total committees - committees with all male students\n\n    # Calculate the total number of committees without considering the gender\n    total_committees = 2 * comb(total_students, 4)\n\n    # Calculate the number of committees with all male students\n    all_male_committees = 2 * comb(male_students, 4)\n\n    # Subtract committees with all male students from total committees to get the answer\n    ans = total_committees - all_male_committees\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alice and her sister's current ages\n    alice, sister = symbols('alice sister')\n\n    # Create the equations based on the problem statement\n    # Equation 1: Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # Equation 2: In 10 years, their total age will be 53\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    # Alice's current age is the solution for `alice`\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    n_10 = 10\n    n_15 = 15\n\n    # Difference of nth terms divided by difference of n gives the common difference\n    common_difference = (nth_term_15 - nth_term_10) / (n_15 - n_10)\n\n    # We need to find the 12th term, so we calculate the difference from the 10th term\n    nth_term_12 = nth_term_10 + common_difference * (12 - n_10)\n\n    return int(nth_term_12)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Degree of the monomial -x^{3}y^{2n} is given as 5.\n    # The degree of a monomial is the sum of the exponents of all its variables.\n\n    # Let's assign the degree of x as 3 (since it's x^3) and the degree of y as 2n.\n    # Now, we need to find the value of n such that 3 (degree of x) + 2n (degree of y) = 5 (total degree).\n    \n    x_degree = 3\n    total_degree = 5  # Given degree of the monomial\n    \n    # We have the equation: x_degree + 2n = total_degree\n    # Let's solve for n.\n    n = (total_degree - x_degree) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    number_of_cups = 45\n\n    total_milk = milk_per_cup * number_of_cups\n    total_tea = tea_per_cup * number_of_cups\n\n    total_liquids = total_milk + total_tea\n\n    return total_liquids\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    penny_score = 17\n    total_marks = 20\n    percentage = (penny_score / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    nth_term = lambda n: 5 * n\n    return nth_term(10)\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.40\n    # Equation based on the given condition\n    equation = Eq(sarah_total, rebecca_total + 1.00)\n\n    # Solve for the price of the book\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angela, bernice, candice = symbols('angela bernice candice')\n\n    price_per_gummy = 6 / 100  # convert pence to pounds\n\n    # angela buys two more gummy bears than bernice\n    equation1 = Eq(angela, bernice + 2)\n\n    # bernice buys eight more gummy bears than candice\n    equation2 = Eq(bernice, candice + 8)\n\n    # Together the three girls spend £3.42 on gummy bears\n    total_cost = 3.42\n    equation3 = Eq(angela * price_per_gummy + bernice * price_per_gummy + candice * price_per_gummy, total_cost)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the list is already sorted, the median is the average of the two middle numbers.\n    # Given that the median is 20, it is the average of the 5th and 6th numbers in the list\n    median = 20\n    n_plus_7 = n + 7\n    n_plus_8 = n + 8\n\n    # Calculating n using the median\n    n = (2 * median - (7 + 8)) // 2\n\n    # Calculate mean\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    n1 = (60 - 3) // 3\n    return n1 + 2\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_litres = 10\n    per_container = 2\n    num_containers = total_litres // per_container\n    return num_containers\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_handshake_members = 4\n    # Compute total possible handshakes without exclusions\n    total_handshakes = total_members * (total_members - 1) // 2\n    # Subtract the handshakes that did not occur\n    excluded_handshakes = non_handshake_members * (non_handshake_members - 1) // 2\n    # The total number of handshakes that happened\n    handshakes_happened = total_handshakes - excluded_handshakes\n    \n    return handshakes_happened\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let x, y, z be the weights of the three apples such that x < y < z\n    # After eating the largest apple, mean weight of remaining two apples (x and y) is 70 grams:\n    # (x + y) / 2 = 70\n    # x + y = 140\n\n    # After eating the lightest apple, mean weight of remaining two apples (y and z) is 105 grams:\n    # (y + z) / 2 = 105\n    # y + z = 210\n    \n    # The total weight of the three apples is:\n    # x + y + z = (x + y) + z\n    # Replacing (x + y) with 140 obtained from the first condition:\n    # 140 + z = (y + z) + x\n    # Replacing (y + z) with 210 obtained from the second condition:\n    # 140 + z = 210 + x\n    \n    # Solving for z - x which is the weight difference between the heaviest and lightest apples:\n    z_minus_x = 210 - 140\n\n    return z_minus_x\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for i in range(1, 10): # since we need a 2-digit number, the original number has to be between 1 and 9\n        original_number = i\n        new_number = int(str(i) + '0') # adding '0' to the right of the original number\n        if new_number - original_number == 27:\n            return original_number\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    nth_term = 11\n\n    # Formula for nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    ans = first_term + (nth_term - 1) * common_difference\n\n    return ans\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Bob is third when counting from each direction in a 2D rectangular array.\n    # Let's assume number of rows are r and number of columns are c.\n    # If Bob is third from any direction, there must be 2 positions before and after him.\n    \n    # Basically, the array would look like this considering Bob is at (r,c):\n    # _ _ B _ _\n    # And this applies to rows and columns.\n\n    # Therefore, Bob must be exactly in the 3rd row from top and 3rd row from bottom,\n    # and the 3rd column from left and 3rd column from right.\n\n    # So the array must have at least 5 rows and 5 columns\n    # (2 rows/columns before Bob + Bob himself + 2 rows/columns after Bob).\n\n    # Since the arrangement is symmetric around Bob, the array must be same in height and width.\n\n    # So number of animals is rows * columns which is 5 * 5.\n    num_animals = 5 * 5\n    return num_animals\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Define a variable to keep track of the possible solutions\n    possibilities = 0\n\n    # Iterate over all possible values for A\n    for A in range(0, 10):\n        # Each digit must be unique, A, B, C and D must all be different\n        # Therefore, the maximum value for the product A*BCD is 9*987 = 8883\n        # So, we need to check if there is a combination where DBCA (as a number) is four times A*BCD\n        # The maximum number DBCA can be is 9876 (if A!=9)\n        # Therefore, we are looking for A (BCD)*4 = DBCA, i.e., the last digit of BCD*4 must be A\n        # and when we carry over the digits in the multiplication, they must form a number DBC\n        # that when read in reverse gives us BCD. Thus, DBC must be divisible by 4 as well.\n\n        # Try all three-digit numbers BCD where B, C, D are different and none is A\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    if len(set([A, B, C, D])) == 4:  # All digits are unique\n                        BCD = B*100 + C*10 + D\n                        DBC = D*100 + B*10 + C\n                        if BCD * 4 == DBC * 10 + A:  # The equation A*BCD*4 = DBCA holds true\n                            return A  # Return the value of A when the condition is met\n    # If no solution was found by now, we assume there's none possible\n    return None\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of one-cent coins, y be the number of two-cent coins, and z be the number of five-cent coins\n    x, y, z = symbols('x y z')\n    \n    # Equations based on the problem statement\n    # Stacking 6 one-cent coins has the same height as 5 two-cent coins\n    equation1 = Eq(6*x, 5*y)\n    # Stacking 4 one-cent coins has the same height as 3 five-cent coins\n    equation2 = Eq(4*x, 3*z)\n    # Total number of coins used is 124\n    equation3 = Eq(x + y + z, 124)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Total value of all coins in cents\n    total_value = solutions[x] + 2*solutions[y] + 5*solutions[z]\n    \n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Calculate the total distance covered by plum trees.\n    # Since trees are planted at both ends, we subtract 1 from the total number of trees\n    # to get the number of intervals and then multiply by the distance between the trees\n    total_distance = (41 - 1) * 4\n    \n    # Calculate the number of pine trees by dividing the total distance by the distance between pine trees\n    # Add 1 to include the tree at the initial point\n    num_pine_trees = (total_distance // 5) + 1\n    \n    return num_pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = 11 * ((100 // 11) + 1)\n    largest_multiple = 11 * (300 // 11)\n\n    ans = smallest_multiple + largest_multiple\n    return ans\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of water in Container A at first\n    # Container B has x - 350 mL of water\n    # After spilling, Container A has x - 500 mL of water\n    \n    x = symbols('x')\n    equation = Eq(2 * (x - 500), x - 350)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    spent_on_books = 0.25 * initial_amount\n    remaining_amount = initial_amount - spent_on_books\n    spent_on_dvd = 0.20 * remaining_amount\n    money_left = remaining_amount - spent_on_dvd\n\n    return money_left\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # The largest six-digit number is 999999, but we need to find\n    # the largest multiple of 6 that is a palindrome.\n    # We will iterate backwards from 999999 to find the first palindrome\n    # number that is divisible by 6 (as every number that's\n    # divisible by 6 must be even, we start from 999996).\n\n    for num in range(999996, 100000, -6):\n        if is_palindrome(num):\n            return num\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # Greatest number possible for red pens under 100 total pens constraint\n    max_red_pens = 0\n    \n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5  # From the ratio 2:5 (blue:green)\n        red_pens = green_pens / 4        # From the ratio 4:1 (green:red)\n        \n        # Check if number of pens for each color is integer and sum is less than 100\n        if blue_pens.is_integer() and red_pens.is_integer():\n            total_pens = blue_pens + green_pens + red_pens\n            if total_pens < 100:\n                max_red_pens = max(max_red_pens, red_pens)\n\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83\n    too_short_cm = 10\n    too_short_m = too_short_cm / 100.0\n\n    length_in_garage_m = desired_length_m - too_short_m\n\n    return length_in_garage_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    initial_marbles = symbols('initial_marbles')\n\n    # Wei Yan gave 3/8 of marbles to friends\n    remaining_after_friends = initial_marbles - 3/8 * initial_marbles\n\n    # He gave 5/7 of remaining marbles to his brother\n    remaining_after_brother = remaining_after_friends - 5/7 * remaining_after_friends\n\n    # His cousin gave him 408 marbles\n    final_marbles = remaining_after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * initial_marbles)\n\n    # Solve the equation\n    solution = solve(equation, initial_marbles)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # Total number of pins and needles.\n    total_pins_needles = 2540\n    # Number of pins sold.\n    pins_sold = 1820\n    # Remaining pins.\n    pins_left = total_pins_needles - pins_sold\n    \n    # According to Paul's workings:\n    # If 4/5 of needles is 1820, then one unit is 455.\n    # Paul assumes that the needles left are 455, which is incorrect.\n    # We need to find the correct number of needles left.\n    \n    # Let the total number of needles be 'n'.\n    # So, (total number of pins) + (total number of needles) = 2540.\n    # And, (4/5 of n) = 1820 (the needles sold).\n    # Therefore, n - (4/5 * n) = needles left (which should be equal to pins left).\n    \n    # Representing the above in an equation we get:\n    # n - (4/5 * n) = 2540 - 1820\n    \n    # Solving for 'n' (total number of needles before selling):\n    # n - (4/5 * n) = 720,\n    # (1/5) * n = 720,\n    n = 720 * 5\n    \n    # Calculating the number of needles left after selling:\n    needles_left = n - (4 * n / 5)\n    \n    return int(needles_left)\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5, 3, 3, 2, 5]  # Define the repeating pattern\n    pattern_length = len(pattern)  # Calculate the length of the pattern\n    repetitions = 41 // pattern_length  # Get the number of complete pattern repetitions within 41 numbers\n    remaining_numbers = 41 % pattern_length  # Get the remaining numbers after the complete pattern repetitions\n    \n    sum_complete_patterns = sum(pattern) * repetitions  # Calculate the sum of complete patterns\n    sum_remaining_numbers = sum(pattern[:remaining_numbers])  # Sum up the remaining numbers\n    \n    total_sum = sum_complete_patterns + sum_remaining_numbers  # Calculate the total sum\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    ans = (2/7) * 315\n    return ans\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p_coins in range(0, 47//2 + 1):\n        for five_p_coins in range(0, 47//5 + 1):\n            if (two_p_coins * 2 + five_p_coins * 5) == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    denominator = 1 / 8 - 1 / 9 + 1 / 10 - 1 / 11\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # The age difference between Brian and his father stays constant\n    age_difference = 41 - 14\n    \n    # At Brian's 14th birthday, his father was 41\n    # We need to increment Brian's age by one each year and check when the ages are reversed\n    for brian_age in range(15, 100):  # We assume Brian won't get older than 100\n        father_age = brian_age + age_difference\n        if str(brian_age) == str(father_age)[::-1]:  # Check if Brian's age is the reverse of his father's age\n            return brian_age\n    \n    return None  # No solution found within the reasonable age range\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):  # pile 1\n        for x2 in range(1, 11 - x1):  # pile 2\n            x3 = 11 - x1 - x2  # pile 3\n            if x1 != x2 and x2 != x3 and x1 != x3:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of piles\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = 654876\n    num2 = 279745\n\n    rounded_num1 = round(num1, -2)\n    rounded_num2 = round(num2, -2)\n\n    estimated_difference = rounded_num1 - rounded_num2\n\n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for n in range(2, 9):  # Starting from 2 because we need at least two numbers\n        # Iterate through all possible combinations of n natural numbers that sum up to 8\n        for combo in range(1, 8**(n-1)): # Any combination of natural numbers\n            numbers = [1]*n  # Start with the smallest combination of n numbers that sum to 8\n            tmp = combo\n            for i in range(n-1):\n                numbers[i] += tmp % 8\n                tmp //= 8\n            if sum(numbers) == 8:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time in seconds the train takes to pass a tree\n    length = 480  # length of the train in meters\n\n    speed = length / time  # speed = distance / time\n\n    return speed  # speed in meters per second\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5kg = cost_per_kg * 3.5\n    return cost_for_3_5kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5/8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between_lampposts = 8\n    \n    road_length = (num_lampposts - 1) * distance_between_lampposts\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10 ** 5) // (5 ** 5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    percentage_failed = (failed_pupils / total_pupils) * 100\n\n    return percentage_failed\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for number in range(1, 51):\n        if '3' in str(number):\n            erased_sum += number\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # For the first room, he can try up to 10 keys\n    # For the second room, he may need to try up to 9 keys (because one key has already been matched)\n    # For the third room, he may need to try up to 8 keys, and so on.\n    # This is a sum of a decreasing arithmetic series:\n    # 10 + 9 + 8 + ... + 3 + 2 + 1\n    # Hence, the sum of the first 10 natural numbers is the number of tries.\n\n    # The sum of the first n natural numbers is given by the formula n * (n + 1) / 2\n    n = 10\n    ans = n * (n + 1) // 2\n\n    return ans\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_capacity = 12\n\n    poppers_left = total_guests % bag_capacity\n\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # 7^1 = 7 -> ones digit is 7\n    # 7^2 = 49 -> ones digit is 9\n    # 7^3 = 343 -> ones digit is 3\n    # 7^4 = 2401 -> ones digit is 1\n    # 7^5 = 16807 -> ones digit is 7\n    # Pattern repeats every 4 powers of 7 (7, 9, 3, 1)\n\n    # We find the remainder of 2023 divided by 4 to find the position in the pattern\n    remainder = 2023 % 4\n\n    # The corresponding ones digits for each remainder (0-3) based on the pattern\n    ones_digit_pattern = {1: 7, 2: 9, 3: 3, 0: 1}\n\n    # Get the ones digit from the pattern dictionary\n    ones_digit = ones_digit_pattern[remainder]\n\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import Rational, sqrt\n\n    numerator = (Rational(-40,3)**(Rational(1,3))) * (Rational(409,99)**2)\n    denominator = Rational(5924,100) - sqrt(Rational(1000,9))\n\n    ans = float(numerator / denominator)\n    \n    return round(ans, 3)\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number_string = ''.join(str(i) for i in range(1, 31))\n    smallest_number = number_string[46:]\n    return int(smallest_number)\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    least_5_digit_palindrome = 10001  # Smallest 5-digit palindrome\n    greatest_6_digit_palindrome = 999999  # Largest 6-digit palindrome\n\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    num_children = 10\n    num_select = 2\n    return comb(num_children, num_select)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    # Boys represent 1/4 of the club, hence total members is 4 times the boys\n    total_members = boys * 4\n    # Girls represent 3/4 of the club, hence number of girls is 3 times the boys\n    girls = (3/4) * total_members\n    \n    return int(girls)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve for the cost of a banana and an apple\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost of 1 banana and 1 apple\n    cost_of_one = float(solutions[banana] + solutions[apple])\n\n    return cost_of_one\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'n' be the number of years later when their ages sum to 60\n    n = symbols('n')\n    \n    # Sara's age this year + n years\n    sara_age = 8 + n\n    \n    # Lucy's age this year + n years\n    lucy_age = 36 + n\n    \n    # Equation representing the future sum of their ages\n    equation = Eq(sara_age + lucy_age, 60)\n    \n    # Solve the equation for 'n'\n    solution = solve(equation, n)\n    \n    # Since we need to return the solution as 'ans', we assign it here\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_person_benches = 6\n    three_person_benches = 9\n    total_capacity = (two_person_benches * 2) + (three_person_benches * 3)\n    return total_capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    amount_paid = 16  # Since you pay with 1 pound coins, next integer to 15.49 is 16.\n\n    change = amount_paid - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = 201 * 1/7 / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    # Calculating the sum according to the pattern\n    ans = sum(99 + i if i % 4 == 0 else -(101 + i) for i in range(0, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * total_minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    footballs, basketballs = symbols('footballs basketballs')\n\n    # Original ratio of footballs to basketballs\n    equation1 = Eq(footballs, 2/5 * basketballs)\n    \n    # Ratio after selling 16 basketballs\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n\n    # Calculate total number of footballs and basketballs at first\n    total = solutions[footballs] + solutions[basketballs]\n\n    return total\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona must take at most 1 glove of each without getting a matching pair.\n    max_single_gloves = 5\n    # To guarantee a pair, Rona must take one more after taking each color once.\n    gloves_to_guarantee_pair = max_single_gloves + 1\n    \n    return gloves_to_guarantee_pair\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = -(-30 // 8) * 8  # Ceiling division to find first multiple of 8 greater than or equal to 30\n    last_multiple = 82 // 8 * 8  # Floor division to find last multiple of 8 less than or equal to 82\n\n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define y as the current age of the younger brother and o as the current age of the older brother\n    y, o = symbols('y o')\n\n    # When the older brother was the same age as the younger brother's current age, the younger brother was 12\n    # equation1 represents: o-y years ago, y-(o-y) = 12 => y-o+o-y=12 => -y=12 => y = 12\n    equation1 = Eq(y - (o - y), 12)\n\n    # When the younger brother becomes the same age as the older brother's current age, the older brother will be 27\n    # equation2 represents: o-y years later, o+(o-y) = 27 => o+o-y=27 => y = 2o-27\n    equation2 = Eq(o + y, 27)\n\n    # Now we solve the two equations to find the ages\n    solutions = solve((equation1, equation2), (y, o))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare variables\n    peter, sam = symbols('peter sam')\n\n    # Create equations\n    equation1 = Eq(sam, peter + 40)  # Sam has 40 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam, peter + 0.25 * peter + 96)  # After exchanges, Sam has 96 stickers more\n\n    # Solve system of equations\n    solutions = solve((equation1, equation2), (peter, sam))\n\n    # Get the number of stickers Peter had at first\n    peter_stickers = solutions[peter]\n\n    return peter_stickers\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    max_junctions = lines * (lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increased_price = original_price * (1 + 10/100)  # Price after a 10% increase\n    final_price = increased_price * (1 - 10/100)  # Price after a 10% decrease\n    \n    return final_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    total_time = 7.2 / 60  # convert minutes to hours\n    relative_speed_forward = 12 + 8  # relative speed when teacher runs forward\n    relative_speed_backward = 12 - 8  # relative speed when teacher runs back\n\n    # While the teacher runs forward, the child at the front also moves forward.\n    # Therefore, the relative speed needs to be the sum of their speeds.\n    # Since time is the same for both forward and backward, we can use a single variable.\n    # Let the time taken to run forward be 't', and the total time is 'total_time'.\n    # The time taken to run back will be 'total_time - t'.\n\n    # distance forward = speed * time (relative_speed_forward * t)\n    # distance backward = speed * time (relative_speed_backward * (total_time - t))\n    # distance forward = distance backward (they cover the same distance)\n    # relative_speed_forward * t = relative_speed_backward * (total_time - t)\n    # Solving for t:\n    t = (relative_speed_backward * total_time) / (relative_speed_forward + relative_speed_backward)\n\n    # Now we find the distance the teacher covered when running forward,\n    # which is also the length of the line.\n    distance = relative_speed_forward * t\n\n    return distance\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in the group stage with single round-robin tournament rules\n    # Each group has 4 people, each person plays with the other 3, so 6 games per group\n    group_games = 4 * (4 * 3 // 2)\n    \n    # Calculate the number of games in the knockout stage\n    # With 8 people, we have the quarter-finals, semi-finals, final, and the game for third place\n    knockout_games = 4 + 2 + 1 + 1  # (quarter-final, semi-final, final, third place)\n    \n    # Sum up all games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    multiplier = 9\n    flora_age_two_years_ago = flora_age_now - 2\n    father_age_two_years_ago = multiplier * flora_age_two_years_ago\n    father_age_now = father_age_two_years_ago + 2\n    return father_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    return 122.55 + 9.45 + 13.21 - 3.21\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 20 / 60\n    early_time = -10 / 60\n\n    # Let the distance be 'd'\n    # At 4 km/h, time taken is (d / 4) hours\n    # At 6 km/h, time taken is (d / 6) hours\n\n    # The difference in time is the sum of late time and early time\n    time_difference = late_time + abs(early_time)\n\n    # Set up the equation:\n    # (d / 4) - (d / 6) = time_difference\n    # Solving for 'd' gives:\n    d = time_difference * (4 * 6) / (6 - 4)\n\n    return d\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    # The '-1' is because we want the position of the first '3' in '83'\n    ans = count - 1\n    return ans\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        number = str(i * 2)\n        count += number.count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * 100  # Convert pounds to pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # Ken took 1 less than half, reverse this step\n    before_ken = (remaining + 1) * 2\n    # Nini took 3 more than half, reverse this step\n    before_nini = (before_ken - 3) * 2\n    # Ivy took 2 less than half, reverse this step\n    before_ivy = (before_nini + 2) * 2\n    # Eddie took 1 more than half, reverse this step\n    before_eddie = (before_ivy - 1) * 2\n    return before_eddie\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Total distance to climb\n    total_distance = 18\n    \n    # Distance climbed during the day\n    daily_climb = 7\n    \n    # On the 6th day, the snail climbed only 3 metres before reaching the top\n    distance_sixth_day = 3\n    \n    # Calculate the distance climbed in the first 5 days\n    distance_first_five_days = daily_climb * 5\n    \n    # Since on the 6th day it only climbs 3 metres out, calculate the distance remaining\n    remaining_distance_sixth_day = total_distance - distance_first_five_days\n    \n    # If the snail climbs out on the 6th day after climbing 3 metres, then it must have been\n    # just below the top at the end of the 5th day; hence we calculate the slide down\n    nightly_slide = daily_climb - (remaining_distance_sixth_day - distance_sixth_day)\n\n    return nightly_slide\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    arrangements = set(permutations(\"CYZZ\"))\n    return len(arrangements)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all measurements to centimeters for comparison.\n    # 1 meter = 100 centimeters\n    height_m = 5 * 100   \n    \n    # 120 cm is already in centimeters\n    height_cm = 120         \n    \n    # 1 millimeter = 0.1 centimeters\n    height_mm = 50 * 0.1    \n    \n    # 1 foot = 30.48 centimeters\n    height_ft = 8 * 30.48   \n    \n    # List of converted heights in centimeters.\n    heights = [height_m, height_cm, height_mm, height_ft]\n    \n    # Assuming the average height for a child is less than 200 cm and more than 100 cm(1 m).\n    reasonable_heights = [height for height in heights if 100 < height < 200]\n    \n    # Find the index of the original height measurement that might be correct.\n    index_of_correct = heights.index(reasonable_heights[0]) if reasonable_heights else None\n    \n    # Return the corresponding original measurement as the answer.\n    # The index order corresponds to 'm', 'cm', 'mm', 'ft'.\n    ans = ['5m', '120cm', '50mm', '8ft'][index_of_correct]\n    \n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    paintbrushes_total = 99\n    for boys in range(1, paintbrushes_total // 3 + 1):\n        girls = 3 * boys\n        if 2 * girls + 3 * boys == paintbrushes_total:\n            return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    a = 12\n    b = 16\n    c = 20\n\n    g = gcd(a, gcd(b, c))\n    \n    return g\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    # Given m is the base of 12^2 and n is the product of 3^2 and 2^3\n    # Calculate m first\n    m = 12 ** 2\n    # Calculate n\n    n = (3 ** 2) * (2 ** 3)\n    # Calculate the sum of m and n\n    sum_of_m_and_n = m + n\n\n    return sum_of_m_and_n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    # Given data\n    total_boys = 18\n    average_score_boys = 74\n    total_participants = 18 + 12\n    average_score_all = 82\n    \n    # Total score for boys\n    total_score_boys = total_boys * average_score_boys\n    \n    # Total score for all\n    total_score_all = total_participants * average_score_all\n    \n    # Total score for girls (all - boys)\n    total_score_girls = total_score_all - total_score_boys\n    \n    # Average score for girls\n    average_score_girls = total_score_girls / 12\n    \n    return average_score_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    length_alyson = 2\n    length_clara = 3\n    length_joyce = 5\n    \n    shortest_length = lcm(length_alyson, length_clara, length_joyce)\n    \n    return shortest_length\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked_catch_1 = 100\n    total_catch_2 = 200\n    marked_catch_2 = 25\n    \n    proportion_marked = marked_catch_2 / total_catch_2\n    \n    total_fish = marked_catch_1 / proportion_marked\n    \n    return round(total_fish)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    days_final = (rabbits_initial * days_initial) / rabbits_final\n\n    return days_final\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gave\n    money_needed = dress_cost - total_money\n    \n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime('07:40', '%H:%M')\n    breakfast_start_time = wake_up_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n    \n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    count = 0\n    for i in range(0, 78):\n        for j in range(0, 78):\n            if 2 * i + 3 * j == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    n = 20\n    sum_to_n = n * (n + 1) // 2\n    square_of_sum_to_n = sum_to_n ** 2\n\n    m = 9\n    sum_to_m = m * (m + 1) // 2\n    square_of_sum_to_m = sum_to_m ** 2\n\n    ans = square_of_sum_to_n - square_of_sum_to_m\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_dollars = 2 + 1/2\n    quarters_in_one_dollar = 4\n    num_quarters = total_dollars * quarters_in_one_dollar\n    return num_quarters\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_five_assignments = 5 * 90\n    total_score_for_four_assignments = 96 + 85 + 89 + 92\n    score_for_fifth_assignment = total_score_for_five_assignments - total_score_for_four_assignments\n    \n    return score_for_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    # Start from the least possible number of cards that leaves a remainder of 3 when divided by 4\n    # And increment by 1 until we find a number that satisfies all other conditions.\n    num_cards = 3\n    while True:\n        if num_cards % 4 == 3 and num_cards % 5 == 4 and num_cards % 7 == 6:\n            return num_cards\n        num_cards += 1\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    eq1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    eq2 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of girls who can/can't swim\n    eq3 = Eq(boys_swim, boys_not_swim - 120)  # 120 less boys can swim than can't\n    eq4 = Eq(girls + boys, 1690)  # Total number of pupils\n    eq5 = Eq(girls, girls_swim + girls_not_swim)  # Total girls\n    eq6 = Eq(boys, boys_swim + boys_not_swim)  # Total boys\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2, eq3, eq4, eq5, eq6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    total_not_swim = solution[girls_not_swim] + solution[boys_not_swim]\n\n    return total_not_swim\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure at least 5 different colours with at least 10 pencils for each colour,\n    # we must consider the worst-case scenario.\n    \n    # worst-case scenario: drawing the maximum number of pencils without satisfying the condition,\n    # which would be having four colours with 10 pencils each and all remaining pencils from a single colour.\n    # So we will have 4 colours with 9 pencils each to not satisfy the condition.\n    max_pencils_same_colours = (10 - 1) * 4  # 9 pencils for each of the 4 colours\n    \n    # Now, the next pencil we draw guarantees the 5th colour irrespective of the colour drawn.\n    # Thus, we need to add 1 to this number to get the minimum number of pencils required\n    # to ensure there are at least 5 different colours with at least 10 pencils for each colour.\n    min_pencils_different_colours = max_pencils_same_colours + 1\n\n    return min_pencils_different_colours\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n    \n    # Determine how many full coaches are needed\n    full_coaches = pupils // coach_capacity\n    \n    # Check if there's a need for an additional coach for remaining pupils\n    remaining_pupils = pupils % coach_capacity\n    if remaining_pupils > 0:\n        full_coaches += 1\n    \n    return full_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Equations based on the problem statement\n    equation1 = Eq(pip / bud, 4/7)\n    equation2 = Eq(pip / (bud + 5), 8/15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total perimeter of the rectangle\n    perimeter = 2*(144 + 204)\n\n    # Since a wheat is planted at every corner, there are 116 - 4 wheats\n    # to be planted along the sides, and the perimeter needs to be divided\n    # into 112 intervals (116 - 4).\n    distance_between_wheats = perimeter / (116 - 4)\n\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5_pow_20 = (5 ** 20) % 10\n    last_digit_7_pow_30 = (7 ** 30) % 10\n\n    last_digit_product = (last_digit_5_pow_20 * last_digit_7_pow_30) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import isprime\n\n    # Iterate through all possible primes for each student\n    # Student A and B can't have prime numbers that are 1 mod 7 since A's statement\n    # and student C can't have 2 or an even prime (2) since then it would be impossible\n    # to form an addition equation (2)\n    primes = [i for i in range(3, 46) if isprime(i) and i % 7 != 1 and i != 2]\n    \n    valid_combinations = []\n    for a in primes:\n        for b in primes:\n            for c in primes:\n                if a != b and b != c and a != c:\n                    # Check if B's statement is true: b - 1 has a difference of 7 with a or c\n                    b_statement_valid = (abs(b - 1 - a) == 7) or (abs(b - 1 - c) == 7)\n                    # Check if A's statement is true: The numbers don't form a correct addition \n                    # statement as per A's condition\n                    a_statement_valid = not(a + b == c or a + c == b or b + c == a)\n                    # Check if C's statement and the teacher's remark are true:\n                    # Multiplying C by 2 would make a correct addition statement\n                    c_statement_and_teacher_remark = (a + b == 2 * c or a + 2 * c == b or 2 * c + b == a)\n\n                    # If all conditions are met, store the combination\n                    if a_statement_valid and b_statement_valid and c_statement_and_teacher_remark:\n                        valid_combinations.append((a, b, c))\n\n    # Assuming there is only one unique solution that fits all the statements and hints\n    if valid_combinations:\n        unique_primes = valid_combinations[0]\n        return sum(unique_primes)\n    else:\n        return 0\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the points for an A grade and 'b' be the points for a B grade.\n    a, b = symbols('a b')\n\n    # Creating equations based on the given information\n    equation1 = Eq(4*a + 4*b, 36)  # Simon's score\n    equation2 = Eq(2*a + 3*b, 22)  # Peter's score\n\n    # Solving the simultaneous equations to find the values of 'a' and 'b'\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculating the score for someone with three A grades and five B grades\n    score = 3 * solutions[a] + 5 * solutions[b]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    shared_with = 2\n    joe_squares = total_squares // shared_with\n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither prime number nor composite number or zero\n    C = 1\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 10  # Since 10 has more than two factors, it's composite\n    # F only has factors 1 and 5, thus it is the prime number 5\n    F = 5\n    # G is the greatest factor of 8\n    G = 8\n    # H is the lowest multiple of 6\n    H = 6\n\n    # Combine the individual numbers to form Tony's phone number\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    initial_ratio = Eq(marry, 7 * alexis / 5)\n    charlotte_new = Eq(charlotte * 1.8, charlotte + 0.2 * marry + 0.2 * alexis)\n    marry_new = Eq(marry - 0.2 * marry, charlotte + 20)\n    alexis_new = Eq(alexis - 0.2 * alexis, alexis * 0.8)\n\n    solutions = solve((initial_ratio, charlotte_new, marry_new, alexis_new), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_left = 42\n    people_joined = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_joined + people_left\n    return people_on_train_before\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_per_day * fraction_of_day\n    return seconds\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # Eddie and his mom and dad can be considered as one unit.\n    # They can arrange among themselves in 3! = 6 ways (Eddie, mom, dad in different orders)\n\n    # We can then consider this single unit in different positions in the lineup.\n    # If there are 'n' total people, this unit can take any of the 'n-2' positions,\n    # since they are considered as a single unit now.\n\n    # Now to find 'n', assuming the family consists only of Eddie, his mom, and his dad,\n    # it would mean there are no other family members, so 'n' = 3.\n    # But if we include other family members, we need to know the total number of family members.\n    # Since that information is not provided, we're assuming 'n' = 3.\n\n    # They can be in any of the 1 positions as a unit (since 3-2=1),\n    # and in 6 different orders within that unit.\n\n    # So the total number of ways they can stand together is 1 * 6 = 6 ways.\n    return 3 * 2 * 1\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    # Total number of digits\n    n = 5\n    # Count of each digit: 2 (occurring 3 times) and 3 (occurring 2 times)\n    count_2 = 3\n    count_3 = 2\n    # The number of different four-digit numbers is the same as the number of permutations\n    # of 5 digits taken 4 at a time, divided by the permutations of repeating digits.\n    # However, since the number must be four digits and we have three '2's, we cannot take\n    # all four '2's, thus one '2' must remain unchosen in every permutation.\n    total_permutations = factorial(n - 1)  # factorial(4) instead of factorial(5)\n    repeat_permutations_2 = factorial(count_2 - 1)  # Only double counts of '2' considered\n    repeat_permutations_3 = factorial(count_3)\n\n    # Divide the total permutations by the product of repeat\n    # permutations to get the number of distinct permutations\n    distinct_numbers = total_permutations // (repeat_permutations_2 * repeat_permutations_3)\n    \n    return distinct_numbers\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                pips_number = 1000 * a + 100 * b + 10 * c + a\n                buds_number = 1000 * c + 100 * b + 10 * a + a\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    grass_for_25_cows_10_days = 25 * 10\n    grass_for_15_cows_20_days = 15 * 20\n    \n    total_grass = grass_for_25_cows_10_days  # Which is equal to grass_for_15_cows_20_days\n    cows_for_50_days = total_grass / 50\n    \n    return cows_for_50_days\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # We can solve this using the fact that the sum of the first n natural numbers is n(n+1)/2\n    # We want the sum to be no larger than 95, which is the total number of pages\n\n    # Starting with the largest number of days, check if sum of the first n natural numbers is <= 95\n    days = 1\n    while days * (days + 1) // 2 <= 95:\n        days += 1\n\n    # The loop will exit on the day when the sum exceeds 95, so the maximum number of days is one less\n    return days - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges_initial, lemons = symbols('oranges_initial lemons')\n    oranges_after = oranges_initial - 48\n\n    # Initial ratio equation: oranges_initial/lemons = 3/5\n    ratio_initial = Eq(oranges_initial/lemons, 3/5)\n\n    # After selling oranges ratio equation: oranges_after/lemons = 1/2\n    ratio_after = Eq(oranges_after/lemons, 1/2)\n\n    # Solve the system of equations\n    solutions = solve((ratio_initial, ratio_after), (oranges_initial, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n\n    correct_minuend = 166\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Since first day is 1/3 of second day\n    third_day = (5 / 3) * second_day  # Since third day is 5/3 of second day\n\n    total_sold = first_day + second_day + third_day\n\n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Calculating the permutations for math books together, english books together and other books together.\n    # Since the math books must be together, we can treat the 3 math books as a single unit.\n    # The same goes for the 2 English books. So we now have 3 units + 3 other books = 6 units\n    # We first find the permutations of these 6 units.\n    units_permutations = factorial(6)\n    \n    # Now, within these units, the books can be permuted among themselves, so we have to multiply\n    # by the permutations of the 3 math books among themselves and the 2 English books among themselves.\n    math_books_permutations = factorial(3)\n    english_books_permutations = factorial(2)\n    \n    # The total permutations is the product of the permutations of the units and the permutations within the units.\n    total_permutations = units_permutations * math_books_permutations * english_books_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 0.30\n    member_discount = 100\n    sales_tax_rate = 0.10\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price_before_tax = discounted_price - member_discount\n    final_price_after_tax = final_price_before_tax * (1 + sales_tax_rate)\n\n    return final_price_after_tax\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    cakes_possible = 250 / flour_per_cake\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_work = 1\n    days_worked_together = 12 / 2  # both worked for the first half of the time\n    work_done_together = days_worked_together * (ivy_rate + kevin_rate)\n    remaining_work = total_work - work_done_together\n    days_kevin_took_off = remaining_work / ivy_rate - days_worked_together\n\n    return days_kevin_took_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Initial condition: Ophelia had 4 times as many diamonds as Penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # After buying more diamonds condition: Penelope has 5/8 as many diamonds as Ophelia\n    equation2 = Eq(penelope + 21, 5/8 * ophelia)\n    \n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 / 20) * 8\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # By Inclusion-Exclusion Principle,\n    # students_both = students_math + students_art - total_students\n    students_both = maths_students + art_students - total_students\n\n    return students_both\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # There are two colors, so to guarantee a pair of the same color,\n    # she must take out 3 socks. That way, even if the first two are\n    # of different colors, the third will match one of them.\n    return 3\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    ans = permutations(9, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price_p = 10\n    new_price_p = 100 # 1 pound represented in pence\n    \n    increase_p = new_price_p - original_price_p\n    percentage_increase = (increase_p / original_price_p) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n    final_cost = bracelet_cost * (1 + gst_rate)\n    \n    return final_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = future_value / (1 + interest_rate) ** years\n\n    return present_value\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # Number of grey rabbits\n    grey_rabbits = 14\n    \n    # Since the pattern is 1 black, 2 white, 2 grey, we have for every 2 grey, there's 1 black and 2 white\n    # Thus, for 14 grey, we have 7 black and 14 white\n    black_rabbits = grey_rabbits // 2\n    white_rabbits = grey_rabbits\n    \n    # Total number of rabbits\n    total_rabbits = black_rabbits + white_rabbits + grey_rabbits\n    \n    # But we need to consider the maximum combination, which may include an additional 1 black and 2 white from the pattern\n    # If the pattern completes with 1 black and 2 white without any additional grey, we add them\n    total_rabbits_max = total_rabbits + 1 + 2\n    \n    return total_rabbits_max\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    original_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = (1 - depreciation_rate) ** years\n\n    value_after_years = original_value * depreciation_factor\n\n    return value_after_years\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bicycles, tricycles = symbols('bicycles tricycles')\n    \n    # Total number of vehicles\n    equation1 = Eq(bicycles + tricycles, 300)\n    \n    # Total number of wheels\n    equation2 = Eq(2 * bicycles + 3 * tricycles, 180 + 2 * 300)\n    \n    solutions = solve((equation1, equation2), (bicycles, tricycles))\n\n    return solutions[bicycles]\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = 1  # Starting with the smallest possible positive divisor\n\n    while remainder >= divisor:\n        divisor += 1\n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = 2015 * 2015 - 2016 * 2014\n    return ans\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    # By inclusion-exclusion principle, we calculate the number of chocolate biscuits.\n    # Total biscuits = Chocolate with foil + Chocolate without foil + Non-Chocolate with foil + Neither\n    # Chocolate with foil (given) = 15\n    # Non-Chocolate with foil = foil_wrappers - chocolate_with_foil\n    # Neither (given) = 9\n    # Therefore, Chocolate without foil = Total biscuits - Chocolate with foil - Non-Chocolate with foil - Neither\n\n    non_chocolate_with_foil = foil_wrappers - chocolate_with_foil\n    chocolate_biscuits = total_biscuits - chocolate_with_foil - non_chocolate_with_foil - neither_chocolate_nor_foil\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original speed as v (metres per minute) and the original time as t (minutes).\n    v, t = symbols('v t', real=True, positive=True)\n\n    # If the cyclist increases his speed by 25%, the new speed is 1.25v.\n    # The new time taken is t - 20.\n    eq1 = Eq(1.25 * v * (t - 20), v * t)\n\n    # If the cyclist decreases his speed by 45 metres per minute, the new speed is v - 45.\n    # The new time taken is 1.75t.\n    eq2 = Eq((v - 45) * 1.75 * t, v * t)\n\n    # Solve the system of equations for the variables v and t.\n    solution = solve((eq1, eq2), (v, t))\n\n    # Calculate the distance using the original speed and time.\n    distance = solution[v] * solution[t]\n\n    return distance\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009 # Construct the number\n    rounded_number = round(number, 1) # Round to one decimal place\n    return rounded_number\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    # Equation: initial_crystals / 2 - 10 (crystals sold to Yvonne) + 20 (mined in Singapore) - 14 (sold to Cherlyn) = 35 (left in the end)\n    equation = Eq((initial_crystals / 2 - 10) + 20 - 14, 35)\n    \n    # Solve the equation for the initial number of crystals\n    initial_crystals_value = solve(equation, initial_crystals)\n    \n    return initial_crystals_value[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of zeros at the end of a product is determined by the number of 2*5 pairs\n    # Since there are more 5s than 2s in this case, the number of zeros will be determined by the number of 2s\n    num_twos = 10\n    return num_twos\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    equation1 = Eq(olaf, 3 * anna)  # Olaf had thrice as many carrots as Anna initially\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))  # After Olaf gave away 335, Anna had twice as many\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    count = 0\n    for perm in permutations(digits):\n        # Create all permutations for the decimal point position\n        for i in range(1, len(perm)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_of_Bala = 10\n    # Bala is standing directly behind Ali, so we count them as 1\n    Ali_and_Bala = 1\n\n    total_people_in_queue = people_in_front_of_Ali + Ali_and_Bala + people_behind_of_Bala\n\n    return total_people_in_queue\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    # Total number of cars\n    total_cars = 60\n\n    # Given number of cars\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Calculating blue Fords\n    # Total black cars = total cars - blue cars\n    black_cars = total_cars - blue_cars\n    \n    # There are 25 black Dodges, so the rest of the black cars are black Fords\n    black_fords = black_cars - black_dodges\n    \n    # Since there are 25 Fords and some of them are black, the rest must be blue\n    blue_fords = fords - black_fords\n\n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # Convert pounds to pence\n\n    number_of_plants = budget_pence // plant_cost_pence  # Using floor division to get whole number of plants\n\n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    # Let's denote the two numbers as x and y with x being the larger number\n    # According to the problem, we have two equations:\n    # x + y = 80 and x - y = 40\n\n    # Solve the system of equations to find x and y\n    x = (80 + 40) / 2\n    y = (80 - 40) / 2\n\n    # The smaller number is y\n    return y\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for number in range(1, 11 * 7):  # The possible number should be under the least common multiple of 11 and 7\n        if number % 11 == 5 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst case scenario,\n    # the magician picks all but one type of coloured balls before getting at least one of each.\n    # This would be the total number of balls minus the number of balls of one colour (the one left aside).\n    # We should choose the largest number of balls of one colour to maximize the ones picked before.\n\n    # In this case, there are 13 green balls, which is the largest number.\n    # He'd pick all the blue and red balls first, and then finally one green ball.\n    # 8 (blue) + 10 (red) + 1 (green) = 19\n    return 8 + 10 + 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    days_worked = 5\n\n    total_earnings = average_daily_earnings * days_worked\n    \n    return total_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    marks_correct = 3\n    marks_wrong = -2\n    total_score = 125\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if marks_correct * correct + marks_wrong * wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    result = (3/8) * 960\n    return result\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    min_apples = 1\n\n    # To give out at least one apple to each child, we reserve one for each\n    reserved_apples = children * min_apples\n\n    # Distribute the remaining apples\n    remaining_apples = total_apples - reserved_apples\n\n    # By Pigeonhole Principle, distribute one apple to each until we run out\n    while remaining_apples >= children:\n        min_apples += 1\n        remaining_apples -= children\n    \n    # The last child gets the remaining apples, plus the one reserved initially\n    most_apples_child = min_apples + remaining_apples\n\n    return most_apples_child\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    # In a single round-robin format, each team plays every other team once.\n    # So, we are looking for the number of combinations of matches for the teams.\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    ending_position = 10\n    start_position = (ending_position - (total_counts % 12)) % 12\n    start_position = 12 if start_position == 0 else start_position\n    return start_position\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    num1 = 60\n    num2 = 72\n    num3 = 84\n\n    # Find the greatest common divisor (GCD)\n    gcd_1_2 = gcd(num1, num2)\n    greatest_common_divisor = gcd(gcd_1_2, num3)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        if (2 + 9 + 6 + digit + 1 + 2) % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n\n    for _ in range(2, 2011):\n        next_num = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_num)\n\n    ans = sequence[-1]\n    return ans\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    # Let x be the number we want to find\n    # According to the problem, two-thirds of the number is 24\n    # So, (2/3) * x = 24\n    # We can find x by multiplying both sides by (3/2)\n    x = 24 * (3/2)\n\n    # Now we need to find three-quarters of x\n    # So, (3/4) * x\n    ans = (3/4) * x\n    return ans\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance Linda drove in the first 2 hours.\n    first_distance = 2 * 40\n    \n    # Calculate the total distance Linda drove.\n    total_distance = first_distance + 280\n    \n    # Calculate the time taken to drive the remaining 280 kilometres.\n    remaining_time = 280 / 70\n    \n    # Calculate the total time taken for the whole trip.\n    total_time = 2 + remaining_time\n    \n    # Calculate Linda’s average driving speed for the whole trip.\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan.\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards. Bob now has 3 times as many as Alan.\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the equations to find the number of cards Alan has got.\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # Start from the smallest composite number, which is 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if all four numbers are composite\n        if (not all(is_prime(n) for n in (A, B, C, D))):\n            # If any number is prime, increment A and try again\n            A += 1\n        else:\n            # All numbers are composite, break the loop\n            break\n    # Since A is now the first composite in a consecutive series, return the sum\n    return A + B + C + D\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # start with an odd number 23, and the common difference is 2\n    a = 23\n    d = 2\n    # iterate over possible values of k to find m^2\n    for k in range(31, 10**3):  # an arbitrary upper bound 10**3 for k\n        # the nth term of the sequence, 2k -1, can be expressed in terms of k\n        n = (2 * k - 1 - a) // d + 1\n        # sum of arithmetic sequence formula: m^2 = n/2 * (a1 + an)\n        m_squared = n/2 * (a + (2 * k - 1))\n        # since m is a whole number, we check if m_squared is a perfect square\n        m = int(m_squared ** 0.5)\n        if m_squared == m ** 2:  # checking for perfect square\n            return m\n    return None\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1\n    total_saving_days = 7\n    amount_lent = 5\n    amount_spent = 3\n\n    current_amount = original_amount + (daily_saving * total_saving_days) - amount_lent - amount_spent\n    \n    return current_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_eaten_per_cow_per_day = 1\n    \n    total_grass_eaten = cows * days * grass_eaten_per_cow_per_day\n    \n    return total_grass_eaten\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Create equations based on the problem description\n    equation1 = Eq((89 - x), 12 * (45 - x))\n\n    # Solve the equation\n    solution = solve(equation1, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    prob_both_not_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_both_not_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for price of a banana and price of an apple\n    banana, apple = symbols('banana apple')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n    \n    # Solve the equations for the price of a banana and an apple\n    solution = solve((equation1, equation2), (banana, apple))\n    \n    # Calculate what Annabella would pay for 10 bananas and 10 apples\n    annabella_cost = 10 * solution[banana] + 10 * solution[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # 10 to 99 inclusive\n    without_six = 8 * 8  # choices for each digit without using 6 (1-5, 7-9)\n\n    # Total two-digit numbers - numbers without any six gives numbers with at least one 6\n    return total_two_digit_numbers - without_six\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let the total number of visitors be x.\n    # Then the number of men is 0.37x\n    # and the number of women and children together is x - 0.37x = 0.63x\n    # According to the ratio, let 4y be the number of women and 5y the number of children.\n    # Hence, 4y + 5y = 9y is the number of women and children together, which equals 0.63x\n    # Now, the difference between men and children is 12, so 0.37x - 5y = 12\n    # We have two equations:\n    # 9y = 0.63x (1)\n    # 0.37x - 5y = 12 (2)\n    # We can solve these equations to find x and then find 4y (the number of women)\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(9*y, 0.63*x)\n    eq2 = Eq(0.37*x - 5*y, 12)\n\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Now we have the number of women as 4y\n    num_women = 4 * solutions[y]\n\n    return int(num_women)\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n    \n    day_off = (end_date - start_date).days + 1\n    \n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    ans = (last_digit_sum ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n    relative_speed = speed_a + speed_b\n    \n    time = distance / relative_speed\n    \n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    lines = 13\n    max_intersections = lines * (lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5_power_20 = (5 ** 20) % 10\n    last_digit_7_power_20 = (7 ** 20) % 10\n\n    ans = (last_digit_5_power_20 * last_digit_7_power_20) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22 / 7\n    # AB and CD are the diameters of the semicircles\n    diameter = 14\n    radius = diameter / 2\n\n    # The perimeter of the figure consists of two semicircles and two quadrants\n    # perimeter of a semicircle = pi * radius\n    perimeter_semicircle = pi * radius\n\n    # There are two semicircles and two quadrants\n    perimeter_figure = 2 * perimeter_semicircle + 2 * perimeter_semicircle\n\n    return perimeter_figure\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelons = symbols('watermelons')\n\n    # Let's assume that the number of watermelons Helen started with is \"watermelons\"\n    # On the first day she sold 1/3 of the watermelons, so 2/3 remained\n    # On the second day she sold 3/5 of the remaining watermelons, so 2/5 of the 2/3 remained\n    equation = Eq((2/3) * (2/5) * watermelons, 48)\n\n    # Solve the equation for the number of watermelons\n    solutions = solve(equation, watermelons)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for the cost of a packet of rice\n    rice_cost = symbols('rice_cost')\n\n    # Equation based on the total cost\n    total_cost_equation = Eq(6 * 95 + 5 * rice_cost, 1170)\n\n    # Solve for the cost of a packet of rice\n    solutions = solve(total_cost_equation, rice_cost)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ans = comb(10, 6)\n    return ans\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3 / 4) * (2 / 5) * 1\n    return result\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(lcm, 1000, lcm):  # Start from lcm, go up to 1000, step by lcm\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Starting from 13/10 and solving the equation in reverse to find the values of a, b, and c.\n    \n    # Express 13/10 as a continued fraction:\n    # 13/10 = 1 + 3/10\n    # So, a = 3, to find b and c we consider the fraction 10/3\n    \n    # Express 10/3 as a continued fraction:\n    # 10/3 = 3 + 1/3\n    # so, b = 3, to find c we consider the fraction 3/1\n    \n    # Express 3/1 as a continued fraction:\n    # 3/1 = 3 + 0/1\n    # so, c = 3\n    \n    # Now we have a = 3, b = 3 and c = 3\n    \n    # Calculate a + 2b + 3c\n    a, b, c = 3, 3, 3\n    ans = a + 2*b + 3*c\n    return ans\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_sum = 1650\n    num_terms = 15\n\n    # The average of consecutive numbers is the sum divided by the number of terms\n    average = total_sum / num_terms\n\n    # Middle number is average, smallest is average - 7, largest is average + 7 (since they are consecutive)\n    smallest = average - (num_terms - 1) / 2\n    largest = average + (num_terms - 1) / 2\n\n    return int(smallest + largest)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while not (pies % 4 == 0 and pies % 6 == 0):\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_per_line = 3\n    girls_per_line = 2\n    total_boys = 42\n    \n    # Using the ratio of boys to girls\n    ratio = boys_per_line / girls_per_line\n    total_girls = total_boys / ratio\n    \n    return int(total_girls)\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of days the lazy one would take be x\n    lazy_days = symbols('lazy_days')\n\n    # The energetic one's rate of work per day\n    energetic_rate = 1 / 20\n    \n    # The lazy one's rate of work per day is 1/x\n    lazy_rate = 1 / lazy_days\n    \n    # Together they paint the house in 12 days, so their combined rate is 1/12 per day\n    combined_rate = 1 / 12\n    \n    # Equation representing combined work rate of both decorators\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve the equation to find the number of days the lazy one takes\n    solution = solve(equation, lazy_days)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n\n    for i in range(1, 1000):\n        digits = [int(d) for d in str(i)]\n        if all(digit % 2 != 0 for digit in digits):\n            oddtastic_count += 1\n\n    return oddtastic_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Given that \"a\" leaves a remainder of 6 when divided by 8,\n    # it implies that \"a = 8k + 6\" for some integer k.\n    # Similarly, \"b\" leaves a remainder of 7 when divided by 8,\n    # it implies that \"b = 8j + 7\" for some integer j.\n    \n    # Thus, when we add \"a\" and \"b\", we get:\n    # a + b = (8k + 6) + (8j + 7) = 8(k + j) + 13\n    # The division of (a + b) by 8 will leave a remainder of 13 modulo 8.\n    # The remainder will thus be the same as the remainder of 13 when divided by 8, which is 5.\n    remainder = (13 % 8)\n\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    number_of_skirts = 8\n    \n    cloth_used_for_skirts = cloth_per_skirt * number_of_skirts\n    cloth_remaining = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = cloth_remaining / 2\n    \n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # The maximum number of trials is when the guard finds the correct key for \n    # the first room in the last attempt, the second room on second to last attempt, and so on.\n    # This is the sum of an arithmetic series from 1 to 11, i.e., 1+2+3+...+11\n    num_rooms = 11\n    num_attempts = sum(range(1, num_rooms + 1))\n    return num_attempts\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    all_possible_numbers = set(permutations(digits))\n    four_digit_numbers = {int(''.join(num)) for num in all_possible_numbers if num[0] != '0'}\n    return len(four_digit_numbers)\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    digit_count = 0\n    \n    # Find out the number of digits contributed by each group:\n    # 1-digit numbers: 9 numbers contribute 9 digits (1 to 9)\n    # 2-digit numbers: 90 numbers contribute 180 digits (10 to 99)\n    # 3-digit numbers: 900 numbers contribute 2700 digits (100 to 999), etc.\n    while True:\n        digit_length = len(str(current_number))\n        digit_contribution = digit_length * 9 * (10 ** (digit_length - 1))\n        \n        if digit_count + digit_contribution >= 2019:\n            break\n            \n        digit_count += digit_contribution\n        current_number += 1\n    \n    # Now we know that the 2019th digit is in the range of numbers with `digit_length` digits.\n    # Find out the exact number that contains the 2019th digit and its position in that number.\n    remaining_digits = 2019 - digit_count\n    numbers_to_skip = (remaining_digits - 1) // digit_length\n    number_containing_digit = (10 ** (digit_length - 1)) + numbers_to_skip\n    digit_position = remaining_digits - (numbers_to_skip * digit_length) - 1\n    \n    # Extract the 2019th digit from the number.\n    ans = int(str(number_containing_digit)[digit_position])\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # basket mass in grams converted to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4\n\n    kittens_total_mass_kg = number_of_kittens * kitten_mass_kg\n    cat_mass_kg = total_mass_kg - basket_mass_kg - kittens_total_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n\n    new_price = original_price * (1 + increase_percentage / 100)\n\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # Mary has three brothers and four sisters\n    total_people = 1 + siblings  # Including Mary\n    eggs_bought = siblings * total_people  # Each of the siblings buys an egg for each person, including Mary\n\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    departure_time = 7 * 60 + 50  # Convert 7:50 AM to minutes\n    arrival_time = 8 * 60 + 40    # Convert 8:40 AM to minutes\n\n    journey_duration = arrival_time - departure_time\n\n    return journey_duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for apples and bananas prices\n    a, b = symbols('a b')\n\n    # Setting up the equations based on the given problem\n    equation1 = Eq(3*a + b, 32)\n    equation2 = Eq(6*a + b, 53)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The pattern in the sequence is that each number is increasing by an increasing amount.\n    # 3 to 6 is +3, 6 to 10 is +4, 10 to 15 is +5\n    # The next increment would be +6\n    missing_number = 15 + 6\n    return missing_number\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    money_left = 80\n    money_after_handbag = money_left / (1 - 3/5)\n    initial_money = money_after_handbag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_volume = 47\n    poured_volume = 5\n    num_tanks = 6\n\n    remaining_volume = total_volume - poured_volume\n    volume_per_tank = remaining_volume / num_tanks\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    # Let initial_money be the total money Samuel had at first\n    \n    # After spending 1/6 of his money and additional $5 on a DVD\n    # remaining_money after buying DVD = initial_money - (1/6 * initial_money + 5)\n    \n    # He then spent 2/5 of the remaining money and an additional $12 on magazines\n    # money_left = remaining_money_after_DVD - (2/5 * remaining_money_after_DVD + 12)\n    \n    # At the end, he had $24 left\n    # money_left = 24\n    \n    # Solving the equation for initial_money\n    from sympy import symbols, Eq, solve\n\n    initial_money, remaining_money_after_DVD = symbols('initial_money remaining_money_after_DVD')\n    equation1 = Eq(remaining_money_after_DVD, initial_money - (initial_money / 6 + 5))\n    equation2 = Eq(24, remaining_money_after_DVD - (2/5 * remaining_money_after_DVD + 12))\n\n    solutions = solve((equation1, equation2), (initial_money, remaining_money_after_DVD))\n\n    return solutions[initial_money]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Distance from Pip to Bud is Pip's position + 4 children in between + Bud's position from the back\n    distance_between = 8 + 4 + 10\n    # Since Pip is in front of Bud, the total number of children in the queue is the distance between them\n    total_children = distance_between - 1  # Subtracting 1 because Pip is included in both the 8 from front and distance between\n    return total_children\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let x be the number of years it will take for the condition to be met\n    grandpa_current_age = 72\n    johnny_current_age = 8\n    \n    # In x years, the grandpa's age will be (grandpa_current_age + x)\n    # and Johnny's age will be (johnny_current_age + x)\n    # We want to find when grandpa's age is 5 times Johnny's age\n    # So, we have the equation: grandpa_current_age + x = 5 * (johnny_current_age + x)\n\n    # Rearrange the equation to solve for x:\n    # x - 5 * x = 5 * johnny_current_age - grandpa_current_age\n    # -4 * x = 5 * johnny_current_age - grandpa_current_age\n    # x = (5 * johnny_current_age - grandpa_current_age) / (-4)\n\n    x = (5 * johnny_current_age - grandpa_current_age) / (-4)\n    return x\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bob, alan = symbols('bob alan')\n    \n    # Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob $25 cards\n    # Bob now has $3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    # Solve equations to find value of alan\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Calculate the sum of all odd numbers from 1 to 50\n    sum_odds = sum(range(1, 51, 2))\n    # Calculate the sum of all even numbers from 1 to 50\n    sum_evens = sum(range(2, 51, 2))\n    # Calculate the difference between the sum of evens and odds\n    ans = sum_evens - sum_odds\n    return ans\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    future_value = 2519.42\n    years = 3\n\n    # Since we know future value, principal, and time, we can solve for the interest rate\n    # using the formula: future_value = principal * (1 + interest_rate) ** years\n    # Therefore, interest_rate = ((future_value / principal) ** (1 / years)) - 1\n\n    # By given approximations, we know that the interest rate must be between 5.8% and 7.9%\n    # We can check these values and see which one is closer\n    # A more accurate method could be using a root-finding algorithm, but for simplicity\n    # and the nature of the question (to round to the nearest tenth), we can use these approximations.\n\n    # We can use the given approximations to reason about the value of the rate\n    # Since 1.058^3 < 1.18429 and we know the final amount is 2519.42 which is closer to 1.25971,\n    # The rate must be closer to 7.9 than to 5.8. Let's check around 7.9 first.\n\n    rate_low = 1.058\n    rate_high = 1.079\n    future_value_low = principal * rate_low ** years\n    future_value_high = principal * rate_high ** years\n    \n    # Checking which one is closer to the future value\n    if abs(future_value - future_value_low) > abs(future_value - future_value_high):\n        return round((rate_high - 1) * 100, 1)\n    else:\n        return round((rate_low - 1) * 100, 1)\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # In the worst case, to get 4 balls of the same color, Sheila might pick 3 blue balls, 3 orange balls, and 2 yellow balls without getting 4 of the same color.\n    # After this, no matter what she picks it will result in 4 balls of the same color.\n    # So, the answer is the sum of the maximum that she can pick from each color without getting 4 of the same color plus one.\n    blue_balls = 3\n    orange_balls = 3\n    yellow_balls = 2\n    # The next ball she picks must be either blue or orange, giving her 4 of that color.\n    next_ball = 1\n\n    total_balls = blue_balls + orange_balls + yellow_balls + next_ball\n\n    return total_balls\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of elderly\n    x = symbols('x')\n\n    # 20 oranges to each, 10 elderly get nothing -> 20 * (x-10) oranges are given\n    # 16 oranges to each, enough for 25 boxes of 24 oranges -> 16 * x oranges are given\n    # Both should be equal to the total number of oranges\n    total_oranges = 25 * 24 * 2  # Total oranges when packing 25 boxes of 2 dozen each\n\n    # Equation representing the problem statement\n    equation = Eq(20 * (x - 10), 16 * x)\n\n    # Solving for the number of elderly\n    num_elderly = solve(equation, x)\n\n    # The number of elderly as found from the equation above\n    x_value = num_elderly[0]\n\n    # Now find the number of oranges per elderly to give away all oranges\n    oranges_per_elderly = symbols('oranges_per_elderly')\n    equation_oranges = Eq(oranges_per_elderly * x_value, total_oranges)\n    \n    # Solving for the number of oranges per elderly\n    result = solve(equation_oranges, oranges_per_elderly)\n\n    return result[0]\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Define the custom operation\n    def delta_operation(m, n):\n        return 5 * m + 3 * n\n\n    # Since we know x~Δ~9 = 37, we can write it as 5x + 3*9 = 37\n    # Now we can isolate x\n    x = (37 - 3 * 9) / 5\n    return int(x)\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_weight = full_weight - 27\n    total_soil_weight = removed_soil_weight * 5\n    empty_barrow_weight = full_weight - total_soil_weight\n    \n    return empty_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tim, tyler = symbols('tim tyler')\n    \n    equation1 = Eq(tim / 6, tyler * 3 / 8)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n    \n    solutions = solve((equation1, equation2), (tim, tyler))\n    \n    tim_cookies = solutions[tim]\n    tyler_cookies = solutions[tyler]\n    \n    return int(tim_cookies + tyler_cookies)\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the quantities of each type of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate - chocolate/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    first_interval = 24\n    second_interval = 30\n    \n    least_common_multiple = lcm(first_interval, second_interval)\n    \n    hours_passed = least_common_multiple // 60\n    minutes_passed = least_common_multiple % 60\n    \n    initial_hour = 9\n    \n    final_hour = (initial_hour + hours_passed) % 24\n    final_minutes = minutes_passed\n    \n    return f\"{final_hour}:{final_minutes:02d} a.m.\"\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 3/4\n    gallons_poured = 24\n\n    full_tank_gallons = gallons_poured / part_filled\n\n    return full_tank_gallons\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the ages of the children\n    Anu, Benu, Chris, Dave = symbols('Anu Benu Chris Dave')\n    \n    # Sum of ages of the 4 children is 20\n    equation1 = Eq(Anu + Benu + Chris + Dave, 20)\n    \n    # Dave is 5 years older than Chris\n    equation2 = Eq(Dave, Chris + 5)\n    \n    # Dave is 3 years older than Benu\n    equation3 = Eq(Dave, Benu + 3)\n    \n    # Anu is 3 years younger than Chris\n    equation4 = Eq(Anu, Chris - 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (Anu, Benu, Chris, Dave))\n    \n    return solutions[Anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote initial number of red balls as R and white balls as W\n    R, W, r, w = symbols('R W r w')\n\n    # Initial ratio of red to white balls: R/W = 3/2\n    initial_ratio = Eq(R/W, 3/2)\n    \n    # After Pip adds r red balls, the ratio becomes (R + r)/W = 5/3\n    pip_ratio = Eq((R + r) / W, 5/3)\n    \n    # After Bud adds w white balls, the ratio becomes (R + r)/(W + w) = 5/4\n    bud_ratio = Eq((R + r) / (W + w), 5/4)\n    \n    # Given that the number of white balls Bud adds is 100 more than red balls Pip adds: w = r + 100\n    balls_difference = Eq(w, r + 100)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, pip_ratio, bud_ratio, balls_difference), (R, W, r, w))\n\n    return solutions[W]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # For a modulo 8 to be remainder 6, a must be of the form 8n + 6\n    # For b modulo 8 to be remainder 7, b must be of the form 8m + 7\n    # Adding a and b gives 8n + 6 + 8m + 7 = 8(n + m + 1) + 5\n    # Therefore, the remainder when (a + b) is divided by 8 is 5\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    \n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_Jessica = 5\n    desks_behind_Judy = 7\n    desks_between_Jessica_and_Judy = 1\n\n    total_desks = desks_in_front_of_Jessica + desks_between_Jessica_and_Judy + desks_behind_Judy + 2\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):  # Looping through the number sequence\n        count += str(i).count('6')  # Counting the occurrence of digit '6' in each number\n    ans = count    \n    return ans\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_balls_taken = 2989\n\n    # Since Ming takes two balls at a time, we can calculate how many times this action is repeated\n    actions = total_balls_taken // 2\n\n    for _ in range(actions):\n        if white_balls % 2 == 0:  # Even number of white balls\n            # Two white balls are taken out, and one black ball is put back\n            white_balls -= 2\n            black_balls += 1\n        else:\n            # One black and one white ball are taken out, and one white ball is put back\n            white_balls -= 1\n            black_balls -= 1\n            white_balls += 1\n    \n    if total_balls_taken % 2 == 1:\n        white_balls -= 1  # Taking the last ball into account\n\n    # Determine the color of the remaining balls\n    if white_balls > 0:\n        color = 'white'\n        remaining_balls = white_balls\n    else:\n        color = 'black'\n        remaining_balls = black_balls\n\n    return (remaining_balls, color)\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    from itertools import permutations\n\n    # Iterate over all permutations of numbers from 0-9 to fill the missing digits\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        # Form the numbers, where a!=0 and c!=0 to avoid leading zeroes in the multiplicand and multiplier\n        multiplicand = a * 1000 + b * 100 + c * 10 + d\n        multiplier = c * 10 + e\n        product = multiplicand * multiplier\n        \n        # Convert the product into a list of digits\n        product_digits = [int(digit) for digit in str(product)]\n        \n        # If the product has 5 digits and the digits match the given blanks (_ _ a * _ _ c = _ _ _ a e)\n        if len(product_digits) == 5 and product_digits[2] == a and product_digits[4] == e:\n            return product  # if condition is met, return the product\n\n    return None  # if no solution is found\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the original average weight of the group\n    # Let n be the number of people in the original group\n    # Total weight of the original group is n * x\n\n    # When Aaron joins:\n    # New average weight is 61\n    # Total weight becomes n * x + 45\n    # New number of people is n + 1\n    # (n * x + 45) / (n + 1) = 61\n    # n * x + 45 = 61 * (n + 1)\n    # n * x + 45 = 61n + 61\n\n    # When Ben joins:\n    # New average weight is 62\n    # Total weight becomes n * x + 45 + 71\n    # New number of people is n + 2\n    # (n * x + 45 + 71) / (n + 2) = 62\n    # n * x + 45 + 71 = 62 * (n + 2)\n    # n * x + 116 = 62n + 124\n\n    # Now, we have two equations:\n    # n * x + 45 = 61n + 61 (1)\n    # n * x + 116 = 62n + 124 (2)\n\n    # Let's use equation (1) to express x in terms of n:\n    # n * x = 61n + 61 - 45\n    # n * x = 61n + 16\n    # x = 61 + 16/n\n\n    # Substitute the value of x from equation (1) into equation (2)\n    # n * (61 + 16/n) + 116 = 62n + 124\n    # 61n + 16 + 116 = 62n + 124\n    # 61n + 132 = 62n + 124\n\n    # Solving for n we get:\n    # n = 132 - 124\n    # n = 8\n\n    # Now we substitute the value of n back into the equation for x:\n    # x = 61 + 16/n\n    # x = 61 + 16/8\n    # x = 61 + 2\n    # x = 63\n\n    # The average weight of the group before Aaron and Ben joined them was 63 kg.\n    n = 8\n    original_average = 61 + 16/n\n    return original_average\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people = 6\n    original_hours = 15\n    target_hours = 2\n\n    # Calculate work done by one person in the original hours\n    work_per_person = original_hours / people\n    \n    # Calculate total work units for the entire task\n    total_work = work_per_person * people\n    \n    # Now find the number of people required to complete the total work in target hours\n    people_needed = total_work / target_hours\n    \n    return int(people_needed)\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters_to_centimeters = 100\n    n = 2.1 * meters_to_centimeters\n    return int(n)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # since we are asked for at least two numbers, we'll just consider two and three numbers\n    # case of two numbers: (1, 4), (2, 3) => 2 ways\n    # case of three numbers: (1, 1, 3), (1, 2, 2) => 2 ways (after accounting for permutations)\n    # case of four or more numbers is not possible since 5 is too small to be divided into 4 or more non-zero parts\n    count = 2 + 2\n    \n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):  # Hundreds digit cannot be 0\n        for units_digit in range(1, 10):  # Units digit cannot be 0\n            if units_digit == hundreds_digit + 2:\n                count += 1  # Tens digit can be anything from 0 to 9, so one match is one valid number\n    return count\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    total_chocolates = remaining_after_students / (20/100)\n    return total_chocolates\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        ans += (2*i - 1)\n    return ans\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_han, daughter = symbols('mr_han daughter')\n    \n    equation1 = Eq(mr_han, 3 * daughter)\n    equation2 = Eq(mr_han + daughter, 91.2)\n     \n    solutions = solve((equation1, equation2), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_money = 30  # in pounds\n    bag_of_sweets = 3.99  # in pounds\n    magazine = 2.50  # in pounds\n    stickers = 0.70  # in pounds (converted from pence to pounds)\n    pizza = 10.99  # in pounds\n    orange_juice_per_glass = 1.50  # in pounds\n    orange_juice_total = orange_juice_per_glass * 4  # cost for four glasses\n\n    total_spent = bag_of_sweets + magazine + stickers + pizza + orange_juice_total\n    change_left = initial_money - total_spent\n\n    return round(change_left, 2)  # rounding to two decimal places\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_types = [1, 2, 5]\n    unique_sums = set()\n    \n    for coin1 in coin_types:\n        for coin2 in coin_types:\n            for coin3 in coin_types:\n                current_sum = coin1 + coin2 + coin3\n                unique_sums.add(current_sum)\n    \n    return len(unique_sums)\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n \nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Since Samantha has more votes than anyone else, to have the least possible\n    # she must have more votes than the other two students combined.\n\n    # There are 25 votes in total.\n\n    # If Samantha has the least number of votes to still have more than the others,\n    # then the other two can have at most half of the remaining 24 votes (since there\n    # must be a difference of at least 1 vote for her to have more votes).\n\n    # Thus, the other two can have at most 12 votes combined (as 24 / 2 = 12).\n\n    # Therefore, Samantha must have at least 13 votes to have more than the other two.\n    return 13\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n    return pages if digits == 291 else pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 1000\n    weight_in_kg = 2.4\n    weight_in_g = weight_in_kg * kg_to_g\n    return weight_in_g\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 6000\n    amount = 8029.35\n    time = 5\n    x = symbols('x')\n\n    # The formula for compound interest is A = P * (1 + r/n)^(nt)\n    # However, since it's compounded annually, n = 1 so the formula simplifies to:\n    # A = P * (1 + r)^t\n    # We need to find 'x', which is the annual interest rate 'r' in the formula, hence:\n    # 8029.35 = 6000 * (1 + x/100)^5\n    equation = Eq(principal * (1 + x/100)**time, amount)\n\n    # Solve for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n    \n    percentage_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n    return percentage_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pages, pages_read = symbols('total_pages pages_read')\n\n    equation1 = Eq(pages_read / (total_pages - pages_read), 1 / 5)\n    equation2 = Eq((pages_read + 80) / total_pages, 70 / 100)\n\n    solutions = solve((equation1, equation2), (total_pages, pages_read))\n\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of questions CC answered correctly\n    # Then the number of questions CC got wrong or skipped is 10 - x\n\n    # According to the rules, CC got 10x points for correct answers \n    # and lost 5(10 - x) points for wrong answers or skipping\n\n    # Vivi got 15 more points than CC, so Vivi got 10x + 15 points\n\n    # Together Vivi and CC got 10x + 10x + 15 = 95 points\n    # Simplifying: 20x + 15 = 95\n    # Solving for x: 20x = 95 - 15\n    #              x = (95 - 15) / 20\n    #              x = 80 / 20\n    #              x = 4\n\n    # CC answered correctly 4 questions\n    correct_CC = (95 - 15) / (10 * 2)\n    return int(correct_CC)\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    solution = solve((equation1, equation2), (book, magazine))\n    \n    return solution[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    teachers = 6\n    girls_per_room = 5\n    teachers_per_room = teachers / 3\n\n    rooms_for_girls = girls // girls_per_room\n    rooms_for_teachers = teachers // teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return int(total_rooms)\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    # Calculate the weight of flour per person\n    flour_per_person = 650 / 15\n    \n    # Calculate the total flour needed for 18 people\n    total_flour_for_18 = flour_per_person * 18\n    \n    return total_flour_for_18\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    cost_adult = 6.34\n    cost_child = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (cost_adult * num_adults) + (cost_child * num_children)\n    \n    return total_cost\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # Original sum of the numbers\n    equation1 = Eq(x + y, 11.63)\n    # Sum when one of the number's decimal point is shifted\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    difference = abs(solutions[x] - solutions[y])\n    return 100 * difference\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    mm_value = 7000000\n    m_value = mm_value / mm_in_m\n    return m_value\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the common factor\n    science, literature, math = symbols('science literature math')\n\n    # Given ratios\n    equation1 = Eq(science, 9 * literature / 10)\n    equation2 = Eq(math, 7 * literature / 5)\n    \n    # Total members equation\n    equation3 = Eq(science + literature + math, 99)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n    \n    # Difference in number of members between math club and literature club\n    difference = solutions[math] - solutions[literature]\n\n    return difference\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num_str = \"2581953752\"\n    min_sum = float('inf')  # Initialize the minimum sum to infinity\n\n    # We will cut the paper strip twice, so we need two loops\n    for i in range(1, len(num_str) - 1):  # First cut\n        for j in range(i + 1, len(num_str)):  # Second cut\n            # Split the original number into three parts based on the cut positions\n            first_num = int(num_str[:i])\n            second_num = int(num_str[i:j])\n            third_num = int(num_str[j:])\n            # Calculate the sum of the three parts\n            current_sum = first_num + second_num + third_num\n            # Compare with the smallest sum found so far\n            min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Pigeonhole principle worst-case scenario\n    # Taking 2 blue, 2 yellow and 2 red guarantees 2 of each color, then the next marble must match one of those colors\n    marbles_to_guarantee_three_of_same_color = (2 + 2 + 2) + 1\n    \n    return marbles_to_guarantee_three_of_same_color\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Melissa age now is x, mother age now is y\n    melissa, mother = symbols('melissa mother')\n    equation1 = Eq(mother - melissa, 32 - 8)\n    equation2 = Eq(mother, 3 * melissa)\n    \n    solutions = solve((equation1, equation2), (melissa, mother))\n    \n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, but we need to subtract the corners because they are counted twice\n    flowers_per_side = 6 - 1  # subtracting the corner flower\n\n    # 4 sides of the square and 4 flowers (one at each corner)\n    total_flowers = 4 * flowers_per_side + 4\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    book_fraction = 1 / 3\n    bag_fraction = 1 / 2\n\n    # Define the cost of the book and bag\n    cost_book_and_bag = 132\n\n    # The fraction Thomas calculated for the combined book and bag is incorrect.\n    # The correct calculation is using the remainder after spending on the book.\n    \n    remainder_after_book = 1 - book_fraction\n    spent_on_bag = remainder_after_book * bag_fraction\n\n    # Calculate the total fraction spent on both book and bag\n    total_spent_fraction = book_fraction + spent_on_bag\n\n    # Calculate the value of 1 unit\n    one_unit = cost_book_and_bag / total_spent_fraction\n\n    return one_unit\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    total_length = 47\n    sum_of_digits = 0\n\n    for i in range(total_length):\n        sum_of_digits += int(pattern[i % len(pattern)])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return round(cost_for_nine_bottles, 2)\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a basketball (b) and a volleyball (v)\n    b, v = symbols('b v')\n\n    # Given that 5 basketballs and 6 volleyballs cost $325\n    # 5b + 6v = 325\n    equation1 = Eq(5*b + 6*v, 325)\n\n    # A basketball costs $10 more than a volleyball: b = v + 10\n    equation2 = Eq(b, v + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, v))\n\n    # Return the price of a basketball\n    return solutions[b]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct_jack in range(26):\n        incorrect_jack = 25 - correct_jack\n        points_jack = 4 * correct_jack - incorrect_jack\n        for correct_johnson in range(correct_jack):\n            incorrect_johnson = 25 - correct_johnson\n            points_johnson = 4 * correct_johnson - incorrect_johnson\n            if points_jack == 61 and points_johnson == 61:\n                return 25 - correct_jack\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    total_avg_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n    \n    # Let b be the number of boys\n    # Then (40 - b) will be the number of girls\n    # The total number of pencils is the sum of pencils owned by boys and girls\n    \n    # avg_boys_pencils * b + avg_girls_pencils * (total_pupils - b) = total_avg_pencils * total_pupils\n    # 20 * b + 60 * (40 - b) = 35 * 40\n    # Solve for b\n    \n    b = (total_avg_pencils * total_pupils - avg_girls_pencils * total_pupils) / (avg_boys_pencils - avg_girls_pencils)\n    \n    return int(b)\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # a can be any digit from 1 to 9\n        for b in range(10):  # b can be any digit from 0 to 9\n            ab = 10 * a + b  # Construct the number ab\n            ba = 10 * b + a  # Construct the number ba\n\n            if 8 * ab == 3 * ba:  # Check the given condition\n                return ab  # Return the value of ab if the condition is met\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return cost\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Define the price per cupcake within the first 20 cupcakes\n    price_per_cupcake = 4.50\n    # Define the shipping and handling cost\n    shipping_handling = 12\n    \n    # Calculate the number of cupcakes if no discounts were applied\n    # and the order was 20 cupcakes or fewer\n    cupcakes_no_discount = (120 - shipping_handling) / price_per_cupcake\n    \n    # If the total bill is computed with no discounts, check if it's within 20 cupcakes\n    if cupcakes_no_discount <= 20:\n        return int(cupcakes_no_discount)\n    else:\n        # Calculate the price per cupcake with discount for additional cupcakes\n        discount_price_per_cupcake = price_per_cupcake * 0.8\n        \n        # We already paid $12 for shipping and $90 for the first 20 cupcakes,\n        # calculate the remaining amount which was paid at a discounted rate\n        remaining_amount = 120 - (20 * price_per_cupcake) - shipping_handling\n        \n        # Calculate the number of discounted cupcakes\n        discounted_cupcakes = remaining_amount / discount_price_per_cupcake\n        \n        # Total cupcakes include the first 20 and any additional discounted ones\n        total_cupcakes = 20 + discounted_cupcakes\n        \n        return int(total_cupcakes)\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n    \n    # Since there are 100 pence in a pound, convert the total pence to pounds\n    total_pence_in_pounds = total_pence / 100\n    \n    # Add the pounds and the converted pence\n    ans = total_pounds + total_pence_in_pounds\n    \n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    frac_value = 1 / 3\n    square_value = 15 / frac_value\n    return square_value\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut1 = 4.8\n    cut2 = 2.73\n\n    remaining_length = original_length - (cut1 + cut2)\n    differences = [abs(cut1 - cut2), abs(cut1 - remaining_length), abs(cut2 - remaining_length)]\n    \n    return max(differences) - min(differences)\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        num_with_one_in_front = int('1' + str(num))\n        num_with_one_at_end = int(str(num) + '1')\n        if num_with_one_in_front * 3 == num_with_one_at_end:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution_A = solve(equation, A)\n    \n    return solution_A[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    total_people = people_in_front + position_from_back - 1  # Subtract 1 because Rose is counted twice\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lazy_time = symbols('lazy_time')\n    \n    # 1/work_time denotes the work rate. The sum of individual work rates equals the combined work rate.\n    equation = Eq((1 / 10) + (1 / lazy_time), 1 / 6)\n\n    # Solve for lazy_time\n    lazy_time_solution = solve(equation, lazy_time)\n\n    return lazy_time_solution[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n\n    # Calculate their ages in 2 years time\n    john_future_age = john_current_age + 2\n    grandmother_future_age = (john_current_age + grandmother_age_difference) + 2\n\n    # Calculate their total age in 2 years time\n    total_age_in_2_years = john_future_age + grandmother_future_age\n\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the original number John thought of\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    equation = Eq((x + 45) / 3, 2 * x)\n\n    # Solve the equation for 'x'\n    solutions = solve(equation, x)\n\n    # Assuming there is only one solution, we return that solution\n    return solutions[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    number_thought = (result - 10) / 2\n    return number_thought\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    for x1 in range(2, 10):  # Each brother must have at least two books\n        for x2 in range(2, 10):\n            x3 = 10 - x1 - x2\n            if x3 >= 2:  # Check that the third brother also has at least two books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Since there are marbles of 4 different colours and we want at least one of each,\n    # in the worst case, we will draw all marbles of the three most abundant colours.\n    # This ensures that the next marble we draw will be of the fourth colour.\n    \n    # Red has the highest number of marbles, followed by blue, then yellow.\n    # We ignore the second group of red marbles as it's likely a typo, there should not be two groups of red marbles.\n    # Draw all blue, all yellow, and 3 red marbles.\n    total_draws = 9 + 8 + 3\n    \n    # Now we are guaranteed to get the fourth colour with the next draw, thus adding 1.\n    total_draws += 1\n    \n    return total_draws\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n\n    total_pages = pages_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    max_height_of_tom = 131 - (31 - 10)\n    return max_height_of_tom\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    num_str = '5' * 19 + '0' + '9' * 19\n    for i in range(10):\n        test_num = int(num_str[:19] + str(i) + num_str[20:])\n        if test_num % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    return 10 - 1  # From 16 to 96\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    this_time = 105.6\n    more_than_last_time = 14.4\n    last_time = this_time - more_than_last_time\n    total_spent = this_time + last_time\n    return total_spent\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2021):\n        a, b = b, (a + b) % 3  # Calculate only the remainder to avoid large number computations\n    return b\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n    \n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's denote Jason's storybooks as J and Anthea's storybooks as A.\n    # According to the problem, after giving away 4 storybooks:\n    # Jason has (J - 4) storybooks and Anthea has (A + 4) storybooks.\n    # And both should have the same number, hence (J - 4) = (A + 4).\n    # We also know that Jason initially has 30 storybooks, so J = 30.\n    # Now we can substitute J in the equation to find A.\n    \n    J = 30\n    # (J - 4) = (A + 4)\n    # 30 - 4 = A + 4\n    # 26 = A + 4\n    # 26 - 4 = A\n    # 22 = A\n    \n    A = J - 8  # This is from simplifying (J - 4) - 4\n    \n    # Now, we can find the difference between Jason and Anthea initially which is just J - A.\n    difference = J - A\n    \n    return difference\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the number of students\n    x = symbols('x')\n    \n    # If each student is given $5, there will be $3 left\n    # total - 5 * x = 3\n    equation1 = Eq(x * 5 + 3, x * 4 + 9)\n    \n    # Solve the equation to find the number of students\n    number_of_students = solve(equation1, x)\n    \n    return number_of_students[0]\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    n = 840\n    ans = 1\n    i = 2\n  \n    while i <= n:\n        count = 0\n        while n % i == 0:\n            n //= i\n            count += 1\n        ans *= (count + 1)\n        i += 1\n\n    return ans\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for each person's money\n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    # Equation 1: The sum of their money is £200\n    equation1 = Eq(alan + bella + chloe, 200)\n    \n    # Equation 2: Ratio of Alan's money to Bella's is 4:3\n    equation2 = Eq(alan/bella, 4/3)\n    \n    # Equation 3: Alan has £20 more than Chloe\n    equation3 = Eq(alan, chloe + 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n    \n    # Return the amount of money Chloe has\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_cost = 1.83\n    total_cost = box_of_chocolates + 2 * chocolate_bar_cost\n    money_paid = 20\n    change = money_paid - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # There are 3 family members (excluding Lily and her mother) to arrange\n    # Lily is fixed on the left end, and her mother is fixed on the right end\n    # So we just need to arrange the 3 family members in the middle\n\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8]\n    all_numbers = set()\n\n    # Generate all possible 2-digit numbers with the given digits\n    for perm in permutations(digits, 2):\n        number = perm[0] * 10 + perm[1]\n        all_numbers.add(number)\n\n    # Lists to hold numbers satisfying conditions\n    smallest_number_condition = []\n    largest_number_condition = []\n    second_largest_number_condition = []\n    odd_numbers = []\n\n    # Loop through all possible numbers to find those that meet the conditions\n    for number in all_numbers:\n        tens_digit = number // 10\n        ones_digit = number % 10\n\n        # In the smallest number, the ones digit is twice the tens digit.\n        if ones_digit == 2 * tens_digit:\n            smallest_number_condition.append(number)\n\n        # In the largest number, the sum of ones and tens digits is 9.\n        if tens_digit + ones_digit == 9:\n            largest_number_condition.append(number)\n\n        # In the second largest number, the tens digit is 5 more than the ones digit.\n        if tens_digit == ones_digit + 5:\n            second_largest_number_condition.append(number)\n\n        # Checking for odd numbers\n        if number % 2 != 0:\n            odd_numbers.append(number)\n\n    # Now, find the smallest and largest possible numbers from the conditions above\n    smallest = min(smallest_number_condition)\n    largest = max(largest_number_condition)\n    second_largest = max(second_largest_number_condition)\n    odd_numbers_count = len(odd_numbers)\n\n    # Find the remaining number which is the second smallest one\n    remaining_numbers = all_numbers - {smallest, largest, second_largest} - set(odd_numbers)\n\n    if odd_numbers_count == 1: # Making sure there is only 1 odd number\n        remaining_odd_number = odd_numbers[0]\n        remaining_numbers -= {remaining_odd_number}\n\n    # The second smallest number must be the smallest in the remaining_numbers set\n    second_smallest = min(remaining_numbers)\n\n    return second_smallest\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_row_seats = 7\n    last_row_seats = 99\n    difference = 4\n    \n    # Calculate number of rows, using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (num_rows - 1) * difference\n    num_rows = ((last_row_seats - first_row_seats) / difference) + 1\n    \n    # Calculate the sum of an arithmetic series:\n    # sum = (num_rows / 2) * (first_row_seats + last_row_seats)\n    total_seats = (num_rows / 2) * (first_row_seats + last_row_seats)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    smallest_two_digit_number = None\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            smallest_two_digit_number = number\n            break\n    return smallest_two_digit_number\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let x be the total number of visitors at the fair\n    x = symbols('x')\n    # 3/5 of the visitors were children\n    children = 3/5 * x\n    # Therefore, 2/5 of the visitors are remaining (men + women)\n    remaining = 2/5 * x\n    # 1/2 of the remaining visitors were men\n    men = 1/2 * remaining\n    # There were 140 more children than men\n    equation = Eq(children, men + 140)\n    # Solve for the total number of visitors x\n    total_visitors = solve(equation, x)[0]\n    return total_visitors\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    sam_after_give = sam - 0.2 * sam\n    peter_after_receive = peter + 0.2 * sam\n\n    # Peter gave 25% of his stickers to Sam after receiving from Sam\n    sam_final = sam_after_give + 0.25 * peter_after_receive\n    peter_final = peter_after_receive - 0.25 * peter_after_receive\n\n    # Sam has 96 stickers more than Peter in the end\n    equation2 = Eq(sam_final - peter_final, 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Calculate the sum of the first three numbers\n    sum_first_three = 3 * 120\n    \n    # Calculate the sum of all four numbers\n    sum_all_four = 4 * 150\n    \n    # Find the fourth number by subtracting the sum of the first three from the sum of all four\n    fourth_number = sum_all_four - sum_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    questions = 20\n    for correct_answers in range(21):\n        wrong_answers = questions - correct_answers\n        if correct_answers * 5 - wrong_answers * 2 == 51:\n            return correct_answers\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial_amount be the amount Amy had at first\n    initial_amount = symbols('initial_amount')\n\n    # After spending 6/11 of her money and 5 more, the money left is (5/11 * initial_amount - 5)\n    first_spend_remainder = (5/11) * initial_amount - 5\n\n    # Then she spends 3/10 of the remainder and 12 more, so she has (7/10 * first_spend_remainder - 12) left\n    second_spend_remainder = (7/10) * first_spend_remainder - 12\n\n    # We now setup the equation based on the information given: second_spend_remainder = 30\n    equation = Eq(second_spend_remainder, 30)\n\n    # Solve the equation to find the initial amount\n    initial_money = solve(equation, initial_amount)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n\n    actual_subtrahend = 75\n    minuend = mistaken_result + mistaken_subtrahend\n    actual_result = minuend - actual_subtrahend\n    \n    return actual_result\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let Sally's current age be s and Gillian's current age be g\n    s, g = symbols('s g')\n\n    # Ratio of their current ages: s/g = 2/7\n    equation1 = Eq(s/g, 2/7)\n\n    # In 15 years, their ages will be: s + 15 and g + 15\n    # The ratio of their ages in 15 years: (s + 15)/(g + 15) = 1/2\n    equation2 = Eq((s + 15)/(g + 15), 1/2)\n\n    # Now we solve the system of equations for s and g\n    solutions = solve((equation1, equation2), (s, g))\n\n    # Since we want Sally's age, we return the solution for s\n    return solutions[s]\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    count = 0\n    for customer in range(1, 41):\n        if customer % 3 == 0 and customer % 4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    result = 35 / (45/9)\n    return int(result)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5  # distance between each seed in metres\n    total_seeds = 12  # total number of seeds\n\n    circumference = distance_between_seeds * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    correct_sum = sum(i**2 for i in range(5, 16))  # Calculate the sum of squares from 5^2 to 15^2\n    kimmys_sum = (15 * 16 * 31) // 6  # Kimmy's calculation based on the formula for the sum of squares\n    \n    # Check if Kimmy's answer is correct\n    ans = correct_sum if correct_sum != kimmys_sum else kimmys_sum\n    return ans\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    # Let x be the number of papers cut into three parts.\n    # Each paper that is cut generates 2 additional pieces (3 parts - original piece).\n    # Therefore, 10 (initial) - x (cut into 3 parts) + 2x (additional pieces) = 16 (final).\n    # Simplifying: 2x - x = 16 - 10 -> x = 6\n    \n    # Number of cut papers into three parts:\n    cut_papers = final_pieces - initial_pieces\n    \n    return cut_papers\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    for n in range(1, 1000):\n        if (n**2 + 9) == (n + 1)**2 - 16:\n            return n**2 + 9\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_total = 14\n\n    total_score = (total_boys + total_girls) * average_total\n    total_boys_score = total_boys * average_boys\n    total_girls_score = total_score - total_boys_score\n\n    average_girls = total_girls_score / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies_baked = symbols('cookies_baked')\n    burnt_cookies = (3/5) * cookies_baked\n    remaining_cookies = cookies_baked - burnt_cookies\n    sold_cookies = (3/4) * remaining_cookies\n    not_sold_cookies = remaining_cookies - sold_cookies\n\n    equation = Eq(burnt_cookies - sold_cookies, 42)\n\n    cookies_baked_solution = solve(equation, cookies_baked)\n\n    return cookies_baked_solution[0]\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Possible coin values in GBP\n    coin_values = [1, 2, 5, 10, 20, 50, 100, 200]\n    \n    # Iterate over coin values starting from the smallest\n    for smallest_coin in coin_values:\n        for second_smallest in coin_values:\n            if smallest_coin == second_smallest:\n                # Try two coins of the smallest denomination and one of each remaining denomination\n                # until the sum exceeds 2.50 GBP or it matches exactly\n                num_smallest_coins = 2\n                total = smallest_coin * num_smallest_coins  # Total value from the smallest coins\n                \n                while total <= 250:  # Given change is 2.50 GBP, we work with pence for simplicity\n                    # Add pairs of the second smallest coin until the sum exceeds 2.50 GBP\n                    num_second_smallest = 0\n                    while total <= 250:\n                        total += 2 * second_smallest\n                        num_second_smallest += 2\n\n                        # Check if the condition holds: for each coin, there's exactly one other coin\n                        if total == 250 and num_second_smallest == 2:\n                            return smallest_coin / 100  # Return value in GBP\n            \n            # Reset the total for the next iteration\n            total = smallest_coin * 2  # Start with two coins of the smallest denomination\n\n    return None\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    apples_per_cake = 4\n    total_kg = 8\n    total_apples = total_kg * apples_per_kg\n    total_cakes = total_apples // apples_per_cake\n\n    return total_cakes\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80  # Cost in pounds\n    cost_per_1g = cost_per_100g / 100\n    cost_for_250g = cost_per_1g * 250\n\n    return cost_for_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n    containers_needed = -(-total_apples // apples_per_container)\n\n    return containers_needed\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for num in range(10, 10000):  # setting a reasonable range for our search\n        original_num_with_9 = num * 10 + 9\n        new_num_with_9_front = int(str(9) + str(num))\n        if new_num_with_9_front == 4 * original_num_with_9:\n            return original_num_with_9\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (int(f\"107{Y}\") % 6) == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initial division of postcards by Lily\n    initial_envelopes = 5\n    postcards_per_envelope_after_one_week = initial_envelopes  # Since each envelope is assumed to have the same number of postcards as the number of envelopes\n\n    # Additional division of postcards after one week by Lily\n    additional_envelopes = 2\n    additional_postcards_per_envelope = 5  # Since each envelope must have the same number of postcards as the initial envelopes\n\n    # Total postcards after distributing the additional postcards\n    total_postcards = initial_envelopes * postcards_per_envelope_after_one_week \\\n                      + additional_envelopes * additional_postcards_per_envelope\n\n    return total_postcards\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front, so we have 1 way to place Laura.\n    # There are 5 other students to arrange, and Rita cannot stand at the end.\n    # There are 5 possible positions for Rita (except the end) and 4 remaining students.\n    # The remaining 4 students can be arranged in any order in the remaining 4 positions.\n    \n    ways_for_rita = 5  # Rita can be in any of the 5 positions (not at the end)\n    ways_for_others = factorial(4)  # The remaining 4 students can be arranged in factorial(4) ways\n\n    total_ways = ways_for_rita * ways_for_others\n\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Kevin travels 4/7 of the road when they meet\n    # The ratio of Jerry's speed to Kevin's speed is 3/7 to 4/7\n    # Jerry's speed = Kevin's speed * (3/7) / (4/7)\n\n    kevin_speed = 80\n    jerry_speed_ratio = 3/4\n    \n    # Calculate Jerry's speed based on the ratio\n    jerry_speed = kevin_speed * jerry_speed_ratio\n\n    # In each hour, Jerry travels 2/5 of the road length.\n    # Jerry's speed = 2/5 * road_length per hour\n    # Thus, road_length = Jerry's speed / (2/5)\n    road_length = jerry_speed / (2/5)\n\n    return road_length\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_rate = 0.5\n    additional_discount_rate = 0.2\n\n    # Apply the first discount\n    discounted_price = regular_total_price * discount_rate\n\n    # Apply the additional discount since at least 5 items were bought\n    final_price = discounted_price * (1 - additional_discount_rate)\n    return final_price\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4/7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    singapore_departure_time = datetime(2023, 8, 24, 5, 0)\n    london_landing_time = datetime(2023, 8, 24, 11, 0)\n    \n    # Calculate the time difference, adjust landing time to Singapore's timezone\n    adjusted_landing_time = london_landing_time + timedelta(hours=7)\n    \n    # Calculate the flight duration\n    flight_duration = adjusted_landing_time - singapore_departure_time\n    \n    return flight_duration.seconds // 3600\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_pupils = 40\n    total_avg_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys + girls, total_pupils)  # The total number of boys and girls is 40\n    equation2 = Eq(avg_boys_pencils * boys + avg_girls_pencils * girls, total_avg_pencils * total_pupils)  # Average pencil calculation\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_prob = 0.3\n    draw_prob = 0.1\n    lose_prob = 1 - win_prob - draw_prob\n\n    # Calculates the probability to win one game and not the other \n    win_one_game = (win_prob * (1 - win_prob - draw_prob)) + ((1 - win_prob - draw_prob) * win_prob)\n\n    return win_one_game\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 1000):  # Jonathan has at least 32 lollipops\n        if (lollipops - 32) % 4 == 0 and (lollipops - 3) % 7 == 0:\n            return lollipops  # The number of lollipops Jonathan has\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal_string = ''\n    remainder = 1\n    while len(decimal_string) < 2013:  # We need to find up to the 2012th decimal place\n        remainder *= 10\n        decimal_part = remainder // 13\n        decimal_string += str(decimal_part)\n        remainder -= decimal_part * 13\n        if remainder == 0:\n            break  # If we get a remainder of 0, the decimal terminates\n    \n    # The 2012th digit is the 2011th index since string indexing is 0-based\n    return int(decimal_string[2011])\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Iterate through all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # If the sum of the digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi_initial, wiya_initial = symbols('eddi_initial wiya_initial')\n\n    ratio_initial = Eq(eddi_initial / wiya_initial, 8/7)\n    ratio_after = Eq((eddi_initial - 4)/(wiya_initial + 4), 18/17)\n\n    solutions = solve((ratio_initial, ratio_after), (eddi_initial, wiya_initial))\n\n    return solutions[eddi_initial]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # red to blue ratio is 5:6, so red marbles is (5/6)*blue_marbles\n    red_marbles = (5/6) * blue_marbles\n    # red marbles is twice that of green marbles, so green_marbles is red_marbles / 2\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = ((2017 + 1/3) - 2016.875) * 17\n    final_part = 3 + 23/32\n\n    result = (numerator / denominator) * final_part\n\n    return result\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b = symbols('a b')  # a = Class A students, b = Class B students\n\n    # Initial condition: Class A has 47 more students than Class B\n    initial_condition = Eq(a, b + 47)\n    \n    # After moving students, Class A will have 9 more students than Class B\n    # Let x be the number of students moved from Class A to Class B\n    x = symbols('x')\n    final_condition = Eq(a - x, b + x + 9)\n\n    # Solve the system of equations\n    solution = solve((initial_condition, final_condition), (a, b, x))\n\n    return solution[x]\n    \nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    from math import gcd\n\n    a = 2010\n    b = 2377\n    c = 3111\n\n    # Calculate the differences of the pairs\n    diff_ab = abs(a - b)\n    diff_ac = abs(a - c)\n    diff_bc = abs(b - c)\n\n    # Find the GCD of the differences\n    gcd_diff = gcd(gcd(diff_ab, diff_ac), diff_bc)\n\n    # Since we want the largest possible value of D, we take the GCD of the differences.\n    D = gcd_diff\n    R = a % D  # The remainder will be the same for all numbers when divided by D\n\n    return D + R\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - (piece1 + piece2)\n\n    return piece3\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Initial parameters\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # meters\n    rabbit_sleep_time = 215  # minutes\n    delay_start = 10  # minutes\n\n    # Distance covered by rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * delay_start\n\n    # Distance covered by turtle during rabbit's sleep\n    turtle_distance_during_rabbit_sleep = turtle_speed * (rabbit_sleep_time + delay_start)\n\n    # If the turtle wins during the rabbit's sleep\n    if turtle_distance_during_rabbit_sleep >= race_distance:\n        winner = 'turtle'\n        winner_time = (race_distance - rabbit_distance_before_sleep) / turtle_speed\n        rabbit_distance_after_sleep = rabbit_distance_before_sleep\n    else:\n        winner = 'rabbit'\n        # Time for rabbit to finish the race after waking up\n        rabbit_time_to_finish = (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n        winner_time = rabbit_sleep_time + delay_start + rabbit_time_to_finish\n        # Turtle's distance when the rabbit finishes\n        turtle_distance_after_rabbit_finish = turtle_speed * winner_time\n\n        if turtle_distance_after_rabbit_finish >= race_distance:\n            winner = 'turtle'\n            winner_time = (race_distance - rabbit_distance_before_sleep) / turtle_speed\n            rabbit_distance_after_sleep = rabbit_distance_before_sleep + (winner_time - delay_start) * rabbit_speed\n        else:\n            winner = 'rabbit'\n            rabbit_distance_after_sleep = race_distance\n\n    # Distance between them when the first one reached the finish line\n    distance_between_them = abs(rabbit_distance_after_sleep - turtle_distance_during_rabbit_sleep\n                                if winner == 'turtle' else race_distance - turtle_distance_after_rabbit_finish)\n\n    return winner, distance_between_them\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    ans = 5.221 + 5.8\n    return ans\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(x - y, 57)  # The difference between two numbers is 57\n    equation2 = Eq(x + y, 77)  # The sum of the numbers is 77\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the value of the smaller number\n    smaller_number = min(solutions[x], solutions[y])\n    return smaller_number\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    # Adults are twice as many as boys\n    equation1 = Eq(adults, 2 * boys)\n    # Girls are thrice as many as boys\n    equation2 = Eq(girls, 3 * boys)\n    # Total number of people is 480\n    equation3 = Eq(boys + adults + girls, 480)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    oddtastic_count = 0\n    for number in range(1, 1000):\n        is_oddtastic = all(int(digit) % 2 != 0 for digit in str(number))\n        if is_oddtastic:\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # The first digit must be an odd number between 1 and 9\n        for j in range(10):  # The second digit must be between 0 and 9\n            for k in range(10):  # The third digit must be between 0 and 9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_in_pounds = 24\n    avocados_per_pair = 2\n    total_avocados = total_pairs * avocados_per_pair\n    cost_per_avocado_in_pounds = total_cost_in_pounds / total_avocados\n    cost_per_avocado_in_pence = cost_per_avocado_in_pounds * 100\n    return cost_per_avocado_in_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    # Possible outcomes of a single die roll\n    outcomes = range(1, 7)\n    \n    # Calculate each possible sum and its frequency\n    sums_freq = Counter(i + j for i in outcomes for j in outcomes)\n    \n    # Find the total score with the maximum frequency\n    most_likely_score = max(sums_freq, key=sums_freq.get)\n    \n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    # total score of girls + total score of boys = total score of class\n    equation = Eq(girls * 88 + boys * 91, 36 * 89)\n\n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote:\n    # r for rhinos\n    # d for deers\n    # o for ostriches\n\n    # Based on the problem statement:\n    # r = d  (number of rhinos is equal to number of deer)\n    # r + d + o = 28 (total heads)\n    # 4*r + 4*d + 2*o = 88 (total legs, considering rhinos & deers have 4 legs, ostrich has 2 legs)\n\n    # Since rhinos and deers have the same amount, we can use a single variable for both\n    r, o = symbols('r o', integer=True)\n\n    eq1 = Eq(r + r + o, 28)  # Heads equation\n    eq2 = Eq(4*r + 4*r + 2*o, 88)  # Legs equation\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (r, o))\n\n    return solutions[r]  # We return the number of rhinos\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table can have 3 people seated on each of its four sides (3*4=12)\n    people_per_square_table = 12\n\n    # When 2 tables are put together along one side, they lose 2 seating positions \n    # (one at each end of the joined side), resulting in 10 new positions per table\n    people_per_joined_table = people_per_square_table - 2\n    \n    # For 8 tables, 7 sides are joined. The first and last table do not lose seating on the unjoined side\n    total_joined_sides = 8 - 1\n    \n    # Calculate the total number of people that can be seated\n    total_people = (people_per_joined_table * total_joined_sides) + (2 * people_per_square_table)\n\n    return total_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each person's marbles\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(xavier, 3 * andrew)  # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)  # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier\n\n    # Solve the system of equations for the unknowns\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # Return the sum of Jeffery's and Boris's marbles\n    return solutions[jeffery] + solutions[boris]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    ans = 9786 // 7\n    return ans\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits_per_page = 1\n    total_digits = 339\n    pages = 0\n    while total_digits > 0:\n        pages_end = 10**digits_per_page - 1\n        pages_start = 10**(digits_per_page - 1)\n        pages_in_digit = pages_end - pages_start + 1\n        if total_digits >= pages_in_digit * digits_per_page:\n            total_digits -= pages_in_digit * digits_per_page\n            pages += pages_in_digit\n        else:\n            pages += total_digits // digits_per_page\n            break\n        digits_per_page += 1\n    return pages\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def count_factors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef solution():\n    ans = 0\n    factor_count = 15\n    for i in range(15, 1000000, 15):  # Assuming we don't know the upper limit, set to 1 million for practical computation\n        if count_factors(i) == factor_count:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # ones digit pattern for powers of 32 (which ends in 2): 2, 4, 8, 6 repeating\n    ones_32 = [2, 4, 8, 6]\n    # ones digit pattern for powers of 22 (which ends in 2): 2, 4, 8, 6 repeating\n    ones_22 = [2, 4, 8, 6]\n\n    # The pattern repeats every 4 powers. \n    # To find the ones digit of 32^33, we need to find the position in the repeating pattern\n    ones_digit_32 = ones_32[(33 - 1) % 4]  # Minus one because we start counting from zero\n\n    # To find the ones digit of 22^29, we need to find the position in the repeating pattern\n    ones_digit_22 = ones_22[(29 - 1) % 4]  # Minus one because we start counting from zero\n\n    # Find the ones digit of the final result\n    ones_digit = (ones_digit_32 - ones_digit_22) % 10  # mod 10 to just keep the ones digit\n    \n    return ones_digit\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):  # A is a 2-digit number\n        for B in range(1000, 10000):  # B is a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_difference = max(max_difference, B - A)\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "def solution():\n    from math import comb\n    total_players = 12\n    players_needed = 6\n    ans = comb(total_players, players_needed)\n    return ans\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original apples to oranges ratio\n    equation1 = Eq(apples, 5/7 * oranges)\n\n    # After buying 12 more oranges\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    for s in range(1, 100):  # s is the number of layers of students\n        for t in range(1, s):  # t is the number of layers of teachers\n            # Students are in layers s, s-2, s-4, ..., 1 or 2\n            # Teachers are in layers s-1, s-3, ..., 2 or 3\n            # Total students = s^2 + (s-2)^2 + (s-4)^2 + ...\n            # Total teachers = (s-1)^2 + (s-3)^2 + ...\n            # Sum of squares of the first n odd numbers is n * (2n-1) * (2n+1) / 3\n            # Sum of squares of the first n even numbers is n / 2 * (n + 1) * (2n + 1)\n            \n            total_students = sum(i**2 for i in range(s, 0, -2))\n            total_teachers = sum(i**2 for i in range(s-1, 0, -2))\n            diff = total_students - total_teachers\n            \n            # Check if difference matches and the layers correctly alternate between students and teachers\n            if diff == 52 and s - t == 1:\n                total_people = total_students + total_teachers\n                return total_people\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # We have the equation 8 * 80 * 100 = 8^2 * x\n    # We are looking for the value of x.\n    # We can rewrite 80 as 8 * 10 and 100 as 10^2 to see the pattern.\n    # So, the equation becomes 8 * (8 * 10) * (10^2) = 8^2 * x\n    # We then cancel out 8^2 from both sides, which gives us 10 * 10^2 = x\n    \n    x = 10 * 10**2\n    return x\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Define the variables\n    x = Symbol('x')\n    y = Symbol('y')\n    z = Symbol('z')\n\n    # Given fraction\n    fraction = 2014 / 37 - 54  # The fraction part after subtracting 54\n\n    # Equation based on the given complex fraction format\n    equation = 1 / (x + 1 / (y + 1 / z)) - fraction\n\n    # Find a solution to the equation\n    solutions = solve(equation)\n\n    # Since we are looking for integer solutions and the variables are distinct, \n    # we manually check for combinations where x, y, and z are distinct integers.\n    for sol in solutions:\n        if all(isinstance(term, int) and sol.count(term) == 1 for term in sol):\n            return sum(sol)\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    count = 30\n    finish_at = 10\n    start_from = (finish_at - (count % 12)) % 12\n    start_from = 12 if start_from == 0 else start_from\n\n    return start_from\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    ans = 200 + 198 + 196 + 194 + 24\n    return ans\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    people = 9\n    amount_per_person = jackpot / people\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation representing the remaining oil in the big bucket\n    big_remaining = 89 - x\n\n    # Equation representing the remaining oil in the small bucket\n    small_remaining = 45 - x\n\n    # The big bucket is left with 12 times as much as the small one\n    equation = Eq(big_remaining, 12 * small_remaining)\n\n    # Solve the equation for x\n    sold_amount = solve(equation, x)\n\n    # Return the amount of oil sold from each bucket\n    return sold_amount[0]\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Number of aliens including himself\n    aliens = 1 + 5\n\n    # Cost of one pack of shoes (5 shoes in a pack)\n    shoes_pack_cost = 78\n\n    # Cost of one pair of socks (2 socks in a pair)\n    socks_pair_cost = 12\n\n    # Each alien needs 5 shoes and 5 socks (which is 2.5 pairs since 1 pair = 2 socks)\n    total_shoes_cost = aliens * shoes_pack_cost\n    total_socks_cost = aliens * 2.5 * socks_pair_cost\n\n    # Total cost\n    total_cost = total_shoes_cost + total_socks_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for num in range(100, 1000):  # smallest three-digit number is 100\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    b = 31 - 26\n    c = 31 - 20\n    a = 31 - b\n    return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Convert total time to hours (since our speed is in km/h)\n    total_time_in_hours = 54 / 60\n\n    # Let d be the distance from her home to the park in kilometers\n    # Since time = distance / speed, we have:\n    # Time from home to park at 5 km/h: t1 = d / 5\n    # Time from park to home at 4 km/h: t2 = d / 4\n    # t1 + t2 = total_time_in_hours\n    # d/5 + d/4 = total_time_in_hours\n    # Solve for d:\n    d = (total_time_in_hours * 20) / 9\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    n = 30\n    sum_numbers = (n * (n + 1)) // 2\n    return sum_numbers\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n    equation = Eq((3/4) * rennie, (2/3) * (joleen))\n\n    # Joleen baked 5 more pies than Rennie\n    total_pies = Eq(joleen, rennie + 5)\n\n    solutions = solve((equation, total_pies), (joleen, rennie))\n\n    total = solutions[joleen] + solutions[rennie]\n    return total\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    difference = 8\n\n    girls = (total_pupils + difference) // 2\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both = symbols('both')\n\n    apples_like = 3 * both\n    bananas_like = 5 * both\n    total_students = 35\n\n    equation = Eq(apples_like + bananas_like - both, total_students)\n\n    both_value = solve(equation, both)\n\n    return both_value[0]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let n be the time Nancy takes to complete the job by herself\n    # let l be the time Lee takes to complete the job by herself\n    n, l = symbols('n l')\n\n    # Nancy and Lee together finish the job in 10 hours\n    # Their combined work rate is 1 job per 10 hours\n    eq1 = Eq((1/n + 1/l), 1/10)\n\n    # Nancy works for 20 hours, Lee works for 6 hours and they finish the job\n    # Nancy's work plus Lee's work equal 1 job\n    eq2 = Eq(20/n + 6/l, 1)\n\n    # We solve the equations for n and l\n    solutions = solve((eq1, eq2), (n, l))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    oranges_for_pie_kg = 550 / 1000\n    oranges_for_juice_kg = 1050 / 1000\n\n    oranges_left_kg = total_oranges_kg - (oranges_for_pie_kg + oranges_for_juice_kg)\n\n    return oranges_left_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day = 15\n    common_difference = 3\n    num_days = 5\n\n    total_chairs = sum(first_day + common_difference * day for day in range(num_days))\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def count_2s_at_digit(number, digit):\n    power_of_10 = 10 ** digit\n    next_power_of_10 = power_of_10 * 10\n    right = number % power_of_10\n\n    round_down = number - number % next_power_of_10\n    round_up = round_down + next_power_of_10\n\n    digit_value = (number // power_of_10) % 10\n\n    if digit_value < 2:\n        return round_down // 10\n    elif digit_value == 2:\n        return round_down // 10 + right + 1\n    else:\n        return round_up // 10\n\ndef solution():\n    number = 415\n    count = 0\n    length = len(str(number))\n    \n    for digit in range(length):\n        count += count_2s_at_digit(number, digit)\n        \n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    # Convert £3.00 to pence\n    total_pence = 300\n    part_pence = 15\n    \n    # Calculate the percentage\n    percentage = (part_pence / total_pence) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # John proposed that 60x + 6y + 25 = 200 + 10x + y\n    # This simplifies to 50x + 5y = 175, or 10x + y = 35 (John mistakenly stated 45)\n    # We need the simplest form to compare with 10x + y.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(10*x + y + 25, 6*(10*x + y))\n\n    # Solving the equation for x and y.\n    solutions = solve(equation, (x, y))\n\n    # John's hypothesis to be checked whether (10x + y) equals 45.\n    A = 10 * solutions[x] + solutions[y]\n    is_john_right = (A == 45)\n\n    # If John is not right, return the correct value of A,\n    # otherwise confirm that John is right.\n    return A if not is_john_right else 'John is right'\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = ((-3, 4), (-1, 13))\n    num_children = solve_congruence(*congruences)\n\n    return num_children[0]\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return round(total_spent, 2)\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    # set a total variable to accumulate the sum\n    total = 0\n    # set sign to 1 for positive and -1 for negative\n    sign = 1\n    # loop through the sequence by decreasing the first digit and increasing the second digit\n    for i in range(9, 0, -1):\n        total += sign * (int(str(i) + str(8 - i)))\n        # alternate the sign for the next iteration\n        sign *= -1\n    # include the last term (+10)\n    total += 10\n    return total\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = 3 - 10\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    # Convert £1 to pence\n    total_paid = 100  # £1 is 100 pence\n\n    # Calculate the total cost of the pencil sharpeners\n    cost_per_sharpener = 14  # Each sharpener costs 14 pence\n    total_cost = 7 * cost_per_sharpener  # Total cost for 7 sharpeners\n\n    # Calculate the change received\n    change = total_paid - total_cost  # Change is what's left after cost is subtracted from total paid\n\n    return change\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Mary's current age + son's current age = 45\n    # In 5 years' time:\n    # (Mary's current age + 5) + (son's current age + 5) = 45 + 5 + 5\n    # Because both will be 5 years older\n    sum_of_ages_in_5_years = 45 + 5 + 5\n    \n    return sum_of_ages_in_5_years\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Equation for the age difference\n    age_difference = Eq(garrett - sebastian, 24)\n    # Equation for the age in 10 years\n    ages_in_10_years = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((age_difference, ages_in_10_years), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let the number of boys be b and the number of girls be g\n    b, g = symbols('b g')\n    \n    # equation representing the difference in the number of boys and girls\n    eq_difference = Eq(g - b, 65)\n    \n    # equation representing the remaining number of boys and girls after some left\n    eq_remaining = Eq(b - (2/5)*b, g - (3/7)*g)\n    \n    # solve the system of equations\n    solutions = solve((eq_difference, eq_remaining), (b, g))\n    \n    # calculate the total number of students remained in the hall\n    remaining_boys = solutions[b] - (2/5)*solutions[b]\n    remaining_girls = solutions[g] - (3/7)*solutions[g]\n    total_remaining = remaining_boys + remaining_girls\n\n    return total_remaining\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_percentage = 6\n    sales_tax_paid = 90\n\n    price_of_sofa = (sales_tax_paid * 100) / sales_tax_percentage\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n    number_of_people = 4\n    number_of_days = 7\n\n    total_travel_cost = travel_cost_per_person * number_of_people\n    total_hotel_cost = hotel_cost_per_day_per_person * number_of_days * number_of_people\n    total_spending_money = spending_money_per_person * number_of_people\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # In the worst case scenario, Benny may take out 2 blue and 2 yellow marbles\n    # before he can guarantee to get 3 marbles of the same color\n    # After taking 2 blue and 2 yellow, the next marble he takes out must either give him\n    # 3 blue or 3 yellow marbles.\n    worst_case = 2 + 2 + 1\n    return worst_case\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    nth_term = 20\n    \n    # Formula for the nth term in an arithmetic sequence: \n    # nth_term = first_term + (n - 1) * common_difference\n    \n    term = first_term + (nth_term - 1) * common_difference\n    return term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial as fact\n\n    # Treat each group of books as a unit first.\n    # We have 4 units to arrange: M, C, P, and B (1 Math unit, 1 Chemistry unit,\n    # 1 Physics unit, 1 Biology book).\n    units = 4 \n\n    # Arrange these 4 units in 4! ways\n    units_arrangement = fact(units)\n\n    # Now arrange the individual books within their respective units.\n    # Math books can be arranged among themselves in 4! ways,\n    # Chemistry books in 3! ways, Physics books in 2! ways\n    # Biology book has only 1 way to be placed since it's a single book.\n    math_arrangement = fact(4)\n    chemistry_arrangement = fact(3)\n    physics_arrangement = fact(2)\n    biology_arrangement = 1\n\n    # Multiply the arrangements of the units and the arrangements within the units\n    total_arrangements = units_arrangement * math_arrangement * chemistry_arrangement * physics_arrangement * biology_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n\n    apples = oranges + 150\n    bananas = oranges + 50\n\n    equation = Eq(apples + bananas + oranges, 1400)\n\n    solutions = solve(equation, oranges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    return 70017007\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_m = 8850\n    m_to_km = 1000\n    height_km = height_m / m_to_km\n    \n    return height_km\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('ORANGES')\n    total_vowels = len('AOE')\n\n    # Total number of arrangements without any restrictions\n    total_arrangements = factorial(total_letters)\n    \n    # Number of arrangements where vowels are together treated as a single letter\n    vowels_together = factorial(total_vowels) * factorial(total_letters - total_vowels + 1)\n    \n    # Subtract arrangements where vowels are together from total arrangements\n    ans = total_arrangements - vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene_start, melvin_start, david_start = symbols('eugene_start melvin_start david_start')\n\n    # Eugene gives Melvin twice as many stickers as Melvin had\n    eugene_after_first = eugene_start - 2 * melvin_start\n    melvin_after_first = 3 * melvin_start\n\n    # Melvin gives David as many stickers as David had\n    melvin_after_second = melvin_after_first - david_start\n    david_after_second = 2 * david_start\n\n    # David gives Eugene as many stickers as Eugene had left\n    david_after_third = david_after_second - eugene_after_first\n    eugene_final = 2 * eugene_after_first\n\n    # Ratio of Eugene's to Melvin's to David's stickers in the end is 46:12:7\n    ratio_eq = Eq(eugene_final / melvin_after_second, 46 / 12)\n    total_stickers_eq = Eq(eugene_start + melvin_start + david_start, 260)\n    david_ratio_eq = Eq(melvin_after_second / david_after_third, 12 / 7)\n\n    solutions = solve((ratio_eq, total_stickers_eq, david_ratio_eq), (eugene_start, melvin_start, david_start))\n\n    return solutions[eugene_start]\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    ways_category_1 = 30\n    ways_category_2 = 40\n    ways_category_3 = 45\n\n    total_ways = ways_category_1 * ways_category_2 * ways_category_3\n\n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import primes, isprime\n\n    for a in primes(1, 100):\n        b = a + 31 - 26\n        c = a + 31 - 20\n        if isprime(b) and isprime(c):\n            if a != b and a != c and b != c:\n                return a * b * c\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    perimeter = 12\n    count = 0\n\n    # Iterate through all pairs of integer lengths for the two equal sides\n    for equal_side in range(1, perimeter // 2):\n        # Calculate the length of the base\n        base = perimeter - 2 * equal_side\n\n        # The two conditions for an isosceles triangle are that the base\n        # must be an integer (which it is, by construction), and that\n        # the length of the base must be less than 2 times the other side\n        # (triangle inequality theorem). If both are true, it is a valid isosceles triangle.\n        if base > 0 and equal_side >= base:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # The game is a variant of the classic Nim game.\n    # The winning strategy for this game is to leave an equal number of matches in both piles after your turn.\n    # Eddie can immediately take 11 matches from pile A (35-11 = 24).\n    # This leaves both piles with 24 matches, giving Wei'er no choice but to break the balance.\n    # No matter what Wei'er does, Eddie can then mimic Wei'er's move on the opposite pile, maintaining balance\n    # until Eddie takes the last match and wins.\n    \n    # If the bitwise XOR of the number of matches is 0, then the second player (Wei'er) has a winning strategy.\n    # Otherwise, if the XOR is not 0, the first player (Eddie) has a winning strategy.\n    pile_A = 35\n    pile_B = 24\n    xor_result = pile_A ^ pile_B\n\n    if xor_result == 0:\n        winner = \"Wei'er\"\n    else:\n        winner = \"Eddie\"\n        strategy = f\"Eddie should take {pile_A - pile_B} matches from pile A.\"\n\n    return winner, (strategy if winner == \"Eddie\" else \"No specific strategy\")\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # Since the table is circular, fix one person and arrange the rest.\n    # This eliminates the duplicates from rotations.\n    num_people = 6\n    num_seats = 8\n    \n    # Number of ways to choose which seats will be occupied by 6 people\n    choose_seats = factorial(num_seats) // factorial(num_seats - num_people)\n    \n    # Number of ways to arrange 6 people on 6 seats (first person fixed)\n    arrange_people = factorial(num_people - 1)\n    \n    # Multiply the number of ways to choose the seats and to arrange the people\n    ans = choose_seats * arrange_people\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let b be the number of boys and g be the number of girls initially\n    # b = g (because there was an equal number of boys and girls)\n    # After 12 boys came in and 8 girls left: (b + 12) = 2 * (g - 8)\n    # We solve for b and g\n    \n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')\n    initial_condition = Eq(b, g)\n    final_condition = Eq(b + 12, 2 * (g - 8))\n\n    solutions = solve((initial_condition, final_condition), (b, g))\n    initial_total_students = solutions[b] + solutions[g]\n\n    return initial_total_students\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    return sum(range(31, 42))\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([(80 - i) - (78 - i) for i in range(0, 80 - 56 + 1, 2)])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    first_distance = 280  # the first 280 m\n    middle_distance = 400  # the middle 400 m\n    sprint_distance = 800 - first_distance - middle_distance  # the rest of the race\n\n    first_speed = 7  # 7 m/s\n    middle_speed = 5  # 5 m/s\n    sprint_speed = 8  # 8 m/s\n\n    first_time = first_distance / first_speed\n    middle_time = middle_distance / middle_speed\n    sprint_time = sprint_distance / sprint_speed\n\n    total_time = first_time + middle_time + sprint_time\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    return 21 * (2/7)\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7] # three possible digits for each place\n    # Three places for the three-digit number (hundreds, tens, ones)\n    # Each digit can be used once, so the count is just permutations of the three digits\n    num_hundreds_place = len(digits)\n    num_tens_place = len(digits) - 1\n    num_ones_place = len(digits) - 2\n\n    total_numbers = num_hundreds_place * num_tens_place * num_ones_place\n\n    return total_numbers\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 25))\n    for prime in primes:\n        if (25 - prime) in primes:\n            return prime * (25 - prime)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    return gcd(15, 45)\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_hour, start_minute = 6, 52\n    end_hour, end_minute = 8, 24\n    \n    start_time_minutes = start_hour * 60 + start_minute\n    end_time_minutes = end_hour * 60 + end_minute\n    \n    time_spent_minutes = end_time_minutes - start_time_minutes\n    \n    return time_spent_minutes\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12*12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number of chocolate, vanilla, and blueberry cupcakes as variables\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9), 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Find the number of chocolate cupcakes Sally had originally\n    original_chocolate = solutions[chocolate]\n    \n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = original_chocolate * (1/6)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_posts = 2\n    \n    # Since there are lamp posts on both ends, we would need to calculate the distance for 50 - 1 intervals.\n    length_of_road = (num_lamp_posts - 1) * distance_between_posts\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    # Using the Pigeonhole Principle, to ensure the maximum number of peaches received by one student\n    # is the least, every other student should get one less than the possible equal share before assigning\n    # the rest to one student.\n    # peaches_per_student = total_peaches // total_students => This gives the minimum base number of peaches per student\n    # Then, one student gets the maximum by adding the remaining peaches to their share.\n    \n    peaches_per_student = total_peaches // total_students\n    remaining_peaches = total_peaches % total_students\n    \n    most_peaches = peaches_per_student + (1 if remaining_peaches > 0 else 0)\n\n    return most_peaches\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2 / 9) * 36\n    return result\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 7), (3, 9), (3, 4)]\n\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the smallest number be x.\n    # Then the numbers are x, x+1, x+2, x+3, x+4, x+5, x+6.\n    # The sum of these seven numbers is 7x+(1+2+3+4+5+6) = 7x+21.\n    # According to the problem, 7x+21 = 140.\n    # Now, we can solve for x.\n    x = (140 - 21) // 7  # Use integer division because x must be a whole number.\n    return x\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # Total ways without any restrictions with Claire's seat fixed\n    face_to_face_ways = 1 * 1 * 1  # Ways where Claire and Tony sit face to face\n    ans = total_ways - face_to_face_ways  # Subtracting the face to face scenario\n    return ans\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Calculate the rate of production for each person per day\n    tables_per_day_frank = 180 / 10\n    tables_per_day_ryan = 180 / 15\n\n    # Calculate the difference in tables produced per day\n    difference = tables_per_day_frank - tables_per_day_ryan\n    return int(difference)\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_cards_cost = 10 * 45  # Total cost of postcards in pence\n    stamps_cost = 10 * 27  # Total cost of stamps in pence\n    total_cost = post_cards_cost + stamps_cost  # Total cost in pence\n    total_cost_in_pounds = total_cost / 100  # Total cost in pounds (£)\n    amount_paid = 10  # Amount paid in pounds (£)\n\n    change = amount_paid - total_cost_in_pounds  # Change received in pounds (£)\n    \n    return change\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    return round(7.4 - 0.05, 2)\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of questions she marked before she left the school.\n    # Let y be the number of minutes she has for marking.\n    x, y = symbols('x y')\n\n    # If she had marked 4 questions in a minute, she would take x/4 minutes.\n    # She would leave the school 5 minutes late, so she marked for y + 5 minutes.\n    equation1 = Eq(x / 4, y + 5)\n\n    # If she had marked 6 questions in a minute, she would take x/6 minutes.\n    # She would leave the school 5 minutes early, so she marked for y - 5 minutes.\n    equation2 = Eq(x / 6, y - 5)\n\n    # Solve the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money = 165  # in pounds\n    price_per_cake = 0.75  # in pounds\n\n    num_cakes_sold = total_money / price_per_cake\n\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Iterate through possible consecutive 2-digit numbers\n    for i in range(10, 95):\n        # Define the five consecutive numbers based on the current iteration\n        num1, num2, num3, num4, num5 = i, i+1, i+2, i+3, i+4\n        \n        # Check if any sum of three consecutive numbers is divisible by 37 and 60\n        sums_of_three = [num1+num2+num3, num2+num3+num4, num3+num4+num5]\n        if any(s % 37 == 0 for s in sums_of_three) and any(s % 60 == 0 for s in sums_of_three):\n            # Return the largest number among the five when the condition is met\n            return num5\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    incorrect_deduction = 2\n    total_marks = 79\n\n    # Let x be the number of correct answers and (total_questions - x) the number of incorrect answers\n    # The mark calculation: correct_marks * x - incorrect_deduction * (total_questions - x) = total_marks\n    # Rearrange the equation for x\n    x = (total_marks + incorrect_deduction * total_questions) / (correct_marks + incorrect_deduction)\n\n    return int(x)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_on_restaurant = total_money * (3/7)\n    remaining_after_restaurant = total_money - spent_on_restaurant\n    spent_on_fees = remaining_after_restaurant * (2/9)\n    remaining_after_fees = remaining_after_restaurant - spent_on_fees\n    \n    return remaining_after_fees\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    total_candies = 24 + 10\n    each_should_have = total_candies // 2\n    amy_should_give = 24 - each_should_have\n    \n    return amy_should_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution('x', 'y')"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # The time between chimes is the same regardless of the time.\n    # There are 2 intervals within the 6 seconds for 3 chimes.\n    # So, the time for one interval is:\n    one_interval_time = 6 / 2\n    \n    # For 6 chimes, there are 5 intervals.\n    # So, the time for 6 chimes is:\n    total_time_for_6_chimes = one_interval_time * 5\n    \n    return total_time_for_6_chimes\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    length_in_meters = 3.2\n    length_in_cm = 30\n\n    length_in_meters_to_cm = length_in_meters * 100\n    difference_in_cm = length_in_meters_to_cm - length_in_cm\n\n    return difference_in_cm\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    sum_of_squares = 3 * 10 * (10 + 1) * (2 * 10 + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n    q_days = 8\n    q_hours_per_day = 10\n\n    p_total_hours = p_days * p_hours_per_day\n    q_total_hours = q_days * q_hours_per_day\n\n    p_work_rate = 1 / p_total_hours\n    q_work_rate = 1 / q_total_hours\n\n    combined_work_rate = p_work_rate + q_work_rate\n    total_hours_needed = 1 / combined_work_rate\n    total_days_needed = total_hours_needed / 8\n\n    return -(-total_days_needed // 1)  # Using ceiling division to get whole days\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n\n    for page in range(1, 41):\n        total_digits += len(str(page))\n\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56\n    total_kgs = 5\n    total_cost_pence = cost_per_kg * total_kgs\n    money_paid_pence = 10 * 100  # Convert pounds to pence\n    change_pence = money_paid_pence - total_cost_pence\n    change_pounds = change_pence / 100  # Convert pence back to pounds\n    return change_pounds\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    prime_factors = factorint(120)\n    factors = 1\n\n    for exponent in prime_factors.values():\n        factors *= (exponent + 1)\n\n    return factors\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "from math import sqrt\n\ndef solution():\n    n = 180\n    smallest_difference = float('inf')  # Initialize to infinity\n\n    # Check all factors of 180\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            factor_pair_difference = abs(n // i - i)\n            smallest_difference = min(smallest_difference, factor_pair_difference)\n            \n    return smallest_difference\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 15):  # 5 is not a multiple of 3, start with 6\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_fruit_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n    average_weight = total_fruit_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let the time taken by Max to cover the distance be t minutes.\n    # Therefore, the time taken by Luca is t + 10 minutes.\n    # Their speeds are in the ratio 2:3, hence the time taken will be in the ratio 3:2.\n    # If Max takes t minutes, then Luca takes (3/2) * t minutes.\n    # According to the problem statement, (3/2) * t = t + 10\n    # Solving for t, we get t * (3/2 - 1) = 10\n    t = 10 / (3/2 - 1)\n\n    # Now, if Luca walks at double his speed, his new speed ratio compared to Max is 4:3.\n    # Hence, the time taken would be in the ratio 3:4.\n    # Time taken by Luca at double speed is (3/4) * t\n    time_by_luca_double_speed = (3/4) * t\n\n    return time_by_luca_double_speed\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    forty_two_thousand_and_eight = 42008\n    one_million = 1000000\n    ans = one_million - forty_two_thousand_and_eight\n    return ans\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Define the marks and the score and calculate the assumed number of wrong answers\n    total_questions = 40\n    mark_for_correct = 2\n    mark_for_wrong = -1\n    tom_score = 71\n    assumed_correct_answers = 31\n    # Tom's assumed total marks for correct answers only\n    assumed_total_score = total_questions * mark_for_correct\n    # Tom's assumed difference to the actual score\n    assumed_difference = assumed_total_score - tom_score\n    # Calculate Tom's assumed number of wrong answers\n    assumed_wrong_answers = assumed_difference // (mark_for_correct - abs(mark_for_wrong))\n\n    # Calculate the actual number of correct and wrong answers based on his score\n    correct_answers = (tom_score + (mark_for_wrong * total_questions)) / (mark_for_correct - mark_for_wrong)\n    wrong_answers = total_questions - correct_answers\n\n    # Tom's mistake was not accounting for the loss from a wrong answer when subtracting from the total possible score\n    return int(wrong_answers)\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # let the number of pens and pencils originally bought be x\n    # after giving away 5 pencils, she has x-5 pencils left\n    # the number of pens is now twice the number of pencils left, so pens is 2*(x-5)\n    # she then buys an additional 18 pens, so the total pens is 2*(x-5) + 18\n    # but we know she had x pens to start with, so we set up the equation x = 2*(x-5) + 18\n    # solve for x\n\n    # Rearrange the equation: x = 2x - 10 + 18 => x = 2x + 8 => x = 8\n    # Therefore, originally she had 8 pens and 8 pencils\n    # After giving away 5 pencils and buying 18 more pens, she has 8 + 18 = 26 pens in the end\n    x = 8\n    pens_in_the_end = x + 18\n    return pens_in_the_end\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Jogging part\n    jogging_time_hours = 1  # from 6:30 AM to 7:30 AM is 1 hour\n    jogging_speed_mph = 6.5\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Walking part\n    walking_time_hours = 2  # from 7:30 AM to 9:30 AM is 2 hours\n    walking_speed_mph = 4.5\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def count_threes(n):\n    count = 0\n    for i in range(n + 1):\n        count += str(i).count('3')\n    return count\n\ndef solution():\n    return count_threes(318)\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 52 cards in a deck divided evenly among 4 different patterns. \n    # So there are 4 cards labelled \"A\", one for each pattern.\n    \n    # According to the Pigeonhole Principle, to ensure that we have at least \n    # one \"A\" card, we need to consider the worst-case scenario where we draw \n    # the maximum number of cards without getting an \"A\" from each pattern. \n    \n    # Since there are 4 patterns, the maximum number of cards we can draw \n    # without getting an \"A\" is the number of non-A cards from each pattern. \n    # Each pattern has 13 - 1 = 12 non-A cards.\n    \n    # If we draw all non-A cards from each pattern, we have drawn 4 * 12 cards\n    # without seeing an \"A\". The very next card we draw, in the worst case, \n    # must be an \"A\" (since we have drawn all non-A cards already).\n    \n    cards_without_A = 12\n    patterns = 4\n\n    # Drawing all non-A cards from each pattern\n    total_draws_without_A = cards_without_A * patterns\n    \n    # The next card draw must be an \"A\"\n    total_draws_to_get_A = total_draws_without_A + 1\n    \n    return total_draws_to_get_A\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temperature_midnight_thursday = -8\n    temperature_midday_friday = 13\n\n    overall_temperature_change = temperature_midday_friday - temperature_midnight_thursday\n    \n    return overall_temperature_change\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    number_of_piles = 10\n    books_per_pile = total_books // number_of_piles\n    return books_per_pile\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_lengths = 45 * 2\n    remaining_wire = initial_length - cut_lengths\n    length_of_each_piece = 40\n\n    number_of_40cm_pieces = remaining_wire // length_of_each_piece\n\n    return number_of_40cm_pieces\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    departure_time = datetime.strptime('10:35', '%H:%M')\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digits = [6, 7, 8]\n    ans = len(digits) ** 3\n    return ans\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zero = 0\n    number = 1\n    while count_zero < 100:\n        number_str = str(number)\n        count_zero += number_str.count('0')\n        if count_zero >= 100:\n            break\n        number += 1\n    ans = number\n    return ans\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drunk = 9\n    \n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drunk\n    \n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n    \n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_who_play_tennis = 1 / 10\n    fraction_of_girls_who_are_left_handed = 25 / 100\n\n    total_left_handed = left_handed_tennis_players / fraction_of_left_handed_who_play_tennis\n    total_pupils = total_left_handed / fraction_of_girls_who_are_left_handed\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_of_butter = 80 / 20\n    grams_of_butter_needed = 100 / cookies_per_gram_of_butter\n    return grams_of_butter_needed\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # meters per minute\n    speed_slow = 120  # meters per minute\n    time_fast = 6     # minutes\n    time_slow = 8     # minutes\n    \n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n    \n    total_distance = distance_fast + distance_slow\n    \n    return total_distance\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for Bud, Pip, and Tom\n    Bud, Pip, Tom = symbols('Bud Pip Tom')\n\n    # Equations based on the problem\n    equation1 = Eq(Bud, 3 * Pip)\n    equation2 = Eq(Tom, 2 * Bud)\n    equation3 = Eq(Bud + Pip + Tom, 50)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (Bud, Pip, Tom))\n\n    return solutions[Tom]\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Given the sum of the arithmetic sequence\n    total_sum = 2012\n    # Since these are consecutive numbers, n = 8\n    n = 8\n    \n    # Using the formula for the sum of an arithmetic sequence: S = n/2(a + l)\n    # where S is the sum, n is the number of terms, a is the first term, and l is the last term.\n    # In this case, we are looking for l, given that S = total_sum and n = 8\n    \n    # Rearrange the formula to find the last term (l):\n    # l = (2S/n) - a + 1, the +1 comes from the fact that these are consecutive integers\n    \n    # Finding the middle of the sequence which is average of the first and last term (a + l)/2\n    middle = total_sum / n\n    \n    # As numbers are consecutive, middle is midpoint, hence l = middle + 3.5 as there are 7 differences of 1 before the last term\n    largest_number = middle + (n - 1)/2\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    return (42 / 35) * 100\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declaring variables for the number of students in class A and B\n    A, B = symbols('A B')\n\n    # Equation representing the initial scenario\n    initial_ratio = Eq(A, (5/7) * B)\n    \n    # Equation after transferring 3 students\n    after_transfer = Eq(A + 3, (4/5) * (B - 3))\n\n    # Solving the simultaneous equations\n    solutions = solve((initial_ratio, after_transfer), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    # Sachin's rate of cleaning (flats per hour)\n    sachin_rate = 1 / 3\n    # Peter's rate of cleaning (flats per hour)\n    peter_rate = 1 / 6\n\n    # Combined rate when they work together (flats per hour)\n    combined_rate = sachin_rate + peter_rate\n\n    # Time taken to clean the flat together (hours per flat)\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the number of boys be b, and the number of boys in one side of the square be s.\n    # Therefore, b = s^2\n    # When 17 girls join, the total becomes (s+1)^2 = b + 17\n    # We are looking for an integer solution for this equation\n    b = 0\n    s = 1\n    while True:\n        if (s + 1) ** 2 - s ** 2 == 17:\n            b = s ** 2\n            break\n        s += 1\n    \n    return b\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance as 'd' and the original speed as 's'.\n    d, s = symbols('d s')\n\n    # According to the problem, traveling at speed 's', Ivy takes 6 hours (from 1 pm to 7 pm) to cover the distance.\n    equation1 = Eq(d, 6 * s)\n    \n    # She wants to arrive 1 hour earlier at 6 pm, which takes 5 hours. To achieve this, she will need to travel 2 extra km per hour, so her speed will become 's + 2'.\n    equation2 = Eq(d, 5 * (s + 2))\n\n    # Now we can solve the equations to find 'd'.\n    solutions = solve((equation1, equation2), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # Since each swap gives her 1 new bottle for every 3 empty bottles,\n    # After 5 swaps, she should get 5 new bottles if she swapped 5 * 3 empty bottles.\n    # But she got 4 new bottles instead, implying she started with an extra bottle.\n    \n    # Let's set up an equation based on the above logic.\n    # Initially, Faye has x bottles. Each time she swaps 3, she gets 1 new bottle.\n    # So after 5 swaps, she should end up with x - 5*3 + 5 bottles (since she makes 5 swaps getting 1 bottle each swap).\n    # But she actually ends up with x - 5*3 + 4 bottles (as she actually received 4 bottles).\n    # The extra bottle means x - 5*3 + 4 = x, solving for x gives us the initial number of bottles.\n\n    # Set up the equation x - 5*3 + 4 = x\n    # Subtract x from both side: - 5*3 + 4 = 0\n    # Now solve for x \n    x = 5 * 3 - 4\n\n    return x  # This is the initial number of bottles Faye had.\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_per_second = 125\n    total_millilitres = total_litres * 1000\n    time_seconds = total_millilitres / flow_rate_per_second\n\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits_printed = 0\n\n    while digits_printed < 237:\n        pages += 1\n        digits_printed += len(str(pages))\n\n    if digits_printed == 237:\n        return pages\n    else:\n        return pages - 1\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, d = symbols('a d')\n\n    # The 9th term is 18 larger than the 15th term\n    equation1 = Eq(a + 8*d, a + 14*d + 18)\n\n    # The sum of the 20th term and the 12th term is 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Calculate the 32nd term\n    a32 = solutions[a] + 31*solutions[d]\n\n    return a32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total_savings_increase = (1468 - 1462)\n    single_day_savings_mistake = 1268 - 1082\n    total_savings_mistake = single_day_savings_mistake - incorrect_total_savings_increase\n\n    days = total_savings_mistake // incorrect_total_savings_increase\n\n    return days\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Time taken to cut the rope into 4 pieces of equal length\n    time_for_4_pieces = 12  # minutes\n    \n    # Number of cuts needed to make 4 pieces\n    # Since Mr Tung starts with 1 whole rope, he needs to make 3 cuts to get 4 pieces\n    cuts_for_4_pieces = 3\n    \n    # Number of cuts needed to make 12 pieces\n    # Mr Tung needs to make 11 cuts to get 12 pieces\n    cuts_for_12_pieces = 11\n    \n    # Calculate the time needed for each cut\n    time_per_cut = time_for_4_pieces / cuts_for_4_pieces\n    \n    # Calculate the time needed to make 12 pieces\n    time_for_12_pieces = time_per_cut * cuts_for_12_pieces\n    \n    return time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80  # the year in which Lord Ownlynose was born\n    oak_tree_age_in_2011 = 2011 - birth_year  # calculate the oak tree's age in 2011\n\n    return oak_tree_age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 25  # 10th term\n    common_difference = 28 - 25  # difference between terms\n    n = 10  # term position\n\n    # Calculate the first term using the formula for nth term of arithmetic sequence\n    first_term = nth_term - (n - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Set up the equation according to the problem\n    equation = Eq(((8*x + 8) / 2) - 3*(x + 6), 4*x + 4 - 3*x + 18)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # The mistake in Chewy's working is the simplification after subtraction\n    # Correct answer:\n    correct_value = ((8*x + 8) / 2) - 3*(x + 6)\n\n    return correct_value.subs(x, solution[0])\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n\n    return red_flowers + purple_flowers\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    # 4 * (lily * marry * carol) = 2240\n    # We simplify the equation by dividing 2240 by 4\n    product_of_ages = 2240 // 4\n\n    # Prime factorization of product_of_ages\n    prime_factors = []\n    i = 2\n    while i * i <= product_of_ages:\n        if product_of_ages % i:\n            i += 1\n        else:\n            product_of_ages //= i\n            prime_factors.append(i)\n    if product_of_ages > 1:\n        prime_factors.append(product_of_ages)\n\n    # Since Carol is the oldest, we start by assigning the largest prime factor to Carol\n    # and then assign the other factors to Lily and Marry considering their age differences.\n    carol_age = max(prime_factors)\n    marry_age = carol_age // 2   # As Carol is 2 years older than Marry, we divide by 2 (the age difference)\n    lily_age = marry_age // 2    # As Marry is 1 year older than Lily, we divide by 2 (half the age difference)\n\n    # Check if the ages are sequential and the product matches the target\n    if (marry_age - lily_age) == 1 and (carol_age - marry_age) == 2 and (lily_age * marry_age * carol_age) == 2240//4:\n        return carol_age\n    else:\n        return \"No possible ages found\"\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    num = 38942\n    remainder = num % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since the marbles are identical, the number of ways to distribute them\n    # into two piles is just finding the number of partitions of 10,\n    # which is equivalent to finding the number of combinations for the first pile,\n    # since the second pile will have the remaining marbles.\n    # We can have 0 to 10 marbles in the first pile.\n    \n    # Number of ways = Number of non-negative integer solutions to x1 + x2 = 10,\n    # where 0 <= x1 <= 10 and x1 determines x2 completely.\n    \n    # It turns out this is just the number of ways to choose\n    # how many marbles to put into the first pile, which ranges from 0 to 10 (inclusive).\n    # So there are 10 + 1 = 11 different ways to do this.\n    \n    return 10 + 1  # Since we can have 0 marbles in one pile as well.\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    wood1 = 85 / 100  # converting cm to m\n    wood2 = 2         # already in m\n    wood3 = 147 / 100  # converting cm to m\n\n    total_length = wood1 + wood2 + wood3\n\n    return total_length\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Convert liters to quarts (1 liter = 1.056688 quarts)\n    coke_quarts = 2.5 * 1.056688\n    # Capacity of one cup in quarts\n    cup_capacity_quarts = 0.5\n    # Find out how many cups can be filled\n    num_cups = coke_quarts / cup_capacity_quarts\n    # Round to the nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Worst scenario: pick all but one of each color without getting 3 of the same color\n    max_picks = (5 - 1) + (9 - 1) + (4 - 1)\n    # Need to pick one more to ensure 3 of the same color\n    ans = max_picks + 1\n    return ans\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number_part = 2\n    fractional_part = 34 / 100\n    ans = whole_number_part + fractional_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    ant_legs = 6\n    spider_legs = 8\n    \n    max_ants = 0\n    for spiders in range(total_legs // spider_legs + 1):\n        ants = (total_legs - spiders * spider_legs) // ant_legs\n        if ants * ant_legs + spiders * spider_legs == total_legs:\n            max_ants = max(max_ants, ants)\n    \n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vivian, justin = symbols('vivian justin')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (vivian, justin))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_sent = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_sent - stamps_bought + stamps_given\n    \n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    ans = 7.5 * litres_to_millilitres\n    return ans\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((((x - 6) * 6) + 6) / 6, 6)\n    \n    answer = solve(equation, x)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    height_after_fourth_bounce = 36\n    height_after_third_bounce = height_after_fourth_bounce * 2\n    height_after_second_bounce = height_after_third_bounce / 3\n    height_after_first_bounce = height_after_second_bounce / 3\n    \n    original_height = height_after_first_bounce / 3\n    \n    return original_height\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = (2 * 9) + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent_amount = initial_amount / 2\n    remaining_amount = initial_amount - spent_amount\n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for i in range(30, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            return i\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(x + y, 11.63)       # The sum of the two numbers is 11.63\n    equation2 = Eq(x + 0.1 * y, 5.87)  # The erroneous sum after shifting the decimal\n\n    # Solve the equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Find the absolute difference between the two numbers, multiplied by 100\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    from itertools import permutations\n    \n    smallest_value = float('inf')\n    for digits in permutations('012345679'):\n        number_str = '8' + ''.join(digits)\n        number = int(number_str)\n        if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n            smallest_value = min(smallest_value, number)\n    \n    return smallest_value\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_song_price_pence = 99\n    total_songs = 12\n    whole_cd_price_pounds = 8.99\n    \n    total_price_individual_songs_pence = single_song_price_pence * total_songs\n    whole_cd_price_pence = whole_cd_price_pounds * 100  # Convert pounds to pence\n    \n    savings = total_price_individual_songs_pence - whole_cd_price_pence\n    \n    return savings / 100  # Convert savings back to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    num_trays = 40\n\n    total_eggs = eggs_per_tray * num_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n\n    for i in range(10, 100):\n        original_number = i\n        reversed_number = int(str(i)[::-1])\n        if original_number > reversed_number:\n            results.add(original_number - reversed_number)\n        else:\n            results.add(reversed_number - original_number)\n\n    ans = results\n    return ans\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return change\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = {1, 2, 3}\n    count = 0\n\n    for tens_place in digits:\n        for ones_place in digits:\n            if tens_place != ones_place:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = sorted(range(10))\n    num1 = int(''.join(map(str, digits[1:6][::-1])))\n    num2 = int(''.join(map(str, digits[6:] + [digits[0]])))\n    return num1 - num2\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    length = 450  # length in meters\n\n    speed = length / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter: sam - 0.20 * sam = sam_after_giving\n    # Peter received 20% of Sam's stickers: peter + 0.20 * sam = peter_after_receiving\n    sam_after_giving = sam - 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n\n    # Peter gave 25% of his stickers to Sam: peter_after_receiving - 0.25 * peter_after_receiving = peter_final\n    # Sam received 25% of Peter's stickers after receiving 20% of Sam's: sam_after_giving + 0.25 * peter_after_receiving = sam_final\n    peter_final = peter_after_receiving - 0.25 * peter_after_receiving\n    sam_final = sam_after_giving + 0.25 * peter_after_receiving\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    factorial_10 = 1\n    for i in range(1, 11):\n        factorial_10 *= i\n    return factorial_10\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_baba = 10\n    ali_and_baba = 2\n\n    total_people = people_in_front_of_ali + ali_and_baba + people_behind_baba\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    num_friends = 4\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    # Group the numbers when summing\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 102):\n        total_sum += i * (i + 1)\n    return total_sum - 101*102\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_water = 7\n    num_jugs = 4\n\n    total_water = initial_water + jug_water * num_jugs\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, david, emily = symbols('chloe david emily')\n    \n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    # since 1 pen costs the same as 2 pencils\n    # Owen should give 2 pencils for 1 pen\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    total_days = 3 + 2 + 2\n    average_cookies_per_day = total_cookies / total_days\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days David took off\n    x = symbols('x')\n    \n    # Candy's work rate is 1/20 per day\n    # David's work rate is 1/25 per day\n    # They worked together for (12 - x) days\n    \n    # Total work done by Candy and David\n    equation = Eq((12 / 20) + ((12 - x) / 25), 1)\n\n    # Solve the equation\n    days_off = solve(equation, x)\n\n    # There might be more than one solution, but we need the one that makes sense for the context\n    days_off = [day for day in days_off if day >= 0 and day <= 12]\n\n    return days_off[0] if days_off else None\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's third law of motion, the table exerts an equal and opposite force\n    # to the gravitational force pulling the book down, which is 20N.\n    force_by_table = 20  # The magnitude of the force exerted by the table on the book in Newtons.\n    return force_by_table\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # Lily needs to take out 6 balls of the same type\n\n    # In the worst case, she takes out all the basketballs (9) and volleyballs (3), in any order\n    # That's 9 + 3 = 12 balls, without having 6 of the same type yet\n    # After that, any further ball she takes out will be the 6th ball of the same type (because only footballs are left)\n\n    # So she must take out 12 + 1 = 13 balls to ensure she has 6 of the same type\n\n    return 12 + 1\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    T = Symbol('T')\n\n    # Calculate tax for the first $50,000\n    tax_first_50000 = 0.05 * 50000\n\n    # Calculate tax for the remaining income\n    remaining_income = 140000 - 50000\n    tax_remaining_income = remaining_income * (0.08 + T / 100)\n\n    # Create equation for total tax\n    total_tax = tax_first_50000 + tax_remaining_income\n\n    # Set up the equation based on the given total tax of $15,100\n    tax_equation = Eq(total_tax, 15100)\n\n    # Solve for T\n    T_value = solve(tax_equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g = 9.8  # acceleration due to gravity (m/s^2)\n    h = 5.0  # height of the tabletop (m)\n    \n    v, u, a, s = symbols('v u a s')  # v: final velocity, u: initial velocity, a: acceleration, s: distance\n    \n    equation1 = Eq(u, 0)      # Initial velocity is 0 since the ball is gently pushed\n    equation2 = Eq(a, g)      # Acceleration due to gravity\n    equation3 = Eq(s, h)      # The falling distance\n    \n    # Using the second equation of motion: v^2 = u^2 + 2 a s\n    # Since the ball starts from rest, u = 0\n    equation_motion = Eq(v**2, u**2 + 2 * a * s)\n    \n    # Substituting the known values\n    solutions = solve((equation_motion.subs(u, 0), equation2, equation3), (v, a, s))\n    \n    return solutions[v].evalf()\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    # Equation based on the fact that 1/8 of the apples are left and equals to 3/4 of the total fruits minus 30 pears left\n    # Since 4/5 of the fruits are apples, then 1/8 of the apples is (4/5) * (1/8) * total_fruits\n    # And 3/4 of the total fruits are removed, so 1/4 are left which should equate to the remaining apples and 30 pears\n    equation = Eq((4/5) * (1/8) * total_fruits + 30, (1/4) * total_fruits)\n\n    total_fruits_solution = solve(equation, total_fruits)\n\n    return total_fruits_solution[0]\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes = 10\n\n    time_per_cake = time_for_6_cakes / 6\n    total_time = time_per_cake * number_of_cakes\n\n    return total_time\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip = bill * 0.15\n    tax = bill * 0.08\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    from math import factorial\n    \n    # If each child needs to get at least one orange, we distribute one to each first.\n    # Now we need to distribute the remaining 13 - 3 = 10 oranges.\n    \n    # This is a problem of distributing n identical items into r distinct groups\n    # with no groups being empty. This can be solved using the formula for combinations\n    # with repetition: C(n+r-1, r-1).\n\n    n = 10  # remaining oranges to distribute\n    r = 3   # number of kids (groups)\n    \n    # Calculate the number of ways to distribute the oranges\n    # Using the combination with repetition formula\n    ans = factorial(n + r - 1) // (factorial(r - 1) * factorial(n))\n    \n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for num in range(10**20):\n        if sum(int(digit) for digit in str(num)) == 20 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 5):\n        s, a, m, o, g = p\n        sasmo = int(s + a + s + m + o)\n        ogams = int(o + g + a + m + s)\n        if sasmo * 4 == ogams and s != '0':\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2        # sandwiches, burgers\n    drink_options = 3       # coffee, milk, tea\n    dessert_options = 4     # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n\n    return total_ways\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    # Initial velocity components (m/s)\n    v0 = 5\n    theta = math.radians(45)  # Convert 45 degrees to radians\n    v0x = v0 * math.cos(theta)  # Horizontal component\n    v0y = v0 * math.sin(theta)  # Vertical component\n    \n    # Acceleration due to gravity (m/s^2)\n    g = 9.81  # Acceleration due to gravity\n    \n    # Time taken to reach the ground (t when y = 0)\n    # We use the kinematic equation: y = v0y * t - 0.5 * g * t^2\n    # Here y = -30 because the arrow starts from 30 meters high and goes down to 0\n    # The quadratic equation at^2 + bt + c = 0, where:\n    # a = -0.5 * g\n    # b = v0y\n    # c = -30\n    # We need to find the positive root as time cannot be negative\n    \n    a = -0.5 * g\n    b = v0y\n    c = -30\n    \n    # Quadratic formula: t = (-b +/- sqrt(b^2 - 4*a*c)) / (2*a)\n    discriminant = b**2 - 4*a*c\n    t = (-b + math.sqrt(discriminant)) / (2*a)\n    \n    # Final velocity components (using v = v0 + at)\n    vfx = v0x  # Horizontal velocity remains constant\n    vfy = v0y - g * t  # Final vertical velocity\n    \n    # Magnitude of the final velocity vector (using Pythagorean theorem)\n    vf = math.sqrt(vfx**2 + vfy**2)\n    \n    return vf\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_each_container_should_have = total_water / 2\n    water_to_transfer_from_A_to_B = water_each_container_should_have - 28\n    return water_to_transfer_from_A_to_B\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.50)\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n\n    # 2 elephants weigh as much as 5 cows\n    equation1 = Eq(2 * elephants, 5 * cows)\n    # 4 cows weigh as much as 3 horses\n    equation2 = Eq(4 * cows, 3 * horses)\n    # 3 horses weigh as much as 5 pigs\n    equation3 = Eq(3 * horses, 5 * pigs)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n    \n    # Find out how many pigs weigh as much as 8 elephants\n    eight_elephants_weight = 8 * solutions[elephants]\n    pigs_equivalent = eight_elephants_weight / solutions[pigs]\n    \n    return pigs_equivalent\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the interest rate\n    r = symbols('r')\n    \n    # The initial principal amount\n    P = 2000\n    \n    # The amount owed after 3 years\n    A = 2519.42\n    \n    # The expression for compound interest\n    equation = Eq(P * (1 + r)**3, A)\n    \n    # Solve the equation for the interest rate\n    interest_rate = solve(equation, r)\n    \n    # Return the interest rate as a percentage\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_mangoes, price_lychees = symbols('price_mangoes price_lychees')\n\n    equation1 = Eq(price_lychees, 2 * price_mangoes - 6)\n    equation2 = Eq(24 * price_mangoes + 20 * price_lychees, 1160)\n\n    solutions = solve((equation1, equation2), (price_mangoes, price_lychees))\n\n    return solutions[price_lychees]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.6 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers_per_pupil_13, stickers_per_pupil_17, excess_13, excess_17 = symbols('stickers_per_pupil_13 stickers_per_pupil_17 excess_13 excess_17')\n    excess_13 = 190\n    excess_17 = 50\n\n    # Equations based on the problem statement\n    equation1 = Eq(stickers_per_pupil_13 * 13 + excess_13, stickers_per_pupil_17 * 17 + excess_17)\n\n    # We know that the total number of stickers is same in both cases\n    total_stickers = solve(equation1, stickers_per_pupil_13)[0] * 13 + excess_13\n\n    return total_stickers\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Calculating the factorial for each type of book\n    comics_factorial = factorial(4)\n    fictions_factorial = factorial(6)\n\n    # The groups (comics and fictions) can also be arranged in 2! ways\n    groups_factorial = factorial(2)\n    \n    # Multiply the number of arrangements within each group by the number of ways the groups can be arranged\n    total_arrangements = comics_factorial * fictions_factorial * groups_factorial\n\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Given averages\n    avg_A = 12\n    avg_AB = 8\n\n    # Number of groups in A and B\n    num_groups_A = 3\n    num_groups_B = 4\n    \n    # Total number of groups\n    total_groups = num_groups_A + num_groups_B\n\n    # Total candies sold by A and B\n    total_candies_AB = avg_AB * total_groups\n    # Total candies sold by A\n    total_candies_A = avg_A * num_groups_A\n    \n    # Total candies sold by B\n    total_candies_B = total_candies_AB - total_candies_A\n    \n    # Average candies sold by B per group\n    avg_B = total_candies_B / num_groups_B\n\n    return avg_B\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "def solution():\n    from math import factorial\n\n    # Tom can arrange the 4 dancing performances with 3 spots in between, and one at each end,\n    # making it 5 spots. There are total 6 singing performances to arrange in these 5 spots.\n    # We can treat these spots as buckets and distribute 6 singing performances into them.\n    \n    # We first need to put 1 singing performance in each of the 3 spots between dancing performances.\n    # Now we have 6 - 3 = 3 singing performances left to distribute in all the 5 available spots.\n    \n    # This is a problem of distributing indistinguishable items into distinguishable boxes.\n    # The number of ways to do this is given by the combination formula:\n    # C(n + k - 1, k), where n is the number of items, and k is the number of boxes.\n    # Here n = 3 (remaining singing performances) and k = 5 (spots).\n    \n    # Calculating the number of ways to distribute the remaining 3 singing performances\n    ways_to_distribute_singing = factorial(3 + 5 - 1) // (factorial(3) * factorial(5 - 1))\n    \n    # After we allocate the singing performances, we still need to decide the order of dancing performances,\n    # which can be done in 4! ways.\n    ways_to_arrange_dancing = factorial(4)\n    \n    # The total number of arrangements is the product\n    total_arrangements = ways_to_distribute_singing * ways_to_arrange_dancing\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lee_rate, nancy_rate = symbols('lee_rate nancy_rate')\n    \n    # Equation for working together\n    equation1 = Eq(1/lee_rate + 1/nancy_rate, 1/10)\n    \n    # Equation when Lee works for 6 hours and Nancy for 20 hours\n    equation2 = Eq(6*lee_rate + 20*nancy_rate, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lee_rate, nancy_rate))\n    \n    nancy_time = 1 / solutions[nancy_rate]  # Time taken by Nancy to finish the job by herself\n    \n    return nancy_time\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    # Let d be the number of questions Dora answered correctly.\n    # Then Dora's points are 10*d - 5*(10-d)\n    # Justin's points are 10*(d+15/10) - 5*(10-(d+15/10))\n    # Together they scored 155 points\n\n    for d in range(11):  # The number of questions ranges from 0 to 10\n        dora_points = 10 * d - 5 * (10 - d)\n        justin_points = 10 * (d + 15 / 10) - 5 * (10 - (d + 15 / 10))\n        if dora_points + justin_points == 155:\n            return d\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    number_of_pieces = 10\n    \n    remaining_string_length = total_string_length - used_string_length\n    length_of_each_piece = remaining_string_length / number_of_pieces\n    \n    return length_of_each_piece\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for i in range(1, 20):\n        if i % 4 == 3 and i % 5 == 4:\n            return i\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    ans = (45 / 100) * 80\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    num_flavours = 7\n    num_combinations = comb(num_flavours, 2)\n    return num_combinations\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    # Let x be the total number of passengers on the bus at the start\n    # After the first stop, two fifths got off, so three fifths remained: 3/5 * x\n    # After the next stop, one third of the remaining passengers got off, so two thirds remained: 2/3 * (3/5 * x)\n    # It is given that 2/3 * (3/5 * x) = 22\n    # Simplify the equation: (2/3) * (3/5) * x = 22\n    # Solve for x\n    \n    x = 22 / ((2/3) * (3/5))\n    return int(x)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    ans = comb(num_people, 2)\n    return ans\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, solve\n\n    white, milk, dark = symbols('white milk dark')\n    ratio_white_to_milk_to_dark = (3, 7, 5)\n    milk_chocolates = ratio_white_to_milk_to_dark[1] * (white + 8) / ratio_white_to_milk_to_dark[0]\n\n    equation = dark - white - 8\n\n    solutions = solve((equation.subs(dark, (white + 8) / ratio_white_to_milk_to_dark[0] * ratio_white_to_milk_to_dark[2]), milk - milk_chocolates), (white, milk))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_students = symbols('total_students')\n    \n    # Equation based on the given problem\n    # 1/4 of the students + 3 like badminton\n    # 1/3 of the (remaining students - 3) like table tennis\n    # Remaining 25 students like football\n    # total_students = (1/4 * total_students + 3) + \n    #                  (1/3 * (total_students - (1/4 * total_students + 3)) - 3) + \n    #                  25\n    \n    equation = Eq((1/4 * total_students + 3) + \n                  (1/3 * (total_students - (1/4 * total_students + 3)) - 3) + \n                  25, total_students)\n\n    solutions = solve(equation, total_students)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # let x be the number of red balls to add\n    # There are 5 red balls initially, and 10 green balls\n    # After adding x red balls, the total number of balls is (5 + x + 10) = (15 + x)\n    # The probability of getting a green ball is 10 / (15 + x)\n    # Set up the equation 10 / (15 + x) = 1/3 and solve for x\n    x = symbols('x')\n    equation = Eq(10 / (15 + x), 1/3)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_side = 6\n    small_side = 3\n    ans = (large_side // small_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    conversion_factor = 100  # 1 meter = 100 centimeters\n    centimeters = meters * conversion_factor\n    return centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction_spent = 1 / 4\n    total_money = spent / fraction_spent\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the sticker counts\n    sam, peter = symbols('sam peter')\n\n    # Given conditions\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # In return, Peter gave 25% of his stickers to Sam\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * peter, peter - 0.25 * peter + 0.20 * sam + 96)\n\n    # Solving the system of equations for both sam and peter\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Returning the solution for the number of stickers Peter had at first\n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Finding the ones digit of a power can be done by considering the pattern of the last digits.\n    # For example, the last digits of powers of 32 cycle through a pattern - (32, 24, 28, 16, 32...)\n    # In the case of 32^33, we only care about the last digit of 2^33.\n    # The pattern for the last digit of powers of 2 is 2, 4, 8, 6, and then it repeats every 4 powers.\n\n    # To find the ones digit of 2^33\n    ones_digit_of_32_pow_33 = (2 ** (33 % 4)) % 10  # % 4 because the pattern repeats every 4\n    \n    # Now we find the ones digit of 22^29. \n    # As with 32, we only need the last digit of 2 raised to the power of 29 for 22^29.\n    # This is because any even number ending with 2 raised to any power will always have the same last digits as 2 raised to that power.\n\n    # To find the ones digit of 2^29\n    ones_digit_of_22_pow_29 = (2 ** (29 % 4)) % 10  # % 4 because the pattern repeats every 4\n\n    # Now we take the difference of these last digits to find the ones digit of the expression\n    ones_digit_difference = (ones_digit_of_32_pow_33 - ones_digit_of_22_pow_29) % 10\n    \n    return ones_digit_difference\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 18:\n        page += 1\n        count += str(page).count('6')\n    return page - 1 if str(page).count('6') > 1 else page\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice1 != dice3 and dice2 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given ratio\n    ratio = 4 / 9\n    # Given product of ratios equals 81\n    target_product = 81\n    # Calculate the missing number using cross multiplication\n    missing_number = target_product * ratio\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    distance_per_period = (5 * 2) - 3  # Distance covered every 2 jumps\n    period_jumps = 2  # Number of jumps in each period\n    remaining_distance_after_periods = 40 % distance_per_period  # Remaining distance after full periods\n    full_periods = 40 // distance_per_period  # Number of complete periods required to reach or pass the remaining distance\n    \n    # If no remaining distance, the last period would have the monkey reach or surpass the tree height\n    if remaining_distance_after_periods == 0:\n        total_jumps = full_periods * period_jumps\n    # If the remaining distance is covered in one jump, add one more jump\n    elif remaining_distance_after_periods <= 5:\n        total_jumps = full_periods * period_jumps + 1\n    # Else, add two more jumps for the remaining\n    else:\n        total_jumps = full_periods * period_jumps + 2\n    \n    return total_jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((2*i)**3 / (2*i*(2*i+1)*(2*i+2)) for i in range(1, 2013)) + 1/4026\n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for num in range(1, 100):\n        if num % 16 == 0 and (num + 1) % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_marks = 4\n    penalty_marks = 2\n    \n    # Let x be the number of questions answered correctly\n    # Then, the number of questions Jay got wrong or didn't answer is (total_questions - x)\n    # The total marks can be represented as 4x (for correct answers) minus\n    # 2(total_questions - x) (for wrong or unanswered questions)\n    # Setting up the equation: 4x - 2(80 - x) = 152 and solve for x\n    \n    x = symbols('x')\n    equation = Eq(4*x - 2*(total_questions - x), 152)\n    solutions = solve(equation)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n\n    cans_per_day = cans_in_6_days / 6\n    total_cans = cans_per_day * days\n\n    return total_cans\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # The least number of cuts required is the number of people minus one, \n    # since each cut can give one additional piece from a larger piece.\n    \n    # We have 24 people and 16 sausages. Each person should get 16/24 sausages.\n    # We can multiply both numerator and denominator by a number that will make\n    # the numerator equal to 24 (the total number of people), which makes the division even.\n    # This operation simulates the cut process by scaling up the problem.\n\n    # Hence, multiplying both by 3/2 to keep the fraction equivalent,\n    # we get 24 sausages over 36 people, meaning 1 sausage per person.\n    # Now the number of cuts required per sausage is 0. But we need to cut each sausage once\n    # to produce exactly 24 pieces in total from 16 sausages.\n    \n    # Therefore, the minimum number of cuts will be 16, one per sausage, to achieve equal sharing.\n    \n    return 16\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(7)  # Total permutations of the word 'RAINBOW'\n    vowels = ['A', 'I', 'O']\n    \n    # Total permutations of the vowels\n    total_vowels = factorial(len(vowels))\n    \n    # Number of places the group of vowels can occupy\n    spaces_for_vowels = len('RAINBOW') - len(vowels) + 1\n    \n    # Total permutations when vowels are together\n    vowels_together = spaces_for_vowels * total_vowels * factorial(7 - len(vowels))\n    \n    # Subtracting permutations where vowels are together from total permutations\n    ans = total_letters - vowels_together\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the pairwise differences of the numbers\n    diff1 = abs(51 - 39)  # Difference between 51 and 39\n    diff2 = abs(147 - 51)  # Difference between 147 and 51\n    diff3 = abs(147 - 39)  # Difference between 147 and 39\n\n    # Find the Greatest Common Divisor (GCD) of the pairwise differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # The required integer is the gcd of the differences\n    return gcd_diff\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle exchanged sentences with 5 other team members\n    # Each of those 5 members said 3 sentences to each other\n    lovelle_interactions = 3 * 5\n    \n    # Apart from Lovelle, there are 5 team members who interacted with each other\n    # They would have interacted with each other (5 - 1) times since one interaction is with Lovelle\n    # Using the formula for combinations n*(n-1)/2 for the interactions among those 5\n    other_interactions = 5 * (5 - 1) // 2\n    \n    # Total interactions involving Lovelle\n    total_lovelle_interactions = lovelle_interactions + other_interactions\n    \n    # Now there are 12 team members who did not speak to Lovelle\n    # The total number of team members is Lovelle plus the 5 she interacted with plus the 12 who did not interact\n    total_team_members = 1 + 5 + 12\n    \n    return total_team_members\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    current_term = 39\n    difference = 6\n    next_term = current_term + difference\n    return next_term\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    decimal = 3 / 8\n    return decimal\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Calculate the number of digits used in different ranges\n    # 1 - 9: 9 pages with 1 digit each\n    digits_1_to_9 = 9 * 1\n    \n    # 10 - 99: 90 pages with 2 digits each\n    digits_10_to_99 = 90 * 2\n    \n    # 100 - 325: 226 pages with 3 digits each\n    digits_100_to_325 = (325 - 99) * 3\n    \n    # Sum all digits from all ranges\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_325\n    \n    return total_digits\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # The number of total possible ways without restriction\n    word = 'STATISTIC'\n    total_perms = factorial(len(word)) // (factorial(word.count('S')) * factorial(word.count('T')) * factorial(word.count('A')) * factorial(word.count('I')) * factorial(word.count('C')))\n\n    # The number of ways with two T's together\n    # First, we treat the two T's as one item: TT\n    word_with_tt_together = \"STTASTIC\"\n\n    # We then calculate permutations of this new word considering the double T as one element.\n    perms_with_tt_together = factorial(len(word_with_tt_together)) // (factorial(word_with_tt_together.count('S')) * factorial(word_with_tt_together.count('TT')) * factorial(word_with_tt_together.count('A')) * factorial(word_with_tt_together.count('I')) * factorial(word_with_tt_together.count('C')))\n    \n    # We need to multiply by 2 as there are two different placements for T within the TT \"element\"\n    perms_with_tt_together *= 2\n\n    # Subtract the number of invalid permutations from the number of total permutations\n    ways = total_perms - perms_with_tt_together\n\n    return ways\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total_gums in range(1, 1000):  # search in some reasonable range\n        remaining_gums = total_gums - 2\n        shared_gums = remaining_gums // 3\n        if remaining_gums % 3 == 0 and (remaining_gums - shared_gums) % 4 == 0:\n            return total_gums\n    return None  # return None if no solution is found within search range\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_speed = 50  # pieces per hour\n\n    time_needed = total_pieces / average_speed  # in hours\n\n    return time_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sarah, mark = symbols('sarah mark')\n    \n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    ans = round(number, -1)\n    return ans\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of water in container A\n    A_initial = symbols('A_initial')\n\n    # Set up the equation representing the relationship between A and B\n    B_initial = A_initial - 350\n    A_after_spill = A_initial - 500\n    B_after_spill = B_initial\n\n    # After spilling 500 mL, B has twice as much water as A\n    equation = Eq(B_after_spill, 2 * A_after_spill)\n\n    # Solve the equation\n    A_at_first_value = solve(equation, A_initial)\n\n    return A_at_first_value[0]\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    attempts = 9 + 8 + 7 + 6\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    ans = 527 * 8\n    return ans\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    pattern_diff = [3445 - 2945, 3245 - 3445, 3745 - 3245, 4045 - 3745, 3845 - 4045]\n    # Find the repeating difference pattern\n    repeating_diff = pattern_diff[:3]  # First three differences\n\n    # The missing number is the addition of previous number and next difference in the pattern\n    missing_number_diff = repeating_diff[1]\n    previous_number = 3745\n    \n    missing_number = previous_number + missing_number_diff\n\n    return missing_number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 * 7\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    difference = 26\n\n    # Let the number of mushrooms gathered in the first hour be x\n    # Then, the number of mushrooms gathered in the second hour is total_mushrooms - x\n    # According to the problem, x + difference = total_mushrooms - x\n    # Now solve the equation for x\n\n    x = (total_mushrooms + difference) / 2\n    second_hour_mushrooms = total_mushrooms - x\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 6\n\n    final_value = initial_value * (depreciation_rate ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men = symbols('men')\n    women = 4 * men  # 4 times as many women as men\n    total_cupcakes = 2 * women + 5 * men\n\n    # Equation for the total number of mini cupcakes eaten\n    equation = Eq(total_cupcakes, 182)\n\n    # Solve the equation to find the number of men\n    men_number = solve(equation, men)[0]\n    \n    # Calculate the number of women\n    women_number = 4 * men_number\n\n    return women_number\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    number_of_coins = 11\n    diameter_of_coin = 1.85  # in cm\n    total_length = (number_of_coins - 1) + diameter_of_coin\n\n    return total_length\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Cross multiply to find the value of the unknown (□)\n    unknown_value = (3 * 20) / 12\n    return unknown_value\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n    num_people = 8\n    # Subtracting 1 because in a circular arrangement, we fix one person and arrange the others around them\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Calculate the last digit of 2 to the power of 2017\n    last_digit_of_2_power = (2**2017) % 10\n    # Calculate the last digit of 3 to the power of 2017\n    last_digit_of_3_power = (3**2017) % 10\n    # Multiply the last digits to get the last digit of the entire expression\n    last_digit = (last_digit_of_2_power * last_digit_of_3_power) % 10\n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    ants_end = 185  # number of ants added after some left\n    # Let initial number of ants be x\n    # After $\\frac{3}{4}$ left, $\\frac{1}{4}$ remain\n    # After $\\frac{2}{5}$ of the remaining left, $\\frac{3}{5}$ of $\\frac{1}{4}$ remain\n    # Finally, the number of ants is twice the initial number, so we have:\n    # $\\frac{3}{5}$ * $\\frac{1}{4}$ * x + 185 = 2x\n    # Solving for x\n    remaining_factor = (3/5) * (1/4)\n    ants_initial = (ants_end) / (2 - remaining_factor)\n  \n    return int(ants_initial)\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_spent = book_price * (books_day1 + books_day2)\n\n    return total_spent\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    num_terms = 14\n    difference = second_term - first_term\n\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    term_index = 8  # Since 49 is the 7th term, and we're looking for the next.\n    next_square = term_index ** 2\n    return next_square\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a1, d = symbols('a1 d')\n\n    # The first term of the arithmetic progression is a1\n    # The common difference is d\n    # The sum of the first four terms is 4/2 * (2*a1 + (4-1)*d)\n    sum_first_four = 2 * (2*a1 + 3*d)\n\n    # The sum of the last four terms is 4/2 * (2*(a1 + 7*d) + (4-1)*d)\n    sum_last_four = 2 * (2*(a1 + 7*d) + 3*d)\n\n    # The sum of the last four terms is 32 more than the sum of the first four\n    equation = Eq(sum_first_four + 32, sum_last_four)\n\n    # Solve for d, the common difference\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    number = 1\n    for i in range(1, 2022):\n        number = 2 * number + 4\n        if number >= 100:\n            number %= 100\n    return number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n\n    lcm_flashes = lcm(red_flash_rate, green_flash_rate)\n    minutes_in_hour = 60\n\n    flashes_per_hour = minutes_in_hour // (lcm_flashes // red_flash_rate)\n    return flashes_per_hour + 1  # including the first and the last time\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14): # a must be less than 14 because 3*14 is already greater than 41\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    halfway = (4.5 + 10.3) / 2\n    return halfway\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_margin = 0.30\n    cost_price = sale_price / (1 + profit_margin)\n    \n    desired_profit = 5000\n    new_sale_price = cost_price + desired_profit\n    new_profit_percentage = (new_sale_price - cost_price) / cost_price\n    \n    return new_profit_percentage * 100\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation)\n    \n    # Since n can not be negative in this context\n    # We will return only the positive solution\n    ans = [sol for sol in solutions if sol > 0][0]\n    \n    return ans\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000  # 1 kg = 1000 grams\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    word = \"EARTH\"\n    num_letters = len(word)\n    num_ways = factorial(num_letters)\n    \n    return num_ways\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume_bottle = 120 / (1 - 3/5)\n    water_volume_bottle = total_volume_bottle - 120\n    water_volume_six_bottles = water_volume_bottle * 6\n    return water_volume_six_bottles\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    # Simon's speed is 150 feet per minute.\n    # His friend's speed is 200 feet per minute.\n    # Simon walks for 10 minutes away from school.\n\n    simon_distance_walked = 150 * 10\n    friend_distance_walked = 200 * 10\n\n    # Simon runs back to school at twice his original speed, i.e., 150 * 2 feet per minute.\n    simon_run_speed = 150 * 2\n    # He covers the distance back to school in simon_distance_walked / simon_run_speed minutes.\n\n    # During the time Simon is running back, his friend continues to walk away.\n    # We need to calculate the total distance his friend has walked until Simon gets back to school.\n    time_simon_runs_back = simon_distance_walked / simon_run_speed\n    total_friend_distance = friend_distance_walked + (200 * time_simon_runs_back)\n\n    # When Simon reaches the school, the distance between Simon and his friend is the total distance his friend has walked.\n    distance_between_simon_and_friend = total_friend_distance\n\n    return distance_between_simon_and_friend\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Eddie(1), Jack(2), Rose(5), and Mary(10)\n    # Strategy:\n    # 1. Eddie and Jack cross together (2 minutes)\n    # 2. Eddie returns with the flashlight (1 minute)\n    # 3. Rose and Mary cross together (10 minutes)\n    # 4. Jack returns with the flashlight (2 minutes)\n    # 5. Eddie and Jack cross together again (2 minutes)\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n    return 17\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5                    # Initial volume in litres\n    container_factor = 0.25               # Size factor of another container\n    cups = 14                             # Number of cups\n    cup_volume_ml = 150                   # Volume of one cup in millilitres\n    ml_to_litres_factor = 1 / 1000        # Factor to convert millilitres to litres\n\n    # Volume used to completely fill another container\n    used_for_container = initial_volume * container_factor\n\n    # Volume used for cups in litres\n    used_for_cups = cups * cup_volume_ml * ml_to_litres_factor\n\n    # Remaining volume in the water dispenser\n    remaining_volume = initial_volume - used_for_container - used_for_cups\n\n    return remaining_volume\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}{digit2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def factorial(n):\n        return 1 if n == 0 else n * factorial(n-1)\n    \n    def derangements(n):\n        # Count of derangements of n elements is called subfactorial of n or !n\n        # Using recurrence relation !n = (n - 1) * (!(n - 1) + !(n - 2))\n        if n == 0: return 1\n        if n == 1: return 0\n        a, b = 1, 0\n        for i in range(2, n+1):\n            a, b = (i - 1) * (a + b), a\n        return a\n    \n    # For 7 friends with restriction of not sitting in their own seats\n    ans = derangements(7)\n\n    return ans\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = (100 // 7) * 7\n    if n == 100:\n        n -= 7\n    return n\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pages = symbols('total_pages')\n    \n    # Original rate: total_pages / 8\n    # Increased rate: total_pages / (8 - 2) == total_pages / 6\n    # 2 more pages per day with the new rate\n    equation = Eq(total_pages / 8 + 2 * 2, total_pages / 6)\n\n    ans = solve(equation, total_pages)\n\n    return ans[0]\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 5):\n        s, e, n, d, m, o, r, y = *perm[:4], '0', *perm[4:], '0'\n        send = int(s + e + n + d)\n        more = int(m + o + r + e)\n        money = int(m + o + n + e + y)\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "def solution():\n    from math import factorial\n\n    def permutations_count(n, repeats):\n        count = factorial(n)\n        for r in repeats:\n            count //= factorial(r)\n        return count\n\n    total_balls = 7\n    repeats = [2, 2, 2, 1]  # Two identical bells, two identical stars, two identical red balls, and one green ball\n\n    ans = permutations_count(total_balls, repeats)\n    \n    return ans\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    return 828 // 9\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Let's denote H as the original value, and use the information given to form equations.\n    # After increasing by 10% the value becomes H * 1.10\n    # We are told this value was £11,000\n    value_after_increase = 11000\n    original_value = value_after_increase / 1.10\n\n    # Now that we have the original value, we need to calculate the value after losing 10% in the second year\n    value_after_decrease = original_value * 0.90\n\n    # The profit or loss comparing with the original price is:\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's baking rate per minute\n    pip_rate = 5 / 20\n    \n    # Bud's baking rate per minute\n    bud_rate = 3 / 15\n    \n    # Total time in minutes\n    total_time = 40\n    \n    # Pip's bread count in 40 minutes\n    pip_bread = pip_rate * total_time\n    \n    # Bud's bread count in 40 minutes\n    bud_bread = bud_rate * total_time\n    \n    # Total loaves of bread baked\n    total_bread = pip_bread + bud_bread\n    \n    return int(total_bread)\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Yohan has to go through the worst-case scenario to ensure getting a pair of white socks.\n    # In the worst case, he would pick all red and black socks before getting to the white ones.\n    red_socks = 10\n    black_socks = 10\n    # Once he has picked all red and black socks, he would need to pick one more to get a pair of white socks.\n    max_picks = red_socks + black_socks + 1\n\n    return max_picks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expression = 12 * a / 4 + 2 * a * 5\n    simplified_expression = simplify(expression)\n    return simplified_expression\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6 * d) + (5 * d) - d\n    simplified_expression = expression.simplify()\n\n    return simplified_expression\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_cookies = symbols('initial_cookies')\n    eaten_morning = 3/8 * initial_cookies\n    eaten_afternoon = 1/6 * initial_cookies\n    remaining_cookies = initial_cookies - eaten_morning - eaten_afternoon\n\n    equation = Eq(remaining_cookies, 33)\n    solution = solve(equation, initial_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Let x be Jemma's number\n    # The operation can be described by the equation: 5 * (x + 3) = 35\n    # Simplify the equation to find x\n\n    x = (35 / 5) - 3\n    return int(x)\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2020, 5, 5)  # Arbitrary year, since no year is given, assuming non-leap year\n    end_date = datetime(2020, 6, 7)\n    one_day = timedelta(days=1)\n    count_sundays = 0\n\n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # In Python, Monday is 0 and Sunday is 6\n            count_sundays += 1\n        current_date += one_day\n    \n    return count_sundays\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, pip_red, bud_white = symbols('red white pip_red bud_white')\n    \n    # Original number of red and white marbles\n    original_ratio = Eq(red / white, 3/2)\n    \n    # After Pip adds red marbles\n    pip_ratio = Eq((red + pip_red) / white, 5/3)\n    \n    # After Bud adds white marbles\n    bud_ratio = Eq((red + pip_red) / (white + bud_white), 5/4)\n    \n    # Bud puts 100 more white balls than the red balls put by Pip\n    balls_difference = Eq(bud_white, pip_red + 100)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, pip_ratio, bud_ratio, balls_difference), (red, white, pip_red, bud_white))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_volume = 120\n    bucket_volume = 8\n    \n    return barrel_volume // bucket_volume\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed_fraction = 1/4\n    left_handed_pupils = total_pupils * left_handed_fraction\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # Total kg of flour\n    packets = 25  # Number of packets\n\n    flour_per_packet = total_flour / packets  # Flour in each packet\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # For a number to be divisible by 3, the sum of its digits must be divisible by 3\n    # For a number to be divisible by 4, the last two digits must form a number that is divisible by 4\n\n    for K in range(10):  # K can be any digit from 0 to 9\n        number = int(f\"5{K}27{K}\")\n        if (5 + K + 2 + 7 + K) % 3 == 0 and int(str(27) + str(K)) % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # The businessman bought the horse for $10 and sold it for $20, earning $10\n    first_earning = 20 - 10\n    \n    # Then he bought it back for $30 and sold it for $40, earning another $10\n    second_earning = 40 - 30\n    \n    # The total earning is the sum of the first and second earning\n    total_earning = first_earning + second_earning\n    \n    return total_earning\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, brownies = symbols('cookies brownies')\n    \n    # Original ratio 4:3\n    eq1 = Eq(cookies / brownies, 4/3)\n    \n    # After giving away 6 brownies, ratio became 12:7\n    eq2 = Eq((cookies) / (brownies - 6), 12/7)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (cookies, brownies))\n    \n    # Total number of cookies and brownies before giving away\n    total = solutions[cookies] + solutions[brownies]\n\n    return total\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # Calculate the total number of elements before the first 10\n    total_numbers = sum(range(3, 3 + 10))\n    # Calculate the half of the total, to find the position of the median\n    half_total = total_numbers // 2\n\n    # Initialize the sum of numbers written and the last written number\n    numbers_written = 0\n    last_written = 0\n\n    # Count numbers until reaching the median position\n    for i in range(1, 10):\n        numbers_written += i + 2\n        last_written = i\n        if numbers_written >= half_total:\n            break\n\n    return last_written\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n    \n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n    \n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 28 - 25  # The difference between consecutive terms\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # We know a_n (last_shown_term), n (nth_term) and d (common_difference), so we can solve for a_1 (the first term)\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "from itertools import combinations\n\ndef solution():\n    all_numbers = set(range(1, 9))\n    highest_single_card_player_two = 0\n    \n    for player_one_cards in combinations(all_numbers, 4):\n        if sum(player_one_cards) == 23:\n            player_two_cards = all_numbers - set(player_one_cards)\n            highest_single_card_player_two = max(highest_single_card_player_two, max(player_two_cards))\n\n    return highest_single_card_player_two\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    shoes_per_pair = 2\n    total_pairs = 9\n    cleaning_time_per_shoe = 2\n    cobblers = 2\n\n    total_shoes = shoes_per_pair * total_pairs\n    total_cleaning_time_for_one = cleaning_time_per_shoe * total_shoes\n    shortest_time = total_cleaning_time_for_one / cobblers\n\n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum([sum([i**2 for i in range(1, j+1)]) for j in range(1, 21)])\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = -(-total_cookies // cookies_per_packet)\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    # Since the denominator is 2019*2020 - 1, we can use (2019 - 1)(2019 + 1) to simplify it\n    denominator = 2019*2020 - 1\n\n    # The numerator can be written as 2019*2020 - 2018\n    numerator = 2019 + 2018*2020\n\n    # Subtract 2018 from both the numerator and denominator\n    numerator -= 2018\n    denominator -= 2018\n\n    # Now the numerator is (2019*2020 - 2018) - 2018 = 2019*2020 - 2*2018\n    # Now the denominator is (2019*2020 - 1) - 2018 = 2019*2020 - 2019\n    # Elementarily, the result is (2019*2020 - 2*2018) / (2019*2020 - 2019)\n    # Which we can simplify by factoring out 2019: numerator = 2019(2020-2), denominator = 2019(2020-1)\n    # Dividing both by 2019 we end up with (2020 - 2) / (2020 - 1)\n\n    ans = (2020 - 2) / (2020 - 1)\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    correct = symbols('correct')\n    wrong = 50 - correct - 3  # Given that Amna didn't attempt 3 questions\n    total_score = Eq(4 * correct - wrong, 168)  # 4 marks for correct and -1 for wrong\n\n    solved = solve(total_score, correct)\n\n    return solved[0]\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    # Number of players\n    n = 6\n    # Number of handshakes, i.e., combinations of 2 out of n players\n    num_handshakes = comb(n, 2)\n    \n    return num_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n    \n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    # Two-thirds of the number is 24\n    two_thirds_of_number = 24\n\n    # Calculate the whole number based on two-thirds\n    whole_number = (two_thirds_of_number * 3) / 2\n\n    # Find three-quarters of the whole number\n    three_quarters_of_number = (whole_number * 3) / 4\n\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    # Using a list comprehension to sum all odd numbers between 0 and 20\n    ans = sum([i for i in range(1, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of the pack sizes\n    least_common_multiple = lcm(6, 8, 9, 15)\n\n    # Find the minimum number of packs needed to get at least 1000 markers\n    packs_needed = -(-1000 // least_common_multiple)\n\n    # Calculate the total number of markers\n    min_markers = least_common_multiple * packs_needed\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # the work done is proportional to number of companies and number of days\n    initial_companies = 4\n    initial_days = 5\n    initial_length = 900\n\n    new_companies = 6\n    new_length = 5400\n\n    # Calculate work rates\n    initial_work_rate = initial_companies * initial_days / initial_length\n    new_work_rate = new_companies / new_length\n    \n    # Assume the work rate is constant we have the equation:\n    # initial_companies * initial_days = new_companies * new_days\n    # we are looking for new_days and thus we rearrange the equation:\n    # new_days = initial_companies * initial_days / new_companies * (new_length / initial_length) \n    new_days = (initial_companies * initial_days) / new_work_rate / initial_work_rate\n\n    return new_days\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # The total number of letters in the word 'CHALLENGE' is 10.\n    # However, we want the three vowels A, E, and E to be together.\n    \n    # We can treat the three vowels AEE as a single entity, thus we have:\n    # CHLLNG + (AEE) = 7 entities to rearrange.\n    \n    # First, we find the number of ways to arrange these 7 entities.\n    # Since the letters L and N are repeated twice, we divide by their factorial\n    arrangements_of_entities = factorial(7) // (factorial(2) * factorial(2))\n    \n    # Now, within the entity (AEE), the letter E is repeated, so we must divide by 2! \n    arrangements_of_vowels = factorial(3) // factorial(2)\n    \n    # The total number of ways is the product of the two arrangement counts.\n    total_arrangements = arrangements_of_entities * arrangements_of_vowels\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('1234567890', 4):\n        B, D, E, C = p\n        CBCD = int(C + B + C + D)\n        CDBC = int(C + D + B + C)\n        BDEC = int(B + D + E + C)\n\n        if CBCD + CDBC == BDEC and len(set(p)) == 4:\n            return BDEC\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 3 * 450\n    apr_to_jul = 4 * 350\n    aug_to_oct = 1250\n    nov_to_dec = 2 * 400\n    total_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_per_month = total_spend / 12\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_carrot_cake_price = 4 * 5\n    total_cheesecake_price = 1 * 10\n    total_chocolate_cake_price = 5 * 12\n\n    total_number_of_cakes = 4 + 1 + 5\n    total_price_all_cakes = total_carrot_cake_price + total_cheesecake_price + total_chocolate_cake_price\n\n    average_selling_price = total_price_all_cakes / total_number_of_cakes\n\n    return average_selling_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # We assume the divisor and quotient are equal, so\n    # the least dividend will be when they are both the smallest possible\n    # positive integer greater than the remainder which is 8\n    # dividend = divisor * quotient + remainder\n    divisor_and_quotient = remainder + 1  \n    dividend = divisor_and_quotient * divisor_and_quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + 1/4 * lorries)\n    equation3 = Eq(cars + bikes + lorries, 2 * symbols('n', integer=True))\n\n    solutions = solve((equation1, equation2, equation3), (cars, bikes, lorries))\n    \n    # Filter solutions that satisfy the condition of total number less than 100\n    valid_solutions = [s for s in solutions if sum(s) < 100 and sum(s) % 2 == 0]\n\n    return valid_solutions[0]\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    \n    value_after_2_years = initial_value * ((1 - depreciation_rate) ** 2)\n    \n    return value_after_2_years\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_row_seats = 10\n    difference = 2\n    row_number = 12\n\n    # Calculate the number of seats in the 12th row \n    # using the formula for the nth term of an arithmetic sequence: \n    # a_n = a_1 + (n - 1) * d\n    twelfth_row_seats = first_row_seats + (row_number - 1) * difference\n\n    return twelfth_row_seats\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    entrance_rate = 25\n    \n    # For one entrance\n    # no_wait_time = (visitors_per_minute * time_to_clear) / entrance_rate\n    # Thus, time_to_clear = no_wait_time * entrance_rate / visitors_per_minute\n    time_to_clear_one_entrance = 16\n    people_cleared_one_entrance = time_to_clear_one_entrance * visitors_per_minute\n    people_cleared_in_total = time_to_clear_one_entrance * entrance_rate\n\n    # With two entrances, rate is doubled\n    entrance_rate_two_entrances = 2 * entrance_rate\n\n    # Total people need to be cleared is the number of people arrived in 16 mins\n    # time_to_clear = people_cleared_one_entrance / entrance_rate_two_entrances\n    time_to_clear_two_entrances = people_cleared_one_entrance / entrance_rate_two_entrances\n\n    return time_to_clear_two_entrances\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        if round((245 * p) ** (1/3)) ** 3 == 245 * p:\n            return p\n        p += 1\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    result = 193 * 72\n    return result\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = 6**2 - 4**2\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n    total_rulers = shermaine + elvis + claudia\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # 1/3 as a recurring decimal is 0.333...\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_up = 5\n    slide_down = 3\n    net_progress = climb_up - slide_down\n\n    # Calculate the distance climbed before the last day\n    distance_before_last_day = total_distance - climb_up\n\n    # Calculate the number of full days before the last day\n    days_before_last_day = distance_before_last_day // net_progress\n\n    # Check if there is any remaining distance to be climbed on the last day\n    if distance_before_last_day % net_progress > 0:\n        days_before_last_day += 1\n\n    # Add the last day\n    full_days = days_before_last_day + 1\n    return full_days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number = (final_number - added_number) / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, lemons = symbols('oranges lemons')\n    \n    # Original ratio: oranges/lemons = 3/5\n    equation1 = Eq(oranges / lemons, 3/5)\n    \n    # New ratio after 48 oranges were sold: (oranges - 48)/lemons = 1/2\n    equation2 = Eq((oranges - 48) / lemons, 1/2)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are three fruit types: apples, pears, and cherries.\n    # Students can choose:\n    # - 1 type of fruit in 3 different ways (apple, pear, or cherry)\n    # - 2 types of fruit in 3 different ways (apple+pear, pear+cherry, or cherry+apple)\n    # - 3 types of fruit in 1 way (apple+pear+cherry)\n    # - 0 types of fruit in 1 way (no fruit)\n    \n    # Total number of different fruit choices a student can make:\n    total_choices = 3 + 3 + 1 + 1\n    \n    # By the pigeonhole principle, to ensure at least two students choose the same combination\n    # of fruits, we need one more student than the total number of choices.\n    students_needed = total_choices + 1\n    \n    return students_needed\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_to_read = total_pages / pages_per_day\n\n    return int(days_to_read)\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "from math import comb\n\ndef solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_rate = 0.10\n    discount_amount = original_price * discount_rate\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent\n    fraction_of_total = 1/4  # one-quarter spent\n    total_money = spent / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    total_legs = 32\n    ducks_legs = 3 * 2\n    parrots_legs = 2 * 2\n    rabbit_legs = 1 * 4\n    cats_legs = total_legs - (ducks_legs + parrots_legs + rabbit_legs)\n    number_of_cats = cats_legs // 4\n    return number_of_cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "from math import gcd\n\ndef solution():\n    a_students = 45\n    b_students = 75\n    c_students = 210\n\n    gcf = gcd(gcd(a_students, b_students), c_students)\n\n    return gcf\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    ans = phi(4, phi(8, 3))\n    \n    return ans\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the current ages of the younger and older brother\n    younger_current, older_current = symbols('younger_current older_current')\n    \n    # The difference in their ages remains constant\n    age_difference = older_current - younger_current\n    \n    # When older was as old as younger_current now, younger was 12\n    equation1 = Eq(older_current - age_difference, 12)\n    \n    # When younger is as old as older_current now, older will be 27\n    equation2 = Eq(younger_current + age_difference, 27)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger_current, older_current))\n    \n    return solutions[older_current]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from sympy import lcm\n\n    # lcm of 6, 8, 9, and 15\n    least_common_multiple = lcm([6, 8, 9, 15])\n\n    # minimum number of markers greater than or equal to 1000\n    min_markers = (1000 // least_common_multiple) * least_common_multiple\n    if min_markers < 1000:\n        min_markers += least_common_multiple\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of rooms\n    # Let y represent the total number of students\n    x, y = symbols('x y')\n\n    # If there are 4 people in each room, 40 students don't have dormitories\n    # So the total number of students is 4*x + 40\n    equation1 = Eq(y, 4 * x + 40)\n\n    # If there are 6 people in each room, 24 beds will be vacated\n    # So the total number of students is 6* (x-24/6) since each room that's unoccupied would have 6 beds\n    equation2 = Eq(y, 6 * (x - 24//6))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    # According to the problem, we can create equations:\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    sweets_eaten_fraction = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / sweets_eaten_fraction\n    sweets_left = total_sweets - sweets_eaten\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_current_age = 9\n    john_current_age = 5\n    jane_target_age = 15\n    age_difference = jane_current_age - john_current_age\n    john_target_age = jane_target_age - age_difference\n    return john_target_age\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // 5\n\n    nth_term = 102\n    nth_value = tenth_term + (nth_term - 10) * common_difference\n\n    return nth_value\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years = symbols('judy_age father_age years')\n\n    # Judy's father is 33 years older than her\n    equation1 = Eq(father_age, judy_age + 33)\n\n    # Sum of their ages is 63 years old\n    equation2 = Eq(judy_age + father_age, 63)\n\n    # Solve for current ages\n    current_ages = solve((equation1, equation2), (judy_age, father_age))\n\n    # Father's age was four times Judy's age years ago\n    equation3 = Eq(current_ages[father_age] - years, 4 * (current_ages[judy_age] - years))\n\n    # Solve for number of years ago\n    result = solve((equation3), (years))\n\n    return result[0]\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    # Define a variable representing the unknown number.\n    unknown_number = 13\n\n    # We know that (13 - unknown_number)^2 = 25. To find unknown_number, we need to find the square root of 25 and add that to 13, because we are subtracting the unknown number\n    squared_value = 25\n    square_root = squared_value**0.5\n\n    # There are two square roots for 25: +5 and -5. We have to consider both cases.\n    # First possibility: (13 - unknown_number) = 5\n    unknown_number1 = unknown_number - 5\n\n    # Second possibility: (13 - unknown_number) = -5\n    unknown_number2 = unknown_number + 5\n\n    # Since we are given that the coefficient of the unknown number is a whole number, we only return the result where the unknown number is a whole number\n    if unknown_number1.is_integer():\n        return int(unknown_number1)\n    else:\n        return int(unknown_number2)\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price', real=True, positive=True)\n    marked_price = 1.20 * cost_price\n    selling_price = 0.80 * marked_price\n    loss = marked_price - selling_price\n\n    equation = Eq(loss, 40)\n\n    cost_price_solution = solve(equation, cost_price)\n\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    result = (7 + 3) * 11 - (7 + (3 * 11))\n    return result\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rates of filling the tank for both taps\n    rate_x_y = 1 / 6  # Combined rate for taps X and Y\n    rate_x = 1 / 10   # Rate for tap X alone\n\n    # Using the inclusion-exclusion principle to find the rate of tap Y\n    rate_y = rate_x_y - rate_x  # Rate for tap Y alone\n\n    # Time taken for tap Y alone to fill the tank is the reciprocal of its rate\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Equation representing the total number of markers they initially had\n    equation1 = Eq(x + y, 708)\n    \n    # Equation representing the situation after Xuanrui gave away 532 markers and Yaokuan sold 3/7 of his\n    equation2 = Eq(x - 532, y - (3/7)*y)\n    \n    # Solving the simultaneous equations\n    markers = solve((equation1, equation2), (x, y))\n    \n    return markers[x]\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_rate = 0.12\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_wrong = -2\n    total_points = 44\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (correct * points_correct + wrong * points_wrong) == total_points:\n            return correct\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum([factorial(i) for i in range(1, 9)])\n    ans = factorial_sum % 100\n    return ans\n\nfrom math import factorial\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Initial volumes and concentrations\n    volume_a = 300\n    concentration_a = 20 / 100\n    volume_b = 300\n    concentration_b = 30 / 100\n\n    # Calculate the amounts of sugar in each cup\n    sugar_a = volume_a * concentration_a\n    sugar_b = volume_b * concentration_b\n\n    # Calculate the total volume and amount of sugar after mixing\n    total_volume = volume_a + volume_b\n    total_sugar = sugar_a + sugar_b\n\n    # Calculate the concentration of the mixture\n    concentration_mixture = (total_sugar / total_volume) * 100\n\n    return concentration_mixture\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    \n    equation1 = Eq(ahmad + ryan, 1442)\n    equation2 = Eq(ahmad, 6 * ryan)\n    \n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    \n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n    \n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n    \n    return marbles_to_give\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):  # Since the pages are numbered from 1 to 200\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    conversion_rate = 2.5\n    pounds = dollars / conversion_rate\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes at first,\n    # and y be the number of $10-notes at first.\n    # We have two equations based on the problem statement:\n    # 1. x + y = 95 (total number of notes)\n    # 2. x + 5y = 175 (total number of $2-notes after exchange)\n    # We can solve these equations for x and y.\n\n    # Total notes initially\n    total_notes_initially = 95\n    # Total $2-notes after exchanging all $10-notes\n    total_twos_after_exchange = 175\n\n    # Calculate the number of $10-notes before the exchange\n    tens_before_exchange = total_twos_after_exchange - total_notes_initially\n\n    # Each $10-note is exchanged for 5 $2-notes\n    # So, we need to find out how many $10-notes were exchanged\n    tens_before_exchange = tens_before_exchange // 5\n\n    # Now we can find the number of $2-notes at first\n    twos_initially = total_notes_initially - tens_before_exchange\n\n    return twos_initially\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    distance_between = 1\n    carriage_length = 27\n\n    remaining_length = total_length - head_length\n    carriage_total_length = carriage_length + distance_between\n    num_carriages = remaining_length // carriage_total_length + 1\n\n    return num_carriages\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    total_score = 82\n    \n    # Calculate score if she had answered 32 questions correctly as declared\n    declared_correct = 32\n    declared_wrong = total_questions - declared_correct\n    declared_score = (declared_correct * correct_points) + (declared_wrong * wrong_points)\n    \n    # Compare the declared score with her actual score\n    if declared_score == total_score:\n        return declared_correct\n    else:\n        # Find the actual number of correct questions\n        for correct in range(total_questions + 1):\n            wrong = total_questions - correct\n            score = (correct * correct_points) + (wrong * wrong_points)\n            if score == total_score:\n                return correct\n    return None\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    eight_in_ones = 0\n    eight_in_tens = 0\n    eight_in_hundreds = 0\n    \n    # Counting 8 in the ones place\n    for i in range(8, 289, 10):\n        eight_in_ones += 1\n    \n    # Counting 8 in the tens place\n    for i in range(80, 90):\n        eight_in_tens += 10  # 80 to 89, inclusive\n    for i in range(180, 190):\n        eight_in_tens += 10  # 180 to 189, inclusive\n    eight_in_tens += 9  # 280 to 288, inclusive\n    \n    # Counting 8 in the hundreds place (no page number 800-899 in a book with 288 pages)\n    eight_in_hundreds = 0\n\n    total = eight_in_ones + eight_in_tens + eight_in_hundreds\n    return total\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24*x - 25*y, 8)\n    solutions = solve(equation, x)\n    x_values = [sol.evalf() for sol in solutions if sol.is_integer and sol > 0]\n    return min(x_values)\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 2 * A\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n    \n    return '2.5kg' if price_per_kg_bag1 < price_per_kg_bag2 else '4kg'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "from fractions import Fraction\n\ndef solution():\n    S = 1 / sum(Fraction(1, i) for i in range(2001, 2011))\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    book_price = 4.50\n    total_books = 5\n    total_cost = book_price * total_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_value = solve_congruence(*congruences)[0]\n    return least_value\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    trees_per_side = (road_length / interval) + 1\n    total_trees = trees_per_side * 2\n\n    return int(total_trees)\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    empty_and_quarter_full = 250       # mass when jar is 1/4 full\n    empty_and_three_quarters_full = 350 # mass when jar is 3/4 full\n    \n    # since the difference in mass is due to the mass of half of the jar of Marmite:\n    half_full = empty_and_three_quarters_full - empty_and_quarter_full\n    \n    # we can calculate the mass of the empty jar by subtracting the mass of 1/4 of the jar of Marmite from the mass when jar is 1/4 full:\n    empty_jar_mass = empty_and_quarter_full - half_full / 2\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistake_eq = Eq(x / 4 - 25, 2021)\n    x_value = solve(mistake_eq, x)[0]\n    correct_ans = (x_value * 4) + 25\n    return correct_ans\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_of_one_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_of_one_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1  # Since the common difference is 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for e in range(10):\n        number = int(f'2{e}3{e}2')\n        if number % 9 == 0:\n            return e\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    proportionality_constant = 5 / 3\n    x = 5\n    y = proportionality_constant * x / 5\n\n    return \"Directly\", y\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let's denote the sequence as a_1, a_2, ..., a_n\n    # We know that a_4 = 6 and a_6 = 15, and each a_i = a_(i-1) + a_(i-2)\n    \n    # First, find a_5 using a_6 and a_4:\n    # a_6 = a_5 + a_4 => a_5 = a_6 - a_4\n    a_5 = 15 - 6  # a_5 equals 9\n    \n    # Then, find a_3 using a_4 and a_5:\n    # a_4 = a_3 + a_5 => a_3 = a_4 - a_5\n    a_3 = 6 - a_5  # a_3 equals -3\n    \n    # Now, find a_2 using a_3 and a_4:\n    # a_4 = a_3 + a_2 => a_2 = a_4 - a_3\n    a_2 = 6 - a_3  # a_2 equals 9\n    \n    # Finally, find a_1 using a_2 and a_3:\n    # a_3 = a_2 + a_1 => a_1 = a_3 - a_2\n    a_1 = a_3 - a_2  # a_1 equals -12\n    \n    # Now we know the first 5 terms of the sequence.\n    # The seventh term can be found by adding the fifth and sixth terms:\n    # a_7 = a_6 + a_5\n    a_7 = a_6 + a_5  # a_7 equals 24\n\n    return a_7\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_before_discount = cost_price * 1.50  # 50% above cost\n    selling_price_after_discount = selling_price_before_discount * 0.90  # 10% Christmas discount\n    profit = selling_price_after_discount - cost_price\n    return profit\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    num_buses = 7\n\n    total_length = (num_buses - 1) * distance_between_buses + num_buses * bus_length\n\n    return total_length\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        total_students_initial = m**2 + 5\n        total_students_after = total_students_initial + 18\n        n = int(total_students_after**0.5)\n        if n**2 == total_students_after:\n            return total_students_initial\n        m += 1\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    ans = 531 * 135\n    return ans\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    max_number = 99  # largest 2-digit number\n    while max_number > 0:\n        if max_number % 3 == 0 and max_number % 5 == 0:\n            return max_number\n        max_number -= 1\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    # The number of students in class A, B, and C\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    ans = gcd(gcd(class_A, class_B), class_C)\n\n    return ans\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # Convert 5 PM to minutes past 12:00 PM\n    badminton_duration = 45\n    jogging_duration = 30\n\n    # Total duration in minutes\n    total_duration = badminton_duration + jogging_duration\n\n    # Time when Rayson stopped jogging in minutes past 12:00 PM\n    end_time_minutes = start_time + total_duration\n\n    # Convert time back to hours and minutes\n    end_time_hour = end_time_minutes // 60\n    end_time_minute = end_time_minutes % 60\n\n    # Format the time to standard 12-hour format\n    end_time_hour = end_time_hour if end_time_hour <= 12 else end_time_hour - 12\n\n    return (end_time_hour, end_time_minute)\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    original_sum = original_average * total_numbers\n    new_sum = new_average * total_numbers\n\n    changed_number = 16\n    difference_in_sum = original_sum - new_sum\n\n    original_number = changed_number + difference_in_sum\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_for_correct = 4\n    points_for_incorrect = -2\n    rex_score = 66\n    questions_attempted = total_questions - 1\n\n    # Let c be the number of correct answers\n    # Incorrect answers will be (questions_attempted - c)\n    # 4c - 2(questions_attempted - c) = rex_score\n    # 4c - 2questions_attempted + 2c = rex_score\n    # 6c = rex_score + 2questions_attempted\n    # c = (rex_score + 2questions_attempted) / 6\n    c = (rex_score + 2 * questions_attempted) / 6\n\n    return int(c)\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = blue_pens + black_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # For Q3, we have a 3D shape problem that relates to graph theory. \n    # Since the information about the 3D shape is not provided, I'll make an assumption based on a standard 3D graph theory problem:\n    # We will count the number of vertices (V), edges (E), and faces (F) on a cube, which is a common 3D shape.\n    # According to Euler's formula for polyhedra, we have V - E + F = 2 for any convex polyhedron, including cubes.\n\n    # For a cube:\n    # V = 8 vertices (corners)\n    # E = 12 edges\n    # F = 6 faces\n    # Let's verify Euler's formula for a cube:\n    vertices = 8\n    edges = 12\n    faces = 6\n\n    ans = vertices - edges + faces\n\n    # Since we're required to return the value by calling the function, we will return the variable 'ans'.\n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's solution\n    david_sugar = 800 * 0.05\n    # Eugene's solution\n    eugene_sugar = 200 * 0.30\n    # Felix's solution\n    felix_sugar = 300 * 0.10\n    \n    # Total sugar\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution weight\n    total_solution = 800 + 200 + 300\n    \n    # Concentration of the resulting solution\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20 # litres\n    concentration1 = 35 / 100 # converting percent to fraction\n    \n    volume2 = 30 # litres\n    concentration2 = 60 / 100 # converting percent to fraction\n    \n    total_volume = volume1 + volume2 # total volume of the mixture\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2) # total litres of fruit juice\n    \n    concentration_of_mixture = (total_juice / total_volume) * 100 # converting fraction back to percent\n    \n    return concentration_of_mixture\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ini_badges = symbols('ini_badges')\n\n    # sold 5/7 on the first day\n    first_day_sold = 5 / 7 * ini_badges\n    remaining_after_first_day = ini_badges - first_day_sold\n\n    # sold 1/3 of the remaining on the second day\n    second_day_sold = 1 / 3 * remaining_after_first_day\n    remaining_after_second_day = remaining_after_first_day - second_day_sold\n\n    # made additional 354 badges, total badges became 3 times the initial amount\n    equation = Eq(remaining_after_second_day + 354, 3 * ini_badges)\n\n    # solving the equation\n    solutions = solve(equation, ini_badges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_code = \"0141705021\"\n    devil_code = \"4005220912\"\n\n    angel_code_sorted = sorted(angel_code)\n    devil_code_sorted = sorted(devil_code)\n\n    if angel_code_sorted == devil_code_sorted:\n        return True\n    else:\n        correct_password = ''.join(devil_code_sorted)\n        return correct_password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # Four people in a knockout tournament means you have to reduce to one winner.\n    # Each game eliminates one person, so you need one less than the total number\n    # of people to determine a winner in a knockout format.\n    \n    num_players = 4\n    # In first round, 2 games will be played, reducing 4 players to 2.\n    # In second round, 1 game will be played, reducing 2 players to 1 winner.\n    rounds_needed = num_players - 1\n\n    return rounds_needed\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Assuming the number is ABC (hundreds, tens, ones)\n    # Given: one of the digits is 7\n    # And the difference between any two digits is 4 or less\n    # We want to find the smallest such number\n    # Starting with 7 as the lowest possible digit and checking other digits\n    smallest_number = float('inf')\n    for A in range(7, 10):  # A can be 7, 8, or 9 since it's the hundreds place\n        for B in range(0, 8):  # B can range from 0 to 7 to maintain the difference condition\n            for C in range(0, 8):  # C can range from 0 to 7 for the same reason\n                if abs(A - B) <= 4 and abs(B - C) <= 4 and abs(A - C) <= 4:\n                    if 7 in (A, B, C):  # one of the digits must be 7\n                        number = A * 100 + B * 10 + C\n                        if number < smallest_number:\n                            smallest_number = number\n    return smallest_number\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    produced_by_both = total_exhibits - (not_produced_by_A + not_produced_by_B)\n    \n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, pick all balls of the two most populous colors and then one more.\n    balls_to_pick = 10 + 13 + 1  # 10 red, 13 green, and +1 to ensure one blue\n    return balls_to_pick\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy import solve, symbols, Eq\n\ndef solution():\n    n = symbols('n')\n    equations = [\n        Eq(n % 6, 3),\n        Eq(n % 7, 3),\n        Eq(n % 11, 5)\n    ]\n    solutions = solve(equations)\n    for sol in solutions:\n        if 200 < sol < 300:\n            return sol\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of the blouse and skirt\n    blouse, skirt = symbols('blouse skirt')\n\n    # Create equations based on the problem statement\n    # 3 skirts and 2 blouses cost $317\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    # Each skirt costs $14 more than a blouse\n    equation2 = Eq(skirt, blouse + 14)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (blouse, skirt))\n\n    # Return the cost of the blouse\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Two primes A, B and 8A-3B is a multiple of 3\n    # Rule out A=3, as it does not produce another prime B where 8A-3B is a multiple of 3\n    # B cannot be 3 either, because that would make 8A a multiple of 3, which is only true if A is also 3, which is again not possible since A and B have to be distinct primes.\n    # Start checking from the next smallest prime which is 2.\n    A = 2\n    while True:\n        # Since 8A is always even, we need to find an A such that 8A is 1 or 2 mod 3 so that subtracting B (which should be 3 mod 3 since it's prime) results in a multiple of 3.\n        # 8A mod 3 can only be 0, 1, or 2. Since A is prime and greater than 3, 8A mod 3 can never be 0 (8A would be a multiple of 3 then, which is only true if A is 3 which we've excluded).\n        # So we look for A where 8A mod 3 is 1, which upon subtracting B (which is 0 mod 3 since B is prime and B=3 is not allowed) results in something that is 0 mod 3.\n        if 8 * A % 3 == 1:\n            return A\n        # The loop skips to the next prime number\n        A += 1\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # Given that the value was £110,000 after one year, it increased by 10%\n    # Since the value increased by 10%, the original value was £100,000\n    # (because 10% of £100,000 is £10,000 and £100,000 + £10,000 = £110,000)\n    original_value = 110000 / 1.10\n\n    # In the next year, the house loses 10% of its value\n    # So now, we will subtract 10% from its increased value\n    value_after_loss = 110000 * (1 - 0.10)\n\n    # To find the profit or loss, we subtract the current value from the original\n    profit_or_loss = value_after_loss - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # There are 3 types of flowers which can be arranged in 3! ways\n    types_order = factorial(3)\n    \n    # There are 3! ways to arrange 3 roses,\n    roses_order = factorial(3)\n    # 4! ways to arrange 4 jasmines.\n    jasmines_order = factorial(4)\n    \n    # Daisy is just one, so it doesn't have different orders.\n    \n    # The final number of arrangements is the product of the possible arrangements \n    # of each type of flower and the arrangements of the types themselves.\n    total_order = types_order * roses_order * jasmines_order\n    \n    return total_order\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import gcd\n\n    num1 = 1 * 2 * 3 * 4 * 5 * 6\n    num2 = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8\n    gcd_value = gcd(num1, num2)\n\n    factors = set()\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            factors.add(i)\n\n    return len(factors)\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # Let's find the maximum number of different positive integers that sum up to 60.\n    # The maximum number of different positive integers that can sum up to any number is\n    # reached when you use the smallest integers starting from 1.\n    # For example, to make 10 with the maximum number of different terms would be 1+2+3+4.\n    # In this case, we observe a pattern, which is the sequence of natural numbers.\n    # This is related to the Triangular numbers, where the nth Triangular number is\n    # the sum of the first n natural numbers. The formula for the nth Triangular number is:\n    # T_n = n * (n + 1) / 2\n    # To find the maximum number `n` such that T_n <= 60, we can check the Triangular numbers\n    # one by one incrementing `n` until we exceed 60.\n\n    sum = 0\n    n = 0\n    while sum <= 60:\n        n += 1\n        sum = n * (n + 1) // 2\n        if sum > 60:\n            n -= 1\n            break\n    \n    return n\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Initialize pies and find a range large enough to test pies amounts.\n    pies = 0\n    while True:\n        pies += 1\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 20 / 100\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml/min\n    minutes_in_hour = 60  # 1 hour = 60 minutes\n    leak_in_hour_ml = leak_rate_per_minute * minutes_in_hour  # ml\n    leak_in_hour_litres = leak_in_hour_ml / 1000  # Convert ml to litres\n    \n    return leak_in_hour_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        s, e, o = perm\n        if s == 0:\n            continue\n        see = s*100 + e*10 + e\n        eee = e*100 + e*10 + e\n        ooo = o*100 + o*10 + o\n        if see + eee + eee == ooo:\n            return see\n    \nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainder of division by 2, 3, 4, or 6 is 1, and divisible by 7.\n    # Therefore, we create congruences of the form (remainder, modulus).\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Solve using the Chinese Remainder Theorem\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    \n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 colors of socks and Cindy needs at least one pair,\n    # which means two socks of the same color.\n    # By the Pigeonhole Principle, in the worst-case scenario,\n    # she picks one of each color without getting a pair.\n\n    # If we add one more sock to the worst-case scenario,\n    # we are guaranteed to have at least one pair of the same color.\n\n    # Worst-case scenario without pair:\n    max_socks_without_pair = 3  # One of each color\n\n    # Add one more sock to guarantee at least one pair:\n    socks_to_get_a_pair = max_socks_without_pair + 1\n\n    return socks_to_get_a_pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    total_pieces = 16\n    pieces_added = total_pieces - original_pieces\n\n    # Since each piece of paper cut into three parts adds 2 additional pieces\n    pieces_cut = pieces_added // 2\n\n    return pieces_cut\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario in order to get 2 apples of the same color:\n    # First, take one of each color\n    # So, take 1 red apple and 1 green apple (total of 2 apples)\n    # The worst case scenario to ensure the next apple is of the same color\n    # Is to pick the third apple, which must be the same color as one of the ones we already have\n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    marks = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    remaining_water = 7\n    original_volume = (volume_per_pail * number_of_pails) + remaining_water\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    x, y, z = symbols('x y z')\n\n    # Given equation\n    equation = Eq(x**20 * y**15 * z**5, 243)\n    \n    # Solve the equation for x, y, z assuming the solutions are positive\n    solutions = solve(equation, (x, y, z), dict=True)\n\n    # We need to find x^8 * y^6 * z^2\n    # Given the structure of the solutions, it is assumed there is a unique positive solution\n    computed_value = solutions[0][x]**8 * solutions[0][y]**6 * solutions[0][z]**2\n\n    return computed_value\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return int(total_age)\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    # Start with zero as the result\n    result = 0\n\n    # Iterate over pairs and subtract and add respectively\n    for i in range(1, 47, 2):\n        result += (i+1) - i\n\n    return result\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    c = (35 + 5) / (5 * 6)\n    return c\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the cost of one book and one pencil box\n    cost_book, cost_pencil_box = symbols('cost_book cost_pencil_box')\n\n    # Equations based on the given problem\n    equation1 = Eq(2 * cost_book + 3 * cost_pencil_box, 42)\n    equation2 = Eq(2 * cost_book + 6 * cost_pencil_box, 60)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (cost_book, cost_pencil_box))\n\n    return solutions[cost_pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    def get_last_nonzero_digit(n):\n        last_digit = 1\n        for i in range(1, n + 1):\n            last_digit *= i\n            while last_digit % 10 == 0:    # Removing trailing zeros\n                last_digit //= 10\n            last_digit %= 100000          # Keeping track of the last non-zero digit in a running product\n        return last_digit % 10\n    \n    ans = get_last_nonzero_digit(2010)\n    return ans\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    sequence.sort()\n    mid = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[mid - 1] + sequence[mid]) / 2\n    else:\n        median = sequence[mid]\n    return median\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2\n\n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    from math import comb\n\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    per_day_paving = 50\n    num_days = total_length // per_day_paving\n\n    return num_days\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # Using sympy to factor the expressions and find the exponents of numbers\n    from sympy import factorint\n    \n    # Condition 1: product of 42 and x equals to square of 42\n    x = 42\n    # Condition 2: all factors' exponents of product of 42 and y equal to 1\n    y_factors = factorint(42 * 42)\n    y = 1\n    for base, exponent in y_factors.items():\n        if exponent % 2 != 0:\n            y *= base\n            \n    return x + y\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    daily_fodder_per_cattle = 10\n    num_cattles = 8\n    num_days = 4\n\n    total_fodder = daily_fodder_per_cattle * num_cattles * num_days\n\n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # Let's denote the weight of dog, rabbit and chicken as d, r, c respectively\n    d = 8  # Because 1 dog weighs as much as 8 rabbits\n    r = 2  # Because 1 rabbit weighs as much as 2 chickens\n    \n    # If 1 rabbit is equal to 2 chickens, then 1 dog which is 8 rabbits will be:\n    chickens_equivalent_to_one_dog = d * r\n    \n    return chickens_equivalent_to_one_dog\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    remaining_marbles = 35\n    marbles_given_to_nate = 30\n    marbles_given_to_ollie = 26\n    fraction_given_to_mark = 5 / 12\n    total_marbles_after_giving_to_mark = remaining_marbles + marbles_given_to_nate + marbles_given_to_ollie\n    initial_marbles = total_marbles_after_giving_to_mark / (1 - fraction_given_to_mark)\n    return int(initial_marbles)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sweets Jess and Jill originally have\n    jess, jill = symbols('jess jill')\n\n    # Equation representing the original ratio of sweets\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Equation representing the new ratio after Jill gives 8 sweets to Jess\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # total weight of the sugar solution in grams\n    concentration = 0.22  # sugar concentration in the solution\n    \n    sugar_weight = total_weight * concentration  # calculating the weight of sugar based on concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for i in range(1, 100):\n        digits = [int(digit) for digit in str(i)]\n        total += sum(digits)\n    return total\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one pie, then the cost of one cake is x + 13\n    # Let p be the number of pies sold, then the number of cakes sold is p/4\n    # Total money from pies is p * x, from cakes is (p / 4) * (x + 13)\n    x, p = symbols('x p')\n\n    # Eq1: The ratio of money from pies to cakes is 15:7\n    eq1 = Eq(p * x / ((p / 4) * (x + 13)), 15 / 7)\n\n    # Eq2: Total money from pies and cakes is $1848\n    eq2 = Eq(p * x + (p / 4) * (x + 13), 1848)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, p))\n\n    # We take the positive solution as it doesn't make sense to have negative prices or amounts\n    positive_solution = [sol for sol in solutions if sol[x] > 0 and sol[p] > 0][0]\n    cake_count = positive_solution[p] / 4\n\n    return int(cake_count)\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    part_given = total_money * 1/4\n    return part_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    today = datetime.today()\n    fred_age_years = 38\n    fred_age_months = 6\n    fred_birthdate = today.replace(year=today.year - fred_age_years) - timedelta(days=fred_age_months*30)\n\n    return fred_birthdate.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money Hanson had at first\n    x = symbols('x')\n\n    # After spending 1/4 of his money and an additional $3, he has 3/4 left\n    # So the equation for the first transaction is: x - 1/4*x - 3 = 3/4*x - 3\n    \n    # He then spends 3/5 of the remaining money and an additional $6\n    # So the equation for the second transaction is: (3/4*x - 3) - 3/5*(3/4*x - 3) - 6\n    \n    # We know he was left with $24, so we set up the equation: 3/4*x - 3 - 3/5*(3/4*x - 3) - 6 = 24\n    \n    remaining_after_CDs = 3/4*x - 3\n    remaining_after_batteries = remaining_after_CDs - 3/5*remaining_after_CDs - 6\n\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n  \n    even_digits = ['0', '6', '8']\n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    return beads[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Define the speeds in m/min\n    speed_qiqi = 60\n    speed_weiling = 72\n\n    # Weiling starts 2 minutes after Qiqi\n    time_diff_start = 2\n\n    # Weiling arrives 4 minutes before Qiqi\n    time_diff_arrival = 4\n\n    # qiqi_time - weiling_time = time_diff_start + time_diff_arrival\n    # distance = speed_qiqi * qiqi_time = speed_weiling * weiling_time\n    # Combine the equations to find the time taken by Qiqi\n    qiqi_time = (time_diff_start + time_diff_arrival) / (1 - (speed_qiqi / speed_weiling))\n\n    # Calculate the distance using Qiqi's time and speed\n    distance = speed_qiqi * qiqi_time\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Find the unit digit for each power\n    # Since 9^n has a pattern in unit digits: 9, 1, 9, 1, ...\n    # We want to find the units for 9^2015 and 9^2016\n    \n    # For 9^2015, which is 9^(4*503 + 3), the unit digit is 9 because it's 3 positions after 9 in the pattern\n    unit_2015 = 9\n    \n    # For 9^2016, which is 9^(4*504), the unit digit is 1 because it's exactly multiples of 4\n    unit_2016 = 1\n    \n    # The sum of the units is 9 + 1 = 10, so the unit digit of the sum is 0\n    ans = (unit_2015 + unit_2016) % 10\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial as fact\n\n    # Number of ways to arrange 5 men\n    men_arrange = fact(5)\n    \n    # Number of possible positions between men and at the ends for women\n    spaces_for_women = 6  # _M_M_M_M_M_ (6 spaces)\n    \n    # Number of ways to arrange 3 women in these 6 positions\n    women_arrange = fact(spaces_for_women) // fact(spaces_for_women - 3)\n    \n    # Total number of ways\n    total_arrange = men_arrange * women_arrange\n\n    return total_arrange\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    length1 = 45\n    length2 = 30\n\n    longest_length = gcd(length1, length2)\n\n    return longest_length\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_current_time = 11 * 60 + 50  # Marc's watch time in minutes (11:50 AM -> 710 minutes)\n    marc_current_time -= 15  # Adjusting for slowness (695 minutes)\n    \n    # Adding half an hour (30 minutes) to the corrected time\n    time_in_half_hour = marc_current_time + 30  # (725 minutes)\n    \n    # Adjust George's watch, which is 7 minutes fast\n    george_time_in_half_hour = time_in_half_hour + 7  # (732 minutes)\n    \n    # Convert the time back into hours and minutes\n    hours = george_time_in_half_hour // 60\n    minutes = george_time_in_half_hour % 60\n    \n    # Since the 24-hour clock wasn't specified, assuming the question implies a 12-hour clock\n    # Adjust hours if it is greater than 12 (handles 12+ hours)\n    hours = hours if hours <= 12 else hours - 12\n    \n    ans = f\"{hours}.{minutes:02d}\" if minutes >= 10 else f\"{hours}.0{minutes}\"\n    \n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    T, income = symbols('T income')\n\n    # Two scenarios for tax calculation\n    # - The first 30000 at T%\n    # - Any amount above 30000 at (T+3)%\n    tax_for_first_30000 = T * 30000 / 100\n    tax_above_30000 = (T + 3) * (income - 30000) / 100\n\n    # Total tax paid is (T+1)% of the annual income\n    total_tax_paid = (T + 1) * income / 100\n\n    # Ryan's tax is the sum of both scenarios\n    # If income <= 30000, then the total tax paid is tax_for_first_30000\n    # If income > 30000, then the total tax paid is tax_for_first_30000 + tax_above_30000\n    equation = Eq(total_tax_paid, tax_for_first_30000 + tax_above_30000)\n\n    # Since the tax above 30000 only applies if Ryan's income is greater than 30000, we need to set up two solutions and compare\n    solution1 = solve(Eq(total_tax_paid, tax_for_first_30000), (T, income))\n    solution2 = solve((equation, income > 30000), (T, income))\n\n    # Determine which solution is valid based on the income\n    annual_income = solution1[income] if solution1[income] <= 30000 else solution2[income]\n\n    return annual_income\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    total_amount = 540\n    result = percentage * total_amount\n    return result\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    h_value = solve(equation, h)[0]\n\n    return h_value\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - fall_down\n    jumps_before_last = (total_height - jump_up) // effective_jump\n    \n    # Jumps required to reach or exceed the height before the last jump\n    if (total_height - jump_up) % effective_jump != 0:\n        jumps_before_last += 1\n\n    # Final jump to reach the top\n    total_jumps = jumps_before_last + 1\n\n    return total_jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_mark = 5\n    wrong_mark = -1\n    total_marks = 90\n\n    for correct_questions in range(total_questions + 1):\n        wrong_questions = total_questions - correct_questions\n        if correct_questions * correct_mark + wrong_questions * wrong_mark == total_marks:\n            return correct_questions\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n    \n    combined_rate = a_rate + b_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We will use the worst-case scenario for the pigeonhole principle.\n    \n    # We assume we are very unlucky and draw 3 marbles of the same color first (worst case),\n    # since we want 4 different colors, we must draw marbles until we get 4 different colors.\n    # We start by taking the maximum from a single color:\n    max_single_color = 12  # There are 12 red marbles, the most of any color.\n    \n    # Then, to ensure 4 different colors, we must draw one from each of the other 3 colors,\n    # just to be safe in the worst case scenario.\n    must_draw_other_colors = 9 + 8 + 3 - 3  # Take one less from each of the other colors, as the last marble can be any color.\n\n    # Therefore, the total number of marbles drawn will be:\n    total_drawn = max_single_color + must_draw_other_colors\n\n    return total_drawn\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 7 == 0 and (num - 2) % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    gigi_birthday_2002 = 45\n    jenny_birthday_1995 = 22\n\n    # Calculate the year when Gigi was 22\n    gigi_year_when_22 = (2002 - gigi_birthday_2002) + 22\n\n    # Calculate the difference in years between Gigi and Jenny's ages in 1995\n    age_difference = 1995 - gigi_year_when_22\n\n    # Calculate how old Jenny was when Gigi was 22\n    jenny_age_when_gigi_22 = jenny_birthday_1995 - age_difference\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    count = 0\n    \n    while term > 0:\n        count += 1\n        term += difference\n    \n    return count\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    result = 1.29 * 1000\n    return result\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits = [2, 0, 1, 9, 0, 4, 0, 6]  # Digits of the given number except A\n    total = sum(digits)  # Sum of the given digits\n    for A in range(10):  # Loop through all possible values of A (0-9)\n        if (total + A) % 9 == 0:  # Check divisibility by 9\n            return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    # Start with a number that ends in '2' and is at least a multiple of 8.\n    # Since it ends in 2, the last digit is 2, and it must be the smallest two-digit number that is a multiple of both 3 and 8.\n    # Hence, we start with 8 and keep adding 80 (which is a multiple of 8 and leaves last digit as 2) until we find a number that is also a multiple of 3\n    num = 8\n    while num % 3 != 0 or str(num)[-1] != '2':\n        num += 80\n    ans = num\n    return ans\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        code_number = int(\"451\" + str(last_digit))\n        if code_number % 3 == 0 and code_number % 5 != 0 and code_number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15 May', '%d %B')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * (5 / 3))\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n\n    # Since we need at least 1 apple in each group, the maximum any group can have is total_apples - 1\n    # The other group would have at least 1 apple, ensuring both conditions are met.\n    for apples_in_first_group in range(1, total_apples):\n        apples_in_second_group = total_apples - apples_in_first_group\n        if apples_in_first_group != apples_in_second_group:\n            count += 1\n\n    # Every pair is counted twice (e.g., 1&11 and 11&1), so divide the count by 2.\n    return count // 2\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    ship_speed = 25\n    current_speed = 3\n    downstream_speed = ship_speed + current_speed\n    distance = 140\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return round(total_cost, 2)\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost = 3.25\n    cupcakes_total_cost = 3 * cupcake_cost\n    cans_total_cost = total_cost - cupcakes_total_cost\n    can_cost = cans_total_cost / 2\n    return can_cost\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences) - 1)]\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Assume A people on full buses and B people on full buses\n    # A + 11 + remaining from B = 36 (one bus)\n    # Hence, remaining from B = 36 - 11 = 25\n    # This implies A is a multiple of 36 and B is 25 more than a multiple of 36\n    # A * B = number of pictures taken\n    # Since each full roll of film can take exactly 36 pictures\n    # We want to find A * B % 36 to find out how many more pictures the last roll can take\n    \n    for A in range(36, 1000, 36): # Assign a reasonable upper limit\n        B = 25  # We start our B value at 25, which will increase in steps of 36\n        while B < A:  # Ensure that B value is always less than A\n            total_pictures = A * B\n            remaining_pictures = total_pictures % 36\n            # As soon as we find remaining pictures less than 36, we know we found our solution\n            if remaining_pictures > 0 and remaining_pictures < 36:\n                return 36 - remaining_pictures  # we're asked for how many more can the last roll take, i.e. 36 - remainder\n            B += 36  # Increase B to the next possibility\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "from itertools import permutations\n\ndef solution():\n    # There are 3 individuals other than A who can receive the ball\n    others = ['B', 'C', 'D']\n    \n    # Count of different methods\n    count = 0\n    \n    # Generate all permutations of the 3 passes among the other 3 individuals\n    pass_permutations = permutations(others, 3)\n    \n    # Iterate through each pass permutation\n    for passes in pass_permutations:\n        # If the last pass is not made to A, it does not form a valid sequence\n        if passes[-1] == 'A':\n            continue\n        # Check if no pass is made back to the immediate previous person\n        # This ensures the ball moves immediately to someone new every pass\n        if any(passes[i] == others[i] for i in range(2)):\n            continue\n        # This is a valid sequence, so increment count\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, ming = symbols('daniel ming')\n    \n    # Daniel's age is four times Ming's age\n    equation1 = Eq(daniel, 4 * ming)\n    # Six years later, the sum of their ages is 62 years\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Speed is distance/time, since the speed is the same across both bridges,\n    # we can calculate the speed from the first bridge\n    speed = 9 / 8  # Speed in meters per second\n\n    # The time it takes to cross the first bridge is the length of the line plus\n    # the length of the bridge divided by the speed\n    # 3 + 9 = 12 meters total distance for the first bridge\n    # Since the speed is the same, the time to cross the second bridge is\n    # length of line + length of second bridge = 10 * speed\n\n    # Rearrange to solve for the length of the second bridge\n    length_of_second_bridge = (10 * speed) - 3\n\n    return length_of_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = 0\n    for i in range(2, 1001, 4):\n        ans += i**2 - (i - 2)**2\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    target_product = 2688\n    for i in range(2, int(target_product ** (1/3)) + 1, 2):  # Only check even numbers\n        if i * (i + 2) * (i + 4) == target_product:\n            return i + 4  # the largest one among the three consecutive even numbers\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # converting 11.55 am to total minutes past midnight\n    end_time = (13 * 60) + 40    # converting 1.40 pm to total minutes past midnight (13:00 is 1:00 pm)\n\n    duration = end_time - start_time  # duration of game play in minutes\n\n    return duration\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    people_left = 11\n    people_right = 7\n    crystal = 1  # Including Crystal herself\n\n    # Assume each row is facing the same direction, so Crystal's left and right counts are for her row only.\n    total_in_row = (people_left + people_right + crystal)\n\n    # There are 2 rows, so we double the count of one row to get the total class count.\n    total_class = total_in_row * 2\n\n    return total_class\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 3 == 0 and number % 11 == 0:\n            if (number - 1) % 2 == 0 and (number - 1) % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for easier calculation\n    first_light_seconds = 30  # 0.5 minutes\n    second_light_seconds = 45  # 0.75 minutes\n    # We want to determine the third light in seconds\n\n    # The first two lights together would turn green every this many seconds:\n    both_lights_lcm = lcm(first_light_seconds, second_light_seconds)\n\n    # Every 9 minutes, all three lights should be green, so we calculate the lcm with 9 * 60 seconds\n    all_lights_lcm = lcm(both_lights_lcm, 9 * 60)\n\n    # The shortest possible time for the third light is when it coincides with both_lights_lcm\n    third_light = all_lights_lcm // both_lights_lcm\n\n    # Convert the time back to minutes, and make sure it's at least 30 seconds or longer\n    third_light_seconds = max(third_light, 30)\n\n    return third_light_seconds\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n\n    # since there must be at least 1 cupcake in each group and they must be different\n    # if the smaller group has x cupcakes, the other group will have (10 - x) cupcakes\n    # thus x can range from 1 to total_cupcakes // 2 because beyond that the groups would not be different\n    ways = total_cupcakes // 2\n\n    return ways\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(224)\n    num_factors = 1\n    for power in factors.values():\n        num_factors *= power + 1\n\n    return num_factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n    \n    break_start = start_time + 3 * lesson_duration + 2 * moving_period\n    return break_start.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n\n    total_weight_g = weight_per_paper_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000  # convert grams to kilograms\n\n    return total_weight_kg\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    a = 28\n    b = 84\n    c = 126\n\n    ans = gcd(gcd(a, b), c)\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Troy and Adam\n    troy, adam = symbols('troy adam')\n\n    # Initial conditions\n    equation1 = Eq(troy, 5 * adam)\n    \n    # After Adam took 24 more coins\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solve the equations\n    solved_values = solve((equation1, equation2), (troy, adam))\n\n    # Calculate total coins they had at first\n    total_coins = solved_values[troy] + solved_values[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_wins = 12018\n    jasmine_wins = 309\n    total_wins = neha_wins + jasmine_wins\n    return total_wins\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the number of $5 notes and $10 notes\n    num_5_notes, num_10_notes = symbols('num_5_notes num_10_notes')\n\n    # Total amount of $5 notes and $10 notes is 57\n    total_notes_equation = Eq(num_5_notes + num_10_notes, 57)\n\n    # Amount spent and left\n    spent_10_notes = 0.6 * num_10_notes  # 60% of the $10 notes were spent\n    spent_5_notes = 0.25 * num_5_notes   # 25% of the $5 notes were spent\n\n    left_10_notes = num_10_notes - spent_10_notes  # $10 notes left\n    left_5_notes = num_5_notes - spent_5_notes     # $5 notes left\n\n    # After spending, he has twice as many $10 notes as $5 notes\n    left_notes_equation = Eq(left_10_notes, 2 * left_5_notes)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_equation, left_notes_equation), (num_5_notes, num_10_notes))\n\n    # Calculate the cost of the bag by summing up the amount spent\n    cost_of_bag = spent_10_notes.subs(num_10_notes, solutions[num_10_notes]) * 10 \\\n                + spent_5_notes.subs(num_5_notes, solutions[num_5_notes]) * 5\n\n    return cost_of_bag.evalf()\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the initial amount of money Hanson had as x\n    x = symbols('x')\n\n    # Hanson spent 1/4 of his money and an additional $3 on CDs\n    money_after_CDs = x - (x/4 + 3)\n\n    # He then spent 3/5 of the remaining money and an additional $6 on batteries\n    money_after_batteries = money_after_CDs - (3/5 * money_after_CDs + 6)\n\n    # He was left with $24\n    equation = Eq(money_after_batteries, 24)\n\n    # Solve the equation to find the initial amount of money Hanson had (x)\n    solution = solve(equation, x)\n\n    # Return the solution, which is the amount Hanson had initially\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        product = 1\n        for digit in str(number):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    # Loop through all possible 3-digit numbers\n    for i in range(100, 1000):\n        if i % 2 == 0: # Check if the number is even\n            digits = [int(x) for x in str(i)]\n            if sum(digits) == 8 and len(set(digits)) == 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Maximum number of beads that can be drawn without getting 5 green ones\n    # is the sum of all blue and white beads, plus 4 green ones\n    max_not_5_green = (5 + 6 + 4)\n\n    # To ensure the 5th green bead, Darrell must draw one more than the maximum\n    min_to_get_5_green = max_not_5_green + 1\n\n    return min_to_get_5_green\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    num = (1/2) / (1/4) * 16\n    return num\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Group stage: 4 groups, 4 people each, round-robin (each pair plays once)\n    group_games = 4 * (4 * 3 // 2)  # In each group, each team plays 3 games\n\n    # Knockout round: top 2 from each group, single elimination\n    # Top 8: 4 games\n    # Top 4: 2 games\n    # Top 2 and third place: 2 games (one final, one third-place playoff)\n    knockout_games = 4 + 2 + 2\n\n    # Total games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A_time = symbols('A_time')\n    # A is twice as good as B, B takes B_time days, A takes B_time / 2 days\n    B_time = A_time * 2\n    # A finishes 12 days less than B\n    equation = Eq(A_time * 2 - 12, A_time)\n    # Solve for A's time\n    A_time_value = solve(equation, A_time)[0]\n    B_time_value = A_time_value * 2\n\n    # Work time when A and B work together\n    # 1 / A_time_value + 1 / B_time_value = 1 / combined_time\n    combined_time = symbols('combined_time')\n    equation_combined = Eq(1 / A_time_value + 1 / B_time_value, 1 / combined_time)\n    combined_time_value = solve(equation_combined, combined_time)[0]\n\n    return combined_time_value\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    for num in range(1, 5*6*11 + 1):\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "def solution():\n    from math import factorial\n\n    total_plants = 9\n    arrangement_plants = 4\n\n    # Number of ways to arrange 4 out of 9 plants = 9P4 = 9! / (9-4)!\n    num_ways = factorial(total_plants) // factorial(total_plants - arrangement_plants)\n\n    return num_ways\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    stickers_given = 76\n    stickers_received = 65\n\n    initial_stickers = final_stickers + stickers_given - stickers_received\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    import math\n\n    # 15 = 3 * 5 and 21 = 3 * 7 are factors of the number, so 3 is a common factor.\n    # The least common multiple of 15 and 21 is 3 * 5 * 7 = 105\n    # Since the number has only eight factors, it is either a cube of a prime p^3 or a product of two different primes p * q\n    # In this case, since 105 (3 * 5 * 7) is a factor and is also the product of different primes,\n    # the number must be of the form 3 * 5 * 7 * x, where x is another prime factor.\n    # The only way to have exactly eight factors is if the number is a product of three primes, one of which is squared.\n    # Thus, the number is 3^2 * 5 * 7 = 3 * 105 = 315.\n\n    number = 3**2 * 5 * 7\n\n    # Calculate the sum of all factors of the number\n    factors_sum = sum(set(factor for i in range(1, int(math.sqrt(number)) + 1) if number % i == 0 for factor in (i, number//i)))\n    return factors_sum\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789'):\n        if perm[0] != '8':  # Ensuring the leftmost digit is 8\n            continue\n        if int(''.join(perm[0:1])) % 1 == 0 and \\\n           int(''.join(perm[0:2])) % 2 == 0 and \\\n           int(''.join(perm[0:3])) % 3 == 0 and \\\n           int(''.join(perm[0:4])) % 4 == 0 and \\\n           int(''.join(perm[0:5])) % 5 == 0 and \\\n           int(''.join(perm[0:6])) % 6 == 0 and \\\n           int(''.join(perm[0:7])) % 7 == 0 and \\\n           int(''.join(perm[0:8])) % 8 == 0 and \\\n           int(''.join(perm[0:9])) % 9 == 0 and \\\n           int(''.join(perm[0:10])) % 10 == 0:\n            ans = int(''.join(perm))\n            return ans\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda = 36\n    matthew = belinda - 7\n    \n    # Belinda gave 7 tomatoes to Matthew\n    belinda_after = belinda - 7\n    matthew_after = matthew + 7\n    \n    # After giving the tomatoes, they have the same amount\n    # So Matthew initially had belinda_after - matthew_after tomatoes\n    matthew_initial = belinda_after - matthew_after\n    \n    return matthew_initial\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_televisions = 10\n    increased_efficiency = 0.5\n    televisions_with_increased_efficiency = base_televisions * (1 + increased_efficiency)\n    return televisions_with_increased_efficiency\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # The difference between the two numbers\n    diff = 2012 - 1274\n\n    # Get the greatest common divisor (GCD) of the difference and the smaller number (1274)\n    # This GCD will be the largest possible divisor D, since both numbers must leave the same remainder R when divided by D.\n    D = gcd(diff, 1274)\n\n    # Now we need to find R, which is the remainder when either number is divided by D.\n    R = 2012 % D\n\n    # The final answer is D - R.\n    answer = D - R\n    return answer\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # Let x be the number of rabbits, y be the number of ducks\n    # We know that x + y = 7 (total number of animals)\n    # A rabbit has 4 legs and a duck has 2 legs, so 4x + 2y = 20 (total number of legs)\n    \n    # We can rearrange the equations to:\n    # y = 7 - x\n    # 4x + 2y = 20\n    \n    # By substituting y = 7 - x into the second equation:\n    # 4x + 2(7 - x) = 20\n    # 4x + 14 - 2x = 20\n    # 2x = 20 - 14\n    # 2x = 6\n    # x = 3\n    \n    # Therefore, there are 3 rabbits on the farm\n    return 3\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    win_positions = [0] * 53\n    lose_positions = []\n\n    # Initialize the positions that lead directly to a win\n    for i in [1, 3, 4, 6]:\n        win_positions[i] = 1\n\n    # Find the rest of the win positions dynamically\n    for i in range(2, 53):\n        if win_positions[i] == 0:\n            # If there's a move that leads directly to a losing position\n            if any(win_positions[i - move] == 0 for move in [1, 3, 4, 6]):\n                win_positions[i] = 1\n            else:\n                lose_positions.append(i)\n\n    # Winning strategy\n    # Betty (first player) should aim to leave a losing position for Abby\n    # If the initial state (52) is a losing position, she can't win by going first\n    if win_positions[52] == 0:\n        return (\"Second\", lose_positions)\n    else:\n        # Initial state is a win, she should aim to leave Abby with a losing state after her turn\n        # Thus she subtracts the moves that will leave Abby in the lose position\n        first_move = next(move for move in [1, 3, 4, 6] if win_positions[52 - move] == 0)\n        return (\"First\", first_move)\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Using the Chinese Remainder Theorem to find the smallest number\n    # that leaves a remainder of 1 when divided by 5, 6, and 7\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    \n    grace_juice = (5 / 7) * total_juice\n    remaining_after_grace = total_juice - grace_juice\n    \n    evelyn_juice = (1 / 9) * remaining_after_grace\n    remaining_after_evelyn = remaining_after_grace - evelyn_juice\n    \n    return remaining_after_evelyn\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # The last digit of a power of 4 cycles every 2 powers: 4, 6, 4, 6, ...\n    # Thus, the last digit of 4^2009 is the same as the last digit of 4^1, which is 4.\n    last_digit_of_4_power = 4\n    \n    # The last digit of a power of 6 is always 6, since 6^1 is 6 and it does not change with higher powers.\n    last_digit_of_6_power = 6\n    \n    # Sum the last digits and find the last digit of the result\n    last_digit_sum = (last_digit_of_4_power + last_digit_of_6_power) % 10\n    \n    return last_digit_sum\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 32):  # Since 2*31 is the max that still allows at least one 5-gram weight\n        for five_gram_weights in range(0, 13):  # Since 5*12 is the max that still allows at least one 2-gram weight\n            if 2 * two_gram_weights + 5 * five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    n1 = 8\n    n2 = 22\n    n3 = 15\n    \n    S1 = 32\n    S2 = 44\n    \n    # Calculate the common difference (d) and the first term (a) using the given sums\n    # S_n = n/2 * (2*a + (n-1)*d)\n    # We have two equations:\n    # S1 = n1/2 * (2*a + (n1-1)*d)\n    # S2 = n2/2 * (2*a + (n2-1)*d)\n    # We can solve these two equations to find a and d\n    \n    # By substituting S1 and S2:\n    # 32 = 4 * (2*a + 7*d)\n    # 44 = 11 * (2*a + 21*d)\n    \n    # We can rewrite these equations as:\n    # 8a + 28d = 32   ... (1)\n    # 22a + 231d = 44  ... (2)\n    \n    # Now solve the equations for a and d, multiply equation (1) by 11 and equation (2) by 4 and subtract them\n    # 88a + 308d - 88a - 924d = 352 - 176\n    # -616d = 176\n    d = (352 - 176) / -616\n    \n    # And now solve for a using the first equation 8a + 28d = 32\n    a = (32 - 28*d) / 8\n    \n    # Now find the sum of the first 15 terms using the values of a and d\n    # S3 = n3/2 * (2*a + (n3-1)*d)\n    S3 = n3 / 2 * (2*a + (n3-1)*d)\n    \n    return S3\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_two = total_height - total_height_of_four\n    average_height_of_two = total_height_of_two / 2\n    return average_height_of_two\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, pool = symbols('a b c pool')\n    # a + c = pool + 18\n    equation1 = Eq(a + c, pool + 18)\n    # b + c = pool + 27\n    equation2 = Eq(b + c, pool + 27)\n    # b = 2 * a\n    equation3 = Eq(b, 2 * a)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c, pool))\n\n    return solutions[pool]\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    points_not_attempted = 0\n    rex_score = 66\n    questions_attempted = total_questions - 1 # Rex attempted all but one question\n\n    # Let x be the number of correct answers\n    # Then questions_attempted - x will be the number of incorrect answers\n    # We can set up the following equation based on the score definition\n    # x * points_correct + (questions_attempted - x) * points_incorrect = rex_score\n    # We will solve for x using a simple loop\n\n    for x in range(questions_attempted + 1):\n        if x * points_correct + (questions_attempted - x) * points_incorrect == rex_score:\n            return x\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum of the sequence: 1 + 2 + 3 + ... + 19 + 20\n    forward_sum = sum(range(1, 21))\n    # Calculate the sum of the sequence: 19 + 18 + ... + 2 + 1\n    backward_sum = sum(range(1, 20))\n    # The final result is the sum of both sequences\n    ans = forward_sum + backward_sum\n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial as fact\n\n    # There are 4 letters to be painted, and for each letter, \n    # we can choose from 5 colors, but they need to be unique.\n    \n    # The number of ways to choose colors for each letter is\n    # equal to the number of permutations of 5 colors taken 4 at a time.\n\n    # Number of permutations: P(n, k) = n! / (n-k)! where n = 5, k = 4\n\n    num_ways = fact(5) / fact(5-4)\n    return int(num_ways)\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reverse digits\n        if reversed_age + 1 == age / 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_first = 20\n    meatballs_left_second = 10\n    meatballs_difference = meatballs_left_first - meatballs_left_second\n    \n    # Since one student makes the leftovers decrease by the number of meatballs every student gets,\n    # that number must be the difference in leftovers when one more student is served.\n    meatballs_per_student = meatballs_difference\n\n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    initial_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = initial_amount * increase_fraction\n    final_amount = initial_amount + increase_amount\n    return final_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_after_day1 = symbols('remaining_after_day1')\n    equation_day1 = Eq(remaining_after_day1, remaining_after_day1 / 2 + 7)\n\n    remaining_after_day2 = symbols('remaining_after_day2')\n    equation_day2 = Eq(remaining_after_day2, (remaining_after_day1 - remaining_after_day2) / 2 - 5)\n\n    total_questions = remaining_after_day1 + remaining_after_day2 + 23\n\n    # Solve the equations\n    solutions = solve((equation_day1, equation_day2), (remaining_after_day1, remaining_after_day2))\n\n    return int(solutions[remaining_after_day1] + solutions[remaining_after_day2] + 23)\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water = 1000  # water in jug initially in ml\n    water_poured = 200 * 3  # total water poured into cups in ml\n    water_left = total_water - water_poured  # water left in jug in ml\n\n    return water_left\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    \n    # Difference between the numbers divided by the difference of their positions (15-10)\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n\n    # Now to find the 12th number, we subtract 10 from 12 to find how many differences we add to the 10th term\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n\n    return twelfth_number\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original numbers of roses and daisies be r and d respectively\n    r, d = symbols('r d')\n\n    # Let the number of months be m\n    m = symbols('m')\n\n    # Total number of roses and daisies initially is 300\n    total_initial = Eq(r + d, 300)\n\n    # After m months, the number of roses will be r + m\n    # and the number of daisies will be d + m\n    # At that time, there are 280 roses and 180 daisies\n    future_roses = Eq(r + m, 280)\n    future_daisies = Eq(d + m, 180)\n\n    # Solve the system of equations\n    solutions = solve((total_initial, future_roses, future_daisies), (r, d, m))\n\n    # We need to find the original number of roses\n    return solutions[r]\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    from math import sqrt\n\n    count = 0\n    for i in range(1, 251):\n        if sqrt(i).is_integer():\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_questions = 10 + 20 + 30\n    total_correct = (10 * 0.20) + (20 * 0.80) + (30 * 0.90)\n    \n    overall_score_percentage = (total_correct / total_questions) * 100\n    \n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    area_per_large_brick = 6 * 6  # in decimeters^2\n    area_per_small_brick = 64 / 100  # convert cm^2 to dm^2\n\n    total_area = 80 * area_per_large_brick\n\n    num_small_bricks = total_area / area_per_small_brick\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n    total_cost = 2.55\n    water_more_than_fruit = 0.15\n\n    equation1 = Eq(2 * water + 3 * fruit, total_cost)\n    equation2 = Eq(water, fruit + water_more_than_fruit)\n\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    ans = fraction_value > decimal_value\n    return ans\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    all_permutations = permutations([1, 3, 4, 5, 7, 8])\n    valid_numbers = []\n\n    for perm in all_permutations:\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            valid_numbers.append(number)\n\n    return max(valid_numbers)\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls - boys, 30)\n    equation2 = Eq(girls + boys, 500)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False  # 91 is not a prime number because it is divisible by i\n    return True  # This line will not be reached for n=91\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    ribbon_A = 10\n    ribbon_B = 5 * ribbon_A\n    total_length = ribbon_A + ribbon_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    ans = comb(total_players, team_size)\n    return ans\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Let x be the side length of the square for boys and x-2 be the side length for girls\n    # Boys = x*x and Girls = (x-2)*(x-2)\n    # The equation will be x*x - (x-2)*(x-2) = 31\n    # We loop through possible values of x (side length should be positive and odd)\n    for x in range(1, 1000, 2):\n        if x * x - (x - 2) * (x - 2) == 31:\n            # Total number of students = Total boys + Total girls\n            total_students = x * x + (x - 2) * (x - 2)\n            return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    import math\n    \n    # Number of 4's\n    num_fours = 2018\n    # Number of 25's\n    num_twentyfives = 2018\n    \n    # 4 = 2^2, so each 4 contributes 2 to the power of 2\n    exponent_twos = 2 * num_fours\n    \n    # 25 = 5^2, so each 25 contributes 2 to the power of 5\n    exponent_fives = 2 * num_twentyfives\n    \n    # Since the base is 10 for our number system, we want to convert all factors to base 10\n    # 10 = 2 * 5. So our number A is equivalent to 10 to the power of minimum of exponent_twos and exponent_fives\n    exponent_tens = min(exponent_twos, exponent_fives)\n    \n    # Calculate A using the number of tens\n    A = 10 ** exponent_tens\n    \n    # Count the number of digits in A\n    num_of_digits = int(math.log10(A)) + 1\n    \n    return num_of_digits\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = (new_profit / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of apples Mr. Aziz had initially and in the end\n    initial_apples, end_apples = symbols('initial_apples end_apples')\n\n    # Mr. Aziz sold 1/5 of the apples on Monday\n    sold_monday = initial_apples / 5\n\n    # 80 apples sold on Tuesday\n    sold_tuesday = 80\n\n    # 30% of initial apples left in the end\n    left_end = 0.30 * initial_apples\n\n    # Equation representing the apples left in the end\n    equation = Eq(initial_apples - sold_monday - sold_tuesday, left_end)\n\n    # Solve the equation for initial_apples\n    solution = solve(equation, initial_apples)\n\n    # Calculate the number of apples Mr. Aziz had in the end (30% of initial_apples)\n    end_apples = 0.30 * solution[0]\n\n    return end_apples\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since each pile has at least 1 ball, we start the count from 1.\n    # We iterate through possible numbers of balls in the first and second pile,\n    # and calculate the remaining balls for the third pile.\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x3 > 0 and x1 != x2 and x2 != x3 and x1 != x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2\n    length_each_piece = total_length / num_pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km = 1.5\n    m = km * 1000  # 1 kilometer is 1000 meters\n    return m\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # sum of all 9 numbers\n    sum_other_8 = total_sum - 180  # subtract the one known number to get sum of the other 8 numbers\n    average_other_8 = sum_other_8 / 8  # find the average of the other 8 numbers\n\n    return average_other_8\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n    \n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n    return total_orchids\n    \nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n    \n    # Since trees are planted at both ends and every 9 meters, we can calculate the number of trees per side\n    # by dividing the highway length by the distance between trees and adding 1 (for the tree at the end).\n    trees_per_side = (highway_length // distance_between_trees) + 1\n    \n    # There are two sides of the highway, so we multiply the number of trees by 2.\n    total_trees = trees_per_side * 2\n    \n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    term_index = 20\n    first_odd_number = 1\n    common_difference = 2\n\n    nth_odd_number = first_odd_number + (term_index - 1) * common_difference\n\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # Since the Ferrari driver finished in second place,\n    # and he overtook 5 other cars,\n    # he must have started the race in the last place,\n    # which was 5 places behind the second.\n    # Therefore, there was 1 car in the first place,\n    # and the Ferrari driver in the second place,\n    # plus the 5 cars he overtook.\n    total_cars = 1 + 1 + 5\n    return total_cars\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Define the first term of the seven consecutive even numbers as x\n    # Then the other terms can be defined as x+2, x+4, x+6, x+8, x+10, x+12\n    # According to the condition, the fourth term x+6 is larger than one third of\n    # the sum of the first (x) and seventh (x+12) numbers by 6\n    # (x+6) = (1/3)*(x + (x+12)) + 6\n    # Solving this equation gives us the value of x\n    x = symbols('x')\n    equation = Eq((x + 6), (1/3)*(x + (x+12)) + 6)\n    x_value = solve(equation, x)[0]\n\n    # Now, calculate the sum of these seven numbers using the value of the first term (x)\n    # Sum = x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) + (x+12)\n    sum_seven_numbers = x_value + (x_value + 2) + (x_value + 4) + (x_value + 6) + (x_value + 8) + (x_value + 10) + (x_value + 12)\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    n_sides = 9\n    sum_of_angles = (n_sides - 2) * 180\n    interior_angle = sum_of_angles / n_sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_numbers = sum(int('5' * i) for i in range(1, 21))\n    ans = sum_numbers % 10000\n    return ans\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men = total_people * 0.25\n    women = total_people * (1/5)\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let the number of checked shirts be x\n    # Then the number of white shirts will be 7x\n    # According to the problem, x + 7x = 72\n    # Simplifying, we get 8x = 72\n    # Solving for x gives us the number of checked shirts\n    x = 72 / 8\n\n    # The number of white shirts is then 7 times the number of checked shirts\n    white_shirts = 7 * x\n\n    return int(white_shirts)\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Time taken for 1 man to build 1 wall\n    time_for_1_man_1_wall = 2 * 3\n    \n    # Time taken for y men to build 1 wall\n    time_for_y_men_1_wall = time_for_1_man_1_wall / y\n    \n    # Total time for y men to build x walls\n    total_time_for_x_walls = time_for_y_men_1_wall * x\n    \n    return total_time_for_x_walls\n\n# In order to call the function, y and x need to be defined.\n# example:\n# y = 4  # number of men\n# x = 2  # number of walls\n# ans = solution(y, x)\nPlease replace y and x with actual values when calling the solution method, as shown in the commented example."
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 2 != 0 and number % 9 == 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # The pattern provided in the question is not described in text.\n    # Without the actual pattern or an equivalent textual description, it is impossible to implement a solution.\n    # Please provide details of the pattern for further assistance.\n    pass  # Placeholder since the required detail is not provided\n\nans = None  # Since the pattern is not provided, no answer can be generated"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    white_balls = 8\n    red_balls = 7\n    green_balls = 5\n    total_balls = white_balls + red_balls + green_balls\n    draws = total_balls - 2 # Worst case scenario is you draw all but one from each color\n    return draws + 1 # Plus one because the question asks for the next draw to ensure two balls of same color\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    equation1 = Eq(girls + boys, 390)\n    equation2 = Eq(girls / 3, boys / 2)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for number in range(6, 55):\n        if number % 5 == 0 and (number + 1) % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    number = solve_congruence(*congruences)\n    \n    return number[0]\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    m = 1\n    while True:\n        if sum_of_digits(m) == 5 * sum_of_digits(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # From January to April (4 months), he spent $300 per month\n    total_jan_to_apr = 4 * 300\n    # From May to July (3 months), he spent $250 per month\n    total_may_to_jul = 3 * 250\n    # From August to September (2 months), he spent $750 in total\n    total_aug_to_sep = 750\n    # From October to December (3 months), he spent $300 per month\n    total_oct_to_dec = 3 * 300\n    \n    # The total spending from January to December\n    total_spending = total_jan_to_apr + total_may_to_jul + total_aug_to_sep + total_oct_to_dec\n    \n    # The total number of months from January to December\n    total_months = 12\n    \n    # The average spending per month from January to December\n    average_per_month = total_spending / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = three_quarters_of_number * 4 / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    days_for_24kg = 5\n    kg_per_day = 24 / days_for_24kg\n    total_kg_in_8_5_days = kg_per_day * 8.5\n    return total_kg_in_8_5_days\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 2/100  # 2% less water than the previous value\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    bottom_temp = 17\n    top_temp = -2\n    drop_in_temp = bottom_temp - top_temp\n    return drop_in_temp\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age_now = 10\n    father_age_future = 70\n    age_difference = father_age_future - tom_age_now\n    father_age_now = tom_age_now + age_difference\n    return father_age_now\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n    \n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n    \n    children_count = total_passengers - men_count - women_count\n    \n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n    total_votes = 400\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, total_votes)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    train_departure = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = train_departure + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(1, 200):\n        if sum(int(digit) for digit in format(N, 'b')) == 5 and \\\n           sum(int(digit) for digit in format(N, 'o')) == 9 and \\\n           sum(int(digit) for digit in base_convert(N, 6)) == 8:\n            ans.append(N)\n    return ans\n\ndef base_convert(number, base):\n    digits = []\n    while number:\n        digits.append(str(number % base))\n        number = number // base\n    return digits[::-1]\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_six_hotdogs = 12 / 6\n    total_cost = cost_per_six_hotdogs * number_of_six_hotdogs\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag_in_pence = 16\n    total_budget_in_pence = 200  # 1 pound = 100 pence; hence, 2 pounds = 200 pence\n\n    num_bags = total_budget_in_pence // price_per_bag_in_pence\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"63{digit}25\")\n        if num % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 choices for the first digit (2 or 3).\n    # There are 3 choices for the second digit (0, 2, or 3), since now 0 is allowed.\n    # There are 3 choices for the third digit (0, 2, or 3), following the same logic.\n    # Multiplying the number of choices for each digit gives us the total number of different numbers.\n    \n    first_digit_options = 2  # Cannot be 0\n    second_digit_options = 3  # Can be 0, 2, or 3\n    third_digit_options = 3  # Can be 0, 2, or 3\n    \n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n    return total_numbers\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    ways = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\n    return ways\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chip_initial, dale_initial = symbols('chip_initial dale_initial')\n    \n    # Chip gives 14 acorns to Dale\n    equation1 = Eq(chip_initial - 14, dale_initial + 14)\n    # Total acorns they had initially\n    equation2 = Eq(chip_initial + dale_initial, 124)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (chip_initial, dale_initial))\n    \n    return solutions[chip_initial]\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    primes_count = []\n\n    for prime in primes:\n        if 51 % prime == 0:\n            primes_count.append(51 // prime)\n\n    return min(primes_count)\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    # Check each hour and minute\n    for hour in range(24):\n        for minute in range(60):\n            # If at least one '5' is present in the current time, increment count\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([x if x % 2 == 0 else -x for x in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 24 == 0 and number // 24 == 36:\n            return number\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_weight_kg = 2.5\n    used_weight_pie_kg = 750 / 1000\n    used_weight_juice_kg = 1025 / 1000\n\n    remaining_weight_kg = initial_weight_kg - (used_weight_pie_kg + used_weight_juice_kg)\n\n    return remaining_weight_kg\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    # Total penpals\n    total_penpals = 11\n    # Total pages written\n    total_pages = 38\n    # Pages per letter for the two types of penpals\n    pages_letter_type1 = 4\n    pages_letter_type2 = 3\n    \n    # Assume Oni wrote type1 4-page letters to x penpals and type2 3-page letters to (total_penpals - x) penpals\n    # We then have the equation: 4x + 3(total_penpals - x) = total_pages\n    # The goal is to find the value of (total_penpals - x)\n    \n    # Initialize the count of 3-page letters to 0\n    count_type2 = 0\n    # Check for each possible value of x (0 to total_penpals)\n    for x in range(total_penpals + 1):\n        if pages_letter_type1 * x + pages_letter_type2 * (total_penpals - x) == total_pages:\n            count_type2 = total_penpals - x\n            # Exit the loop as we found the number of 3-page letters\n            break\n            \n    return count_type2\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    # Iterate through even square numbers less than 100\n    for i in range(2, 100, 2):\n        if i % 4 == 0 and i % 3 == 0 and (int(i ** 0.5) ** 2 == i):\n            return i\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n\n    total_people = people_in_front_of_amy + amy_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n    growth_per_week = (final_height - initial_height) / weeks\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Drawing all balls of two colors first (worst case scenario)\n    total_balls_two_colors = 5 + 5\n    # Then draw one more ball to ensure getting the third color\n    balls_needed_for_third_color = 1\n    # Total balls to be drawn to ensure 3 different colors\n    ans = total_balls_two_colors + balls_needed_for_third_color\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x is the length of the shorter piece\n    # thus, 2*x is the length of the longer piece\n    x = symbols('x')\n    \n    # Equation: x + 2*x = 12.75\n    equation = Eq(x + 2 * x, 12.75)\n    \n    # Solve for x\n    shorter_piece = solve(equation, x)[0]\n    \n    # Calculate the length of the longer piece\n    longer_piece = 2 * shorter_piece\n    \n    return longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # Given there are 6 books on the right of her favorite book\n    # and counting from the left it is the 14th book\n    # Therefore, 13 books are on the left of her favorite book (counted as 14th from the left)\n    books_on_left = 14 - 1\n    # Total number of books is the sum of books on the left, the favorite book itself, and the books on the right\n    total_books = books_on_left + 1 + 6\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1 # Assume a unit volume for ease of calculation\n    new_volume = original_volume * (1/2)**3 # Volume of a box is proportional to the cube of its dimensions\n    original_weight = 1200 # grams\n    new_weight = original_weight * new_volume\n    return new_weight\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins = symbols('gigi lily coins')\n\n    equation1 = Eq(gigi + coins, 3 * (lily + coins))\n    equation2 = Eq(gigi, 120)\n    equation3 = Eq(lily, 24)\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins))\n\n    return solutions[coins]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(1, 21))\n    total_cards = 20\n    non_prime_cards = total_cards - len(prime_numbers)\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Initial ages of Brian and his father\n    b_age = 14\n    f_age = 41\n\n    # The difference in age remains the same\n    age_diff = f_age - b_age\n\n    # Look for the next age where the ages are reverse of each other\n    while True:\n        # Increment their ages by 1 for each year passed\n        b_age += 1\n        f_age += 1\n\n        # Check if Brian's age is the reverse of his father's age\n        if int(str(f_age)[::-1]) == b_age:\n            return b_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Iterate through all possible 3-digit odd numbers\n    for i in range(100, 1000):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Calculate the sum of the digits\n            digits_sum = sum(int(digit) for digit in str(i))\n            # If the sum of the digits is 11, increment the count\n            if digits_sum == 11:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since only one egg can be boiled at a time\n    # In the minimum amount of time scenario, all three eggs are boiled consecutively\n    time_per_egg = 5\n    number_of_eggs = 3\n    total_time = time_per_egg * number_of_eggs\n    \n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    return cabins_needed\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_in_grams = 11160  # Convert 11.16kg to grams\n    dough_per_cookie = 45\n    dough_per_brownie = 150\n\n    total_dough_used = (240 * dough_per_cookie) + (2 * dough_per_brownie)\n    remaining_dough_in_grams = total_dough_in_grams - total_dough_used\n    \n    remaining_dough_in_kg = remaining_dough_in_grams / 1000  # Convert grams back to kg\n    return remaining_dough_in_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    return \"x < 1000\"\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining = 10\n    consumed_second_day = (remaining + 2) * 2\n    total_biscuits = (consumed_second_day + 4) * 2\n    return total_biscuits\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, a1, d = symbols('n a1 d')\n    # Sum of the first 4 terms (a1 + a2 + a3 + a4)\n    equation1 = Eq(a1 + (a1 + d) + (a1 + 2*d) + (a1 + 3*d), 124)\n\n    # Sum of the last 4 terms (an + an-1 + an-2 + an-3)\n    equation2 = Eq((a1 + (n-1)*d) + (a1 + (n-2)*d) + (a1 + (n-3)*d) + (a1 + (n-4)*d), 156)\n\n    # Sum of all n terms [n/2 * (a1 + an)]\n    equation3 = Eq(n/2 * (2*a1 + (n-1)*d), 210)\n\n    solutions = solve((equation1, equation2, equation3), (n, a1, d))\n\n    # Since there might be more than one solution, we return only the one with positive and real 'n'\n    for sol in solutions:\n        if sol[n].is_real and sol[n] > 0:\n            return int(sol[n])\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    \n    index_in_pattern = (1004 - 1) % pattern_length\n\n    return pattern[index_in_pattern]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n\n    wine_gums_per_child = total_wine_gums // children  # since they are shared equally, we use integer division\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    common_difference = 3\n    last_term = 298\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 5\n    spend_amount = 8\n    days_deposit_spend_cycle = 2  # Deposit on one day, spend on the next\n    full_cycles = total_days // days_deposit_spend_cycle\n\n    # Calculate total for full cycles\n    total_for_full_cycles = full_cycles * (deposit_amount - spend_amount)\n\n    # Calculate the remainder days\n    remainder_days = total_days % days_deposit_spend_cycle\n\n    # Calculate the remainder amount\n    remainder_amount = deposit_amount if remainder_days == 1 else 0\n\n    # Total amount\n    total = initial_amount + total_for_full_cycles + remainder_amount\n\n    return total\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (438 + 266) - (198 + 243)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    remaining_chocolates = solutions[chocolates] - 20 * solutions[friends]\n\n    return remaining_chocolates\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    for num in range(100, 1000):\n        # Check for each condition\n        is_multiple_of_27 = num % 27 == 0\n        is_multiple_of_7 = num % 7 == 0\n        sum_of_digits_17 = sum(int(digit) for digit in str(num)) == 17\n        is_perfect_square = int(num**0.5)**2 == num\n        is_factor_of_89100 = 89100 % num == 0\n\n        # Count the number of true statements\n        true_conditions = sum([is_multiple_of_27, is_multiple_of_7, sum_of_digits_17,\n                               is_perfect_square, is_factor_of_89100])\n\n        # three statements are true, so true_conditions should be 3\n        if true_conditions == 3:\n            return num\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    return 84.8 / 400\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    book_percentage = 0.15\n    dvd_percentage = 0.30\n\n    spent_on_book = initial_amount * book_percentage\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * dvd_percentage\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    mulan_pushups = symbols('mulan_pushups')\n    inequality = mulan_pushups > 50\n    return inequality\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    balloons_blown_up = 22\n    balloons_burst = 3\n    total_balloons_needed = 40\n    \n    balloons_remaining = total_balloons_needed - (balloons_blown_up - balloons_burst)\n    \n    return balloons_remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of played games.\n    x = symbols('x')\n\n    # Equation for the sum of an arithmetic progression: n(n - 1)/2 = total played games + games to be played\n    # The number of games required for a tournament where everyone plays each other once is n(n - 1)/2, where n is the number of teams.\n    # According to the information provided, 55 games have been played.\n    # We need to find n such that n(n - 1)/2 = x + 55, where x is the number of games still to be played.\n\n    equation = Eq(x + 55, n * (n - 1) / 2)\n\n    # We will solve for x in terms of n and then find a natural number n such that x is a natural number.\n    solutions = solve(equation, x)\n\n    # Find the smallest n such that x is a natural number\n    n = 1\n    while True:\n        potential_n = (n * (n - 1) / 2) - 55\n        if potential_n.is_integer() and potential_n > 0:\n            return int(potential_n)\n        n += 1\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # To minimize the number of candies for the child who gets the most,\n    # we need to distribute the candies in increasing order starting from 1.\n    # So we distribute 1, 2, 3, ..., 7 candies to the first 7 children.\n    # The sum of the first 7 natural numbers is 7*(7+1)//2 = 28.\n    # We subtract this sum from the total number of candies to find the \n    # minimum number of candies that the last child (who gets the most) can get.\n    \n    total_candies = 88\n    num_children = 8\n    distributed_candies = sum(range(num_children))  # This is 1 + 2 + ... + (num_children - 1)\n    least_candies_for_last_child = total_candies - distributed_candies\n    \n    return least_candies_for_last_child\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the situation is:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    \n    # To ensure Jerry wins, he has to make sure that after his turn,\n    # the number of stones in Stack A equals the number of stones in Stack B.\n    # This will ensure that whatever Tom does in the next move,\n    # Jerry can always replicate on the other stack and eventually pick the last stone.\n\n    # Since Stack B has fewer stones, Jerry has to take stones from Stack A.\n    stones_to_take = 20 - 16  # Number of stones in A - Number of stones in B\n    stack = 'A'\n    \n    return stones_to_take, stack\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway_number = (15 + 37) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    liters_left = 7\n\n    original_volume = (pails_filled * liters_per_pail) + liters_left\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = boys - 16  # There are 16 more boys than girls\n    eq = Eq(girls/boys, 7/9)\n\n    solved_boys = solve(eq, boys)[0]\n    solved_girls = solved_boys - 16\n\n    total_pupils = solved_girls + solved_boys\n\n    return total_pupils\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    number_of_trees = circumference // interval\n    return number_of_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # The balls are divided into 5 consecutive natural numbers, so we can express them as:\n    # x, x+1, x+2, x+3, x+4. The sum of these numbers is 160.\n    \n    # The sum of an arithmetic sequence is given by the mean of the first and last term, times the number of terms:\n    # sum = n/2 * (first_term + last_term)\n    # In this case, sum = 5/2 * (x + (x + 4))\n    # 160 = 5/2 * (2x + 4)\n    # 160 = 5x + 10\n    # 5x = 150\n    # x = 30\n    # So the number of balls the student with the most balls has is x+4.\n    x = 30\n    return x + 4\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    # Total number of pupils\n    total_pupils = 37\n    \n    # The correct sum without the mistake\n    # Using the formula: sum = n/2 * (first_number + last_number)\n    # Since the step is 3, the last number would be 1 + 3*(total_pupils-1)\n    correct_sum = total_pupils / 2 * (1 + (1 + 3 * (total_pupils - 1)))\n    \n    # Find the difference between the correct sum and the actual sum to determine the mistake\n    # Since the error is in subtraction instead of addition, the difference will be twice the number\n    # that was supposed to be added (3). Therefore, we divide the difference by 6.\n    mistake = (correct_sum - 2011) / 6\n    \n    # The pupil who made the mistake is the one who was supposed to say the number\n    # which, when added to 3, gives the mistake. Thus, it is the number of the previous\n    # pupil plus 1.\n    who_made_mistake = (mistake - 1) / 3 + 1\n\n    return int(who_made_mistake)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = ones * 100 + hundreds\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters converted to centimeters\n    piece_length_cm = 6\n    \n    number_of_pieces = stick_length_cm // piece_length_cm  # Use floor division to find the complete pieces\n\n    return number_of_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    return comb(10, 7)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Begin with the known fraction 13/10 and solve for a, b, c\n    # such that 13/10 = 1 + 1/(a + 1/(b + 1/c))\n    # Step 1: Subtract 1 from both sides to isolate the complex fraction part\n    fraction_part = 13/10 - 1\n    # Step 2: Find 'a' by taking the reciprocal of the fraction_part\n    a = int(1 / fraction_part)\n    # Step 3: Subtract 'a' and again find the reciprocal to get the next fraction part\n    fraction_part = 1 / (fraction_part - a)\n    # Step 4: Repeat the process to find 'b' and then 'c'\n    b = int(fraction_part)\n    fraction_part = 1 / (fraction_part - b)\n    c = int(fraction_part)\n    \n    # Calculate the final result according to the required expression a + 2b + 3c\n    result = a + 2 * b + 3 * c\n    return result\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # The pattern of the ones digit in powers of 8 repeats every 4 powers:\n    # 8^1 = 8 (ones digit is 8)\n    # 8^2 = 64 (ones digit is 4)\n    # 8^3 = 512 (ones digit is 2)\n    # 8^4 = 4096 (ones digit is 6)\n    # 8^5 = 32768 (ones digit is 8) - pattern repeats from here\n\n    # To find the ones digit of 8^30, we find the remainder of 30 divided by 4.\n    remainder = 30 % 4\n    # If the remainder is 0, the ones digit is 6 (because 8^4 ends with 6 and the pattern repeats every 4)\n    if remainder == 0:\n        return 6\n    elif remainder == 1:\n        return 8\n    elif remainder == 2:\n        return 4\n    elif remainder == 3:\n        return 2\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n    days_spent = total_pages / pages_per_day\n    return int(days_spent)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_wrong = -3\n    total_points = 52\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * points_correct + wrong * points_wrong == total_points:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    remaining_peaches = 100\n    eaten_peaches = 0\n\n    while remaining_peaches > days:\n        days += 1\n        remaining_peaches -= days\n\n    return days\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n\n    ans = right_side / left_side\n\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(1, 21):\n        if i % 6 == 1:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution\n    sugar_concentration = 0.48  # Sugar concentration in the solution\n\n    sugar_weight = total_weight * sugar_concentration  # Weight of the sugar in the solution\n    water_weight = total_weight - sugar_weight  # Weight of the water in the solution\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    factor = 9\n    addend = 5\n    ans = sum([addend] * factor)\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the age of the youngest dwarf be x\n    # Then, the ages of the youngest three are x, x+1, and x+2\n    # Their sum is given as 3x + 3 = 42\n    # Solving for x\n    sum_of_youngest_three = 42\n    x = (sum_of_youngest_three - 3) / 3\n    \n    # The ages of the oldest three are x+4, x+5, and x+6\n    # Their sum is 3x + 15\n    sum_of_oldest_three = 3 * x + 15\n    \n    return int(sum_of_oldest_three)\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    eq = Eq(1000 * a + 100 * b + 10 * c + d + 100 * a + 10 * b + c + 10 * a + b + a, 1370)\n\n    solutions = solve(eq, (a, b, c, d))\n\n    abcd = 1000 * solutions[a] + 100 * solutions[b] + 10 * solutions[c] + solutions[d]\n\n    return abcd\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(goals)\n    num_games = len(goals)\n    mean_goals = total_goals / num_games\n    return mean_goals\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    frac_part = 4 / 5\n    sum_of_fractions = 5 * frac_part\n    \n    integer_parts = [19, 199, 1999, 19999, 199999]\n    sum_of_integers = sum(integer_parts)\n    \n    ans = sum_of_integers + sum_of_fractions\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n    result = total_pence * fraction\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    \n    years = 0\n    while current_total_age + 2 * years < 35:\n        years += 1\n        \n    return years\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    dad_age_6_years_ago = dad_current - 6\n    son_age_6_years_ago = son_current - 6\n\n    equation1 = Eq(dad_age_6_years_ago, 5 * son_age_6_years_ago)\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum([1/i if j <= i else j/i for i in range(1, 9) for j in range(1, 2*i)])\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    # Let's denote the number of words Terry wrote as T.\n    # Gerald wrote T + 57 words.\n    # Together they wrote T + (T + 57) = 777 words.\n\n    # We set up the equation T + (T + 57) = 777\n    # Simplify: 2T + 57 = 777\n    # Subtract 57 from both sides: 2T = 777 - 57\n    # Devide both sides by 2: T = (777 - 57) / 2\n\n    T = (777 - 57) / 2\n    # Since Gerald wrote 57 more words than Terry,\n    # Gerald's word count is T + 57.\n    G = T + 57\n\n    return G\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets = symbols('total_sweets')\n\n    # 6 fruit drops is 2/7 of the milk chocolates\n    # So total milk chocolates would be 7/2 times 6\n    milk_chocolates = (7/2) * 6\n\n    # Milk chocolates is 3/4 of the total number of sweets\n    equation = Eq(milk_chocolates, (3/4) * total_sweets)\n\n    solution = solve(equation, total_sweets)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    number = 1000 - 630\n    return number\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    football, volleyball = symbols('football volleyball')\n\n    # Teacher Apple buys 1 football and 2 volleyballs, which costs $60\n    equation1 = Eq(football + 2 * volleyball, 60)\n\n    # Teacher Apple buys 2 footballs, which costs $60 - $16\n    equation2 = Eq(2 * football, 60 - 16)\n\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, c, d, e = symbols('a b c d e')\n\n    # Given conditions\n    # Assuming a is the youngest and e is the oldest\n    # The mode age is 7\n    # The mean age is 9\n    # The median age is 8\n    # The range is e - a = 6\n\n    eq1 = Eq((a + b + c + d + e) / 5, 9)  # Mean age is 9\n    eq2 = Eq(c, 8)                        # Median age is 8\n    eq3 = Eq(e - a, 6)                    # Range is 6\n\n    # Mode is 7, implying there must be at least 2 members with age 7. Given the placements of b and d, and c being 8\n    # 7 could at max be d and at min be a or b. If d is 7 then c < d which isn't possible as c is 8\n    # Hence age 7 is b and max one another\n\n    # Considering a <= b = 7 <= c <= d <= e, and c is 8, so a can be {1,2,3,4,5,6,7}\n    # One possible age is 7, leaving one number from {9, 10, 11, 12, 13}\n    # To solve for this, we will iterate through values of a and find corresponding d and e\n\n    possible_values = []\n    for a_value in range(1, 8):\n        eq4 = Eq(a, a_value)\n        eq5 = Eq(b, 7)\n        eq6 = solve([eq1, eq3, eq4, eq5], (d, e))\n\n        # Since d/e should be integers, we discard non-integer solutions\n        if eq6[d].is_integer and eq6[e].is_integer:\n            possible_values.append((a_value, 7, 8, eq6[d], eq6[e]))\n\n    # Get the second oldest age from possible_values, which is the 4th value in each tuple\n    second_oldest = max([vals[3] for vals in possible_values])\n\n    return second_oldest\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = sum([i ** 3 for i in range(1, n + 1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Since we know all 4 digits in 3541 are correct but in the wrong places,\n    # the correct number can have these digits only in different places.\n\n    # For the number 1703, two digits and their positions are correct.\n    # This means, out of 3, 5, and 4, two must be in the correct position,\n    # as 1 can't be since it's a digit present in 3541.\n    \n    # For the number 2745, two digits are correct but positions are wrong.\n    # However, if 7 and 4 were the correct digits, that leaves us with\n    # 1743 or 3741 as options. But 3 is already established in the previous \n    # number as a correct digit but in the wrong place, 5 and 1 are not possible,\n    # hence 7 and 4 cannot be the correct digits. So, the correct digits here must be 2 and 5.\n    # Hence the digits 2 and 5 must be in the correct number but in positions different from 2 and 5.\n\n    # Hence the possibilities are now:\n    # _ _ 2 _\n    # _ _ _ 5\n\n    # Since 1 cannot be the first digit, 5 or 4 should be the first digit.\n    # Since 5 cannot be in the last position, the last digit must be 1 (from 1703 hint).\n    # Since 3 cannot be third or last (from 1703) or the first (by the above logic), it must be the second digit.\n    # Now, we are left with the last unknown digit or the third position, which cannot be 2 (from 2745),\n    # so it must be 4.\n    # Therefore, the number must be 5314.\n    \n    return 5314\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    num_books = 3  # We have 3 books to arrange\n    # The number of different arrangements (permutations) of n items is n!\n    ans = math.factorial(num_books)\n    return ans\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    from itertools import permutations\n\n    # Total number of people\n    num_people = 5\n    all_positions = [i for i in range(num_people)]\n\n    # Positions where A cannot stand (indexing from 0)\n    restricted_positions_for_A = [0, num_people - 1]\n    \n    # Total permutations without restrictions\n    total_permutations = list(permutations(all_positions))\n    \n    # Filter permutations where A is not in the restricted positions\n    valid_permutations = [p for p in total_permutations if p.index(0) not in restricted_positions_for_A]\n    \n    # The number of valid permutations is the answer\n    return len(valid_permutations)\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    ans = math.ceil(math.log2(num_people))\n    return ans\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Let 'y' be the number of yellow flowers\n    # Given: Red flowers = 3 times yellow flowers\n    # Given: Pink flowers = yellow flowers - 7\n    # We know there are 3 pink flowers, so:\n    pink_flowers = 3\n\n    # Now we can write the equation for yellow flowers\n    y = pink_flowers + 7\n\n    # We can calculate the number of red flowers now\n    red_flowers = 3 * y\n\n    # Total flowers is the sum of red and yellow flowers\n    total_flowers = red_flowers + y\n\n    return total_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "def solution():\n    original_time_hour = 17  # 5 pm in 24-hour format\n    original_time_minute = 30\n    delay_minutes = 30\n\n    # Add delay to original time\n    final_minute = original_time_minute + delay_minutes\n\n    # Since there are only 60 minutes in an hour, adjust the hour if necessary\n    if final_minute >= 60:\n        final_hour = original_time_hour + 1\n        final_minute -= 60\n    else:\n        final_hour = original_time_hour\n\n    # Return time in hh:mm format\n    return f\"{final_hour}:{final_minute:02d}\"\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # Original ratio equation: 3/8 = apples/oranges\n    original_ratio = Eq(3*oranges, 8*apples)\n    \n    # New ratio after removing one apple: 1/3 = (apples - 1)/oranges\n    new_ratio = Eq(oranges, 3*(apples - 1))\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, hundreds):\n            for ones in range(tens + 1, 10):\n                count += 1\n            for ones in range(1, tens):\n                if ones > hundreds:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for boys and girls in the morning\n    boys_morning, girls_morning = symbols('boys_morning girls_morning')\n    \n    # Define equations based on the given conditions\n    # The number of boys was 50% (or half) more than that of girls in the morning\n    eq1 = Eq(boys_morning, girls_morning + 0.5 * girls_morning)\n    # 12 boys and 12 girls joined in the afternoon\n    boys_afternoon = boys_morning + 12\n    girls_afternoon = girls_morning + 12\n    # The ratio of the number of boys to girls in the afternoon became 19:14\n    eq2 = Eq(boys_afternoon/girls_afternoon, 19/14)\n    \n    # Solve the system of equations for the number of boys and girls in the morning\n    solutions = solve((eq1, eq2), (boys_morning, girls_morning))\n    \n    # Get the total number of children in the afternoon\n    total_children_afternoon = solutions[boys_morning] + 12 + solutions[girls_morning] + 12\n    \n    return total_children_afternoon\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    n = 6  # number of students and books\n    d = {0: 1}\n    for i in range(1, n+1):\n        d[i] = (i-1) * (d[i-1] + d[i-2])\n\n    return d[n]\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the table and chair\n    table, chair = symbols('table chair')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(table, 2 * chair) # Table costs two times a chair\n    equation2 = Eq(2 * table + 3 * chair, 280) # Two tables and three chairs cost 280\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    max_col_pencils = 48 // 9\n    for col_pencils in range(max_col_pencils + 1):\n        notebooks = 10 - col_pencils\n        if notebooks * 3 + col_pencils * 9 == 48:\n            return col_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    first_floor_seats = 9 * 36\n    students_on_second_floor = 500 - first_floor_seats\n    return students_on_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n    next_term = previous_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first even number in the consecutive sequence be x\n    # Then the numbers are x, x+2, x+4, x+6, x+8, x+10\n    # The sum of these numbers is 6x + (2+4+6+8+10) = 510\n    \n    # Calculate the sequence sum without x (which is a constant series of even numbers)\n    const_sum = 2 + 4 + 6 + 8 + 10\n    # Sum formula for the six consecutive even numbers\n    total_sum = 510\n    \n    # Find the first number x\n    x = (total_sum - const_sum) // 6\n    \n    # The mean is the sum divided by the number of terms\n    mean = total_sum // 6\n    # The median is the average of the middle two numbers in an even-sized list\n    median = (x + 4 + x + 6) // 2\n    \n    # The difference between the mean and the median\n    return mean - median\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    num_zeros = 0\n    factor_of_5 = 0\n    factor_of_2 = 0\n\n    # Count number of 5s and 2s in the factorization of numbers 1 to 50\n    for i in range(1, 51):\n        tmp = i\n        while tmp % 5 == 0:\n            factor_of_5 += 1\n            tmp //= 5\n        tmp = i\n        while tmp % 2 == 0:\n            factor_of_2 += 1\n            tmp //= 2\n\n    # Number of zeros is determined by the lesser of the count of 2s or 5s\n    num_zeros = min(factor_of_2, factor_of_5)\n\n    return num_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    total_sevens = 0\n    for number in range(3, 48):\n        total_sevens += str(number).count('7')\n    return total_sevens\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    helen_original = 18\n    oliver_original = 22\n    helen_now = (helen_original + oliver_original) / 2 + 5\n    return int(helen_now)\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climbed_up_first = 23\n    climbed_down = 31\n    climbed_up_second = 17\n\n    final_height = initial_height + climbed_up_first - climbed_down + climbed_up_second\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    return 94 * 38\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n    \n    # Calculate log10(N) to get the exponent that tells us the number of digits\n    digits = log10(5**100) + 1\n    \n    # We return the integer part after taking the floor of the digits since we count whole digits\n    return int(digits)\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    # Let x be the initial mass of strawberries in grams.\n    # The initial mass of mangoes would then be x + 448.\n    # After giving away 900g of mangoes, the mass of mangoes would be x + 448 - 900.\n    # According to the problem, the final mass of strawberries (which is x) is twice the final mass of mangoes.\n    # So we get the equation: x = 2 * (x + 448 - 900)\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x, 2 * (x + 448 - 900))\n\n    strawberries_mass = solve(equation, x)\n\n    return strawberries_mass[0]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # Then the consecutive numbers are x, x+1, x+2, x+3, x+4\n    # Their sum is 5*x + 10 = 40 (the 10 comes from the sum 1+2+3+4)\n    # So to find x, we solve the equation 5*x = 30\n    x = (40 - 10) // 5\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # Subtract prime numbers and 1 (which is neither prime nor composite) from total numbers\n    composite_numbers = total_numbers - prime_numbers - 1 \n\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n    sweets_left = total_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Number of terms between the fourth and the twelfth terms\n    num_terms = 12 - 4\n    \n    # Difference between consecutive terms\n    common_difference = (57 - 39) / num_terms\n    \n    # Calculate the first term\n    first_term = 39 - (3 * common_difference)\n    \n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']\n    digits.sort(reverse=True)\n    largest_number = int(''.join(digits))\n    return largest_number\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '0', '3', '4', '6', '8', '9']\n    valid_numbers = []\n\n    # Generate all possible 5-digit numbers from the given digits\n    for perm in permutations(digits, 5):\n        if perm[0] != '0':  # Ensure that the number does not start with 0\n            num = int(''.join(perm))\n            if num % 9 == 0:  # Check if the number is divisible by 9\n                valid_numbers.append(num)\n\n    # We want to find the maximum difference divisible by 9, so we find the max and min and divide their difference by 9\n    M = max(valid_numbers)\n    N = min(valid_numbers)\n    ans = (M - N) // 9\n\n    return ans\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = 4 * 10**6 + 4 * 10**2 + 4\n    return number\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    salt_30 = 30 * 0.3\n    salt_20 = 20 * 0.2\n    total_salt = salt_30 + salt_20\n    target_concentration = 0.1\n\n    # let's denote x as the grams of water she needs to add\n    # we need to solve for the equation: total_salt / (30 + 20 + x) = target_concentration\n    \n    # rearrange the equation to solve for x\n    # x = total_salt / target_concentration - (30 + 20)\n    x = total_salt / target_concentration - (30 + 20)\n\n    return x\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    # Calculating the difference in the addend.\n    difference = incorrect_addend - correct_addend\n\n    # Subtracting the difference from the incorrect sum to get the correct sum.\n    correct_sum = incorrect_sum - difference\n\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the unknown integer in the boxes\n    box = symbols('box')\n    \n    # Define the equation based on the puzzle\n    equation = Eq(box * box + box, 380)\n    \n    # Solve the equation for the value of 'box'\n    solutions = solve(equation, box)\n    \n    # Filter solutions to get only the positive integer solution\n    ans = [sol for sol in solutions if sol.is_integer and sol > 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250    # m/min\n    race_distance = 3000 # m\n\n    # Time taken for Johnson and Vicky to finish the race\n    johnson_time = race_distance / johnson_speed  # min\n    vicky_time = race_distance / vicky_speed      # min\n\n    # Time difference\n    time_difference = vicky_time - johnson_time\n\n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To guarantee 29 balls of one color, we could have up to 28 of each without achieving it (worst case scenario).\n    # So we start by picking 28 balls each from the blue and red balls (56 balls in total).\n    # Then, we need to pick only 1 white ball to reach 28 white balls in worst case.\n    # Now we have 1 extra pick that will ensure we have 29 of some color (57 picks made so far).\n    # Pick the remaining color to reach 28 (one more pick, total 58).\n    # Finally, catch 10 more balls to ensure we have 10 of the third color, reaching 68 picks in total.\n\n    return 28 + 28 + 1 + 1 + 10\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    max_unique_numbers = 2\n    cards_per_number = 4\n    cards_to_draw = (max_unique_numbers * cards_per_number) + 1\n    return cards_to_draw\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))\n    prime_count = len(primes)\n    total_count = 20  # Total cards from 1 to 20\n\n    proportion = prime_count / total_count\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n    \n    # Calculate the total sum of the numbers needed to have the desired mean\n    total_sum = mean_value * total_numbers\n\n    # Subtract the sum of known numbers from the total sum to find the missing number\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume exchanged\n    x = symbols('x')\n\n    # Bottle A (5 liters, 10% lime): (5-x)*0.10 + x*0.20\n    # Bottle B (3 liters, 20% lime): (3-x)*0.20 + x*0.10\n\n    # Setting up the equations\n    concentration_A = Eq((5-x)*0.10 + x*0.20, (3+x)*0.10)\n    concentration_B = Eq((3-x)*0.20 + x*0.10, (5+x)*0.20 / 5)\n\n    # Solve the equations\n    sol = solve((concentration_A, concentration_B), x)\n\n    return sol[x]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for p in permutations('ABCDEFGH'):\n        p = ''.join(p)\n        if p.index('C') > p.index('A') and p.index('C') < p.index('B'):\n            if 'DE' in p or 'ED' in p:\n                if 'FG' in p or 'GF' in p:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    total_combinations = len(notebooks) * len(calendars)\n    return total_combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    full_rows = students // tables_per_row\n    remaining_students = students % tables_per_row\n\n    if remaining_students > 0:\n        full_rows += 1\n\n    return full_rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    digit_sum = 0\n    for i in range(1, 124):\n        digit_sum += int(\"123\" * i)\n    hundreds_digit = (digit_sum // 100) % 10\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    original_length = 90\n    new_length = 90 - 70.5\n    length_ratio = 5\n    breadth_ratio = 2\n\n    original_breadth = (breadth_ratio / length_ratio) * original_length\n    new_breadth = (breadth_ratio / length_ratio) * new_length\n\n    max_breadth_size = int(new_breadth)\n    return max_breadth_size\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount - (total_amount - coin)):\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using the Inclusion-Exclusion Principle\n    both = like_bananas + like_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_time = 200 / 8  # Time taken by Jaan to finish 200m race.\n    kane_distance = 200 - 12.5  # Distance covered by Kane when Jaan finished.\n    kane_speed = kane_distance / jaan_time  # Kane's speed.\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher_value = 1.10  # 110p is £1.10\n\n    total_cost = cake_price + milk_price\n    actual_pay = total_cost - voucher_value\n    \n    return round(actual_pay, 2)\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for the rates of John (j), Raj (r), Pete (p)\n    j, r, p = symbols('j r p')\n\n    # The rates are defined in jobs per hour\n    # j: John's rate, r: Raj's rate, p: Pete's rate\n\n    # The equation when John, Raj and Pete work together (they complete 1 job)\n    eq1 = j + r + p - 1\n\n    # Convert 1 hr 12 min to hours (72 min = 1.2 hours)\n    # The equation when John and Raj work together (they complete 1 job)\n    eq2 = j + r - 1/1.2\n\n    # Convert 1 hr 30 min to hours (90 min = 1.5 hours)\n    # The equation when Raj and Pete work together (they complete 1 job)\n    eq3 = r + p - 1/1.5\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (j, r, p))\n    raj_rate = solutions[r]\n\n    # The time it takes for Raj to complete 1 job is the reciprocal of his rate\n    # Convert it to minutes by multiplying by 60\n    raj_time = 60 / raj_rate\n\n    return raj_time\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_per_hour = 12\n    normal_hours = 8\n    overtime_rate_multiplier = 1 + 1/4\n    total_hours_worked = 10\n    overtime_hours = total_hours_worked - normal_hours\n    \n    normal_pay = normal_hours * normal_pay_per_hour\n    overtime_pay = overtime_hours * normal_pay_per_hour * overtime_rate_multiplier\n    \n    total_pay = normal_pay + overtime_pay\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    percentage = 35\n    total = 60\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 3 and i % 7 == 3:\n            return i\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Divide the 99-digit number into blocks of 3 digits, 928. \n    # There are 33 such blocks since 99 / 3 = 33.\n    blocks_count = 99 // 3\n\n    # The remainder when 928 is divided by 9 can be calculated directly.\n    remainder_928 = 928 % 9\n\n    # The total remainder is the sum of the remainders of each block\n    # Since all blocks are the same, the total remainder is just 33 times the remainder of one block.\n    total_remainder = (blocks_count * remainder_928) % 9\n\n    return total_remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30/43)\n    \n    solved_value = solve(equation, x)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of the elder brother and y be the age of the younger brother.\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of their ages is 42.\n    equation1 = Eq(x + y, 42)\n    \n    # Equation 2: A few years ago, the age difference was twice the younger brother's age.\n    # Let the number of years ago be z, where z = current age of the younger brother (y).\n    # So, at that time, elder brother's age was x - y, which was twice the younger brother’s age back then (which is half of the elder brother's current age, x/2).\n    # Hence x - y = x/2 - \"some number of years ago\" which is x/2 - y, leads to y = x/2.\n    equation2 = Eq(y, x/2)\n\n    # Solving the two equations simultaneously\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The question asks for the elder brother's age.\n    return solutions[x]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # You take one ball of each color initially.\n    initial_balls = 4 \n\n    # You need two more balls to have three of the same color,\n    # because worst case scenario would be that the two balls are of different colors. \n    additional_balls = 2 \n\n    # Total balls taken to be sure to have at least three of the same color\n    total_balls = initial_balls + additional_balls \n    \n    return total_balls\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from math import sqrt\n\n    # nC2 * 2 = 30\n    # (n*(n-1))/2  * 2 = 30\n    # n^2 - n - 30 = 0\n    # Solving the quadratic equation for positive n\n    n = (1 + sqrt(1 + 4 * 1 * 30)) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return round(boxes_needed)\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the rope needed for one complete turn around the tree\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    eq1 = Eq(10 * x - 3, 0)  # 10 turns around the tree leaves 3 meters\n    eq2 = Eq(12 * x + 3, 0)  # 12 turns around the tree is missing 3 meters\n\n    # Solve the equations to find the length of rope for one turn (x)\n    solution = solve((eq1, eq2), x)\n\n    # Calculate how many meters around 8 turns\n    answer = 8 * solution[x]\n\n    return answer\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Applying the Pigeonhole Principle\n    countries = 11\n    people_per_country_to_ensure = 5\n    # To ensure 5 people in any country, we can have a maximum of 4 people in each country before we must add another to get to 5\n    max_people_before_full = (people_per_country_to_ensure - 1) * countries\n    # We add 1 participant to force at least one country to have 5 participants\n    ans = max_people_before_full + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y, z = symbols('x y z')\n    \n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[x] + solutions[y] + solutions[z]\n   \nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0 and B != 0: # assuming valid numbers, not starting with 0\n            sum_ABCD = A + B + C + D\n            return sum_ABCD\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499  # No need to add 1 because 1999 is included, and 1499 is not\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    # Let 'total_money' be the total amount of money Mary had.\n    # Mary spent 3/7 of her money on a bag. Therefore, she had (1 - 3/7) of her money left i.e., 4/7 left.\n    # The difference between what she spent and what she did not spend is £12. We get the equation:\n    # (3/7)*total_money - (4/7)*total_money = 12\n    # Simplifying, we get (3/7 - 4/7) * total_money = 12 <=> (-1/7)*total_money = 12\n    # So, total_money = -12 * 7\n\n    equation = Eq((3/7) * total_money - (4/7) * total_money, 12)\n    \n    # Solve for the total money\n    total_money_solution = solve(equation, total_money)[0]\n    \n    # Money spent on the bag is 3/7 of the total money\n    money_spent_on_bag = (3/7) * total_money_solution\n    \n    return money_spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Given:\n    sum_current = 34\n    sum_future = 40\n\n    # Difference in sum of ages would happen over same number of years for both\n    years_later = sum_future - sum_current\n\n    return years_later\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Let the age of the youngest dwarf be x years.\n    # Then, the ages of the youngest three would be x, x+1, and x+2.\n    # We have the equation: x + (x+1) + (x+2) = 42.\n    # Solving for x gives us the age of the youngest dwarf.\n    \n    # x + x + 1 + x + 2 = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (age of the youngest dwarf)\n    \n    x = 13\n\n    # The ages of the oldest three would then be x+4, x+5, and x+6.\n    # Sum of the ages of the oldest three dwarfs: (x+4) + (x+5) + (x+6).\n    \n    # (13+4) + (13+5) + (13+6)\n    sum_oldest_three = (x+4) + (x+5) + (x+6)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    number = 111\n    odot = 7\n    ans = number - sum(range(1, odot))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let's denote the number of toys made by Factory A, B, and C as A, B, and C respectively.\n\n    # Total number of toys made by all three factories\n    total_toys = 659\n    \n    # Toys made by Factory A and B\n    A_and_B = 447\n\n    # Toys made by Factory B and C\n    B_and_C = 335\n    \n    # To find the number of toys made by Factory B, we use the following logic:\n    # total_toys = A + B + C\n    # A_and_B = A + B\n    # B_and_C = B + C\n    # => (A_and_B - B) + (B_and_C - B) = (A + B + C) - B = total_toys - B\n    # => A_and_B + B_and_C - total_toys = B\n    \n    B = A_and_B + B_and_C - total_toys\n\n    return B\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils') \n\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    equation1 = Eq(stickers - 190, 13 * pupils)\n\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    equation2 = Eq(stickers - 50, 17 * pupils)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return sum(factors)\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    return sum(numbers) / len(numbers)\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    excess_girls = 30\n\n    girls = (total_pupils + excess_girls) // 2\n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the cost of one file and one storybook\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n    \n    # Create equations based on the given information\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n    \n    # Calculate the total cost for 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_trays = 1\n    additional_sausages = 21\n\n    total_initial_sausages = initial_trays * initial_mean\n    total_sausages = total_initial_sausages + additional_sausages\n    total_trays = initial_trays + additional_trays\n\n    new_mean = total_sausages / total_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    return 1.99 + 2.99 + 3.99 + 4.99\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    # Hundreds and units digits can be between 1-9, but must be different.\n    for hundreds in range(1, 10):\n        for units in range(1, 10):\n            if hundreds != units:\n                # Tens digit needs to be lower than both hundreds and units digits, and can be 0-9.\n                for tens in range(0, 10):\n                    if tens < hundreds and tens < units:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    speed = (137 + 263) / 20  # Speed of the train (m/s), calculated with the first bridge\n    # Time difference for crossing the second bridge \n    # will give us the length difference between the two bridges\n    time_difference = 27 - 20 \n    # The extra length of the second bridge compared to the first one\n    extra_length = speed * time_difference\n    # Length of the second bridge\n    second_bridge_length = 263 + extra_length \n\n    return int(second_bridge_length)\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    half = total // 2\n    amount_to_give = brenda - half\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    # Total amount of balls\n    equation1 = Eq(blue + red, 125)\n    # The Relationship between the number of blue balls and red balls\n    equation2 = Eq((2/5) * blue, (3/5) * red)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (blue, red))\n\n    # Calculate how many more blue balls than red balls\n    difference = solutions[blue] - solutions[red]\n\n    return difference\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Total number of books\n    books = 7\n    # The first three books will be definitely distributed to the three students\n    # in 3! ways (since each student should get at least one book). \n    first_three_books_distribution = factorial(3)\n    \n    # The remaining four books can be distributed in 3**4 ways,\n    # because there are three choices (students) for each book.\n    remaining_books_distribution = 3**4\n    \n    # The total number of ways is the product of these two values.\n    total_ways = first_three_books_distribution * remaining_books_distribution\n    \n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, handbags = symbols('watches handbags')\n    equation1 = Eq(3 * watches + 5 * handbags, 915)\n    equation2 = Eq(4 * watches + 2 * handbags, 632)\n\n    solutions = solve((equation1, equation2), (watches, handbags))\n\n    total_cost = 2 * solutions[watches] + 2 * solutions[handbags]\n    \n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    total_candy = 88\n    children = 8\n    \n    # Since each child gets a different number of pieces and at least one piece,\n    # the least number of pieces we can start giving out are 1, 2, 3, ..., n\n    # where n is the number of children. This is the minimal distribution.\n    min_dist = sum(range(1, children))\n    \n    # The remaining candies after minimal distribution will be given to the child\n    # with the most pieces.\n    remaining_candy = total_candy - min_dist\n    \n    # The child with the most pieces will get his share from the minimal distribution,\n    # which is 'children' pieces, plus all the remaining candies\n    most_pieces = children + remaining_candy\n\n    return most_pieces\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n    return percent_discount\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    \n    # Daughter's age on 1st December 1996\n    daughter_age_1996 = 40\n    \n    # Difference in years between 1996 and 2008\n    year_difference = 2008 - 1996\n    \n    # Daughter's age on 1st December 2008\n    daughter_age_2008 = daughter_age_1996 + year_difference\n    \n    # Grandmother's age when her daughter was born\n    grandmother_age_birth = grandmother_age_2008 - daughter_age_2008\n    \n    return grandmother_age_birth\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 4 individuals: A, B, C, D.\n    # A starts with the ball.\n    # Anyone but A can receive the first pass: 3 choices (B, C, D).\n    # For the second pass, the person who received the first pass can pass the ball to\n    # any of the two remaining people: 2 choices.\n    # For the third pass, the person who received the second pass has only one choice,\n    # to pass the ball back to A.\n    count = 3 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n\n    # Total people\n    total_people = 8\n\n    # If A and B stand together, we can consider them as a single unit AB.\n    # So the total number of units to arrange is total_people - 1 (AB, C, D, E, F, G, H)\n    units_to_arrange = total_people - 1\n\n    # There are (units_to_arrange)! ways to arrange these units.\n    arrangements_with_AB_together = math.factorial(units_to_arrange)\n\n    # AB can be arranged in 2! ways (A-B or B-A).\n    arrangements_AB_permutations = math.factorial(2)\n\n    # Now, consider the cases where C and D do stand next to each other.\n    # In this situation, we can treat CD or DC as a single unit as well.\n    # So the number of units to arrange is total_people - 2 (CD, AB, E, F, G, H)\n    units_with_CD_together = total_people - 2\n\n    # There are (units_with_CD_together)! ways to arrange all other units with CD together\n    # and 2! ways to arrange CD.\n    arrangements_with_CD_together = math.factorial(units_with_CD_together) * math.factorial(2)\n\n    # To get the total number of arrangements where AB are together and CD are not,\n    # subtract the cases where CD are together from the total number of cases where AB are together.\n    total_arrangements = (arrangements_with_AB_together * arrangements_AB_permutations) - arrangements_with_CD_together\n\n    return total_arrangements\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    result = 3.5 * 0.8 + 5.5 * 0.8 + (4 / 5) * 1\n    return result\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_solution = 200  # grams\n    leroy_concentration = 0.35  # 35%\n\n    lenny_solution = 300  # grams\n    lenny_concentration = 0.50  # 50%\n\n    total_weight = leroy_solution + lenny_solution\n    total_salt = leroy_solution * leroy_concentration + lenny_solution * lenny_concentration\n\n    concentration = total_salt / total_weight\n\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n    \n    # Equation representing the total candies\n    total_candies_eq = Eq(mike + valeria, 36)\n    # Equation representing the situation when both eat the same amount such that Mike has 6 left\n    mike_candies_eq = Eq(mike - (valeria - 22), 6)\n\n    # Solving the system of equations\n    solutions = solve((total_candies_eq, mike_candies_eq), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    concentration = 0.35\n    sugar_weight = total_weight * concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    left_side = 12 ** 50\n    right_side_exponent = 75\n    k = int(left_side ** (1 / right_side_exponent))\n    return k\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    thrown_away = 34\n    bought = 25\n    final_count = 133\n\n    initial_count = final_count - bought + thrown_away\n\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi(a, b):\n        if a < b:\n            return a * b + 2\n        else:\n            return a - b + 2\n\n    result = psi(psi(14, 13), 12)\n    return result\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    count = 0\n    for i in range(1, 20):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n    \n    equation = Eq(girls_score + boys_score, total_score)\n    \n    num_girls = solve(equation, girls)[0]\n    \n    return num_girls\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # According to the question, let's define the number of legs for each animal.\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n    \n    # Now calculate the total legs for cats, dogs, and the rabbit.\n    total_legs_for_cats = 2 * legs_per_cat\n    total_legs_for_dogs = 2 * legs_per_dog\n    total_legs_for_rabbit = 1 * legs_per_rabbit\n    \n    # Calculate the total legs of these animals.\n    total_legs_without_birds = total_legs_for_cats + total_legs_for_dogs + total_legs_for_rabbit\n    \n    # The remaining legs must belong to the birds.\n    remaining_legs_for_birds = 28 - total_legs_without_birds\n    \n    # Since each bird has 2 legs, divide the remaining legs by the number of legs per bird to find the number of birds.\n    number_of_birds = remaining_legs_for_birds / legs_per_bird\n\n    return int(number_of_birds)\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Time taken by one person to paint one fence\n    time_per_person_per_fence = 5 * 6  # 5 people taking 6 hours each\n\n    # Time required by one person to paint a fence that is twice as long\n    time_per_person_double_fence = time_per_person_per_fence * 2\n\n    # Time in which the neighbour wants the double fence to be painted\n    desired_time = 5\n\n    # Since work is directly proportional to number of people, calculate minimum people\n    # work = time * people => people = work / time\n    min_people = time_per_person_double_fence / desired_time\n\n    # Since the number of people cannot be fractional, we take the ceiling\n    min_people = -(-min_people // 1)  # Ceiling division\n\n    return int(min_people)\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_interval = 12 / 4  # Time taken to walk up one flight from 1st to 5th floor\n    flights_in_30_min = 30 / time_for_one_interval\n    return int(flights_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_more_butter = cookies_per_gram * 21.6\n    return cookies_with_more_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    base_8_number = '12345654321'\n    N = int(base_8_number, 8)\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Three years ago, the combined age of two cats was 7 years.\n    combined_age_three_years_ago = 7\n    \n    # The combined age currently would be 3 years more for each cat\n    # So we add 3*2 = 6 years to get their current combined age.\n    current_combined_age = combined_age_three_years_ago + 3*2\n    \n    # The combined age in four years will be the current combined age plus\n    # 4 more years for each cat, so we add 4*2 = 8 years.\n    combined_age_in_four_years = current_combined_age + 4*2\n    \n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    equation1 = Eq(2 * book + 3 * magazine, 24.9)\n    equation2 = Eq(book + magazine, 10)\n    \n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (n * (n + 1) * (n + 2)) // 3\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    n = 2016\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i**2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    total_sum = 60\n    numbers = 3\n    average_number = total_sum // numbers\n    largest_number = average_number + 1\n\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 7*x - 3*x + 2 - 22\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3*big_pail + 4*small_pail, 68)\n    equation2 = Eq(4*big_pail + 2*small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if (100 * A + 10 * B + A) + (100 * C + 10 * D + C) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Annabella takes all non-yellow shirts first to ensure she gets a yellow one after\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown\n    # She then takes out one more shirt, which will be yellow for sure\n    ans = non_yellow_shirts + 1\n    \n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = total_pens_needed // 8\n    if total_pens_needed % 8 > 0:\n        packs_needed += 1\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    sum_fractional_parts = 4/5 * 6  # sum of the fractional parts of all the numbers\n    sum_whole_numbers = 9 + 99 + 199 + 2999 + 39999 + 1  # sum of the whole numbers\n    ans = sum_whole_numbers + sum_fractional_parts  # adding the fractional part to the whole number sum\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    sequence = [94, 80, 73, 66]\n    differences = [sequence[i] - sequence[i+1] for i in range(len(sequence)-1)]\n    next_difference = differences[1] - differences[0]\n    missing_number = sequence[0] - next_difference\n\n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "from sympy import symbols, solve\n\ndef solution():\n    age = symbols('age')\n    \n    # Equations based on the problem statement\n    equations = [\n        age % 2 - 1,\n        age % 3 - 1,\n        age % 4 - 1,\n        age % 6 - 1,\n        age % 7\n    ]\n    \n    # Use the Chinese Remainder Theorem to find the solution\n    age_solution = solve(equations, age)\n    \n    # Assuming age as a positive number and the smallest positive solution is required\n    ans = min([sol.evalf() for sol in age_solution if sol.is_real and sol > 0])\n    \n    return int(ans)\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    ml_per_carton = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / ml_per_carton\n\n    return int(cartons_needed) if cartons_needed.is_integer() else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of avocados, peaches and lemons be 2x, 9x and 8x respectively\n    x = symbols('x')\n    \n    # After selling the fruits, the numbers become\n    # avocados: 2x - 52\n    # peaches: 9x - 12\n    # lemons: 8x - 60\n\n    # The new ratio of peaches to lemons is 6:5\n    # (9x - 12)/(8x - 60) = 6/5\n    equation = Eq((9*x - 12) / (8*x - 60), 6/5)\n\n    # Solve the equation to find the value of x\n    solution_x = solve(equation, x)[0]\n\n    # Calculate the number of avocados, peaches and lemons left\n    avocados_left = 2 * solution_x - 52\n    peaches_left = 9 * solution_x - 12\n    lemons_left = 8 * solution_x - 60\n\n    # Calculate the total number of fruits left\n    total_left = avocados_left + peaches_left + lemons_left\n\n    return total_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people + 1 - position_from_front\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 / 20\n    return int(n)\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of powers of 2 follows a pattern: 2, 4, 8, 6.\n    # Every group of 4 consecutive powers of 2 will end with the digit 6.\n    # Find the remainder when 859433 is divided by 4 to determine the last digit.\n    remainder = 859433 % 4\n\n    # Map the remainder to the last digit according to the established pattern.\n    # If the remainder is 0, it means the last digit would be 6.\n    # If the remainder is 1, it means the last digit would be 2.\n    # If the remainder is 2, it means the last digit would be 4.\n    # If the remainder is 3, it means the last digit would be 8.\n    last_digit_pattern = {0: 6, 1: 2, 2: 4, 3: 8}\n\n    return last_digit_pattern[remainder]\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    total_students = 60\n    facing_teacher = total_students\n    \n    for number in range(1, total_students + 1):\n        if number % 3 == 0:\n            facing_teacher -= 1\n        if number % 5 == 0:\n            facing_teacher += 1\n        if number % 15 == 0:\n            facing_teacher -= 1\n            \n    return facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    lcm = 2 * 4 * 6  # Least common multiple of 2, 4, and 6\n    age = 0\n    while True:\n        age += lcm\n        if age % 7 == 5:\n            break\n    return age + 1  # Add one because the age has a remainder of 1 when divided by 2, 4, and 6\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq((jill - 8) * 7, (jess + 8) * 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    # Start with the largest number and go down\n    for i in range(7, 0, -1):\n        # Generating all permutations with 'i' number of cards\n        for p in permutations(range(1, 8), i):\n            number = int(\"\".join(map(str, p)))\n            # Check divisibility by all digits used\n            if all(number % int(digit) == 0 for digit in str(number)):\n                return number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_terms = 0\n    n = 1  # Start checking from the first odd number\n    while (n * n) <= 900:\n        sum_of_odds = 0\n        consecutive_count = 0\n        while sum_of_odds <= 900:\n            sum_of_odds += (2 * consecutive_count + n)\n            consecutive_count += 1\n            if sum_of_odds == 900:\n                max_terms = max(max_terms, consecutive_count)\n                break\n        n += 2  # Increment to the next odd number\n    return max_terms\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # According to the problem statement, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # To find the total weight, we need to find A + B + C.\n    # We can sum all three equations and then divide by 2 to find the total weight:\n    # (A + B) + (B + C) + (A + C) = A + B + C + A + B + C =\n    # = 2 * (A + B + C) = 102 + 97 + 93\n\n    # Now we divide by 2 to get the total weight:\n    total_weight = (102 + 97 + 93) / 2\n    \n    # Return the total weight as the answer.\n    return total_weight\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_number = (120 // divisor + 1) * divisor + remainder\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_number = min(numbers)\n    return smallest_number\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_metres = 2\n    height_centimetres = 2\n    height_centimetres_to_metres = height_centimetres / 100\n    total_height_metres = height_metres + height_centimetres_to_metres\n    return total_height_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.80\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return int(total_score)\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    \n    total_savings = january_savings + february_savings + march_savings\n    num_months = 3\n    mean_savings = total_savings / num_months\n    \n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f'{hour:02d}{minute:02d}'\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    is_prime = all(233 % i != 0 for i in range(2, 233))\n\n    return is_prime\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(7, 106, 7))\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return sum\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    interest_rate = 0.03\n    years = 2\n\n    final_amount = principal * ((1 + interest_rate) ** years)\n    return final_amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pupils, bookmarks = symbols('pupils bookmarks')\n\n    equation1 = Eq(4 * pupils + 8, bookmarks)\n    equation2 = Eq(6 * pupils - 10, bookmarks)\n\n    solutions = solve((equation1, equation2), (pupils, bookmarks))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    # Create a list of prime numbers in the given range\n    primes_list = list(primerange(130, 151))\n    # Count the number of primes in the list\n    num_primes = len(primes_list)\n    return num_primes\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    first_multiple = 56 // 4 if 56 % 4 == 0 else 56 // 4 + 1\n    last_multiple = 92 // 4\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    # Correction to Sam's mistake\n    sam_start = 56 // 4\n    sam_last = 92 // 4\n    sam_result = sam_last - (sam_start - 1)  # He should subtract 1 less than the starting multiple\n\n    error_in_sam_answer = (sam_result != num_multiples)\n\n    if error_in_sam_answer:\n        correct_answer = num_multiples  # If error, the correct number is the one calculated above\n    else:\n        correct_answer = sam_result  # If no error, Sam's answer is correct\n\n    return correct_answer\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # The distance between Magic Town and Super Town\n    distance = 144\n\n    # Time spent to travel downstream\n    time_downstream = 8\n\n    # Speed of the ship in still water\n    speed_ship = 15\n\n    # Let the speed of the stream be 's'\n    speed_stream = symbols('s')\n\n    # The downstream speed is the sum of the speed of the ship and the stream\n    eq1 = Eq(speed_ship + speed_stream, distance / time_downstream)\n\n    # Now solve for the speed of the stream\n    speed_stream_value = solve(eq1, speed_stream)[0]\n\n    # The upstream speed is the difference between the speed of the ship and the stream\n    speed_upstream = speed_ship - speed_stream_value\n\n    # The time it takes to come back upstream is distance divided by upstream speed\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    num_select = 2\n\n    ways_to_select = comb(num_students, num_select)\n\n    return ways_to_select\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h, k = symbols('h k') # h is hippo's daily consumption, k is kangaroo's daily consumption\n\n    equation1 = Eq(h, k + 45) # the hippo eats 45 kg more food than the kangaroo each day\n    equation2 = Eq(20 * h, 10 * (20 * k)) # after 20 days, the hippo has eaten 10 times as much as the kangaroo in total\n\n    solutions = solve((equation1, equation2), (h, k))\n\n    hippo_consumption = solutions[h] * 20 # total food the hippo has consumed in 20 days\n\n    return hippo_consumption\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_waited_time = datetime.strptime(\"3:15 PM\", \"%I:%M %p\")\n    meet_time = john_waited_time + wait_time\n    return meet_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += j * sum(1/i for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Total work required is considered as 1 (completion of the work)\n    # Worker A's work rate is 1/15 per day\n    # Worker B's work rate is 1/20 per day\n    A_rate = 1/15\n    B_rate = 1/20\n    \n    # They work together for 2 days\n    work_done = 2 * (A_rate + B_rate)\n    \n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    \n    # Days Worker A needs to finish the remaining work alone\n    days_for_A = remaining_work / A_rate\n    \n    return days_for_A\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure we have at least two balls of the same color, we need to consider the worst-case scenario.\n    # The worst-case scenario would be picking balls of alternating colors until we have to pick a ball of the same color.\n    # Since we have 7 green balls and 8 blue balls, we could pick, in the worst case:\n    # green, blue, green, blue, green, blue, green, blue, green, blue, green, blue, green (7 greens, 6 blues)\n    # The next ball we pick must be blue to ensure we have two balls of the same color.\n    # Therefore, we need to pick 7 green + 6 blue + 1 more ball = 14 balls.\n    return 14\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    zodiac_signs = 12\n    # To guarantee that at least 11 students share the same zodiac sign,\n    # apply the Pigeonhole Principle, which in this case is:\n    # If n is the number of pigeonholes (zodiac signs) and m is the number of\n    # pigeons (students), there will be at least one pigeonhole with\n    # ceil(m/n) pigeons if m > n.\n    # However, since we need at least 11 students sharing the same sign,\n    # we want to find the scenario where there are only 10 students per sign,\n    # and then add one more student to ensure that at least one sign has 11.\n\n    students_needed = 10 * zodiac_signs + 1  # As 10 is the maximum that can be in each sign without having 11 in any\n    return students_needed\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    # Check if A is between B and C\n    condition1 = perm.index('B') < perm.index('A') < perm.index('C') or perm.index('C') < perm.index('A') < perm.index('B')\n    # Check if D and E are together\n    condition2 = abs(perm.index('D') - perm.index('E')) == 1\n    # Check if F and G are not adjacent\n    condition3 = abs(perm.index('F') - perm.index('G')) != 1\n    return condition1 and condition2 and condition3\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    count = 0\n    for perm in permutations(students):\n        if count_valid_permutations(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Number of balls to take to ensure 10 yellow balls are all taken\n    yellow = 5     # All yellow balls\n    # Number of balls to take to ensure 10 white balls are all taken\n    white = 15     # All white balls\n    # Number of balls to take to ensure 10 black balls are all taken\n    black = 19 + 1  # All but 9 black balls + 1 additional black ball\n\n    # Total is the worst case scenario by the pigeonhole principle\n    total_balls = yellow + white + black\n\n    return total_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    num_children = 9\n    start_seat = 3\n\n    final_seat = (total_candies - 1 + start_seat) % num_children\n    if final_seat == 0:\n        final_seat = num_children\n\n    return final_seat\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n    \n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    return lcm(7, 3)\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Inclusion-Exclusion Principle for two sets\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # Since |A ∪ B| cannot be greater than the total number of children,\n    # we solve for the minimum possible value of |A ∩ B| (intersection).\n    children_with_both = children_with_dogs + children_with_cats - total_children\n\n    # Must ensure that the number is not negative; if so, set to 0\n    children_with_both = max(children_with_both, 0)\n\n    return children_with_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shirts, skirts = symbols('shirts skirts')\n    \n    equation1 = Eq(shirts, skirts - 36)  # shirts is 36 less than skirts\n    equation2 = Eq(2/3*shirts + 5/6*skirts, 72)  # After selling, 72 shirts and skirts left\n    \n    solutions = solve((equation1, equation2), (shirts, skirts))\n    \n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    total_months = 3\n    total_saving = monthly_saving * total_months\n    return total_saving\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming the table refers to an arithmetic sequence sum:\n    # S_n = n/2 * (a1 + an), where a1 is the first term, an is the last term, and n is the number of terms.\n\n    # Without specific numbers for the sequence, I'll create variables for them\n    a1 = 1   # let's assume the table starts with number 1\n    an = 100  # let's assume the table ends with number 100\n    n = (an - a1) + 1  # Calculate number of terms\n\n    # Now calculate the sum using the arithmetic sequence sum formula\n    S_n = n/2 * (a1 + an)\n    return S_n\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    length = 100\n    width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = length // cloak_length\n    cloaks_from_width = width // cloak_width\n    total_cloaks = cloaks_from_length * cloaks_from_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    distance = 120  # The one-way distance\n    avg_speed = 30  # The average speed for the round trip\n    speed_to = 20   # The speed going to the destination\n\n    # time_to is the time taken to travel to the place at speed_to\n    time_to = distance / speed_to\n\n    # total_time is the total time for the round trip at the average speed\n    total_time = (2 * distance) / avg_speed\n\n    # time_back is the time taken for the return trip\n    time_back = total_time - time_to\n\n    # speed_back is the required speed on the way back to achieve the average speed\n    speed_back = distance / time_back\n\n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    # The ratio representing the total is the sum of the two individual ratios.\n    total_ratio = nell_ratio + joe_ratio\n\n    # Calculate the total number of sweets based on the ratio and Nell's sweets.\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 35):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to cut the rod once, which results in 2 pieces.\n    # To get 5 pieces, we need 4 cuts.\n    # Since every cut takes 2 minutes, the total time is 4 cuts * 2 minutes per cut.\n    total_time = 4 * 2\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    ans = 46 * 37\n    return ans\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    original_average = 120\n    new_average = 110\n    number_of_original_numbers = 3\n\n    # Total of the original numbers\n    total_original = original_average * number_of_original_numbers\n\n    # Find the total needed for the new average with an additional number\n    total_new = new_average * (number_of_original_numbers + 1)\n\n    # Calculate the number to be added to get the new average\n    number_to_add = total_new - total_original\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jovan, sean, heman = symbols('jovan sean heman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, heman))\n\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[heman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    return solution[0]\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    # Number of horses originally\n    horses_original = 12\n    # Number of days the pile lasts for original number of horses\n    days_original = 15\n\n    # Number of horses to feed now\n    horses_now = 20\n    \n    # According to the unitary method, if a pile of hay feeds 12 horses for 15 days,\n    # it would feed 1 horse for 12 * 15 days\n    # Therefore, we can calculate the total units of horse-feeding days the pile contains\n    total_horse_feeding_days = horses_original * days_original\n\n    # Now, we will find out for how many days it would feed 20 horses\n    # by dividing the total horse-feeding days by the number of horses\n    days_now = total_horse_feeding_days / horses_now\n\n    return days_now\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7*x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    result = 301 + 303 + 305 - 9\n    return result\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john, andy, charles = symbols('john andy charles')\n\n    # Given equations\n    equation1 = Eq(john + andy, 105)       # Total mass of John and Andy\n    equation2 = Eq(charles + john, 67)     # Total mass of Charles and John\n    equation3 = Eq(andy, 3 * charles)      # Andy's mass is 3 times Charlie's mass\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_meters / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # Price of one set of 5 individual shoes\n    shoe_price_per_set = 78\n    # Price of one pair of socks\n    sock_price_per_pair = 12\n\n    # There are 5 brothers + 1 alien = 6 individuals\n    # Each individual has 5 legs, hence 6 * 5 = 30 legs in total\n    total_legs = 6 * 5\n\n    # Since shoes are sold in sets of 5, we need the total_legs/5 sets\n    total_shoe_sets = total_legs / 5\n\n    # Since socks are sold in pairs (2 socks), we need total_legs/2 pairs\n    total_sock_pairs = total_legs / 2\n\n    # Total cost for shoes\n    total_cost_shoes = total_shoe_sets * shoe_price_per_set\n\n    # Total cost for socks\n    total_cost_socks = total_sock_pairs * sock_price_per_pair\n\n    # The total cost for the alien is the sum of total costs for shoes and socks\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n    \n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mad = np.mean(np.abs(data - np.mean(data)))\n    \n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from math import comb\n\n    total_oranges = 13\n    kids = 3\n    # Since someone may not get any oranges, we need to consider the problem as\n    # distributing n+k-1 items amongst k categories (stars and bars method).\n    # Here, n = total_oranges and k = kids.\n    return comb(total_oranges + kids - 1, kids - 1)\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        ""
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = []\n    for total_books in [49, 80, 32, 66, 8, 58]:\n        if (total_books - 4) % 7 == 0:\n            possible_totals.append(total_books)\n    return possible_totals\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Let the original 4-digit number be abc0 (0 because we're moving the unit digit to the first place)\n    # The new number after changing the digit in the ones place to the first digit will be 0abc (c because the moved digit is in the hundreds place of the new number)\n    # According to the problem abc0 + 5877 = 0abc\n    # This translates to abc * 10 + 5877 = abc + c * 1000 (moved from ones to thousands place)\n    # Subtract abc from both sides: 5877 = (c * 1000 - abc * 10) = 990c\n    # 5877 is not divisible by 990, meaning our model does not exactly work, we need to refine it.\n    # The actual equation is: 1000a + 100b + 10c + d + 5877 = 1000d + 100a + 10b + c\n    # Which simplifies to: 900a - 90b - 999c + d = -5877\n    # Because a, b, c, d are digits, d = a + 5 and c can be found by subtracting a multiple of 9 from 58(7)\n    # Looping through the possible values of a and c\n    for a in range(10):\n        for c in range(10):\n            if (900 * a - 999 * c) % 90 == 0:  # must be divisible by 90 to get a digit for 'b'\n                b = (900 * a - 999 * c) // 90\n                if 0 <= b <= 9:  # 'b' must be a digit\n                    d = a + 5\n                    if d <= 9:  # 'd' must be a digit\n                        ans = a * 1000 + b * 100 + c * 10 + a  # original number with correct digits\n                        return ans\n    return None\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_1_and_5 = 20\n    length_of_road = 200\n\n    distance_between_trees = distance_between_1_and_5 / (5 - 1)\n    num_trees = (length_of_road / distance_between_trees) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Find all possible combinations for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(cards, 2))\n    candice_combinations = list(combinations(cards, 3))\n\n    # Calculate the products of all combinations\n    candy_products = [a * b for a, b in candy_combinations]\n    candice_products = [a * b * c for a, b, c in candice_combinations]\n\n    # Find the common product\n    common_product = set(candy_products) & set(candice_products)\n    \n    # If there's no common product or more than 1, there's an error\n    if not common_product or len(common_product) > 1:\n        return \"Error\" \n\n    common_product = common_product.pop()\n  \n    # Find which numbers were used to get the common product\n    used_numbers = set()\n    for combination in candy_combinations:\n        if combination[0] * combination[1] == common_product:\n            used_numbers.add(combination[0])\n            used_numbers.add(combination[1])\n    \n    for combination in candice_combinations:\n        if combination[0] * combination[1] * combination[2] == common_product:\n            used_numbers.add(combination[0])\n            used_numbers.add(combination[1])\n            used_numbers.add(combination[2])\n\n    # Find the number that was not picked\n    not_picked = set(cards) - used_numbers\n\n    if len(not_picked) != 1:\n        return \"Error\"\n    \n    return not_picked.pop()\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12  # The rate of filling by Tap A per minute\n    rate_B = 1 / 8   # The rate of filling by Tap B per minute\n    combined_rate = rate_A + rate_B  # The combined rate of filling by both taps per minute\n    time_to_fill_half = 0.5 / combined_rate  # Time taken to fill half the tank\n    return time_to_fill_half\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    num_girls = 17\n    side_length = 1\n\n    while True:\n        total_people = (side_length + 1) ** 2\n        num_boys = total_people - num_girls\n        if num_boys > 0 and (num_boys ** 0.5).is_integer():\n            break\n        side_length += 1\n\n    return num_boys\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Given mathematical operations\n    original_expr = (36 * 21) / (6 * 7)\n    altered_expr1 = 36 * 21 / 6 * 7\n    altered_expr2 = 36 / 6 * 21 * 7\n    final_expr = 6 * 7 * 21\n    \n    # Find the correct answer\n    correct_answer = original_expr\n    \n    # Identify incorrect transformation step\n    mistake = None\n    if altered_expr1 != correct_answer:\n        mistake = 'mistake at first transformation'\n    if altered_expr2 != correct_answer:\n        mistake = 'mistake at second transformation'\n    if final_expr != correct_answer:\n        mistake = 'mistake at final transformation'\n    \n    # CIRCLE out his mistake and write out the correct workings (for conceptual purpose)\n    if mistake is not None:\n        # Correct workings: (36 * 21) / (6 * 7)\n        corrected_workings = '(36 * 21) / (6 * 7) = {}'.format(correct_answer)\n        mistake_and_correction = (mistake, corrected_workings)\n    else:\n        mistake_and_correction = ('No mistake in the transformations', 'Correct answer: {}'.format(correct_answer))\n    \n    return mistake_and_correction\n\nans = solution()\n\n# Although the correct answer is not worksheet-style circled since this is code, we represent the process as a tuple containing the mistake and the correct workings."
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    position_ann = 8\n    people_between = 3\n    position_david_from_end = 2\n    total_people = position_ann + people_between + position_david_from_end\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    # Initialize the count of 8's and page number.\n    count_8, page = 0, 0\n    \n    # Loop over the page numbers until we reach the count of 22 occurrences of the digit '8'.\n    while count_8 < 22:\n        page += 1\n        count_8 += str(page).count('8')\n    \n    return page\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Given proportion n:8 = 9:12\n    # we can represent this as n/8 = 9/12\n    # Cross multiply to solve for n: n * 12 = 9 * 8\n    n = (9 * 8) / 12\n\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To guarantee 29 balls of one color, we have to consider the worst case scenario.\n    # We first pick balls ensuring we get 28 balls of each color, which is the maximum number without getting 29 of any.\n    # For blue balls, we have to pick 28 blue balls + maximum possible red and white balls without completing 29 for each.\n    max_blue = 28\n    max_red = 28\n    max_white = 28\n\n    # Now, no matter what the next ball is, we will have 29 of that color.\n    # So we add one more ball pick to get to 29 of one color for sure.\n    next_ball = 1\n\n    # Total number of balls to be picked to guarantee to get 29 balls of one color is:\n    balls_picked = max_blue + max_red + max_white + next_ball\n\n    return balls_picked\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = 1\n    net_distance = day_distance - night_distance\n    day_count = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 8 / 100\n    time = 3\n    \n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4 * x, 19)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n\n    difference = height_mountain_world - height_mountain_england\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(10, 50):\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the amount of money Alicia, Beth, and Casey originally had\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Create equations based on the problem statement\n    # Alicia spent half of her money\n    equation1 = Eq(alicia / 2, beth - 60)\n    # Casey spent three times as much money as Alicia did\n    equation2 = Eq(3 * (alicia / 2), casey - (beth - 60))\n    # They all had the same amount of money left\n    equation3 = Eq(alicia / 2, casey - 3 * (alicia / 2))\n    # Together they had $900 initially\n    equation4 = Eq(alicia + beth + casey, 900)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since there are at least two 2s and a 5 in the factorization of 2014!,\n    # the last digit of 2014! will be 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "from sympy import factorint\n\ndef solution():\n    numbers = [2, 2, 3, 8, 5, 5, 5]\n    product = 1\n    for number in numbers:\n        product *= number\n    \n    prime_factors = factorint(product)\n    num_zeros = min(prime_factors.get(2, 0), prime_factors.get(5, 0))\n\n    return num_zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    # Simplify the fraction 6/20 to find the equivalent\n    from fractions import Fraction\n    simplified_fraction = Fraction(6, 20)\n    \n    # Find the number that 30 must be divided by to get the equivalent fraction\n    denominator_for_30 = 30 / simplified_fraction\n\n    return denominator_for_30\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the original number\n    number = symbols('number')\n\n    # Given the operations performed on the number and that the final result is 1\n    equation = Eq((number + 6) * 3 / 8 - 8, 1)\n\n    # Solve the equation for the original number\n    solution = solve(equation, number)\n\n    # Since the problem specifies a single number, we take the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n\n    original_number_value = solve(equation, original_number)\n\n    return original_number_value[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of cookies eaten on the first day\n    a = symbols('a')\n    # d is the common difference, which is 6\n    d = 6\n    # The total number of cookies eaten is the sum of an arithmetic series:\n    # S_n = n/2 * (2a + (n-1)*d), where n is the number of terms\n    n = 5\n    \n    # Total number of cookies eaten\n    S_n = 100\n    \n    # Equation representing the sum of arithmetic series\n    equation = Eq(n/2 * (2*a + (n-1)*d), S_n)\n    \n    # Solve for 'a'\n    solution = solve(equation, a)\n    \n    # Return the number of cookies eaten on the first day\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    number_of_boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    # We'll start with the largest constraint, which is being less than 90\n    # and also being a multiple of 9\n    for i in range(81, 0, -9):\n        # Now, we will check if it is one more than a multiple of 5\n        if (i - 1) % 5 == 0:\n            # Finally, we check if it's one less than a prime number\n            # We'll use a helper function to check for primality\n            if is_prime(i + 1):\n                return i  # Found the number Agnes is thinking of\n    return None  # If no number is found (should not happen given the problem constraints)\n\ndef is_prime(n):\n    '''Helper function to check if a number is prime'''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = sum(solutions.values())\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n    \n    ans = (percentage / 100) * total_amount\n    \n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    # There are 4 men and 4 women, they can be arranged amongst themselves.\n    men_arrangements = factorial(4)\n    women_arrangements = factorial(4)\n\n    # Since men and women stand alternately, we have 2 choices for who stands first.\n    first_choice = 2\n\n    # Total arrangements = men_arrangements * women_arrangements * first_choice\n    total_arrangements = men_arrangements * women_arrangements * first_choice\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    word = \"HAPPY\"\n    frequency = {letter: word.count(letter) for letter in set(word)}\n\n    denominator = 1\n    for key in frequency:\n        denominator *= factorial(frequency[key])\n\n    ans = factorial(len(word)) // denominator\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = cost_per_roll_mya * 3\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = sum(solutions.values())\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    total_girls = 12\n    total_children = total_girls / (1 - (2/5))\n    total_boys = (2 / 5) * total_children\n    return int(total_boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    peter_and_john = 2\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.6 * 0.1 * 900\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    # Flight duration\n    flight_duration_hours = 4\n    \n    # Time difference between England and St Petersburg\n    time_difference_hours = 3\n\n    # Departure time in England\n    departure_time_hours = 12\n\n    # Calculate arrival time in local St Petersburg time\n    arrival_time_hours = departure_time_hours + flight_duration_hours + time_difference_hours\n\n    # Adjust for 24-hour clock\n    arrival_time_hours = arrival_time_hours % 24\n\n    return arrival_time_hours\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        NO = 10 * N + O\n        \n        if N == 0:  # N cannot be zero as it must be a two-digit number\n            continue\n        \n        # Extract the digits of NO*NO\n        sq_NO = NO * NO\n        digits_sq_NO = [int(digit) for digit in str(sq_NO)]\n        \n        # Verify the constraints: all different digits\n        if len(set(digits_sq_NO + list(perm))) == len(digits_sq_NO) + 2:\n            return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    sum = 0\n    for i in range(25, 51):\n        if i % 2 == 1:\n            sum += (i * 2 - 1)\n        else:\n            sum -= (i * 2)\n    return sum\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # According to the Pigeonhole Principle, if Cindy picks 1 sock of each color, she has no pair.\n    # After picking the fourth sock, no matter the color, she is guaranteed to have at least one pair.\n    ans = 4 + 1  # 3 socks of different colors + 1 more\n    return ans\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    kg = 2.5\n    grams = kg * kg_to_grams\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, modulo = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km : 5 cm\n    map_distance_cm = 12  # distance on map in cm\n    ground_distance_km = map_distance_cm * scale_ratio  # distance on ground in km\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(52-i))\n    return product\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    # Total sweets given out\n    total_sweets = 360\n\n    # Proportion of boys in the classroom\n    boys_proportion = 3/8\n\n    # Number of sweets taken by a boy and a girl\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Since the boys took 4 sweets each and they are 3/8 of the class,\n    # let the total number of children be x. Therefore,\n    # total_sweets = 4 * (3/8)x + 12 * (5/8)x\n    # 360 = (3/8)x * 4 + (5/8)x * 12\n    # Solving for x gives the total number of children in the class.\n    # Then we solve for the number of girls, which is (5/8)x\n\n    # Coefficients for boys and girls based on proportion and sweets per child\n    coef_boys = sweets_per_boy * boys_proportion\n    coef_girls = sweets_per_girl * (1 - boys_proportion)\n\n    # Total coefficient\n    total_coef = coef_boys + coef_girls\n\n    # Solve for the total number of children (x)\n    total_children = total_sweets / total_coef\n\n    # Calculate the number of girls in the classroom\n    girls = total_children * (1 - boys_proportion)\n\n    return int(girls)\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the unknown number as 'n'\n    n = symbols('n')\n\n    # Set up the equations based on remainders\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    eq4 = Eq((n // 6) + (n // 7) + (n // 8), 265)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n\n    # Find the solution that satisfies all the given conditions\n    for sol in solutions:\n        if sol.is_integer and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2  # speed in kilometers per hour\n    time_seconds = 24  # time in seconds\n\n    speed_meters_per_second = (speed_kmh * 1000) / (60 * 60)  # convert speed to meters per second\n    distance_meters = speed_meters_per_second * time_seconds  # calculate distance in meters\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    # Jimmy ate 7 more carrots than Jack\n    equation1 = Eq(jimmy, jack + 7)\n    # The carrots Tommy ate are 3 times the carrots Jimmy ate\n    equation2 = Eq(tommy, 3 * jimmy)\n    # They ate a total of 43 carrots\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # Pip's statement suggests that all positive integers which are not prime are composite.\n    # However, this excludes the positive integer 1, which is neither prime nor composite.\n    # Therefore, Pip's statement is not entirely correct.\n    is_pip_correct = False\n    return is_pip_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    result = 1\n    for i in range(2, 10):\n        result *= (i + 1) / i\n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):  # Since all groups need to have different numbers of balloons and at least 1 balloon\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    if x1 + x2 + x3 + x4 == 12 and len({x1, x2, x3, x4}) == 4:\n                        count += 1\n                        # Using a set to ensure all groups have different numbers of balloons\n                    \n    return count // 24  # Dividing by 24 to account for permutations of balloon groups\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        num = 40309 + i\n        if str(num) == str(num)[::-1]:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_kept = 13\n    sweets_to_share = 42 - kasia_kept\n    sweets_each_friend = sweets_to_share // 2\n    lucie_gives_to_joan = sweets_each_friend * 2 // 7\n    lucie_keeps = sweets_each_friend - lucie_gives_to_joan\n    return lucie_keeps\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    boy_diff = 52\n    total_students = 0\n\n    # Let's assume the square array is n x n\n    # Boys will be on the corners of the array with a 2x increase for each layer\n    # The difference between boys and girls will thus be 4 times the number of layers minus 4 (as corners shared by two layers)\n    # Let's find the number of layers given the difference of 52 boys\n    for n in range(1, 100):  # Reasonable assumption that number of students in a layer is < 100\n        boy_count = 4*n - 4\n        if boy_count == boy_diff:\n            layers = n\n            break\n\n    # Now that we have the number of layers, we can find the total number of students\n    # Each layer adds (2n-1)^2 students, due to the 2n-1 students on each side of the square layer\n    for n in range(1, layers + 1):\n        total_students += (2*n - 1) ** 2\n    \n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Construct the equation\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Get the solution x\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let x be the total weekly pension\n    # On Friday night, granddad spends 1/4 of his pension\n    friday_spending = 1/4\n    # Therefore, after Friday he has 3/4 of his pension left\n    after_friday = 1 - friday_spending\n    \n    # On Saturday night, he spends 1/3 of what remains (which is 3/4 of the total pension)\n    saturday_spending = after_friday * (1/3)\n    # Therefore, after Saturday he has 2/3 of what was left after Friday\n    after_saturday = after_friday - saturday_spending\n    \n    # The fraction of his weekly pension left for the rest of the week\n    # is what remains after Saturday night\n    return after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults_to_children = 1 / 4\n\n    adults = total_people / (1 + ratio_adults_to_children)\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n\n    # Principle of Multiplication\n    total_combinations = num_school_bags * num_pencil_boxes\n\n    return total_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    equation1 = Eq(apples/pears, 3/4)\n    equation2 = Eq((apples + 36)/(pears - 36), 3/2)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_decimal = \"6129043\"\n    # Calculate the sum of the digits in one complete cycle\n    cycle_sum = sum(int(digit) for digit in recurring_decimal)\n\n    # Find the number of complete cycles and the remaining digits\n    cycle_length = len(recurring_decimal)\n    complete_cycles, remaining_digits = divmod(212, cycle_length)\n\n    # Calculate the sum for complete cycles\n    total_sum = cycle_sum * complete_cycles\n\n    # Add the sum of the remaining digits\n    total_sum += sum(int(recurring_decimal[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # Let the original square side be x.\n    # Then the total initially will be x*x.\n    # After adding 31 soldiers, the array becomes (x+1)*(x+1).\n    # Hence, we have the equation:\n    # (x+1)*(x+1) = x*x + 31\n    # Expanding, we get:\n    # x*x + 2*x + 1 = x*x + 31\n    # Simplifying,\n    x = (31-1) // 2  # since 2*x + 1 = 31\n    # The total number of soldiers now will be:\n    total_soldiers = (x+1)*(x+1)\n    return total_soldiers\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the number of litres the fish tank can hold\n    # The first condition: x = 5-litre pail - 4 litres overflow\n    # The second condition: x = 3-litre pail * (4 more pails + 1 original pail)\n    # Both conditions are equal to the number of litres the fish tank can hold, hence we can build two equations and equate them:\n    # Equation: 5*p1 - 4 = 3*p2\n    # where p1 = number of 5-litre pails, and p2 = number of 3-litre pails (4 more pails + 1 original pail)\n\n    # From second condition, we can express p2 in terms of p1\n    # Since 4 more pails of 3 litres are needed, it's 4 pails short, which is equivalent to (4 * 3) litres short\n    # So p2 = 4 (more pails) + 1 (original pail)\n    p2 = 4 + 1 \n\n    # Now, substituting p2 into the equation from the first condition\n    # We get: 5*p1 - 4 = 3*p2\n    # Calculate the value of p1 (number of 5-litre pails) needed to fill the tank\n    p1 = (3 * p2 + 4) / 5\n\n    # Since p1 must be a whole number (we can't have a fraction of a pail), round up to the nearest whole number\n    p1 = int((3 * p2 + 4) / 5) + (1 if (3 * p2 + 4) % 5 else 0)\n\n    # Now calculate the total amount of water needed using the number of 5-litre pails\n    # Total water needed = 5-litre pail * number of pails\n    water_needed = 5 * p1\n\n    return water_needed\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 * 50 / 100\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    factor_of_five = 0\n    n = 1\n    while True:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            factor_of_five += 1\n            temp_n //= 5\n        if factor_of_five >= 28:\n            break\n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    return (2 / 3) * 729\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = (people * (people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # He could take all single pairs first, which won't guarantee a matching pair\n    socks = 1 + 1 + 1 + 1  # Taking one of each kind (yellow, green, white, red, black)\n    \n    # To guarantee two pairs of the same color, he must pick two more after the singles.\n    # One more could be a yellow (5th pick), and the next one will guarantee a pair.\n    # Since we're looking for two pairs, after getting two of the same, he needs to pick\n    # one more to ensure the second pair.\n    \n    socks += 2  # This guarantees first pair\n    \n    # To guarantee the second pair, since he can pick a second single sock from remaining,\n    # He must pick one more to ensure the second pair.\n    \n    socks += 2  # This guarantees second pair\n    \n    return socks\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    # Cost of lemonade for 5 bottles\n    lemonade_cost = 5 * 1.09\n    \n    # Cost of chocolate bars for 6 bars (with conversion from pence to pounds)\n    chocolate_cost = 6 * 0.55\n    \n    # Total cost\n    total_cost = lemonade_cost + chocolate_cost\n    \n    # Amount paid with a ten-pound note\n    amount_paid = 10\n    \n    # Calculate the change\n    change = amount_paid - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_current = symbols('sam_current')\n    equation = Eq(sam_current + 4, 2 * (sam_current - 4))\n    sam_age = solve(equation, sam_current)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    # Total letters in \"RAINBOW\" where R,N,B,W are consonants and A,I,O are vowels\n    total_letters = 7\n    vowels = 3\n    consonants = total_letters - vowels\n    \n    # Possible positions for the 4 consonants, which defines the positions between them\n    consonant_positions = consonants + 1\n\n    # Factorial of consonants and vowels to calculate permutations\n    consonant_permutations = factorial(consonants)\n    vowel_permutations = factorial(vowels)\n    \n    # Total permutations of all letters as if there is no restriction\n    total_permutations = factorial(total_letters)\n    \n    # Total permutations of the consonants with vowels always together\n    # Considering the vowels as a single unit, we have 5 units to arrange (4 consonants + 1 vowel unit)\n    together_permutations = consonant_permutations * vowel_permutations\n    \n    # Subtract permutations with vowels together from total permutations to get the permutations where vowels are never together\n    ans = total_permutations - consonant_positions * together_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the given digits and convert them to integers\n    perms = [''.join(p) for p in permutations('3728')]\n\n    # Filter for odd numbers and convert to integers\n    odd_numbers = [int(p) for p in perms if int(p) % 2 != 0]\n\n    # Find the smallest odd number\n    n = min(odd_numbers)\n\n    return n\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Sum of first n terms of an arithmetic progression: S_n = n/2 * (2a + (n-1)d)\n    # where S_n is the sum of first n terms, a is the first term, n is the number of terms\n    # and d is the common difference.\n\n    # From the question, we have the following two equations:\n    # S_10 = 10/2 * (2a + (10-1)d) = 20\n    # S_30 = 30/2 * (2a + (30-1)d) = 90\n\n    # Simplifying both equations we get:\n    # 5 * (2a + 9d) = 20  => 10a + 45d = 20  => 2a + 9d = 4  (1)\n    # 15 * (2a + 29d) = 90 => 30a + 435d = 90 => 2a + 29d = 3  (2)\n\n    # Now, subtract equation (1) from equation (2):\n    # (2a + 29d) - (2a + 9d) = 3 - 4\n    # 2a + 29d - 2a - 9d = -1\n    # 20d = -1\n\n    # Solving for d, we get the common difference:\n    d = -1 / 20\n\n    return d\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for number in range(10, 21):\n        if number % 4 == 0 and 36 % number == 0:\n            return number\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15*x - 0.25*(1000 - x), -50)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    # variables for chickens, goats, and cows\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    # equation for combining chickens and goats\n    equation1 = Eq(chickens + goats, 40)\n\n    # equation for 3 times chickens being equal to 5 times cows\n    equation2 = Eq(3 * chickens, 5 * cows)\n\n    # equation 2 times goats being equal to 10 times cows\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # calculate the total number of animal feet\n    # chickens have 2 feet, goats and cows have 4 feet each\n    total_feet = solutions[chickens] * 2 + solutions[goats] * 4 + solutions[cows] * 4\n\n    return total_feet\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4\n    penny_stickers = total_stickers * (4 / ratio_sum)\n    return penny_stickers\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words_in_6_days = words_in_9_minutes * days\n\n    return total_words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6          # Kilometers per hour\n    speed_mps = speed_kmh * 1000 / 3600  # Convert km/h to m/s\n    time_s = 300             # Time in seconds\n    \n    distance_meters = speed_mps * time_s  # Distance in meters\n    \n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    from fractions import Fraction\n\n    # Jack sold 40 apples, which is 4/7 of the apples he brought yesterday\n    apples_brought_yesterday = Fraction(40) * Fraction(7, 4)\n\n    # Yesterday he brought 1/2 of all apples he has\n    total_apples = apples_brought_yesterday * 2\n\n    return total_apples.numerator  # assuming we want the answer as an integer\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # average of the first two numbers is 10, so their sum is 2 * 10\n    sum_first_two = 2 * 10\n\n    # average of the last two numbers is 22, so their sum is 2 * 22\n    sum_last_two = 2 * 22\n\n    # average of the first and last numbers is 14, so their sum is 2 * 14\n    sum_first_last = 2 * 14\n\n    # sum of all four numbers can be represented as:\n    # (first number) + (second number) + (third number) + (fourth number)\n    # or using the given averages:\n    # (sum of first two) + (sum of last two) - (first and last number)\n    # because the first and last number are counted twice when we add the sums.\n    sum_all_four = sum_first_two + sum_last_two - sum_first_last\n\n    # Average of the four numbers then is their sum divided by 4\n    avg_all_four = sum_all_four / 4\n\n    # Average of the two middle numbers can be calculated by subtracting the average of the four numbers \n    # from the sum of the first two and the last two numbers then dividing by 2\n    avg_middle_two = (sum_first_two + sum_last_two - 2 * avg_all_four) / 2\n    \n    return avg_middle_two\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    permuted_numbers = [int(''.join(num_tuple)) for num_tuple in permutations(digits)]\n    closest_number = min(permuted_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    parts = 1  # start with 1 whole plane\n    for i in range(1, lines + 1):\n        parts += i  # each new line can intersect all previous lines plus the new intersection point\n\n    return parts\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Calculate number of terms using n = (l - a)/d + 1, where l is the last term, a is the first term, and d is the difference\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of an arithmetic sequence using S = n/2 * (a + l)\n    total_seats = num_terms * (first_term + last_term) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for num in range(200, 501):\n        if '3' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    # Prime factorization of 7007\n    factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        if n == 1:\n            break\n\n    # Identify the two 2-digit multiples of 7\n    for i in range(len(factors)):\n        for j in range(i+1, len(factors)):\n            num1 = factors[i] * factors[j]\n            num2 = 7007 // num1\n            if num1 // 10 and num1 < 100 and num2 // 10 and num2 < 100:\n                return num1 + num2\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    thought_number = (result + 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    # Given the average of A and B is 22\n    average_AB = 22\n    total_AB = average_AB * 2  # Total of A and B\n\n    # Given C is 19\n    C = 19\n\n    # Average of A, B and C\n    average_ABC = (total_AB + C) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let the total ages for the Chinese, English, and Mathematics teachers \n    # be denoted by C, E, and M respectively.\n    \n    average_CE = 34  # Average age of Chinese and English teachers\n    average_EM = 36  # Average age of English and Mathematics teachers\n    average_CM = 44  # Average age of Chinese and Mathematics teachers\n    \n    # According to the average definitions, we have:\n    # (C + E) / 2 = average_CE => C + E = 2 * average_CE\n    # (E + M) / 2 = average_EM => E + M = 2 * average_EM\n    # (C + M) / 2 = average_CM => C + M = 2 * average_CM\n    \n    # Summing all these, we get:\n    # 2C + 2E + 2M = 2 * (average_CE + average_EM + average_CM)\n    total_CE = 2 * average_CE\n    total_EM = 2 * average_EM\n    total_CM = 2 * average_CM\n    \n    total_sum = total_CE + total_EM + total_CM\n    \n    # Now we have double the sum of all the individual subjects' total ages\n    # because each pair of subjects is counted twice in the sum (2C + 2E + 2M).\n    # We have to divide the count by 2 to get the actual sum of their ages.\n    \n    # Finally, the average is the total age sum divided by the number of subjects (3),\n    # C, E, and M are the total ages for teachers of Chinese, English, and Mathematics, respectively.\n    average_all = (total_sum / 2) / 3\n    \n    return average_all\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import date\n\n    birth_date = date(1533, 9, 7)\n    death_date = date(1603, 3, 24)\n\n    age_in_days = (death_date - birth_date).days\n    age_in_years = age_in_days // 365  # Approximation since we are not accounting for leap years\n\n    return age_in_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    cakes = 50\n    layers = 9\n    max_cakes_in_layer = (cakes - 1) // layers + 1\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = 1\n    while (side_length + 1) ** 2 <= 23:\n        side_length += 1\n    \n    rope_to_cut = 23 - side_length ** 2\n\n    return rope_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    part1 = 20 + (1 * 7)\n    part2 = (21 + 1) * 7\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - (2018 + i) // 5\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # The difference between the number of cookies in two adjacent boxes is denoted by d\n    d = symbols('d')\n\n    # Sum of arithmetic sequence formula: n/2 * (2*a1 + (n-1)*d) = total_sum\n    # In this case, a1 is 11, the number of boxes n is 10, and total_sum is 425.\n    n = 10\n    a1 = 11\n    total_sum = 425\n\n    # The sum of arithmetic sequence equation\n    equation = Eq(n/2 * (2*a1 + (n-1)*d), total_sum)\n\n    # Solve for d, the difference between the number of cookies in two adjacent boxes\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # According to the question, the sum of seven consecutive odd numbers is 357\n    # Let the first term of the sequence be 'a'\n    # Then the sequence of seven consecutive odd numbers can be represented as:\n    # a, a+2, a+4, a+6, a+8, a+10, a+12\n    # The sum of these terms is equal to:\n    # 7a + 2+4+6+8+10+12 = 357\n    # Simplifying the constant terms: 7a + 42 = 357\n    # Subtracting 42 from both sides: 7a = 315\n    # Dividing both sides by 7: a = 45\n    # So the smallest of these seven numbers is 45\n    \n    sum_of_numbers = 357\n    number_of_terms = 7\n    sum_of_differences = (number_of_terms - 1) * number_of_terms\n    smallest_number = (sum_of_numbers - sum_of_differences) // number_of_terms\n    return smallest_number\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "def solution():\n    from math import factorial\n    def permutations(n, counts):\n        perm = factorial(n)\n        for c in counts.values():\n            perm //= factorial(c)\n        return perm\n    \n    unique_digits_counts = {'1': 2, '2': 1, '3': 1, '4': 1}\n    total_numbers = permutations(5, unique_digits_counts)\n    \n    return total_numbers\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 / 10\n    year_5_girls = year_5_students * 3 / 5\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1/i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    ans = int(A)\n    return ans\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all([num % 3 == 2, num % 4 == 2, num % 5 == 2, num % 7 == 5]):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for speeds\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # Given ratio of time taken by Martin and Carter (Martin's time : Carter's time)\n    time_ratio_martin = 9\n    time_ratio_carter = 13\n\n    # Given that Martin's speed is 20 metres per minute faster than Carter's\n    equation1 = Eq(martin_speed, carter_speed + 20)\n\n    # The distance covered by both is the same\n    # Since time * speed = distance, the ratio of their speeds will be the inverse of the time taken ratio\n    equation2 = Eq(martin_speed / time_ratio_martin, carter_speed / time_ratio_carter)\n\n    # Solve the two equations to get Carter's speed\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x in range(1, 13):\n        for y in range(1, 13):\n            z = 13 - x - y\n            if z > 0 and z != x and z != y and z < 13:\n                count += 1\n    return count // 6  # Divided by 6 to account for permutations of the 3 numbers\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem, we find a number which when divided by 5, 6, or 7\n    # leaves a remainder of 1 in each case. That is we solve the following congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # Based on the definition of even numbers and prime numbers,\n    # 2 is the only even prime number because every other even number has at least two distinct positive divisors: 1 and the number itself.\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time George takes to paint the room on his own be g hours.\n    g = symbols('g')\n\n    # Fred's rate is 1 room per 9 hours, so in 1 hour he can paint 1/9 of a room.\n    fred_rate = 1/9\n\n    # George's rate is 1 room per g hours, so in 1 hour he can paint 1/g of a room.\n    # Together their rate is 1 room per 6 hours, so in 1 hour they paint 1/6 of a room.\n    # The equation representing their combined rates is:\n    # 1/9 + 1/g = 1/6\n\n    equation = Eq(1/9 + 1/g, 1/6)\n\n    # Solve for g\n    solution = solve(equation, g)\n\n    return solution[0]\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    return 18 - x\n\nans = solution(x)  # Replace x with the actual amount of cloth used for the dress to get the answer."
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    ans = 543 + 284\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    red_apples = 14\n    yellow_apples = 20\n    max_different_apples = red_apples if red_apples < yellow_apples else yellow_apples\n    \n    # We take max_different_apples + 1 to ensure we have at least one pair of the same color\n    ans = max_different_apples + 1\n    \n    return ans\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Given final number of red pens\n    final_red_pens = 20\n    # Given final ratio of red to black pens\n    final_ratio_red_to_black = 5 / 13\n    # Calculate the final number of black pens using the final ratio\n    final_black_pens = (final_red_pens / final_ratio_red_to_black)\n    # Initial ratio of red to black pens\n    initial_ratio_red_to_black = 3 / 7\n    # Since equal number is sold, the difference in initial and final number of red pens \n    # is the same as the difference in the black pens\n    # Calculate the initial number of red pens\n    initial_red_pens = (final_red_pens * 7) / 3\n    # Calculate number of red pens sold\n    red_pens_sold = initial_red_pens - final_red_pens\n\n    return red_pens_sold\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Total number of legs for cats, dogs and rabbit\n    total_legs_known_pets = 2 * legs_per_cat + 2 * legs_per_dog + 1 * legs_per_rabbit\n\n    # Remaining legs is assumed to be of birds\n    remaining_legs_for_birds = 28 - total_legs_known_pets\n\n    # Calculate the number of birds\n    num_birds = remaining_legs_for_birds // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # Each person Tina, Joe, Mike, and Black can choose from 5 entrances.\n    choices_per_person = 5\n    \n    # Since the order in which they enter is uncertain, we simply raise the number\n    # of choices each person has to the power of the number of people.\n    total_ways = choices_per_person ** 4\n    \n    # Return the total number of different ways they can enter the zoo.\n    return total_ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    last_year_value = 10500\n    percentage_increase = 0.05\n\n    # Calculate the original price before the 5% increase\n    original_price = last_year_value / (1 + percentage_increase)\n\n    # Calculate the value of the house after losing 5% this year\n    this_year_value = original_price * (1 - percentage_increase)\n\n    # Calculate the profit or loss by subtracting the original price from this year's value\n    profit_or_loss = this_year_value - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n    \n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    ans = [factor for factor in factors_of_42 if 10 < factor < 20][0]\n    return ans\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    target_average = 6\n    total_numbers = 4\n\n    sum_of_numbers = sum(numbers)\n    total_for_target_average = target_average * total_numbers\n    missing_number = total_for_target_average - sum_of_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen_price, ruler_price = symbols('pen_price ruler_price')\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    equation2 = Eq(ruler_price, pen_price + 0.90)\n    \n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n    \n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight // bag_weight\n    if total_weight % bag_weight != 0:\n        num_bags += 1  # If there is a remainder, we need an extra bag\n    return num_bags\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Process the operations in reverse order to find the birthday month and day\n    result += 50  # Reverse of subtracting 50\n    day = result % 100  # Extract day of birth\n    month = (result - day) / 100  # Extract month of birth after reversing the operations\n    month = ((month / 5) + 20) / 5 - 6  # Reverse remaining operations (steps 2-6)\n    month = int(month / 4)  # Reverse of multiplying by 4 (step 2)\n    \n    return (month, day)\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import isprime\n\ndef solution():\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for perm in permutations(digits):\n        first = int(''.join(perm[:3]))\n        second = int(''.join(perm[3:5]))\n        third = int(''.join(perm[5:]))\n        if second == 2 * first and third == 4 * first:\n            return third\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the first part of the sequence: 4+8+12+...+400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_first_part = (first_term + last_term) * num_terms // 2\n\n    # Calculate the sum of the second part of the sequence: 396+...+12+8+4\n    # It is the same as the first part excluding the last term 400\n    last_term_second_part = 396\n    num_terms_second_part = (last_term_second_part - first_term) // difference + 1\n    sum_second_part = (first_term + last_term_second_part) * num_terms_second_part // 2\n\n    # The total sum is the sum of both parts\n    total_sum = sum_first_part + sum_second_part\n\n    return total_sum\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_price = 5\n    refill_price = 1\n    total_money = 10\n    \n    # Buy the first cup\n    cups = 1 if total_money >= initial_price else 0\n    total_money -= initial_price * cups\n\n    # Buy as many refills as possible\n    cups += total_money // refill_price\n\n    return cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Given that 3 monkeys eat 96 peaches in 2 days\n    peaches_per_monkey_per_day = 96 / (3 * 2)  # Unit rate\n\n    # Calculate the peaches that 5 monkeys would eat in 4 days\n    total_peaches = peaches_per_monkey_per_day * 5 * 4\n\n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = factorial(2)\n    comic_books = factorial(3)\n    science_books = factorial(4)\n    # There are 3 types of books, thus 3! ways to arrange these types\n    arrange_types = factorial(3)\n    \n    ans = story_books * comic_books * science_books * arrange_types\n    return ans\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    base_tax_rate = 0.06\n    base_income = 50000\n    paid_tax = 10000\n\n    # Equation for the income tax paid\n    tax_equation = Eq(base_tax_rate * base_income + (income - base_income) * (base_tax_rate + T / 100), paid_tax)\n\n    # Solve the equation for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend must get at least one ice-cream, \n    # we give one to each, and then distribute the remaining 2 amongst the 3 friends.\n    remaining_ice_cream = 5 - 3  # Because we have given each friend 1 ice-cream\n\n    # The problem is now equivalent to a \"Stars and Bars\" problem\n    # Where we have to place 2 dividers amongst the 2 ice-creams to divide them amongst 3 friends\n    total_slots = remaining_ice_cream + 3 - 1  # Total slots = remaining ice-creams + friends - 1\n    \n    # Choose 2 slots for dividers out of the total slots\n    ways = math.comb(total_slots, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Spending amounts\n    jan_to_mar = 450 * 3  # $450 per month for 3 months\n    apr_to_jul = 350 * 4  # $350 per month for 4 months\n    aug_to_oct = 1250     # $1250 total for 3 months\n    nov_to_dec = 400 * 2  # $400 per month for 2 months\n\n    # Total spending for the year\n    total_spending = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Total number of months\n    total_months = 12\n\n    # Average spending per month from January to December\n    average_per_month = total_spending / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40  # m/min\n    cycling_speed = 60  # m/min\n\n    # Assume the distance to the library is d meters.\n    # Time taken to walk to the library (time = distance / speed)\n    time_walking = 1  # Time walking in terms relative to distance (d / d)\n    time_cycling = 1 / (cycling_speed / walking_speed)  # Time cycling relative to walking time (d / (60/40 * d))\n\n    # Total time for the whole trip (both walking and cycling times)\n    total_time = time_walking + time_cycling\n\n    # Distance for the whole trip (to the library and back)\n    total_distance = 2  # In terms relative to distance (2 * d / d)\n\n    # Average speed (total distance / total time)\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Price of one serving of ice cream\n    price_per_serving = (2.30 + 0.30) / (5 - 3)\n\n    # Money given by Sophie's mother\n    money_given = price_per_serving * 3 - 0.30\n\n    return money_given\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5)/(3*x + 2) + (2)/(1.5*x + 1), (4.5)/(5 - 6*x) - (3)/(2.5 - 3*x))\n\n    solutions = solve(equation, x)\n    \n    # Solve might give multiple solutions, but we will assume we want the real solution only.\n    real_solutions = [sol.evalf() for sol in solutions if sol.is_real]\n    return real_solutions[0] if real_solutions else None\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    total_sweets = sum(int(d) * 10 ** i for i, d in enumerate(str(127)[::-1].replace('M', '0')))\n    sweets_per_bag = total_sweets // 25\n    return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    # given proportion 9:x = y:2, we set up an equation for it\n    equation = Eq(9/x, y/2)\n\n    # we solve the proportion equation to get the relationship between x and y\n    relationship = solve(equation, y)[0]\n\n    # substitute x=3 into the relationship to find y\n    y_value = relationship.subs(x, 3)\n\n    return relationship, y_value\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    odd_numbers = []\n\n    for p in permutations(digits):\n        if p[-1] in ['3', '5']:\n            number = int(''.join(p))\n            odd_numbers.append(number)\n\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure that at least two of the same color are removed, we need 2 green + 8 blue + 1 extra ball.\n    # The extra ball will guarantee that we have at least two of the same color.\n    return 2 + 8 + 1\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Variable for the initial number\n    x = symbols('x')\n    \n    # Perform the operations step by step\n    result = x\n    result = result + 3     # Add 3\n    result = result * 2     # Multiply by 2\n    result = result - 2     # Take away 2\n    result = result + 10    # Add 10\n    result = result / 2     # Divide by 2\n    result = result - x     # Take away the number we started with\n    \n    # Simplify the expression to find the number that is left\n    ans = simplify(result)\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let F be the number of Felicia's bracelets originally,\n    # and J be the number of Janice's bracelets originally (J = 96).\n    J = 96\n    \n    # Let B be the number of bracelets Janice buys from Felicia.\n    # After this transaction, Felicia has (3/5) * F - B bracelets,\n    # and Janice has J + B bracelets.\n    # Then the ratio of their bracelets is 5:(7).\n    # So, 5 / 7 = ((3/5) * F - B) / (J + B)\n    \n    # Solving for B gives us B = (2/5) * ((3/5) * F), as Janice\n    # bought exactly 2/5 of the bracelets that Felicia sold.\n    # Hence we substitute (2/5) * ((3/5) * F) for B into our equation.\n    # 5 / 7 = ((3/5) * F - (2/5) * ((3/5) * F)) / (96 + (2/5) * ((3/5) * F))\n    \n    # Solving for F:\n    # (5 / 7) * (96 + (2/5) * ((3/5) * F)) = (3/5) * F - (2/5) * ((3/5) * F)\n    # (5 / 7) * 96 + (5 / 7) * (2/5) * ((3/5) * F) = (3/5) * F - (2/5) * ((3/5) * F)\n    # (5 / 7) * 96 = (3/5) * F - (2/5) * ((3/5) * F) - (5 / 7) * (2/5) * ((3/5) * F)\n    # (5 / 7) * 96 = (3/5) * F * (1 - (2/5) - (2/5) * (5 / 7))\n    # (5 / 7) * 96 = (3/5) * F * (1 - (2/5) - (2/35))\n    # (5 / 7) * 96 = (3/5) * F * ((35 - 14 - 2) / 35)\n    # (5 / 7) * 96 = (3/5) * F * (19 / 35)\n    # F = ((5 / 7) * 96) / ((3/5) * (19 / 35))\n    # F = (480 / 7) / (57 / 35)\n    # F = (480 / 7) * (35 / 57)\n    \n    F = (480 / 7) * (35 / 57)\n\n    # B = (2/5) * ((3/5) * F)\n    B = (2/5) * ((3/5) * F)\n    \n    return int(B)\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    import math\n\n    numerator = -6.94 - math.pow(9.604, 1/3)\n    denominator = math.sqrt(44.541/67) - (-377/6 * 5/3)\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Cost of science fictions\n    science_fiction_cost = 20 * 4\n    # Cost of comic books\n    comic_books_cost = 10 * 5\n    # Cost of novels\n    novels_cost = 20 * 6\n    \n    # Total cost of all books\n    total_cost = science_fiction_cost + comic_books_cost + novels_cost\n    # Number of books\n    total_books = 20 + 10 + 20\n    \n    # Average cost per book\n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(51, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    # Counting numbers with exactly two sevens\n    for i in range(100, 1000):\n        if str(i).count('7') == 2:\n            count += 1\n    # Counting numbers with exactly three sevens\n    for i in range(100, 1000):\n        if str(i).count('7') == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jack's and Kyle's money\n    jack, kyle = symbols('jack kyle')\n\n    # Equation 1: Jack had 5 times as much money as Kyle\n    eq1 = Eq(jack, 5 * kyle)\n\n    # Equation 2: After Jack lost $72, Kyle had 2/7 as much money as Jack\n    eq2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (jack, kyle))\n\n    # Return the amount of money Kyle had\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Maximum shirts she can take without getting a yellow is when she takes all non-yellow shirts.\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown\n    # To ensure she gets at least 1 yellow shirt, she must take at least one more.\n    shirts_to_take = non_yellow_shirts + 1\n\n    return shirts_to_take\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35\n    total_individual_cost = 15 * individual_cost\n    savings = total_individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_period = 11\n\n    total_amount = principal * (1 + interest_rate * time_period)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total_sum = 3/4 + 3/4 + 3/4\n    missing_number = (total_sum - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = 20  # number of terms\n    S = 560  # sum of terms\n    d = 2  # common difference\n\n    a = symbols('a')  # first term symbol definition\n\n    # The sum of an arithmetic progression is given by S = n/2 * (2*a + (n-1)d)\n    # Rearrange the equation to find the first term (a)\n    \n    equation = Eq(n/2 * (2*a + (n-1)*d), S)\n    solutions = solve(equation, a)\n\n    smallest_term = solutions[0]\n    return smallest_term\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < depth:\n        day += 1\n        total_climbed += climb_up\n        if total_climbed >= depth:\n            break\n        total_climbed -= slip_down\n    \n    return day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    pages_first_four_days = 25 * 4\n    pages_next_six_days = 40 * 6\n    pages_last_five_days = 80\n\n    total_days = 4 + 6 + 5\n    total_pages = pages_first_four_days + pages_next_six_days + pages_last_five_days\n\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the number of toys Penny originally had\n    # Let y be the number of toys her brother originally had\n    # We are given that Penny's original number of toys is 10 more than her brother's original number of toys\n    # Penny's toys after giving some to her brother is 14, and her brother's toys after receiving is 12\n    # According to the problem, we have:\n    # x - number_of_toys_given = 14\n    # y + number_of_toys_given = 12\n    # x - y = 10\n    # We need to find y\n    \n    from sympy import symbols, Eq, solve\n\n    x, y, number_of_toys_given = symbols('x y number_of_toys_given')\n    equation1 = Eq(x - y, 10)\n    equation2 = Eq(x - number_of_toys_given, 14)\n    equation3 = Eq(y + number_of_toys_given, 12)\n\n    # We solve the equations for x, y, and number_of_toys_given\n    solutions = solve((equation1, equation2, equation3), (x, y, number_of_toys_given))\n\n    # We are interested in the value of y\n    return solutions[y]\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_a = 14\n    birds_on_tree_b = birds_on_tree_a + 7\n    total_birds = birds_on_tree_a + birds_on_tree_b\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    # Define the numbers to be multiplied which are outside of the multiplication table\n    # Assumption based on the typical multiplication table range up to 12x12\n    # Considered two numbers greater than 12 (outside of common multiplication table range)\n    num1 = 13\n    num2 = 17\n\n    # Multiply the two numbers\n    ans = num1 * num2\n\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age // 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    num_terms = 50\n    first_term = 1\n    last_term = 50\n\n    ans = (num_terms * (first_term + last_term)) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Tom could draw 3 cards from each of the 4 suits without having 4 of the same suit.\n    max_different_suits = 3 * 4\n    \n    # To be sure that Tom has 4 cards of the same suit, he needs to draw one more card.\n    ans = max_different_suits + 1\n    \n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    unsold_percentage = 1 - 0.60\n    total_tickets = 28 / unsold_percentage\n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts spent by Hayden and Mitchell\n    amount_spent = symbols('amount_spent')\n\n    # Hayden's and Mitchell's remaining money after spending\n    hayden_remaining = 1420 - amount_spent\n    mitchell_remaining = 505 - amount_spent\n\n    # Equation representing the problem's statement\n    equation = Eq(hayden_remaining, 4 * mitchell_remaining)\n\n    # Solve the equation to find the amount spent\n    amount_spent_solution = solve(equation, amount_spent)\n\n    return amount_spent_solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Number of girls (given)\n    girls = 45\n    \n    # Fraction of children that are boys\n    boys_fraction = 3 / 8\n    \n    # Fraction of children that are girls is rest of the children (1 - fraction of boys)\n    girls_fraction = 1 - boys_fraction\n    \n    # If there are 45 girls, then the total number of children is girls / fraction of girls\n    total_children = girls / girls_fraction\n    \n    # Fraction of people that are adults\n    adults_fraction = 3 / 7\n    \n    # Fraction of people that are children (1 - fraction of adults)\n    children_fraction = 1 - adults_fraction\n    \n    # If total_children is the number of children, then total_people is total_children / fraction of children\n    total_people = total_children / children_fraction\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Starting amount in dollars\n    initial_two_dollar_notes = 5 * 2\n    initial_fifty_cent_coins = 7 * 0.50\n    initial_total = initial_two_dollar_notes + initial_fifty_cent_coins\n    \n    # Cost of the file\n    file_cost = 11.95\n\n    # Money left after purchasing the file\n    money_left = initial_total - file_cost\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_packets = 2200\n    sunday_packets = saturday_packets - 435\n    total_packets = saturday_packets + sunday_packets\n    return total_packets\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    daily_climb = 3\n    nightly_slide = 1\n    net_daily_climb = daily_climb - nightly_slide\n    days = 0\n    current_height = 0\n\n    while current_height < total_distance:\n        days += 1\n        current_height += daily_climb\n        if current_height >= total_distance:\n            break\n        current_height -= nightly_slide\n\n    return days\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18  # number of pupils\n    r = 3   # number of pupils to seat in a row\n\n    # Number of ways to seat r pupils from n pupils is given by permutation P(n, r) = n! / (n-r)!\n    num_ways = factorial(n) / factorial(n - r)\n\n    return int(num_ways)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = 2\n    total_willow_trees = (ginkgo_trees - 1) * willow_trees_between\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_taken = distance / speed_upstream\n\n    return time_taken\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let's define the weights of Adam, Ben, and Carl as A, B, and C respectively.\n    # We have the following equations based on the information given:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # We can add all three equations to get 2*(A + B + C) (since each person is counted twice)\n    total_double = 102 + 97 + 93  # A + B + C counted twice\n    total_weight = total_double // 2  # Divide by 2 to get the actual total weight\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n    \n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight_in_kg = 500 / 1000\n    cheese_cost = 7.48 * cheese_weight_in_kg\n    apple_cost_each = 12 / 100\n    yoghurt_cost_each = 46 / 100\n    total_cost = cheese_cost + (8 * apple_cost_each) + (2 * yoghurt_cost_each)\n    change_from_10_pounds = 10 - total_cost\n    return round(change_from_10_pounds, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    combined_time = 6\n    combined_rate = total_aircrafts / combined_time\n    \n    andy_rate = combined_rate - zack_rate\n    andy_time = total_aircrafts / andy_rate\n    \n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    num_people = 0\n    for student_layer in range(1, 500, 2):  # start with a layer of students and iterate\n        teacher_layer = student_layer + 1\n        students = student_layer**2\n        teachers = teacher_layer**2 - students if teacher_layer <= 499 else 0\n        if (students - teachers) == 80:\n            num_people = students + teachers\n            break\n    return num_people\n        \nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    \n    alan_amount = 74\n    bilal_amount = 86\n    total_amount = 400\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total_amount)\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    total_ratio = 2 + 7 + 6\n    orange_ratio = 7\n\n    volume_orange = (orange_ratio / total_ratio) * total_volume\n\n    return volume_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    amount_saved = daily_saving * days_saved\n    amount_left = original_amount + amount_saved - lent_to_brother - spent_on_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid_to_mum = 10.50\n    remaining_money = total_money - money_repaid_to_mum\n    money_spent_on_magazines = remaining_money / 2\n    money_left = remaining_money - money_spent_on_magazines\n    \n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    import sympy as sp\n\n    # Define the variable q\n    q = sp.symbols('q')\n\n    # Define the equation that 44000/q should be a cube\n    equation = sp.Eq(44000 / q, q**3)\n\n    # Solve the equation for the value of q\n    ans = sp.solve(equation, q)\n\n    # Get the non-zero real solution for q as an integer\n    q_value = [int(sol.evalf()) for sol in ans if sol.is_real and sol != 0][0]\n\n    return q_value\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    width, length = symbols('width length')\n\n    equation1 = Eq(length, 2 * width)\n    equation2 = Eq(2 * (length + width), 72)\n\n    solutions = solve((equation1, equation2), (width, length))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    number = 81\n    factors_count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # in kg\n    coefficient_of_static_friction = 0.4\n    normal_force = mass * 9.81  # Force due to gravity, in N (mass * acceleration due to gravity)\n\n    max_friction_force = coefficient_of_static_friction * normal_force  # Maximum static friction force\n\n    applied_force = 250  # in N\n\n    # The static friction force will equal the applied force if it is below the maximum static friction force, \n    # otherwise, it will be at its maximum.\n    if applied_force < max_friction_force:\n        friction_force = applied_force\n    else:\n        friction_force = max_friction_force\n\n    return friction_force\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Calculate the mass of the salt in each solution\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n\n    # Calculate total mass of the mixed solution\n    total_solution = 300 + 500\n\n    # Calculate total mass of salt in the mixed solution\n    total_salt = nick_salt + nicole_salt\n\n    # Calculate the concentration of the resulting salt solution\n    concentration = total_salt / total_solution\n\n    # Convert the concentration to a percentage\n    concentration_percent = concentration * 100\n\n    return concentration_percent\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of money Mark has be 'm'\n    m = symbols('m')\n\n    # Define the equations based on the problem statements.\n    # If Steve paid:\n    #   - Steve would have m + 40 left\n    #   - Steve, Mark, Ryan: 3:8:9\n    #   - Total left: m + 40 + m + m = 3m + 40\n    #   - Steve's share: 3/20 * (3m + 40) = (9m + 120) / 20\n    #   - Mark's share: 8/20 * (3m + 40) = (24m + 320) / 20\n    #   - Ryan's share: 9/20 * (3m + 40) = (27m + 360) / 20\n    #   - Steve's share = Mark's share + 40\n    eq1 = Eq((9*m + 120) / 20, (24*m + 320) / 20 + 40)\n\n    # If Ryan paid:\n    #   - Ryan would have m + 40 left\n    #   - Steve, Mark, Ryan: 5:4:1\n    #   - Total left: m + 40 + m + m = 3m + 40\n    #   - Steve's share: 5/10 * (3m + 40) = (15m + 200) / 10\n    #   - Mark's share: 4/10 * (3m + 40) = (12m + 160) / 10\n    #   - Ryan's share: 1/10 * (3m + 40) = (3m + 40) / 10\n    #   - Ryan's share = Mark's share + 40\n    eq2 = Eq((3*m + 40) / 10, (12*m + 160) / 10 + 40)\n\n    # If Mark paid:\n    #   - Mark would have m + 40 left\n    #   - Steve, Mark, Ryan: 10:1:9\n    #   - Total left: m + 40 + m + m = 3m + 40\n    #   - Steve's share: 10/20 * (3m + 40) = (30m + 400) / 20\n    #   - Mark's share: 1/20 * (3m + 40) = (3m + 40) / 20\n    #   - Ryan's share: 9/20 * (3m + 40) = (27m + 360) / 20\n    #   - Mark's share = Steve's share + 40\n    eq3 = Eq((3*m + 40) / 20, (30*m + 400) / 20 + 40)\n\n    # Solve the equations for 'm' (Mark's amount before paying)\n    m_value = solve((eq1, eq2, eq3), (m))\n\n    # Now, calculate the cost of the meal with the given ratio when Steve paid:\n    # Total money before Steve paid is m + (m + 40) + (9/8 * m + 40/8)\n    # Total money after Steve paid is 3m + 40 (since 20 x 1/20 * (3m + 40))\n    # Cost is the difference\n    cost = m_value[m] + (m_value[m] + 40) + (9/8 * m_value[m] + 40/8) - (3 * m_value[m] + 40)\n\n    return cost\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    # B scored 50 points less than A\n    equation1 = Eq(B, A - 50)\n    # If B gave A 25 points, then A's score would be 5 times B's score\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = cube + 1\n        if (int(square ** 0.5))**2 == square:\n            return square\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total number of buttons James and Nina have is 24\n    total_buttons = Eq(james + nina, 24)\n    # When Nina gives 6 buttons to James, they have the same number of buttons\n    same_buttons = Eq(nina - 6, james + 6)\n\n    # Solve the system of equations\n    solutions = solve((total_buttons, same_buttons), (james, nina))\n\n    # Return the number of buttons Nina has originally\n    return solutions[nina]\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n_diff = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / n_diff\n\n    return common_difference\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_hours * total_workers)\n    \n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_distance = 5\n    night_distance = -3\n    total_distance = 16\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    y = 5 + 0.10 * x\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    least_number_of_coins, _ = solve_congruence(*congruences)\n\n    return least_number_of_coins\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n\n    if fraction_value > decimal_value:\n        ans = fraction_value\n    else:\n        ans = decimal_value\n        \n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return float(result)\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_payment = 275\n    flat_fee = 30\n    daily_fee_first_5_days = 25\n    daily_fee_after_5_days = 20\n    \n    # Calculate payment without flat fee\n    payment_without_flat_fee = total_payment - flat_fee\n    \n    # Check if payment is for 5 days or less\n    if payment_without_flat_fee <= 5 * daily_fee_first_5_days:\n        # Calculate number of days possible within the 5 day period\n        num_days = payment_without_flat_fee // daily_fee_first_5_days\n    else:\n        # Calculate number of days possible after the 5 day period\n        num_days = 5 + (payment_without_flat_fee - 5 * daily_fee_first_5_days) // daily_fee_after_5_days\n    \n    return int(num_days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # Define the ratio of weights\n    dog_to_rabbit = 8 # 1 dog is equal to 8 rabbits\n    rabbit_to_chicken = 2 # 1 rabbit is equal to 2 chickens\n    \n    # Calculate how many chickens weigh as much as 1 dog\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    \n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    # Initialize the result with the value of 1, since we will multiply values iteratively\n    result = 1\n    # Loop through the range from 2 to 50 because the pattern starts with 1/2 and ends at 1/50\n    # For each term, subtract the inverse of 52 minus the current number from the inverse of the current number\n    for i in range(2, 51):\n        result *= (1/i - 1/(52 - i))\n    return result\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    height = 270\n    ratio = 0.1\n    total_distance = height\n\n    while height > 0:\n        rebound_height = height * ratio\n        total_distance += 2 * rebound_height  # up and down\n        height = rebound_height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Let x be the page number of the first side of the sheet. Then the page numbers will be x, x+1, x+2, x+3\n    # The sum of these four page numbers is 58, therefore the equation is:\n    # x + (x + 1) + (x + 2) + (x + 3) = 58\n    # Simplifying, we get 4x + 6 = 58\n    # Solving for x, we get x = (58 - 6) / 4\n    \n    first_page = (58 - 6) / 4\n    \n    # The sheet number is half the number of the first side (since it's folded in half)\n    # The number of sheets would be x/2 (because two pages fit on one sheet)\n    \n    sheets = first_page / 2\n    \n    return int(sheets)\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    green, yellow = symbols('green yellow')\n    \n    # Initial condition: an equal number of green and yellow toy cars\n    equation1 = Eq(green, yellow)\n    \n    # After giving away some cars, he has thrice as many yellow as green cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n    \n    # Number of green toy cars Sam had in the end\n    green_cars_end = solutions[green] - 60\n    \n    return green_cars_end\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    distance = 3000\n    buck_speed = 600\n    elephant_speed = 250\n\n    buck_time = distance / buck_speed\n    elephant_time = distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = (last_term - first_term) // difference + 1\n    sum_forward = num_terms * (first_term + last_term) // 2\n    sum_backward = sum_forward - first_term - last_term\n    ans = sum_forward + sum_backward\n    return ans\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15\n\n    bad_apples = (total_apples * percentage_bad) / 100\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    simon_speed = 80  # km/h\n    wife_speed = 60   # km/h\n    distance_apart = 15  # km\n\n    relative_speed = simon_speed - wife_speed\n    \n    time_to_catch_up = distance_apart / relative_speed  # hours\n    \n    catch_up_time_in_minutes = time_to_catch_up * 60  # convert hours to minutes\n\n    # 6:10pm is 18 hours and 10 minutes from midnight\n    initial_time_minutes = 18 * 60 + 10\n    \n    overtaking_time_minutes = initial_time_minutes + catch_up_time_in_minutes\n    \n    overtaking_hour = int(overtaking_time_minutes // 60)\n    overtaking_minute = int(overtaking_time_minutes % 60)\n    \n    return f\"{overtaking_hour:02d}:{overtaking_minute:02d}\"\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    pencils_cost_per_unit = 1.80 / 12\n    pen_to_pencil_cost_ratio = 7 / 3\n    pen_cost_per_unit = pencils_cost_per_unit * pen_to_pencil_cost_ratio\n    cost_of_5_pens = 5 * pen_cost_per_unit\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2  # coffee, milk\n    food_items = 3  # hamburgers, burritos, bagels\n    \n    combinations = drinks * food_items\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked = 0\n    for i in range(1, 101):\n        # Check if locker number i gets toggled an even number of times\n        # which implies it ends up being unlocked\n        if int(i**0.5)**2 != i:   # i is not a perfect square\n            unlocked += 1\n    return unlocked\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_for_2_pancakes = 3\n    pancakes_in_12_minutes = (12 / time_for_2_pancakes) * 2\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # The strategy is to get the two slowest people across together,\n    # minimizing the time taken by the slow paddle back to pick up the others.\n\n    # Step 1: Jason and Chi Yew cross together first: time = 5 minutes\n    # Step 2: Jason comes back: time = 5 + 5 = 10 minutes\n    # Step 3: Wei Jie and Michael cross together: time = 10 + 9 = 19 minutes\n    # Step 4: Chi Yew comes back to bring the boat: time = 19 + 5 = 24 minutes\n    # Step 5: Jason and Chi Yew finally cross together: time = 24 + 5 = 29 minutes\n    \n    # So, the shortest period of time they will take is 29 minutes, not 20 minutes.\n    \n    return 29\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    \n    original_price = sale_price / (1 - reduction_fraction)\n    \n    return original_price\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Function to calculate the number of combinations (n choose r)\n    def combinations(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Calculate the number of ways to reach the 5th step\n    # Nelson can reach the 5th step in 4 steps (by going 1, 1, 1, 2 or 1, 2, 1 or 2, 1, 1)\n    # Or he can reach the 5th step in 3 steps (by going 1, 1, 1, 1, 1 or 2, 1, 2 or 1, 2, 2)\n    ways_to_5th_step = combinations(4, 2) + combinations(4, 1)\n\n    # Calculate the number of ways to reach the 10th step from the 5th step\n    # Nelson has 5 more steps to go, which is similar to reaching the 5th step\n    ways_from_5th_to_10th = combinations(5, 2) + combinations(5, 1)\n\n    # The total ways is the product of the ways to reach the 5th step and\n    # the ways to reach the 10th step from the 5th step\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # To ensure that at least 9 people come from the same country,\n    # by the Pigeonhole Principle, you add 1 to the product of\n    # (number of countries - 1) and (minimum number of people from the same country - 1)\n    countries = 18\n    min_people = 9\n\n    # Apply the Pigeonhole Principle\n    min_participants = (countries - 1) * (min_people - 1) + 1\n\n    return min_participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # We know that the sum of n consecutive numbers starting from a is n(a + (a + n - 1)) / 2\n    # Let the first number in the sequence be x\n    # Then, sum of 53 consecutive numbers starting from x can be defined as 53 * (x + (x + 52)) / 2 = 2014\n    # Multiplying through by 2 and dividing by 53, we get x + (x + 52) = 2 * 2014 / 53\n    # Solve for x to find the first term in the sequence\n    x = (2 * 2014 // 53) - 52 \n    # The largest of the 53 consecutive numbers will be x + 52\n    largest_number = x + 52\n    return largest_number\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(88/A, 22)\n    A_value = solve(equation, A)[0]\n    \n    correct_answer = 98 / A_value\n    \n    return A_value, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four_calculators = 32\n    cost_per_calculator = cost_of_four_calculators / 4\n    cost_of_twelve_calculators = cost_per_calculator * 12\n    return cost_of_twelve_calculators\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Calculate the speed of Lucas and Miller in laps per minute\n    speed_lucas = 5.0 / 6.0\n    speed_miller = 5.0 / 10.0\n\n    # Calculate the relative speed\n    relative_speed = speed_lucas - speed_miller\n    \n    # Time to first overtaking is when Lucas gains one lap over Miller\n    time_to_first_overtake = 1.0 / relative_speed\n\n    # Time to second overtaking is when Lucas gains another lap over Miller\n    time_to_second_overtake = time_to_first_overtake + (1.0 / relative_speed)\n\n    return time_to_second_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # Rounding off to the nearest $10 means the actual amount could vary by $5 below to $4 above the rounded figure\n    rounded_amount = 1670\n    # The greatest amount she could have saved is $4 less than the next multiple of $10\n    greatest_amount = rounded_amount + 4\n    return greatest_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return total_minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    visitors = symbols('visitors')\n    children = 3/5 * visitors\n    remaining = visitors - children\n    men = 1/4 * remaining\n\n    equation = Eq(children - men, 120)\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    initial_charge = 80  # initial charge for up to 15 minutes\n    additional_charge = 5  # charge for each additional minute\n    total_cost_cents = 140  # total cost in cents\n    additional_minutes_cost = total_cost_cents - initial_charge\n\n    if additional_minutes_cost <= 0:\n        minutes = 15\n    else:\n        additional_minutes = additional_minutes_cost // additional_charge\n        minutes = 15 + additional_minutes  # including the first 15 minutes\n\n    return minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tim_age_now = 8\n    tim, mother = symbols('tim mother')\n    \n    # When Tim is as old as his mother now, the age difference will remain the same\n    age_difference = mother - tim\n    equation = Eq(tim + age_difference, 54)\n    \n    # Solve for mother's age now\n    solutions = solve((equation, Eq(tim, tim_age_now)), (tim, mother))\n    \n    return solutions[mother]\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # length of the orange string in meters\n    orange_to_purple_ratio = 9.2\n\n    # Since 1m = 100cm, convert orange length to cm to match units with green string extra length\n    orange_length_cm = orange_length_m * 100  # length of the orange string in centimeters\n    purple_length_cm = orange_length_cm / orange_to_purple_ratio  # length of the purple string in centimeters\n\n    green_extra_length_cm = 24.9  # the extra length of the green string in centimeters\n    green_length_cm = purple_length_cm + green_extra_length_cm  # total length of the green string in centimeters\n\n    # Convert the green string length back to meters from centimeters\n    green_length_m = green_length_cm / 100\n\n    return green_length_m\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 2 == 0 and num % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the two pieces of the rope\n    x, y = symbols('x y')\n    \n    # Set up the equation system based on the problem statement\n    equation1 = Eq(x, 5 * y) # One piece is 5 times longer than the other\n    equation2 = Eq(x + y, 49.5) # The total length of the rope is 49.5 meters\n    \n    # Use solve to find the solution to the equation system\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # The length of the longer piece (rounded to one decimal place)\n    longer_piece_length = round(solutions[x], 1)\n    \n    return longer_piece_length\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Solve for the value A in the number puzzle where each letter represents a distinct digit.\n    # The puzzle is of the form:\n    #   T W O\n    # + T W O\n    # -------\n    # T H R E E\n    # A set of equations can be formed based on the column addition\n    # We know that O + O must result in an even number and thus E is even\n    # We also know that if O + O results in no carry over, then T + T + 1 (carry from O+O) gives H\n    # Otherwise, if there is a carry over, T + T results in the H with 1 carried over to next column.\n    # Since A represents the carry over for the leftmost addition, it can only be 0 or 1\n    # We try both possibilities (0 or 1) and check which digits satisfy the column addition constraints.\n    # First, let's check if A can be 0.\n    for A in range(2):  # Check for A\n        for T in range(1, 10):  # T cannot be zero as it's the first digit of a number\n            for W in range(10):\n                for O in range(10):\n                    for H in range(10):\n                        for R in range(10):\n                            for E in range(10):\n                                if len({T, W, O, H, R, E}) == 6:  # All digits must be different.\n                                    TWO = T * 100 + W * 10 + O\n                                    THREE = T * 10000 + H * 1000 + R * 100 + E * 10 + E\n                                    if TWO + TWO == THREE and E % 2 == 0:\n                                        if A == 0 and T * 2 < 10:\n                                            return T + W + O + H + R + E\n                                        if A == 1 and T * 2 >= 10:\n                                            return T + W + O + H + R + E\n    return None\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n\n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    climb_per_day = 4\n    slide_per_night = 1\n    net_climb_per_day = climb_per_day - slide_per_night\n    day = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    deposit_days = total_days // 2\n    spend_days = total_days // 2\n    money = 100\n\n    if total_days % 2 != 0:\n        deposit_days += 1\n\n    money += deposit_days * 5\n    money -= spend_days * 8\n\n    return money\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # 1 work unit represents the whole book\n    nancy_rate = 1 / 6  # Nancy completes the book in 6 days\n    combined_rate = 1 / 4  # Both complete the book in 4 days\n    \n    # Tim's rate is the combined rate minus Nancy's rate\n    tim_rate = combined_rate - nancy_rate  # How much Tim can write by himself\n    \n    # Time for Tim to complete the book by himself is the reciprocal of his rate\n    tim_time = 1 / tim_rate\n    \n    return tim_time\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    # Create the 12-digit number with 3s\n    number = int(\"3\" * 12)\n    \n    # Find the remainder of the division of the number by 7\n    remainder = number % 7\n    \n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    slip_down = 2\n    jumps_per_period = 3\n    net_distance_per_period = jumps_per_period * jump_up - slip_down\n\n    periods = (total_distance - jump_up) // net_distance_per_period\n    remaining_distance = (total_distance - jump_up) % net_distance_per_period\n\n    total_jumps = periods * jumps_per_period\n    if remaining_distance > 0:\n        total_jumps += (remaining_distance + jump_up - 1) // jump_up\n        \n    return total_jumps\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let's assume the total number of pupils normally at school is x.\n    # 20% of the pupils are in Year 7, which means 0.20 * x pupils are in Year 7.\n    # After some Year 7 girls miss school for a sports match, there are 400 pupils left.\n    # Out of these 400 pupils, 10% are still in Year 7, which is 40 pupils.\n    # This means that 0.20 * x - 40 pupils are missing from Year 7.\n    # The original number of Year 7 pupils (0.20 * x) minus the missing Year 7 pupils (0.20 * x - 40) equals the current number of Year 7 pupils which is 40.\n    # 0.20 * x - (0.20 * x - 40) = 40\n    # Solving the equation for x gives us the total number of pupils normally at school.\n    x = symbols('x')\n    equation = Eq(0.20 * x - (0.20 * x - 40), 40)\n    total_pupils_normally_at_school = solve(equation, x)\n\n    return total_pupils_normally_at_school[0]\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # total amount of work is assumed to be 1 (whole job)\n    ivy_work_rate = 1 / 24\n    kevin_work_rate = 1 / 20\n\n    # work done together in 18 days\n    total_work_done = ivy_work_rate * 18\n\n    # remaining work to be done after 18 days\n    remaining_work = 1 - total_work_done\n\n    # number of days Kevin would have to work alone to finish the remaining work\n    # if there were no days off\n    remaining_days_kevin_works_alone_without_off = remaining_work / kevin_work_rate\n\n    # total amount of days Kevin should have worked\n    total_days_kevin_works = 18 - remaining_days_kevin_works_alone_without_off\n\n    # number of days Kevin took off\n    kevin_days_off = 18 - total_days_kevin_works\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    total = 0\n    num = 1  # numerator starts at 1\n    den1 = 1  # first term of the denominator starts at 1\n    den2 = 2  # second term of the denominator starts at 2\n    \n    # for the first 6 fractional terms\n    for i in range(6):\n        total += num / (den1 * den2)\n        num += 1\n        den1 = den2\n        den2 += (3 + i)\n    \n    # add the last term\n    total += 1 / den1\n\n    return total\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Let initial_money be the total money Helen had at the start\n    # She spends one-third of her money on a dress\n    # So after buying the dress she has two-thirds of initial_money left\n\n    # She then spends three-fifths of what is left on shoes\n    # She's left with two-fifths of the remaining money after buying the dress\n\n    # Finally, Helen has £40 left, which is two-fifths of the money after buying the dress\n    # So we set up the equation:\n    # 2/5 * (2/3 * initial_money) = 40\n\n    # Simplifying, we find initial_money\n    # initial_money = 40 / (2/5) / (2/3)\n    # initial_money = 40 * (5/2) * (3/2)\n\n    initial_money = 40 * (5/2) * (3/2)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "from math import factorial\n\ndef find_trailing_zeros(n):\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count\n\ndef solution():\n    trailing_zeros_999 = find_trailing_zeros(999)\n    trailing_zeros_300 = find_trailing_zeros(300)\n    ans = trailing_zeros_999 - trailing_zeros_300\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    total = 198 + 298 + 398 + 498\n    return total\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The number of students on the outer layer forms the perimeter of the square\n    # Each side of the square would then have 60 / 4 students, since a square has 4 equal sides\n    side_length = 60 // 4\n    \n    # The total number of students is the area of the square formed by the students\n    total_students = side_length ** 2\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = lorries + lorries // 4\n        cars = bikes + bikes // 3\n        total = cars + bikes + lorries\n        if total % 2 == 0 and total < 100:\n            return cars, bikes, lorries\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the initial number of buttons in box A\n    # Let b be the initial number of buttons in box B\n    # Let x be the number of buttons added to box A and 2x be the number of buttons removed from box B\n    a, b, x = symbols('a b x')\n\n    # Equations based on the problem statement\n    equation1 = Eq(a, b + 64)  # A has 64 more buttons than B initially\n    equation2 = Eq(b - 2 * x, b - 28)  # B has 28 fewer buttons than before after removing 2x\n    equation3 = Eq((a + x) + (b - 2 * x), 4 * (b - 2 * x))  # Ratio of the total to B's remaining is 4:1\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, x))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    # Let x be the number of rounds she won, y be the number of rounds she lost\n    # x + y = 12 (Total rounds)\n    # 4x - 2y = 24 (Net cards won)\n\n    # Solve for y using the system of equations\n    # From the first equation: y = 12 - x\n    # Substitute y in the second equation: 4x - 2(12 - x) = 24\n    # Simplify the equation to find x\n    x = (24 + 2*12) // 6\n\n    # Now calculate y using the value of x\n    y = 12 - x\n    \n    return y\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    current_layer = 1\n    red_count = 0\n    green_count = 0\n    tiles_left = total_tiles\n\n    while tiles_left > 0:\n        tiles_in_layer = (current_layer * 2 - 1) ** 2 - (current_layer - 1) ** 2 * 2\n        if current_layer % 2 == 1:\n            if tiles_left >= tiles_in_layer:\n                red_count += tiles_in_layer\n            else:\n                red_count += tiles_left\n        else:\n            if tiles_left >= tiles_in_layer:\n                green_count += tiles_in_layer\n            else:\n                green_count += tiles_left\n        tiles_left -= tiles_in_layer\n        current_layer += 1\n\n    more_tiles_color = 'Red' if red_count > green_count else 'Green'\n    color_difference = abs(red_count - green_count)\n\n    return more_tiles_color, color_difference\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    num_bins = (boulevard_length // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # The length of the repeating sequence (\"2011\") is 4.\n    # For divisibility by 11, the alternating sum of the digits must be either 0 or a multiple of 11.\n    # For divisibility by 3, the sum of the digits must be a multiple of 3.\n    # We need to find the minimum value of n so that the number satisfies both conditions.\n\n    # Initialize the repeating sequence and the fixed parts of the number\n    repeating_sequence = \"2011\"\n    fixed_part = \"267\" # The digits that are not part of the repeating sequence\n    \n    # Initialize the sum of digits of the fixed part for divisibility by 3\n    sum_fixed_digits = sum(int(digit) for digit in fixed_part)\n    \n    # Initialize variables to keep track of the alternating sum for divisibility by 11\n    alternating_sum = 2 - 6 + 7  # Sum of fixed part for the alternating sum\n    \n    n = 0  # Start with zero occurrences of \"2011\"\n    while True:\n        # Compute the alternating sum of the repeating sequence for the current value of n\n        for digit in repeating_sequence:\n            # Update the alternating sum based on the position of the digit\n            if n % 2 == 0:  # Even position from the right\n                alternating_sum += int(digit)\n            else:  # Odd position from the right\n                alternating_sum -= int(digit)\n            n += 1  # Move to the next position for the next digit\n        \n        # Update the total sum of digits for divisibility by 3\n        sum_fixed_digits += 4 * (2 + 0 + 1 + 1)  # Add the sum of digits of \"2011\" multiplied by 4\n        \n        # Check if both divisibility conditions are met\n        if alternating_sum % 11 == 0 and sum_fixed_digits % 3 == 0:\n            # Return the number of \"2011\" occurrences, as n is the total amount of digits counted\n            return n // 4  # Since \"2011\" has 4 digits, we divide n by 4\n    \n    # Since we are using a while loop that always terminates when conditions are met,\n    # there is no need for a break condition outside the loop.\n    \nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n    \n    total_flour_needed = flour_per_cake * number_of_cakes\n    \n    return total_flour_needed\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    X, Y, Z = 20, 19, 18  # Players start with 20, 19, and 18 coins respectively\n    discard = 0\n    rounds = 0\n\n    # Play rounds until one player runs out of coins\n    while min(X, Y, Z) > 0:\n        # Sort players by coins\n        coins = sorted([(X, 'X'), (Y, 'Y'), (Z, 'Z')])\n        # Player with most coins gives one coin to the other two players\n        if coins[2][1] == 'X':\n            X -= 3\n            Y += 1\n            Z += 1\n        elif coins[2][1] == 'Y':\n            X += 1\n            Y -= 3\n            Z += 1\n        elif coins[2][1] == 'Z':\n            X += 1\n            Y += 1\n            Z -= 3\n        # Place one coin into the discard pile\n        discard += 1\n        # Increment round counter\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Our goal is to solve the equation x + y + z = 7 for non-negative integers\n    # We need to account for identical plates - so we use \"stars and bars\"\n    x, y, z = symbols('x y z')\n\n    # For non-negative solutions of the equation x + y + z = 7, we use the partition function P(n, k)\n    # with n = 7 (number of lollipops) and k = 3 (number of plates)\n    # The number of solutions of x + y + z = 7 where order does NOT matter is given by P(n+k-1,k-1)\n    # Here, n + k - 1 = 7 + 3 - 1 = 9 and k - 1 = 3 - 1 = 2\n    # Therefore, we need to calculate the number of combinations for 9 elements taken 2 at a time\n    n = 7 + 3 - 1\n    k = 3 - 1\n\n    # The number of combinations is given by C(n, k) = n! / (k! * (n-k)!)\n    combinations = math.comb(n, k)\n\n    return combinations\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    time_per_cut = 3 / 3  # Time to make one cut\n    cuts_needed = 8 - 1   # Number of cuts needed for 8 pieces\n    total_time = time_per_cut * cuts_needed  # Total time required for the cuts\n\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(rasidah, chai_seng - 48)\n    equation2 = Eq(chai_seng * 1/7, rasidah * 2/5 / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    total_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    ans = (total_cards - duplicates) + new_cards\n\n    return ans\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as a single unit.\n    # There are now 7 units to arrange around the table, which can be done in (7 - 1)! ways due to the circular nature.\n    units_arrangement = factorial(7 - 1)\n    \n    # Amy and Judy can switch places within their unit, which introduces 2! additional arrangements.\n    possible_internal_arrangements = factorial(2)\n    \n    # Calculate the total number of different orders.\n    total_orders = units_arrangement * possible_internal_arrangements\n\n    return total_orders\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use x to represent the initial number of cookies Andy has\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Equations based on the problem statement\n    equation1 = Eq(andy_initial + 84, ben_initial)                                   # Andy had 84 fewer cookies than Ben at first\n    equation2 = Eq(andy_initial + andy_initial / 3, (1/3) * (ben_initial + ben_initial / 5))  # Andy had 1/3 as many as Ben in the end\n\n    # Solve the equations to find the initial amounts\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Calculate the final amount of cookies for Andy\n    andy_final = solutions[andy_initial] + solutions[andy_initial] / 3\n\n    return andy_final.evalf()\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total = sum(1 / i for i in range(1, 8))\n    return int(total)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    rate = 1.5 / 100\n    years = 5\n\n    # Calculate the amount using the formula A = P(1 + rt)\n    calculated_amount = principal * (1 + rate * years)\n\n    # Compare the calculated amount with the final amount to check if Bella is correct\n    if calculated_amount == final_amount:\n        return years\n    else:\n        # If Bella is incorrect, find the correct number of years\n        correct_years = (final_amount / principal - 1) / rate\n        return correct_years\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Start with all two-digit numbers.\n    two_digit_numbers = set(range(10, 100))\n\n    # Tom's number must satisfy both conditions:\n    # It must be divisible by the unknown number since he raised his hand the first time,\n    # and it must be divisible by 24 since he raised his hand the second time.\n\n    # Since 4 students raised their hands the first time, Tom's number shares a divisor with\n    # at least 3 other numbers (excluding his own). This also means that\n    # at least 5 other numbers are not divisible by this divisor.\n    # Since Tom's number is divisible by 24, the divisor must be a factor of 24.\n    # The factors of 24 are 1, 2, 3, 4, 6, 8, 12, and 24. Of these,\n    # only 3, 4, 6, 8, and 12 can divide two-digit numbers into a group that may appear\n    # with 5 or more not sharing the divisor. Hence, Tom's number is\n    # divisible by one of these divisors.\n\n    # However, in the second round, 6 students raised their hands, so Tom's number shares a divisor with\n    # at least 5 other numbers.\n    # Therefore, the unknown number must have been smaller than 24, and Tom's number must\n    # have been the least common multiple of the common divisor and 24 (since that would exclude the fewest numbers).\n\n    # From the previous possible divisors list, we start with the largest (12) and step down until we find the\n    # divisor that lets exactly 6 numbers (excluding Tom's) to be divisible by 24.\n\n    for divisor in [12, 8, 6, 4, 3]:\n        possible_tom_numbers = [num for num in two_digit_numbers if num % 24 == 0 and num % divisor == 0]\n\n        # Numbers that are divisible only by 24 (6 students plus Tom).\n        divisible_by_24 = [num for num in two_digit_numbers if num % 24 == 0]\n\n        # Make sure that the possible numbers for Tom allow for exactly 6 numbers\n        # that can be divisible by 24, hence we will have 6 students plus Tom.\n        if len(divisible_by_24) == len(possible_tom_numbers) + 1:\n            # Numbers seen by Tom (all those not divisible by the unknown number).\n            seen_by_tom = two_digit_numbers - set(divisible_by_24)\n\n            # Calculate the sum of all 8 numbers seen by Tom.\n            sum_seen_by_tom = sum(seen_by_tom) - sum(possible_tom_numbers)\n            return sum_seen_by_tom\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    terms = [18, -16, 19, -15]\n    while len(terms) < 6:\n        if terms[-1] > 0:\n            terms.append(terms[-1] - 35)\n        else:\n            terms.append(terms[-1] + 35)\n    return terms[-1]\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Given values\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    at_least_one_pass = 43\n\n    # Applying Inclusion-Exclusion Principle: (at most all three passed) = total - (individual sums - at least one pass)\n    at_most_all_three_pass = math_pass + science_pass + english_pass - at_least_one_pass\n\n    return at_most_all_three_pass\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the distance between the school and their home\n    x = symbols('x')\n    \n    # Ahmad’s speed is 80 m/min, and his younger brother's speed is 50 m/min\n    \n    # The time taken for Ahmad to reach school is the same as the time taken for his younger brother\n    # to reach the point where they met. At that time Ahmad has travelled to school and back a distance of x+210 meters\n    # Ahmad’s travel time = (x / 80)\n    # Younger brother’s travel time = ((x-210) / 50)\n    # So we equate the time taken by Ahmad and his younger brother\n    equation = Eq((x / 80), ((x - 210) / 50))\n    \n    # Solving the equation to find the value of x\n    distance = solve(equation, x)\n\n    return distance[0]\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the four numbers as a, b, c, d in descending order (a > b > c > d)\n    a, b, c, d = symbols('a b c d')\n    \n    # Given that the sum of the smallest number and the average of the other three numbers is 39\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n    \n    # Given that the sum of the largest number and the average of the other three numbers is 51\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n    \n    # We also have the constraints that a, b, c, d are distinct positive whole numbers\n    # and are arranged in descending order.\n    # This means that a > b > c > d and each number must be an integer.\n    \n    # Let's express b, c and d in terms of a using the given conditions.\n    # We can subtract both equations and solve for b + c + d\n    combined_eq = Eq(equation2.lhs - equation1.lhs, equation2.rhs - equation1.rhs)\n    \n    # Solve the combined equation for b + c + d\n    solutions_bcd = solve(combined_eq, b + c + d)\n    \n    # Now substitute b + c + d in one of the equations to get the relationship between a and d\n    bcd_value = solutions_bcd[0]  # b + c + d solved from the combined equation\n    equation1_subs = equation1.subs(b + c + d, bcd_value)\n    \n    # Solve for d in terms of a\n    solution_d = solve(equation1_subs, d)\n    \n    # Since b and c are whole numbers between a and d and distinct, the maximum distance between a and d should be 3\n    # Therefore we can establish b = a - 1, c = a - 2, d = a - 3\n    max_possible_a = symbols('max_possible_a')\n    max_equation = Eq(max_possible_a - 3 + (max_possible_a + (max_possible_a - 1) + (max_possible_a - 2)) / 3, 39)\n    max_possible_a_value = solve(max_equation, max_possible_a)\n    \n    # The largest value of the largest number will be max_possible_a\n    max_value = max_possible_a_value[0]\n\n    return max_value\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pencil cases cannot be empty, we distribute one pen to each case first,\n    # leaving us with 6 - 3 = 3 pens to distribute freely among the 3 cases.\n    # This is equivalent to the problem of partitioning 3 identical objects into 3 parts,\n    # which can be solved using a stars-and-bars combinatorial argument.\n    # We need to place two dividers among the three pens to split them into three groups.\n    # The total number of positions is 3 (for the pens) + 2 (for the dividers) = 5,\n    # and we need to choose positions for the 2 dividers.\n\n    from math import comb\n    # Choose 2 positions for the dividers from the 5 available positions\n    ways = comb(5, 2)\n    return ways\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    num1 = 1 / 30 + 1 / 6\n    den1 = 2 / 25\n    num2 = 2 - 2 / 3\n    den2 = 8 / 3\n    result = (num1 / den1) + (num2 / den2)\n    return result\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    num = 8844\n    thousands_value = 8 * 1000  # The place value of the first 8\n    tens_value = 8 * 10         # The place value of the second 8\n    difference = thousands_value - tens_value\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Smallest five-digit number divisible by 45\n    n = 10000\n    while n % 45 != 0 or str(n) != str(n)[::-1]:\n        n += 1\n    smallest = n\n\n    # Largest five-digit number divisible by 45\n    n = 99999\n    while n % 45 != 0 or str(n) != str(n)[::-1]:\n        n -= 1\n    largest = n\n\n    # Difference between the largest and smallest\n    diff = largest - smallest\n    return diff\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # Divisibility rule for 4: the last two digits must be divisible by 4\n    # Divisibility rule for 5: the last digit must be either 0 or 5\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the remainders for each division\n    remainders = [(1, 5), (2, 6), (7, 11)]\n\n    # Step 2: Solve the system of congruences using the Chinese Remainder Theorem\n    crt_solution = solve_congruence(*remainders)\n\n    # Step 3: The unknown is the smallest solution that is less than 500\n    num_biscuits = crt_solution[0]\n    while num_biscuits < 500:\n        num_biscuits += crt_solution[1]\n    \n    return num_biscuits - crt_solution[1]\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    i = 0\n    while True:\n        num = 40309 + i\n        if str(num) == str(num)[::-1]:  # Checking if number is a palindrome\n            return i\n        i += 1\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    # We are looking for the Greatest Common Divisor of 16 and 24\n    from math import gcd\n    length_1 = 16\n    length_2 = 24\n    \n    longest_piece_length = gcd(length_1, length_2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position_from_front = 7\n    sheep_behind_luna = 4\n\n    total_sheep = luna_position_from_front + sheep_behind_luna\n\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    target_earning = 270\n\n    hours_needed = target_earning / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for mean score of all 10 students\n    mean_all = symbols('mean_all')\n\n    # Top 3 students have mean score of 92\n    top_3_total = 3 * 92\n\n    # Last 7 students have mean score that is 6 less than the mean score of all 10 students\n    last_7_total = 7 * (mean_all - 6)\n\n    # Equation representing the sum of scores of all 10 students being equal to the sum of the top 3 and last 7\n    equation = Eq(top_3_total + last_7_total, 10 * mean_all)\n\n    # Solve for the mean score of all 10 students\n    mean_all_solution = solve(equation, mean_all)\n\n    return mean_all_solution[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8*4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    from itertools import permutations\n\n    lucky_years = set()\n    for year in range(1000, 2023):\n        year_str = str(year)\n        if len(set(year_str)) == 4:  # Ensure digits are unique\n            perms = set(permutations(year_str))\n            for perm in perms:\n                if ''.join(perm) == ''.join(sorted(perm)) and int(''.join(perm)) <= 2022:\n                    lucky_years.add(int(''.join(perm)))\n\n    return len(lucky_years)\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    # Accumulate marbles from 3 'X' bags for Jaslin and 2 'X' bags for George\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        jaslin_marbles = 0\n        george_marbles = 0\n        x_bags = bags.copy()\n        x_bags.remove(red_marbles)\n        \n        # Check all combinations for 3 bags for Jaslin\n        for i in range(4):\n            for j in range(i + 1, 5):\n                for k in range(j + 1, 5):\n                    jaslin_marbles = x_bags[i] + x_bags[j] + x_bags[k]\n                    george_marbles = sum(x_bags) - jaslin_marbles\n                    \n                    # Check if Jaslin gets twice as many marbles as George\n                    if jaslin_marbles == 2 * george_marbles:\n                        return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume Andre has 'a' sweets and Beth has 'b' sweets.\n    a, b = symbols('a b')\n    \n    # Based on the question, a + b = 24.\n    equation1 = Eq(a + b, 24)\n    \n    # After the teacher gave them 4 sweets each, Andre now has 6 sweets more than Beth.\n    # So, a + 4 = b + 4 + 6 which simplifies to a = b + 6.\n    equation2 = Eq(a, b + 6)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # The answer is the number of sweets Beth has now, which is 'b' + 4 (since teacher gave them 4 more sweets each).\n    return solutions[b] + 4\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest of the five consecutive even numbers be x\n    # Then the numbers are x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is 100\n    # Hence, we have the equation: x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # Simplifying the equation we get: 5x + 20 = 100\n    # Solving for x we get: 5x = 80\n    # Divide both sides by 5 to find x\n    x = 80 // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance_initial = 550\n    time_initial = 5\n    time_final = 3\n    \n    speed = distance_initial / time_initial\n    distance_final = speed * time_final\n\n    return distance_final\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    # Let the total number of apples be x.\n    # According to the problem, (3/5) * x = 150 (because 2/5 were sold, so 3/5 are left)\n    # Now solve for x.\n    x = 150 * (5/3)\n    return int(x)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\n\ndef solution():\n    blocks = 'RRBBYYGGOOPP'\n    even_arrangements = 0\n    total_arrangements = 0\n\n    for arrangement in set(permutations(blocks)):\n        is_even = True\n        for color in 'RBYGOP':\n            color_indices = [i for i, block in enumerate(arrangement) if block == color]\n            if (color_indices[1] - color_indices[0] - 1) % 2 != 0:\n                is_even = False\n                break\n        if is_even:\n            even_arrangements += 1\n        total_arrangements += 1\n\n    from math import gcd\n    factor = gcd(even_arrangements, total_arrangements)\n    m = even_arrangements // factor\n    n = total_arrangements // factor\n\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_between_posts = 3  # inches\n    number_of_jumps = 14  # from the 1st to the 15th post, it takes 14 jumps\n    total_distance = distance_between_posts * number_of_jumps\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # total number of fruits (excluding chocolate)\n    friends_count = 6\n    fruits_per_friend = total_fruits // friends_count\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    a_rate = 1 / 36  # Inlet A filling rate per minute\n    b_rate = 1 / 48  # Inlet B filling rate per minute\n    \n    # Define the sequence of filling patterns: minutes for A and B, respectively\n    pattern = [(1, 0), (0, 2), (2, 0), (0, 1)]  # (A,B) in respective minutes\n    \n    # Initialize accumulation and time\n    filled = 0\n    time = 0\n    \n    # Loop infinitely until pool is filled (will break inside loop)\n    while True:\n        for minutes_a, minutes_b in pattern:\n            # Fill the pool according to the pattern until it is filled\n            filled += (minutes_a * a_rate) + (minutes_b * b_rate)\n            time += minutes_a + minutes_b  # Increment time by the time filled\n            \n            # Check if pool is already filled\n            if filled >= 1:\n                return round(time)  # In the nearest minute\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for Alan to paint the room alone\n    alan = symbols('alan')\n\n    # Equation based on the rate of work done by Alan and Bob together\n    equation = Eq((1/alan) + (1/6), 1/4)\n\n    # Solve for Alan's time\n    alan_time = solve(equation, alan)\n\n    return alan_time[0]\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    prob_no_rain_both_days = prob_no_rain_saturday * prob_no_rain_sunday\n    prob_rain_at_least_one_day = 1 - prob_no_rain_both_days\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    result = (46 + 7 * 3 - 7) / 20\n    return result\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_per_correct = 10\n    points_per_incorrect = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_per_correct + incorrect * points_per_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros = 28\n    n = 1\n    count_of_fives = 0\n    while count_of_fives < zeros:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            count_of_fives += 1\n            temp //= 5\n            \n    return n - 1\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n    \n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n    \n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Number of bottles Lucas bought\n    bought_bottles = 10\n    # Number of bottles he can get by exchanging empty bottles\n    exchangeable_bottles = bought_bottles\n\n    # Number of empty bottles he has now\n    empty_bottles = bought_bottles\n\n    # Borrowing one empty bottle\n    empty_bottles += 1\n\n    while empty_bottles >= 2:\n        # Exchange empty bottles for new bottles\n        new_bottles, empty_bottles = divmod(empty_bottles, 2)\n        # Add the new bottles to the total count and to the empty bottles count\n        exchangeable_bottles += new_bottles\n        empty_bottles += new_bottles\n\n    # Return the total number of drinkable bottles\n    return exchangeable_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let the height of swimming pool A's waterline be 3x and B's be x at some time t\n    # Since they started draining at the same time and have the same base and height,\n    # the volume of water drained by A in time t is proportional to 1/10 per minute (V/10t)\n    # Similarly, the volume of water drained by B in time t is proportional to 1/6 per minute (V/6t)\n    # Let the original volume of water in each pool be V\n    # The remaining volumes are V - V/10t for A and V - V/6t for B\n    # The ratio of their heights will be in the ratio of their remaining volumes, because the base is the same\n    \n    # So we have the equation for the height of water (in remaining volume proportion):\n    # 3 * (V - V/6t) = V - V/10t\n    # Simplifying this equation to solve for t:\n    # 3 * (V - V/6t) = V - V/10t => 3V - V/2t = V - V/10t => 2V - V/10t = V/2t => 2V - (1/10 + 1/2)V/t = 0\n    # 2V - (3/5)V/t = 0 => 10Vt - 6V = 0 => t = 6V / 10V => t = 6 / 10 => t = 0.6\n    \n    # since t in minutes would be 10 times the fraction (as 10 minutes is for full drainage)\n    t = 0.6 * 10\n\n    return t\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x') \n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    # The position of Andrea from the front\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n    \n    # Calculate the number of children between Vanessa and Andrea\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    weekly_increase = 30\n    total_weeks = 7\n    initial_sweets = 320\n    final_sweets = 348\n\n    total_bought = weekly_increase * total_weeks\n    sweets_eaten_per_week = (initial_sweets + total_bought - final_sweets) / total_weeks\n\n    return int(sweets_eaten_per_week)\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5/6\n    fenced_path = 2/3\n    unfenced_path = total_path - fenced_path\n    return unfenced_path\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10 * x - 8) - (12 - 10 * x), 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let y be the number of sweets Yue Ying has.\n    # Therefore, Chenxi has y + 5 sweets.\n    # After Chenxi gives Yue Ying 10 sweets, Chenxi will have y + 5 - 10 sweets.\n    # After receiving 10 sweets from Chenxi, Yue Ying will have y + 10 sweets.\n    # The difference in the number of sweets they have now is |(y + 5 - 10) - (y + 10)|\n    # Simplifying the expression, we get |y - 5 - y - 10| which is |y - y - 15|, which simplifies to |0 - 15|.\n    # The absolute value of -15 is 15.\n    return 15\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 36\n    greatest_common_factor = gcd(num1, num2)\n    return greatest_common_factor\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # Time problems in combinatorics often refer to finding arrangement or combinations that meet a certain criteria.\n    # In this case, the question seems incomplete as only \"1\" is provided.\n    # However, considering the context, if we assume the question is to find the number of ways to pick one item from one, it's trivial.\n\n    # There is only one way to choose 1 item from a single item.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distance from home to office be 'd' km.\n    d = symbols('d')\n\n    # Speed when travelling at 3 km/h: time = distance/speed\n    # Wilson is 12 minutes late, so the time taken at 3 km/h is the actual time + 12 min.\n    # Convert 12 minutes to hours by dividing by 60.\n    time_at_3kmph = d / 3 + 12 / 60\n\n    # Speed when travelling at 7 km/h: time = distance/speed\n    # Wilson is 8 minutes early, so the time taken at 7 km/h is the actual time - 8 min.\n    # Convert 8 minutes to hours by dividing by 60.\n    time_at_7kmph = d / 7 - 8 / 60\n\n    # Since both times should be equal for the actual distance, set up the equation.\n    equation = Eq(time_at_3kmph, time_at_7kmph)\n\n    # Solve the equation for 'd'.\n    solutions = solve(equation, d)\n\n    # There will be only one solution for the distance 'd'.\n    return solutions[0]\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 69))\n    for i in primes:\n        if 69 - i in primes:\n            return 69 - 2*i\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = (4 * goats) - 4\n\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # Let a be the original number of students in school A, b in school B\n\n    # Equation 1: The total number of students before the transfer\n    equation1 = Eq(a + b, 1050)\n   \n    # Equation 2: School A has 10 more students than school B after 20 students transfer from A to B\n    equation2 = Eq(a - 20, b + 20 + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]  # Return the number of students in school A originally\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from itertools import permutations\n\ndef evaluate_expression(brackets):\n    expression = \"15+5*5+15-6+7\"\n    # Insert brackets into the expression at the specified indices\n    for idx, bracket in sorted(zip(brackets, ['(', ')', '(', ')']), reverse=True):\n        expression = expression[:idx] + bracket + expression[idx:]\n    return eval(expression)\n\ndef solution():\n    max_value = -float('inf')\n    max_expression = \"\"\n    # Generate all possible unique pair combinations for the four bracket positions\n    bracket_positions = list(permutations(range(1, len(\"15+5*5+15-6+7\")), 4))\n    # Try inserting brackets at these positions and evaluate the expression\n    for brackets in bracket_positions:\n        value = evaluate_expression(brackets)\n        if value > max_value:\n            max_value = value\n            max_expression = brackets\n    \n    return max_value\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    correct_points = 10\n    incorrect_points = -5\n    total_points = 70\n    total_questions = 10\n\n    # Let x be the number of questions answered correctly\n    # Since the total number of questions is 10, Sandy answered (10 - x) incorrectly\n    # Setting up the equation:\n    # 10x - 5(10 - x) = 70\n    # 10x - 50 + 5x = 70\n    # 15x = 120\n    # x = 120 / 15\n    x = (total_points + incorrect_points * total_questions) / (correct_points - incorrect_points)\n\n    return int(x)\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    students_taking_math = 20\n    students_taking_both = 11\n    students_taking_neither = 10\n\n    students_taking_writing = total_students - students_taking_math - students_taking_neither + students_taking_both\n    \n    return students_taking_writing\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_sum = total_average * 5\n    first_two_sum = first_two_average * 2\n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / 3\n    return last_three_average\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    teddy, father = symbols('teddy father')\n    equation1 = Eq(father, 7 * teddy)\n    equation2 = Eq(father - teddy, 40 - 5)\n    \n    solutions = solve((equation1, equation2), (teddy, father))\n    \n    teddy_age_when_father_is_40 = solutions[teddy] + (40 - solutions[father])\n    \n    return teddy_age_when_father_is_40\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    num_cuts = 4\n    ans = (num_cuts ** 2 + num_cuts + 2) // 2\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from fractions import Fraction\n\n    # Adriana's calculation of the fraction for girls is incorrect.\n    # Correct calculation:\n    # Girls are (1 - 4/5) of the remainder after adults, not of the whole.\n    # So we need to calculate the remaining part after taking the adults' part.\n    fraction_girls_of_remainder = 1 - Fraction(4, 5)\n    remainder_after_adults = 1 - Fraction(2, 7)\n    fraction_girls = fraction_girls_of_remainder * remainder_after_adults\n    \n    # Adults fraction is indeed 2/7 of the whole as per Adriana's calculations.\n    fraction_adults = Fraction(2, 7)\n\n    # Find the fraction representing the difference in Adriana's calculation\n    fraction_difference = fraction_adults - fraction_girls\n\n    # Given that the difference corresponds to 80 people\n    people_for_fraction_difference = 80\n\n    # Calculate total number of people\n    total_people = people_for_fraction_difference / fraction_difference\n\n    return int(total_people)\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n\n    rabbit_position_left_to_right = elephant_position_left_to_right + toys_between_rabbit_and_elephant\n    \n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 110):\n        total_sum += sum([int(digit) for digit in str(i)])\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let the number of pink dolphins be x\n    # Then the number of gray dolphins is 11x\n    # According to the problem, the total number of dolphins is 48\n    # Therefore, we have the equation x + 11x = 48\n    \n    # We can solve this equation to find the number of pink dolphins\n    x = 48 / (1 + 11)\n    return int(x)\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    # Area of a triangle = 0.5 * base * height\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "def solution():\n    from sympy import isprime\n    \n    digits = \"08072003\"\n    max_prime = 0\n    \n    # Create a sorted list of unique prime numbers from the digits, in descending order\n    primes = sorted(set(int(''.join(p)) for p in __import__('itertools').permutations(digits) \n                        if isprime(int(''.join(p)))), reverse=True)\n    \n    # Find the largest prime number less than 50\n    for prime in primes:\n        if prime < 50:\n            max_prime = prime\n            break\n    \n    return max_prime\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the expression\n    # 2^2019 / (4^982 - 2^1963) = 2^2019 / (2^1964 - 2^1963)\n    # Simplify further\n    # 2^2019 / (2^1963 * (2 - 1)) = 2^2019 / 2^1963\n    # So the expression simplifies to 2^(2019 - 1963)\n    # Find the remainder when dividing by 5\n    remainder = pow(2, (2019 - 1963)) % 5 \n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of tables (and chairs) be x\n    x = symbols('x')\n\n    # After selling 42 tables, we have x-42 tables\n    # After bringing in 24 chairs, we have x+24 chairs\n    # Now, the number of chairs is 4 times the number of tables: x+24 = 4*(x-42)\n    equation = Eq(x + 24, 4 * (x - 42))\n\n    # Solve for x\n    original_count = solve(equation, x)\n\n    # original_count is a list, we take the first (and only) solution\n    return original_count[0]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 0.35 * 700\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = left_of_candy + candy_cabinet + right_of_candy\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    # Loop over hundreds, tens, and ones digits.\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Only even numbers\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        number = int(f\"106{Y}\")\n        if number % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    total_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = total_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n\n    total_boxes = boxes_per_class * number_of_classes\n\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    # We will iterate from 90 to 99 in descending order (to find the largest number)\n    # Because the number needs to be divisible by 5, so the last digit has to be 0 or 5.\n    # Since the number needs to be divisible by 2 as well, the last digit must be 0.\n    for last_two_digits in range(90, 99 + 1):\n        # Assemble the number and check divisibility by 2, 3, and 5\n        number = 4900 + last_two_digits\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            return number  # We found the largest number that meets the requirements\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    for cars in range(28):\n        lorries = cars\n        motorcycles = 27 - cars - lorries\n        if 2*motorcycles + 4*cars + 6*lorries == 96:\n            return cars\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    # Using the formula: sum of cubes of first n natural numbers = (n(n+1)/2)^2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    # Using the formula: sum of first n natural numbers = n(n+1)/2\n    sum_of_n = n * (n + 1) // 2\n    \n    ans = sum_of_cubes / sum_of_n\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let j be the mass of the jar and c be the mass of one chocolate\n    # From the given information, we can form two equations:\n    # 1. j + 5c = 185\n    # 2. j + 17c = 317\n    \n    # Let's solve for c first\n    c = (317 - 185) / (17 - 5)\n    \n    # Now we can find out the mass of the jar j\n    j = 185 - 5 * c\n    \n    # Finally, we calculate the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = j + 10 * c\n    \n    return round(mass_with_10_chocolates)\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    # Given values\n    ana_height = 150  # Ana's height in cm\n\n    # Ana is 116cm taller than Olaf, so:\n    olaf_height = ana_height - 116  # Olaf's height in cm\n\n    # Kristoff is five and a half times the height of Olaf, so:\n    kristoff_height = 5.5 * olaf_height  # Kristoff's height in cm\n\n    # The height difference between Kristoff and Ana is:\n    height_difference = kristoff_height - ana_height\n\n    return height_difference\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of apples, pears, and mangoes\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    \n    # John bought 4/5 as many pears as apples.\n    eq1 = Eq(pears, 4/5 * apples)\n    \n    # John bought 2/5 as many mangoes as apples.\n    eq2 = Eq(mangoes, 2/5 * apples)\n    \n    # The cost of each apple is $0.60, and the total cost of apples is 3/5 of the total.\n    total_cost = 150\n    cost_per_apple = 0.60\n    eq3 = Eq(apples * cost_per_apple, (3/5) * (2/5) * total_cost)\n    \n    # Solve the system of equations to find the number of each fruit\n    solutions = solve((eq1, eq2, eq3), (apples, pears, mangoes))\n    \n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    trees = 21\n\n    interval_distance = total_length / (trees - 1)\n\n    return interval_distance\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_current_age = 9 - 3\n    jessica_current_age = hazel_current_age - 3\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half_per_month = 65\n    months_in_half_year = 6\n\n    total_second_half = avg_second_half_per_month * months_in_half_year\n    total_year = total_first_half + total_second_half\n    avg_per_month_last_year = total_year / (2 * months_in_half_year)\n\n    return avg_per_month_last_year\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    return numerator // denominator\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_for_five_assignments = 94 * 5\n    total_for_six_assignments = 92 * 6\n    sixth_assignment_score = total_for_six_assignments - total_for_five_assignments\n    return sixth_assignment_score\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price = 65\n    selling_price = 74\n    total_profit = 440\n    remaining_pairs = 5\n    \n    profit_per_pair = selling_price - purchase_price\n    pairs_sold = total_profit // profit_per_pair\n    initial_pairs = pairs_sold + remaining_pairs\n    \n    return initial_pairs\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():  \n    half_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n\n    duration = end_time - half_time\n    start_time = half_time - duration\n\n    ans = start_time.strftime(\"%I:%M %p\")\n    return ans\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_now = 30\n    cars_exit = 10\n    cars_enter = 8\n    cars_initial = cars_now - cars_enter + cars_exit\n    return cars_initial\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Initialize the smallest number to a high value\n    smallest_number = float('inf')\n\n    # Since number is divisible by 2 and 5, it must end with 0.\n    last_digit = 0\n\n    # number is divisible by 11 so the difference between the sum of digits at odd places\n    # and the sum of digits at even places is multiple of 11.\n\n    # Since it's a seven-digit number starting with 1992, we need to find the 5th and 6th digits.\n    # As dividing by 3, the sum of all digits should be multiple of 3.\n\n    for fifth_digit in range(10):\n        for sixth_digit in range(10):\n            # Construct a seven-digit number '1992AB0' where A and B are fifth and sixth digit, respectively\n            number = 1992000 + fifth_digit * 100 + sixth_digit * 10 + last_digit\n\n            # Check divisibility by 3\n            if sum(map(int, str(number))) % 3 != 0:\n                continue\n\n            # Check divisibility by 11\n            odd_place_sum = 1 + 9 + 2 + fifth_digit  # Sum of digits at odd place (1-based indexing)\n            even_place_sum = 9 + 9 + sixth_digit    # Sum of digits at even place (1-based indexing)\n            \n            if (odd_place_sum - even_place_sum) % 11 != 0:\n                continue\n\n            # If all conditions are satisfied, then store current number if it is the smallest one\n            smallest_number = min(smallest_number, number)\n\n    return smallest_number\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    # Backward calculations\n    # Starting from the end of the question and using inverse operations:\n    # Multiply by ten (inverse of divide by ten)\n    # Add four (inverse of subtract four)\n    # Square root (inverse of multiply by itself)\n    # Multiply by four (inverse of divide by four)\n    # Divide by two (inverse of multiply by two)\n    \n    final_result = 6\n    add_four = (final_result * 10) + 4\n    square_root = add_four ** 0.5\n    multiply_four = square_root * 4\n    original_number = multiply_four / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters_needed = 59\n    fill_per_day = 10\n    leak_per_night = 3\n    effective_fill_per_day = fill_per_day - leak_per_night\n    current_liters = 3  # starting with 3 liters on the first day\n    days_passed = 1  # since it starts with the first day\n\n    # Since on the last day the pool gets filled no more leaking at night\n    while current_liters + effective_fill_per_day < total_liters_needed:\n        current_liters += effective_fill_per_day\n        days_passed += 1\n\n    # Add the last day when the pool gets fully filled without leaking\n    days_passed += 1\n\n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_visit_interval = 24\n    ginny_visit_interval = 36\n\n    lcm = (amy_visit_interval * ginny_visit_interval) // gcd(amy_visit_interval, ginny_visit_interval)\n    \n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    current_number = 1\n    digits_written = 0\n    \n    while True:\n        digits_in_current_number = len(str(current_number))\n        if digits_written + digits_in_current_number > total_seconds:\n            break\n        digits_written += digits_in_current_number\n        current_number += 1\n    \n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [1/2 * 30, 1/3 * 36, 1/4 * 40, 1/5 * 60, 1/6 * 96]\n    diff = max(amounts) - min(amounts)\n    return diff\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20%p')\n    start_time = end_time - timedelta(minutes=225)\n\n    return start_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Calculate the worst case scenario for Darrell to get the first green marble\n    # Darrell could potentially pick all the non-green marbles first\n    # There are 5 blue, 9 white, and 2 black marbles that are not green\n    num_non_green = 5 + 9 + 2  # total non-green marbles\n    \n    # Since Darrell needs to get at least one green marble,\n    # he must pick all the non-green marbles plus one green marble\n    min_draws = num_non_green + 1  # minimum number of draws to get at least one green marble\n\n    return min_draws\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    number_of_teams = 20\n    matches_played = comb(number_of_teams, 2)\n    return matches_played\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n    return toys_in_1_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # distance climbed in 6 days\n    six_day_distance = 6 * 6\n    # on the 7th day it climbs only 2 metres\n    seventh_day_distance = 2\n    # total distance climbed by the 7th day before sliding down\n    total_distance_before_sliding = six_day_distance + seventh_day_distance\n    \n    if total_distance_before_sliding < 20:\n        # since the well is 20 metres and the snail climbs out on the 7th day\n        # the total distance climbed by the end of the 7th day is exactly 20 metres\n        total_distance = 20\n        # the distance the snail slides down during the night\n        sliding_distance = total_distance_before_sliding - total_distance\n    else:\n        # if the snail can climb out before sliding down on the seventh day, it means the snail doesn't slide\n        sliding_distance = 0\n\n    return abs(sliding_distance)\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(years):\n        initial_rabbits = initial_rabbits * 3 // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight1 = 6\n    percent1 = 45\n    weight2 = 14\n    percent2 = 60\n\n    total_weight = weight1 + weight2\n    nickel_weight1 = (percent1 / 100) * weight1\n    nickel_weight2 = (percent2 / 100) * weight2\n    total_nickel_weight = nickel_weight1 + nickel_weight2\n\n    percent_concentration = (total_nickel_weight / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    candy_speed = symbols('candy_speed')\n\n    # Ivy speed is 20 meters more per minute than Candy\n    ivy_speed = candy_speed + 20\n\n    # Candy starts 6 minutes later, so Ivy has already been walking for 6 minutes\n    ivy_distance_start = 6 * ivy_speed\n\n    # Both walk for another 12 minutes before meeting\n    ivy_distance_walk = 12 * ivy_speed\n    candy_distance_walk = 12 * candy_speed\n\n    # Total distance each walked when they met is the distance between houses\n    total_ivy_distance = ivy_distance_start + ivy_distance_walk\n    total_candy_distance = candy_distance_walk\n\n    # Equation based on the distance they covered\n    equation = Eq(total_ivy_distance + total_candy_distance, 1200)\n\n    # Solve for Candy's speed\n    candy_speed_value = solve(equation, candy_speed)\n\n    return candy_speed_value[0]\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = 0\n\n    while mother_age != 3 * (edward_age + years):\n        years += 1\n    \n    return years\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 1 / 6  # scale of 1cm to 6m\n    playground_length_on_plan = 5  # length of the playground on the plan in cm\n    real_length_playground = playground_length_on_plan / scale_ratio  # real length of the playground in m\n\n    return real_length_playground\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    \n    for x1 in range(1, 14):\n        for x2 in range(1, 14 - x1):\n            for x3 in range(1, 14 - x1 - x2):\n                x4 = 13 - x1 - x2 - x3\n                product = x1 * x2 * x3 * x4\n                if product > max_product:\n                    max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n            \nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n_students = 0\n    while True:\n        n_students += 1\n        if ((n_students + 11) ** 0.5) % 1 == 0 and ((n_students + 1) ** 0.5) % 1 == 0:\n            return n_students\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n\n    num_boxes = total_money // cookie_box_price\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    total = 4060800\n    known_sum = 4000000 + 800\n\n    missing_number = total - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_in_tank_A = 673\n    oil_difference = 56\n    \n    oil_in_tank_B = oil_in_tank_A + oil_difference\n\n    return oil_in_tank_B\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volleyballs, basketballs = symbols('volleyballs basketballs')\n\n    equation1 = Eq(volleyballs + basketballs, 12)  # Total number of balls is 12\n    equation2 = Eq(25 * volleyballs + 30 * basketballs, 340)  # Total cost of the balls is $340\n\n    solutions = solve((equation1, equation2), (volleyballs, basketballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000  # Total wealth in pounds\n\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    initial_candy = 36\n\n    to_lily = 3/4 * initial_candy\n    remaining_after_lily = initial_candy - to_lily\n    to_brother = 1/3 * remaining_after_lily\n    remaining_candy = remaining_after_lily - to_brother\n    \n    return int(remaining_candy)\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the common mass of mint candies in all containers\n    # Let y be the mass multiplier for chocolate candies, since their proportion is proportional to mint\n    x, y = symbols('x y')\n\n    # Let A, B, C be the mass of the containers\n    A = 2/5 * (5*x + 5*y) + x + y\n    B = 2/7 * (7*x + 7*y) + x + y\n    C = 2/9 * (9*x + 9*y) + x + y\n\n    # Equation derived from the total mass\n    equation = A + B + C - 1371\n\n    # Solve the equation to find x and y\n    solutions = solve(equation)\n\n    # Calculate the mass of all strawberry candies in each container\n    mass_strawberry_A = 2/5 * solutions[x] * 5\n    mass_strawberry_B = 2/7 * solutions[x] * 7\n    mass_strawberry_C = 2/9 * solutions[x] * 9\n\n    # Sum all strawberry candies masses\n    total_mass_strawberry = mass_strawberry_A + mass_strawberry_B + mass_strawberry_C\n\n    return total_mass_strawberry\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount of money Roy and Dennis initially had\n    roy, dennis = symbols('roy dennis')\n\n    # Equation representing the total amount of money they shared\n    total_money_eq = Eq(roy + dennis, 340)\n    \n    # Equation after Roy spent 2/3 of his money and Dennis spent 1/4 of his money\n    # Dennis has twice as much money left as Roy\n    spent_eq = Eq(dennis - dennis/4, 2 * (roy - 2*roy/3))\n\n    # Solve the system of equations\n    solutions = solve((total_money_eq, spent_eq), (roy, dennis))\n\n    # Calculate the amount of money Dennis had in the end after spending 1/4 of his money\n    dennis_end_money = solutions[dennis] - solutions[dennis]/4\n\n    return dennis_end_money\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = 30\n    girls_apples = 20\n    average_apples = 26\n    \n    girls = (average_apples * boys - boys_apples * boys) / (girls_apples - average_apples)\n    \n    return girls\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once\n    # Hence, there are a total of (8-1) = 7 matches for each player\n    # Since all players have a different number of wins and there's one winner, the player with the most wins\n    # will have won all their matches.\n    # Therefore, the champion has 7 wins.\n    return 7\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits = 300\n    count = 0\n    page = 0\n\n    while count < digits:\n        page += 1\n        count += len(str(page))\n\n    if count > digits:\n        # If count exceeds the number of digits, we need to subtract the last page added\n        page -= 1\n\n    return page\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of curry puffs sold by Mr. Lee on each day\n    friday, saturday, sunday = symbols('friday saturday sunday')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(saturday, friday + 27)  # Saturday sales\n    equation2 = Eq(sunday, friday - 14)    # Sunday sales\n    equation3 = Eq(friday + saturday + sunday, 475)  # Total sales over 3 days\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n    \n    return solutions[friday]\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    ans = 675 // 25\n    return ans\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import divisors, isqrt\n\ndef solution():\n    num = 693\n    factors = divisors(num)\n    for factor in sorted(factors, reverse=True):\n        # Check if num * factor^2 is a perfect square\n        if isqrt(num * factor ** 2) ** 2 == num * factor ** 2:\n            return factor\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate the unit digit of each term\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17 = pow(17, 379, 10)\n    unit_digit_4 = pow(4, 2012, 10)\n    \n    # Calculate the unit digit of the sum\n    ans = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    number_of_balls = 8\n    cost_per_ball = 20.45\n    number_of_hula_hoops = 6\n\n    total_cost_balls = number_of_balls * cost_per_ball\n    total_cost_hula_hoops = total_cost - total_cost_balls\n\n    cost_per_hula_hoop = total_cost_hula_hoops / number_of_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum([sum([1 / i for j in range(1, i)]) for i in range(2, 61)])\n    return ans\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_juice = 8 * 3\n    remaining_juice = total_juice - 9\n    containers_needed = -(-remaining_juice // 5)\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    \n    equation1 = Eq(marry, 7/5 * alexis)\n    equation2 = Eq(charlotte + charlotte * 80/100, marry * 20/100 + alexis * 20/100)\n    equation3 = Eq(marry - 20/100 * marry, charlotte + 20)\n    \n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddies_position = 12\n    \n    position_from_end = total_people - eddies_position + 1\n    \n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2  # 3 1/2 kg\n    cost_per_kg = 7.50  # £7.50 per kilogram\n    total_cost = steak_weight * cost_per_kg  # Total cost of steak\n    money_vani_has = 20  # £20 note\n\n    # Calculate how much more money Vani needs if any\n    additional_money_needed = max(0, total_cost - money_vani_has)\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson and Clive originally have a total of $705\n    total_money = Eq(benson + clive, 705)\n\n    # After Benson buys a calculator and Clive buys a racket, they have the same amount of money left\n    equal_money = Eq(benson - 34, clive - 63)\n\n    # Solving the system of equations\n    solutions = solve((total_money, equal_money), (benson, clive))\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the mass of a light bowling ball\n    x = symbols('x')\n\n    # Equation based on the given information\n    # 6 * mass of light bowling ball + 6 * 2 * mass of light bowling ball = total mass\n    equation = Eq(6 * x + 6 * 2 * x, 65.7)\n\n    # Solve for x\n    mass_light = solve(equation, x)[0]\n\n    # Return the mass of a light bowling ball to the nearest kg\n    return round(mass_light)\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be non-zero\n        for j in range(10): # Second digit can be zero\n            num = int(f\"{i}{j}{j}{i}\")  # Construct the palindromic number\n            if 1000 <= num <= 9999:  # Check if it's a four-digit number\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the given averages\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the average of A, B, and C\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n\n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise = symbols('denise')\n    jay = 6 * denise\n    equation = Eq(denise + jay, 126)\n    num_pens_denise = solve(equation, denise)\n    return num_pens_denise[0]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Calculate the cost of one chocolate bar\n    cost_chocolate_bar = 1.26\n\n    # Calculate the total cost for 5 chocolate bars\n    total_cost_chocolate = 5 * cost_chocolate_bar\n\n    # Since the cost is the same for 6 cookies, we find the cost of one cookie\n    cost_cookie = total_cost_chocolate / 6\n\n    # Calculate the total cost for 4 cookies\n    total_cost_cookies = 4 * cost_cookie\n\n    # Subtract the total cost for 4 cookies from the initial amount of money\n    money_left = 9.05 - total_cost_cookies\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the total number of children\n    children_eq = Eq(boys + girls, 650)\n    # Equation representing the total number of balls distributed\n    balls_eq = Eq(boys/3 + girls/2, 250)\n    \n    # Solve the system of equations\n    solutions = solve((children_eq, balls_eq), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # After 25 girls left to play hopscotch\n    # girls inside became (2/3) of boys\n    eq1 = Eq(girls - 25, 2/3 * boys)\n\n    # After 15 boys left to play soccer, the number of boys and girls became equal\n    eq2 = Eq(boys - 15, girls - 25)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (boys, girls))\n\n    # Calculate the initial total number of students\n    total_students = solutions[boys] + solutions[girls]\n\n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 8) and (hundreds * 100 + tens * 10 + ones) % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_value = 7590  # Total value in cents to avoid floating point\n    ratio_x = 8\n    ratio_y = 3\n    ratio_sum = ratio_x + ratio_y\n    \n    # Let the number of 10-cent coins be 8k and the number of 50-cent coins be 3k\n    # Each 10-cent coin is worth 10 cents, and each 50-cent coin is worth 50 cents\n    # We then have the equation 10 * (8k) + 50 * (3k) = 7590 cents\n    \n    # Total value contributed by 10-cent coins is 8 * value of each coin\n    value_per_ratio_unit = 10 * ratio_x\n    # To find the value of k (the number of times the ratio fits into the total value)\n    k = total_value / (value_per_ratio_unit + 50 * ratio_y)\n    \n    # Now we find the value of the 50-cent coins, which is 3k * 50\n    value_of_50_cent_coins = 50 * k * ratio_y\n\n    return value_of_50_cent_coins / 100  # Convert back to dollars\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1, 100):\n        if 8 * 11 == i * 9 + 34:\n            return i\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temperature = 8\n    temperature_drop = 12\n    midnight_temperature = midday_temperature - temperature_drop\n    return midnight_temperature\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    discount_rate = 0.80\n    spent = 6400\n    saved = spent * discount_rate / (1 - discount_rate)\n    return saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7\n    hole_side_length = 3\n    volume = 320\n\n    base_area = base_side_length ** 2\n    hole_area = hole_side_length ** 2\n    remaining_area = base_area - hole_area\n\n    height = volume / remaining_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Consider Amy and Judy as one person\n    # There are 7 \"people\" to arrange around the table\n    arrangements_for_7 = factorial(7 - 1)  # (n-1)! for circular arrangements\n    \n    # Amy and Judy can switch places with each other, 2! ways\n    arrangements_for_amy_judy = factorial(2)\n    \n    # Total arrangements\n    total_arrangements = arrangements_for_7 * arrangements_for_amy_judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Start with the initial pattern size and the number of terms counted\n    pattern_size = 0\n    terms_counted = 0\n\n    # Increment the pattern size until the terms_counted exceeds 2008\n    while terms_counted < 2008:\n        pattern_size += 1\n        terms_counted += pattern_size\n    \n    # Find the difference to know position in the pattern\n    difference = terms_counted - 2008\n\n    # Get the term in the sequence by subtracting the difference from the pattern size\n    term = pattern_size - difference\n\n    return term\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    weight_of_one_x = 1.5  # in grams\n    balance_equation = 3 * weight_of_one_x / 10  # balance 3x with 10y\n    weight_of_one_y = balance_equation  # since 3x balances with 10y, weight of one y is the balance_equation\n    return weight_of_one_y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = [6, 10, 14, 18, 22, 26]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) // 3\n    return cucumbers\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 9]\n    digit_permutations = permutations(digits, 3)  # Generate all permutations of 3 digits\n    all_possible_numbers = list(digit_permutations)\n    \n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total = 0\n    for num in range(1, 101):\n        if num % 5 == 2:\n            total += num\n    return total\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Number of nights\n    n = 31\n    # Mosquitoes eaten on the 16th night, which is the middle term of the arithmetic sequence\n    a_16 = 100\n    # The difference in the number of mosquitoes eaten each night\n    d = 6\n    \n    # The first term of the arithmetic sequence (a_1) can be calculated using the formula for the nth term of an arithmetic sequence:\n    # a_16 = a_1 + (16 - 1) * d\n    a_1 = a_16 - (16 - 1) * d\n    \n    # The sum of an arithmetic sequence can be found using the formula:\n    # S_n = n/2 * (2 * a_1 + (n - 1) * d)\n    S_n = n / 2 * (2 * a_1 + (n - 1) * d)\n    \n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    left_for_pip = total_bags - given_to_avril\n    return left_for_pip\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris must leave a multiple of 3 matches after his turn.\n    # If Chris takes away 1 match, 6 will remain, which is a multiple of 3.\n    # This means Dylan can only take 1 or 2 matches, leaving Chris with a multiple\n    # of 3 again. Chris can always leave a multiple of 3 until the last match,\n    # ensuring his victory.\n    chris_take = 7 % 3\n    if chris_take == 0:\n        chris_take = 2  # If the modulo is 0, Chris needs to take 2 to ensure a victory.\n    # Chris needs to take 1 match on his first turn\n    ans = chris_take\n    return ans\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0:\n            return A * 100 + B * 10 + C\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 0-9\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        # Form the numbers based on the current permutation\n        ABAC = A * 1000 + B * 100 + A * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n        # Check if the current permutation satisfies the equation\n        if ABAC + DBEC == ACEDC:\n            # As A and D can't be zero (they are in the thousand's place), we check for that\n            if A == 0 or D == 0:\n                continue\n            return DBEC\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    end_time = (13 * 60) + 6    # Convert 1.06pm to minutes (13 because it's past midday)\n\n    minutes_between = end_time - start_time\n\n    return minutes_between\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    return 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64 + 36) * (64 - 36)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    ans = 1 # He must choose one restaurant to eat at\n    return ans\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    numbers = list(range(1, 10)) + list(range(8, 0, -1))\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = (53 - 50) + (47 - 44) + (41 - 38) + (35 - 32) + (29 - 26) + (23)\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance / speed\n    return int(time_taken)\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    from itertools import permutations\n\n    # Iterate through all permutations of digits 0-9 for A and E\n    for A, E in permutations(range(10), 2):\n        # Construct the number from the digits\n        number = A * 1000 + E * 110 + A\n        # Check if A is not 0 because it's a 4-digit number\n        if A != 0:\n            return number\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_age = 4 * 25  # Total age of family\n    # Total age of Harry, mom, and sister\n    other_family_age = 14 + 36 + 10\n    # Age of Harry's dad is total age minus the sum of other family members' ages\n    harrys_dad_age = total_age - other_family_age\n    return harrys_dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Heights in meters for comparison\n    heights_in_meters = [83, 200 / 100, 8 / 100, 1 / 2]  # Convert cm to m for comparison\n\n    # Height of a standard classroom door in meters\n    standard_door_height_m = 2\n\n    # Finding the closest value to the standard height door\n    closest_height = min(heights_in_meters, key=lambda x: abs(x - standard_door_height_m))\n    return closest_height\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    digits_used = 0\n    pages = 0\n\n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n\n    if digits_used > total_digits:\n        pages -= 1\n\n    return pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_money_after_lunch = 45 / (1 - 2/7)\n    original_money = remaining_money_after_lunch / (1 - 5/12)\n    return original_money\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    pages = 0\n    digit_length = 1\n\n    while total_digits > 0:\n        digits_in_this_range = 9 * digit_length * (10 ** (digit_length - 1))\n        if total_digits >= digits_in_this_range:\n            total_digits -= digits_in_this_range\n            pages += 9 * (10 ** (digit_length - 1))\n        else:\n            pages += total_digits // digit_length\n            if total_digits % digit_length != 0:\n                pages += 1\n            break\n        digit_length += 1\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    # Total games played\n    total_games = 5 * (5 - 1) // 2\n\n    # Gina's wins = Total games - (Lily's + Eva's + Tina's + Emma's) wins\n    lily_wins = 2\n    eva_wins = 1\n    tina_wins = 4\n    emma_wins = 3\n\n    gina_wins = total_games - (lily_wins + eva_wins + tina_wins + emma_wins)\n\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    max_num = max(numbers)\n    min_num = min(numbers)\n    ans = 2 * (max_num - min_num)\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    # Constants\n    g = 9.81  # gravitational acceleration (m/s^2)\n    theta = math.radians(20)  # convert slope angle from degrees to radians\n    mu_k = 0.2  # coefficient of kinetic friction\n    d = 400  # distance along the slope (m)\n\n    # Calculating the acceleration due to gravity parallel to the slope\n    a_parallel = g * math.sin(theta)\n\n    # Calculating the acceleration due to kinetic friction\n    a_friction = g * math.cos(theta) * mu_k\n\n    # Net acceleration along the slope\n    a_net = a_parallel - a_friction\n\n    # Initial velocity (starting from rest)\n    u = 0  # (m/s)\n\n    # Using kinematic equation: v^2 = u^2 + 2*a_net*d\n    # to find the final velocity v at the bottom of the slope\n    v = math.sqrt(u**2 + 2 * a_net * d)\n\n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = avril_points + 15\n        if (avril_points + eddie_points == 155) and (eddie_points // 10 + eddie_points // (-5) == 0):\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n    group_price = shirt_price * 4 + bag_price\n    num_groups = total_spent // group_price\n    shirts_bought = 4 * num_groups  # Correction here, not 1 shirt per group. It's 4 shirts per group.\n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_rate = 1 / (6 * 5)  # Each man's rate per day\n    women_rate = 1 / (5 * 6)  # Each woman's rate per day\n\n    combined_rate = (10 * men_rate) + (5 * women_rate)  # Combined rate of 10 men and 5 women\n\n    days_to_complete = 1 / combined_rate  # Total days to complete the job\n\n    return days_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # There were thrice as many boys as girls in a gathering\n    equation1 = Eq(boys, 3 * girls)\n    \n    # After 12 boys left the gathering and another 20 girls joined the gathering,\n    # there was an equal number of boys and girls\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n    \n    # Weighs of coffee beans\n    type_A = 56\n    type_B = 96\n    type_C = 120\n    \n    # Calculate greatest common divisor (GCD) for all three types\n    ans = gcd(type_A, gcd(type_B, type_C))\n    \n    return ans\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    min_apples = (apples - (children - 1)) // children\n    return min_apples + 1  # Since each child gets at least 1 apple, we add 1\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana, orange = symbols('apple banana orange')\n    equation1 = Eq(banana, 2 * apple)\n    equation2 = Eq(orange, 3 * apple)\n    equation3 = Eq(apple + banana + orange, 24)\n    \n    solutions = solve((equation1, equation2, equation3), (apple, banana, orange))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    anna_age = 8 + years\n    mother_age = 44 + years\n\n    equation = Eq(mother_age, 3 * anna_age)\n\n    result = solve(equation, years)\n\n    return result[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Define the lengths of the ribbons in centimeters\n    length_short = 40\n    length_long = 70\n\n    # Given lengths in centimeters and total extra length in meters\n    total_extra_length_cm = 240\n\n    # May's ribbon lengths\n    may_short_ribbon_count = 7\n    may_ribbon_length = may_short_ribbon_count * length_short\n\n    # Nancy's ribbon lengths\n    nancy_long_ribbon_count = 18\n    nancy_ribbon_length = nancy_long_ribbon_count * length_long\n\n    # Calculate the total length of May's ribbons including the extra length\n    may_total_length = nancy_ribbon_length + total_extra_length_cm\n\n    # Knowing that May and Nancy have an equal amount of pieces,\n    # we find the remaining number of pieces that are long ribbons for May.\n    may_long_ribbon_count = (may_total_length - may_ribbon_length) / length_long\n\n    # The total number of ribbons May has\n    return may_short_ribbon_count + may_long_ribbon_count\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n    \n    # Assume all animals are chickens (2 legs each)\n    chickens = total_animals\n    chicken_legs = 2 * chickens\n    rabbits = 0\n    \n    # Replace chickens with rabbits (4 legs each) one by one\n    while chicken_legs > total_legs:\n        chickens -= 1\n        rabbits += 1\n        chicken_legs -= 2\n    \n    return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_volume = 1\n    ratio_red = 3\n    ratio_sum = 3 + 1\n    \n    red_paint = (ratio_red / ratio_sum) * total_volume\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    # If A gives B 40 books, they would have the same number of books.\n    equation1 = Eq(A - 40, B + 40)\n    # If B gives A 40 books, A is 3 times of B.\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (A, B))\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    mean_value = 6\n    num_numbers = 8\n    given_numbers = [9, 7, 5, 8, 4, 1, 8]\n\n    sum_of_given_numbers = sum(given_numbers)\n    total_sum_required = mean_value * num_numbers\n    missing_number = total_sum_required - sum_of_given_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    original_amount = 68\n    amount_given_to_sister = original_amount * 1/4\n    amount_left = original_amount - amount_given_to_sister\n    return amount_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    apples = 50\n    # Initially assign 1 apple to each child to satisfy the at least 1 condition\n    apples -= 8\n    # Now distribute remaining apples in ascending order to ensure different amounts\n    child_apple_counts = [1] * 8  # Initial 1 apple to each child\n    for i in range(apples):\n        child_apple_counts[i % 7] += 1  # Start from second child (index 1) up to the second last (index 6)\n    max_apples_to_child = child_apple_counts[-2] + 1  # Adding 1 apple to the second highest count to satisfy different amounts\n    return max_apples_to_child\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Let x be the total amount of grass in the pasture.\n    # 8 cows * 10 days = 4 cows * 15 days\n    # Therefore, x = 8 cows * 10 days = 4 cows * 15 days\n    # To find out how many cows can be fed for 5 days,\n    # we divide the total amount of grass by 5 days.\n    # Number of cows = total amount of grass / (5 days * per cow consumption)\n    \n    # Since 8 cows eat the total grass in 10 days, each cow eats 1/80 of the total grass per day.\n    # Hence, in 5 days, each cow would eat 5/80 = 1/16 of the total grass.\n    # The pasture can feed as many cows as 16 times the one cow consumption in 5 days.\n    \n    # The number of cows that can be fed for 5 days is then:\n    num_cows = 16\n  \n    return num_cows\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_per_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_per_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    tapes_cost_total = 3 * 9\n    cds_cost_total = 83 - tapes_cost_total\n    cost_per_cd = cds_cost_total / 4\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    divisor_without_decimal = 122\n    subtracted_value = 99.396\n\n    # The correct answer would be when we divide the incorrect result again by 100\n    # since the divisor was considered 100 times greater than it should have been\n    incorrect_result = subtracted_value / (1 - divisor_without_decimal / 100)\n\n    true_result = incorrect_result / 100\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cards = 876\n    melissa, hisham = symbols('melissa hisham')\n\n    # Melissa had twice as many cards as Hisham.\n    equation1 = Eq(melissa, 2 * hisham)\n\n    # Together, they had 876 cards.\n    equation2 = Eq(hisham + melissa, total_cards)\n\n    # Solve for the number of cards Melissa and Hisham have\n    solutions = solve((equation1, equation2), (melissa, hisham))\n\n    melissa_cards = solutions[melissa]\n    hisham_cards = solutions[hisham]\n\n    # Calculate how many cards Melissa should give to Hisham for them to have the same number.\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n    eq1 = Eq(a + b, 6)  # third number (fourth in sequence)\n    eq2 = Eq(a + 2 * b, 15)  # fifth number (sixth in sequence)\n    sol = solve((eq1, eq2), (a, b))\n\n    # Now we know the first two numbers (a,b), we can find the seventh by calculating the sequence\n    first = sol[a]\n    second = sol[b]\n    third = first + second\n    fourth = second + third\n    fifth = third + fourth\n    sixth = fourth + fifth\n    seventh = fifth + sixth\n\n    return seventh\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    result = (35 - 8) / 3\n    return result\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    groups = (boys + girls) // greatest_common_divisor\n\n    return groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # 1 litre is 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (\n        1/(1*6) + \n        1/(6*11) + \n        1/(11*16) + \n        1/(16*21) + \n        1/(21*26) + \n        1/(26*31) + \n        1/(31*36)\n    )\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '7', '5', '8', '3']\n    min_odd_number = float('inf')\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0 and num < min_odd_number and len(str(num)) == 5:\n            min_odd_number = num\n    \n    return min_odd_number\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Rate of men per day\n    men_rate = 1 / (24 * 16)\n    \n    # Rate of women per day\n    women_rate = 1 / (16 * 24)\n    \n    # Combined rate per day of 10 men and 6 women\n    total_rate = 10 * men_rate + 6 * women_rate\n    \n    # Total number of days with the combined rate\n    days = 1 / total_rate\n    \n    return days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    n = 4  # number of rectangles\n    # at the most, every new rectangle can add a number of regions equal to the number of lines of previous rectangles plus 1\n    ans = 1  # the whole plane without any rectangle divides it into 1 region; start count from there\n    for i in range(1, n + 1):\n        ans += i * 2  # adding regions with each new rectangle\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    \n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial as fact\n    \n    # Total family members\n    total_members = 5\n    \n    # Eddie's positions (all except the middle one)\n    eddie_positions = total_members - 1\n    \n    # Possible positions for the other family members once Eddie takes a spot\n    other_members_permutations = fact(total_members - 1)\n    \n    return eddie_positions * other_members_permutations\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Given the sequence is 96, n, 24, 12, 6, we can infer that it is a geometric sequence\n    # Let's find the common ratio using the terms 24 and 12\n    r = 12 / 24  # common ratio is 0.5, or the sequence is divided by 2\n\n    # Knowing the common ratio, we can find the missing number n by multiplying 96 by r\n    n = 96 * r\n\n    return n\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    # Let x be the initial sum of money Hamid had.\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # After spending 1/3 of his money on a watch, Hamid had 2/3x left.\n    # He then spent $56 on a tie, so he had 2/3x - 56 left.\n    # Finally, he was left with 3/8 of the sum of money he had at first, which is 3/8x.\n    # We can set up the equation: 2/3x - 56 = 3/8x\n    equation = Eq(2/3*x - 56, 3/8*x)\n    \n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n\n    # Now, calculate how much Hamid spent altogether:\n    # He spent 1/3 of his initial money on the watch, and $56 on the tie.\n    total_spent = 1/3*x_value + 56\n\n    return total_spent\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        num = int(''.join(map(str, perm)))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n    \n    relative_speed = train_speed + eddie_speed\n    train_length = relative_speed * time_to_pass\n    \n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    operators = ['+', '*']\n    max_value = 0\n\n    for op1, op2, op3 in product(operators, repeat=3):\n        expression = f\"1{op1}2{op2}3{op3}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n    \n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_questions = 12\n    correct_points = 8\n    incorrect_penalty = 3\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = (correct_answers * correct_points) - (incorrect_answers * incorrect_penalty)\n        if score == 63:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # in meters\n    bridge_length = 900  # in meters\n    speed = 400  # in meters per minute\n\n    # time = distance / speed\n    time = (train_length + bridge_length) / speed # total distance to be covered is the length of the train plus the bridge's length\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for i in range(1995):\n        a, b = b, (a + b) % 3\n    return a\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the variable `peter` represent the initial number of stickers Peter had\n    peter = symbols('peter')\n    \n    # Based on the information given:\n    # Sam = Peter + 40 (initially)\n    # After transactions:\n    # Sam_gives = 0.20 * (Peter + 40)\n    # Peter_gives = 0.25 * Peter\n    # Sam_end = (Peter + 40) - Sam_gives + Peter_gives\n    # Peter_end = Peter - Peter_gives + Sam_gives\n    # The equation for the difference in the end is: Sam_end - Peter_end = 96\n    \n    Sam_gives = 0.20 * (peter + 40)\n    Peter_gives = 0.25 * peter\n    Sam_end = (peter + 40) - Sam_gives + Peter_gives\n    Peter_end = peter - Peter_gives + Sam_gives\n    \n    # Set up the equation for the end difference\n    equation = Eq(Sam_end - Peter_end, 96)\n    \n    # Solve the equation\n    solution = solve(equation, peter)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let \"h\" be Hazel's current age, and \"m\" be her mom's current age.\n    h, m = symbols('h m')\n\n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(h + 12, 3 * h)\n\n    # On Hazel's 18th birthday, her mom will be three times Hazel's age then.\n    # Since Hazel is \"h\" years old now, in 18 - h years she will be 18, and her mom will be m + (18 - h).\n    equation2 = Eq(m + (18 - h), 3 * 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, m))\n\n    # Hazel's mom's current age\n    return solutions[m]\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    n = 60  # total number of terms\n\n    # The sum of first 'a' terms of an arithmetic sequence is given by: S_a = a/2 * (2 * first_term + (a-1) * difference)\n    # where first_term is the first term and difference is the common difference of the sequence.\n    \n    # Let the first term be 'first_term' and common difference be 'd'.\n    # From the question we have two equations:\n    # S_5 = 5/2 * (2 * first_term + (5-1) * d) = 10\n    # S_5_last = 5/2 * (2 * (first_term + (60-1)*d) + (5-1) * d) = 120\n\n    # We have two equations with two variables (first_term and d):\n    # 10 = 5/2 * (2 * first_term + 4 * d)\n    # 120 = 5/2 * (2 * first_term + 118 * d + 4 * d)\n\n    # Simplifying the equations:\n    # 4 = 2 * first_term + 4 * d  => let's call this eq(1)\n    # 48 = 2 * first_term + 122 * d => let's call this eq(2)\n\n    # Subtracting eq(1) from eq(2), we get:\n    # 44 = 122 * d - 4 * d\n    # 44 = 118 * d\n    # d = 44 / 118\n\n    d = 44 / 118  # common difference\n\n    # Now, substituting the value of 'd' in eq(1), we get:\n    # 4 = 2 * first_term + 4 * (44 / 118)\n    # 4 - 4 * (44 / 118) = 2 * first_term\n    # first_term = (4 - 4 * (44 / 118)) / 2\n\n    first_term = (4 - 4 * (44/118)) / 2\n\n    # The sum of all 'n' terms of an arithmetic sequence is given by: S_n = n/2 * (2 * first_term + (n-1) * difference)\n    # Therefore, substituting the values for 'first_term' and 'd' to find the sum of 60 terms:\n    S_n = n/2 * (2 * first_term + (n-1) * d)\n\n    return S_n\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while True:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        if peter_age == pip_age + pit_age:\n            break\n\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    result = 1.25 * 47 * 8\n    return result\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_squares = (n * (n + 1) // 2) ** 2\n    return sum_of_squares\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # We have 13 different numbers for each pattern. \n    # In the worst case, we can draw all 13 cards of one pattern without getting two consecutive numbers.\n    # Repeating this for all 4 patterns gives us 4 * 13 cards, still without guaranteeing two consecutive.\n    # Now, the next card we draw must be either a consecutive of one we've already drawn,\n    # or it starts a new pattern of consecutive numbers, in which case the next one guarantees a pair.\n    # Therefore, we need to add 1 to the 4 * 13 to ensure we draw two consecutive numbers, regardless of patterns.\n    \n    num_cards = (4 * 13) + 1\n    return num_cards\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Each sheet of the newspaper has 4 pages since it's folded in half twice.\n    # The front of the sheet will have the lower odd page number and the back of the sheet will have the higher even page number.\n    # For every sheet, the sum of the front and back page numbers is a constant since page 1 will be on the same sheet as page 36, page 2 with page 35, etc.\n    # The sum of the first sheet (pages 1, 2, 35, 36) is 1 + 2 + 35 + 36 = 74\n\n    # Since Vicky is taking out the fifth sheet, four sheets are before it.\n    # Therefore, the sum will reduce by 8 for each sheet, because we remove two pages from the start and two pages from the end.\n    sum_per_sheet = 74\n    sum_for_fifth_sheet = sum_per_sheet - 4 * 8 # 8 is for 2 pages from start and 2 from end per sheet\n\n    return sum_for_fifth_sheet\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of laptops, c be the cost of each laptop initially\n    x, c = symbols('x c')\n\n    # Given: Selling price for each laptop is 2000\n    selling_price_per_laptop = 2000\n\n    # Original profit for selling all laptops is 60000\n    original_profit = 60000\n\n    # Original cost for all laptops is revenue (selling_price * x) - profit\n    original_total_cost = (selling_price_per_laptop * x) - original_profit\n\n    # Therefore, the original cost for each laptop is total cost / number of laptops\n    # Eq: original_total_cost == c * x\n    equation1 = Eq(original_total_cost, c * x)\n\n    # After cost decrease by 1/5, new cost per laptop is 4/5 of original\n    new_cost_per_laptop = 4 / 5 * c\n\n    # New profit is increased by 30%, so new profit is 1.3 * original profit\n    new_profit = 1.3 * original_profit\n\n    # New total cost for all laptops with the decreased cost price\n    new_total_cost = new_cost_per_laptop * x\n\n    # New profit equation: selling_price * x - new_total_cost == new_profit\n    equation2 = Eq(selling_price_per_laptop * x - new_total_cost, new_profit)\n\n    # We have two equations with two unknowns (x, c)\n    solutions = solve((equation1, equation2), (x, c))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    number = 10 * 2\n    return number\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # Initialize the smallest possible number M\n    M = 1\n\n    # Loop until finding the smallest possible M that fits the condition\n    while True:\n        # Loop over possible values of 'a' (from 2 to 27 as 1 and 28 are excluded)\n        for a in range(2, 28):\n            # Check if 'a' is a divisor of 28 to avoid redundant checks, since 28 is already a divisor of M\n            if 28 % a == 0:\n                continue\n\n            # All remainders when M is divided by 7, 9, a, and 28 respectively\n            r7 = M % 7\n            r9 = M % 9\n            ra = M % a\n            r28 = M % 28\n\n            # Form an increasing arithmetic pattern\n            if r7 < r9 < ra < r28 and (r9 - r7) == (ra - r9) == (r28 - ra):\n                return M\n        # Increment M to check the next number\n        M += 1\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    total_rows = ((last_term - first_term) // difference) + 1\n    total_seats = (total_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Initialize the count of digits\n    count = 0\n    # Iterate over the range of numbers Tom wrote\n    for i in range(1, 130):\n        # Add the number of digits in the current number to the count\n        count += len(str(i))\n    # Return the total count of digits\n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_diff = 36\n    total_students = 0\n\n    for i in range(1, 100):\n        boys = (2 * i + 1) ** 2 - (2 * i - 1) ** 2\n        girls = (2 * i - 1) ** 2 - (2 * i - 3) ** 2 if i >= 2 else 0\n        diff = boys - girls\n        if diff == total_diff:\n            total_students = (2 * i + 1) ** 2\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of men and days for the first scenario\n    men1 = 3\n    days1 = 2\n    length1 = 120\n\n    # Work done by one man in one day for first scenario\n    work_per_man_per_day1 = length1 / (men1 * days1)\n\n    # Number of men and length of trench for the second scenario\n    men2 = 4\n    length2 = 880\n\n    # Total work to be done for second scenario by one man\n    total_work_per_man2 = length2 / work_per_man_per_day1\n\n    # Days taken by second group of men to complete the work\n    days2 = total_work_per_man2 / men2\n\n    return days2\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n    \n    combined_rate = total_people / combined_weeks\n    gloria_rate = combined_rate - ellie_rate\n    gloria_weeks = total_people / gloria_rate\n    \n    return gloria_weeks\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    return (2 * 15) // 5\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let's denote the number of books moved from the first shelf to the second shelf as x.\n    \n    # After moving x books, the first shelf will have (18 - x) books\n    # and the second shelf will have (24 + x) books.\n    \n    # According to the problem, the second shelf needs to have twice as many books as the first shelf.\n    # Therefore, the equation to solve is: 24 + x = 2 * (18 - x)\n    \n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 285 * 7 + 6\n    den1 = 7\n\n    num2 = 181 * 11 + 10\n    den2 = 11\n\n    num3 = 153 * 13 + 12\n    den3 = 13\n\n    # Find numerator and denominator for the sum of improper fractions\n    numerator_sum = num1 * den2 * den3 + num2 * den1 * den3 + num3 * den1 * den2\n    denominator_sum = den1 * den2 * den3\n\n    # Find numerator and denominator for the sum of unit fractions\n    numerator_unit_sum = den2 * den3 + den1 * den3 + den1 * den2\n    denominator_unit_sum = den1 * den2 * den3\n\n    # Calculate the final result by dividing the two sums\n    ans = (numerator_sum / denominator_sum) / (numerator_unit_sum / denominator_unit_sum)\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of pupils in the class as \"total\"\n    total = symbols('total')\n\n    # Number of pupils that are neither in the band nor in the choir\n    neither_band_nor_choir = total * 2/9\n\n    # Number of pupils remaining after removing the 5 in the band\n    remaining_after_band = total - 5\n\n    # Number of pupils in the choir which is 3/4 of remaining pupils\n    choir = remaining_after_band * 3/4\n\n    # The sum of pupils in the band, choir, and neither should equal the total number of pupils\n    equation = Eq(5 + choir + neither_band_nor_choir, total)\n\n    # Solve the equation\n    solutions = solve(equation, total)\n\n    # The amount of total pupils will be an integer not a fraction or decimal, we need to find which solution satisfies\n    for sol in solutions:\n        if sol > 0 and sol.is_integer:\n            return sol\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_to_cross = 20  # seconds\n    bridge_length = 300  # meters\n    \n    speed = bridge_length / time_to_cross  # speed in meters per second\n    \n    return speed  # returning speed in meters per second\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Lollipops left when 4 lollipops are put into each box\n    remainder_4 = 32\n\n    # Lollipops in the last box when 7 lollipops are put into each box\n    last_box_7 = 3\n\n    # We know that the total number of lollipops must be a number that:\n    # - Gives a remainder of 32 when divided by 4\n    # - Gives a remainder of 3 when divided by 7\n\n    # Start checking for the lollipops from 32, as it's the minimum possible number\n    # Increase by multiples of 4, as the number of lollipops gives a remainder of 32\n    # when dividing by 4\n    lollipops = remainder_4\n    while (lollipops - last_box_7) % 7 != 0:\n        # Increase the lollipops count by 4 each time\n        lollipops += 4\n\n    # Return the total number of lollipops\n    return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    max_long_tubes = total_balls // 8  # The maximum number of long tubes possible\n\n    # Iterate to find the correct number of long tubes such that the remaining balls can be filled in short tubes\n    for long_tubes in range(max_long_tubes, -1, -1):\n        remaining_balls = total_balls - (long_tubes * 8)\n        if remaining_balls % 5 == 0:  # If the remaining balls can be filled in short tubes\n            return long_tubes\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n    \n    # The common difference \"d\" can be found using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    common_difference = (ninth_term - third_term) / (9 - 3)\n    \n    # Now we need to find the first term using the third term and the common difference\n    first_term = third_term - (3 - 1) * common_difference\n    \n    # Finally, calculate the 11th term based on the first term and common difference\n    eleventh_term = first_term + (n - 1) * common_difference\n    \n    return int(eleventh_term)\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let x be the original number of bracelets Felicia had.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Felicia sold 3/5 of her bracelets, denoting the amount sold as f_sold    \n    f_sold = (3/5) * x\n    # Janice bought 2/5 of the bracelets that Felicia sold, denoting the amount bought as j_bought\n    j_bought = (2/5) * f_sold\n    \n    # After selling and buying, Felicia has (2/5) * x bracelets left\n    # After buying, Janice has 96 + j_bought bracelets\n    # The new ratio of Felicia's to Janice's bracelets is 5:7\n    # 5:7 ratio implies 5/12 * total = Felicia's and 7/12 * total = Janice's bracelets after transaction\n    equation = Eq((2/5) * x / (96 + j_bought), 5/7)\n\n    # Solving the equation for x\n    x_value = solve(equation, x)\n\n    # The amount Janice bought from Felicia is j_bought based on the solved value of x\n    j_bought_value = j_bought.subs(x, x_value[0])\n\n    return int(j_bought_value)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    return sum(n**3 for n in numbers)\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 0.15\n    discount_amount = original_price * discount_percentage\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the number that 4.32 was multiplied by to get the incorrect result.\n    # Incorrect result is then 432x\n    # Correct result is 4.32x\n    # Incorrect result - Correct result = 2138.4\n    # Thus, 432x - 4.32x = 2138.4\n    # This simplifies to 427.68x = 2138.4\n    # Solve for x: x = 2138.4 / 427.68\n    x = 2138.4 / 427.68\n    \n    # Calculate the correct result: 4.32 * x\n    correct_result = 4.32 * x\n    return correct_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    from math import gcd\n    # Calculate the differences between the numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n\n    # Find the greatest common divisor of the differences\n    # The divisors of this gcd will be the possible values for A\n    gcd_value = gcd(diff1, diff2)\n\n    # Find all the divisors of gcd_value\n    divisors = set()\n    for i in range(1, int(gcd_value ** 0.5) + 1):\n        if gcd_value % i == 0:\n            divisors.add(i)\n            divisors.add(gcd_value // i)\n\n    # Calculate the sum of the possible values of A, excluding 1\n    # because we are looking for a divisor A other than 1\n    ans = sum(divisors) - 1\n    return ans\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(5 * boys + 3 * girls, 448)     # Total candies shared\n    equation2 = Eq(girls, boys + 8)               # 8 more girls than boys\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of milk candies, y be the original number of fruit candies\n    x, y = symbols('x y')\n\n    # Given the original ratio 7:9\n    equation1 = Eq(7*y, 9*x)\n\n    # After eating 8 milk candies, the ratio changes to 2:3\n    equation2 = Eq(2*(y), 3*(x - 8))\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The number of milk candies at the beginning\n    milk_candies_beginning = solutions[x]\n\n    return milk_candies_beginning\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if (B % 3 == 1) and (B % 5 == 2):\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_difference = 2008 - 1996\n    \n    # Calculate the age of mum when grandmother was 80\n    age_of_mum_when_grandmother_was_80 = 40 + age_difference\n    \n    # Calculate age of grandmother when mum was born\n    age_of_grandmother_when_mum_born = 80 - age_of_mum_when_grandmother_was_80\n    \n    return age_of_grandmother_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # The price of one lemonade bottle\n    lemonade_price = 4\n    # The price of one \"1000 Plus\" bottle\n    plus_price = 7\n    # Total income\n    total_income = 2012\n    # Total number of bottles\n    total_bottles = 350\n\n    # We want to minimize the number of \"1000 Plus\" bottles, so we start by selling only lemonade\n    # We will then increment the \"1000 Plus\" bottles one by one until we match the income\n    # We use the maximum number of lemonade bottles that could have been sold\n    max_lemonade_sold = total_income // lemonade_price\n\n    # Start with selling all as lemonade, which is impossible but gives us a starting point to decrement\n    lemonade_sold = max_lemonade_sold\n    plus_sold = 0\n\n    # Now we decrement lemonade bottles and increment \"1000 Plus\" bottles one by one\n    while lemonade_sold >= 0:\n        if lemonade_price * lemonade_sold + plus_price * plus_sold == total_income:\n            # Check if total bottles sold does not exceed the initial amount\n            if lemonade_sold + plus_sold <= total_bottles:\n                return plus_sold\n        plus_sold += 1\n        lemonade_sold -= (plus_price - lemonade_price) // lemonade_price\n\n    return None\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    friends = 60 // 4\n    apples_per_friend = 4 + 1\n    total_apples = friends * apples_per_friend\n    \n    return total_apples\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Worst case: Yohan takes all red and black socks before taking any white sock.\n    max_red_and_black_socks = 10 + 10\n\n    # To guarantee a pair of white socks, he needs to take one more after that.\n    max_socks_for_white_pair = max_red_and_black_socks + 1\n\n    return max_socks_for_white_pair\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups with 6 pupils and y be the number of groups with 4 pupils\n    # We then have two equations based on the problem statement:\n    # 6x + 4y = 112 (total number of students)\n    # x + y = 24 (total number of groups)\n    \n    # We'll solve these equations for x and y\n    for x in range(25):\n        y = 24 - x\n        if 6*x + 4*y == 112:\n            return x\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers is 60.\n    avg_three = 60\n    sum_three = avg_three * 3  # Sum of the first three numbers\n\n    # Average of four numbers is 90.\n    avg_four = 90\n    sum_four = avg_four * 4  # Sum of all four numbers\n\n    # The fourth number is the difference between sum_four and sum_three.\n    fourth_number = sum_four - sum_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # Since A, B, and C are distinct, we loop through all possible values\n    for A in range(1, 10):  # A can't be 0 as it's a 3-digit number\n        for B in range(10):  # B can be from 0 to 9\n            for C in range(10):  # C can be from 0 to 9\n                if A != B and B != C and A != C:  # A, B, C must be different\n                    # Since the question is simply find the value of ABC, we don't have an equation to solve.\n                    # We found distinct digits for A, B, and C, we return the 3-digit number they form.\n                    return 100 * A + 10 * B + C\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen the fisher traded 3 fish for 2 rabbits\n    fish_to_rabbit_ratio = 3 / 2\n\n    # Oscar traded 3 rabbits for 4 packs of wheat\n    rabbit_to_wheat_ratio = 4 / 3\n\n    # Calculate how many fish represent 1 pack of wheat by multiplying the ratios\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Determine how many fish Owen should give Dennis for 8 packs of wheat\n    fish_for_eight_wheat = fish_to_wheat_ratio * 8\n    \n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = 3 * 1.60 + 2 * 0.62 + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    handbag_after_discount = 428\n    handbag_discount_rate = 0.20\n\n    # Calculate the price of the handbag before the discount\n    handbag_before_discount = handbag_after_discount / (1 - handbag_discount_rate)\n\n    purse_discount_rate = 0.28\n\n    # Given that the total discount is $121, find the discount received for the purse\n    total_discount = 121\n    purse_discount = total_discount - (handbag_before_discount - handbag_after_discount)\n\n    # Calculate the price of the purse before the discount\n    purse_before_discount = purse_discount / purse_discount_rate\n\n    return purse_before_discount\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            count += 1\n            i = i // 5\n    return count\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_distance = 25\n    climb_per_day = 4\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    current_distance = 0\n    days = 0\n\n    while True:\n        days += 1\n        current_distance += climb_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    \n    total_dancing_sessions = times_per_week * weeks\n    \n    return total_dancing_sessions\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Jogging time from 6:30 AM to 7:00 AM is 0.5 hours.\n    # Walking time from 7:00 AM to 8:00 AM is 1 hour.\n\n    # Jogging speed is 6 miles per hour.\n    # Walking speed is 5 miles per hour.\n\n    # Total distance traveled is the sum of jogging distance and walking distance.\n    jogging_distance = 6 * 0.5  # Speed multiplied by time.\n    walking_distance = 5 * 1    # Speed multiplied by time.\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    # From the given series, numerator starts from 1 and increments by 1\n    # Denominator starts from 6 and increments by 1 for each subsequent term\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol for original amount of money Elvin had\n    original_amount = symbols('original_amount')\n\n    # Elvin spent $120 on a chair, so the remainder is original_amount - 120\n    # He then spent 40% of the remainder on a jacket, so expenditure on jacket is 0.4 * (original_amount - 120)\n    # He finally had 30% of his original amount of money left\n    # So, original_amount - (120 + 0.4 * (original_amount - 120)) = 0.3 * original_amount\n\n    equation = Eq(original_amount - (120 + 0.4 * (original_amount - 120)), 0.3 * original_amount)\n\n    # Solving the equation\n    solutions = solve(equation, original_amount)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(6, 10)\n    return ans\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Calculate the minimum number of books in the layer with the most books\n    # using the Pigeonhole Principle\n    books_in_top_layer = (total_books + layers - 1) // layers\n\n    return books_in_top_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books_before, total_cost_before = symbols('books_before total_cost_before')\n    \n    # Equation for the total cost before buying 2 additional books\n    equation1 = Eq(total_cost_before, books_before * 3.50)\n    \n    # Equation for the total cost after buying 2 additional books\n    equation2 = Eq(total_cost_before + 2 * 6, (books_before + 2) * 4)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (books_before, total_cost_before))\n    \n    # Number of books before the 2 additional ones\n    books_before = solution[books_before]\n    \n    # Total number of books after buying 2 additional ones\n    total_books = books_before + 2\n\n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    hundreds = [1, 2, 3]  # Possible hundreds place digits\n    tens_and_units = [0, 1, 2, 3]  # Possible tens and units place digits\n\n    count = 0\n    for h in hundreds:  # Iterate over hundreds place\n        for t in tens_and_units:  # Iterate over tens place\n            if t != h:  # Tens digit must be different from hundreds place digit\n                for u in tens_and_units:  # Iterate over units place\n                    if u != t and u != h:  # Units digit must be different from tens and hundreds place digits\n                        count += 1  # Valid combination found\n\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    terms = 0\n    current_term = first_term\n    while current_term > 0:\n        terms += 1\n        current_term += common_difference\n    return terms\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    total_sum = 0\n    for i in range(20):\n        if i % 2 == 0:  # even index, A's position\n            total_sum += int('A')\n        else:\n            total_sum += 2  # odd index, '2'\n\n    A_value = (80 - 20) // 10  # subtract the sum of '2's and divide by the number of A's\n    return A_value\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_in_kg = 1.2\n    piece_weight_in_g = 30\n\n    total_pieces = (weight_in_kg * 1000) / piece_weight_in_g\n\n    return int(total_pieces)\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    # To maximize the product abc with a fixed sum (a+b+c), we should make a, b, and c as close to each other as possible.\n    # Dividing the sum 31 by 3 gives us roughly 10.33 for each number.\n    # Since they must be integers, we distribute the sum such that a, b, c are as close as possible to 10.33.\n\n    # Let's assume a ≤ b ≤ c and find the integers close to 10.33 with a sum of 31.\n    # a and b should be smaller or equal to 10, and c should be larger or equal to 11.\n\n    # The closest values we can choose are a = 10, b = 10, c = 11.\n    # This gives us the sum 10 + 10 + 11 = 31, which matches the condition.\n    # abc = 10 * 10 * 11\n    a = 10\n    b = 10\n    c = 11\n    return a * b * c\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Convert liters to quarts (1 liter = 1.056688 quarts)\n    coke_in_quarts = 2.5 * 1.056688\n    # Cup capacity in quarts\n    cup_capacity = 0.5\n    # Number of cups Hannah can drink\n    cups_of_coke = coke_in_quarts / cup_capacity\n    # Round to the nearest integer\n    return round(cups_of_coke)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    if len({A, 2, 0, C, E, F}) == 6:  # All digits are different\n                        number1 = int(f\"5{A}20{C}{E}{F}\")\n                        number2 = int(f\"{E}{F}A20{C}\")\n                        if 5 * number1 == 6 * number2:\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time spent jogging: 7:30 - 6:30 = 1 hour\n    # Time spent walking: 9:30 - 7:30 = 2 hours\n    \n    # Speed while jogging = 6 miles per hour\n    jogging_speed = 6\n    # Speed while walking = 5 miles per hour\n    walking_speed = 5\n\n    # Distance covered while jogging = speed * time\n    jogging_distance = jogging_speed * 1  # 1 hour\n    # Distance covered while walking = speed * time\n    walking_distance = walking_speed * 2  # 2 hours\n    \n    # Total distance covered = distance jogging + distance walking\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n    \n    initial_condition = Eq(angel, 5/6 * belle)\n    final_condition = Eq(angel - 58, 0.75 * belle)\n\n    solutions = solve((initial_condition, final_condition), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current age of dad and son\n    dad, son = symbols('dad son')\n\n    # Equation for 6 years ago: Dad's age was 5 times son's age\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    \n    # Equation for this year: Sum of dad's and son's age is 78\n    equation2 = Eq(dad + son, 78)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (dad, son))\n    \n    return solutions[dad]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Rachel and Alice's candy\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they would have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If they both eat 8 pieces of candy, Rachel has 3 times as many left as Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total original amount of candy\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, money = symbols('children money')\n\n    equation1 = Eq(money + 20, 70 * children)\n    equation2 = Eq(money - 60 * children, 210)\n\n    solutions = solve((equation1, equation2), (children, money))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for v1 in range(1, 10):\n        for v2 in range(1, 10):\n            for v3 in range(1, 10):\n                if v1 + v2 + v3 == 10 and len(set([v1, v2, v3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 for permutations of the vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment_received = 120.75\n\n    new_balance = account_balance + payment_received\n\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2/3/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('15/4/2023', '%d/%m/%Y')\n\n    num_days = (end_date - start_date).days + 1\n\n    return num_days\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10):  # Single digit for '9' to be appended at the start making it a two digit number\n        number = int(str(i) + '9')\n        new_number = int('9' + str(i))\n        if new_number == 4 * number:\n            return number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    total_students = 7\n    fixed_positions = 2  # Eddie and Avril\n\n    # Since Eddie is always on the left end and Avril is next to Eddie,\n    # there are 5 students left to arrange in the remaining 5 positions.\n    ways_to_arrange_other_students = factorial(total_students - fixed_positions)\n\n    return ways_to_arrange_other_students\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Define the number of gloves for each type. Their order does not matter since Dilly can't distinguish hands.\n    blue_gloves = 1 + 3  # Left-hand and Right-hand\n    green_gloves = 2 + 4  # Left-hand and Right-hand\n\n    # Use the Pigeonhole Principle by taking one more than the number of gloves of one color.\n    # Taking an extra glove ensures that there is at least one pair of gloves with the same color.\n    # By worst-case scenario, Dilly needs to take all gloves of one color and one from the other.\n\n    return blue_gloves + 1  # Taking all blue gloves plus one green guarantees a matching pair.\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    percentage_increase = 45  # percentage increase\n\n    increased_price = original_price * (1 + percentage_increase / 100)\n\n    return increased_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean_value = 6\n    total_numbers = 8\n\n    # The sum of all numbers\n    total_sum = mean_value * total_numbers\n\n    # The sum of known numbers\n    known_sum = sum(known_numbers)\n\n    # The missing number is the difference between total_sum and known_sum\n    missing_number = total_sum - known_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Initial conditions and the change of conditions\n    initial_interval = 3\n    new_interval = 5\n    total_circumference = 300\n    holes_dug = 30\n    \n    # Calculate the distance covered with initial interval\n    distance_covered = initial_interval * holes_dig\n    \n    # Calculate the remaining distance to be covered\n    remaining_distance = total_circumference - distance_covered\n    \n    # Calculate the number of additional holes required with new interval\n    additional_holes = remaining_distance / new_interval\n    \n    # Return the ceiling of additional_holes since you can't dig a fraction of a hole\n    from math import ceil\n    return ceil(additional_holes)\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_options = 2\n    sauce_options = 3\n    topping_options = 2\n\n    ans = pasta_options * sauce_options * topping_options\n\n    return ans\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Function to calculate factorial\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Function to calculate combination (nCr)\n    def combination(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Calculate the total number of ways to reach step 5\n    # Nelson can reach the 5th step by [1,1,1,1,1], [1,1,1,2], [1,1,2,1], [1,2,1,1], [2,1,1,1]\n    ways_to_5th = combination(4, 0) + combination(3, 1) + \\\n                   combination(3, 1) + combination(3, 1) + combo(3, 1)\n    \n    # Calculate the total number of ways to reach from step 5 to step 10\n    # Nelson can reach the 10th step from the 5th step by [1,1,1,1,1], [1,1,1,2], [1,1,2,1], [1,2,1,1], [2,1,1,1], [2,2,1], [2,1,2], [1,2,2]\n    ways_from_5th_to_10th = combination(5, 0) + 4 * combination(4, 1) + 3 * combination(3, 1)\n    \n    # Total ways to climb the stairs\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n    \n    return total_ways\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    total = 0\n    for i in range(1, 16):\n        total += i * (16 - i)\n    return total\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    i = 1\n    while True:\n        if i % 3 == 1 and i % 4 == 3 and i % 5 == 4:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from itertools import permutations\n\ndef evaluate_expression(brackets):\n    expressions = [f\"{brackets[0]}15+5*5+15{brackets[1]}-6+7\",\n                   f\"{brackets[0]}15+5{brackets[1]}*5+15-6+7\",\n                   f\"15{brackets[0]}+5*5+15{brackets[1]}-6+7\",\n                   f\"15{brackets[0]}+5*5+15-6{brackets[1]}+7\",\n                   f\"{brackets[0]}15+5{brackets[1]}*5+15{brackets[0]}-6+7{brackets[1]}\"]\n    return max(eval(expr) for expr in expressions)\n\ndef solution():\n    bracket_pairs = list(permutations([\"(\", \")\", \"(\", \")\"], 4))\n    max_value = max(evaluate_expression(pair) for pair in bracket_pairs)\n    return max_value\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_per_page = 9  # 1 through 9 use one digit\n    total_digits = 792\n    num_pages = 0\n    current_digit_length = 1\n\n    while total_digits > digits_per_page * current_digit_length:\n        total_digits -= digits_per_page * current_digit_length\n        num_pages += digits_per_page\n        if num_pages >= 10 ** (current_digit_length) - 1:\n            current_digit_length += 1\n            digits_per_page *= 10\n\n    # Add the remaining pages\n    num_pages += total_digits // current_digit_length\n    return num_pages\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    ways = 0\n    for i in range(1, 1000):\n        if i <= 1000 - i:\n            ways += 1\n        else:\n            break\n    return ways\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Since the numbers are forming an arithmetic sequence,\n    # we can find the common difference and use it to find the 100th term.\n    # Here, the 8th value is 44 and the 9th value is 49. \n    # So, the common difference is 49 - 44 = 5.\n\n    common_difference = 5\n\n    # To find the 100th term, we can use the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n\n    # We can calculate the first term by working backwards from the 7th term:\n    # first_term = 7th_term - 6 * common_difference\n    # 7th_term is 39\n    first_term = 39 - (7 - 1) * common_difference\n\n    # Now we can find the 100th term\n    nth = 100\n    nth_term = first_term + (nth - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    # Average score of Ivan in 5 assignments\n    ivan_average = 80\n    # Total score of Ivan in 5 assignments\n    ivan_total = ivan_average * 5\n\n    # Billy's average in the first 4 assignments\n    billy_average_first_4 = 89\n    # Total score of Billy in the first 4 assignments\n    billy_total_first_4 = billy_average_first_4 * 4\n\n    # Billy's required overall average score after 5 assignments (10 more than Ivan)\n    billy_required_overall_average = ivan_average + 10\n    # Total required score for Billy after 5 assignments to achieve the required average\n    billy_required_total = billy_required_overall_average * 5\n\n    # Score Billy needs on the 5th assignment\n    score_needed_fifth_assignment = billy_required_total - billy_total_first_4\n\n    return score_needed_fifth_assignment\n    \nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 1260 and get the powers of the prime factors\n    prime_factors = factorint(1260)\n    \n    # Find the smallest power that we need to make each prime factor power even\n    m = 1\n    for prime, power in prime_factors.items():\n        if power % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = (2 * peaches) + 5\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    remainder_when_divided_by_4 = 3\n    remainder_when_divided_by_7 = 3\n    \n    for i in range(1, 28):\n        if (4 * i + remainder_when_divided_by_4) % 7 == remainder_when_divided_by_7:\n            ans = (4 * i + remainder_when_divided_by_4) % 28\n            return ans\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm_of_8_and_11 = 88  # Least common multiple of 8 and 11 is 88\n    possible_number = lcm_of_8_and_11 + 6  # The number that when divided by 8 or 11 leaves remainder 6\n    \n    # Check if it's a two-digit number\n    if 10 <= possible_number < 100:\n        return possible_number\n    else:\n        return \"No two-digit number satisfies the condition.\"\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_cost = 151.25\n    chair_cost = 24.15\n    total_cost = table_cost + chair_cost\n    return total_cost\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # The ones digit in 9^5 will be the same as the ones digit in 9^(any power ending in 5),\n    # because the ones digit in powers of 9 cycle through a pattern (1, 9, 81, 729, ...) which is (1, 9, 1, 9, ...)\n    # since only the last digit matters in 81 and 729 for this pattern.\n    # Therefore, the ones digit in 999^99 is the same as the ones digit in 9^(99 mod 4) because 4 is the cycle length.\n    cycle_length = 4\n    power_mod_cycle = 99 % cycle_length\n    \n    # If power_mod_cycle == 0, it means that the ones digit should be that of 9^4 which is 1 from the pattern (since 9^4=6561)\n    # If power_mod_cycle != 0, calculate 9^(power_mod_cycle) to get the correct ones digit.\n    if power_mod_cycle == 0:\n        ones_digit = 1\n    else:\n        ones_digit = pow(9, power_mod_cycle) % 10 # get the last digit\n    \n    return ones_digit\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # Reverse Step (5): Add 50 to the result\n    result += 50\n    # Reverse Step (4): Since the day of his birth is added twice, we divide by 2 to undo this step\n    day = (result % 100) // 2\n    # Reverse all operations before step (4)\n    result = (result - 2 * day) // 50\n    # Reverse Step (3): Divide by 50\n    # Reverse Step (2): Subtract 1\n    result -= 1\n    # Reverse Step (1): Divide by 4 to get the month\n    month = result // 4\n    \n    # Check if day or month are out of valid bounds for a birth date\n    if day < 1 or day > 31 or month < 1 or month > 12:\n        raise ValueError(\"Invalid result for a birthday\")\n    \n    # Combine month and day into a birthdate string format 'month/day'\n    birthday = f\"{month}/{day}\"\n    return birthday\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_away\n    \n    return remaining_stickers\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the sum of the value of the other five ponies\n    x = symbols('x')\n\n    # Average value rise by £10,000 in each stable means:\n    # Small stable: (x / 5) + 10,000 = (x + 250,000) / 6\n    # Large stable: (x / 3) + 10,000 = (x - 250,000) / 2\n    eq1 = Eq((x / 5) + 10000, (x + 250000) / 6)\n    eq2 = Eq((x / 3) + 10000, (x - 250000) / 2)\n\n    # Solve the equations\n    total_value = solve((eq1, eq2), (x))\n\n    # Rein Beau is worth £250,000, so we add that to the total value of the other five ponies\n    total_value = total_value[x] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total = sugar + water\n\n    concentration = (sugar / total) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    total = 60\n    # Since they are consecutive numbers, we can express them as n, n+1, and n+2\n    # Their sum would then be: n + (n + 1) + (n + 2)\n    # 3n + 3 = total\n    # Solve for n\n    n = (total - 3) / 3\n    # The largest number is n+2\n    largest_number = n + 2\n    return int(largest_number)\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Consider the group of 4 pupils who want to stand together as one unit.\n    # There are now 5 units to arrange (4 individual pupils + 1 group of 4 pupils).\n    units = 5\n\n    # Calculate the number of ways to arrange these 5 units.\n    unit_arrangements = factorial(units)\n\n    # Within the group of 4 pupils, calculate the number of ways to arrange them among themselves.\n    group_arrangements = factorial(4)\n\n    # The total number of different arrangements is the product of unit arrangements and group arrangements.\n    total_arrangements = unit_arrangements * group_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n    lamb_quantity = 7\n    beef_quantity = 30\n\n    total_cost = (lamb_price_per_kg * lamb_quantity) + (beef_price_per_kg * beef_quantity)\n    \n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    master, apprentice = symbols('master apprentice')\n\n    # 1 master and 3 apprentices take 4 days\n    equation1 = Eq(1 * master + 3 * apprentice, 1/4)\n    # 2 masters and 1 apprentice take 3 days\n    equation2 = Eq(2 * master + 1 * apprentice, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (master, apprentice))\n\n    # Calculate time taken by 1 apprentice to complete the task (apprentice's work rate * time = 1 complete task)\n    time_for_apprentice_alone = 1 / solutions[apprentice]\n\n    return time_for_apprentice_alone\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g represent the number of gold medals and s the number of silver medals.\n    # Hence, we have two equations:\n    # 5g + 4s = 331 (total points for medals)\n    # g + s = 80 (total number of medals)\n\n    # From the second equation, we can express s in terms of g: s = 80 - g\n    # Substituting s in the first equation:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    # g = 11\n\n    gold_medals = 331 - 320\n    return gold_medals\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_spectators = symbols('total_spectators')\n\n    children = (1/3) * total_spectators\n    remainder = total_spectators - children\n    men = (5/8) * remainder\n    women = 80\n\n    equation = Eq(total_spectators, children + men + women)\n\n    ans = solve(equation, total_spectators)[0]\n\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    elephant_pos = 10\n    rabbit_pos = 9\n    dolls_between = 5\n\n    # Total dolls = position of elephant from left + position of rabbit from right\n    #               - dolls between - 1 (because we counted the elephant doll twice)\n    total_dolls = elephant_pos + rabbit_pos + dolls_between - 1\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * ((11/52)/(11/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    num_students = 0\n    for girls in range(1, 1000, 2):  # Start with one girl and increase in squares, skipping even numbers\n        boys = girls + 2  # Boys form the square layer outside the girls\n        num_boys = boys ** 2\n        num_girls = girls ** 2\n        if num_boys - num_girls == 32:  # Check the condition\n            num_students = num_boys + num_girls  # Sum of both\n            break\n    return num_students\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Given the operation results, let's deduce the rule for the operation\n    # Based on the provided results, the operation ★ seems to take two numbers a★b and performs different operations depending on which is larger\n\n    # If the first number is larger or equal, it multiplies the two numbers: a★b = a * b (e.g., 6★3 = 18, but the given result is 15, so subtract 3, which is the second number)\n    # If the second number is larger, it seems to just use the second number: a★b = b (e.g., 2★5 = 5)\n\n    # Let's create a condition using the results we have to determine what happens when first number is larger or equal:\n    def operation_star(a, b):\n        if a >= b:\n            return a * b - b  # The pattern seems to be a*b - b\n        else:\n            return b\n    \n    # Now let's calculate 11★10 using the operation rule we deduced\n    return operation_star(11, 10)\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses and d be the original number of daisies\n    # Let m be the number of months after which there are 280 roses and 180 daisies\n    r, d, m = symbols('r d m')\n    \n    # The total number of flowers is constant\n    total_flowers_eq = Eq(r + d, 300)\n    # After m months, the number of roses and daisies will change\n    roses_eq = Eq(r + m, 280)\n    daisies_eq = Eq(d + m, 180)\n\n    # Solve the system of equations\n    solutions = solve((total_flowers_eq, roses_eq, daisies_eq), (r, d, m))\n\n    # a tuple (original roses, original daisies, months) is expected\n    return solutions[r]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 61))  # gets all prime numbers in the range [50, 60]\n    return sum(primes)\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given values for the 10th and 15th terms\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # Calculate common difference\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    # Calculate the first term (a1)\n    first_term = tenth_term - common_difference * (10 - 1)\n\n    # Calculate the 102nd term\n    nth_term = first_term + common_difference * (102 - 1)\n\n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n\n    chinese_and_comics = total_books - english_books\n    comics = chinese_and_comics // 3  # The number of comics is 1 part out of 3 parts in total (1 part comics, 2 parts Chinese books)\n\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_amount = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_amount = coffee_amount * (total_ratio / coffee_ratio)\n\n    return latte_amount\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_shots = accurate_shots + missed_shots\n\n    total_score = accurate_shots * score_per_accurate_shot\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculate each part of the expression separately and then combine\n\n    # Numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Denominator of the first complex fraction\n    denominator1 = (2/25)\n    # Calculation of the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n\n    # Numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Denominator of the second complex fraction\n    denominator2 = (8/3)\n    # Calculation of the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n\n    # Combine both complex fractions by addition\n    ans = complex_fraction1 + complex_fraction2\n\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    cost_per_kilogram = 11.4 / 0.6\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Since each child must get at least 1 apple, we subtract 8 from 50 to ensure this condition.\n    remaining_apples = 50 - 8\n\n    # We need to find the distribution so that the child with the most apples gets the least possible number.\n    # We start from the lowest distribution for the child with the most apples (in this case, 1 apple)\n    # and keep distributing the remaining apples to other children in an increasing order.\n\n    # Setting the initial least number of apples for the child with the most as 1\n    max_apples = 1\n\n    # Keep increasing the number of apples for the child with the most until we find a distribution\n    # satisfying the condition that all children have a different number of apples.\n    while True:\n        # Initialize apples for each child\n        apples_for_children = [max_apples]  # start with max_apples for the child with the most\n\n        # Calculate the sum of the arithmetic progression (without the first child)\n        # because we can view this as dividing the rest of the apples in increasing order\n        # with each child getting one more apple than the previous child\n        sum_of_sequence = sum(range(1, 8))  # 7 children receiving increasing numbers of apples\n\n        # Subtract sum of sequence from remaining apples to determine the lowest number of apples\n        # that can be distributed as per the arithmetic progression of increasing apples per child\n        lowest_distribution = remaining_apples - sum_of_sequence\n\n        # If the lowest possible distribution is greater than or equal to the rest of the children's apples,\n        # it means that we can distribute apples in increasing order (with a difference of 1 apple)\n        # starting from this lowest_distribution\n        # such that each child has a different count of apples.\n        if lowest_distribution >= 7:\n            # return the least possible number of apples the child with the most can get\n            return apples_for_children[0] + lowest_distribution  # add back the 1 initially assigned\n\n        # If we haven't found a valid distribution, increase the apples for the child with the most\n        max_apples += 1\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "import math\n\ndef solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = math.ceil(total_eggs / eggs_per_box)\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    total_distance = train_length + tunnel_length\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    # Loop for each possible number of terms in the summation (minimum 2 terms)\n    for num_terms in range(2, 9):\n        # Loop through all combinations of `num_terms - 1` numbers adding up to 8 - 1\n        for i in range(1, 8):\n            for j in range(i, 8):\n                if num_terms == 2 and i + j == 8:\n                    count += 1\n                elif num_terms == 3 and i + j < 8:\n                    for k in range(j, 8):\n                        if i + j + k == 8:\n                            count += 1\n                elif num_terms == 4 and i + j < 8:\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            if i + j + k + l == 8:\n                                count += 1\n                # Continue this pattern for num_terms up to 8\n                elif num_terms == 5 and i + j < 8:\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                if i + j + k + l + m == 8:\n                                    count += 1\n                elif num_terms == 6 and i + j < 8:\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                for n in range(m, 8):\n                                    if i + j + k + l + m + n == 8:\n                                        count += 1\n                elif num_terms == 7 and i + j < 8:\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                for n in range(m, 8):\n                                    for o in range(n, 8):\n                                        if i + j + k + l + m + n + o == 8:\n                                            count += 1\n                elif num_terms == 8 and i + j < 8:\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                for n in range(m, 8):\n                                    for o in range(n, 8):\n                                        for p in range(o, 8):\n                                            if i + j + k + l + m + n + o + p == 8:\n                                                count += 1                                        \n    return count\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    percentage1 = 50 / 100\n    percentage2 = 20 / 100\n    amount = 350\n\n    result = percentage1 * percentage2 * amount\n\n    return result\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # The maximum number of men who don't wear bow ties nor spectacles\n    # would be total men minus the maximum number of men who wear either.\n    # The sum of the men wearing bow ties and spectacles must consider the overlap\n    # To prevent double counting, we find the minimum number of men who could\n    # be wearing both bow ties and spectacles, which is simply the amount that\n    # the sum of the two categories exceeds the total number of men.\n    # Subtracting this from the total gives the greatest number that are not wearing either.\n    max_overlap = max(bow_ties + spectacles - total_men, 0)\n    ans = total_men - bow_ties - spectacles + max_overlap\n\n    return ans\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1/3) * 414\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # If we are to give each of the 5 children different numbers of apples and everyone gets at least one,\n    # we start with the minimum number of apples that the first four children can get: 1, 2, 3, 4.\n    # Then we find out the maximum number of apples the fifth child can get.\n    # Total number of apples is 19.\n\n    # Minimum apples given to first four children: 1 + 2 + 3 + 4 = 10.\n    min_apples_given = sum(range(1, 5))\n    # Maximum number of apples the fifth child can get: Total number - minimum to others.\n    max_apples_fifth_child = 19 - min_apples_given\n\n    return max_apples_fifth_child\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Treat Ali and Bala as a single entity since they must stand together, plus the other 3 individuals, we have 4 \"entities\" to arrange\n    entity_count = 4\n    \n    # Ali and Bala themselves can be arranged in 2! ways since they can swap places\n    ali_bala_arrangements = factorial(2)\n    \n    # Dan must stand at the furthest left, so we have (entity_count - 1)! ways to arrange the remaining entities\n    other_arrangements = factorial(entity_count - 1)\n    \n    # Total number of arrangements is the product of ali_bala_arrangements and other_arrangements\n    total_arrangements = ali_bala_arrangements * other_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen gives 3 fishes for 2 rabbits\n    # Hence, the ratio of fish to rabbit is 3:2\n\n    # Oscar gives 3 rabbits for 4 packs of wheat\n    # Hence, the ratio of rabbit to wheat is 3:4\n\n    # Now we need to find the continued ratio of fish to wheat\n    # Number of fishes per pack of wheat = (fishes for rabbits) * (rabbits for wheat)\n    fishes_per_wheat = (3 / 2) * (3 / 4)\n\n    # Owen needs to give fishes for 8 packs of wheat\n    fishes_for_8_wheat = fishes_per_wheat * 8\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    from math import gcd\n    \n    ans = gcd(16, 36)\n    \n    return ans\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    def count_digits(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += len(str(i))\n        return count\n\n    ans = count_digits(140)\n    return ans\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # Draw all of one color, then all of another color, then one more to ensure the third color\n    max_same_color_balls = max(15, 9, 6)\n    # After drawing all balls of the other two colors, we draw one more to ensure the third color\n    balls_needed = (15 + 9 + 6) - max_same_color_balls + 1\n    return balls_needed\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    return sum(sequence)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average_students = total_students / num_classes\n    return average_students\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Serene's incorrect subtraction: (10a + b) - (53) = 36\n    # Where a and b are the tens and ones digits of the minuend respectively\n    # The correct subtraction should be: (10a + b) - (32)\n    # To find the correct difference, we need to solve for a and b.\n\n    # Incorrect subtrahend is 53, and the incorrect difference is 36.\n    incorrect_subtrahend = 53\n    incorrect_difference = 36\n\n    # The incorrect minuend can be calculated by adding the incorrect difference to the incorrect subtrahend.\n    incorrect_minuend = incorrect_subtrahend + incorrect_difference\n\n    # The correct subtrahend should be 32 instead of 53 (3 at tens place instead of 5 and 2 at ones place instead of 3).\n    correct_subtrahend = 32\n    \n    # The correct difference is the incorrect minuend minus the correct subtrahend.\n    correct_difference = incorrect_minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    all_permutations = list(permutations(digits, 3))  # Get all permutations of length 3\n    return len(all_permutations)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')    \n    income = 120000\n    tax1 = 0.06 * 50000\n    tax2 = (0.06 + T / 100) * (income - 50000)\n    \n    tax_equation = Eq(tax1 + tax2, 10000)\n    T_value = solve(tax_equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Smallest possible difference would be when one number is the smallest 5 digit number\n    # and the other is the largest 5 digit number formed by the remaining digits.\n    \n    # To get the smallest 5-digit number, we use the smallest digits and set the smallest non-zero digit as the first digit\n    # To get the largest 5-digit number, we use the largest digits with the largest digit as the first digit\n    \n    # Smallest 5-digit number with distinct digits\n    smallest = 10234\n    \n    # Largest 5-digit number with distinct digits\n    largest = 98765\n    \n    # Calculate the difference\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    total_presents = 7\n    total_children = 5 \n\n    # Total ways to give presents without any conditions\n    total_ways = len(list(permutations(range(total_presents), total_children)))\n\n    # Now we need to subtract the cases where Richard and Kevin both don't get either the car or puzzle\n    # Let's assume car is present 0 and puzzle is present 1\n\n    # Ways where neither child gets car(0) or puzzle(1)\n    neither_ways = len(list(permutations(range(2, total_presents), total_children)))\n\n    # Number of ways to choose who is Richard and who is Kevin\n    richard_kevin_ways = 2\n\n    # Final answer\n    return total_ways - (neither_ways * richard_kevin_ways)\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    # Total distance to be covered by the train for complete traversal of the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Time taken to pass through the tunnel is total distance divided by speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # in pence\n    pounds_bought = 2\n    total_cost_in_pence = cost_per_pound * pounds_bought\n    total_paid_in_pence = 100  # £1 is 100 pence\n    change_in_pence = total_paid_in_pence - total_cost_in_pence\n    return change_in_pence\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import primerange, isprime\n\ndef solution():\n    for n in primerange(0, 10**6):\n        if all(isprime(x) for x in [n, n + 4, n + 6, n + 132, n + 250]):\n            return n\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n    \n    equation1 = Eq(rabbit2, rabbit1 + 2)\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.70)\n    \n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution in grams\n    concentration = 0.15  # concentration of sugar in the sugar solution\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    # Jack's speed (km per hour)\n    speed_jack = 15\n    # Rose's speed (km per hour)\n    speed_rose = 10\n    # The time they meet (hours)\n    time_meet = 10\n\n    # Relative speed between Jack and Rose (km per hour)\n    relative_speed = speed_jack - speed_rose\n\n    # Distance between Town A and Town B (km)\n    distance = relative_speed * time_meet\n\n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    # This solution leverages the difference of squares formula: a^2 - b^2 = (a - b)(a + b)\n    ans = 0\n    for i in range(2, 2021, 4):\n        ans += (i + 2)**2 - i**2  # (a + b)(a - b) with a = i + 2, b = i\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import Eq, solve, symbols\n    \n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    max_number = 5000\n    count_multiples_7 = max_number // 7\n    count_multiples_13 = max_number // 13\n    count_multiples_7_13 = max_number // (7 * 13)\n\n    ans = count_multiples_7 + count_multiples_13 - count_multiples_7_13\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    remainder = 48739 % 3\n    ans = (3 - remainder) % 3\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'SUCCESS'\n    total_perms = len(set(permutations(word)))\n\n    # Count permutations where two S's are next to each other\n    # This is done by treating the two S's as one entity\n    adjacent_s_perms = 0\n    for i in range(1, factorial(5) + 1):  # 5! permutations for other letters\n        for combination in permutations('ABCCCES', 7):\n            if 'SS' in ''.join(combination):\n                adjacent_s_perms += 1\n\n    # Total possible permutations - permutations with two S's next to each other\n    return total_perms - adjacent_s_perms\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n    boys = total_pupils - girls\n    ans = boys - teachers\n    return ans\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of days David worked\n    x = symbols('x')\n    \n    # David's work rate is 1/10 per day and Emma's work rate is 1/18 per day\n    # David worked for x days and Emma worked for (14 - x) days\n    # Total work done should be 1 (i.e., the complete journal)\n    equation = Eq((x / 10) + ((14 - x) / 18), 1)\n    \n    # Solve for x\n    days_david_worked = solve(equation, x)[0]\n    \n    # Calculate the number of days Emma worked\n    days_emma_worked = 14 - days_david_worked\n    \n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # Number of T-shirts Josephine could have bought with her initial amount of money\n    total_tshirts = 145\n    \n    # Number of T-shirts Josephine actually bought\n    bought_tshirts = 138\n    \n    # The money Josephine had left after buying the T-shirts\n    money_left = 56\n    \n    # Calculate the cost of one T-shirt\n    single_tshirt_cost = money_left / (total_tshirts - bought_tshirts)\n    \n    # Calculate the total money Josephine had initially\n    initial_money = bought_tshirts * single_tshirt_cost + money_left\n    \n    return initial_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n ** 2 * (n + 1) ** 2) // 4\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_cubes // sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # Formula for the average of an arithmetic sequence:\n    # average = (first_term + last_term) / 2\n    # We know the average is 119 and there are 14 terms.\n    # We also know that the terms are consecutive even numbers, so the difference is 2.\n    \n    # Rearrange the formula to solve for the first term:\n    # first_term = 2 * average - last_term\n    # Using the fact that the difference between consecutive terms is 2 and there are 14 terms:\n    # last_term = first_term + difference * (number_of_terms - 1)\n    \n    # Now we plug the value for last_term into the first equation:\n    # first_term = 2 * 119 - (first_term + 2 * (14 - 1))\n    # Simplify and solve for first_term:\n    # first_term = 238 - (first_term + 26)\n    \n    # Further simplify:\n    # 2 * first_term = 238 - 26\n    # 2 * first_term = 212\n    # first_term = 106\n    \n    first_term = (2 * 119) - (2 * (14 - 1))\n    return first_term\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    same_height_students = 4\n\n    # In the worst case scenario, each height from min to max-1 will have 3 students (just below the number required to guarantee 4 same height).\n    # So the number of different heights is max_height - min_height (because the max_height can now fit all the remaining students)\n    # Then the class size is the number of different heights times 3 (because each height has 3 students), plus the 4 students of the same height at the max value.\n    class_size = (max_height - min_height) * (same_height_students - 1) + same_height_students\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12 / 100\n    new_pay = original_pay + (original_pay * increase_percentage)\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Number of cuts needed to divide a wood into 5 sections\n    cuts_for_5_sections = 5 - 1\n    # Time taken for cuts to make 5 sections\n    time_for_5_sections = 12\n    # Time taken for one cut\n    time_per_cut = time_for_5_sections / cuts_for_5_sections\n    \n    # Number of cuts needed to cut the wood 5 times\n    cuts_to_cut_5_times = 5\n    # Time needed to make 5 cuts\n    time_to_cut_5_times = time_per_cut * cuts_to_cut_5_times\n    \n    return time_to_cut_5_times\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    # Let x be the number of each type of coin\n    # Each 2p coin is worth £0.02 and each 5p coin is worth £0.05\n    # Total value is x * (£0.02 + £0.05)\n    # We know that the total value in the bag is £1.26\n    # So the equation is: x * (£0.02 + £0.05) = £1.26\n    # Solve for x\n\n    total_value = 1.26\n    value_per_set_of_coins = 0.02 + 0.05\n    x = total_value / value_per_set_of_coins\n\n    # Since there are equal numbers of 2p and 5p coins,\n    # the total number of coins is 2 * x\n\n    num_coins = 2 * x\n    return int(num_coins)\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Find the pattern of ones digits in powers of 3\n    # 3^1 -> 3, 3^2 -> 9, 3^3 -> 7, 3^4 -> 1, and then the pattern repeats...\n    ones_digits = [3, 9, 7, 1]\n\n    # Since the pattern repeats every 4, we find the equivalent power mod 4\n    power_mod_4 = 2009 % 4\n\n    # Get the ones digit from the pattern\n    # We subtract 1 because the power_mod_4 is the index in the 0-indexed list `ones_digits`\n    ones_digit = ones_digits[power_mod_4 - 1]\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    boys_fraction = 5/9\n    adults_fraction = 2/5\n\n    # Let's say the total_people is 'x'.\n    # adults = (2/5) * x\n    # remaining_people = x - adults\n    # boys = (5/9) * remaining_people\n    # girls = remaining_people - boys\n    # But we know there are 36 girls.\n    # So, 36 = remaining_people - boys\n\n    # remaining_people = adults + boys + girls\n    # remaining_people in terms of x = x - adults_fraction * x\n    # boys in terms of remaining_people = boys_fraction * remaining_people\n\n    # Hence, we have the following equation in terms of 'x':\n    # girls = (1 - adults_fraction) * x - boys_fraction * ((1 - adults_fraction) * x)\n\n    total_people = girls / ((1 - adults_fraction) * (1 - boys_fraction))\n    \n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    number = 2 * 5  # Since the number needs to be even and a multiple of 5\n    while True:\n        square_root = number ** 0.5\n        if square_root.is_integer():  # Check if the number is a perfect square\n            return number\n        number += 2 * 5  # Increase by the smallest even multiple of 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_discount = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n    return round(senior_ticket_cost, 2)\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Create variables for the number of books each kid gets\n    kids = symbols('k1 k2 k3 k4', integer=True)\n\n    # Define the equation\n    equation = sum(kids) - 20\n\n    # Initialize the number of ways to 0\n    num_ways = 0\n\n    # Use solve method from sympy to generate combinations\n    solutions = solve(equation, dict=True)\n\n    # Count the number of solutions\n    for solution in solutions:\n        # Check if the values are non-negative as kids can't have negative books\n        if all(value >= 0 for value in solution.values()):\n            num_ways += 1\n\n    return num_ways\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days = 30\n    new_men = 2\n\n    work_per_man = days / men\n    total_work = work_per_man * men\n    new_days = total_work / new_men\n\n    return new_days\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    # Start with the smallest two-digit number (10) and iterate until we find\n    # a number that is divisible by both 3 and 7.\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    current_age = symbols('current_age')\n    future_age = current_age + 8\n    past_age = current_age - 4\n    \n    age_equation = Eq(future_age, 4 * past_age)\n    \n    solved_age = solve(age_equation, current_age)\n    \n    return solved_age[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_series = (num_terms * (first_term + last_term)) // 2\n    return sum_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Using the Law of Addition for independent events - simply add the number of ways of each mode of transport\n    ans = trains + cars + boats\n\n    return ans\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_to_finish = total_pages / pages_per_day\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "def solution():\n    from math import comb\n\n    # Each kid must get at least two books, so we distribute these first\n    # That's 2 books per kid, a total of 2*5 = 10 books\n    remaining_books = 30 - 2*5\n\n    # Now we need to divide the remaining 20 books among 5 kids\n    # This is a problem of distributing indistinguishable items (books) into distinguishable bins (kids)\n    # The formula for this is comb(n + k - 1, k - 1) where n is the items and k is the bins\n    # In our case, n=remaining_books, k=5\n\n    ans = comb(remaining_books + 5 - 1, 5 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    total_soup = symbols('total_soup')\n\n    # Mason's portion is 2/3 of Chewy's\n    equation1 = Eq(mason, (2/3) * chewy)\n    # Chewy's portion is 40% of Mike's\n    equation2 = Eq(chewy, 0.4 * mike)\n    # Mason's portion is 550ml less than Mike's\n    equation3 = Eq(mason, mike - 550)\n    # Total amount of soup\n    equation4 = Eq(mike + mason + chewy, total_soup)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mike, mason, chewy, total_soup))\n\n    # Getting the total amount of soup\n    total_soup_litres = solutions[total_soup] / 1000  # converting ml to litres\n    return total_soup_litres\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    # Number of intervals is one less than the number of trees\n    num_intervals = road_length // interval\n    \n    # Number of trees is one more than the number of intervals\n    num_trees = num_intervals + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jug, cup = symbols('jug cup')\n    \n    # 4 jugs and 5 cups cost $85\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    # 2 jugs and 2 cups cost $40\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    # All possible operations\n    operations = ['+', '-', '*', '/']\n\n    # Generate all possible combinations of operations\n    operation_permutations = list(permutations(operations))\n    \n    max_sum = 0\n    result_expressions = []\n\n    # Go through each operation combination\n    for op_combination in operation_permutations:\n        # Calculate the expression according to the current operations\n        expression1 = eval(f\"Fraction(1,2) {op_combination[0]} Fraction(1,9)\")\n        expression2 = eval(f\"Fraction(1,3) {op_combination[1]} Fraction(1,8)\")\n        expression3 = eval(f\"Fraction(1,4) {op_combination[2]} Fraction(1,7)\")\n        expression4 = eval(f\"Fraction(1,5) {op_combination[3]} Fraction(1,6)\")\n\n        # Calculate the total sum\n        current_sum = expression1 + expression2 + expression3 + expression4\n\n        # Check if this current sum is greater than our recorded max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result_expressions = [expression1, expression2, expression3, expression4]\n\n    # Sort the resulting expressions to find the second largest term\n    result_expressions.sort()\n\n    # The second largest term is the third term from the sorted list\n    second_largest = result_expressions[-2]\n\n    # Simplify the fraction and calculate A+B\n    simplified_fraction = second_largest.limit_denominator()\n    A = simplified_fraction.numerator\n    B = simplified_fraction.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Coins denominations in pence: 1p, 2p, 5p, 10p, 20p, and 50p\n    # To minimize the number of coins, we should use the largest coin smaller than the fare and then go down\n    fare = 44\n    # Available coins, sorted in descending order\n    coins = [50, 20, 10, 5, 2, 1]\n    \n    # Start with the largest coin and work our way down\n    remaining = fare\n    coin_count = 0\n    \n    for coin in coins:\n        # as long as the coin is larger than the remaining amount, go to a smaller coin\n        if coin > remaining:\n            continue\n        \n        # Add one coin of the current denomination  - as we need to include the coin Susan gives\n        coin_count += 1\n        # Calculate the new remaining value after giving the coin - this is the change to be returned\n        remaining = coin - remaining\n        \n        # Now give change with smallest number of coins\n        for smaller_coin in coins:\n            if remaining >= smaller_coin:\n                num_coins = remaining // smaller_coin\n                coin_count += num_coins\n                remaining -= smaller_coin * num_coins\n                \n        # As soon as we have no more change to give, we break the loop\n        if remaining == 0:\n            break\n        \n    return coin_count\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, S\n\n    x = symbols('x')\n    inequality = ((x + 3) / (2 * x + 5)) > S('0.505')\n\n    solutions = solve(inequality, x)\n\n    # Find the maximum number of wins before the weekend began\n    # We need to find the largest integer less than the solution\n    max_wins = int(solutions[0]) - 1\n\n    return max_wins\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent_money = 89.65\n    remaining_money = 20.35\n\n    initial_money = spent_money + remaining_money\n\n    return initial_money\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # When forming a right-angled triangle in a circle (a cyclic quadrilateral), \n    # the right angle must be subtended by a diameter of the circle.\n\n    # Since we have 12 points, there are 12 possible diameters.\n    # Each diameter can be chosen as the hypotenuse of a right-angled triangle.\n    # For each diameter, there are 12 - 2 = 10 points (excluding the endpoints of the diameter)\n    # that can serve as the third vertex of the triangle.\n    \n    # So, for each of the 12 diameters, 10 right-angled triangles can be formed.\n    # But since there are three vertices to each triangle and we don't want to overcount,\n    # we divide by 3 to get the unique triangles for each diameter.\n\n    num_triangles_per_diameter = 10 // 3\n    \n    # Total number of right-angled triangles\n    total_right_angled_triangles = 12 * num_triangles_per_diameter\n    \n    return total_right_angled_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    # Given 10th term (a10) and 15th term (a15)\n    a10 = 23\n    a12 = None  # The required 12th term\n    a15 = 38\n    n10 = 10\n    n15 = 15\n\n    # The common difference (d) is found by subtracting the two terms and dividing by the difference in their positions\n    d = (a15 - a10) / (n15 - n10)\n\n    # To find the 12th term (a12), we can use the formula: an = a10 + (n - n10) * d\n    n12 = 12\n    a12 = a10 + (n12 - n10) * d\n\n    return int(a12)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def term(n):\n        if n == 0:\n            return 1 / 29\n        num = n\n        den_start = n*(n-1)//2 + 1\n        den_end = den_start + n\n        return num / (den_start * den_end)\n\n    ans = sum(term(i) for i in range(8))\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    # Numbers of students in each class\n    students_A = 24\n    students_B = 36\n    students_C = 42\n\n    # Calculate the Greatest Common Divisor (GCD) for the three classes\n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([i if i % 4 in [0, 1] else -i for i in range(1, 201)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    days = 5\n    total_cost = children * daily_lunch_cost * days\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        total_points = points_correct * correct + points_incorrect * incorrect\n        if total_points == 76:\n            return correct\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3/8\n    total_weight = 16\n    ans = fraction * total_weight\n    return ans\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'cp' be the cost price of the product\n    cp = symbols('cp')\n\n    # Given:\n    # Marked price is 20% above cost price, so it is 1.2 * cp\n    # Product is sold at 90% of the marked price, so it is 0.9 * 1.2 * cp\n    # Profit is $120, which means selling price - cost price = 120\n\n    # Formulating the equation\n    equation = Eq(0.9 * 1.2 * cp - cp, 120)\n\n    # Solving the equation for cp\n    solution = solve(equation, cp)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep_fraction = 5/8\n    white_sheep_fraction = 1/4\n\n    black_sheep = total_sheep * black_sheep_fraction\n    white_sheep = total_sheep * white_sheep_fraction\n    brown_sheep = total_sheep - black_sheep - white_sheep\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_in_one_box = 25 // 5\n    balls_in_six_boxes = balls_in_one_box * 6\n    return balls_in_six_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n\n    solutions = solve(equation, x)\n    \n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    ways_different_socks = factorial(4)\n    \n    # For two different colored pairs of socks\n    ways_two_pairs = factorial(4) // (factorial(2) * factorial(2))\n    \n    return ways_different_socks, ways_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because it is a digit in two-digit number (tens place)\n        for b in range(10):  # b can be 0-9\n            if 10 * a + b + 10 * b + a + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    people = 4\n    handshakes = (people * (people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    total_points = 10\n    points_to_choose = 3\n\n    ans = comb(total_points, points_to_choose)\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    beth_sweets_after = 24 // 2\n    andre_sweets_after = beth_sweets_after + 6\n    \n    beth_sweets_before = beth_sweets_after - 4\n    \n    return beth_sweets_before\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To ensure winning, Anthea needs to make sure that she always leaves a \n    # multiple of 4 apples after her turn, forcing Ben to leave her in a \n    # winning position after his turn.\n    # This means in her first turn, she needs to take away a certain number \n    # of apples to leave 16 apples on the table (which is the highest \n    # multiple of 4 below 18).\n    # Therefore, she needs to take away 18 - 16 = 2 apples.\n\n    apples_to_remove = 18 % 4\n\n    # If the number of apples to remove is 0 (meaning 18 is already a multiple of 4), \n    # Anthea can take away any number from 1 to 3 and still maintain a winning strategy.\n    # Therefore, she should take 1, 2, or 3 apples but to follow the rules,\n    # since 0 apples cannot be taken, she should take 1 apple.\n    if apples_to_remove == 0:\n        apples_to_remove = 1\n\n    return apples_to_remove\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    eq1 = Eq(3 * table, 4 * chair)\n    eq2 = Eq(table, chair + 2)\n\n    mass_table = solve((eq1, eq2), (table, chair))\n\n    return mass_table[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    # Judy can stand on either of the 2 ends of the line\n    possible_positions_for_judy = 2\n    # The remaining 5 friends can stand in any order\n    arrangements_for_friends = math.factorial(5)\n    # Total arrangements = possible positions for Judy * arrangements for friends\n    total_arrangements = possible_positions_for_judy * arrangements_for_friends\n    return total_arrangements\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Initial condition: andre + beth = 24\n    equation1 = Eq(andre + beth, 24)\n\n    # After receiving sweets: andre + 4 = beth + 4 + 6\n    # Simplified to: andre - beth = 6\n    equation2 = Eq(andre - beth, 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's sweets after receiving 4 more from teacher\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    total_cost_for_5_bars = cost_per_bar * 5\n    return total_cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place after overtaking 5 cars,\n    # it means there was only one car that the driver did not overtake.\n    # So, the total number of cars the driver was behind initially was 5 (overtaken) + 1 (not overtaken).\n    # Since the driver was previously in the last place and then finished in second,\n    # we need to add the driver's car itself to the total number.\n    cars_behind_initially = 5 + 1\n    ferrari_driver_car = 1\n\n    total_cars_in_race = cars_behind_initially + ferrari_driver_car\n    return total_cars_in_race\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    result_after_operations = 2\n    initial_result = (result_after_operations * 12) + 6\n    return initial_result\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    younger_maths, younger_english = symbols('younger_maths younger_english')\n\n    # Equations based on the problem statement\n    equation1 = Eq(younger_maths + 10 + younger_english, 88)\n    equation2 = Eq(younger_english - 4, younger_maths)\n    equation3 = Eq(younger_english, younger_maths + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # The total sum of the four numbers is 4 * the average\n    total_sum_four_numbers = 4 * 130\n    \n    # The total sum of the remaining three numbers is 3 * their new average\n    total_sum_three_numbers = 3 * 110\n    \n    # The number which is removed is the difference between the two sums\n    removed_number = total_sum_four_numbers - total_sum_three_numbers\n    \n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for consistent units\n    first_light_cycle = 1 * 60  # 1 minute in seconds\n    second_light_cycle = 1.5 * 60  # 1.5 minutes in seconds\n\n    # LCM(Lowest Common Multiple) for the first two lights cycle in seconds\n    lcm_first_second = lcm(first_light_cycle, second_light_cycle)\n\n    # Since all the lights change every 9 minutes, convert this to seconds\n    total_cycle = 9 * 60  # 9 minutes in seconds\n\n    # Now we find the LCM of the total cycle and the LCM of the first two lights\n    lcm_all_lights = lcm(lcm_first_second, total_cycle)\n\n    # The third light cycle time in seconds is the LCM divided by 2 since it needs to match twice\n    # in one full cycle\n    third_light_cycle = lcm_all_lights // 2\n\n    return third_light_cycle // 60  # Convert back to minutes for the answer\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Leo wants to make sure there is always a multiple of 3 apples left\n    # after Mia's turn to force Mia into a losing position.\n    # To achieve this, Leo should make sure that after his first turn,\n    # the number of apples left is a multiple of 3.\n\n    # There are 14 apples initially.\n    # If Leo takes 1 apple, 13 are left (not a multiple of 3).\n    # If Leo takes 2 apples, 12 are left (which is a multiple of 3).\n\n    # Thus, Leo should take 2 apples in his first turn\n    # to ensure he can always leave a multiple of 3 apples after Mia's turn,\n    # leading him to victory.\n    leo_first_turn = 2\n    return leo_first_turn\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one gold ring be x\n    # Then the value of one silver spoon is 3x/4\n    # 12 silver spoons have value of 12*(3x/4) = 9x\n    # 6 gold rings have value of 6x\n    # According to the question, 9x (the value of 12 silver spoons) is three quarters of the value of 6 gold rings.\n    # Therefore, the value of 12 silver spoons (9x) is equal to the value of 6 gold rings (6x)\n    # We need to find the number of silver spoons that equals the value of 3 gold rings (3x)\n    # Let the number of silver spoons required be n\n    # So, n * (3x/4) = 3x\n    # n = (3x) / (3x/4)\n    # n = 4\n    # It takes 4 silver spoons to have the same value as 3 gold rings\n    n = 4\n    return n\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boys_more = 55\n    # Since students are arranged in a square array, let the side of the square formed by boys be n\n    # and that formed by girls be n - 2, as the outermost layer is boys and then girls are inside.\n    # Total boys = n^2\n    # Total girls = (n - 2)^2\n    # According to the question n^2 - (n - 2)^2 = 55\n    # Expanding and simplifying: n^2 - (n^2 - 4n + 4) = 55 => 4n - 4 = 55 => 4n = 59 => n = 14.75\n    # Since n must be an integer (you can't have a fraction of a side of students),\n    # and it is known that there's one more layer of boys than girls, n must be odd.\n    # We increment n to the next odd integer from the calculated value\n    n = 15\n    # Ensure that the difference in boys and girls matches the requirement\n    while (n**2 - (n-2)**2 != boys_more):\n        n += 2 \n\n    total_students = n**2 + (n-2)**2  # Total students in boys' square + girls' square\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    marker_cost = 3\n    paintbrush_cost = 1\n    \n    # Assume all items are paintbrushes\n    cost_if_all_paintbrushes = total_items * paintbrush_cost\n    remaining_cost = total_cost - cost_if_all_paintbrushes\n    \n    # Calculate the number of markers, considering the price difference\n    # between a marker and a paintbrush\n    num_markers = remaining_cost // (marker_cost - paintbrush_cost)\n\n    return num_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    overall_avg_weight = 65\n    male_teachers = 3\n    male_avg_weight = 75\n    female_avg_weight = 60\n\n    # Let's denote the number of female teachers as 'females' and their combined weight as 'female_weight'.\n    females = symbols('females')\n    female_weight = females * female_avg_weight\n\n    # The total weight of the male teachers is\n    male_weight = male_teachers * male_avg_weight\n\n    # The total weight of all the teachers is the sum of the weight of male and female teachers.\n    total_weight = male_weight + female_weight\n\n    # The total number of teachers is the sum of male and female teachers.\n    total_teachers = male_teachers + females\n\n    # We have an equation based on the overall average weight.\n    equation = Eq(total_weight / total_teachers, overall_avg_weight)\n    \n    # Let's solve the equation for 'females'.\n    solutions = solve(equation, females)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora is 5th from the front and 7th from the back. So there are 4 people in front of her and 6 behind.\n    total_rows = 4 + 1 + 6\n    \n    # Cora is 2nd from the left and 4th from the right. So there is 1 person to her left and 3 to her right.\n    total_columns = 1 + 1 + 3\n    \n    # Multiply the total number of rows and columns to get the number of students.\n    num_students = total_rows * total_columns\n    \n    return num_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "from sympy import factorint\n\ndef solution():\n    product_factors = factorint(33 * 55)\n    m_factors = {}\n\n    for prime, power in product_factors.items():\n        if power % 2 != 0:  # If the power of prime number is odd\n            m_factors[prime] = 1  # Add one more to make it even\n\n    m = 1\n    for prime, power in m_factors.items():\n        m *= prime ** power\n\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    count = 0\n    for x1 in range(2, 8 - 2*2 + 1):  # Plate 1 will have at least 2 candies\n        for x2 in range(2, 8 - x1 - 2 + 1):  # Plate 2 will have at least 2 candies\n            x3 = 8 - x1 - x2  # Whatever remains goes to Plate 3\n            if x3 >= 2:  # Plate 3 should have at least 2 candies\n                count += 1\n    return count\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    ans = 40 * 700\n    return ans\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    # As Star must be the first runner, we only need to arrange the 4 remaining teammates\n    # The number of ways to arrange 4 people is 4 factorial (4!).\n\n    ans = factorial(4)\n\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Loop through possible digits for a four-digit increasing integer\n    for a in range(1, 10):\n        for b in range(a+1, 10):\n            for c in range(b+1, 10):\n                for d in range(c+1, 10):\n                    # Original integer with increasing digits\n                    inc = 1000*a + 100*b + 10*c + d\n                    # Reversed integer with decreasing digits\n                    dec = 1000*d + 100*c + 10*b + a\n                    # The third integer's sum using the same digits will be a combination of these digits\n                    # Since all permutations of the digits will have the same sum, we can choose one such as adc + b.\n                    # This integer is not strictly increasing or decreasing\n                    third = 1000*a + 100*d + 10*c + b\n\n                    # Check if the sum of the three integers equals 26352\n                    if inc + dec + third == 26352:\n                        # Return the smallest of the three integers\n                        return min(inc, dec, third)\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # The time to make one cut is the total time divided by the segments minus 1\n    # since the first segment doesn't require a cut.\n    time_per_cut = 60 / (31 - 1)\n\n    # The total time to make 50 segments is the time for one cut times the cuts needed\n    # which is segments minus 1.\n    total_time = time_per_cut * (50 - 1)\n\n    return total_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(a, b):\n        return (2 * a + 8) * b\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = 210 / (1 - 0.30)\n    return number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003  # Start searching from the year after 2002\n    while str(year) != str(year)[::-1]:  # Check if the year is a palindrome\n        year += 1  # Increment the year if it's not a palindrome\n    return year - 2002  # Return the difference between the found year and 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of flowers Candy gave to Nancy\n    x = symbols('x')\n    \n    # Initial amounts\n    candy_initial = 11\n    nancy_initial = 9\n    \n    # After giving, Candy's flowers\n    candy_final = candy_initial - x\n    # After receiving, Nancy's flowers\n    nancy_final = nancy_initial + x\n    \n    # Nancy has 8 more flowers than Candy after the exchange\n    equation = Eq(nancy_final, candy_final + 8)\n    \n    # Solve for x to find how many flowers Candy gave to Nancy\n    flowers_given = solve(equation, x)\n    \n    # Subtract flowers given from Candy's initial amount to get the final amount\n    candy_now = candy_initial - flowers_given[0]\n    \n    return candy_now\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_count = factorial(len(word))\n    for count in letter_counts.values():\n        total_count //= factorial(count)\n    return total_count\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    base_price = 200\n    increase_percentage = 45\n\n    increased_price = base_price * (1 + increase_percentage / 100)\n    \n    return increased_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60  # Mum gave 60p\n    money_from_dad = 40  # Dad gave 40p\n    days = 3  # Monday, Tuesday, and Wednesday\n\n    total_money = (money_from_mum + money_from_dad) * days\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number / 24 == 36:\n            return number\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temperature = -5\n    midday_temperature = 17\n\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increase = 1\n    while term <= 50:\n        increase += 1\n        term += increase\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    # Price of pens and booklets in pence\n    pen_price_p = 43\n    booklet_price_p = 185 # £1.85 is equivalent to 185p\n    \n    # Total amount available in pence\n    total_amount_p = 1000 * 10 # £10 is equivalent to 10000p\n    \n    # Total price for 3 pens and 4 booklets in pence\n    total_price_p = (3 * pen_price_p) + (4 * booklet_price_p)\n    \n    # Calculate change in pence\n    change_p = total_amount_p - total_price_p\n    \n    # Convert change back to pounds\n    change_in_pounds = change_p / 1000\n    \n    return change_in_pounds\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St. Petersburg (Russia) as of my knowledge cutoff date in 2023\n    # is approximately 5.4 million. Since the question might be about an exact figure,\n    # it's important to note that I am providing a number that may not be up-to-date.\n    # This number is a commonly reported estimate, not an exact count.\n    population = 5400000\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5001, 10000):\n        thousands_digit = int(str(i)[0])\n        other_digits = [int(d) for d in str(i)[1:]]\n\n        if all(thousands_digit % d == 0 for d in other_digits if d != 0):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 10))\n    ans = primes[2]  # Since index starts from 0, the third prime number is at index 2.\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Initialize an empty list to contain possible digits for each position\n    possible_digits = [set(range(10)) for _ in range(4)]  \n\n    # Process the information from each trial\n    # For 5648, two digits are wrong: eliminate two correct digits from all positions\n    for i, digit in enumerate('5648'):\n        possible_digits[i] -= set([int(digit)])\n\n    # For 3628, two digits are wrong: eliminate two correct digits from all positions\n    for i, digit in enumerate('3628'):\n        possible_digits[i] -= set([int(digit)])\n\n    # For 3147, two digits are wrong: eliminate two correct digits from all positions\n    for i, digit in enumerate('3147'):\n        possible_digits[i] -= set([int(digit)])\n\n    # For 5629, two digits are wrong: eliminate two correct digits from all positions\n    for i, digit in enumerate('5629'):\n        possible_digits[i] -= set([int(digit)])\n\n    # For 1258, all digits are wrong: these digits cannot be in any position\n    all_wrong_digits = set(int(digit) for digit in '1258')\n    for i in range(4):\n        possible_digits[i] -= all_wrong_digits\n\n    # Find the intersection of possible digits for the first and second trial\n    # Since they must have two correct and common digits, subtract sets from other positions\n    possible_digits[0] &= possible_digits[2]\n    possible_digits[1] &= possible_digits[3]\n    possible_digits[2] &= possible_digits[0]\n    possible_digits[3] &= possible_digits[1]\n\n    # Now we just need one possibility per position to get the correct combination\n    # Convert sets to lists and pick the first element as the correct digit\n    correct_combination = ''.join(str(list(digit_set)[0]) for digit_set in possible_digits)\n\n    return correct_combination\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the tilde expression\n    tilde = symbols('~')\n\n    # Create the equation according to the question\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve the equation\n    solution = solve(equation, tilde)\n\n    # Get the numerical answer\n    ans = solution[0]\n\n    return ans\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child,\n    # it means there are 18 children in between them,\n    # making the half circle consist of 19 children in total.\n    # Since this represents half the circle,\n    # the full circle would have twice as many children.\n    half_circle = 22 - 4\n    total_children = half_circle * 2\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    number_of_terms = 10\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    total_coins = (number_of_terms * (first_term + last_term)) // 2\n\n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily = 24\n    gina = lily // 2\n    fiona = gina // 4\n\n    total_dresses = gina + fiona\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # defining the symbols\n    A, B, C, D, E = symbols('A B C D E')\n\n    # defining the equations based on the given average information\n    equation1 = Eq((A + B + C) / 3, 95)\n    equation2 = Eq((B + C + D) / 3, 94)\n\n    # defining the equations based on the given individual information\n    E_score = 96\n    equation3 = Eq(E, E_score)\n    equation4 = Eq(B, D)\n\n    # defining the equations based on the rank information\n    equation5 = Eq(A, E_score + 1)  # Since A has the highest mark and E's score is second\n\n    # solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (A, B, C, D, E))\n\n    return solutions[D]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_deposit = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    years_guess = 5\n\n    # Calculation using simple interest formula: A = P(1 + rt)\n    actual_years = (final_amount / initial_deposit - 1) / interest_rate\n\n    return years_guess == actual_years, actual_years\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average_weight = 65\n    male_teachers = 3\n    male_average_weight = 75\n    female_average_weight = 60\n    \n    # Total weight of male teachers\n    total_male_weight = male_teachers * male_average_weight\n    \n    # Let's call the number of female teachers 'f'\n    # (total_male_weight + female_average_weight * f) / (male_teachers + f) = total_average_weight\n    # Solve for f\n    # f = (total_average_weight * male_teachers - total_male_weight) / (female_average_weight - total_average_weight)\n    f = (total_average_weight * male_teachers - total_male_weight) / (female_average_weight - total_average_weight)\n    \n    return int(f)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarters_full = 350\n    one_quarter_full = 250\n\n    # Since the difference between 3/4 full and 1/4 full is half of the contents,\n    # we can find the mass of the contents by doubling the difference between these two masses.\n    mass_of_half_contents = three_quarters_full - one_quarter_full\n\n    # Now we can find the mass of the empty jar by subtracting the mass of half the contents from\n    # the mass of the jar when it is 1/4 full.\n    mass_of_empty_jar = one_quarter_full - mass_of_half_contents\n\n    return mass_of_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_capacity_liters = 9.1\n    cup_capacity_liters = 0.350\n    \n    soda_used_for_bottle = bottle_capacity_liters / 7\n    soda_used_for_cups = 4 * cup_capacity_liters\n    remaining_soda = total_soda_liters - (soda_used_for_bottle + soda_used_for_cups)\n    \n    return remaining_soda\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    father_now, son_now = symbols('father_now son_now')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq((father_now - 6), 5 * (son_now - 6))\n    equation2 = Eq(father_now + son_now, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father_now, son_now))\n\n    # Return the father's current age\n    return solutions[father_now]\n\n# Call the function and assign the result to \"ans\"\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    import math\n\n    # Given values\n    m = 2.0  # mass in kilograms\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters\n    x = 0.04  # displacement from equilibrium in meters\n\n    # Total energy in the system is constant and equal to the potential energy at maximum displacement\n    E_total = (1/2) * k * amplitude ** 2\n\n    # Kinetic energy at displacement x is total energy minus potential energy at x\n    E_kinetic_at_x = E_total - ((1/2) * k * x ** 2)\n\n    # Speed at displacement x can be calculated from kinetic energy, E_kinetic_at_x = (1/2) * m * v^2\n    v_at_x = math.sqrt((2 * E_kinetic_at_x) / m)\n\n    return E_total, v_at_x\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # In order to win, Rose needs to make sure that she leaves a multiple of 3 for Kylie.\n    # This ensures Rose can always keep the number of remaining marbles as a multiple of 3\n    # after Kylie's turn, eventually leaving Kylie with just 2 marbles before Rose's final turn.\n\n    total_marbles = 14\n    # Check number of marbles to take to leave a multiple of 3\n    for first_move in [1, 2]:\n        if (total_marbles - first_move) % 3 == 0:\n            return first_move\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -2023**0.5\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount_pence = 45 * 100\n    coin_value_pence = 5\n    num_coins = total_amount_pence // coin_value_pence\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for distances run by Pip and Bud per minute\n    pip_per_min, bud_per_min = symbols('pip_per_min bud_per_min')\n\n    # Create the equations based on the problem statement\n    total_distance_eq = Eq(pip_per_min*3 + bud_per_min*3, 540)  # total distance in 3 minutes\n    distance_difference_eq = Eq(pip_per_min, bud_per_min + 20)  # difference in distance per minute\n\n    # Solve the system of equations\n    solutions = solve((total_distance_eq, distance_difference_eq), (pip_per_min, bud_per_min))\n    \n    # Extract Pip's total distance run in 3 minutes\n    pip_total_distance = solutions[pip_per_min] * 3\n    \n    return pip_total_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    coins_A, coins_B, coins_C = symbols('coins_A coins_B coins_C')\n\n    # Create equations based on the problem statement\n    # Box A contains four times as many coins as Box B\n    equation1 = Eq(coins_A, 4 * coins_B)\n\n    # 6% of the coins in Box A are removed and transferred to Box C\n    # 20% of the coins in Box B are removed and transferred to Box C\n    equation2 = Eq(0.06 * coins_A + 0.20 * coins_B, 1220)\n\n    # There are now 1220 coins in Box C, which is 22% more than the original number of coins in Box C\n    equation3 = Eq(coins_C + 0.22 * coins_C, 1220)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (coins_A, coins_B, coins_C))\n\n    # The number of coins in box A at the beginning\n    return solutions[coins_A]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    initial_coffee_percent = 60\n    final_coffee_percent = 40\n    \n    # final ratio of coffee to tea will be 40% to 60%\n    # which is equivalent to 2 to 3 (since 40% * 5 = 200% and 60% * 5 = 300%)\n    \n    # Since the amount of coffee is same in both cases, the ratio of initial coffee to initial tea = 3 to 2\n    initial_coffee_to_tea_ratio = 3/2\n    \n    # After buying more tea the ratio of final coffee to final tea = 2 to 3\n    final_coffee_to_tea_ratio = 2/3\n    \n    # percentage increase in the number of bottles of tea\n    # initial tea is 2 parts, final tea is 3 parts, increase is 1 part from initial 2 parts\n    percent_increase_tea = (1 / initial_coffee_to_tea_ratio) * 100\n    \n    return percent_increase_tea\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    ans = int('2A3', 16) + int('17B', 16)\n    return hex(ans)\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 25 / 100 * 30 / 100 * 40 / 100 * 300\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_sales = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_sales / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    tricycle_wheels = 3\n    car_wheels = 4\n\n    for tricycles in range(total_vehicles + 1):\n        cars = total_vehicles - tricycles\n        if (tricycles * tricycle_wheels + cars * car_wheels) == total_wheels:\n            return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    time_washing_watermelons = 1\n    time_washing_glasses = 3\n    time_juicer_working = 4\n    time_pouring_juice = 1\n\n    total_time = time_washing_watermelons + time_washing_glasses + time_juicer_working + time_pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # Lewis' money in pence\n    james_money_p = 110  # James' money in pence (1.10 pounds converted to pence)\n\n    total_money_p = lewis_money_p + james_money_p\n\n    return total_money_p\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    # Total letters = 7 ('WINNING')\n    # W = 1, I = 2, N = 3, G = 1\n    total_letters = factorial(7)\n    w_count = factorial(1)\n    i_count = factorial(2)\n    n_count = factorial(3)\n    g_count = factorial(1)\n\n    # Divide by the factorial of the count of each repeating letters\n    arrangements = total_letters // (w_count * i_count * n_count * g_count)\n    \n    return arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3 and len(set([x1, x2, x3])) == 3:\n                count += 1\n            if x1 + x2 >= 13:\n                break\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    \n    def d(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        \n        # Use recursive formula for Derangement: !n = (n - 1) * (!(n - 1) + !(n - 2))\n        return (n - 1) * (d(n - 1) + d(n - 2))\n    \n    ans = d(6)\n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # in kg\n    final_velocity = 8  # in m/s\n    time = 4  # in seconds\n\n    # Using the formula: force = mass * (change in velocity / time)\n    change_in_velocity = final_velocity - 0  # since initial velocity is 0 m/s\n    force = mass * (change_in_velocity / time)\n\n    return force\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Initialize the minimum number of \"1000 Plus\" bottles to a high value\n    min_1000Plus_bottles = float('inf')\n\n    # Loop through all possible number of lemonade bottles sold\n    for lemonade_sold in range(0, 351):\n        # Calculate the income from the sold lemonade bottles\n        income_lemonade = lemonade_sold * 4\n\n        # Check if the income from lemonade is less than the total income\n        if income_lemonade <= 2012:\n            # Calculate the remaining income to be obtained from \"1000 Plus\" bottles\n            remaining_income = 2012 - income_lemonade\n\n            # Check if the remaining income is divisible by the price of a \"1000 Plus\" bottle\n            if remaining_income % 7 == 0:\n                # Calculate the number of \"1000 Plus\" bottles sold\n                _1000Plus_sold = remaining_income // 7\n\n                # Update the minimum number of \"1000 Plus\" bottles if the current count is lower\n                if _1000Plus_sold < min_1000Plus_bottles:\n                    min_1000Plus_bottles = _1000Plus_sold\n\n    # Return the minimum number of \"1000 Plus\" bottles sold\n    return min_1000Plus_bottles\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Let x be the initial number of blue pens\n    # Let y be the initial number of red pens\n    # According to the problem, we have x + y = 96 and the ratio x:y = 3:5\n    x = 3 * (96 / (3 + 5))\n    y = 5 * (96 / (3 + 5))\n    \n    # After adding 60 red pens and some unknown number of blue pens, let's call it additional_blue\n    # The total number of pens becomes x + additional_blue + y + 60\n    # According to the problem, 40% of the pens are now blue, which gives us the equation:\n    # 0.40 = (x + additional_blue) / (x + additional_blue + y + 60)\n    # Solving for additional_blue gives us:\n    additional_blue = (0.40 * (x + y + 60)) - x\n    \n    return int(additional_blue)\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(0, 101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\nfrom sympy import divisors\n\ndef solution():\n    all_numbers = set(range(1, 14))\n    possible_combinations = list(combinations(all_numbers, 9))\n    \n    # Find the combination where exactly two numbers have unique numbers of factors\n    for combo in possible_combinations:\n        factors_counts = [len(divisors(n)) for n in combo]\n        unique_factors = set(factors_counts)\n        if sum(1 for count in factors_counts if factors_counts.count(count) == 1) == 2:\n            \n            # Identify the two students (numbers) with unique number of factors\n            unique_students = [n for n, count in zip(combo, factors_counts) if factors_counts.count(count) == 1]\n\n            # Alice knows her number is odd, which narrows down the possibilities\n            alice_options = [n for n in unique_students if n % 2 != 0]\n            if len(alice_options) == 1:\n                alice_number = alice_options[0]\n\n                # May knows her number is 2 less than Alice's and greater by 1 than another student's\n                # This can only be true if the number 1 less than May's is in the combination\n                may_number = alice_number - 2\n                if may_number - 1 in combo:\n                    not_picked = all_numbers - set(combo)\n                    return eval('*'.join(map(str, not_picked)))\n    return None\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Since we are looking for the largest number that cannot be formed by 3x + 7y,\n    # we can use the Frobenius coin problem formula (when we have only two denominations)\n    # which states that the largest number that cannot be obtained with two coin denominations\n    # a and b (where a and b are coprime) is a*b - a - b.\n    # For our case, a = 3 and b = 7, both prime numbers and thus coprime.\n    \n    a = 3\n    b = 7\n    ans = a * b - a - b\n\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    # Equation based on scoring\n    equation1 = Eq(5 * correct - 2 * incorrect, 151)\n    # Equation based on how the correct answers relate to incorrect ones\n    equation2 = Eq(correct, 3 * incorrect + 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    total_kms = 32\n    num_friends = 11\n\n    total_cost = cost_per_km * total_kms\n    cost_per_person = total_cost / num_friends\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers to base 10, add them and convert back to base 7\n    sum_base10 = 45 + 66\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return int(ans)\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    for i in range(1, 21):\n        for j in range(i+1, 21):\n            if i * j <= 20:  # Check if i and j are consecutive and their product is not greater than 20\n                # As i and j are both divisors of 20, they are factors of 20!\n                potential_divisors = set(range(1, 21)) - {i, j}\n                lcm = 1\n                for divisor in potential_divisors:\n                    lcm = (lcm * divisor) // math.gcd(lcm, divisor)\n                if all(lcm % d == 0 for d in potential_divisors):\n                    return i + j\n    return None\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # The total number of matches each student has played is equal to half\n    # the number of games played (since each game is played by two students).\n    # If x is the number of matches F has played, then:\n    # 4 + 6 + 2 + 1 + 3 + 5 + x = 2 * (number of games played)\n    # Because each student has played each other student exactly once, the total\n    # number of games played is C(7, 2) = 7! / (2! * (7-2)!) = 21\n    # 4 + 6 + 2 + 1 + 3 + 5 + x = 2 * 21\n    # x = 42 - (4 + 6 + 2 + 1 + 3 + 5)\n    x = 42 - sum([4, 6, 2, 1, 3, 5])\n    return x\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    j_to_n_ratio = 5 / 3\n    difference = 18\n\n    natasha_stamps = difference / (j_to_n_ratio - 1)\n    jamie_stamps = natasha_stamps * j_to_n_ratio\n\n    total_stamps = jamie_stamps + natasha_stamps\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cici, linda = symbols('cici linda')\n    \n    # When Cici was born Linda was 11 years old, so Linda = Cici + 11\n    age_relation = Eq(linda, cici + 11)\n\n    # 4 years later, their ages sum up to 37: (Cici+4) + (Linda+4) = 37\n    sum_of_ages = Eq(cici + 4 + linda + 4, 37)\n    \n    # Solve the equations\n    solved_ages = solve((age_relation, sum_of_ages), (cici, linda))\n    \n    # How old will Linda be 3 years later\n    linda_age_in_3_years = solved_ages[linda] + 3\n\n    return linda_age_in_3_years\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_numbers = 0\n    for n in range(161, 15 * 15):  # Since n < 15*15 to have same quotient and remainder\n        if n % 15 == n // 15:\n            sum_numbers += n\n    return sum_numbers\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    \n    min_sum = first_number_min + second_number_min\n    \n    return min_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # Distance from home to school and school to home\n    distance = 300  # in meters\n    \n    # Speed uphill (from home to school)\n    uphill_speed = 10  # in meters per minute\n    \n    # Speed downhill (from school to home)\n    downhill_speed = 30  # in meters per minute\n\n    # Time taken uphill\n    uphill_time = distance / uphill_speed  # in minutes\n    \n    # Time taken downhill\n    downhill_time = distance / downhill_speed  # in minutes\n\n    # Total distance for the round trip\n    total_distance = 2 * distance  # in meters\n    \n    # Total time for the round trip\n    total_time = uphill_time + downhill_time  # in minutes\n    \n    # Average speed for the round trip\n    average_speed = total_distance / total_time  # in meters per minute\n    \n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    entrances = 5\n    people = 4\n\n    # Each person has 5 choices for an entrance, and there are 4 people\n    # We multiply the number of choices together since each choice is independent\n    possible_ways = entrances ** people\n\n    return possible_ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    peaches = 18\n    peaches_per_bag = 2\n    \n    bags_needed = peaches // peaches_per_bag\n    \n    return bags_needed\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n    \n    # Subtract the leftovers from the total amounts to get numbers that can be distributed equally\n    apples = 226 - 10\n    pears = 352 - 28\n    oranges = 157 - 13\n    \n    # Find the greatest common divisor (GCD) of the numbers to find the maximum number of students\n    gcd_apples_pears = gcd(apples, pears)\n    gcd_all = gcd(gcd_apples_pears, oranges)\n\n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy has 2 choices: first or last\n    judy_choices = 2\n\n    # There are 5 friends who can be arranged in 5! (factorial) different ways\n    friend_arrangements = factorial(5)\n\n    # Total ways they can form the line is the product of the two possibilities\n    total_ways = judy_choices * friend_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number1 = 6  # First number is given as 6\n    number2 = 12 / number1  # The other number must be the LCM divided by number 1\n    if number2.is_integer() and number2 % number1 != 0:\n        return int(number2)\n    return None\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    count = 1  # The current count of digits written\n    number = 1  # The current number being written\n    \n    while count < 200:\n        number += 1\n        count += len(str(number))\n        \n    # Find the position of the 200th digit in 'number'\n    position = len(str(number)) - (count - 200)\n    \n    # Get the 200th digit\n    return int(str(number)[position-1])\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_products = 500 * total_days\n    qualified_points = 5\n    unqualified_penalty = 18\n    total_points = 9931\n\n    # Let's assume all products are qualified initially and calculate the total points in that scenario\n    all_qualified_points = total_products * qualified_points\n\n    # Now let's calculate how many unqualified products are needed to reduce the points\n    # to the actual total_points value\n    unqualified_products = (all_qualified_points - total_points) / (qualified_points + unqualified_penalty)\n\n    # Now we can calculate the number of qualified products\n    qualified_products = total_products - unqualified_products\n    return int(qualified_products)\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    sell_price = cost + 40\n    discount_price = sell_price * 0.8\n    profit = discount_price - cost\n\n    equation = Eq(profit, 12)\n\n    cost_value = solve(equation, cost)[0]\n\n    return cost_value\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = (6.25 * 8.27 * 16) + (1.25 * 0.827 * 8)\n    return ans\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, daughter = symbols('daniel daughter')\n    \n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n    \n    solutions = solve((equation1, equation2), (daniel, daughter))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Since April met Baye 800m away from Q, Baye has walked 1800 - 800 = 1000m\n    # April ran towards P at 4 times her original speed. This means by the time she met Baye,\n    # she had covered a distance equivalent to the time Baye took to walk 1000m.\n    # She continues to run back to P, which is another 1000m.\n    # During this time, Baye will continue to walk towards Q.\n\n    # The distances covered by both are in the ratio of 4:1 (April's running speed : Baye's walking speed)\n    # As April runs 1000m back to P, the ratio suggests Baye will walk 1000m / 4 = 250m towards Q.\n\n    # So when April reaches P, Baye will be 1800m - (1000m + 250m) = 550m away from Q.\n\n    return 550\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n    equation1 = Eq(hens, 6 * roosters)  # hens are 6 times the roosters initially\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))  # after increasing by 60 each\n\n    solutions = solve((equation1, equation2))\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    initial_mean = 12\n    final_mean = 11\n    num_numbers_initial = 7\n    num_numbers_final = 8\n\n    total_initial = initial_mean * num_numbers_initial\n    total_final = final_mean * num_numbers_final\n\n    eighth_number = total_final - total_initial\n\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Sum of the first part: 1+2+3+4+5+6+7+8\n    first_half = sum(range(1, 9))\n    # Sum of the middle part (decreasing): 7+6+5+4+3+2+1\n    middle_part = sum(range(1, 8))\n    # Sum of the last part: 1+2\n    last_part = 1 + 2\n    \n    ans = first_half + middle_part + last_part\n    return ans\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    # The decimal repeats every 6 digits (538462)\n    # Find the remainder of 2021 divided by the length of repeating sequence\n    remainder = 2021 % 6\n\n    # Sequence is '538462', to get the remainder-th digit,\n    # we use remainder - 1 because indexing starts at 0\n    repeating_sequence = '538462'\n    if remainder == 0:\n        # If remainder = 0, then it's the last digit of the repeating sequence\n        ans = int(repeating_sequence[-1])\n    else:\n        # Otherwise, select the corresponding digit\n        ans = int(repeating_sequence[remainder - 1])\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):  # Loop over numbers from 1 to 100\n        count += str(i).count('9')  # Count the number of '9's in each number when it's converted to a string\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence) # Subtract 1 because list is 0-indexed\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 2/5\n    total_cost = 132\n\n    # The total cost is the sum of the book and the bag\n    # book_cost + bag_cost = total_cost\n    # (book_fraction * initial_amount) + (bag_fraction * initial_amount) = total_cost\n    # (book_fraction + bag_fraction) * initial_amount = total_cost\n    # initial_amount = total_cost / (book_fraction + bag_fraction)\n\n    initial_amount = total_cost / (book_fraction + bag_fraction)\n\n    return initial_amount\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    expression1 = (1+0.23+0.34) * (0.23+0.34+0.45)\n    expression2 = (1+0.23+0.34+0.45) * (0.23+0.34)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # To ensure 5 green beads, Darrell might draw all the blue and white ones first\n    blue_beads = 5\n    white_beads = 6\n    # He needs to draw one more after all blue and white beads to ensure the 5th green bead\n    beads_to_draw_for_green = 5 - 1\n\n    # Total number of beads to ensure 5 green beads\n    beads_needed = blue_beads + white_beads + beads_to_draw_for_green\n    return beads_needed\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    max_number = 105\n\n    count_by_5 = max_number // 5\n    count_by_7 = max_number // 7\n    count_by_35 = max_number // (5 * 7)\n\n    ans = count_by_5 + count_by_7 - count_by_35\n\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of Parcel A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(A, 5 * B)         # The mass of Parcel A is 5 times the mass of Parcel B\n    equation2 = Eq(C, B - 75)        # The mass of Parcel C is 75g less than the mass of Parcel B\n    equation3 = Eq(A + B + C, 835)   # The total mass of the three parcels is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the mass of Parcel A\n    return solutions[A]\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    for i in range(1, 216):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n\n    # From page 1 to 9, there is 1 digit per page number\n    total_digits += 1 * 9\n    \n    # From page 10 to 81, there are 2 digits per page number\n    total_digits += 2 * (81 - 9)\n    \n    return total_digits\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    # We can use the stars and bars theorem here\n    # The number of ways to put n identical items into k distinct bins is (n + k - 1) choose k\n    # For identical bins, the number is ((n + k - 1) choose k)/k!        \n    from math import comb\n\n    n = 6  # number of apples\n    k = 3  # number of identical baskets\n\n    # Calculate the ways to split n apples into k identical baskets\n    return comb(n + k - 1, k - 1) // (k!)\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels is 8:5\n    # Let the initial number of birds be 8x and squirrels be 5x.\n    # The total initial number is 8x + 5x = 13x.\n    \n    # After one year, squirrels increase by 20%, so new number is 5x * 1.2 = 6x.\n    # Since the total number remains the same, the new number of birds + new number of squirrels = 13x.\n    # Let the new number of birds be y.\n    # We have y + 6x = 13x. Solving for y gives us y = 7x.\n    \n    # The number of birds that flew away is 8x - 7x = x.\n    # The percentage of birds that flew away is (x / 8x) * 100% = 12.5%.\n    \n    percentage_birds_flew_away = (1 / 8) * 100\n    return percentage_birds_flew_away\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int(str(num) + '1') == 3 * int('1' + str(num)):\n            return num\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    months = 5  # March to July is 5 months\n    total_pizzas = average_pizzas_per_month * months\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # The number of floors that John initially walks (from the 1st to 4th floor) is 3 (4 - 1).\n    initial_floors = 3\n    # Time taken to walk up 3 floors.\n    initial_time = 12\n    # Since he walks at a constant speed, walking up each floor takes the same amount of time.\n    # We can calculate the time it takes to walk up one floor.\n    time_per_floor = initial_time / initial_floors\n    # Now calculate the number of floors he needs to walk to go from the 1st to the 8th floor.\n    target_floors = 8 - 1\n    # Calculate the total time it will take for John to walk up 7 floors (from the 1st to the 8th) at his constant speed.\n    total_time = time_per_floor * target_floors\n    return total_time\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the number of terms in the arithmetic sequence\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def new_operation(a, b):\n        return (a % 10) + (b % 30) - 1\n    \n    ans = new_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    \n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, ((40 - remainder) // divisor) + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                ratio = dividend / quotient\n                possible_values.add(ratio)\n                \n    return len(possible_values)\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3\n    drunk_volume = 9\n    container_volume = 5\n\n    total_juice = total_cartons * volume_per_carton\n    remaining_juice = total_juice - drunk_volume\n    containers_needed = (remaining_juice + container_volume - 1) // container_volume\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    D, A, R, T, C = symbols('D A R T C', integer=True)\n    \n    # Equations based on the problem statement\n    equation1 = Eq(D + A + R + T, 11)\n    equation2 = Eq(T + A + R + T, 12)\n    equation3 = Eq(C + A + R + T, 13)\n    \n    # Since each letter represents different positive integer and none can be 0,\n    # we add the constraints to the solution\n    constraints = (D > 0, A > 0, R > 0, T > 0, C > 0,\n                   D != A, D != R, D != T, D != C,\n                   A != R, A != T, A != C,\n                   R != T, R != C,\n                   T != C)\n    \n    # Getting solutions\n    solutions = solve((equation1, equation2, equation3) + constraints)\n    \n    # Find the maximum value of A + R + T\n    max_value = max(solution[A] + solution[R] + solution[T] for solution in solutions)\n    \n    return max_value\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    possible_values = 0\n    for A in range(1, 10):  # A < 9 to keep the fraction < 1\n        if (5/9) < (9/A):\n            possible_values += 1\n    return possible_values\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    loafs_needed = 35\n    cups_needed = loafs_needed / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    num_friends = 4\n    cards_sent_by_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    \n    total_students = 39\n    equation1 = Eq(boys + girls, total_students)\n    equation2 = Eq(1/4 * boys, 2/5 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_tanya = 3\n    members_right_of_tanya = 5\n    tanya = 1  # Tanya herself\n\n    total_members = members_left_of_tanya + tanya + members_right_of_tanya\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import factorint, primerange\n\n    # Factorize 87878 to get all its factors\n    factors_dict = factorint(87878)\n    factors = list(factors_dict.keys())\n\n    # Find all prime numbers smaller than 10000\n    primes = list(primerange(1, 10000))\n\n    # Find the largest prime factor that is a four-digit number\n    for prime in reversed(primes):\n        if prime in factors:\n            return prime\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time for each section\n    time_first_280m = 280 / 7\n    time_middle_400m = 400 / 5\n    time_last_120m = (800 - 280 - 400) / 8\n\n    # Total time taken for the entire race\n    total_time = time_first_280m + time_middle_400m + time_last_120m\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_crate_weight = 24 * 5  # total weight of all crates in tonnes\n    max_load_per_van = 12        # maximum load each van can carry in tonnes\n\n    num_vans_required = total_crate_weight // max_load_per_van\n    if total_crate_weight % max_load_per_van > 0:  # checking for any remaining load that requires an extra van\n        num_vans_required += 1\n\n    return num_vans_required\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Daniel initially has \"daniel\" stickers, and then gives away 24.\n    daniel_after = daniel - 24\n    # Patrick initially has \"patrick\" stickers, then buys 10 more.\n    patrick_after = patrick + 10\n    # In the end, Patrick has twice as many stickers as Daniel.\n    equation = Eq(patrick_after, 2 * daniel_after)\n    # Initially, Daniel and Patrick had an equal number of stickers.\n    equation_initial = Eq(daniel, patrick)\n\n    solutions = solve((equation, equation_initial), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        if n < 0 or m == 0:\n            return 0\n        return count_partitions(n, m - 1) + count_partitions(n - m, m)\n    \n    ans = count_partitions(5, 5) - 1  # Exclude the number itself as a single partition\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n\n    total_distance = whale_depth + plane_height\n\n    return total_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Maximum number of left-handed pupils\n    max_left_handed = total_pupils - right_handed\n    \n    # Maximum number of left-handed girls\n    max_left_handed_girls = max_left_handed if girls > max_left_handed else girls\n    \n    # Minimum number of right-handed girls\n    min_right_handed_girls = girls - max_left_handed_girls\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # Since we're looking for the smallest difference, let's form the smallest and largest numbers possible with the digits 1 to 9.\n    smallest = int(''.join(map(str, range(1, 10))))  # concatenate numbers from 1 to 9\n    largest = int(''.join(map(str, range(9, 0, -1))))  # concatenate numbers from 9 to 1\n\n    # Calculate the difference\n    diff = largest - smallest\n\n    return diff\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_fruits = symbols('total_fruits')\n    \n    apples = 2 / 3 * total_fruits\n    bananas = 1 / 9 * total_fruits\n    lemons = total_fruits - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n    solutions = solve(equation, total_fruits)\n    \n    lemons_count = lemons.subs(total_fruits, solutions[0])\n    \n    return int(lemons_count)\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day_per_worker = 6\n    total_days = 9\n    total_skirts = 0\n\n    for day in range(1, total_days + 1):\n        workers = day\n        total_skirts += skirts_per_day_per_worker * workers\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    prob_over_20 = 0.6\n    prob_over_25_given_over_20 = 0.3 / prob_over_20\n\n    return prob_over_25_given_over_20\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of erasers john and his brother have\n    john, brother = symbols('john brother')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(john + brother, 246)\n    equation2 = Eq(john, brother + 32)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    # List of all the numbers to sum\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    # Using the sum() function to get the sum of all numbers in the list\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        if a * a + a + a == 399:\n            break\n        a += 1\n    return a\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    taps = 5\n    time_for_1_litre = 2  # time in minutes for 5 taps to fill 1 litre\n    volume_of_jug = 0.5  # volume in litres for 500ml jug\n\n    # Calculate the rate of one tap\n    rate_per_tap = 1 / (taps * time_for_1_litre)  # litre per minute per tap\n    \n    # Time taken for one tap to fill 500ml jug\n    time_for_500ml_one_tap = volume_of_jug / rate_per_tap\n    \n    return time_for_500ml_one_tap\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    height_difference = 20  # The height difference between Ben and Sally in cm\n    sally_height = ben_height + height_difference  # Sally's height\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children = (3/5) * visitors\n    remaining_visitors = visitors - children\n    men = (1/2) * remaining_visitors\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n\n    return total_visitors[0]\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    perms = permutations(digits, 3)\n    \n    max_sum = 0\n    for num1 in perms:\n        remaining_digits = [digit for digit in digits if digit not in num1]\n        remaining_perms = permutations(remaining_digits, 3)\n        for num2 in remaining_perms:\n            sum_of_nums = int(''.join(map(str, num1))) + int(''.join(map(str, num2)))\n            if sum_of_nums > max_sum:\n                max_sum = sum_of_nums\n                \n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume = 2000  # 2 liters = 2000 millilitres\n    volume_drank = 350\n    remaining_volume = initial_volume - volume_drank\n    return remaining_volume\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 3280 * 0.40\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # The amount of grass grown per day is constant\n    # Let g be the amount of grass that grows each day\n    # H is the amount of grass a horse eats per day (also amount for 4 sheep)\n\n    # If 20 horses eat all grass in 12 days, then 20H = 12g\n    # If 60 sheep eat all grass in 24 days, and 1 horse eats as much as 4 sheep, then 60/4 * H = 24g\n    # Thus, 15H = 24g\n\n    # We need to find how many days 12 horses and 88 sheep will take to eat all grass\n    # 12H + 88/4H = day_count * g, we need to find day_count\n\n    # From the above equations, we can get the relationship between 20H and 15H\n    # 20H = 12g and 15H = 24g => 20H/15H = 12g/24g => 20/15 = 12/24 => H/g = 12/24 * 15/20\n    H_g_ratio = (12 / 24) * (15 / 20)  # This is the ratio H/g\n\n    # Now, we calculate for 12H + 88/4H = day_count * g\n    # From that we get, day_count = (12 + 88/4) * H/g\n    day_count = (12 + 88 / 4) * H_g_ratio\n\n    return day_count\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyze the pattern\n    # The sequence seems to alternate between adding 7 and doubling\n    \n    # Starting values as given in the pattern\n    pattern = [1, 8, 16, 23, 46, 53]\n    \n    # Last number is added by 7, so the next operation should be doubling\n    next_num = pattern[-1] * 2\n    \n    return next_num\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the rates of A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Create equations based on the problem statement\n    # If A and C are used to fill the pool, A contributes 18 tons\n    # Equation 1: 18*A + x*C = 1 pool\n    # If B and C are used to fill the pool, B contributes 27 tons, B = 2*A\n    # Equation 2: 27*2*A + x*C = 1 pool\n    # We also know that the rate of B is twice the rate of A (Given)\n    # Equation 3: B = 2*A\n\n    # Equation 1: A/C + 1 = 18\n    # Equation 2: 2*A/C + 1 = 27\n    # From Equation 3 we can replace B with 2*A in Equation 2\n\n    # Now we solve for A and C\n    equations = [\n        Eq(A + C, 1/18),\n        Eq(2*A + C, 1/27)\n    ]\n    \n    solutions = solve(equations, (A, C))\n\n    # Calculate the capacity of the pool\n    # Since A and C combined fill the pool, we can find the pool's total capacity\n    # by taking the reciprocal of A's rate (since 18 tons is the full pool)\n    pool_capacity = 1 / solutions[A]\n\n    return pool_capacity\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n\n    num_matches = 20\n    avg_goals_per_match = 2\n\n    total_earnings = (pay_per_match * num_matches) + (pay_per_goal * avg_goals_per_match * num_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    a, n = 1, 10\n    sum_of_s = sum([a + 2 * i for i in range(n)])\n    return sum_of_s\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    total_balls = 16\n    cost_per_ball = total_cost / total_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_numbers_with_7 = 0\n    # Count for numbers with exactly two sevens\n    for i in range(1, 10):  # The hundreds digit (can't be zero)\n        for j in range(0, 10):  # The tens digit\n            for k in range(0, 10):  # The units digit\n                if (i == 7 and j == 7) or (i == 7 and k == 7) or (j == 7 and k == 7):\n                    total_numbers_with_7 += 1\n\n    # Subtract cases where all digits are 7 which were counted three times\n    total_numbers_with_7 -= 2\n\n    # Count for numbers with three sevens, only one number 777\n    total_numbers_with_7 += 1\n\n    return total_numbers_with_7\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr. Spencer can sit in any of the 4 middle seats\n    spencer_options = 4\n    \n    # Once Mr. Spencer sits, his children can sit on either side in 2! ways\n    children_options = factorial(2)\n    \n    # The other 3 people can sit in any of the remaining 3 seats\n    others_options = factorial(3)\n    \n    # Multiply individual possibilities for total arrangements\n    total_arrangements = spencer_options * children_options * others_options\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    sweets = 60\n    sweets_eaten = sweets / 2\n    sweets_left = sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_final = sweets_left - sweets_given_away\n    \n    return int(sweets_final)\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of $2 notes be x and the number of $5 notes be y\n    x, y = symbols('x y')\n\n    # Originally, Cindy had x $2 notes and y $5 notes, total of (x + y) notes\n    total_notes = Eq(x + y, 55)\n\n    # She spent 1/3 of her $2 notes\n    remaining_2_notes = x - x / 3\n\n    # She received another 8 $5 notes\n    new_5_notes = y + 8\n\n    # After that, the $5 notes she had was 3/7 of the remaining notes\n    remaining_notes_relation = Eq(new_5_notes, 3 / 7 * (remaining_2_notes + new_5_notes))\n\n    # Solve the system of equations\n    solutions = solve((total_notes, remaining_notes_relation), (x, y))\n\n    # Calculate total money she had at first: $2 * number of $2 notes + $5 * number of $5 notes\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    marks_per_correct = 5\n    penalty_per_wrong = 2\n\n    # Assume Valerie got all questions correct and then subtract the overcount for each wrong question\n    # Let x be the number of questions she got correct\n    for x in range(total_questions + 1):\n        total_score = x * marks_per_correct - (total_questions - x) * penalty_per_wrong\n        if total_score == 23:\n            return x\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # A * B = 24\n    # B * C = 52\n    # We are looking for common factors of 24 and 52 to find possible values for B\n    common_factors = [i for i in range(1, min(24, 52)+1) if 24 % i == 0 and 52 % i == 0]\n  \n    # Calculate the smallest possible value of A + C for each common factor B\n    min_A_plus_C = None\n    for B in common_factors:\n        A = 24 // B\n        C = 52 // B\n        A_plus_C = A + C\n        if min_A_plus_C is None or A_plus_C < min_A_plus_C:\n            min_A_plus_C = A_plus_C\n\n    return min_A_plus_C\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # Skip permutations where M or H is zero as they are the first digits\n            continue\n        MATH = M * 1000 + A * 100 + T * 10 + H\n        HTAM = H * 1000 + T * 100 + A * 10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56\n    speed = 7\n    time = distance / speed\n    return time\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result_after_addition = 18\n    result_after_division = result_after_addition - 7\n    original_number = result_after_division * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    # The nth odd number is given by the formula 2n - 1\n    n = 20\n    odd_number = 2 * n - 1\n    return odd_number\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of scarfs produced per day originally\n    x = symbols('x')\n\n    # Original plan: produce x scarfs a day for 6 days\n    original_days = 6\n    # New plan: produce x+24 scarfs a day for 6-2 days\n    new_days = 6 - 2\n\n    # Equation to represent the total number of scarfs produced in both cases\n    equation = Eq(original_days * x, new_days * (x + 24))\n\n    # Solve the equation to find the number of scarfs produced per day originally\n    solution_x = solve(equation, x)\n\n    # Total number of scarfs produced is x scarfs per day for 6 days\n    total_scarfs = solution_x[0] * 6\n\n    # Return the total number of scarfs to be produced\n    return total_scarfs\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let the total number of sweets be x and the number of students be y.\n\n    # When giving 6 sweets to each student, he is short of 26 sweets:\n    # 6y = x + 26\n\n    # When giving 5 sweets to each student, he is short of 5 sweets:\n    # 5y = x + 5\n\n    # Now we solve the system of equations:\n    # Subtracting the second equation from the first gives:\n    # 6y - 5y = (x + 26) - (x + 5)\n    # y = 21\n\n    # Now use the value of y to find x:\n    # 5y = x + 5\n    # 5 * 21 = x + 5\n    # x = 5 * 21 - 5\n    x = 5 * 21 - 5\n    return x\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on initial ratio\n    equation1 = Eq(boys / girls, 5 / 3)\n\n    # Equation after 15 boys left and the ratio changed\n    equation2 = Eq((boys - 15) / girls, 5 / 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total number of pupils at first\n    total_pupils = solutions[boys] + solutions[girls]\n\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            x3 = 15 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15 + 1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, and C as one unit and E and F as another unit\n    # We have [ABC], [EF], D, G, H to arrange\n    remaining_units = 3  # D, G, H\n\n    # Total units to arrange is 3 (D, G, H) + 2 ([ABC], [EF]) = 5\n    ways_to_arrange_units = factorial(5)\n    \n    # Now, rearrange A, B, C within their unit, and E and F within their unit\n    ways_to_arrange_ABC = factorial(3)\n    ways_to_arrange_EF = factorial(2)\n    \n    # Multiplying the different combinations together to get the total\n    total_ways = ways_to_arrange_units * ways_to_arrange_ABC * ways_to_arrange_EF\n    \n    return total_ways\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = 65 - 5\n    \n    # Josh's age 5 years ago\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    \n    # Josh's current age\n    josh_current_age = josh_age_5_years_ago + 5\n    \n    return josh_current_age\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 to its prime factors\n    factors = factorint(675)\n    \n    # A number is a square if all the exponents in its prime factorization are even.\n    # So to make it a square, we need to multiply by a number B such that the resulting\n    # exponents of the prime factors are all even.\n\n    # Initialize B to 1, since any number times 1 is the number itself\n    B = 1\n    \n    # Check each prime factor's exponent; if it's odd, multiply B by the prime factor\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            B *= prime\n            \n    return B\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 695\n    single_can_price_pence = 65\n    cost_of_12_individual_cans = single_can_price_pence * 12\n    \n    savings = cost_of_12_individual_cans - multipack_price_pence\n    \n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    return 21.40 / 4\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    ab = 102  # Adam + Ben\n    bc = 97   # Ben + Carl\n    ac = 93   # Adam + Carl\n\n    # Sum of all individual weights (Adam + Ben + Carl) \n    # is half the sum of all pair weights because each person is counted twice in the pair sums\n    total_weight = (ab + bc + ac) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, banana = symbols('apples banana')\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total = 0\n    # For 4 digits numbers\n    for i in range(3267, 5000): \n        digits = set(str(i)) \n        if len(digits) == 4 and all('0' < d < '7' for d in digits):\n            total += 1\n\n    # For 5 digit numbers, the first digit can only be 3, 4, or 5,\n    # because the numbers must be less than 5120.\n    # Considering each place, we calculate the number of permutations.\n    for first in range(3, 6):\n        for second in [d for d in range(1, 7) if d != first]:\n            for third in [d for d in range(1, 7) if d not in (first, second)]:\n                for fourth in [d for d in range(1, 7) if d not in (first, second, third)]:\n                    for fifth in [d for d in range(1, 7) if d not in (first, second, third, fourth)]:\n                        num = int(f\"{first}{second}{third}{fourth}{fifth}\")\n                        if num >= 3267 and num <= 5120:\n                            total += 1\n    \n    return total\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'a' be the time Alan takes alone, and 'b' the time Bob takes alone\n    a = symbols('a')\n    \n    # We set the work rates as 1/a for Alan and 1/b for Bob\n    # Together, they complete 1/4 of work in 1 hour\n    # Bob alone can complete 1/6 of work in 1 hour\n    equation = Eq(1/a + 1/6, 1/4)\n    \n    # Solve the equation for 'a'\n    alan_time = solve(equation, a)\n    \n    # Return the time Alan takes to paint alone\n    return alan_time[0]\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    result = 55 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    # Compound interest formula A = P (1 + r/n)^(nt)\n    # where P is the principal amount, r is the annual interest rate,\n    # n is the number of times that interest is compounded per year, and t is the time the money is invested for in years.\n    # Since the interest is compounded yearly, n = 1.\n    \n    amount = principal * (1 + rate)**time\n    \n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10000 + 24\n    num2 = 3000 + 968\n    \n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "from math import gcd\n\ndef solution():\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    weeks = 26\n    total_food = weekly_food * weeks\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original score\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(x - 30, (x / 2) + 10)\n\n    # Solve for x\n    original_score = solve(equation, x)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    votes_for_peter = 35\n    \n    # To win without fail, Peter needs more than half of the total votes\n    votes_needed = (total_votes // 2) + 1\n    \n    # Number of additional votes Peter needs to win\n    additional_votes_peter_needs = votes_needed - votes_for_peter\n    \n    return additional_votes_peter_needs\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount Alex and Nicholas originally have\n    x = symbols('x')\n\n    # After spending, we have the following eqations:\n    # Nicholas has x - 13 left, Alex has x - 58 left.\n    # Nicholas has 6 times the amount Alex has left, so:\n    # (x - 13) = 6 * (x - 58)\n    equation = Eq(x - 13, 6 * (x - 58))\n\n    # Solve for x\n    original_amount = solve(equation, x)[0]\n\n    # The total amount they had together is x + x = 2x\n    total_amount = 2 * original_amount\n\n    return total_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if (sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1):\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6 * 6) - (8 * 6)\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n    \n    remainder = days_later % days_in_week\n    current_day_code = 1  # Monday is represented by 0001\n\n    ans_code = (current_day_code + remainder) % days_in_week\n    if ans_code == 0:\n        ans_code = days_in_week\n    \n    ans = '000' + str(ans_code)\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9 ** (3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    value_of_digit_6_in_decimal = 6 * 10**(-3)\n    return value_of_digit_6_in_decimal\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    # Subtract two intervals for the ends with no poles\n    adjusted_length = road_length - 2 * interval\n    # Divide the adjusted length by the interval to get number of poles\n    num_poles = adjusted_length / interval\n    return int(num_poles)\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    # Let the number of rulers be r\n    # Then the number of pencils will be r + 10\n    # The total number of pencils and rulers is 52\n\n    # r + (r + 10) = 52\n    # 2r + 10 = 52\n    # 2r = 52 - 10\n    # 2r = 42\n    # r = 42 / 2\n    r = 42 // 2  # Using integer division since we can't have a fraction of a ruler\n\n    return r\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    data_set = [11, 13, 17, 12]\n    desired_mean = 11\n\n    # Calculate the sum of the current items in the dataset\n    current_sum = sum(data_set)\n    # Calculate the total desired sum to achieve the mean of 11 with the missing number included\n    desired_sum = desired_mean * (len(data_set) + 1)\n    # Calculate the missing number (x)\n    x = desired_sum - current_sum\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The first 7 is in the thousand's place, valued at 7 * 10^3 or 7000\n    value_of_first_7 = 7 * 1000\n    \n    # The second 7 is in the ten's place, valued at 7 * 10^1 or 70\n    value_of_second_7 = 7 * 10\n    \n    # The difference between them\n    difference = value_of_first_7 - value_of_second_7\n\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure you have 4 marbles of the same colour, \n    # you might end up taking 3 red, 3 yellow, and 3 blue, not guaranteeing 4 of any.\n    # So by taking one more, which will be the 10th, you'll definitely have 4 of one colour.\n    \n    return 3 + 3 + 3 + 1\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    boys_ratio = 5\n    girls_ratio = 6\n\n    total_ratio = boys_ratio + girls_ratio\n    girls = (girls_ratio / total_ratio) * (boys / (boys_ratio / total_ratio))\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 in decimal is a repeating '3's\n    digits_sum = sum(int(digit) for digit in decimal_part)\n    return digits_sum\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    result = 15 / 100 * 29\n    return result\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    start_number = 2\n    end_number = 100\n    step = 2\n    multiples_of_twos = list(range(start_number, end_number + 1, step))\n    ans = len(multiples_of_twos)\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original concentration in container A\n    x = symbols('x')\n    \n    # After adding 10 grams of solution to container A, the amount of water is 30 grams\n    # The mass of the solute in container A is 10 * x grams\n    # Therefore, the concentration of container A is now (10 * x) / 40\n    \n    # Next, 10 grams of the mixture from container A is put into container B.\n    # Container B now has 40 + 10 = 50 grams of solution\n    # The concentration of the mixture transferred from A to B is still (10 * x) / 40\n    # So, the mass of the solute in the transferred mixture is (10 * x * 10) / 40 = x / 4\n    # Now, the concentration of container B is (x / 4) / 50\n    \n    # Finally, 10 grams of the mixture from container B is put into container C.\n    # Container C now has 50 + 10 = 60 grams of solution\n    # The concentration of the mixture transferred from B to C is (x / 4) / 50\n    # So, the mass of the solute in the transferred mixture from B to C is (10 * (x / 4)) / 50\n    # The mass of the solute in container C is (x/20) after the mixture is added\n    \n    # According to the problem, the final concentration in container C is 0.5%\n    # So we have the equation: (x/20) / 60 = 0.5 / 100\n    equation = Eq((x / 20) / 60, 0.005)\n    \n    # Solve the equation for x\n    concentration = solve(equation, x)\n    \n    # Return the original concentration in container A\n    return concentration[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 2016\n    div_2016 = divisors(2016)\n\n    # Find the triplets of ages that when multiplied last year \n    # result in 1377 and when multiplied this year result in 2016 \n    for i in range(len(div_2016)):\n        for j in range(i + 1, len(div_2016)):  # avoid duplicate pairs\n            for k in range(j + 1, len(div_2016)):  # avoid duplicate triplets\n                if div_2016[i] * div_2016[j] * div_2016[k] == 2016:\n                    age1, age2, age3 = div_2016[i], div_2016[j], div_2016[k]\n                    possible_triples = [\n                        (age1 - 1, age2, age3),\n                        (age1, age2 - 1, age3),\n                        (age1, age2, age3 - 1),\n                    ]\n\n                    for age_triplet in possible_triples:\n                        if age_triplet[0] * age_triplet[1] * age_triplet[2] == 1377:\n                            ans_2_years_ago = (age_triplet[0] - 1) * (age_triplet[1] - 1) * (age_triplet[2] - 1)\n                            return ans_2_years_ago\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    total_people = 5\n    pair_people = 2\n\n    # Treat the pair that wants to stand next to each other as one unit.\n    # Now we have total_people - pair_people + 1 \"units\" to arrange.\n    units_to_arrange = total_people - pair_people + 1\n\n    # Calculate the arrangements of these \"units\".\n    units_arrangements = math.factorial(units_to_arrange)\n\n    # The pair can be arranged in 2! ways (the two people can switch places).\n    pair_arrangements = math.factorial(pair_people)\n\n    # Total number of arrangements is the product of the two.\n    total_arrangements = units_arrangements * pair_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_3_days = 33\n    average_last_4_days = 18\n    total_last_4_days = average_last_4_days * 4\n    total_week = total_first_3_days + total_last_4_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12\n    nickel_percent1 = 40\n    weight_metal2 = 13\n    nickel_percent2 = 60\n\n    nickel_weight1 = (nickel_percent1 / 100) * weight_metal1\n    nickel_weight2 = (nickel_percent2 / 100) * weight_metal2\n\n    total_nickel = nickel_weight1 + nickel_weight2\n    total_weight = weight_metal1 + weight_metal2\n\n    nickel_concentration_percent = (total_nickel / total_weight) * 100\n\n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    mid_point = (-3 + 8) / 2\n    return mid_point\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    total_players = 8\n    # The champion would have won against all the other players\n    wins_for_champion = total_players - 1\n\n    return wins_for_champion\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    # We know that the sum of the first n natural numbers is n(n+1)/2\n    # Since an extra number (let's call it k) was added, the sum becomes n(n+1)/2 + k = 3405\n    # We need to find an n such that there exists a natural number k that satisfies the equation\n    n = 1\n    while (n * (n + 1) // 2) <= 3405:\n        # Calculate the actual sum of numbers from 1 to n\n        actual_sum = n * (n + 1) // 2\n        # Calculate the mistakenly added number k\n        k = 3405 - actual_sum\n        if 1 <= k <= n:  # if k is a natural number between 1 and n, we found our solution\n            return k\n        \n        n += 1\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # The sum of the first n terms of an arithmetic sequence can be found using the formula:\n    # S_n = n/2 * (a1 + an), where S_n is the sum, n is the number of terms,\n    # a1 is the first term and an is the nth term.\n    # Alternatively, S_n = n/2 * (2*a1 + (n-1)*d), where d is the common difference.\n    \n    # From the problem, we have two equations:\n    # S_6 = 6/2 * (a1 + a6) = 64\n    # S_12 = 12/2 * (a1 + a12) = 156\n    \n    # Define variables in terms of the first term (a1) and common difference (d)\n    # a6 = a1 + 5d, a12 = a1 + 11d\n    # Substitute into the equations:\n    # S_6 = 3 * (a1 + (a1 + 5d)) = 64\n    # S_12 = 6 * (a1 + (a1 + 11d)) = 156\n    # Simplify:\n    # 6 * a1 + 15d = 64\n    # 12 * a1 + 66d = 156\n    \n    # Now solve for a1 and d using the two equations\n    from sympy import symbols, Eq, solve\n    \n    a1, d = symbols('a1 d')\n    equation1 = Eq(6 * a1 + 15 * d, 64)\n    equation2 = Eq(12 * a1 + 66 * d, 156)\n    solutions = solve((equation1, equation2), (a1, d))\n    \n    a1_value = solutions[a1]\n    d_value = solutions[d]\n    \n    # Now find S_18\n    # S_18 = 18/2 * (2*a1 + (18-1)*d)\n    S_18 = 9 * (2 * a1_value + 17 * d_value)\n    \n    return S_18\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    chickens_before = 24 * x # x is the number of chickens in each pen before\n    chickens_after = (24 + 6) * (x - 6)\n    \n    # Since the total number of chickens does not change, we equate the two expressions\n    # 24 * x = (24 + 6) * (x - 6)\n    x = symbols('x')\n    equation = Eq(24 * x, (24 + 6) * (x - 6))\n    solution = solve(equation, x)\n    \n    # Calculate the total number of chickens using the found value of x\n    total_chickens = 24 * solution[0]\n    return total_chickens\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            # Calculate the dividend\n            dividend = divisor * quotient + remainder\n            # Check if they add up to 40\n            if divisor + dividend + quotient + remainder == 40:\n                # Add the value of dividend/quotient\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_members = 146 + 94\n    history_to_math_ratio = 7 / 8\n    history_club_members = math_club_members * history_to_math_ratio\n    return int(history_club_members)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Since on the planet Zog numbers are written in reverse, we reverse the digits of the numbers\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n\n    # Pluto performs the subtraction with the numbers in reverse\n    result = num1 - num2\n\n    # When written down by Pluto, the answer will also be in reverse\n    ans = int(str(result)[::-1])\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    num1 = 45\n    num2 = 60\n    ans = gcd(num1, num2)\n\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    difference_in_age = 2\n    brother_age = (ashley_age - 3) - difference_in_age\n    return brother_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n\n    # Distance covered by the train to pass the bridge completely\n    distance_covered = train_speed * time_to_pass\n    \n    # Length of the bridge is the total distance covered minus the length of the train\n    bridge_length = distance_covered - train_length\n    \n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n\n    return int(more_marks)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Speed of jogging\n    speed_jog = 9  # km per hour\n\n    # Speed of walking\n    speed_walk = 7.5  # km per hour\n\n    # Time spent jogging (from 6:30 am to 7:00 am)\n    time_jogging = (7 - 6) - (30 / 60)  # 0.5 hour\n\n    # Time spent walking (from 7:00 am to 8:00 am)\n    time_walking = (8 - 7)  # 1 hour\n\n    # Distance travelled while jogging\n    distance_jog = speed_jog * time_jogging\n\n    # Distance travelled while walking\n    distance_walk = speed_walk * time_walking\n\n    # Total distance travelled\n    total_distance = distance_jog + distance_walk\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the first digit (3 or 4, since it can't be 0)\n    choices_for_first_digit = 2\n\n    # There are 3 choices for the second digit (0, 3, or 4)\n    choices_for_second_digit = 3\n\n    # There are 3 choices for the third digit (0, 3, or 4)\n    choices_for_third_digit = 3\n\n    # The total number of different three-digit numbers\n    ans = choices_for_first_digit * choices_for_second_digit * choices_for_third_digit\n\n    return ans\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n    equation = Eq(wins, 2 * losses)\n    total_games = Eq(wins + losses, 63)\n\n    solutions = solve((equation, total_games), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of animals initially\n    x = symbols('x')\n    initial_cows = 0.65 * x\n    initial_goats = x - initial_cows\n    \n    # 240 more cows and goats were added\n    new_total = x + 240\n    \n    # The percentage of cows became 65% + 20% = 85%\n    # The number of goats doubled\n    new_cows = 0.85 * new_total\n    new_goats = 2 * initial_goats\n    \n    # Since all the animals are either cows or goats, their numbers should add up to the new_total\n    equation = Eq(initial_cows + 240, new_cows)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Calculate initial number of goats\n    initial_goats_number = solution[0] * (1 - 0.65)\n\n    return round(initial_goats_number)\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle is (sqrt(3) / 4) * side^2\n    from math import sqrt\n    \n    area_triangle_x = (sqrt(3) / 4) * (3 ** 2)\n    area_triangle_y = (sqrt(3) / 4) * (9 ** 2)\n    \n    # The number of times Triangle X can fit into Triangle Y\n    # is the ratio of the area of Triangle Y to the area of Triangle X\n    num_times = area_triangle_y / area_triangle_x\n    \n    return int(num_times)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from itertools import permutations\nfrom math import factorial\n\ndef solution():\n    girl_group = 'G'\n    boys = 'BBB'\n    teachers = 'TTT'\n    \n    # Step 1: Consider the girls as a single unit plus the 3 teachers\n    # and find all permutations of this group.\n    # This is a permutation of 4 unique elements taken 4 at a time.\n    girls_teachers_perms = factorial(4)\n    \n    # Step 2: Now distribute the 3 boys in the 4 slots available around the girls and the teachers.\n    # the boys can't stand next to each other, so we can't place them in adjacent slots.\n    # For each permutation of girls and teachers, we have 4 slots and we need to choose 3 of them for the boys.\n    slots = 4\n    boys_perms = factorial(slots) // factorial(slots - 3)\n    \n    # Step 3: Finally, multiply the two previous results to get the total number of ways they can stand in line.\n    # This accounts for the permutation of the girls among themselves.\n    total_ways = girls_teachers_perms * boys_perms * factorial(3)\n    \n    return total_ways\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = 5 * x * 12 + 3 * x * 5\n\n    equation = Eq(total_cost, 120)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_to_choose = 2\n    ways_to_choose = comb(num_students, num_to_choose)\n    return ways_to_choose\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_value = 8 * 9 * 10\n    smaller_value = 1 * 2 * 3\n    ans = larger_value - smaller_value\n    return ans\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    term1 = 55\n    term2 = 44\n\n    ans = common_factor * (term1 - term2)\n    return ans\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # 1 soup of the day + 1 option of not having soup\n    desserts = 3  # 2 desserts + 1 option of not having dessert\n    \n    combinations = appetisers * main_courses * soups * desserts\n    \n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for n in range(100, 201):\n        if n % 8 == 3 and n % 9 == 1:\n            return n\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # a is the first term, d is the common difference, n is the number of terms\n    a = 6\n    d = 5\n    # to find n, use the formula for the nth term of arithmetic sequence: an = a + (n-1)d\n    # last term l = a + (n-1)d gives n = (l - a)/d + 1\n    l = 41\n    n = (l - a)//d + 1\n    \n    # sum of n terms in arithmetic sequence is given by: S = n/2*(2a + (n-1)d)\n    S = n/2 * (2*a + (n-1)*d)\n    return int(S)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_weight_in_rabbits = 8\n    rabbit_weight_in_chickens = 2\n    dog_weight_in_chickens = dog_weight_in_rabbits * rabbit_weight_in_chickens\n\n    return dog_weight_in_chickens\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let b be the number of blue balls in the bag\n    b = symbols('b', integer=True)\n\n    # Total number of ways to choose 2 balls out of 4 red and b blue balls\n    total_ways = (4 + b) * (3 + b) / 2\n\n    # Number of ways to choose 2 red balls\n    red_ways = 4 * 3 / 2\n\n    # Setting up the equation for the probability\n    equation = Eq(red_ways / total_ways, 2/7)\n\n    # Solving for the number of blue balls\n    blue_balls = solve(equation, b)\n\n    # Return only the positive integer solution\n    return blue_balls[0]\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n\n    # factorize 2^27\n    # each number can only be 1, 2, 4, or 8, which are powers of 2\n    # 2^27 can be factored as 2^(1*1 + 3*1 + 9*7) => one '2', one '8', and seven '4's\n\n    # count permutations to arrange the digits (1 '2', 1 '8', 7 '4's)\n    count_permutations = factorial(10) // (factorial(1) * factorial(1) * factorial(7))\n    \n    # all permutations should be multiplied by 9, since the leading digit cannot be 0\n    count_permutations *= 9\n    \n    return count_permutations\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices of the cake at first\n    # After giving away 2 slices and having 4 slices left, Terry's family would have eaten x - 2 - 4 slices\n    # Since the family ate 3/5 of the cake, the equation can be set as 3/5 * x = x - 2 - 4\n    # Solving for x gives x = (6/5) * (2 + 4)\n    \n    x = (6/5) * (2 + 4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the time Mike takes to finish the job by himself\n    # Let d be the time Danny takes to finish the job by himself\n    m, d = symbols('m d')\n    \n    # If they work together and finish in 10 hours, they complete 1/10 of the work per hour together\n    # So, their combined work rate is 1/m + 1/d = 1/10\n    equation1 = Eq(1/m + 1/d, 1/10)\n    \n    # If Mike types for 8 hours, he completes 8/m of the work\n    # If Danny types for 13 hours, he completes 13/d of the work\n    # Together, they finish the job, so 8/m + 13/d = 1\n    equation2 = Eq(8/m + 13/d, 1)\n    \n    # Solve the system of equations for m and d\n    solutions = solve((equation1, equation2), (m, d))\n    \n    # Return the time Danny takes to finish the job by himself\n    return float(solutions[d])\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    numbers = [51, 50, -45, 40, -35, 30, -25, 20, -15]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    # Place value of first 3 is in ten thousands (10,000)\n    place_value_first_3 = 3 * 10**4\n\n    # Place value of second 3 is in the hundreds (100)\n    place_value_second_3 = 3 * 10**2\n\n    # The difference between the place values\n    difference = place_value_first_3 - place_value_second_3\n\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    for m in range(1, 66):\n        total = sum(m + i for i in range(11))\n        if total == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n\n    # Since the chess pieces are placed every 3 cm,\n    # the number of pieces on one side will be the side_length divided by the interval.\n    # However, since chess pieces can be placed in the corners, we subtract 1 to avoid counting corners twice.\n    pieces_per_side = side_length // interval - 1\n\n    # The total number of pieces is the number of pieces per side times four (for each side of the square),\n    # plus 4 to add the corner pieces that were subtracted earlier.\n    total_pieces = 4 * pieces_per_side + 4\n\n    return total_pieces\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Initially, let's aim for only four instances for each number to minimize the red squares\n    # We start by using 0-9, 4 times each, which accounts for 40 squares (4 instances * 10 numbers)\n    base_squares = 4 * 10\n\n    # The remaining 60 squares can only have numbers appear up to 4 times because\n    # if any number appears 5 times or more, the squares with that number would be painted red.\n    # To minimize the number of red squares, we should use the remaining 10 digits\n    # 4 times each again until we reach 100 squares.\n    # Each set of 10 digits accounts for another 4*10=40 squares, which we can do once more\n    # without causing any squares to turn red.\n    remaining_squares = 4 * 10\n\n    # After using 4 groups of 10 digits (4 + 4), we have 4*10*2 = 80 non-red squares.\n    # We still have 100 - 80 = 20 squares left.\n    # These 20 squares can be filled with any digits but should not reach the count of 5 for any digit.\n    # The best strategy is to use each number twice in the next 20 squares, so no new red squares are created.\n    # We ensure that no digit appears 5 times or more.\n\n    # Total non-red squares = (4 instances * 10 numbers) + (4 instances * 10 numbers) + (2 instances * 10 numbers)\n    non_red_squares = base_squares + remaining_squares + (2 * 10)\n\n    # Total squares = 100\n    # Red squares = Total squares - Non-red squares\n    red_squares = 100 - non_red_squares\n\n    return red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # This is a negative number\n\n    # Calculate the number of terms until the first negative term.\n    # For an arithmetic sequence, the nth term is given by:\n    # An = A1 + (n - 1) * d\n    # Where, An = nth term, A1 = first term, n = number of terms, d = common difference.\n    # We want An < 0, so:\n    # A1 + (n - 1) * d < 0\n    # n > (A1 / -d) + 1\n    # Since n must be an integer, we take the ceiling of the right-hand side.\n\n    # Rearrange the inequality to solve for n\n    n = (first_term / -common_difference) + 1\n\n    # Since we need the first negative term, and terms are descending,\n    # we need the first whole number greater than the result.\n    ans = int(n)\n\n    return ans\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_gave = 4 / 5\n\n    remaining_money = initial_money - spent_money + father_gave\n\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    result = 3*m - 1 + m\n    return result\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    num_cases = 2\n    min_pencils = (total_pencils + num_cases - 1) // num_cases\n\n    return min_pencils\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    zeros_needed = 28\n    count_2 = 0\n    count_5 = 0\n    n = 1\n    while True:\n        temp_n = n\n        while temp_n % 2 == 0:\n            count_2 += 1\n            temp_n //= 2\n        while temp_n % 5 == 0:\n            count_5 += 1\n            temp_n //= 5\n        if min(count_2, count_5) >= zeros_needed:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # speed of Tim\n    speed_tim = 56\n    # speed of Bob\n    speed_bob = 74\n    \n    # initial distance between them\n    initial_distance = 780\n    # remaining distance when they meet for the first time\n    remaining_distance = 130\n    \n    # combined speed at which they are approaching each other\n    combined_speed = speed_tim + speed_bob\n\n    # distance covered when they meet for the first time\n    distance_covered = initial_distance - remaining_distance\n\n    # time taken to cover the distance covered\n    time_taken = distance_covered / combined_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    known_numbers_sum = sum([3, 4, 6, 10])\n    total_sum = mean_value * 5  # Since there are 5 numbers and the mean is given as 5.\n\n    fifth_number = total_sum - known_numbers_sum\n\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import gcd\n    from functools import reduce\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    return reduce(lcm, [4, 7, 8])\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2022 + 1):\n        digits = set(str(year))\n        if len(digits) == 4 and max(digits) == str(min(int(min(digits)) + 3, 9)):\n            perms = set(permutations(digits))\n            for perm in perms:\n                y = int(''.join(perm))\n                if 1000 <= y <= 2022:\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    recurring_part = \"8354\"\n    length_of_recurring_part = len(recurring_part)\n    sum_of_recurring_part = sum(int(digit) for digit in recurring_part)\n\n    full_repeats = 84 // length_of_recurring_part\n    remaining_digits = 84 % length_of_recurring_part\n\n    ans = full_repeats * sum_of_recurring_part + sum(int(digit) for digit in recurring_part[:remaining_digits])\n\n    return ans\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n    total_distance = eddie + jenny + jason\n    num_people = 3\n    \n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # Only 32^2 to 99^2 will give us a 4-digit number\n        num = i ** 2\n        str_num = str(num)\n        if str_num[0] == str_num[1] and str_num[2] == str_num[3]:\n            return num\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Time between strikes\n    time_between_strikes = (43 - 3*6) / (6 - 1)\n\n    # Total time for 12 strikes\n    total_time_12_strikes = 3*12 + time_between_strikes*(12 - 1)\n    \n    return int(total_time_12_strikes)\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # To solve this problem, we'll use the formula for combinations with repetition:\n    # C(n + r - 1, r) where n is the number of types of items to choose from (pens) \n    # and r is the number of items being chosen (kids - 1 since each gets at least one pen).\n    n = 20 - 6  # Subtract 6 because each kid gets at least one pen\n    r = 6 - 1   # Subtract 1 because we're distributing the remaining pens after one for each kid\n    \n    # Calculate combinations using factorial\n    ans = factorial(n + r) // (factorial(n) * factorial(r))\n    \n    return ans\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    ans = 53 * 58\n    return ans\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students_initially_left_out = 5\n    students_joined_later = 18\n    total_students_left_out = students_initially_left_out + students_joined_later\n    m_squared = int(total_students_left_out ** 0.5) ** 2  # Since n^2 - m^2 should be 23 (18 new students + 5 leftover)\n    m = int(m_squared ** 0.5)\n    original_students = m_squared - students_initially_left_out\n    return original_students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_target = 2\n\n    work_rate_per_person = 1 / (people_initial * time_initial)\n    total_work = work_rate_per_person * time_initial\n\n    people_needed = total_work / (work_rate_per_person * time_target)\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n    minutes_in_an_hour = 60\n\n    total_time_hours = (time_per_quiz_minutes * total_quizzes) / minutes_in_an_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # No. of all possible 3-digit numbers (1-9)(0-9)(0-9)\n    without_zero = 9 * 9 * 9  # No. of 3-digit numbers without zero (1-9)(1-9)(1-9)\n\n    # At least one zero means total possible numbers minus the numbers with no zeros\n    numbers_with_at_least_one_zero = total_three_digit_numbers - without_zero\n\n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # kilogram\n    speed = 30  # meters per second\n    kinetic_energy = 0.5 * mass * speed ** 2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1 and number % 4 == 1 and number % 5 == 1 and number % 7 == 2):\n            ans = number\n            break\n    return ans\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term\n    n = 7\n\n    seventh_term = first_term + (n - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    ones_place = 9  # greatest odd number for ones place\n    hundreds_tens_sum = 13  # sum of hundreds and tens place\n\n    # Find suitable pairs for hundreds and tens place that add up to 13.\n    for hundreds_place in range(1, 10):\n        tens_place = hundreds_tens_sum - hundreds_place\n        if 0 < tens_place < 10 and tens_place != ones_place and tens_place != hundreds_place:\n            # Form the smallest possible number by choosing the smallest digit for the thousands place.\n            for thousands_place in range(1, 10):\n                if (thousands_place != ones_place \n                    and thousands_place != tens_place \n                    and thousands_place != hundreds_place):\n                    number = int(f\"{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n                    return number\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    combined_distance = 225\n    ratio_kevin_to_jerry = 1.5\n    # since Kevin drives 1.5 times faster than Jerry, we divide the combined distance\n    # by (1 + 1.5) to get the distance Jerry drives\n    jerry_distance = combined_distance / (1 + ratio_kevin_to_jerry)\n\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # After n cuts, there will always be n+1 pieces.\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    pictures_to_hang = 10\n\n    # Since the pictures are equally spaced, calculate the total gap space\n    total_gap_space = wall_width - (pictures_to_hang * picture_width)\n\n    # The number of gaps between 10 pictures is 9\n    gaps = pictures_to_hang - 1\n\n    # Calculate the gap width between the pictures\n    gap_width = total_gap_space / gaps\n\n    # Find the distance to the center of the wall (half the wall width)\n    center_wall = wall_width / 2\n    \n    # The center of the third picture from the left, considering two pictures (each of 210mm) and one gap in between\n    distance_to_third_picture_center = (2 * picture_width) + (1 * gap_width) + (gap_width / 2)\n\n    # The distance from the center of the third picture to the wall's center\n    distance_from_wall_center = distance_to_third_picture_center - center_wall\n\n    return distance_from_wall_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 100  # Consider the original height as 100 for simplicity\n    bounce_height = 75  # Percentage of the height it bounces to, 75% of the previous height\n    threshold_height = 25  # Height threshold to stop counting bounces, 25% of the original height\n\n    count = 0\n    current_height = original_height\n\n    while current_height >= threshold_height:\n        current_height *= bounce_height / 100\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    numbers = [5, 8, 11, 14, 17, 20]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 3 * x + 2, 30 + 6 * x - 8 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    \n    uncle_current_age = doris_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    annabella_price = banana_price + apple_price\n\n    return annabella_price\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Timothy's initial guess\n    timothy_guess = 7\n    \n    # Given: 5 < 8, therefore 8 must have regrouped from the next column\n    # So, we deduce that regrouping from the next column adds 10 to 8 making it 18\n    result_after_regrouping = 18 \n    \n    # Now, we calculate the correct answer by subtracting 5\n    correct_answer = result_after_regrouping - 5\n    \n    # Check if Timothy's guess is correct\n    return correct_answer == timothy_guess\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    equation = Eq(money - 200 - (2/7) * (money - 200), (1/3) * money)\n\n    ans = solve(equation, money)[0]\n\n    return ans\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Treat Tom and Harry as a single entity, so there are 6 entities to arrange\n    # (Tom and Harry, and the other 5 students).\n    entity_count = 6  \n\n    # Since there are 6 entities and Ronda must take one specific position,\n    # we are arranging the remaining 5 places.\n    # Tom and Harry can be arranged in 2! ways because they can switch places.\n    \n    tom_harry_arrangements = factorial(2)\n    \n    # The other 5 students can be arranged in 5! ways.\n    students_arrangements = factorial(5)\n    \n    # Multiplying them to get the total arrangements.\n    total_arrangements = tom_harry_arrangements * students_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest = 1.05**3\n    second_interest = 1.08**2\n    \n    amount_after_three_years = initial_investment * first_interest\n    final_amount = amount_after_three_years * second_interest\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    rounding_increment = 100\n\n    # To find the lowest possible price before rounding, we need to find the largest number that is less\n    # than halfway to the next rounding increment.\n    #\n    # Since we're rounding to the nearest $100, any price from $124,950 to $125,049 would be rounded to $125,000.\n    # That is because $124,950 is the first number that rounds up to $125,000 and $125,049 is the last \n    # number that does not quite round up to $125,100. \n    \n    # So the upper limit of the rounding range for $125,000 is $125,049\n    upper_limit = rounded_price + rounding_increment / 2 - 1\n    \n    # Therefore, the lowest possible price is one less than the upper limit of the rounding range.\n    lowest_possible_price = upper_limit - rounding_increment + 1\n\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the usual speed be 's' km/h and the usual time be 't' hours.\n    s, t = symbols('s t')\n\n    # Setting up the equations based on the problem statement\n    # The distance between cities is s * t\n    # When speed is increased by 20%, time taken is t - 1\n    # When the first 200 km is travelled at usual speed 's', and the remaining distance at 1.25s, time is saved by 12 minutes (1/5 of an hour)\n    equation1 = Eq(s * t, s * 1.2 * (t - 1))  # 20% increase in speed\n    equation2 = Eq(200 / s + (s * t - 200) / (1.25 * s), t - 1 / 5)  # 25% increase in speed after first 200 km\n\n    # Solve the system of equations for 's' and 't'\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Calculate the distance\n    distance = solutions[s] * solutions[t]\n    return distance\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total = 4 * 89\n    target_average = 95\n\n    additional_tests = 0\n    while True:\n        additional_total = additional_tests * 100\n        new_average = (current_total + additional_total) / (4 + additional_tests)\n        if new_average >= target_average:\n            break\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    speed1 = 9\n    time1 = distance1 / speed1\n    \n    distance2 = 300\n    speed2 = 6\n    time2 = distance2 / speed2\n    \n    distance3 = 1000 - distance1 - distance2\n    speed3 = 10\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_current_age = 10\n    uncle_future_age = 40\n\n    age_difference = uncle_future_age - doris_current_age\n    uncle_current_age = doris_current_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # m/s\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the initial number of sheep and c the initial number of cows\n    s, c = symbols('s c')\n    \n    equation1 = Eq(s, (5/7) * c)  # Given relation between sheep and cows\n    equation2 = Eq(c - 7, (3/4) * (s + 21))  # Relation after the change\n    \n    # Solve the system of equations for s and c\n    solutions = solve((equation1, equation2), (s, c))\n    \n    # Extract the number of sheep from the solution\n    initial_sheep = solutions[s]\n    \n    return initial_sheep\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one book and one pencil box\n    book, pencil_box = symbols('book pencil_box')\n\n    # Equation 1: 2 * book + 3 * pencil_box = 42\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n\n    # Equation 2: 2 * book + 6 * pencil_box = 60\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    # The solution is the cost for each pencil box\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = (8 * 60) + 30  # 8 hours and 30 minutes expressed in minutes\n    end_time = (9 * 60) + 25    # 9 hours and 25 minutes expressed in minutes\n\n    n = end_time - start_time\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_time = 6\n    B_time = A_time * 2\n    work_per_day_A = 1 / A_time\n    work_per_day_B = 1 / B_time\n    total_work_per_day = work_per_day_A + work_per_day_B\n    total_time = 1 / total_work_per_day\n    return total_time\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    current_sum = 22\n    target_sum = 30\n    years_to_pass = target_sum - current_sum\n\n    return years_to_pass\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50\n    mamee_cost = haribo_cost - 30\n    jelly_cost = 6 * mamee_cost\n\n    return jelly_cost / 100\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n    \n    anna_share = 3/8 * total_candies\n    belle_share = 1/4 * total_candies\n    cathy_and_dawn_share = total_candies - anna_share - belle_share\n    \n    equation = Eq(anna_share + belle_share, cathy_and_dawn_share + 90)\n    \n    solutions = solve(equation, total_candies)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    return (18 * 32) // 36\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_after_joel = 4\n    removed_by_joel = (remaining_after_joel + 2) * 2\n    total_after_valerie = remaining_after_joel + removed_by_joel\n    removed_by_valerie = (total_after_valerie + 3) * 2\n    total_after_ethan = total_after_valerie + removed_by_valerie\n    removed_by_ethan = (total_after_ethan + 1) * 2\n    original_plants = total_after_ethan + removed_by_ethan\n    \n    return original_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fish balls Mr. Tan made at first\n    x = symbols('x')\n\n    # He sold 3/4 in the morning, leaving 1/4\n    morning_left = x - (3/4) * x\n\n    # He sold 1/3 of the remaining in the afternoon, leaving 2/3\n    afternoon_left = morning_left - (1/3) * morning_left\n\n    # After making another 506 fish balls, he had twice what he had at first\n    total_after_additional = afternoon_left + 506\n\n    # Set up the equation according to the problem statement\n    equation = Eq(total_after_additional, 2 * x)\n\n    # Solve for x using sympy's solve function\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations according to the problem\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((chocolate - chocolate / 6) +\n                   (vanilla - 2 * vanilla / 3) +\n                   (blueberry - 7 * blueberry / 9), 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    # Return the number of chocolate cupcakes sold\n    return chocolate_sold\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5 / 8) * 92 + 7 * 0.625 + (62.5 / 100)\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boy_to_girl_ratio = 2 / 7\n    girls = boys / boy_to_girl_ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    # Given\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    \n    # Price for 2 cheese cakes\n    price_2_cheese_cakes = 2 * cheese_cake_price\n    \n    return price_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    seeds_died = total_seeds / 4\n    sunflowers_grown = total_seeds - seeds_died\n    \n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "import math\n\ndef solution():\n    n = 36\n    num_factors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:  # i is a perfect square\n                num_factors += 1\n            else:\n                num_factors += 2  # i and n//i are factors\n    return num_factors\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    total_green_apples = pigs * green_apples_per_pig\n    total_red_apples = pigs * red_apples_per_two_pigs\n\n    total_apples = total_green_apples + total_red_apples\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_days = 15\n    pocket_money = 100\n    daily_change = 10 - 8\n\n    # Calculate full cycles (of deposit and spending)\n    full_cycles = total_days // 2\n\n    # Calculate money after full cycles\n    money_after_full_cycles = pocket_money + full_cycles * daily_change\n\n    # Check if there's an extra day for deposit\n    if total_days % 2 == 1:\n        money_after_full_cycles += 10  # deposit an extra £10\n\n    return money_after_full_cycles\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    answer = 54\n    result_after_addition = answer * 4\n    original_number_multiplied_by_2 = result_after_addition - 178\n    original_number = original_number_multiplied_by_2 / 2\n\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!  # Total ways without any restriction\n    \n    # Ways where Claire and Tony sit across each other\n    # In this case, we consider Claire's position fixed.\n    # Tony, being exactly opposite, has only 1 position.\n    # The remaining two people can be arranged in 2! ways.\n    restricted_ways = 1 * 1 * 2!\n    \n    # Subtract restricted ways from total ways\n    ans = total_ways - restricted_ways\n    \n    return ans\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let the original speed be v km/h, and the distance be d km.\n    # If she keeps her original speed, she will travel d = v * 8\n    # If she increases her speed by 5 km/h, she will travel the same distance in 7 hours.\n    # So, d = (v + 5) * 7\n    # Equate the two expressions for d to find v:\n    # v * 8 = (v + 5) * 7\n    # 8v = 7v + 35\n    v = 35  # speed in km/h\n\n    # Use v to find the distance\n    d = v * 8  # distance in km\n\n    return d\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    perm_numbers = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = perm_numbers[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 0\n    while (1 << test_tubes) < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for prices of shirt and pair of pants\n    shirt, pants = symbols('shirt pants')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    # Calculate the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[shirt] + solutions[pants]\n\n    return total_price\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Let x be the total number of stickers Charlotte had initially.\n    # Let y be the total number of stickers Alexis had initially.\n    # According to the problem, Marry had 7/12 of the total stickers and Alexis had 5/12.\n    # When Marry gives 20%, she gives 0.2 * (7/12) * (x + y).\n    # When Alexis gives 20%, she gives 0.2 * (5/12) * (x + y).\n    # Charlotte's stickers increase by 80%, which means it becomes 1.8 * x.\n    # Marry has 20 stickers more than Charlotte in the end.\n    \n    # Then we have the following equations:\n    # New number of stickers Charlotte has = initial stickers + stickers given by Marry + stickers given by Alexis\n    # 1.8 * x = x + 0.2 * (7/12) * (x + y) + 0.2 * (5/12) * (x + y)\n    # Then Marry has:\n    # Marry = x + y - 0.2 * (7/12) * (x + y)\n    # It was given that Marry had 20 stickers more than Charlotte after giving away stickers:\n    # Marry - 20 = 1.8 * x\n   \n    # From the above equation, we can solve for x and y:\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols(\"x y\")\n\n    # Define the equations based on the above description\n    equation1 = Eq(1.8 * x, x + 0.2 * (7/12) * (x + y) + 0.2 * (5/12) * (x + y))\n    equation2 = Eq((x + y) - 0.2 * (7/12) * (x + y), 1.8 * x + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Since we're looking for the number of stickers Alexis had initially (which is 5/12 of the total),\n    # and we've found y (which represents the total stickers both initially had),\n    # we need to calculate 5/12 of y to get Alexis's initial number of stickers.\n    alexis_initial_stickers = (5/12) * solutions[y]\n\n    return alexis_initial_stickers\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance_with_10_chairs = 36  # meters\n    # When 10 chairs are placed, there are 9 spaces between them\n    num_spaces_with_10_chairs = 10 - 1\n    # Distance between each chair when there are 10 chairs\n    distance_between_each_with_10_chairs = total_distance_with_10_chairs / num_spaces_with_10_chairs\n\n    # If Sarah removes 3 chairs, there are 7 chairs left\n    num_chairs_after_removal = 10 - 3\n    # Number of spaces when there are 7 chairs\n    num_spaces_with_7_chairs = num_chairs_after_removal - 1\n    # The total distance is unchanged, so we can recalculate the distance between chairs now\n    new_distance_between_each = distance_between_each_with_10_chairs * num_spaces_with_10_chairs / num_spaces_with_7_chairs\n\n    return new_distance_between_each\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the fourth angle as 'x' and the third angle as '5x'\n    # Since we have two right angles each of 90 degrees in a quadrilateral\n    x = symbols('x')\n    \n    # sum of angles in a quadrilateral is 360 degrees\n    equation = Eq(90 + 90 + 5*x + x, 360)\n    \n    # solving the equation for x\n    solutions = solve(equation, x)\n\n    # largest angle is five times the smallest angle\n    largest_angle = 5 * solutions[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Each brother has to have at least 2 books, so we distribute 2 books to each first.\n    remaining_books = 10 - 2*3\n    # Now we have 4 books left to distribute, and we need to find the partitions of 4 where\n    # all parts are non-negative, since a brother can have only 2 books (no books are left to distribute).\n\n    # Let x, y, z represent the additional books each of the three brothers gets.\n    # We are looking for the number of non-negative integer solutions to the equation:\n    # x + y + z = 4\n\n    for x in range(remaining_books + 1):\n        for y in range(remaining_books + 1 - x):\n            z = remaining_books - x - y\n            count += 1\n    return count\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n    \n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def ways_to_step(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_step(n-1) + ways_to_step(n-2) + ways_to_step(n-3)\n\n    total_ways = ways_to_step(4) * ways_to_step(5)  # Step before the muddy step and after\n    return total_ways\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "from sympy.solvers import diophantine\nfrom sympy import symbols\n\ndef solution():\n    s, m, l = symbols('s m l', integer=True)\n    dioph_eq = diophantine(5*s + 7*m + 10*l - 54)\n    min_boxes = float('inf')\n    for sol in dioph_eq:\n        num_boxes = sol[0] + sol[1] + sol[2]\n        if num_boxes >= 0 and num_boxes < min_boxes:\n            min_boxes = num_boxes\n    return int(min_boxes)\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorization of 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n // i\n\n    # The two 2-digit numbers that are multiples of 7 are in the prime factors\n    two_digit_multiples = [i for i in prime_factors if 10 <= i <= 99]\n\n    # Calculate the sum of the two multiples\n    ans = sum(two_digit_multiples)\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = [i for i in range(1, 10) for _ in range(i)]\n    median = sequence[len(sequence) // 2]\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    single_entrance_capacity = 25\n\n    # Time for the line to clear with one entrance (given)\n    single_entrance_clear_time = 16\n    \n    # Calculate the number of visitors in 16 min\n    total_visitors_single_entrance = visitors_per_minute * single_entrance_clear_time\n    \n    # Now calculate time to clear with two entrances\n    double_entrance_capacity = 2 * single_entrance_capacity\n    double_entrance_clear_time = total_visitors_single_entrance / double_entrance_capacity\n    \n    return double_entrance_clear_time\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    time_hours = 15 / 60  # 15 minutes in hours\n    distance_miles = miles_per_hour * time_hours\n    miles_to_kilometers = 1.60934  # conversion factor\n    distance_kilometers = distance_miles * miles_to_kilometers\n    return distance_kilometers\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the initial number of frogs be x and dragonflies be y\n    frogs, dragonflies = symbols('frogs dragonflies')\n    \n    # Original counts relationship\n    equation1 = Eq(frogs, dragonflies + 9)\n    \n    # Counts after the magic show\n    equation2 = Eq(frogs - dragonflies, 11 - 10)\n    \n    # Solving the two equations for the two variables\n    solutions = solve((equation1, equation2), (frogs, dragonflies))\n    \n    return solutions[frogs]\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance = climb_distance - slide_distance\n\n    day_count = (total_distance - climb_distance) // net_distance\n    if (total_distance - climb_distance) % net_distance != 0:\n        day_count += 1\n\n    # Add the final day when the snail climbs out\n    ans = day_count + 1\n    return ans\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_cookies = 8\n    cookies_per_bottle = 4\n    remaining_cookies = total_cookies - given_cookies\n    num_bottles = remaining_cookies / cookies_per_bottle\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n    \n    # Equation 1: cookies = muffins + 24\n    equation1 = Eq(cookies, muffins + 24)\n    \n    # Equation 2: 3/4*muffins + 5/8*cookies = 74\n    equation2 = Eq(3/4 * muffins + 5/8 * cookies, 74)\n    \n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    # Find the largest three-digit number and the smallest three-digit number\n    largest_three_digit_number = 999\n    smallest_three_digit_number = 100\n\n    # Find the greatest multiple of 25 within the three-digit range\n    greatest_multiple_of_25 = (largest_three_digit_number // 25) * 25\n\n    # Ensure it is a three-digit number\n    if greatest_multiple_of_25 < smallest_three_digit_number:\n        greatest_multiple_of_25 += 25\n\n    return greatest_multiple_of_25\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assume the cost for each person is the same, including Richard\n    total_money = 40\n    cost_per_person = 7  # Example value, assuming met, coffee, and entry fee costs\n\n    # Since Richard must also pay for himself, we subtract his cost first\n    remaining_money = total_money - cost_per_person\n\n    # The number of friends Richard can treat is the remaining money\n    # divided by the cost per person\n    num_friends = remaining_money // cost_per_person\n\n    return num_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")\n        if number % 9 == 0 and number % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    speed_ratio_driver_to_cyclist = 13 / 2\n    additional_time_for_cyclist_in_minutes = 143\n\n    # Let t be the time in minutes it takes for the driver to reach the destination\n    # The distance can be considered as (speed of driver * time of driver)\n    # The time for the cyclist can be written as: time of driver + additional time for cyclist\n    # Since they travel the same distance, we have the equation:\n    # speed of driver / speed of cyclist = (time of cyclist) / (time of driver)\n    # Applying the speed ratio and given additional time:\n    # 13/2 = (t + 143) / t\n    # 13t = 2(t + 143)\n    # 13t = 2t + 286\n    # 11t = 286\n    t = 286 / 11\n\n    return t\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i**3 for i in range(2, n+1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = (48 - 47) + (46 - 45) + (44 - 43) + (42 - 41) + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    cost_sausage_rolls = 4 * 24\n    cost_hotdogs = 5 * 81\n    cost_drinks = 7 * 20\n    total_cost = cost_sausage_rolls + cost_hotdogs + cost_drinks\n    return total_cost\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins on the table\n    x = symbols('x')\n\n    # Equation: one quarter showing heads (1/4)x, after flipping two more, one third showing head (1/3)x\n    # 1/4*x + 2 = 1/3*x\n\n    equation = Eq(1/4 * x + 2, 1/3 * x)\n    # Solve for x\n    total_coins = solve(equation, x)[0]\n\n    return total_coins\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "def solution():\n    from math import factorial\n\n    # There are 5 singing shows and 3 comedy shows.\n    # To avoid consecutive comedy shows, we can consider inserting the 3 comedy shows into the 6 slots created by the 5 singing shows as follows:\n    # S _ S _ S _ S _ S : (S denotes singing show, the underscores are places to insert comedy shows)\n    # Since there are only 3 comedy shows, we will be choosing 3 slots from the 6 available.\n    # The number of ways to choose 3 slots from 6 is given by the combination C(6,3).\n    # After choosing the slots, we can arrange the 5 singing shows and 3 comedy shows independently amongst themselves,\n    # that is 5! for singing and 3! for comedy shows.\n    \n    num_slots = 6  # 5 singing shows create 6 slots\n    num_comedy = 3\n    num_singing = 5\n\n    # Calculate the number of ways to choose 3 slots from 6 available slots for comedy shows\n    choices_for_comedy = factorial(num_slots) // (factorial(num_comedy) * factorial(num_slots - num_comedy))\n\n    # Calculate the number of ways to arrange the singing and comedy shows independently\n    arrangements_singing = factorial(num_singing)\n    arrangements_comedy = factorial(num_comedy)\n\n    # Total number of arrangements\n    total_arrangements = choices_for_comedy * arrangements_singing * arrangements_comedy\n\n    return total_arrangements\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n    \n    return trains + cars + flights\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Assuming one statement is correct, we'll use logical reasoning to find out which one.\n    \n    # If statement 1 is correct, then all statements including itself must be correct, \n    # which would contradict the fact that only one statement can be correct. \n    # Therefore, statement 1 cannot be correct.\n\n    # If statement 2 is correct, then none of the statements including itself would be correct, \n    # which is a contradiction because if statement 2 is correct, it cannot also be not correct. \n    # So statement 2 cannot be the correct one.\n\n    # If statement 3 is correct, it implies that exactly one of statements 1 or 2 is correct, \n    # but we have already established that neither of them can be correct, \n    # so statement 3 cannot be the correct one.\n\n    # If statement 4 is correct, it means all of statements 1, 2 and 3 are correct, \n    # which cannot be the case as we know only one statement can be correct. \n    # Hence, statement 4 is also not correct.\n\n    # By process of elimination, the only statement left is statement 5, which if correct, \n    # it implies that all other statements are not correct, which makes sense as we have \n    # logically deduced that statements 1, 2, 3, and 4 are not correct.\n\n    return 5\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_length = 500\n    total_days = 5\n    length_per_day = total_length / total_days\n    return length_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Given recurring decimals\n    recurring_decimals = [\n        \"2\",\n        \"03\",\n        \"004\",\n        \"0005\",\n        \"00006\",\n        # This pattern continues...\n    ]\n\n    # Generate the sequence needed by concatenating the recurring decimals\n    sequence = \"\"\n    # We keep adding until we have at least 2100 digits after the decimal point\n    while len(sequence) < 2100:\n        for rd in recurring_decimals:\n            sequence += rd * (2100 // len(rd) + 1)\n\n    # Take only the first 2100 digits after the decimal point\n    sequence = sequence[:2100]\n\n    # Calculate the sum of those digits\n    ans = sum(int(digit) for digit in sequence)\n\n    return ans\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_numbers = sorted(numbers)\n    middle_index = len(sorted_numbers) // 2\n    ans = sorted_numbers[middle_index]\n    return ans\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let's denote the original number as 'x'.\n    # According to the problem:\n    # (x / 2) - 9 = 12\n    # Now solve for 'x'\n    x = (12 + 9) * 2\n    \n    return x\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    num_people = 6\n    num_seats = 8\n\n    # Circular permutations for n people at (n-1)!\n    # Since rotating doesn't change the order, we consider one seat as fixed.\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    all_combinations = list(permutations(digits, 4))\n\n    valid_combinations = [int(''.join(map(str, comb))) for comb in all_combinations if comb[-1] in even_digits]\n\n    return min(valid_combinations)\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of steps Peter takes when the escalator is not moving.\n    x = symbols('x')\n\n    # Walking 1 step per second, takes 10 seconds to reach the top\n    # Walking 2 steps per second, takes 8 seconds to reach the top\n    # During these times, the escalator moves some steps too.\n    # 1*x + 10 = speed of escalator * 10 = 2*x + 16 = speed of escalator * 8\n    equation1 = Eq(1 * x + 10, 2 * x + 16)\n    \n    # Solve for x\n    solutions = solve(equation1, x)\n    \n    # Number of steps on the escalator is the value of x\n    return solutions[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    num_quarters = 3.5 * 4\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_price_pence = 72\n    balloon_price_pence = 20\n    note_value_pounds = 10\n    change_pence = 388\n    \n    total_spent_pence = (note_value_pounds * 100) - change_pence\n    balloons_spent_pence = total_spent_pence - chocolate_price_pence\n    \n    num_balloons = balloons_spent_pence // balloon_price_pence\n    return num_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    return 0.45 * 2000\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    max_students_per_kayak = 4\n\n    num_kayaks = -(-students // max_students_per_kayak)  # Ceiling division\n\n    return num_kayaks\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n    \n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    expression1 = (4 + 2) * 13\n    expression2 = 4 + (2 * 13)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let x be the age of the fourth dwarf (middle term in the sequence)\n    # Since the ages are consecutive, the ages of the youngest three would be x-3, x-2, and x-1\n    # Their sum is given as 42: (x-3) + (x-2) + (x-1) = 42\n    # Solving the equation for x gives 3x - 6 = 42, so x = (42 + 6) / 3 = 16\n\n    x = (42 + 6) / 3\n\n    # The ages of the oldest three would be x+1, x+2, and x+3\n    oldest_three_sum = (x + 1) + (x + 2) + (x + 3)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent = total_money * spent_fraction\n    money_left = total_money - money_spent\n    \n    # Let the cost of one cupcake be 'c' and the cost of one slice of pizza be 'p'.\n    # 3p = 2c and he bought 5 cupcakes and 6 slices of pizza with the money_spent.\n    # Therefore, 5c + 6p = money_spent.\n    # Utilizing the relation between p and c: p = (2/3)c.\n    # Thus, the equation becomes 5c + 6*(2/3)c = money_spent.\n    # Solving this equation gives us c = money_spent / (5 + 4).\n    \n    cost_per_cupcake = money_spent / (5 + 4)  # 4 is 6*(2/3)\n    number_of_cupcakes = money_left // cost_per_cupcake\n    \n    return int(number_of_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for i in range(74, 200):\n        if len(set(str(i))) == len(str(i)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    three_digit_numbers = permutations(digits, 3)\n    count = len(list(three_digit_numbers))\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        num = int('2' + '5' * i)\n        root = int(num**0.5)\n        if root * root == num:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cut_pieces = 0\n    while initial_pieces + cut_pieces * 2 < final_pieces:\n        cut_pieces += 1\n    return cut_pieces\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of workers initially\n    workers_initial = 6\n    # Number of parts produced initially\n    parts_initial = 120\n    # Time taken initially\n    time_initial = 4\n    \n    # Number of workers later\n    workers_later = 3\n    # Time taken later\n    time_later = 10\n    \n    # Calculate the rate of production per worker per minute initially\n    rate_initial = (parts_initial / workers_initial) / time_initial\n    \n    # Calculate the number of parts produced by the given number of workers later at the same rate\n    parts_later = rate_initial * workers_later * time_later\n    \n    return parts_later\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    initial_value = 98\n    final_value = 44.1\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # find all possible divisors of 2240\n    divs = divisors(2240)\n    # filter those divisors to find the one that makes the quotient a square\n    square_divs = [d for d in divs if is_square(2240 // d)]\n    # we want the largest such divisor because n should be minimum\n    n = min(square_divs)\n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = 0.7 * total_pupils\n    swimming_girls = 200\n    non_swimming_boys_percentage = 0.4\n\n    # Number of boys that can swim\n    swimming_boys = swimming_pupils - swimming_girls\n\n    # Total boys (since 40% of them cannot swim)\n    total_boys = swimming_boys / (1 - non_swimming_boys_percentage)\n\n    # Total girls\n    total_girls = total_pupils - total_boys\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * (1/4)\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    percentage_increase = ((new_value - original_value) / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n\n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n\n    solutions = solve((equation1, equation2), (rice, oatmeal))\n\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    total_sum = sum(range(1, n+1))\n    ans = total_sum**2\n    return ans\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the kilograms of 10% sugar water\n    x = symbols('x')\n\n    # Equation based on sugar content\n    equation = Eq(4 * 30 + x * 10, (4 + x) * 26)\n\n    # Solving for x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_discount_percentage = (total_discount / original_price) * 100\n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j be the mass of the jar and c be the mass of one chocolate\n    # We have two equations from the given information:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # We can solve the two equations to find j (mass of the jar) and c (mass of one chocolate)\n\n    # Subtract the first equation from the second to eliminate j and solve for c\n    c = (317 - 185) // (17 - 5)\n\n    # Now plug the value of c back into the first equation to solve for j\n    j = 185 - 5 * c\n\n    # Finally, we want to find the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = j + 10 * c\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    # We are looking for the number of ways to partition 200 into equal sum parts.\n    # That would require finding the divisors of 200 and subtracting 1. Why subtract 1?\n    # If we use 200 itself as a part, that is not a partition, but rather the number itself.\n    num = 200\n    count = 0\n    # Iterate over possible divisors\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    # Subtract the division by the number itself\n    ans = count - 1\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    return custom_op(custom_op(2, 3), 4)\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = 2 * (144 + 204)  # in meters\n    \n    # Total number of wheat along the perimeter\n    # Subtracting 4 because we already have a wheat at each corner\n    wheat_count = 116 - 4\n    \n    # Distance between two consecutive wheats\n    distance = perimeter / wheat_count\n\n    return distance\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Lana and Mark's original amount of sweets\n    lana, mark = symbols('lana mark')\n\n    # Equation representing the total amount of sweets originally\n    total_sweets_eq = Eq(lana + mark, 674)\n\n    # Equations representing the condition after giving away/eating sweets\n    lana_gave_eq = Eq(lana - lana/3, mark - 34)\n\n    # Solve the system of equations\n    solutions = solve((total_sweets_eq, lana_gave_eq), (lana, mark))\n\n    # Calculate how many more sweets Lana had than Mark at first\n    more_sweets = solutions[lana] - solutions[mark]\n\n    return more_sweets.evalf()\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # Given that one cat takes 10 minutes to catch one fish\n    # Assuming all cats catch fish at the same rate independently, 5 cats catching 5 fish\n    # would still take the same time it takes for one cat to catch one fish\n    return time_per_cat_per_fish\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total length of the holiday in days\n    total_days = symbols('total_days')\n    \n    # Equation: total_days = working + reading/relaxing + time_at_friends + summer_camp\n    # Given: working = total_days / 2, reading/relaxing = working / 2, time_at_friends = 4, summer_camp = 2 weeks (14 days)\n    # Therefore, reading/relaxing = total_days / 4\n    # The equation simplifies to: total_days = (total_days / 2) + (total_days / 4) + 4 + 14\n    equation = Eq(total_days, (total_days / 2) + (total_days / 4) + 4 + 14)\n    \n    # Solve for the total length of the holiday\n    solution = solve(equation, total_days)\n    \n    # We are looking for a single solution that is a number\n    return solution[0]\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = ((result / 9) * 4) - 3\n    return number\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watermelon, pineapple = symbols('watermelon pineapple')\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n    \n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n    \n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Let the distance between every 2 wheat be d\n    # The perimeter of the rectangle is (2*length + 2*width) = 2*(144 + 204) m\n    # The total number of wheat on the perimeter is 116.\n    # Since wheat is planted at each corner, there are (116 - 4) wheats distributed along the perimeter excluding corners.\n    # Therefore, the perimeter of the rectangle divided by the distance between wheats (excluding the corners) should give us (116 - 4) + 1 segments\n    # The +1 comes from the fact that there is an additional segment created by the last wheat planted\n    # The perimeter of the rectangle is thus (116 - 4 + 1) * d\n\n    perimeter = 2 * (144 + 204)\n    wheats_along_sides = 116 - 4\n    segments = wheats_along_sides + 1\n    distance_between_wheat = perimeter / segments\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remaining_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    remaining_to_make = total_bracelets - bracelets_made\n    return int(remaining_to_make)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_weeks = 4\n    \n    # Ellie's work in 4 weeks\n    ellie_work = ellie_rate * combined_weeks\n    \n    # Remaining work to finish the interviews\n    remaining_work = total_people - ellie_work\n    \n    # Gloria's rate per week\n    gloria_rate = remaining_work / combined_weeks\n    \n    # Time it would take Gloria to finish interviewing everyone by herself\n    gloria_time = total_people / gloria_rate\n    \n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    # Since we know B=2 and D=0, we have fewer digits to permute\n    digits = '123456789'\n    for p in permutations(digits, 4):\n        # Insert the known B and D into the permutation\n        A, C, E, F = p\n        number_1 = int(f\"5{A}20{C}{E}{F}\")\n        number_2 = int(f\"{E}{F}A2BC\")\n\n        if 5 * number_1 == 6 * number_2:\n            # Return the 4-digit number FACE\n            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.4 + 60 * x  # x is the percentage of rice in dogfood B\n    rice_percentage_mixture = 0.28\n\n    # set up the equation: total_rice = total_weight * rice_percentage_mixture\n    # 15 * 0.4 + 60 * x = (15 + 60) * 0.28\n\n    # solve for x\n    x = ((total_weight * rice_percentage_mixture) - (15 * 0.4)) / 60\n    return x * 100  # convert x to a percentage\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distinct numbers be a, b, c, d where a > b > c > d\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # a is the largest and d is the smallest\n\n    # The sum of the smallest number and the average of the other three numbers is 39\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n\n    # The sum of the largest number and the average of the other three numbers is 51\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # a, b, c, d should be distinct positive integers\n    condition = Eq(4 * (a + b + c + d), (a + b + c + d) * 4)  # Dummy condition used to set up solve()\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, condition), (a, b, c, d), dict=True)\n\n    # Find the solutions satisfying the constraints\n    valid_solutions = []\n    for sol in solutions:\n        values = sol.values()\n        if len(values) == len(set(values)) and all(x > 0 for x in values):  # Check distinct positive integers\n            valid_solutions.append(sol)\n\n    # If we want to maximize the value of 'a', we should choose the solution with the maximum 'a'\n    max_a = max(solutions, key=lambda x: x[a])[a]\n\n    return max_a\n\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_ml_per_min = 15\n    total_minutes = 2 * 60\n    total_milliliters = rate_ml_per_min * total_minutes\n    total_liters = total_milliliters / 1000\n    return total_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    # Trees are planted at both ends of the road\n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let the distance to the shopping mall from the starting point be d metres.\n    # Time taken by Barbara to reach the shopping mall = d / 60 minutes.\n    # Distance covered by Catherine in the same time = 45 * (d / 60).\n    \n    # When Barbara reaches the shopping mall, Catherine is 60 metres away from it.\n    # Therefore, the distance covered by Catherine = d - 60.\n    \n    # Setting up the equation: 45 * (d / 60) = d - 60\n    # Solving for d using algebra:\n    d = symbols('d')\n    equation = Eq(45 * (d / 60), d - 60)\n    distance = solve(equation, d)[0]\n\n    return distance\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_received = 2*10 + 5*5 + 4*0.20\n    total_spent = 100 - total_received\n    return total_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    # A's total to B's total is 4:3\n    equation1 = Eq(a, 4/7 * (a + b))\n\n    # A has 20 more than C\n    equation2 = Eq(a, c + 20)\n\n    # Sum of A, B, and C's totals\n    equation3 = Eq(a + b + c, 200)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_to_fry_one_plate = 3\n    total_time_available = 18\n\n    num_of_plates = total_time_available // time_to_fry_one_plate\n\n    return num_of_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Nini's age and her dad's age\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    # Equation 1: Dad is 25 years older than Nini\n    equation1 = Eq(dad_age, nini_age + 25)\n    \n    # Equation 2: After 5 years, Dad's age will be 8 less than twice Nini's age\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n    \n    # Nini's age this year\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students = 50\n    count = students\n    for i in range(1, students + 1):\n        if i % 4 == 0 or i % 6 == 0:\n            count -= 1\n    return count\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2/5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7/9\n\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3/4\n    percentage = 30 / 100\n    total = 120\n\n    result = fraction * percentage * total\n\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    # Using the Pigeonhole Principle, we can determine the minimum number of students\n    # by dividing the number of apples by 3 (since at least one student gets at least 3 apples)\n    # and rounding up, since we can't have a fraction of a student.\n    import math\n\n    apples = 29\n    min_apples_per_student = 3\n\n    # Using ceil to round up to ensure at least one student gets 3 apples\n    class_size = math.ceil(apples / min_apples_per_student)\n\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_lead_singers = boys * girls\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for number in range(10, 100):  # Two-digit numbers start from 10 to 99\n        if isprime(number):\n            reverse_number = int(str(number)[::-1])\n            if number != reverse_number and isprime(reverse_number):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    # Let x be the initial number of blue balls and y be the initial number of green balls\n    # We then have x + y = 140 (total number of balls initially)\n    # After removing 2/5 of the blue balls and 28 green balls, we have:\n    # (3/5)x = y - 28 (equal number of green and blue balls left)\n    # So we have a system of two equations:\n    # x + y = 140\n    # (3/5)x = y - 28\n    # We can solve this system to find the value of x (number of initial blue balls)\n\n    # Solve system of equations\n    # x = (5/3)*(y - 28)\n    # Substitute x in the first equation\n    # (5/3)*(y - 28) + y = 140\n    # Multiply through by 3 to clear the fraction\n    # 5y - 5*28 + 3y = 3*140\n    # Combine like terms\n    # 8y = 3*140 + 5*28\n    y = (3*140 + 5*28) / 8\n    # Now solve for x using the first equation\n    x = 140 - y\n    return int(x)\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # The probability that the alcoholic is not at the first bar is 1/3, since there are three bars.\n    probability_not_first = 1/3\n    # The probability that he is not at the second bar is also 1/3.\n    probability_not_second = 1/3\n    # Since we know he's not at the first two bars, he must be at the third bar.\n    probability_at_third = 1 - (probability_not_first + probability_not_second)\n    \n    return probability_at_third\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n    \n    # Eliot will be 16 in 4 years, so now Eliot is 16 - 4 = 12 years old\n    equation1 = Eq(eliot, 12)\n    # Eliot is now twice his cousin's age\n    equation2 = Eq(eliot, 2 * cousin)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    # Now we know the cousin's current age, we add 4 to find their age in 4 years\n    cousin_in_4_years = solutions[cousin] + 4\n\n    return cousin_in_4_years\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    captured_first_time = 100\n    captured_second_time = 100\n    marked_second_time = 16\n\n    # Using the capture-recapture method to estimate total population\n    # population_estimate = (number_of_marked_first_time / number_of_marked_second_time) * number_of_captured_second_time\n    population_estimate = (captured_first_time / marked_second_time) * captured_second_time\n\n    return population_estimate\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nancy_distance, randy_distance = symbols('nancy_distance randy_distance')\n    \n    # Equation based on walking ratio\n    equation1 = Eq(nancy_distance / 2, randy_distance / 3)\n    # Equation based on Randy walking 10 meters more than Nancy.\n    equation2 = Eq(randy_distance, nancy_distance + 10)\n\n    solutions = solve((equation1, equation2), (nancy_distance, randy_distance))\n\n    nancy_walked = solutions[nancy_distance]\n    randy_walked = solutions[randy_distance]\n\n    # Total distance when they set off\n    total_distance = nancy_walked + randy_walked\n\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    x = symbols('x')\n    recurring_decimal = 0.2014 + 0.000014 * (1 / (1 - 0.01))\n    equation = Eq(x / 9900, recurring_decimal)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for the number of marbles each person has\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    # Equation 1: Ali has 5 marbles less than the average of Bronson's and Charlie's\n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    \n    # Equation 2: Bronson has twice as many marbles as Ali\n    equation2 = Eq(bronson, 2 * ali)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n    \n    # Return the number of marbles Charlie has\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the sister's current age, and 2x be Alice's current age.\n    x = symbols('x')\n    \n    # Construct the equation based on the problem statement.\n    # In 10 years, Alice's age will be 2x + 10 and her sister's age will be x + 10.\n    # The total age in 10 years will be 53.\n    equation = Eq((2 * x + 10) + (x + 10), 53)\n    \n    # Solve the equation for x.\n    sister_age = solve(equation, x)[0]\n    \n    # Alice's current age is twice the sister's current age.\n    alice_age = 2 * sister_age\n\n    return alice_age\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(10):\n            for one in range(10):\n                if one % 2 == 0 and hundred + ten + one == 8 and len({hundred, ten, one}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    # loop through possible values for the five other digits of the six-digit number\n    for i in range(10000, 100000):\n        original_number = i * 10 + 2  # appending '2' at the unit place\n        new_number = int('2' + str(i))  # placing '2' at the beginning of the number\n        if original_number * 3 == new_number:\n            return original_number\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # By the inclusion-exclusion principle\n    # passed_only_first_exam = total_passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 500:\n        num += (5 * 8 * 9)\n        \n    return num\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_cereal_bars = 43\n    people = 4\n    \n    bars_left = total_cereal_bars % people\n    \n    return bars_left\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_of_numbers = (a + b + c) * (111)\n    return sum_of_numbers\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):       # 'a' is the tens digit and cannot be 0.\n        for b in range(0, 10):   # 'b' is the units digit and can be from 0 to 9.\n            ab = 10 * a + b\n            ba = 10 * b + a\n            product = ab * ba\n            if str(product)[1] == '0' and str(product)[2] == '0':\n                return ab\n\nans = solution() "
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    hours_needed = 300 / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    small_sack, large_sack = symbols('small_sack large_sack')\n    \n    equation1 = Eq(large_sack, small_sack + 0.2 * small_sack)\n    equation2 = Eq(small_sack + large_sack, 77)\n\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    oranges, apples = symbols('oranges apples')\n\n    equation1 = Eq(oranges + apples, 125) # total number of fruits\n    equation2 = Eq(oranges - 35, (apples / 2)) # after selling fruits, oranges and half of apples are equal\n\n    solution = solve((equation1, equation2), (oranges, apples))\n\n    return solution[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    fraction = 5 / 9\n    ans = round(fraction, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the first 1, and last 1 are the same, and 000 in between).\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (all 9s).\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference between them.\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    cabins = (students + capacity - 1) // capacity\n    return cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 59):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n\n    # Calculate the number of digits in the combined number\n    for i in range(1, 1201):\n        total_digits += len(str(i))\n\n    # Since we want the 2011th digit from the right, calculate the position from the left\n    position_from_left = total_digits - 2011 + 1\n\n    current_count = 0\n\n    # Identify the number at that position_from_left\n    for i in range(1, 1201):\n        current_count += len(str(i))\n        if current_count >= position_from_left:\n            # Find the exact digit at the target position\n            target_number_str = str(i)\n            target_digit_index = len(target_number_str) - (current_count - position_from_left) - 1\n            ans = int(target_number_str[target_digit_index])\n            return ans\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    coins = symbols('coins')\n    # Let the number of coins be 'coins'\n    # One quarter of them are showing heads: heads = coins / 4\n    # If I turn over two more coins to show heads then one third of the coins now show heads:\n    # (coins / 4 + 2) / coins = 1/3\n\n    equation = Eq((coins / 4 + 2) / coins, 1/3)\n    ans = solve(equation, coins)[0]\n\n    return ans\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # The picture book is the 14th from the left\n    # There are 6 books on the right of the picture book\n    total_books = 14 + 6\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    multiples = range(5, 51, 5)\n    return sum(multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30 # km per minute\n    speed_planet2 = 40 # km per minute\n    time = 5 # minutes ago\n    \n    # distance = speed * time\n    distance_travelled_planet1 = speed_planet1 * time\n    distance_travelled_planet2 = speed_planet2 * time\n    \n    # The total distance apart is the sum of distances each traveled\n    total_distance_apart = distance_travelled_planet1 + distance_travelled_planet2\n    return total_distance_apart\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c represent the number of cars and m represent the number of motorbikes\n    c, m = symbols('c m')\n    \n    # Each car has 4 tyres, and each motorbike has 2 tyres\n    # The total number of vehicles is 140: c + m = 140\n    equation1 = Eq(c + m, 140)\n    \n    # The total number of tyres is 490: 4c + 2m = 490\n    equation2 = Eq(4*c + 2*m, 490)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (c, m))\n    \n    return solutions[c]\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Total number of possibilities for the first digit (1-5, can't be 0)\n    first_digit_options = 5\n    # Total number of possibilities for the second digit (0-5, including 0)\n    second_digit_options = 6\n    # Since the digits cannot be repeated, we have one less option for the second digit\n    # after the first digit has been chosen\n    second_digit_options -= 1\n    \n    # Total number of two-digit numbers\n    total_numbers = first_digit_options * second_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n\n    original_price = paid_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_quantity = 36\n    apple_ratio = 4\n    orange_ratio = 5\n    total_ratio = apple_ratio + orange_ratio\n\n    apple_juice = (apple_ratio / total_ratio) * total_quantity\n    \n    return apple_juice\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n')\n    # Equations based on the given conditions\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the system of equations\n    sol = solve((eq1, eq2, eq3), (a, n))\n\n    # Since 'solve' returns a list of solutions, filter for the solution where 'n' is positive\n    n_value = [s[1] for s in sol if s[1] > 0]\n\n    # There should be only one positive value of 'n', use that to find the remainder when 299 is divided by 'n'\n    remainder = 299 % n_value[0]\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    effective_climb = climb_distance - slide_distance\n\n    # The snail climbs out of the burrow right before it slides at night\n    # Calculate the number of days to reach or surpass total_distance - climb_distance\n    # because on the last day, it will climb out without sliding back\n    days = (total_distance - climb_distance) // effective_climb\n\n    # Check if the snail climbed out without additional days needed or not\n    if (total_distance - climb_distance) % effective_climb != 0:\n        days += 1\n\n    # Add the final day of climbing out\n    days += 1\n\n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number_to_round = 8.765\n    rounded_number = round(number_to_round, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    ans = total_avocados // per_box\n\n    return ans\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    final_number = 26\n    subtracted_number = final_number - 12\n    original_number = subtracted_number / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    result = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return result\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    students_per_class = 100\n    classes = 5\n    donation_per_student = 5.78\n    \n    total_donation = students_per_class * classes * donation_per_student\n    \n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_sum = 0\n    for y in range(2, 200):\n        if all(y % i != 0 for i in range(2, int(y**0.5) + 1)):\n            x = (200 + y) / (2 + y)\n            if x.is_integer() and all(x % i != 0 for i in range(2, int(x**0.5) + 1)):\n                max_sum = max(max_sum, int(x + y))\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    count_2 = 2\n    count_3 = 2\n    count_4 = 1\n    count_5 = 1\n\n    ans = factorial(total_digits) // (factorial(count_2) * factorial(count_3) * factorial(count_4) * factorial(count_5))\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Let x be the total amount Bud had originally\n    # According to the question, Bud spends 2p (pence) which is one-quarter of her money\n    # So, (1/4) * x = 2 pence\n    # Therefore, x = 2 * 4\n    total_amount = 2 * 4\n    return total_amount\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the heights of the dwarfs\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(doc, happy + 10)  # Doc is 10cm taller than Happy\n    equation2 = Eq(happy, dopey + 10)  # Happy is 10cm taller than Dopey\n    equation3 = Eq(sneezy, dopey)  # Sneezy is the same height as Dopey\n    equation4 = Eq(bashful, dopey)  # Bashful is the same height as Dopey\n    equation5 = Eq(grumpy, dopey)  # Grumpy is the same height as Dopey\n    equation6 = Eq(sleepy, 80)  # Sleepy is 80cm tall\n    equation7 = Eq(doc + sleepy, dopey + sneezy)  # Doc and Sleepy have the same combined height as Dopey and Sneezy\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Calculate the total height of the seven dwarfs\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    total_rounds = num_teams * (num_teams - 1) // 2\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    result = a * 3 + b - 4\n    return result\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n\n    # Numerator of the final fraction\n    numerator = num1 + num2\n\n    # Denominator of the final fraction\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n\n    # Final result\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    ans = (7/9) * 27\n    return ans\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # Rate of construction per day\n    rate_per_day = 1000 / 5  # meters per day\n    \n    # Total length of the highway to construct\n    total_length = 2600  # meters\n    \n    # Days required to construct the highway\n    days_required = total_length / rate_per_day\n    \n    return days_required\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250\n    time_in_hours = 5\n    time_to_travel_in_3_hours = 3\n\n    speed_per_hour = distance_in_5_hours / time_in_hours\n    distance_in_3_hours = speed_per_hour * time_to_travel_in_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60): \n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    count_of_numbers = (last_term - first_term) + 1   # Because we're including both the first and the last term\n    if (count_of_numbers % 2) == 0:                  # Even count of numbers\n        middle_term = first_term + (count_of_numbers // 2) - 1\n        sum_of_pairs = first_term + last_term\n        sum_of_all_numbers = sum_of_pairs * (count_of_numbers // 2)\n    else:                                            # Odd count of numbers, middle term needs to be checked\n        middle_term = first_term + (count_of_numbers // 2)\n        sum_of_all_numbers = middle_term + (first_term + last_term) * (count_of_numbers // 2)\n    \n    if (sum_of_all_numbers % 2) == 0:\n        ans = \"even\"\n    else:\n        ans = \"odd\"\n    \n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let's denote the numbers on the hats as A, B, and C.\n    # According to the problem:\n    # A + B = 11 (Rory's total)\n    # A + C = 17 (Sophia's total)\n    # B + C = 22 (Qiang's total)\n\n    # Adding all these equations gives us:\n    # 2A + 2B + 2C = 11 + 17 + 22\n    # A + B + C = (11 + 17 + 22) / 2\n    # A + B + C = 25\n    # Now we can find the largest number which will be C as 22 - 11 is the largest difference\n\n    # To find C, we can subtract A + B from the Qiang's total\n    # C = 22 - (A + B)\n    # We know that A + B is 11, from Rory's total\n    C = 22 - 11\n\n    return C\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    total_trees = 30\n    distance_apart = 5  # in meters\n\n    # Since the first tree doesn't count as a distance,\n    # we subtract one from the total number of trees for the calculation\n    road_length = (total_trees - 1) * distance_apart\n  \n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    \n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    from fractions import Fraction\n\n    result = 1\n    for i in range(2, 10):\n        result *= Fraction(1, i) + 1\n\n    return result\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for number in range(2, 21):\n        if isprime(number) and isprime(number + 6) and isprime(number - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Andy's average speed during the first 30 minutes is x mph,\n    # so he travels (x * 0.5) miles in that 30 minutes (0.5 hours).\n    distance_first_30 = x * 0.5\n\n    # Similarly for the second 30 minutes at (x-20) mph.\n    distance_second_30 = (x - 20) * 0.5\n\n    # And for the last 30 minutes at (x+10) mph.\n    distance_last_30 = (x + 10) * 0.5\n\n    # The total distance traveled is the sum of distances in all three intervals,\n    # which is equal to 70 miles (given).\n    # Set up the equation and solve for x.\n    equation = Eq(distance_first_30 + distance_second_30 + distance_last_30, 70)\n\n    # Solve the equation for x.\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 346):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    buses_needed = -(-total_people // max_per_bus)  # Ceiling division\n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    total_prize = symbols('total_prize')\n    \n    # Denise's prize from the singles competition\n    singles_prize = total_prize / 5\n\n    # Denise's prize from the doubles competition\n    doubles_prize = total_prize / 15\n\n    # The total amount won by Denise\n    equation = Eq(singles_prize + doubles_prize, 360)\n\n    # Solve the equation for the total prize\n    total_prize_money = solve(equation, total_prize)\n    \n    return total_prize_money[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There are 5 players except for the coach and the captain\n    # Since the coach has a fixed position in the middle, we have 3 spots to the left and 2 to the right.\n    # The captain can either be to the immediate left or immediate right of the coach\n    # So, there are 2 choices for the captain's position.\n    captain_choices = 2\n\n    # The remaining 5 players can be arranged in any order in the remaining 5 spots\n    # This is a permutation of 5 players for 5 spots\n    player_permutations = factorial(5)\n\n    # The total number of different ways the team can line up is the product of the two.\n    total_ways = captain_choices * player_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    n = 1  # Starting with a single layer\n    while True:\n        boys = n**2 - (n-2)**2 if n > 1 else 1\n        girls = (n-1)**2 - (n-3)**2 if n > 2 else 0\n        if boys - girls == 20:\n            total_students = n**2\n            break\n        n += 1\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of penguins\n    x = symbols('x')\n    \n    # Let y be the total number of fish\n    y = symbols('y')\n    \n    # Equation 1: if each penguin gets 3 fish, 25 fish are left\n    equation1 = Eq(3*x + 25, y)\n    \n    # Equation 2: if each penguin gets 6 fish, there is 1 fish left for one penguin\n    # Since one penguin gets only 1 fish, there should be 6*(x-1) + 1 fish in total\n    equation2 = Eq(6*(x-1) + 1, y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum = 0\n    number = 1\n    for i in range(1, 31):\n        sum += number\n        if i == number * (number + 1) // 2:\n            number += 1\n    return sum\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return result\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    remaining_votes = total_votes - (alice_votes + betty_votes + cindy_votes)\n    max_votes_other = max(alice_votes, betty_votes)\n    \n    votes_needed_for_cindy_win = max_votes_other + 1 - cindy_votes\n    \n    if votes_needed_for_cindy_win <= remaining_votes:\n        return votes_needed_for_cindy_win\n    else:\n        return \"Cindy cannot ensure victory regardless of the remaining votes.\"\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():    \n    numerator1 = 7 / -3.333333333333  # Use a repeating decimal approximation\n    denominator1 = (-0.027) ** (1/3)\n    first_expression = numerator1 / denominator1\n\n    numerator2 = 2**3 / 4**2\n    denominator2 = 0.125 * (1.8 - (0.2 * 7))\n    second_expression = numerator2 / denominator2\n\n    numerator3 = 0.1\n    denominator3 = 1 / 7  # The decimal 0.142857 is the decimal representation of 1/7\n    third_expression = numerator3 / denominator3\n\n    fourth_expression = 2 * 0.3\n\n    ans = first_expression + second_expression - (third_expression + fourth_expression)\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chelsia, brian = symbols('chelsia brian')\n    \n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n    \n    solutions = solve((equation1, equation2), (chelsia, brian))\n    total_money = solutions[chelsia] + solutions[brian]\n    \n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    gina_birth_year = 2005 - 50\n    james_birth_year = 1997 - 20\n    gina_age_when_james_born = gina_birth_year - james_birth_year\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for the sales amount\n    sales = symbols('sales')\n\n    # Computes commission based on the breakpoint\n    breakpoint = 25000\n    base_salary = 2500\n    total_salary = 3300\n\n    # Commission for the first 25000 at 2%\n    first_commission = 0.02 * breakpoint\n\n    # Commission for the amount above 25000 at 5%\n    # Sales above breakpoint is (sales - breakpoint)\n    additional_commission = 0.05 * (sales - breakpoint)\n\n    # Total commission is a piecewise function\n    total_commission = first_commission + additional_commission\n\n    # Formulate the equation based on the problem statement\n    # Total amount obtained is base salary + commission\n    equation = base_salary + total_commission - total_salary\n\n    # Solve the equation\n    solution = solve(equation, sales)\n\n    # We want the positive solution because sales can't be negative\n    sale_for_july = max(solution)\n\n    return sale_for_july\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ryan, audrey = symbols('ryan audrey')\n    # initial ratio equation\n    equation1 = Eq(ryan / audrey, 2 / 7)\n    # final ratio equation after Ryan bought and Audrey gave away marbles\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n    \n    solutions = solve((equation1, equation2), (ryan, audrey))\n    \n    return solutions[audrey]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # Total height of six players is 6 * 150 cm\n    total_height_six_players = 6 * 150\n    \n    # Average height of four players is 2 cm lower than the average height of the team\n    average_height_four_players = 150 - 2\n    \n    # Total height of four players\n    total_height_four_players = 4 * average_height_four_players\n    \n    # Total height of the other two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n    \n    # Average height of the other two players\n    average_height_two_players = total_height_two_players / 2\n    \n    return average_height_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing in the first attempt\n    first_attempt = 0.4\n    \n    # Probability of failing the first attempt but passing in the second\n    second_attempt = (1 - first_attempt) * 0.5\n    \n    # Probability of failing the first two attempts but passing in the third\n    third_attempt = (1 - first_attempt) * (1 - 0.5) * 0.3\n    \n    # The total probability of passing before the fourth attempt is the sum of the above probabilities\n    total_probability = first_attempt + second_attempt + third_attempt\n    \n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    pages = 0\n    while digits > 0:\n        pages += 1\n        digits -= len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n    combinations = num_fruits * num_vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    # Number of ways to travel from City A to City B\n    ways_A_to_B = 2\n    # Number of ways to travel from City B to City C\n    ways_B_to_C = 3\n\n    # The total number of different routes from City A to City C\n    total_routes = ways_A_to_B * ways_B_to_C\n\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    \n    hours_needed = total_pieces / pieces_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 15\n    count_2 = 0\n    count_5 = 0\n\n    for i in range(2, n + 1):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n    # Assume the square array has n layers\n    for n in range(1, 1000):  # Arbitrarily chosen upper limit to avoid infinite loop\n        # Boys occupy the odd layers, thus there are n//2 + n%2 layers of boys\n        boys_layers = n // 2 + n % 2\n        girls_layers = n // 2\n        # Calculate the number of boys and girls\n        boys = 4 * boys_layers * (boys_layers - 1) + 1\n        girls = 4 * girls_layers * girls_layers\n        # Check if the difference between boys and girls is 44\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climb = 7 * 5 + 3  # Climb for the first 5 days and the 6th day\n    remaining_climb = 18 - total_climb  # Remaining height to climb after 6 days\n    slide_down = 7 - remaining_climb  # Slide down amount during the night\n    return slide_down\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second_student = 0\n\n    for a in range(1, 48):\n        for b in range(a + 1, 48):\n            for c in range(b + 1, 48):\n                d = 48 - a - b - c\n                if d > c and d < 48:\n                    max_apples_for_second_student = max(max_apples_for_second_student, b)\n    \n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Since boat can only take 2 people, the strategy is to minimize the time\n    # spent by the slowest people by making sure they are accompanied by the fastest.\n    \n    # The fastest person (Eddie) will always be the one who rows back with the boat.\n    # The time taken will be the sum of all such trips.\n\n    # First, send Eddie (1 min) with Mary (10 min) - Total time now is 10 min.\n    # Eddie rows back - Total time is 11 min.\n    # Send Eddie (1 min) with Rose (5 min) - Total time now is 16 min.\n    # Eddie rows back - Total time is 17 min.\n    # Finally, send Eddie (1 min) with Jack (2 min) - Total time now is 19 min.\n\n    # No need for another return trip, as all are across the river.\n\n    return 19\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length be L and width be W\n    # After increasing the length by 12, the new length is L + 12\n    # The perimeter of the new rectangle is 2 * (L + 12) + 2 * W = 38\n    from sympy import symbols, Eq, solve\n\n    L, W = symbols('L W')\n    # Define the equation based on the problem statement\n    equation1 = Eq(2 * (L + 12) + 2 * W, 38)\n\n    # We don't have the width, but we need only the original perimeter\n    # Original perimeter is 2 * L + 2 * W, let it be P = 2 * L + 2 * W\n\n    # Solve for L using equation1\n    solutions = solve(equation1, L)\n\n    # We take the first solution since there should be only one possible length based on the equation\n    L_value = solutions[0]\n\n    # Compute the original perimeter P using the found value of L\n    P = 2 * L_value + 2 * W\n\n    # Rearrange equation1 to solve for W now that we have L_value\n    W_value = solve(equation1.subs(L, L_value), W)[0]\n\n    # Calculate the original perimeter P using L_value and W_value\n    original_perimeter = P.subs(W, W_value)\n\n    return original_perimeter\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = sum([i**2 if i % 2 != 0 else -i**2 for i in range(1, 90)])\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    prime_number = 2**19 - 1\n    remainder = prime_number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 1 and number % 4 == 1:\n            return number\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    num_students = 4\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are 2 choices for the second day (peaches or strawberries)\n    # There are 2 choices for the third day (the remaining two options not eaten on the second day)\n    # Therefore, for each choice on the second day, we have 2 possibilities for the third day.\n    return 2 * 2\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    total = 8\n    ways = total // 2\n    return ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Almaz has $160 left after spending 3/4 of the remainder\n    # Let's denote her initial salary as 'salary'\n    # 1 - 3/4 = 1/4 of the remainder is $160\n    remaining_after_table = 4 * 160  # This is the remainder after buying the TV\n\n    # Almaz spent 5/9 of her salary on a television\n    # Therefore, she had (1 - 5/9) = 4/9 of her salary left before buying the table\n    # salary * 4/9 = remaining_after_table\n    salary = remaining_after_table / (4/9)\n\n    # Now that we have the salary, we can calculate the cost of the television\n    television_cost = salary * (5/9)\n\n    return television_cost\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "from math import factorial\n\ndef solution():\n    # Since the table can be rotated and it doesn't matter where the first person sits,\n    # let's fix one person and arrange the remaining 6.\n    # This is similar to arranging 6 people in a row, which has 6! ways.\n    # For the fixed person, there are 7 choices, but since the table can rotate, we do not consider this.\n    \n    num_ways = factorial(6)\n    \n    return num_ways\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    ans = 50 / (5/3)\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_age, emma_age = symbols('john_age emma_age')\n\n    equation1 = Eq(john_age + emma_age + 2 * 3, 27)  # In 3 years, sum of their ages will be 27\n    equation2 = Eq(emma_age, john_age - emma_age)   # Emma's age is the difference between their ages\n\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earning = 70\n    number_of_working_days = 6\n    total_earnings = average_daily_earning * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n    \n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Define the speed of Tom and Jack\n    speed_tom = 48\n    speed_jack = 50\n\n    # Time when Jack meets Tom is 5 hours after Jack starts\n    time = 5\n\n    # Calculate the distance Tom travels before Jack starts\n    distance_before_jack_starts = speed_tom * 3  # Tom started 3 hours earlier\n\n    # Calculate the distance Tom travels in the 5 hours after Jack starts\n    distance_tom_after_jack_starts = speed_tom * time\n\n    # Calculate the distance Jack travels in 5 hours after he starts\n    distance_jack_after_starts = speed_jack * time\n\n    # Calculate the remaining distance when they are 15 km away from each other\n    remaining_distance = 15\n\n    # The total distance between A and B is the sum of all parts\n    total_distance = (distance_before_jack_starts +\n                      distance_tom_after_jack_starts +\n                      distance_jack_after_starts +\n                      remaining_distance)\n    \n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    water_angle = 36\n    total_angle = 360\n    \n    # Since the angle for water is 36 degrees, the fraction of people who chose water\n    # This fraction is therefore the same as the angle fraction of a full circle (360 degrees)\n    fraction_water = water_angle / total_angle\n    \n    # Tea was chosen by a quarter of the people, so 25%\n    fraction_tea = 0.25\n    \n    # Coffee was chosen by 7 people; we don't know the fraction yet\n    coffee_people = 7\n    \n    # Cola was chosen by 30% of the people\n    fraction_cola = 0.30\n    \n    # The fractions must add up to 1 since it includes all people\n    # fraction_tea + fraction_cola + fraction_coffee + fraction_water = 1\n    # Since we need to find the whole number of people who took the survey,\n    # we need to express the 7 coffee people in terms of fractions\n    # Let the total number of people be total_people\n    # coffee_people/total_people + fraction_water + fraction_tea + fraction_cola = 1\n    \n    # Now we can solve the equation for total_people\n    # total_people = coffee_people / (1 - fraction_water - fraction_tea - fraction_cola)\n    \n    total_people = coffee_people / (1 - fraction_water - fraction_tea - fraction_cola)\n    \n    # We round up to the nearest whole person because you can't have a fraction of a person\n    return round(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n    equation1 = Eq(dogs, 3 * children)  # There are 3 times as many dogs as children\n    equation2 = Eq(2 * children + 4 * dogs, 56)  # Total number of legs\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_pupils = 18\n    fraction_present = 1 - 2/5  # Fraction of pupils present = 3/5 (since 2/5 are absent)\n    total_pupils = present_pupils / fraction_present\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    result = (10**5) / (5**5)\n    return int(result)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    ans = 5.2 + 6.7 + 4.8\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    eq1 = Eq(saturday, 4 * sunday - 5)\n    eq2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((eq1, eq2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance_between_trees = 2\n\n    # Calculate the number of trees on the length side (subtract 1 to avoid counting the corner twice)\n    trees_on_length = (length // distance_between_trees) * 2 - 1\n    # Calculate the number of trees on the width side (subtract 1 to avoid counting the corner twice)\n    trees_on_width = (width // distance_between_trees) * 2 - 1\n\n    # Total number of trees needed\n    total_trees = trees_on_length + trees_on_width\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_m = 1.36\n    height_cm = height_m * 100\n    return height_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    income_tax_rate = 0.03\n    income_tax = initial_income * income_tax_rate\n    final_income = initial_income - income_tax\n    return final_income\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_cost = 110\n    adult_price = 20\n    child_price = 15\n    children_count = 0\n\n    # There were at least two adults\n    for adults_count in range(2, (total_cost // adult_price) + 1):\n        cost_for_adults = adults_count * adult_price\n        remaining_cost = total_cost - cost_for_adults\n        if remaining_cost % child_price == 0:\n            children_count = remaining_cost // child_price\n            return children_count\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for n in range(1, 10**6):  # assuming the special number has less than 6 digits\n        if int(str(9) + str(n // 10)) == 4 * n:\n            return n\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750\n    ratio_squash_to_water = 1 / 9\n    \n    total_liquid = total_squash / ratio_squash_to_water\n    full_bottles = total_liquid // 1000\n    \n    return int(full_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    # Given equation: 0.6 * 100 = 180 / X\n\n    # Solve for X by rearranging the equation\n    X = 180 / (0.6 * 100)\n\n    return X\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulo = 7\n\n    remainder = pow(base, exponent, modulo)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    last_two_digits = (6**2015 + (2015 * 6) + 2015**6) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):\n                    if len(set([A, 2, 0, C, E, F])) == 6:  # Distinct digits\n                        ABCDEF = int(f\"{A}20{C}{E}{F}\")\n                        EFABCD = int(f\"{E}{F}A20{C}\")\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Let's denote the total initial money as x\n    # She spent 1/3 of it on a book, so she spent x/3 on a book\n    # The remainder is 2/3x\n    # Then she spent 1/2 of the remainder on a bag, which is (1/2)*(2/3)x = x/3\n    # The total cost of the book and the bag is x/3 + x/3 = 2x/3\n    # According to the problem, 2x/3 = 132\n    # So x = 132 / (2/3) = 132 * 3/2\n    total_money = 132 * 3 / 2\n\n    # Correction of Thomas's solution:\n    # He added the fractions incorrectly: spent 1/3 on a book and 1/2 of the remainder,\n    # not 1/2 of the total money, hence his calculation of 5/6 of the total is incorrect.\n    # The correct calculation is 2/3 of the total money spent.\n\n    return int(total_money)\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Given factors of the number\n    factors = [1, 2, 4, 7, 8]\n    \n    # The sixth factor has to be the product of 2 and 7, because they are the only two primes given\n    factors.append(2 * 7)  # 14\n    \n    # The seventh factor has to be the product of 4 and 7, because it is not in the list yet and 7 must be used\n    factors.append(4 * 7)  # 28\n    \n    # The number itself is the eighth factor, which is the product of the last two factors found\n    number = factors[-1] * 8  # 224\n\n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'c' be the number of cows and 'g' be the number of goats initially\n    c, g = symbols('c g')\n\n    # we have two equations based on the problem statement\n    equation1 = Eq(c, 0.65 * (c + g))  # 65% of the animals were cows initially\n    equation2 = Eq(c + 240 * 0.20, 0.65 * (c + g + 240) - 240 * 0.20)  # percentage of cows increased by 20% after adding 240 animals\n\n    # solving the equations to find the values of 'c' and 'g'\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_pos_from_front = 6\n    amy_pos_from_back = 8\n    \n    total_children = jolene_pos_from_front + amy_pos_from_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let the total number of cookies in the box be x.\n    # From the first month, the number of cookies he kept is x - 1680.\n    # From the second month, he sold 7/20 more than the first month, \n    # which is 1680 + (7/20)*1680. \n    # Therefore, he kept x - (1680 + (7/20)*1680) after the second month.\n    # The number of cookies he kept decreases by 3/20, i.e., 3/20 of x.\n    # So, x - 1680 - (3/20)x = x - (1680 + (7/20)*1680)\n\n    # To find the value of x, we can solve the equation:\n    # x - 1680 - (3/20)x = x - (1680 + (7/20)*1680).\n    # By rearranging the terms, we get:\n    # (3/20)x = (7/20)*1680.\n    # Dividing both sides by (3/20) we get:\n    # x = (7/20)*1680/(3/20).\n\n    # Now we calculate the value of x to find the total number of cookies in the box.\n    x = (7/20) * 1680 / (3/20)\n\n    return x\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 1\n    while True:\n        if (num % 5 == 1) and (num % 6 == 2) and (num % 11 == 9):\n            return num\n        num += 1\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slip_down = 3\n    effective_jump = (jump_up * 2) - slip_down\n    jumps_to_reach_near_top = (total_height - jump_up) // effective_jump * 2\n    height_after_last_full_set_of_jumps = jumps_to_reach_near_top // 2 * effective_jump\n\n    remaining_height = total_height - height_after_last_full_set_of_jumps\n    final_jumps = 0\n\n    while remaining_height > 0:\n        final_jumps += 1\n        remaining_height -= jump_up\n        if remaining_height <= 0:\n            break\n        final_jumps += 1\n        remaining_height += slip_down\n\n    return jumps_to_reach_near_top + final_jumps\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    capacity = 7\n    trip_time = 2\n    \n    trips_to_ferry_all = (adventurers + capacity - 1) // capacity\n    total_time = (trips_to_ferry_all - 1) * 2 * trip_time\n    \n    return total_time\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n    \n    # Number of sunflowers on each side, excluding the corner sunflower already counted\n    sunflowers_per_side = (side_length - distance_apart) // distance_apart\n    \n    # Total sunflowers = sunflowers on each side * number of sides + corners\n    total_sunflowers = (sunflowers_per_side * 5) + 5\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    ans = 58 * 36\n    return ans\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (976 * 10 + digit * 1 + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's assume t is the number of hours Ryan drives at his usual speed\n    t = symbols('t')\n    \n    # Distance covered by Ryan at a speed of 45 mph if not for traffic\n    distance_at_usual_speed = 45 * t\n    \n    # Distance covered by Ryan at a speed of 30 mph because of traffic\n    # He arrives 2 hours late, so he drives for t+2 hours at a slower speed\n    distance_at_reduced_speed = 30 * (t+2)\n    \n    # The distance must be the same for both cases, so we form an equation\n    equation = Eq(distance_at_usual_speed, distance_at_reduced_speed)\n    \n    # Solving the equation for t\n    solution = solve(equation, t)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    from sympy import Partition\n\n    return Partition(5).n\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum of the first sequence: 3+4+5+...+10\n    sum_forward = sum(range(3, 11))\n    \n    # Calculate the sum of the second sequence: ...+6+5+4+3\n    sum_backward = sum(range(3, 7))\n    \n    # Total sum is the sum of both sequences\n    total_sum = sum_forward + sum_backward\n    return total_sum\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n        a %= 3  # we only need remainder when divided by 3\n        b %= 3\n    return a\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (4 + (2/3) + (38/59))\n    denominator = 2.501**3\n    ans = round((numerator / denominator), 3)\n    return ans\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students\n    # Let y be the number of sweets\n\n    # Based on the problem statement\n    # If Mr. Lim gives each student 6 sweets, he will be short of 26 sweets:\n    # 6x = y + 26\n\n    # If he gives each student 5 sweets, he will be short of 5 sweets:\n    # 5x = y + 5\n\n    # We can set up a system of equations to solve for x and y\n    # Rearranging the equations to isolate y gives us\n    # y = 6x - 26\n    # y = 5x - 5\n\n    # We can now equate these two expressions for y to solve for x:\n    # 6x - 26 = 5x - 5\n    # x = 21 (Mr. Lim has 21 students)\n\n    # Now, we can substitute x into either equation to find y (the number of sweets):\n    # y = 5 * 21 - 5\n    y = 5 * 21 - 5\n\n    return y\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Leo's age now (leo_now) and his son's age now (son_now)\n    leo_now, son_now = symbols('leo_now son_now')\n\n    # Equation based on the statement \"When I was your age, you were 4 years old.\"\n    # Leo's age at that time is leo_now - son_now, and his son was 4 years old.\n    equation1 = Eq(leo_now - son_now, son_now - 4)\n\n    # Equation based on the statement \"When I reach your age, you will be 70 years old.\"\n    # Time taken for son to reach Leo's current age is leo_now - son_now\n    # Leo's age at that time would be leo_now + (leo_now - son_now)\n    equation2 = Eq(leo_now + (leo_now - son_now), 70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_now, son_now))\n\n    # Return Leo's current age\n    return solutions[leo_now]\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost = 46  # cost of one stamp in pence\n    total_money = 3 * 100  # total money in pence (£1 = 100p)\n    num_stamps = total_money // stamp_cost  # integer division to find how many stamps can be bought\n\n    return num_stamps\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # We need to count the arrangements of 4 singing (S) and 3 dancing (D) performances\n    # subject to the constraint that there is at least one S between each D. \n    # We can initially ignore the constraint and count all possible permutations.\n    total_performances = 4 + 3  # Total of 7 performances\n    total_permutations = factorial(total_performances)  # Total permutations of 7 items\n    \n    # Calculate permutations of the singing performances and the dancing performances separately\n    singing_permutations = factorial(4)\n    dancing_permutations = factorial(3)\n    \n    # There are 5 places to insert a D performance between S performances (including the ends)\n    # -S-S-S-S- (4 S's create 5 slots)\n    # We choose 3 out of these 5 slots to place the D performances.\n    slots = 5\n    slot_options = factorial(slots) // (factorial(3) * factorial(slots - 3))\n    \n    # Multiply the number of ways to arrange the S performances, the number of slot choices, \n    # and the number of ways to arrange the D performances within their slots\n    arrangement_options = singing_permutations * slot_options * dancing_permutations\n    \n    return arrangement_options\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    for x in range(1, 42):  # Dad will not be more than 4 times older than Heidi in the next 42 years\n        if (50 + x) == 4 * (8 + x):\n            return x\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_in_6_minutes = 48\n    minutes = 9\n    words_per_minute = words_in_6_minutes / 6\n    words_in_9_minutes = words_per_minute * minutes\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # If the trees have a difference of 1 fruit, this creates an arithmetic sequence\n    # For an arithmetic sequence of n terms with difference d, and sum S:\n    # S = n/2 * (2a + (n - 1)d), where a is the first term\n    # Since n = 8 and S = 225, d = 1, we substitute the values to find a\n    # 225 = 8/2 * (2a + (8 - 1)*1)\n    # Simplifying this we get,\n    # 225 = 4 * (2a + 7)\n    # 225 = 8a + 28\n    # 197 = 8a\n    # a = 197/8  which is not an integer\n    \n    # Since 'a' is not an integer, it means the sequence cannot start from an integer value\n    # Moreover, the sum of an arithmetic sequence with an odd number of odd terms or even number of even terms is even\n    # In this case, we have an odd number (8) of integers with a difference of 1, so the sum cannot be odd (225).\n    # Hence, it's not possible to have these conditions satisfied.\n    \n    return False\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    def count_factors_of_five(n):\n        count = 0\n        while n % 5 == 0:\n            count += 1\n            n //= 5\n        return count\n    \n    total_fives = 0\n    for i in range(1, 61):\n        total_fives += count_factors_of_five(i)\n    \n    return total_fives\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # The initial total of the three numbers\n    initial_total = 3 * 120\n    \n    # The new total with the fourth number\n    new_total = 4 * 150\n    \n    # The fourth number\n    fourth_number = new_total - initial_total\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    # Solving the equation box * 15 = 11 * 14 + 26\n    box_times_15 = 11 * 14 + 26\n    # Dividing by 15 to find the value of box\n    box = box_times_15 / 15\n    return box\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    r = symbols('r')\n    equation = Eq(216*r, sqrt(216*r)**2)\n    solutions = solve(equation, r)\n\n    valid_solutions = [sol.evalf() for sol in solutions if (sqrt(216*sol).is_integer and sol > 0)]\n    \n    return valid_solutions[0]\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3 / 13) * 52\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # Each day, the snail climbs a net distance of 8m - 3m during the night\n    net_distance_per_day = 8 - 3\n\n    # On the 9th day, the snail climbs out of the well without sliding down\n    # so we need to consider the net climb for 8 days, not 9. \n    total_climb = net_distance_per_day * (9 - 1) # minus 1 for the last day\n\n    # Add the final day climb to the total\n    total_climb += 8\n\n    return total_climb\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # The smallest possible divisor that will give a remainder is the remainder itself.\n    # Hence, the smallest possible dividend = divisor * quotient + remainder\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    ans = 285 // 3\n    return ans\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # By the inclusion-exclusion principle\n    both_language_teachers = french_teachers + japanese_teachers - total_teachers\n    only_french_teachers = french_teachers - both_language_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n    \n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.9)\n    equation2 = Eq(1 * bag_of_sweets + 3 * can_of_drink, 2.7)\n\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(6)        # Total possible arrangements\n    restricted_ways = factorial(5)   # Arrangements where Teddy is on the farthest left\n    return total_ways - restricted_ways\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4  # Since the sequence is 50, 46, 42, the difference is negative\n\n    # Find the last non-negative term\n    term = first_term\n    num_terms = 0\n    while term > 0:\n        term += difference \n        num_terms += 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    ans = 0\n    for num in range(10, 100):  # Loop from 10 to 99 (inclusive), as those are the 2-digit numbers\n        if (num // 10 + num % 10) % 7 == 0:  # If the sum of the digits is a multiple of 7\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Since they are consecutive numbers, their average is the middle number,\n    # and the sum divided by the number of terms gives the average.\n    # Then, we can find the largest number by adding half of the number of terms minus one.\n    total_sum = 280\n    num_terms = 7\n    average = total_sum // num_terms\n    middle_number = average\n\n    # Now find the largest number, which is 3 more than the middle number\n    # (since there are 7 numbers, the middle index is 4, we want index 7).\n    largest_number = middle_number + (num_terms // 2)\n\n    return largest_number\n\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    # A and B are divisible by 75, so they must be multiples of 75.\n    # Loop through all potential three-digit multiples of 75 for A and B.\n    for A in range(75, 1000, 75):\n        for B in range(75, 1000, 75):\n            # Skip if A and B are not distinct\n            if A == B:\n                continue\n            \n            # Convert to strings to check for two equal digits\n            strA, strB = str(A), str(B)\n            common_digits = 0\n            for digit in strA:\n                if digit in strB:\n                    common_digits += 1\n            \n            # Ensure exactly two digits are equal, and not three (to be two distinct 3-digit numbers)\n            if common_digits == 2:\n                max_sum = max(max_sum, A + B)\n    \n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    result = sum([(-1) ** (i % 2) * num for i, num in enumerate(range(20, 1, -2))])\n    return result\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    terms = [8, 32, 72, 128, 200, 288, 392, 512, 648]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amounts saved by each person\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n    \n    # Extract the amount saved by Angel\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n\n    # Function to calculate permutations\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # There are 6 possible positions for magazines between the storybooks (before the first, between two storybooks, and after the last)\n    # We have to place 5 magazines in these 6 positions, which is a combination problem\n    # C(6,5) = 6 because there are 6 ways to choose 5 positions from 6\n    # Each arrangement of magazines among those positions represents one unique permutation of the magazines\n    # After placing magazines, storybooks can be arranged in any order, so we multiply by the permutation of the 5 storybooks.\n    \n    # Calculate the permutations of 5 storybooks\n    storybook_perms = permutations(5, 5)\n\n    # Combine the calculated values\n    total_ways = 6 * storybook_perms\n\n    return total_ways\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n\n    for throw in throws:\n        if skip_next:\n            position -= throw  # Go back the number indicated by the throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True  # Don't move and prepare to go back on the next throw\n        else:\n            position += throw  # Move forward the number indicated by the throw\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n    \n    # alex + brayden = 756 | Initial total sum\n    equation1 = Eq(alex + brayden, 756)\n    # alex - 65 = 3 * (brayden + 65) | After giving $65, Alex has three times as much as Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # search for a reasonable upper limit\n        remaining_after_secret = gums - 2\n        if remaining_after_secret % 3 == 0:  # check if it's divisible by 3 to share with friends\n            shared_with_friends = remaining_after_secret // 3\n            remaining_after_sharing = remaining_after_secret - shared_with_friends\n            if remaining_after_sharing % 4 == 0:  # check if the remaining can be equally divided in 4 lessons\n                return gums\n    return -1  # If no solution is found within a reasonable range\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    total_money = kate + james\n    money_after_sharing = total_money // 2\n    money_given_to_kate = money_after_sharing - kate\n\n    return money_given_to_kate\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    result = 17.1 / 10\n    return result\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            num = int(f\"42{A}28{B}\")\n            if num % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10\n    remaining_sum = 9 * 9\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_km_per_hr = 3.6\n    time_seconds = 300\n\n    # Convert speed to meters per second (1 km/hr = 1000 m / 3600 s)\n    speed_m_per_s = (speed_km_per_hr * 1000) / 3600\n\n    # Calculate distance walked in meters\n    distance_meters = speed_m_per_s * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    n = 21 // 2  # Since we only want the sum of cubes of odd numbers up to 21\n    sum_of_naturals = (n * (n + 1)) // 2  # Sum of first n natural numbers\n    sum_of_cubes = sum_of_naturals ** 2  # Square of the sum of first n natural numbers\n    return sum_of_cubes\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of beads left after giving away\n    red_left, green_left, blue_left = symbols('red_left green_left blue_left')\n\n    # Equations according to the problem statements\n    equation1 = Eq(red_left, 2 * green_left)                                  # Red beads are twice the green beads left\n    equation2 = Eq(blue_left, red_left - 50)                                  # Blue beads left are 50 fewer than red beads left\n    equation3 = Eq(red_left + green_left + blue_left, 350)                    # Total beads left are 350\n    blue_initial = blue_left + 112                                            # Blue beads initial count\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (red_left, green_left, blue_left))\n\n    # Calculate the initial number of blue beads\n    blue_initial_count = solutions[blue_left] + 112 # Add 112 to get the initial number of blue beads\n\n    return blue_initial_count\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount each person receives when all four siblings share equally\n    x = symbols('x')\n    \n    # Total amount of money is 4*x when all siblings share\n    total_money = 4 * x\n    \n    # If the brothers alone had shared the money, there would be 3 people\n    # Each brother would then get (total_money / 3)\n    # It is given that this amount is 20 more than x\n    equation = Eq(total_money / 3, x + 20)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Calculate the original total sum of money\n    original_sum = 4 * solution[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # The sum of the four numbers whose average is 36 is 4 * 36\n    sum_36 = 4 * 36\n    # The sum of the four numbers whose average is 38 is 4 * 38\n    sum_38 = 4 * 38\n    # The sum of the four numbers whose average is 39 is 4 * 39\n    sum_39 = 4 * 39\n    # The sum of the four numbers whose average is 45 is 4 * 45\n    sum_45 = 4 * 45\n    # The sum of the four numbers whose average is 49 is 4 * 49\n    sum_49 = 4 * 49\n    \n    # This largest number will necessarily be part of the sum for the average of 49,\n    # but not part of the sum for the average of 36.\n    # Therefore, it can be found by subtracting sum_36 from sum_49:\n    largest_number = sum_49 - sum_36\n    \n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    # Calculate the number of science books\n    science_books = (art_books * art_books_fraction) / science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    # Let x be the number of stickers Katelyn has\n    # Then Jared has 2x stickers (since his amount is 2 times Katelyn's)\n    # It is given that Jared has 60 more stickers than Katelyn, i.e., 2x = x + 60\n    \n    # Solving for x using algebra\n    x = 60 / (5 - 2)\n    \n    # Jared has 2 parts and Katelyn has 5 parts, thus together they have 5+2 parts\n    total_stickers = x * (5 + 2)\n    \n    return int(total_stickers)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n    \n    total_after_three_years = initial_investment * interest_first_three_years\n    total_after_five_years = total_after_three_years * interest_last_two_years\n    \n    ans = round(total_after_five_years, 1)\n    \n    return ans\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    ans = sum(rounded_numbers)\n    return ans\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # Each person should get 16/24 or 2/3 of a sausage.\n    # If we have 16 sausages, we have to make cuts that allow us to have \n    # 24 equal parts of 2/3 sausage each.\n    # First, we group the sausages in sets which each set size is equal to the denominator\n    # We then make cuts in each group. The number of cuts per group will be the size of the group minus 1.\n    # The total number of cuts will be the number of groups times the cuts per group.\n\n    sausages = 16\n    people = 24\n    group_size = 3  # Because each person needs to get 2/3, so we group by 3 to find how many groups of 3 sausages we can make.\n\n    # Calculate how many groups of the size equal to the denominator we can make\n    groups = sausages / group_size  # This is how many times we can divide the sausages into groups of 3\n\n    # Since in every group we can make 'group_size - 1' cuts, \n    # we will need to make that many cuts for each group\n    cuts_per_group = group_size - 1\n\n    # Multiply the number of groups by cuts needed per group to get the total number of cuts\n    total_cuts = groups * cuts_per_group\n    return int(total_cuts)\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n\n    gcd_pair = gcd(textbooks_chinese, textbooks_math)\n    gcd_all = gcd(gcd_pair, textbooks_nature)\n    \n    return gcd_all\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Qiqi's speed (m/min)\n    qiqi_speed = 60\n    # Weiling's speed (m/min)\n    weiling_speed = 72\n    # Qiqi's start time advantage (min)\n    time_advantage = 2\n    # Weiling's arrival time advantage (min)\n    arrival_advantage = 4\n\n    # Time taken by Qiqi to meet Weiling at the school\n    # Weiling walks the same distance in (time_taken_by_qiqi - time_advantage - arrival_advantage) minutes\n    # Distance = Speed * Time\n    # Qiqi's distance = qiqi_speed * time_taken_by_qiqi\n    # Weiling's distance = weiling_speed * (time_taken_by_qiqi - time_advantage - arrival_advantage)\n    # Since both distances are the same:\n    # qiqi_speed * time_taken_by_qiqi = weiling_speed * (time_taken_by_qiqi - time_advantage - arrival_advantage)\n    # Solve for time_taken_by_qiqi:\n    \n    time_taken_by_qiqi = (weiling_speed * (time_advantage + arrival_advantage)) / (weiling_speed - qiqi_speed)\n\n    # Now that we have the time Qiqi walked, we can find the distance\n    distance = qiqi_speed * time_taken_by_qiqi\n\n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of Star be s and Nini be n (jobs per hour)\n    s, n = symbols('s n')\n\n    # Star types for 5 hours, then Nini types for 20 hours, 1 job is completed\n    equation1 = Eq(5 * s + 20 * n, 1)\n    \n    # Star types for 20 hours, then Nini types for 8 hours, 1 job is completed\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the equations for the rates s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # The time for Nini to finish the job by herself is the reciprocal of her rate\n    time_for_nini = 1 / solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # The original work is 4 companies building 900m in 5 days.\n    # The amount of work done is Work = Number of Companies * Distance * Time\n    original_work = 4 * 900 * 5\n    \n    # We want to find out how long it takes 1 company to build a 2700m expressway.\n    # Work has to be the same, so we set up the equation:\n    # original_work = 1 * 2700 * days_needed\n    \n    days_needed = original_work / (1 * 2700)\n    \n    return days_needed\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # Define St Petersburg time of arrival\n    st_petersburg_arrival = datetime.strptime('12:00', '%H:%M')\n\n    # Flight time from Manchester to St Petersburg is 3 hours and 50 minutes\n    flight_duration = timedelta(hours=3, minutes=50)\n\n    # Time difference between St Petersburg and Manchester is 3 hours\n    time_difference = timedelta(hours=3)\n\n    # Time when the plane left Manchester\n    manchester_departure = st_petersburg_arrival - flight_duration - time_difference\n\n    # Return the departure time in Manchester local time\n    return manchester_departure.strftime('%H:%M')\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2  # conversion rate from kg to lbs\n    kg = 5  # given weight in kg\n\n    lbs = kg * kg_to_lbs  # converting kg to lbs\n\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    # count the total number of people by adding Ben's position from the front, \n    # the people in between, and Frank's position from the back\n    total_people = (ben_position_from_front - 1) + people_between + (frank_position_from_back - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n    \n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n    \n    return total_litres\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    ans = 0\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    total_sum = sum((-1)**(i+1) * (34 - 2*i) for i in range(1, 17))\n    return total_sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    percentage = 72\n    total = 140\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n    red_frac = 2 / 5\n    green_frac = 1 / 3\n    yellow_count = 96\n\n    equation = Eq(total_marbles * red_frac + total_marbles * green_frac + yellow_count, total_marbles)\n\n    total = solve(equation, total_marbles)\n\n    return total[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum_last_four_digits = 0\n    current_number = 1\n    \n    for i in range(2015):\n        sum_last_four_digits = (sum_last_four_digits + current_number) % 10000\n        current_number = (current_number * 10 + 1) % 10000\n\n    return sum_last_four_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    # Loop through three-digit numbers starting from 100 to 999\n    for num in range(100, 1000):\n        # Check if the number is even and the digits add up to 8\n        if num % 2 == 0 and sum(map(int, str(num))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1/20\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit for each component separately\n    # 13^242: Since 3^1 ends with 3, 3^2 ends with 9, 3^3 ends with 7, 3^4 ends with 1 and then the cycle repeats every 4\n    unit_digit_13 = (3 ** (242 % 4)) % 10  # Find the unit digit of the last number in the cycle\n\n    # 17^379: Since 7^1 ends with 7, 7^2 ends with 9, 7^3 ends with 3, 7^4 ends with 1 and then the cycle repeats every 4\n    unit_digit_17 = (7 ** (379 % 4)) % 10  # Find the unit digit of the last number in the cycle\n\n    # 4^2012: Since 4^1 ends with 4, 4^2 ends with 6, the cycle for the power of 4 repeats every 2\n    unit_digit_4 = (4 ** (2012 % 2)) % 10  # Find the unit digit of the last number in the cycle\n\n    # Calculate the unit digit of the entire expression\n    unit_digit = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Since there are 2 colours and we want to be sure that we take at least 2 of the same colour,\n    # In the worst-case scenario, we would take 1 from each colour before getting the second of the same colour.\n    # So, we take 1 blue, then 1 yellow, and we need to take one more to be sure it is the same colour as one of these.\n    # Hence, we need to take at least 3 marbles to be sure we have 2 marbles of the same colour.\n    \n    # as per the pigeonhole principle the worst case would be taking one of each color first\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Possible ages for children - product needs to be less than 2019\n    for a in range(1, 50):\n        for b in range(a+2, 50, 2):\n            c = b + 2\n            children_product = a * b * c\n            if children_product >= 2019:\n                break\n\n            # Possible ages for John and Mary - John is one year older than Mary\n            for m in range(1, 50):\n                j = m + 1\n                adults_product = j * m\n\n                # Check products for this year\n                if adults_product >= 2019 or children_product >= 2019:\n                    continue\n                \n                # Check products for the next year\n                if (j + 1) * (m + 1) <= 2020 or (a + 1) * (b + 1) * (c + 1) <= 2020:\n                    continue\n                \n                # If all conditions are met, return the sum of all ages\n                return a + b + c + j + m\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3  # Since the sequence is decreasing\n    n = 7  # 7th term\n\n    # The nth term of an arithmetic sequence can be found by the formula: an = a1 + (n - 1)d\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `x` be the amount of money Mrs Chen had at first.\n    x = symbols('x')\n\n    # Mrs Chen spent $36 on plates, so she had (x - 36) left.\n    # Then she spent three-quarters of the remaining money on cups, so she had (x - 36) * (1 - 3/4) left.\n    # Finally, she had one-sixth of the original sum left, so: (x - 36) * 1/4 = x/6\n    # Combine these into an equation:\n    equation = Eq((x - 36) * 1/4, x / 6)\n\n    # Solve the equation for `x`\n    solution_dict = solve(equation, x)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        abc = perm[0]*100 + perm[1]*10 + perm[2]\n        bcd = perm[1]*100 + perm[2]*10 + perm[3]\n        cde = perm[2]*100 + perm[3]*10 + perm[4]\n        def_num = perm[3]*100 + perm[4]*10 + perm[5]\n        efg = perm[4]*100 + perm[5]*10 + perm[6]\n        fgh = perm[5]*100 + perm[6]*10 + perm[7]\n        ghi = perm[6]*100 + perm[7]*10 + perm[8]\n        A = abc + bcd + cde + def_num + efg + fgh + ghi\n        if A > max_A:\n            max_A = A\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_minutes = 2 + 30 / 60\n    time_in_hours = 1\n    miles_per_hour = 60 / time_per_mile_minutes\n    distance_travelled = time_in_hours * miles_per_hour\n    return distance_travelled\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    current_int = 8\n    i = 1\n    while True:\n        if i == 2012:\n            return current_int\n        current_int += 1\n        if str(current_int)[0] != '8':  \n            # Skip to the next integer where the leftmost digit is 8\n            current_int = int('8' + '0' * (len(str(current_int)) - 1))\n        i += 1\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    num_students = 5\n    # As numbers are consecutive natural numbers, the middle number is the average\n    middle_ball_number = total_balls / num_students\n    # Student with the most balls will have the middle number + 2 (because 5 students mean 2 below and 2 above the middle)\n    most_balls = middle_ball_number + 2\n    \n    return int(most_balls)\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from math import comb\n\ndef solution():\n    total_envelopes = 15\n    min_a = 2\n    min_b = 4\n    min_c = 3\n\n    # Subtract the minimum number of envelopes that must go into A, B, and C\n    remaining_envelopes = total_envelopes - (min_a + min_b + min_c)\n    count = 0\n\n    # The remaining envelopes can be distributed in various ways among the 4 boxes\n    for i in range(remaining_envelopes + 1):  # +1 to include case where i equals the remaining envelopes\n        for j in range(remaining_envelopes - i + 1):\n            k = remaining_envelopes - i - j\n            # i, j, k represent the additional envelopes (beyond the min required) in A, B, C respectively\n            # We use combinations with repetition formula which is comb(n + r - 1, r), where n is the number of items to choose from, and r is the number taken at a time (r = 4 because we have 4 mailboxes).\n            \n            count += comb(i + j + k + 4 - 1, 4 - 1)\n\n    return count\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    \n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the income as a symbol\n    income = symbols('income')\n\n    # If the income is less than or equal to $20000, the tax is 15% of income.\n    # If the income is more than $20000, the tax is $3000 (15% of $20000) plus 20%\n    # of the amount over $20000.\n    \n    tax_equation = Eq(3000 + 0.20 * (income - 20000), 7000) if income > 20000 else Eq(0.15 * income, 7000)\n    \n    # Solve the equation\n    solved_income = solve(tax_equation, income)\n    \n    # Answer should be a single value since we have a linear equation.\n    return solved_income[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    result = 1.4 * (1/10)\n    return result\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Since 1/13 is a recurring decimal, we find the recurring part by calculating it.\n    # The recurring cycle of 1/13 has length 6: 076923\n    cycle = '076923'\n    # We subtract 1 because the indexing starts from 0\n    index = (2022 - 1) % len(cycle)\n    # We access the digit in the obtained index\n    ans = int(cycle[index])\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    # Calculate the greatest common divisor of the three lengths\n    ans = gcd(gcd(length1, length2), length3)\n\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n\n    # Let the number of chickens be x and the number of rabbits be y.\n    # We know that:\n    # x + y = total_animals (1)\n    # 2x + 4y = total_legs (2)\n \n    # Using equation (1), we can express y in terms of x: y = total_animals - x.\n    # Substituting y in equation (2) gives us:\n    # 2x + 4(total_animals - x) = total_legs\n    # 2x + 160 - 4x = total_legs\n    # 2x - 4x = total_legs - 160\n    # -2x = -60\n    # x = 30\n\n    # The number of chickens (x) is 30.\n    chickens = (total_legs - 2 * total_animals) / 2\n    return int(chickens)\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of packs in store A (and store B)\n    x = symbols('x')\n\n    # Store A has x - 290 packs left after selling\n    # Store B has 3 times the packs of store A\n    equation = Eq(3 * (x - 290), x)\n\n    # Solve for the original number of packs\n    original_packs_in_A = solve(equation, x)[0]\n    \n    # Calculate total number of packs in both stores\n    total_packs = original_packs_in_A * 2\n\n    return total_packs\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    girls = total_students - boys\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n\n    girls_packed_lunch = girls - girls_school_lunch\n    boys_school_lunch = boys - boys_packed_lunch - boys_home_lunch\n    students_school_lunch = girls_school_lunch + boys_school_lunch\n    students_packed_lunch = total_students - students_school_lunch - students_home_lunch\n\n    return students_packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_cost = (20 * 6) + (20 * 5) + (20 * 4)\n    total_chocolates = 20 + 20 + 20\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n    rate_per_day = made_in_5_days / 5\n    total_days_needed = total_uniforms / rate_per_day\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    # Divisible by 12 sequence starting from 12 -> ... -> 96\n    first_term = 12\n    last_term = 96\n\n    # Since the sequence is of numbers divisible by 12, difference is 12\n    difference = 12\n    \n    # Calculate the number of terms using the formula for arithmetic sequence\n    # n = ((last - first) / difference) + 1\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time in seconds to pass the tree\n    \n    length_of_train = speed * time  # Distance formula: distance = speed * time\n    \n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let x be the number of days the wife takes to finish the barrel on her own\n    # 1/15 of the barrel is drunk by the man in a day\n    # 1/x of the barrel is drunk by the wife in a day\n    # Together, they can finish 1/12 of the barrel in a day\n    # Form the equation: 1/15 + 1/x = 1/12\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/15 + 1/x, 1/12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - (1 / i))\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    tricycles = 6\n    wheels_per_tricycle = 3\n    total_wheels = tricycles * wheels_per_tricycle\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    discount_offer = 4  # Buy 3 get 1 free is equivalent to buying 4 books for the price of 3\n    number_of_books_wanted = 5\n\n    sets_of_discounted_books = number_of_books_wanted // discount_offer\n    remaining_books = number_of_books_wanted % discount_offer\n\n    # Calculate the total price for the discounted sets\n    total_price_discounted_sets = sets_of_discounted_books * (price_per_book * (discount_offer - 1))\n    # Calculate the total price for the remaining books without discount\n    total_price_remaining_books = remaining_books * price_per_book\n\n    # The total amount payable is the sum of the discounted sets and the remaining books\n    total_price = total_price_discounted_sets + total_price_remaining_books\n\n    return total_price\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    # assuming the total number of people is x\n    # The fraction of women at the exhibition is 2/5, so the number of women is (2/5) * x\n    # Let's denote the number of children as c. Then, the number of men would be 3c (since it is thrice as many as children).\n    # According to the question, there are 190 more women than children, so we can set the equation (2/5) * x = c + 190\n    # Since everyone at the exhibition is either a man, woman or child, x = (2/5) * x + 3c + c\n    # These two equations can be combined in order to solve for x:\n    # (2/5) * x = c + 190\n    # x = (2/5) * x + 4c\n    # We can simplify the second equation to 3/5 * x = 4c\n    # Thus, c = (3/5 * x) / 4\n    # Now we replace c in the first equation:\n    # (2/5) * x = ((3/5 * x) / 4) + 190\n    # Multiply by 20 to clear denominators: 8x = 3x/2 + 20 * 190\n    # Multiply to get rid of the fraction: 16x = 3x + 20 * 380\n    # Move 3x to the left side: 13x = 20 * 380\n    # Solve for x: x = (20 * 380) / 13\n    x = (20 * 380) / 13\n    return int(x)\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    avg_total_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n    \n    total_pencils = total_pupils * avg_total_pencils\n    # Let the number of boys be b and number of girls be g\n    # b + g = 40  -> g = 40 - b\n    # avg_boys_pencils * b + avg_girls_pencils * g = total_pencils\n    # 20b + 60(40 - b) = total_pencils\n    \n    # Solving the equation for b\n    b = (total_pencils - avg_girls_pencils * total_pupils) / (avg_boys_pencils - avg_girls_pencils)\n    return int(b)\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression = -154\n    mount_fuji = 3776\n\n    distance = mount_fuji - turpan_depression\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    # Initialize sum\n    result_sum = 0\n    \n    # Loop through to calculate each term 1, 11, 111, ..., up to 50 ones\n    for i in range(1, 51):\n        # Add the number with i ones to the sum\n        result_sum += int('1' * i)\n    \n    # Return the last two digits of the total sum\n    return result_sum % 100\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of one apple be 'a' and the cost of one banana be 'b'\n    a, b = symbols('a b')\n\n    # Two equations based on the problem statement\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n    equation2 = Eq(7*b - 4*b, 8*a - 6*a)\n\n    # Solving the equations to find the cost of one banana\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Getting the cost of one banana (b)\n    cost_of_banana = solutions[b]\n\n    # Finding the total amount Einstein can spend (the total cost for 6 apples and 7 bananas or 8 apples and 4 bananas)\n    total_amount = 6*solutions[a] + 7*solutions[b]\n\n    # Calculating how many bananas Einstein can buy with the total amount\n    num_bananas = total_amount / cost_of_banana\n\n    return int(num_bananas)\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both_competitions = 20\n    total_students = coding_only + math_only + both_competitions\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    # Total envelopes to be divided\n    total_envelopes = 15\n    # According to the stipulations: \n    # at least 2 envelopes in box A\n    envelopes_in_A = 2\n    # at least 4 envelopes in box B\n    envelopes_in_B = 4\n    # at least 3 envelopes in box C\n    envelopes_in_C = 3\n\n    # Calculate the remaining envelopes to be distributed freely in 4 mailboxes\n    remaining_envelopes = total_envelopes - (envelopes_in_A + envelopes_in_B + envelopes_in_C)\n\n    # Since each mailbox can still have any number of envelopes and the total is at least 2 for A,\n    # 4 for B, and 3 for C, we compute the number of ways to distribute the remaining envelopes\n    # using stars and bars (combinations with repetitions)\n    from math import comb\n\n    # We have 3 partitions (for 4 mailboxes) and remaining_envelopes to distribute\n    ways_to_place = comb(remaining_envelopes + 4 - 1, 4 - 1)\n\n    return ways_to_place\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the true result\n    true_result = symbols('true_result')\n    \n    # Equation based on the problem statement\n    equation = Eq(true_result - (true_result / 2.11), 98.01)\n\n    # Solve the equation\n    solved = solve(equation, true_result)\n\n    # Return the true result value\n    return float(solved[0])\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n    \n    both_competitors = math_competitors + art_competitors - total_students\n    \n    return both_competitors\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Choon Mui's money\n    john, choon_mui = symbols('john choon_mui')\n\n    # Initial condition: they both have the same amount of money\n    equation1 = Eq(john, choon_mui)\n\n    # After spending, John has 4 times the money left compared to Choon Mui\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    # Calculate the amount of money John had left\n    john_left = solutions[john] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    total_seconds = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return total_seconds\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male = symbols('male')\n\n    female = male - 450\n    male_second_day = male * 0.82\n    female_second_day = female * 1.15\n    total_second_day = 1354\n\n    equation = Eq(male_second_day + female_second_day, total_second_day)\n\n    num_male_first_day = solve(equation, male)[0]\n\n    return int(num_male_first_day)\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_time = remaining_eggs * 2 + 4\n    remaining_after_first_sale = sold_second_time * 2\n    initial_eggs = remaining_after_first_sale + 5\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    mph_to_kph = 1.60934  # Conversion rate from miles per hour to kilometers per hour\n    speed_limit_mph = 65\n    time_minutes = 15\n    time_hours = time_minutes / 60  # Convert time to hours\n\n    distance_travelled_km = speed_limit_mph * time_hours * mph_to_kph\n\n    return distance_travelled_km\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    increase_percentage = 10 / 100\n    increased_amount = original_amount + (original_amount * increase_percentage)\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale = 20\n    model_length_cm = (actual_length_m / scale) * 100\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # Total number of permutations for four people is 4!\n    total_permutations = factorial(4)\n\n    # We subtract the permutations where at least one person is in their original position\n    # This is an application of the principle of inclusion-exclusion\n\n    # Single-position permutations (AAA'A', AA'AA', A'AAA', or 'AAAA')\n    single_position_permutations = 4 * factorial(3)\n\n    # Two-position permutations ('ABAB', 'BABA', or 'AB' 'BA')\n    two_position_permutations = 6 * factorial(2)\n\n    # Three-position permutations (one person remains in the same position while others rotate)\n    # These are not possible in this scenario, so they are 0 \n\n    # No-position permutations (no person is in the original position) - also known as derangements\n    no_position_permutations = total_permutations - (single_position_permutations - two_position_permutations)\n\n    return no_position_permutations\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    effective_distance = climb_distance - slide_distance\n    day = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n        \n    return day\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    initial_amount = 12000\n    interest_rate = 0.10\n    years = 2\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(95/100*x - 2/5*x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (2, 13)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 100:\n        return num\n        num += 7 * 13\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_income = hourly_rate * 8 * 5\n    debt_remaining = 700 - weekly_income\n    return debt_remaining\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n\n    start_time = end_time - work_duration\n    start_time_formatted = start_time.strftime(\"%I:%M %p\")\n\n    return start_time_formatted.strip(\"0\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Here A is the solution to the following riddle: A = 9_ _9_ _9_ _9_ _9 - 5_ _5_ _5_ _5_ _5\n    # We need to find the value of A. Each blank will be filled with the digit 9 for the first number and with the digit 5 for the second number.\n\n    # Construct the first number by filling in the digits\n    first_number = int(\"9\" + \"9\"*4 + \"9\"*4 + \"9\"*4 + \"9\"*4)\n    # Construct the second number by filling in the digits\n    second_number = int(\"5\" + \"5\"*4 + \"5\"*4 + \"5\"*4 + \"5\"*4)\n\n    # Calculate A by subtracting second number from the first number\n    A = first_number - second_number\n    return A\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    num = 14575\n    ans = round(num, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    days_Arjun = 14  # Arjun gets his hair cut every 2 weeks (14 days)\n    days_Yahya = 10  # Yahya gets his hair cut every 10 days\n    ans = lcm(days_Arjun, days_Yahya)\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Assign given distances and speeds to variables\n    first_distance = 280  # meters\n    middle_distance = 400  # meters\n    sprint_distance = 800 - (first_distance + middle_distance)  # Rest of the distance for the race\n\n    speed_first_stage = 7  # meters per second\n    speed_middle_stage = 5  # meters per second\n    speed_sprint_stage = 8  # meters per second\n\n    # Calculate the time for each stage\n    time_first_stage = first_distance / speed_first_stage\n    time_middle_stage = middle_distance / speed_middle_stage\n    time_sprint_stage = sprint_distance / speed_sprint_stage\n\n    # Calculate the total time for the race\n    total_time = time_first_stage + time_middle_stage + time_sprint_stage\n\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):  # loop for the first missing digit\n        for digit2 in range(10):  # loop for the second missing digit\n            number = int(f\"2{digit1}9{digit2}\")\n            if number % 3 == 0 and number % 5 == 0:  # Check for divisibility by 3 and 5\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    # Distance between trees\n    distance_apart = 7\n    # Total length of the highway where trees can be planted\n    highway_length = 42\n\n    # Calculate the number of trees\n    # As no trees are planted at the ends, the effective length is highway_length - (2 * distance_apart)\n    effective_length = highway_length - (2 * distance_apart)\n\n    # Number of trees is the effective length divided by the distance between each tree\n    # We add one since we're considering intervals, not points\n    num_trees = (effective_length // distance_apart) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_end = 34\n    stamps_gave = 14\n    stamps_bought = 11\n    stamps_used = 2\n\n    stamps_begin = stamps_end + stamps_gave + stamps_used - stamps_bought\n\n    return stamps_begin\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note_value = 50\n    \n    money_lost = cost_of_shoes + fake_note_value\n    return money_lost\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    difference = 1\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    ans = (5 / 7) * 112\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Consider students A, B, and C as one unit.\n    # We now have 8 units to arrange (the ABC unit + the remaining 7 students).\n    units_to_arrange = 8\n\n    # Calculate the number of permutations for these 8 units.\n    permutation_of_units = factorial(units_to_arrange)\n\n    # Inside the ABC unit, A, B, and C can be arranged in 3! ways.\n    permutation_within_abc = factorial(3)\n\n    # The total number of ways they can line up is the product of the two permutations.\n    total_permutations = permutation_of_units * permutation_within_abc\n\n    return total_permutations\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Form the original number as a string\n    original_num = ''.join(str(i) for i in range(1, 31))\n\n    # Sort the digits of the original number to get the smallest possible number\n    smallest_num_sorted = sorted(original_num)\n\n    # Remove the first 46 digits from the sorted list to get the smallest non-zero number\n    # '0's should be skipped when removing the digits since leading '0's do not\n    # contribute to the number's value\n    count_removed = 0\n    for idx, digit in enumerate(smallest_num_sorted):\n        if count_removed == 46:\n            break\n        if digit != '0':\n            count_removed += 1\n            smallest_num_sorted[idx] = ''\n\n    # Join the remaining digits to form the smallest number\n    smallest_num = int(''.join(smallest_num_sorted))\n    \n    return smallest_num\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # You can take out all blue balls which are 6 in number\n    # and not have a white ball yet. Therefore, to guarantee\n    # that you get at least one white ball, you need to take\n    # one more ball after that, which makes it 7.\n\n    return 6 + 1  # all blue balls + 1 white ball\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    \n    total_marbles = james + linda + ben\n    \n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    # Calculate the first part of the expression\n    first_part = sum(range(1, 5))\n\n    # Calculate the second part of the expression, the multiplication by zero makes this part 0\n    second_part = sum(range(2018, 2021)) * 0\n\n    # Final result is simply the first part since the second part is zero\n    ans = first_part * 1 - second_part\n\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # Each short ruler is 20 cm\n    short_ruler_length = 20\n    # The overlapping part is 3 cm\n    overlap_length = 3\n    # There are 2 overlaps when tying 3 rulers\n    number_of_overlaps = 2\n    \n    # Total length is the sum of the three short rulers minus the overlaps\n    total_length = (3 * short_ruler_length) - (number_of_overlaps * overlap_length)\n    \n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Jogging time from 6:30 am to 7:30 am is 1 hour\n    jogging_time = 1  # in hours\n    # Walking time from 7:30 am to 9:30 am is 2 hours\n    walking_time = 2  # in hours\n\n    # Jogging speed is 6 miles per hour\n    jogging_speed = 6  # in miles per hour\n    # Walking speed is 5 miles per hour\n    walking_speed = 5  # in miles per hour\n\n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance covered is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    new_cups = 0\n\n    while used_cups >= 7:\n        # Create new cups from the used ones\n        made_now = used_cups // 7\n        new_cups += made_now\n        \n        # Calculate the remaining used cups\n        used_cups = used_cups % 7 + made_now\n    \n    return new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000 - 222\n    return number\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 2300  # Convert plot length into cm (1 m = 100 cm)\n    cauliflower_spacing = 15  # cm apart\n    first_cauliflower_offset = 20  # cm away from the start\n    cauliflower_width = 45  # cm\n\n    total_spacing = plot_length_cm - first_cauliflower_offset - cauliflower_width\n    number_of_cauliflowers = total_spacing // (cauliflower_spacing + cauliflower_width) + 1\n\n    return int(number_of_cauliflowers)\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    days_1_to_3 = 14 * 3\n    days_4_to_5 = 9 * 2\n    day_6 = 12\n\n    total_pages = days_1_to_3 + days_4_to_5 + day_6\n    average_pages = total_pages / 6\n\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_A = 8\n    class_B = 12\n    class_C = 20\n\n    # Find the GCD (Greatest Common Divisor) of all three numbers\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote b for badminton club members and w for bowling club members.\n    b, w = symbols('b w')\n\n    # Equations based on the problem statement\n    equation1 = Eq(b, 3 * w)                  # Badminton club had thrice as many members as bowling club.\n    equation2 = Eq(b - 36, w - 4)             # After 36 and 4 members left, both clubs have the same number of members.\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (b, w))\n\n    # Number of members in each club after the members left.\n    badminton_final = solutions[b] - 36\n    bowling_final = solutions[w] - 4\n\n    return badminton_final, bowling_final\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    # Using the difference of squares formula: a^2 - b^2 = (a + b)(a - b)\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    ans = (20 + 18) * (20 - 18) + (19 + 17) * (19 - 17)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2  # meters per second\n    distance = 1.5 * 10**3  # meters\n    time = distance / speed_of_sound  # seconds\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    factors_count = 0\n    \n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors_count += 1\n            \n    return factors_count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    # Simple algebra: n * 5 = 4.5\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n\n    # find the number of cards\n    num_cards = total_value // average_value\n\n    # since the difference between largest and smallest is 6\n    # and the average value is 126, we can derive the cards values\n    # let smallest card be x, then others will be x+2, x+4, x+6\n    # since all cards are 3 digit odd numbers, so x will be odd too.\n\n    # equation to solve: x + (x+2) + (x+4) + (x+6) = 504\n    # combine terms: 4x + 12 = 504\n    # solve for x: 4x = 492 => x = 123\n\n    # since we are solving a three digits odd numbers case, our x(123) is the second smallest number\n    # we need to subtract 2 from x to get the smallest number which is also a 3 digit odd number\n    smallest_number = 123 - 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # Initialize factor counts for 2 and 5, as the number of zeros is determined by the pairings of 2s and 5s in the prime factorization\n    factor_2_count = 0\n    factor_5_count = 0\n\n    # Function to count the factors of a prime number in a range's factorial\n    def count_prime_factors_in_range(start, end, prime):\n        count = 0\n        for i in range(start, end + 1):\n            number = i\n            while number % prime == 0:\n                count += 1\n                number //= prime\n        return count\n\n    # Count the number of 2's and 5's in prime factorization in the range of 301 to 999\n    factor_2_count = count_prime_factors_in_range(301, 999, 2)\n    factor_5_count = count_prime_factors_in_range(301, 999, 5)\n\n    # The number of zeros at the end of a number is the minimum of the counts of 2 and 5\n    ans = min(factor_2_count, factor_5_count)\n\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fraction = sum(1/d for d in range(10, 20))\n    return int(sum_fraction)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 1\n    return x\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem\n    eq1 = Eq(girls + 90, boys)                           # boys are 90 more than girls\n    eq2 = Eq(girls_swim / girls_not_swim, 31 / 49)       # ratio of swimming girls to non-swimming girls\n    eq3 = Eq(boys_swim + 120, boys_not_swim)             # boys who can swim are 120 less than those who can't\n    eq4 = Eq(girls + boys, 1690)                         # total number of pupils\n    eq5 = Eq(girls, girls_swim + girls_not_swim)         # total girls as sum of swimming and non-swimming girls\n    eq6 = Eq(boys, boys_swim + boys_not_swim)            # total boys as sum of swimming and non-swimming boys\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Number of pupils who cannot swim (girls + boys)\n    cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return cannot_swim\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and (num - 1) % 13 == 0:\n            return num\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n    rabbit_sleep_time = 215  # min\n    start_delay_time = 10  # min\n\n    # Calculate the distance rabbit ran before it slept\n    rabbit_distance_before_sleep = rabbit_speed * start_delay_time\n\n    # Calculate the time when rabbit wakes up\n    rabbit_wake_time = start_delay_time + rabbit_sleep_time\n    \n    # Calculate the distance turtle ran when rabbit wakes up\n    turtle_distance_when_rabbit_wakes = turtle_speed * rabbit_wake_time\n\n    # If turtle already finished the race, it won\n    if turtle_distance_when_rabbit_wakes >= race_distance:\n        winner = 'turtle'\n        distance_between = 0\n    else:\n        # Calculate how long it will take rabbit to finish the race after waking up\n        remaining_distance_for_rabbit = race_distance - rabbit_distance_before_sleep\n        time_to_finish_for_rabbit = remaining_distance_for_rabbit / rabbit_speed\n\n        # Calculate the total time rabbit takes to finish\n        total_time_for_rabbit = time_to_finish_for_rabbit + rabbit_wake_time\n\n        # Calculate the distance turtle ran until rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * total_time_for_rabbit\n\n        # Check who reached the finish line first\n        if turtle_distance_when_rabbit_finishes >= race_distance:\n            winner = 'turtle'\n            distance_between = turtle_distance_when_rabbit_finishes - race_distance\n        else:\n            winner = 'rabbit'\n            distance_between = race_distance - turtle_distance_when_rabbit_finishes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n    \n    total_students = (english_classes + math_classes) - both_classes\n    return total_students\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    annual_increase_rate = 1.10  # 10% increase is equal to multiplying by 1.10\n\n    # Since the money increases each year by 10%, we divide the final amount by 1.10\n    # for each year to find out the initial amount.\n    amount_2019 = final_amount / annual_increase_rate\n    amount_2018 = amount_2019 / annual_increase_rate\n\n    return amount_2018\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(7)  # Total ways to arrange 7 people\n    ways_together = factorial(3) * factorial(5)  # Ways to arrange 3 people together and the other 4 with the group as a single unit\n    ans = total_ways - ways_together  # Subtract the cases where the 3 people are together from all possible arrangements\n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    # Given values\n    first_row = 10\n    fourth_row = 25\n    total_rows = 25\n\n    # Common difference calculation\n    common_difference = (fourth_row - first_row) / (4 - 1)\n\n    # Sum of arithmetic series formula: n/2 * (2a + (n-1)d)\n    total_athletes = (total_rows / 2) * (2 * first_row + (total_rows - 1) * common_difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1/2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    ans = count_trailing_zeros(789)\n    \n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    # Using the formula for the average score of the combined teams:\n    # (Total score of Team A + Total score of Team B) / (Number of students in Team A + Number of students in Team B) = Average score of combined teams\n    # (76 * 20 + 67 * x) / (20 + x) = 70\n    # Solve for x to find the number of students in Team B.\n    # 1520 + 67x = 70 * (20 + x)\n    # 1520 + 67x = 1400 + 70x\n    # 3x = 120\n    x = 120 // 3\n    return x\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    min_participants_per_school = 4\n    # Applying the Pigeonhole Principle:\n    # If each school has at least 4 participants, then each 'pigeonhole' (school)\n    # must have 4 'pigeons' (participants).\n    # To find the maximum number of schools, we divide the total participants by the minimum\n    # participants per school and take the ceiling of the result since we cannot have a fraction of a school.\n    max_schools = (participants + min_participants_per_school - 1) // min_participants_per_school\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perm = permutations(digits, 6)\n    min_product = float('inf')\n    \n    for p in perm:\n        num1 = p[0] * 100 + p[1] * 10 + p[2]\n        num2 = p[3] * 100 + p[4] * 10 + p[5]\n        product = num1 * num2\n        if num1 < 200 and num2 > 200:\n            min_product = min(min_product, product)\n        \n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    all_possible_numbers = list(permutations(range(1, 10), 7))\n    largest_product, least_product = 0, float('inf')\n    \n    for number in all_possible_numbers:\n        A, B, C, D, E, F, G = number\n        num_4_digit = A * 1000 + B * 100 + C * 10 + D\n        num_3_digit = E * 100 + F * 10 + G\n        \n        if num_4_digit + num_3_digit == 1993:\n            product = num_4_digit * num_3_digit\n            largest_product = max(largest_product, product)\n            least_product = min(least_product, product)\n    \n    difference = largest_product - least_product\n    return difference\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25\n    max_dice_roll = 6\n    if min_steps % max_dice_roll == 0:\n        min_rolls = min_steps // max_dice_roll\n    else:\n        min_rolls = min_steps // max_dice_roll + 1\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 50\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens_digit in range(1, 10):  # as it's a 2-digit number, range starts from 1 to 9\n        ones_digit = 15 - tens_digit\n        if ones_digit < 10:  # ones digit must be less than 10 for a valid 2-digit number\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    total_distance = 220\n    climb_distance = 40\n    slip_distance = 10\n    effective_distance = climb_distance - slip_distance\n    hours = 0\n\n    while total_distance > 0:\n        hours += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slip_distance\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(29, 0, -1):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Total typists initially\n    total_typists = 5\n    # Words typed by total_typists in minutes\n    words = 6000\n    minutes = 20\n\n    # Words to be typed\n    target_words = 9000\n    # Typists fell sick\n    sick_typists = 2\n    working_typists = total_typists - sick_typists\n\n    # Declare the time he thought they needed\n    declared_minutes = 45\n\n    # Calculate rate of typing per typist per minute\n    rate_per_typist_per_minute = words / (total_typists * minutes)\n    \n    # Calculate actual time needed with remaining typists for target_words\n    actual_minutes_needed = target_words / (rate_per_typist_per_minute * working_typists)\n\n    # Compare declared_minutes with actual_minutes_needed\n    # If declared_minutes is not equal to actual_minutes_needed then return actual_minutes_needed\n    if declared_minutes != actual_minutes_needed:\n        return actual_minutes_needed\n    else:\n        # Return True if he's correct\n        return True\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    price_per_cabbage = 0.96\n    total_cabbages = 8\n    total_lettuces = 6\n\n    total_amount = price_per_cabbage * total_cabbages\n\n    price_per_lettuce = total_amount / total_lettuces\n\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n\n    saved_money = total_money - spent_money\n    \n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_number_of_plants = 11\n    remaining_number_of_plants = 3\n    \n    # Original number of intervals is (original number of plants - 1)\n    original_intervals = original_number_of_plants - 1\n    \n    # New number of intervals is (remaining number of plants - 1)\n    new_intervals = remaining_number_of_plants - 1\n    \n    # The total distance between plants remains the same, so new interval is:\n    new_interval = total_distance / new_intervals\n    \n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes\n    end_time = (14 * 60) + 5     # Convert end time to minutes\n    \n    duration = end_time - start_time  # Calculate the duration of the call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    \n    total_cost = duration * cost_per_minute  # Calculate the total cost of the call\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    sum_of_factors = sum(divisors(20))\n    return sum_of_factors\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    ans = 320 * 0.40\n    return ans\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # We only have numbers 222, 333 which don't have both digits, so we subtract them.\n    total_numbers = 2**3 - 2\n    # Numbers with at least a single 2 and a single 3\n    return total_numbers\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('17/10/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('20/12/2023', '%d/%m/%Y')\n    \n    current_date = start_date\n    sunday_count = 0\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 represents Sunday\n            sunday_count += 1\n        current_date += timedelta(days=1)\n    \n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    strawberry_tarts, apple_tarts = symbols('strawberry_tarts apple_tarts')\n    cost_per_apple_tart = symbols('cost_per_apple_tart')\n\n    # Equations based on the problem statement\n    equation1 = Eq(apple_tarts, 2 * strawberry_tarts)  # Twice as many apple tarts as strawberry tarts\n    equation2 = Eq(cost_per_apple_tart * apple_tarts, (cost_per_apple_tart + 0.40) * strawberry_tarts)  # Equal amount spent on each type\n    equation3 = Eq(cost_per_apple_tart * apple_tarts + (cost_per_apple_tart + 0.40) * strawberry_tarts, 40)  # Total amount spent\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (strawberry_tarts, apple_tarts, cost_per_apple_tart))\n\n    total_tarts = solutions[strawberry_tarts] + solutions[apple_tarts]\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for the first two traffic lights\n    first_light = 30  # 0.5 minutes is 30 seconds\n    second_light = 45  # 0.75 minutes is 45 seconds\n\n    # Find the least common multiple for the first two traffic lights\n    lcm_first_second = lcm(first_light, second_light)\n\n    # Since all three lights turn green every 9 minutes (540 seconds),\n    # the third light should be the LCM of the first two lights (but at least 30 seconds long)\n    # The third light cannot exceed 540 seconds to satisfy the condition that all light turns green at the same time\n    lcm_all = 540\n\n    # The shortest possible time for the third traffic light is thus the LCM divided by the LCM of the first two\n    # because we were looking for the duration of the third traffic light on its own\n    third_light = lcm_all // lcm_first_second\n    \n    # Convert the time to minutes and check it's not below 30 seconds\n    if third_light < 30:\n        return None\n    else:\n        return third_light\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(5)\n    \n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n\n    percentage_increase = (increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position_from_right = 17\n\n    tony_position_from_left = total_children - tony_position_from_right + 1\n\n    if tony_position_from_left > henry_position:\n        count = tony_position_from_left - henry_position + 1\n    else:\n        count = henry_position - tony_position_from_left + 1\n\n    return count\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres = metres * 1000  # there are 1000 millimeters in a meter\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_integers = 100\n    multiples_of_10 = total_integers // 10\n    \n    not_multiples_of_10 = total_integers - multiples_of_10\n    \n    percentage = (not_multiples_of_10 / total_integers) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pieces = symbols('total_pieces')\n\n    # Let's denote the number of pieces fitted on the first day as f1\n    # On the first day, 20% of the total pieces are fitted\n    f1 = 0.20 * total_pieces\n    \n    # On the second day, 60 pieces are fitted\n    f2 = 60\n\n    # After the second day, the ratio of the number of fitted pieces to unfitted is 2:5\n    # This means that 2 out of 7 parts are fitted, so we can write:\n    # (f1 + f2) / (total_pieces - f1 - f2) = 2/5\n    # We can now solve this equation to find the total number of pieces.\n    \n    equation = Eq((f1 + f2) / (total_pieces - f1 - f2), 2/5)\n\n    solutions = solve(equation, total_pieces)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    payment = initial_loan * 0.30\n    remaining_debt = initial_loan - payment\n\n    return remaining_debt\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km per hour\n    rose_speed = 10  # Rose's speed in km per hour\n    time_to_meet = 10  # Time taken to meet in hours\n\n    # Total distance covered by both Jack and Rose when they meet\n    total_distance = (jack_speed + rose_speed) * time_to_meet\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Number of legs for each type of animal\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Given number of each animal except birds\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Total number of legs from given animals\n    total_legs_from_cats_dogs_rabbits = (num_cats * legs_per_cat) + (num_dogs * legs_per_dog) + (num_rabbits * legs_per_rabbit)\n\n    # Total number of legs\n    total_legs = 28\n\n    # Calculate the number of birds from the difference in legs\n    num_birds = (total_legs - total_legs_from_cats_dogs_rabbits) / legs_per_bird\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    factors = [i for i in range(1, 25) if 24 % i == 0 and i % 2 != 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    melvin_original = 40  # Melvin's original number of cards\n    melvin, nelson, oliver = symbols('melvin nelson oliver')\n    \n    # Melvin's card transactions\n    melvin_after_gain_from_nelson = melvin_original + 5/8 * melvin_original\n    melvin_after_loss_to_oliver = melvin_after_gain_from_nelson - 1/4 * melvin_original\n    melvin_final = melvin_after_loss_to_oliver + 1/8 * melvin_original\n    \n    # Nelson's card transactions\n    nelson_after_loss_to_melvin = nelson - 5/8 * melvin_original\n    nelson_after_loss_to_oliver = nelson_after_loss_to_melvin - 1/4 * melvin_original\n    nelson_final = nelson_after_loss_to_oliver - 1/8 * melvin_original\n    \n    # Oliver's card transactions\n    oliver_final = oliver + 1/4 * melvin_original + 1/4 * melvin_original\n    \n    # Equations based on the final card counts being equal\n    equation1 = Eq(melvin_final, oliver_final)\n    equation2 = Eq(nelson_final, oliver_final)\n    equation3 = Eq(melvin + nelson + oliver, melvin_original + melvin_final + nelson_final)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (melvin, nelson, oliver))\n    \n    # Total number of cards they had at first\n    total_cards = solutions[melvin] + solutions[nelson] + solutions[oliver]\n    \n    return total_cards\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    polly_age = 20\n    age_diffs = [0, 2, 4]  # Age differences between Polly and her children\n    while True:\n        children_ages = [polly_age - diff for diff in age_diffs]\n        if sum(children_ages) == polly_age:\n            return polly_age\n        polly_age += 1\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "from sympy import primefactors\n\ndef solution():\n    numbers = [6, 12, 35, 175, 245, 300]\n    factors = {n: primefactors(n) for n in numbers}\n    products = {n: set() for n in numbers}\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            products[numbers[i]].add(numbers[i] * numbers[j])\n            \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                product = numbers[i] * numbers[j] * numbers[k]\n                for n in products:\n                    if product in products[n]:\n                        return set(numbers) - {n, numbers[i], numbers[j], numbers[k]}\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n\n    ans = part1 == part2\n\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20 * 5\n    weight_of_suitcase = total_weight - 20\n    return weight_of_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the smaller number and y be the larger number.\n    # We know that y - x = 39 and y + x = 59.\n    # Adding the two equations, we get 2y = 39 + 59.\n    y = (39 + 59) // 2\n\n    # Then, using y, we find x: y + x = 59 or x = 59 - y.\n    x = 59 - y\n\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # The combined age of the 2 dogs 4 years ago\n    combined_age_4_years_ago = 10\n    \n    # Since 4 years have passed from that time,\n    # each dog is 4 years older now, meaning the\n    # current combined age is increased by 4 years for each dog\n    current_combined_age = combined_age_4_years_ago + 2 * 4\n    \n    # We want to find out the combined age in 2 years, so we add\n    # 2 years for each dog to the current combined age\n    future_combined_age = current_combined_age + 2 * 2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14 * 10 ** (m - 1), 8 * 10 ** m - 3)\n\n    solution_m = solve(equation, m)\n\n    return solution_m[0]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution(0, 0)  # Replace 0 with any values for x and y to use the function"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    total_amount = 340\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n\n    # Solving the system of equations for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Since we have natural numbers, we select the positive solution.\n    for sol in solutions:\n        if all(num > 0 for num in sol):\n            A_val, B_val, C_val = sol\n            break\n\n    return A_val + B_val + C_val\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n\n    years = 0\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n    equation = Eq((100*a + 10*b + c)*(a + b + c), 1926)\n    solutions = solve(equation, (a, b, c))\n    \n    for solution in solutions:\n        if all(map(lambda x: x.is_integer and x >=0, solution)):\n            return sum(solution)\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Cora has x sweets and Qingle has y sweets\n    cora, qingle = symbols('cora qingle')\n\n    # If Cora gives Qingle 8 sweets, Qingle will have 4 more sweets than Cora\n    # So we have the equation: (cora - 8) + 4 = qingle + 8\n    eq1 = Eq(cora - 8 + 4, qingle + 8)\n\n    # We need to find the difference in the number of sweets they have in the beginning.\n    # We are looking for the value of (cora - qingle)\n    difference = cora - qingle\n\n    # Now, we just solve the equation\n    solutions = solve(eq1, difference)\n\n    return solutions[difference]\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the graph passes through the origin, we know that b = 0\n    b = 0  \n    # It also passes through the point (4, 8), which gives us the equation 8 = m * 4 + b\n    # Since b = 0, we can solve for m by dividing both sides by 4\n    m = 8 / 4\n    # Now we can write the linear equation as y = mx + b\n    # Plugging in the values for m and b, we get y = 2x + 0, which simplifies to y = 2x\n    return f\"y={m}x{b:+}\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's say Jane has J seashells and Eric has E seashells\n    J, E = symbols('J E')\n\n    # Jane has 5 seashells for every 7 seashells Eric has\n    equation1 = Eq(J, 5/7 * E)\n\n    # If Eric gives Jane 6 seashells, their ratio changes to 11:13\n    equation2 = Eq((J + 6)/(E - 6), 11/13)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (J, E))\n\n    # total seashells they have\n    total_seashells = solutions[J] + solutions[E]\n\n    return int(total_seashells)\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    hours_to_fill = 1 / total_rate\n    return hours_to_fill\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return int(total_age)\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    prime_factors = [48, 925, 38, 435]\n    factor_2 = 0\n    factor_5 = 0\n    for number in prime_factors:\n        while number % 2 == 0:\n            factor_2 += 1\n            number //= 2\n        while number % 5 == 0:\n            factor_5 += 1\n            number //= 5\n    return min(factor_2, factor_5)\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    min_even_number = float('inf')\n    \n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:\n            num = int(''.join(map(str, perm)))\n            if num < min_even_number:\n                min_even_number = num\n                \n    return min_even_number\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_add = 20\n    naida_subtract = 1\n\n    while warren_add > 0:\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtract\n\n        warren_add -= 1\n        naida_subtract += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    both_instruments = piano_pupils / 4\n\n    neither_instrument = total_pupils - (piano_pupils + violin_pupils - both_instruments)\n\n    return int(neither_instrument)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_in_years = 11\n\n    total_amount = principal * (1 + rate_of_interest * time_in_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    from sympy import symbols, integrate, sqrt\n\n    # Define the coordinate system\n    x, y = symbols('x y')\n\n    # Calculate the area of the quarter circle with radius 1, centered at the right angle vertex of the triangle\n    quarter_circle_area = integrate(integrate(1, (y, 0, sqrt(1 - x**2))), (x, 0, 1))\n\n    # Calculate the area of the isosceles right triangle\n    right_triangle_area = (2 * 2) / 2\n\n    # Probability is the area of the quarter circle divided by the area of the triangle\n    probability = quarter_circle_area / right_triangle_area\n\n    return probability\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    maths_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = maths_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for D in range(1, 10):  # First digit cannot be 0, and must be less than 10 to be a single digit\n        A = D // 4\n        if A * 4 == D and A != 0:  # Check it's exactly 1/4 and not 0\n            B = A - 1\n            if B != 0 and B != D:  # Second digit cannot be the same as the last digit and not 0\n                C = D + 1\n                if C != A and C != B and C != D and C < 10:  # Ensuring C is different and a single digit\n                    ABCD = 1000 * A + 100 * B + 10 * C + D\n                    DCBA = 1000 * D + 100 * C + 10 * B + A\n                    if ABCD * 4 == DCBA:  # Check if the number in reverse order is 4 times the original\n                        return ABCD\n    return None\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the times given in the problem\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_bus_caught = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate the duration of walking to and from the bus\n    walking_to_bus = time_bus_caught - time_left_school\n    bus_drop_off_time = time_bus_caught + time_bus_trip\n    walking_from_bus = time_got_home - bus_drop_off_time\n\n    # total walking time is the sum of walking to the bus and from the bus to home\n    total_walking_time = walking_to_bus + walking_from_bus\n\n    # Return the total walking time in minutes\n    return total_walking_time.seconds // 60\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_result = 25\n    added_number = 10\n    division_factor = 3\n\n    initial_result = (final_result - added_number) * division_factor\n\n    return initial_result\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n\n    total_sum = mean_value * (len(numbers) + 1)\n    sum_of_known_numbers = sum(numbers)\n    a = total_sum - sum_of_known_numbers\n\n    return a\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 1\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # where n is the number of terms, a_1 is the first term, and a_n is the last term.\n    \n    n = 8  # number of terms\n    a_1 = 1  # first term\n    a_n = 8  # last term\n    \n    S_n = n/2 * (a_1 + a_n)  # sum of the arithmetic sequence\n    \n    return S_n\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    percentage = 20\n    total = 8880\n\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    # The left hand side of the equation\n    lhs = 2030452\n    # Substract 30000 and 452 to isolate the term with the missing number\n    result = lhs - 30000 - 452\n    # Divide by 2 to find the missing number\n    missing_number = result // 2\n    return missing_number\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    piece_length_m = (ribbon_length_cm / 2) / 100\n    return piece_length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Maximum possible number of socks without getting a pair is one from each color.\n    # So after those 3, the very next sock must create a pair.\n    max_socks_without_pair = 3\n    return max_socks_without_pair + 1  # Adding the next sock to get at least one pair\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 1 + 7  # Victoria + left + right\n    total_rows = 1 + 1 + 8  # in front of her + Victoria's row + behind her\n    total_pupils = pupils_per_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    average_marks = 75\n    total_tests = 3\n    total_marks_two_tests = 172\n    \n    total_marks = average_marks * total_tests\n    remaining_marks = total_marks - total_marks_two_tests\n    \n    return remaining_marks\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    x = symbols('x')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(9 * ((x + 3) / 4), 81)\n    \n    # Solve the equation for x\n    result = solve(equation, x)\n    \n    # Since the result is a list, take the first (and only) element\n    return result[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculating numerator\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    \n    # Calculating denominator\n    denominator = sum(1 / (i * (31 - i)) for i in range(11, 16))\n    \n    # Calculating the final result\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Mr. Smith's mixture\n    mr_smith_sugar = 300 * 0.5 + 600 * 0.2\n    \n    # Mrs. Smith's mixture\n    mrs_smith_sugar = 700 * 0.1 + 300 * (x / 100)\n\n    # Total volume of mixtures\n    mr_smith_volume = 300 + 600\n    mrs_smith_volume = 700 + 300\n\n    # Setting up the equation\n    equation = Eq(mr_smith_sugar / mr_smith_volume, mrs_smith_sugar / mrs_smith_volume)\n    \n    # Solving for x\n    solution = solve(equation, x)\n\n    # Return the result rounded to two decimal places\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    # The distance covered by Peter from 8.00 am to 8.30 am\n    distance_covered_in_30_min = 6300 - 1800\n    \n    # The speed of Peter per minute \n    speed_per_min = distance_covered_in_30_min / 30\n    \n    # The total distance to be covered to reach his friend's house \n    total_distance = 6300\n    \n    # The time taken to cover the full distance to his friend's house in minutes\n    time_to_reach_in_min = total_distance / speed_per_min\n    \n    # The time he started is 8.00 am, which we need to add to the time taken to reach his friend's house\n    start_hour = 8\n    start_min = 0\n    \n    # Time when he reaches his friend's house (in hours and minutes)\n    reach_hour = start_hour + (time_to_reach_in_min + start_min) // 60\n    reach_min = (time_to_reach_in_min + start_min) % 60\n    \n    # Since we assume that he could potentially jog for more than an hour, \n    # we adjust reach_hour by adding the hours resulting from minutes divided by 60 \n    reach_hour += reach_min // 60\n    \n    # We also adjust the minutes to remain within 60 by taking the modulo\n    reach_min %= 60\n    \n    # Convert the hours and minutes into a formatted time string\n    time_reached = f\"{int(reach_hour):02d}:{int(reach_min):02d}\"\n    \n    return time_reached\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candy = 36\n    candy_to_lily = 3 / 4 * initial_candy\n    remaining_candy = initial_candy - candy_to_lily\n    candy_to_brother = 1 / 3 * remaining_candy\n    final_candy = remaining_candy - candy_to_brother\n\n    return int(final_candy)\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    may_age_10 = 10\n    kenny_age_now, k_age_now = symbols('kenny_age_now k_age_now')\n\n    # When May is 10, Kenny's age and his younger brother's age sum up to 3 times May's age\n    equation1 = Eq(kenny_age_now + (kenny_age_now - 2), 3 * may_age_10)\n\n    # Solve the equation system for Kenny's current age\n    solutions = solve((equation1,), (kenny_age_now,))\n\n    # Kenny's age right now\n    kenny_age_now = solutions[kenny_age_now]\n\n    # May is 7 years old now\n    may_age_now = 7\n\n    # How much older is Kenny than May this year\n    age_difference = kenny_age_now - may_age_now\n\n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of donuts and m be the number of muffins.\n    d, m, money = symbols('d m money')\n\n    # Amy spent half of her money on donuts and half on muffins.\n    # Price per donut and muffin\n    price_per_donut = 10 / 7\n    price_per_muffin = 6 / 3\n\n    # The money spent on donuts and muffins\n    equation1 = Eq(d * price_per_donut, money / 2)\n    equation2 = Eq(m * price_per_muffin, money / 2)\n\n    # She bought 54 more donuts than muffins.\n    equation3 = Eq(d, m + 54)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (d, m, money))\n\n    return solutions[money]\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Total weight of sweets bought (in kg)\n    total_weight = 5\n    # Cost of sweets\n    cost_price = 10\n    # Weight per bag (in kg)\n    weight_per_bag = 250 / 1000\n    # Selling price per bag (in pounds)\n    selling_price_per_bag = 0.65\n    \n    # Total number of bags\n    total_bags = total_weight / weight_per_bag\n    \n    # Total selling price\n    total_selling_price = total_bags * selling_price_per_bag\n    \n    # Profit\n    profit = total_selling_price - cost_price\n    \n    # Percentage profit\n    percentage_profit = (profit / cost_price) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    return 14 - 4\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance = 30  # distance in mm\n    teeth_gap = distance / (9 - 4)  # distance between each tooth\n    total_length_mm = teeth_gap * (100 - 1)  # total length in mm\n    total_length_cm = total_length_mm / 10  # convert mm to cm\n\n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate grandmother's age on 1st December 1996\n    grandmother_age_1996 = 80 - (2008 - 1996)\n    \n    # Calculate mother's age on 1st December 1996\n    mother_age_1996 = 40\n    \n    # Calculate the difference in age between grandmother and mother\n    age_diff = grandmother_age_1996 - mother_age_1996\n    \n    # Calculate mother's age when she was 25\n    mother_age_25 = 25\n\n    # Grandmother's age when mother was 25\n    grandmother_age_when_mother_25 = mother_age_25 + age_diff\n\n    return grandmother_age_when_mother_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(5)  # Total ways without restrictions\n    adjacent_ways = factorial(4) * 2  # Ways in which the two are adjacent times 2 positions\n\n    non_adjacent_ways = total_ways - adjacent_ways\n\n    return non_adjacent_ways\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Each person must get at least one ice-cream cone, so we give one to each first.\n    remaining_cones = 5 - 3\n\n    # Now we need to distribute the remaining cones to any of the three friends.\n    # This is equivalent to placing two dividers in the sequence to create three slots.\n    # For example, **|*|* means friend 1 gets 2 cones, friend 2 gets 1, and friend 3 gets 2.\n    # The number of ways to place the dividers is \"n+k-1 choose k\", where n is the number of items\n    # to distribute (remaining_cones) and k is the number of dividers (number of friends - 1).\n\n    friends = 3\n    dividers = friends - 1\n    ways = math.comb(remaining_cones + dividers, dividers)\n\n    return ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = 2 / 3 * total_vegetables\n    tuesday_sales = 2 / 5 * (total_vegetables - monday_sales)\n    total_sales = monday_sales + tuesday_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    # P has 4 times as much water as Q\n    equation1 = Eq(P, 4 * Q)\n    # P has 2700 ml more water than Q\n    equation2 = Eq(P, Q + 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Picking the highest number of balls of different colors without fulfilling the requirement\n    max_different_balls = 15 + 25 + 33 + 23 + 39\n    \n    # After picking the maximum number of different balls, pick one more to be sure to have 16 of one color\n    balls_to_get_one_color = max_different_balls + 1\n    \n    # Picking the rest of the balls of a different color that is not already 16.\n    balls_to_get_another_color = 12\n\n    # The total number of balls will be the sum of the two stages\n    total_balls = balls_to_get_one_color + balls_to_get_another_color\n    \n    return total_balls\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given = total_biscuits / 4\n    biscuits_left = total_biscuits - biscuits_given\n    return biscuits_left\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for variables A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Set up the system of equations based on the given information\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B from the solutions\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one table and one chair\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n    \n    # Equation 1: 2 tables and 5 chairs cost £220\n    equation1 = Eq(2 * table_cost + 5 * chair_cost, 220)\n    \n    # Equation 2: The cost of one table is the same as the cost of 3 chairs\n    equation2 = Eq(table_cost, 3 * chair_cost)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n    \n    # Return the cost of each table\n    return solutions[table_cost]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    # Since the series is alternating additions and subtractions of multiples of 5,\n    # We can separate the series into two parts: addition of positive terms and subtraction of negative terms.\n    # Positive terms are: 5, 15, 25, ..., 855 (5 * (1, 3, 5, ..., 171))\n    # Negative terms are: 10, 20, 30, ..., 850 (5 * (2, 4, 6, ..., 170))\n\n    # Calculate the number of terms\n    num_positive_terms = (855 - 5) // (5 * 2) + 1\n    num_negative_terms = (850 - 10) // (5 * 2) + 1\n\n    # Calculate the sum of positive and negative terms separately\n    sum_positive_terms = 5 * sum(range(1, 2 * num_positive_terms, 2))\n    sum_negative_terms = 5 * sum(range(2, 2 * num_negative_terms, 2))\n\n    # The result is the sum of positive terms minus the sum of negative terms\n    ans = sum_positive_terms - sum_negative_terms\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent_total = 1.55 + 2.25\n    fraction_left = 4 / 5\n    initial_money = spent_total / (1 - fraction_left)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n    \n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 * 75 / 100\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    \n    total_coins = joann_coins + sana_coins + nancy_coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    ratio_lucas_speed = 3\n    ratio_mother_speed = 5\n    total_ratio = ratio_lucas_speed + ratio_mother_speed\n    \n    # Lucas' part of the distance covered when there's 4 miles left between them\n    distance_lucas_walked = (total_distance - remaining_distance) * (ratio_lucas_speed / total_ratio)\n    \n    return distance_lucas_walked\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_diff = -1\n    num_terms = 30\n\n    sum_of_sequence = (num_terms / 2) * (2 * first_term + (num_terms - 1) * common_diff)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    pizzas_per_person = pizzas_initial / people_initial\n    pizzas_needed = pizzas_per_person * people_final\n    \n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n    while num_teams > 1:\n        num_teams //= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    result = 21 * 5\n    return result\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    limit = 2016 * 72\n\n    # Find the largest perfect square less than or equal to limit\n    root_limit = int(math.sqrt(limit))\n\n    # Now iterate from the first perfect square which is 1^2 and check if dividing by 72 yields a natural number\n    for i in range(1, root_limit + 1):\n        square = i * i\n        if square % 72 == 0:\n            divided_number = square // 72\n            if 1 <= divided_number <= 2016:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Julie's earnings as 'j'\n    marion, ethan, julie = symbols('marion ethan julie')\n\n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    \n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    \n    # The difference in pay between Marion and Ethan is $168\n    equation3 = Eq(ethan - marion, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marion, ethan, julie))\n\n    # Calculate the sum of all their earnings\n    total_earnings = solutions[marion] + solutions[ethan] + solutions[julie]\n\n    return total_earnings\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of students in the big class\n    # Let s represent the number of students in the small class\n    b, s = symbols('b s')\n\n    # equation1: 2 apples per student in the big class + 2 apples per student in the small class = 48 apples\n    # equation2: 3 oranges per student in the big class + 2 oranges per student in the small class = 55 oranges\n    equation1 = Eq(2 * b + 2 * s, 48)\n    equation2 = Eq(3 * b + 2 * s, 55)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n    total_cost = cost_per_lollipop * number_of_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define congruences based on the problem statement\n    # x ≡ 0 (mod 5)\n    # x ≡ 6 (mod 7) because if there were 7, no one would sit out\n    # x ≡ 7 (mod 8) because again, if there were 8, no one would sit out\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years_future = symbols('years_future')\n    \n    # Let Efron's age now be E and Danny's age now be D\n    E, D = symbols('E D')\n    \n    # Initial age relation and ratio\n    equation1 = Eq(D, E + 30)\n    equation2 = Eq(D/E, 8/3)\n    \n    # Future age ratio\n    equation3 = Eq((D + years_future) / (E + years_future), 5/3)\n    \n    # Solve the system of equations\n    current_ages = solve((equation1, equation2), (E, D))\n    \n    # Substitute current ages into the future age equation\n    years_to_future_ratio = solve(equation3.subs({E: current_ages[E], D: current_ages[D]}), years_future)\n    \n    return years_to_future_ratio[0]\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    desired_cookies = 150\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(0, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit >= 10:\n            break\n        for third_digit in range(0, 10):\n            sum_digits = first_digit + second_digit + third_digit\n            if 9 < sum_digits < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    # Number of ways to choose two different items\n    pencils = 15\n    rulers = 20\n    pens = 10\n    \n    # Calculate the number of ways to choose one pencil and one ruler, one ruler and one pen, and one pencil and one pen\n    pencil_ruler_combinations = pencils * rulers\n    ruler_pen_combinations = rulers * pens\n    pencil_pen_combinations = pencils * pens\n\n    # Add up the different combinations\n    total_combinations = pencil_ruler_combinations + ruler_pen_combinations + pencil_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    return -6 / 6 == 6\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    matches_eq = Eq(n*(n-1)/2, 15)\n    \n    n_value = solve(matches_eq, n)\n    \n    # Since number of teams can't be negative, filter the positive value.\n    for value in n_value:\n        if value > 0:\n            return value\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # In the group stage, each of the 4 teams plays against each other once.\n    # Number of games in one group is the number of ways to choose 2 teams out of 4 to play a match.\n    # That is C(4, 2) for each group.\n    games_per_group = (4 * 3) // 2  # Combinatorial formula for C(4, 2) without using additional libraries.\n\n    # There are 8 groups.\n    group_stage_games = games_per_group * 8\n\n    # In the knockout round, there are 16 teams, and each match eliminates one team.\n    # Thus, there will be 15 matches: 8 in the round of 16, 4 in the quarter-finals,\n    # 2 in the semi-finals, 1 for the third place play-off, and 1 final match.\n    knockout_round_games = 16 - 1  # Because with each game, one team will be eliminated until one remains.\n\n    # Total number of games is the sum of both stages.\n    total_games = group_stage_games + knockout_round_games\n\n    return total_games\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import factorint\n\n    num = 224\n    factors = factorint(num)\n    num_factors = 1\n    for exponent in factors.values():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of an apple and a banana\n    apple_price, banana_price = symbols('apple_price banana_price')\n\n    # Define the equations based on given information\n    equation1 = Eq(3 * apple_price + 2 * banana_price, 1.25)\n    equation2 = Eq(apple_price + banana_price, 0.48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple_price, banana_price))\n\n    # Calculate the cost of 5 bananas using the found price for one banana\n    cost_5_bananas = 5 * solutions[banana_price]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    total_combinations = pencils * rulers * pens\n\n    return total_combinations\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_wrong = -2\n    total_points = 44\n\n    # Let the number of correct answers be x\n    # Then the number of wrong answers is total_questions - x\n    # Setting up the equation:\n    # points_for_correct * x + points_for_wrong * (total_questions - x) = total_points\n    # 6x - 2(10 - x) = 44\n    # 6x - 20 + 2x = 44\n    # 8x = 64\n    # x = 64 / 8\n    x = (total_points + points_for_wrong * total_questions) / (points_for_correct + points_for_wrong)\n\n    return int(x)\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirt = symbols('shorts tshirt')\n\n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirt))\n\n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of triangles be x\n    # Then the number of quadrilaterals will be x + 82\n    # And the number of pentagons is given as 2\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 4 * (x + 82) + 5 * 2, 394)\n    \n    num_triangles = solve(equation, x)[0]\n    num_quadrilaterals = num_triangles + 82\n\n    return num_quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    common_difference = 0.8 - first_term\n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # Since there are 4 posts, there are 3 gaps between them\n    total_distance = distance_between_posts * number_of_gaps\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least Common Multiple of 3, 5, and 7\n    for i in range(lcm, 1000, lcm):  # Start from lcm and increment by lcm\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-boy teams, y be the all-girl teams. \n    # From (i), we have 15 teams with only 1 boy, so 15 girls in those teams.\n    # From (ii), 27 teams with two or more boys, none of these can be all-girl teams,\n    # so these 27 teams contribute at least (27-15)*2 = 24 boys.\n    # From (iii), x = 2*y and each all-boy team contributes 3 boys.\n    # Total boys and girls must be 150.\n    # System of equations:\n    # x + y = 27 (all teams with at least one boy are either all-boy or all-girl)\n    # 3x + 15 + 24 + 3y = 150 (total count of students)\n    # Solving this system gives x(all-boy teams) and y(all-girl teams)\n    # Boys = 3*number_of_all_boy_teams + 15(in one-boy teams) + 24(two boys in 27-15 teams)\n    # Girls = 3*number_of_all_girl_teams + (15 one-boy teams have 2 girls each)\n\n    # solve for x and y\n    # From x = 2y and x+y = 27, we have x = 2y and 2y+y = 27 which gives y = 9 and x = 18\n    all_girl_teams = 9\n    all_boy_teams = 18\n    \n    # Calculate total number of girls\n    girls_in_mixed_teams = 15 * 2  # 15 teams with 1 boy and 2 girls each\n    girls_in_all_girl_teams = all_girl_teams * 3  # each all-girl team has 3 girls\n    \n    # Total number of girls\n    total_girls = girls_in_mixed_teams + girls_in_all_girl_teams\n    return total_girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, -2 + 3 * pears)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the base 10 numbers to base 7\n    num1 = int(str(61), 7)\n    num2 = int(str(34), 7)\n    \n    # Perform the subtraction in base 10\n    base10_result = num1 - num2\n    \n    # Convert the result back to base 7\n    ans = ''\n    while base10_result > 0:\n        ans = str(base10_result % 7) + ans\n        base10_result //= 7\n    \n    return int(ans) if ans else 0\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Let's assume the weight of 1 chicken is w_chicken.\n    # Then according to the question, the weight of 1 rabbit is w_rabbit = 2 * w_chicken.\n    # And the weight of 1 dog is w_dog = 8 * w_rabbit.\n    # To find out how many chickens weigh as much as 1 dog,\n    # we need to express w_dog in terms of w_chicken.\n    \n    w_chicken = 1  # Assume the weight of 1 chicken is 1 unit.\n    w_rabbit = 2 * w_chicken  # 1 rabbit weighs as much as 2 chickens.\n    w_dog = 8 * w_rabbit  # 1 dog weighs as much as 8 rabbits.\n    \n    # Now, w_dog in terms of w_chicken is:\n    # w_dog = 8 * (2 * w_chicken) = 16 * w_chicken\n    # So, 1 dog weighs as much as 16 chickens.\n    \n    num_chickens = w_dog  # The number of chickens that weigh as much as 1 dog.\n    return num_chickens\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # Number of gloves to pick to ensure at least two gloves are of the same color\n    # Use Pigeonhole Principle, worst case is picking all gloves of one type (left) and\n    # one of the other (right). So,\n    # 1 left-hand blue + 2 left-hand green + 1 right-hand (any color) = 4 gloves.\n    # One more glove must ensure a matching pair, thus 4 + 1 = 5 gloves required.\n    \n    return 5\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12  # Initial total number of candies\n    new_total_students = 5 + 1  # Number of students after 1 more joins\n    candies_each_student = total_candies // new_total_students  # Recalculated number of candies per student\n    \n    return candies_each_student\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let's denote the time Ben sets off for the 10km/h ride as t1 and for the 15km/h ride as t2\n\n    # We know the difference in starting times if he travels at 10km/h and 15km/h is 2 hours since\n    # he arrives 2 hours earlier when traveling at 15km/h\n\n    # Since we're told he arrives at 10am if he cycles at 10km/h, we can say that t1 + time it takes\n    # to cycle to Town B at 10km/h = 10am\n    # similarly, t2 + time it takes to cycle to Town B at 15km/h = 8am\n\n    # We know the distance is the same, so let's call the distance D.\n    # The time taken when traveling at 10km/h will be D / 10, and at 15km/h it will be D / 15\n\n    # We also know that t1 + D/10 = 10 and t2 + D/15 = 8\n    # Since he arrives 2 hours earlier for the 15km/h ride, then t1 - t2 = 2\n\n    # Now we can create two equations:\n    # 1) t1 - t2 = 2\n    # 2) t1 + D/10 = 10\n\n    # Let's solve this system of equations. But first, we can find D using the time difference.\n    # Time difference in terms of speed is 2 hours, therefore:\n    # D/10 - D/15 = 2 hours\n\n    # So multiplying through by 30 (LCD of 10 and 15) gives us:\n    # 3D - 2D = 60\n    # D = 60 km\n\n    # Now we have D, we can find t1 using the second equation:\n    # t1 = 10 - (D/10) = 10 - (60/10) = 4 am\n\n    # We are asked for the speed to arrive at 9am, which is 5 hours of travel from 4am.\n    # So the new speed = Distance / Time = 60 km / 5 hours = 12 km/h\n\n    return 12\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    for cards in range(1, 4*5*7):  # Least Common Multiple of 4, 5, 7 is 4*5*7, we don't need to check beyond that\n        if cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6:\n            return cards\n    return None\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    depreciation_factor = 0.96\n\n    value_after_years = initial_value * (depreciation_factor ** years)\n\n    return round(value_after_years, 4)\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, yuna = symbols('eugene yuna')\n\n    equation1 = Eq(eugene, 3 * yuna)\n    equation2 = Eq(yuna + 76, 7/9 * eugene)\n    \n    solutions = solve((equation1, equation2), (eugene, yuna))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "def solution():\n    from math import factorial\n\n    count = factorial(6) // (factorial(2))  # There are 6 letters with 'E' repeating twice\n    return count\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Considering the divisibility rule for 9:\n    # A six-digit number is divisible by 9 if the sum of its digits is divisible by 9\n    sum_digits = 1 + 2 + 3 + 4 + 5  # Sum of given digits\n    for A in range(10):\n        if (sum_digits + A) % 9 == 0:\n            # Once we find a suitable A, we then proceed to find the remainder when divided by 4\n            # Only the last two digits of a number determine its remainder when divided by 4\n            # Therefore, the remainder is the remainder of 5A when divided by 4\n            remainder = (50 + A) % 4\n            return remainder\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    students_diff = 52\n    total_students = 0\n\n    for n in range(1, students_diff + 1, 2):  # Try odd values for square size\n        boys = (n * 4 - 4)  # Boys are on the perimeter of the square excluding one corner\n        girls = ((n - 2) * 4) if n > 1 else 0  # Girls are on the inner perimeter\n        if boys - girls == students_diff:\n            side_length = n  # Side length for the square arrangement\n            break\n    \n    total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    # The ones column is 5\n    ones = 5\n    # The tens column is 8\n    tens = 8 * 10\n    # The hundreds column is 2\n    hundreds = 2 * 100\n\n    # Assembling the number\n    number = hundreds + tens + ones\n\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount_percentage = 35\n    sale_price = normal_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    # Let's define red and pink in terms of total_flowers\n    red_flowers = (1/2) * total_flowers\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = (4/7) * remaining_flowers\n    # We know there are 6 more red flowers than pink flowers\n    equation = Eq(red_flowers, pink_flowers + 6)\n\n    solutions = solve(equation, total_flowers)\n    return solutions[0]  # we expect only one solution\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    num = Fraction(36, 7) + Fraction(36, 11) + Fraction(36, 23)\n    denom = Fraction(24, 7) + Fraction(24, 11) + Fraction(24, 23)\n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6)*n*(n+1)*(n+2)\n    return int(ans)\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # If Kelly needs to ensure her victory, she needs to make sure\n    # that by the time it is Dan's turn, there are either 2 or 3 matches left\n    # because no matter Dan takes 1 or 2 matches, Kelly will be able to take the last match.\n    \n    # To achieve this, Kelly needs to put Dan in a situation where the number of matches\n    # left is always a multiple of 3 (after her turn), \n    # so that taking 1 or 2 matches will leave a non-multiple of 3 for Dan's turn.\n    \n    # Starting backwards from 11:\n    # If 1 match is left - Kelly wins.\n    # If 2 or 3 matches are left - Kelly can take 1 or 2 to win.\n    # If 4 matches are left - Dan takes 1 to ensure victory, as it will leave 3 for Kelly,\n    # which will leave 1 or 2 for Dan after Kelly's turn.\n    # Therefore, Kelly needs to take matches in such a way to avoid leaving 4 matches for Dan.\n\n    # Kelly wants to leave 10 or 9 matches after her first turn, so Dan will then leave either:\n    # 8 (if he takes 2) or 7 (if he takes 1) matches for Kelly on the subsequent turn.\n    # This would then mean on Kelly's next turn she can take enough matches (1 or 2 respectively)\n    # to leave a multiple of 3 (6 matches) for Dan.\n\n    # So if starting with 11, Kelly should take 1 match on her first turn.\n    # This leaves 10 matches, and from there onwards, she can always play to leave a multiple of 3 for Dan.\n    \n    return 1\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n    number_of_kids = 3\n    ways_to_arrange = factorial(number_of_kids)\n    return ways_to_arrange\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown value in the box\n    box = symbols('box')\n\n    # Set up the equation according to the problem statement\n    equation = Eq(4 * box - 3, 65)\n\n    # Solve the equation for the unknown value\n    solution = solve(equation, box)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    cars = 0\n    \n    # Start finding the number of cars by checking for each amount from 0 to total vehicles\n    while cars <= total_vehicles:\n        motorcycles = total_vehicles - cars\n        wheels = (cars * 4) + (motorcycles * 2)\n        if wheels == total_wheels:\n            return cars\n        cars += 1\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Nicole's initial stickers (nicole_initial) and her final stickers (nicole_final)\n    nicole_initial, nicole_final = symbols('nicole_initial nicole_final')\n\n    # Jason's final number of stickers is the sum of his initial stickers and the 18 he received from Nicole\n    jason_final = 20 + 18\n\n    # Nicole's final number of stickers is her initial count minus the 18 she gave to Jason\n    # Jason's final number of stickers is 5 less than Nicole's final number of stickers\n    # Set up the equations based on the problem statement\n    equations = (\n        Eq(nicole_final, nicole_initial - 18),\n        Eq(jason_final, nicole_final - 5)\n    )\n\n    # Solve the equations\n    solution = solve(equations, (nicole_initial, nicole_final))\n\n    # Return Nicole's initial number of stickers\n    return solution[nicole_initial]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions: length = l, breadth = b, height = h\n    # Increase length by 10%: new length = l * 1.10\n    # Reduce breadth by 20% (to 4/5 of original): new breadth = b * (4/5)\n    # Ratio of new height to original height is 11:10: new height = h * (11/10)\n    # Original volume: V_original = l * b * h\n    # New volume: V_new = (l * 1.10) * (b * 4/5) * (h * 11/10)\n\n    # V_new as a percentage of V_original: (V_new / V_original) * 100\n    # Simplify the terms:\n    # (l * 1.10) / l = 1.10\n    # (b * 4/5) / b = 4/5\n    # (h * 11/10) / h = 11/10\n\n    # Calculate the percentage increase\n    percentage_increase = 1.10 * 4/5 * 11/10 * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 78, 2):  # Iterate through every possible multiple of 2 up to 77\n        for three_gram_weights in range(0, 78, 3):  # Iterate through every possible multiple of 3 up to 77\n            if two_gram_weights + three_gram_weights == 77:  # Check if the current combination adds up to 77 grams\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n    \n    interval_distance_m = (total_distance_km * 1000) / (num_marshals - 1)\n    \n    return interval_distance_m\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180  # meters per minute\n    time_initial = 6     # minutes\n    \n    speed_tired = 120    # meters per minute\n    time_tired = 8       # minutes\n    \n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n    \n    total_distance = distance_initial + distance_tired\n    \n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n\n    # First year interest\n    interest_first_year = principal * rate\n\n    # Total amount at the beginning of second year\n    total_first_year = principal + interest_first_year\n\n    # Second year interest\n    interest_second_year = total_first_year * rate\n\n    return interest_second_year\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n    num_pictures = total_time / time_for_one_picture\n    return num_pictures\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Calculate the number of layers\n    layer = 1\n    while (layer * 2 - 1)**2 <= 400:\n        layer += 1\n    layer -= 1\n\n    # Calculate the number of tiles for each color\n    red_tiles = sum((2 * i - 1) ** 2 for i in range(1, layer + 1, 2))\n    green_tiles = sum((2 * i - 1) ** 2 for i in range(2, layer + 1, 2))\n\n    # Calculate the dominant color and the difference\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_number = 1 + (4 / 7)\n    decimal = round(mixed_number, 1)\n    return decimal\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_cycle = \"428571\"\n    index = (69 - 1) % len(recurring_cycle)\n    \n    return int(recurring_cycle[index])\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be Megacorp's sales in 2014 and y be the sales in 2015\n    # Let v2014 be Vastco's sales in 2014 and v2015 be the sales in 2015\n    x, y, v2014, v2015 = symbols('x y v2014 v2015')\n    \n    # Given that Vastco sold 68% more widgets than Megacorp in 2014\n    eq1 = Eq(v2014, x * 1.68)\n\n    # In 2015, Vastco sold 44% more widgets than Megacorp\n    eq2 = Eq(v2015, y * 1.44)\n\n    # Between 2014 and 2015, Vastco's widget sales rose by 32%\n    eq3 = Eq(v2015, v2014 * 1.32)\n\n    # Solve the three equations for the three variables\n    solution = solve((eq1, eq2, eq3), (x, y, v2014, v2015))\n\n    # Calculate the percentage rise in Megacorp's widget sales from 2014 to 2015\n    percent_increase_megacorp = ((solution[y] - solution[x]) / solution[x]) * 100\n\n    return percent_increase_megacorp\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    sweets_left = y / 2\n    return sweets_left\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    planned_profit, actual_profit, discount = symbols('planned_profit actual_profit discount')\n\n    # Ken plans to earn a 50% profit, so his planned profit is 50% of the cost of the goods\n    equation1 = Eq(planned_profit, 0.5)\n\n    # On the first day, he sells 70% of his goods at a 50% profit, contributing to 35% of the cost (70% of 50%)\n    # On the second day, he sells 30% of his goods at a discount, which we need to find out\n    # The total profit was 82% of the planned profit, therefore actual profit is 82% of 50%\n    equation2 = Eq(actual_profit, (0.7 * planned_profit) + (0.3 * (1 - discount)))\n\n    equation3 = Eq(actual_profit, 0.82 * planned_profit)\n\n    # Solve the system of equations for the discount on the second day\n    solutions = solve((equation1, equation2, equation3), (planned_profit, actual_profit, discount))\n\n    return float(solutions[discount])\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each child's age\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Define the conditions given in the problem statement using equations\n    equation1 = Eq(younger_son, older_daughter * 2)  # Younger son is twice the age of the older daughter\n    equation2 = Eq(older_son - younger_son, 3)  # Two sons were born three years apart\n    equation3 = Eq(older_daughter - younger_daughter, 2)  # Two daughters were born two years apart\n    equation4 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)  # Sum of ages is 55\n\n    # Use sympy's solve function to solve for the ages\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Extract the age of the youngest child, assuming it is the younger daughter\n    youngest_child_age = solutions[younger_daughter]\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles % 4 + new_bottles\n    # Borrow one empty bottle for the final exchange if necessary\n    if empty_bottles == 3:\n        total_bottles += 1\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Separate the number sequence into parts and calculate the number of digits for each part.\n\n    # There are 9 one-digit numbers (1-9)\n    one_digit_numbers = 9 * 1\n\n    # There are 90 two-digit numbers (10-99)\n    two_digit_numbers = (99 - 10 + 1) * 2\n\n    # There are 14 three-digit numbers (100-113)\n    three_digit_numbers = (113 - 100 + 1) * 3\n\n    # Add up the total number of digits\n    total_digits = one_digit_numbers + two_digit_numbers + three_digit_numbers\n\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let x be the original number of pearls on the strand\n    x = symbols('x')\n    # Write an equation based on the problem statement\n    equation = Eq(x / 2 + x / 4 + x / 6 + 3, x)\n    # Solve the equation\n    original_number = solve(equation, x)\n    return original_number[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_with_3_workers = 3\n    \n    work_done_by_1_worker_in_3_days = 1 / workers\n    days_with_1_worker = days_with_3_workers / work_done_by_1_worker_in_3_days\n    \n    return days_with_1_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    all_ways = 0\n    for perm in permutations(range(1, 4), 4):\n        if len(set(perm)) == 3:\n            all_ways += 1\n    return all_ways\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            return num\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    net_earnings = 92  # This is after deducting the cost of broken glasses\n\n    # Let's assume all glasses were delivered safely, so Peter would earn $100\n    # The difference between this assumption and the actual earnings is because of broken glasses\n    # Each broken glass causes a loss of $2 ($1 not earned and $1 paid)\n    difference = total_glasses - net_earnings\n\n    # Since each broken glass counts as 2 towards the difference:\n    broken_glasses = difference // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let the number of teams be n\n    teams = symbols('teams', integer=True)\n    # In a round-robin tournament, every team plays every other team once\n    # The total number of games is given by the formula n*(n-1)/2\n    equation = Eq(teams * (teams - 1) / 2, 45)\n    # Solve for the number of teams\n    solutions = solve(equation, teams)\n    # There may be two solutions, positive and negative, but we need the positive one as negative teams don't make sense\n    num_teams = [s for s in solutions if s > 0]\n    return num_teams[0]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mayank_number = symbols('mayank_number')\n    \n    equation = Eq(2 * mayank_number + 4, 40)\n    \n    solution = solve(equation, mayank_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of people (p) and the number of boats (b)\n    p, b = symbols('p b')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(p, 9 * (b - 1))\n    equation2 = Eq(p, 6 * (b + 1))\n\n    # Solve the system of equations for p and b\n    solutions = solve((equation1, equation2), (p, b))\n\n    # The number of people in the whole class\n    return solutions[p]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # If the smallest odd integer is n,\n    # then the next two consecutive odd integers are n+2 and n+4.\n    # Their sum is n + (n + 2) + (n + 4).\n    # We set up the equation: n + (n + 2) + (n + 4) = 57\n    # 3n + 6 = 57\n    # 3n = 57 - 6\n    # 3n = 51\n    # n = 51 / 3\n    # n = 17\n    n = 17  # This is the smallest odd integer\n    return n\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for num in [2, 6, 1, 10, 5, 3]:\n        if (num * 3) == 6:\n            return num\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_of_7_bananas = 98  # cost in pence\n    cost_of_1_banana = cost_of_7_bananas / 7  # cost per banana in pence\n    cost_of_15_bananas = cost_of_1_banana * 15  # total cost for 15 bananas in pence\n\n    pounds_to_pence = 12 * 100  # convert £12 to pence\n    change_in_pence = pounds_to_pence - cost_of_15_bananas  # calculate change in pence\n\n    change_in_pounds = change_in_pence / 100  # convert pence back to pounds\n\n    return round(change_in_pounds, 2)  # round to 2 decimal places for currency\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    return 37 * 4 * 5\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john_initial, peter_initial = symbols('john_initial peter_initial')\n\n    # John had 180 more cookies than Peter at first\n    equation1 = Eq(john_initial, peter_initial + 180)\n\n    # After selling some cookies, John had 1/2 as many cookies as Peter\n    equation2 = Eq(john_initial - (4/5)*john_initial, (1/2)*(peter_initial - (3/10)*peter_initial))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_initial, peter_initial))\n\n    return solutions[john_initial]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    factors_of_36 = [i for i in range(1, 37) if 36 % i == 0]\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    common_values = set(factors_of_36).intersection(multiples_of_4)\n    ans = max(common_values)  # Assuming you want the highest such number\n    return ans\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible permutations of the four digits\n    digits = [1, 3, 4, 7]\n    perms = list(permutations(digits, 4))\n\n    # Initialize minimum sum to a large number\n    min_sum = float('inf')\n\n    # For each permutation, form two 2-digit numbers and calculate their sum\n    for perm in perms:\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        current_sum = num1 + num2\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    previous_average = 60\n    number_of_tests = 4\n    new_test_score = 70\n\n    total_previous_score = previous_average * number_of_tests\n    new_total_score = total_previous_score + new_test_score\n    new_average = new_total_score / (number_of_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    horse_apples = 20\n    pig_apples = 15\n    rabbit_apples = 5\n\n    total_animals = total_horses + total_pigs + total_rabbits\n    total_apples_eaten = (total_horses * horse_apples) + (total_pigs * pig_apples) + (total_rabbits * rabbit_apples)\n\n    average_apples = total_apples_eaten / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    ans = full_price_per_cup * total_cups\n    return ans\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10):         # First digit must be from 1 to 9 (inclusive)\n        for j in range(0, 10):     # Second digit can be from 0 to 9 (inclusive)\n            if i + j < 10:         # Third digit must be less than 10 and is the sum of the first two digits\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n    \n    # Equation for Class A: All peaches to Class A => peaches = 5 * students_A + 10\n    equation1 = Eq(peaches, 5 * students_A + 10)\n    \n    # Equation for Class B: All peaches to Class B => peaches = 8 * students_B - 2\n    equation2 = Eq(peaches, 8 * students_B - 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    total_sum = 0\n    term = 0\n    for i in range(1, 2018):\n        term = term * 10 + 2\n        total_sum += term\n    return total_sum % 100000\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the money Benson had originally\n    # Let j represent the money Jayden had originally\n    # Let x represent the money Jayden had left\n    b, j, x = symbols('b j x')\n\n    # Benson spent $74, so he has b - 74 left\n    # Jayden spent $120, so he has j - 120 left\n    # The amount of money Benson had left was three times as much as the amount of money Jayden had left.\n    # b - 74 = 3*(j - 120)\n    equation1 = Eq(b - 74, 3 * (j - 120))\n\n    # Combined total originally was $590\n    # b + j = 590\n    equation2 = Eq(b + j, 590)\n\n    # The amount Jayden had left is j - 120\n    # Jayden had left is x\n    equation3 = Eq(x, j - 120)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (b, j, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    orange_drink_volume = 12\n    water_fraction = 3 / 4\n    water_volume = orange_drink_volume * water_fraction\n    return water_volume\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10  # get the units digit\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    return 314 - 159\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Let's denotate Betty's speed as b (m/min), Kevin's speed as k (m/min).\n    # According to the problem, Betty arrives at the store in 6 minutes.\n    # At this time, Kevin has walked 150 meters which he will cover in (150/k) minutes.\n    # Thus, this is the time that Betty left before Kevin (6 - 150/k).\n\n    # Betty walks for (6+3) minutes, Kevin walks for (3+150/k) minutes.\n    # After 3 more minutes:\n    # Betty will be 900 meters from the cinema, so she walked (900/b) minutes in total.\n    # Kevin arrives at the store, so he walked (150+150)/k minutes in total.\n    # Now, we set up the equations from the problem conditions:\n    # 1. 900/b = 6 + 3 (Betty's total walking time)\n    # 2. (300/k) = 6 - (150/k) + 3 (Kevin's total walking time)\n\n    # From equation 1:\n    # b = 900 / 9\n    b = 900 / 9\n\n    # Place b into equation (2):\n    # 300 / k = 9 - 150 / k\n    # Multiply both sides by k\n    # 300 = 9k - 150\n    # 9k = 450\n    k = 450 / 9\n\n    # Now we can find the time difference which is the time Betty left earlier than Kevin.\n    # 6 - 150/k\n    time_difference = 6 - 150 / k\n    return time_difference\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_ratio = 1 / total_parts\n    total_volume = 300\n    raspberry_volume = raspberry_ratio * total_volume\n    return raspberry_volume\n\nans = solution()"
    ]
}