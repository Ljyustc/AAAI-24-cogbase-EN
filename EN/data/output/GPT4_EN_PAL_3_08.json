{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    m = 4\n    ans = (1/6 * n * (n + 1) * (2*n + 1)) - (1/6 * m * (m + 1) * (2*m + 1))\n    return int(ans)\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones = total_bones * (27 / 103)\n    finger_bones = hand_bones * (14 / 27)\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert 9:00 AM to minutes\n    end_time = 10 * 60   # Convert 10:00 AM to minutes\n\n    duration = end_time - start_time  # Calculate the duration in minutes\n    return duration\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    difference = 4\n\n    # Let x be the number of apples Amy gives to John\n    # Amy will have (amy_apples - x) apples and John will have (john_apples + x) apples\n    # We want to find x such that (amy_apples - x) = (john_apples + x) + difference\n    x = (amy_apples - john_apples - difference) // 2\n\n    return x\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_money_after_bag = 90 / 0.6\n    original_money = remaining_money_after_bag / 0.8\n    return original_money\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    from math import factorial\n\n    def nPr(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    return nPr(9, 4)\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure a win, Fred should aim to leave 4k + 1 oranges after his turn.\n    # With 15 oranges, he should leave 13 oranges for George.\n    # So, Fred should take 2 oranges on his first turn.\n    \n    # No need for further calculations, as this is a well-known game strategy in combinatorics.\n    return 2\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_shoes = shirts * pants * shoes\n    dress_shoes = dresses * shoes\n    dress_heels = dresses * heels\n    \n    total_combinations = blouse_pants_shoes + dress_shoes + dress_heels\n\n    return total_combinations\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    toms_age = symbols('toms_age')\n    dads_age = 43\n    equation = Eq(dads_age, 4 * toms_age - 5)\n\n    solution = solve(equation, toms_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    return 66666 * 66666\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    ans = 816 // 17\n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # Let x be the number of students on the side of the initial square\n    # The total number of students before adding a row and a column: x^2 + 5\n    # After adding a row and a column: (x + 1)^2\n    # The difference after forming a larger square: (x + 1)^2 - (x^2 + 5) = 26\n    # Solve this equation for x\n    \n    x = 1  # start with the smallest square side\n    while True:\n        if (x + 1) ** 2 - (x ** 2 + 5) == 26:\n            break\n        x += 1\n    \n    # The number of students before forming the larger square\n    num_students = x ** 2 + 5\n    return num_students\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    \n    # Let the cost of the house on which the owner made a profit be x\n    # Then the profit from this house is 10% of x, so profit is 0.10 * x\n    # Sale price = Cost price + Profit => x + 0.10 * x = 99000\n    # Therefore, x = 99000 / 1.10\n    cost_price_profit_house = sale_price / 1.10\n    \n    # Let the cost of the house on which the owner made a loss be y\n    # Then the loss from this house is 10% of y, so loss is 0.10 * y\n    # Sale price = Cost price - Loss => y - 0.10 * y = 99000\n    # Therefore, y = 99000 / 0.90\n    cost_price_loss_house = sale_price / 0.90\n    \n    # Overall cost price of two houses\n    overall_cost = cost_price_profit_house + cost_price_loss_house\n    \n    # Overall sale price of two houses\n    overall_sale = 2 * sale_price\n    \n    # Overall profit or loss\n    overall_profit_loss = overall_sale - overall_cost\n    \n    return overall_profit_loss\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3/20\n    decimal = 0.16\n\n    if fraction > decimal:\n        ans = \"3/20 is larger\"\n    elif fraction < decimal:\n        ans = \"0.16 is larger\"\n    else:\n        ans = \"Both are equal\"\n\n    return ans\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    \n    return ans\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations(\"ABCDE\"):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C'):\n            count += 1\n        elif p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_cupcakes = 3 / 15\n    total_eggs = cupcakes * eggs_per_cupcakes\n    return total_eggs\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Calculate the distance covered by jogging\n    jogging_time = 2 # from 6.30 AM to 8.30 AM she jogs\n    jogging_speed = 8 # jogging speed in km per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance covered by walking\n    walking_time = 1 # from 8:30 AM to 9:30 AM she walks\n    walking_speed = jogging_speed / 2 # walking speed is half of jogging\n    walking_distance = walking_speed * walking_time\n\n    # Sum distances to get the total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let x be the number of each type of note\n    # The total value is therefore 5x + 10x + 20x = 280\n    # This simplifies to 35x = 280\n    # Solve for x to find the number of each type of note\n    x = 280 // 35\n    # The total number of notes is the sum of the notes of each denomination\n    total_notes = 3 * x\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if str_num == str_num[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond_op(M, N):\n        return M * N + N + 1\n\n    def square_op(M, N):\n        return 8 * M - N * N\n    \n    result_diamond = diamond_op(7, 6)\n    ans = square_op(result_diamond, 9)\n    \n    return ans\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a product only depends on the last digits of the factors.\n    # last digit of 2 raised to any power will be one of (2, 4, 8, 6). For powers of 2, the cycle repeats every 4.\n    last_digit_2 = 2 ** (100 % 4)\n    if last_digit_2 == 1:\n        last_digit_2 = 6 # correcting the cycle as 2**0 is 1 but we want the last digit of 2**4 which is 6\n    \n    # last digit of 7 raised to any power will be one of (7, 9, 3, 1). For powers of 7, the cycle repeats every 4.\n    last_digit_7 = 7 ** (100 % 4)\n    if last_digit_7 == 1:\n        last_digit_7 = 1 # for 7^4, the last digit would be 1, which is desired in this case\n    \n    # last digit of 9 raised to any power will be one of (9, 1). For powers of 9, the cycle repeats every 2.\n    last_digit_9 = 9 ** (100 % 2)\n    if last_digit_9 == 1:\n        last_digit_9 = 1 # for 9^2, the last digit would be 1, which is desired in this case\n\n    # Multiply the last digits and take the last digit of the result\n    result = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return result\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    # Starting with the smallest prime number\n    p = 2\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both = 21\n\n    only_one_event = (skipping_rope - both) + (long_jump - both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Since we need to divide the 16 marbles into 4 piles with different number of marbles\n    # Let's assume the piles have a, b, c, d marbles each with a < b < c < d\n    # We want to minimize d, so we should try to make a, b, c as large as possible\n    # Let's start by giving one marble to each pile: a=1, b=1, c=1, d=1\n    # 16 - 4 marbles are left after initial distribution\n    remaining = 16 - 4 \n\n    # Add one marble to three smallest piles first to ensure they are different\n    a += 1\n    b += 1\n    c += 1\n    remaining -= 3\n\n    # Now distribute remaining marbles one by one to smallest pile to ensure different pile sizes\n    while remaining > 0:\n        # Give one marble to the smallest pile (which is 'a' initially)\n        a += 1\n        remaining -= 1\n        \n        # After giving marble to a, it could be larger than b, ensure b is 2nd smallest\n        if a > b:\n            a, b = b, a\n        \n        # Do the same for b and c\n        if b > c:\n            b, c = c, b\n\n        # Repeat process until no marbles are left\n        if remaining > 0:\n            b += 1\n            remaining -= 1\n            \n            if b > c:\n                b, c = c, b\n        \n        if remaining > 0:\n            c += 1\n            remaining -= 1\n\n    # After distributing all marbles, d is just total minus sum of a, b, c\n    d = 16 - a - b - c\n\n    # Smallest possible number in the largest pile is thus d\n    return \"The smallest possible number of marbles in the biggest pile is: \" + str(d)\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 60 * (1 + 1/2 + 1/3 + 1/4 + 1/5)\n    return A\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    buses_needed = (students + capacity - 1) // capacity\n    return buses_needed\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # Time taken to go from first to fourth floor is 12 minutes.\n    # Assuming each floor interval takes an equal amount of time,\n    # the time would be divided by the number of intervals.\n    # There are three intervals between four floors: 1st to 2nd, 2nd to 3rd, and 3rd to 4th.\n    \n    total_time = 12\n    intervals = 3\n\n    # Time taken for one interval (1st to 2nd floor).\n    time_per_interval = total_time / intervals\n\n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += ((i ** 2) + ((i + 1) ** 2)) / (i * (i + 1))\n    return round(total)\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    # The formula provided is for consecutive squares from 1^2 to n^2\n    # Our sequence has only odd numbers, but we can relate it to the sequence 1^2 to (n/2)^2 for n being odd\n    # By substituting n = 2k - 1, where k is the sequence 1, 2, 3,..., 10 for our case\n\n    n = 19  # highest odd number in our sequence\n    k = (n + 1) // 2  # corresponding 'k' value for the above sequence\n\n    # Apply the formula for the sum of squares of the first k positive integers\n    sum_squares = (1/6)*k*(k+1)*(2*k+1)\n    \n    return int(sum_squares)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let n be the number of girls\n    # sum_original is the total actual height of all girls\n    # sum_inaccurate is the total height recorded inaccurately\n    \n    # According to the problem the following equations can be set up\n    # sum_original / n = 163 (The accurate average height)\n    # sum_inaccurate / n = 159 (The inaccurate average height)\n    \n    # sum_original is equal to sum_inaccurate with the incorrectly recorded height replaced\n    # sum_original = sum_inaccurate - 126 + 162\n    \n    # Thus the difference in average height times the number of girls\n    # equals the error in recording one of the heights\n    # (163 - 159) * n = 162 - 126\n    \n    error_diff = 162 - 126\n    avg_diff = 163 - 159\n    \n    n = error_diff / avg_diff\n\n    return int(n)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    result = (24 / 100) * 25\n    return result\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    return 123456789 * 987654321\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n_terms = (13 + 1) // 2  # Since we want only odd numbers up to 13\n    sum_of_terms = (n_terms * (n_terms + 1) // 2) ** 2  # applies the formula for the sum of cubes\n    return sum_of_terms\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_operator(a, b):\n        return a * b - 2 * a + 4\n    \n    ans = 200\n    for num in range(199, 0, -1):\n        ans = hash_operator(ans, num)\n    \n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = (3/2) * (4/3) * (5/4) * (6/5) * (7/6) * (8/7) * (9/8) * (10/9)\n    return product\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    beth = symbols('beth')\n    ken = beth + 75\n    equation = Eq(4/5 * beth, 2/5 * ken)\n\n    beth_seashells = solve(equation, beth)[0]\n    ken_seashells = beth_seashells + 75\n\n    return beth_seashells + ken_seashells\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    num_containers = (apples + container_capacity - 1) // container_capacity\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n    \n    # Lengths of the ribbons\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Calculate the greatest common divisor of the lengths\n    gcd_12 = gcd(ribbon1, ribbon2)\n    greatest_length = gcd(gcd_12, ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    original_number = 9876543\n    ans = original_number + 10000\n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    for tenners in range(40 + 1):\n        twos = 40 - tenners\n        spent_tenners = 0.40 * tenners\n        spent_twos = 0.25 * twos\n        remaining_tenners = tenners - spent_tenners\n        remaining_twos = twos - spent_twos\n        if remaining_tenners * 5 == remaining_twos * 4:\n            gift_cost = spent_tenners * 10 + spent_twos * 2\n            return gift_cost\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube in range(1, 50):\n        cube_number = cube ** 3\n        square_number = cube_number - 2\n        if int(square_number ** 0.5) == square_number ** 0.5:\n            return int(square_number)\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Each child gets at least 2 oranges, so we distribute 2 oranges to each child first\n    # This leaves us with 13 - 2*3 = 7 oranges to distribute\n    oranges_to_distribute = 13 - 2 * 3\n    \n    # Now the problem is equivalent to finding the number of ways to distribute\n    # 7 indistinguishable oranges to 3 kids, which is a problem of combinations with repetitions\n    # The formula of combinations with repetitions is: (n + r - 1) choose (r)\n    # where n is the number of items to distribute and r is the number of kids/buckets\n    # Here, n = 7 (oranges to distribute) and r = 3 - 1 = 2 (since it's combinations of n items into r - 1 partitions)\n    \n    ans = comb(oranges_to_distribute + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n\n    solutions = solve((equation1, equation2), (x, y))\n    difference = abs(solutions[x] - solutions[y])\n\n    return 100 * difference\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # It is easy to see that the expression on the left side simplifies by cancelling factors\n    # such that we are left with 2*(1 - 1/(2^(2^2009)))\n    # Setting this equal to the expression on the right, we get:\n    # 2*(1 - 1/(2^(2^2009))) = 2*(1 - 1/(2^(2^n)))\n    # This simplifies to 2^2009 = 2^n, from which we can find n by taking the log base 2.\n    \n    n = 2009\n    return n\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's define the symbols for Bill, his son and Bill's father\n    bill, son, father = symbols('bill son father')\n    \n    # let's define the equations according to the problem statement\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n    \n    # solving the equations to find the value\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n    \n    return solutions[bill]\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be Sally's current age and j be John's current age\n    s, j = symbols('s j')\n\n    # In 3 years, Sally will be 6 times as old as John\n    equation1 = Eq(s + 3, 6 * (j + 3))\n    # Their total age now is 50 years\n    equation2 = Eq(s + j, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, j))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    licia, krisnam, imran = symbols('licia krisnam imran')\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n    \n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n    \n    return solutions[imran]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # P cannot be zero because it's the first digit of a 4-digit number\n            continue\n        paso = p * 1000 + a * 100 + s * 10 + o\n        if paso % 2 == 0 and o != 0 and o != 5 and p != a and p != s and p != o and a != s and a != o and s != o:\n            return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day_questions = 3\n    common_difference = 3\n    days = 7  # From Monday to Sunday\n\n    total_questions = sum(first_day_questions + common_difference * i for i in range(days))\n\n    return total_questions\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let h be the initial amount of water Harry had, and l be the amount Liam had\n    h, l = symbols('h l')\n\n    # Set up the equations based on the problem statement\n    # Harry and Liam had 640ml of water in total\n    equation1 = Eq(h + l, 640)\n    # If 90ml of water was transferred from Liam to Harry, Harry would have thrice the amount of water as Liam\n    # Which means h + 90 = 3(l - 90)\n    equation2 = Eq(h + 90, 3 * (l - 90))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (h, l))\n\n    # Return the amount of water Harry had\n    return solutions[h]\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):     # The first digit must be between 1 and 9 (inclusive) for a three-digit number\n        for j in range(0, 10): # The second and third digits can be between 0 and 9\n            for k in range(0, 10):\n                if i + j + k == 6: # Check if the sum of digits is 6\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Since the number of beans peeled each hour forms an arithmetic sequence\n    # we can use the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # Here a_n is the number of beans peeled in the nth hour, a_1 is the number\n    # of beans peeled in the first hour, and d is the common difference\n    # We are given the number of beans peeled in 3rd, 4th, and 5th hour:\n    # a_3 = a_1 + 2d = 20 beans\n    # a_4 = a_1 + 3d = 28 beans\n    # a_5 = a_1 + 4d = 36 beans\n    # From this, we can form two equations to solve for a_1 and d:\n    # a_4 - a_3 = d => 28 - 20 = d\n    # a_5 - a_4 = d => 36 - 28 = d\n    # Solving for d:\n    d = 28 - 20\n    # We don't really need to solve the second equation above\n    # as it should give us the same d, so we can now find a_1:\n    a_1 = 20 - 2 * d\n\n    return a_1\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100  # Convert snake length from meters to centimeters\n    \n    times_smaller = snake_length_cm / insect_length_cm\n    return times_smaller\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the original number of pearls on the strand.\n    # According to the question:\n    # Half of the pearls fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand: 3\n    # The sum of all these should be the original number of pearls x.\n    # Therefore, we have the equation:\n    # x/2 + x/4 + x/6 + 3 = x\n\n    # Multiplying all terms by the common denominator 12 to clear the fractions:\n    # 6x + 3x + 2x + 36 = 12x\n    # 11x + 36 = 12x\n    # 36 = x\n\n    return 36\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    wife_rate = together_rate - man_rate\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from sympy import binomial\n\ndef solution():\n    total_ways = 0\n\n    for white_left in range(3, 9):\n        for red_left in range(2, 4):\n            for black_left in range(0, 4):\n                white_pick = 9 - white_left\n                red_pick = 5 - red_left\n                black_pick = 6 - black_left\n                if white_pick + red_pick + black_pick == 10:\n                    total_ways += binomial(9, white_pick) * binomial(5, red_pick) * binomial(6, black_pick)\n\n    return total_ways\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    term = 1\n    while term < 100:\n        term = n * (n + 1) // 2 + n\n        n += 1\n    return term - n\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    sum_of_three_numbers = 3 * 120\n    sum_of_four_numbers = 4 * 150\n    fourth_number = sum_of_four_numbers - sum_of_three_numbers\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    mass_left = initial_mass - mass_given_away\n    return round(mass_left, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    weight_full = 80\n    weight_half = 60\n\n    # The weight of the mangoes when the basket is half full.\n    weight_mangoes_half = weight_half - (weight_full - weight_half)\n    # The weight of the empty basket.\n    weight_empty_basket = weight_full - 2 * weight_mangoes_half\n\n    return weight_empty_basket\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    pip_position = 6  # Pip is the 6th from the front\n    bud_position = 6  # Bud is the 6th from the end\n\n    # Counting from Pip to Bud there are 5 children, includes Pip, excluldes Bud\n    children_between = 5 - 1  # Since Pip is included we subtract 1\n\n    # Total number of children is Pip's position + children between + Bud's position\n    total_children = pip_position + children_between + bud_position  \n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n  congruences = [(3, 5), (4, 6), (1, 7)]\n  ans_tuple = solve_congruence(*congruences)\n  return ans_tuple[0]\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The Chinese Remainder Theorem states that if one can find integers x, y and z such that:\n    # x ≡ a1 (mod m1)\n    # y ≡ a2 (mod m2)\n    # z ≡ a3 (mod m3)\n    # and m1, m2, m3 are pairwise coprime, then there exists a solution, and the solution is unique modulo M (where M = m1 * m2 * m3).\n\n    # We know m1=7 and the solution for the first number (x) must be an even multiple of 7, hence a1=0 (mod 7).\n    # We know m2=8 and the solution for the second number (y) must be an even multiple of 8, hence a2=2 (mod 8) as the first even multiple of 8 is 16, which is congruent to 2 modulo 8.\n    # We know m3=9 and the solution for the third number (z) must be an even multiple of 9, hence a3=4 (mod 9) as the first even multiple of 9 is 18, which is congruent to 4 modulo 9.\n\n    # Since the three numbers are consecutive and even, we can express them as:\n    # x, x+2, x+4\n\n    # Using the fact that the first number is a multiple of 7 and even, we set it as 0 modulo 14 (2*7)\n    # The second number is a multiple of 8 and even, we set it as 0 modulo 16 (2*8), but since it is 2 more than the first, we set it as 2 modulo 16\n    # The third number is a multiple of 9 and even, we set it as 0 modulo 18 (2*9), but since it is 4 more than the first, we set it as 4 modulo 18\n\n    congruences = [(0, 14), (2, 16), (4, 18)]\n\n    x, _ = solve_congruence(*congruences)\n\n    # Since the solution x is the first number and they are consequent, we add x, x+2, and x+4\n    sum_of_numbers = x + (x + 2) + (x + 4)\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    \n    # calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # use arithmetic series sum formula: n/2 * (2a + (n - 1)d)\n    total_athletes = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days = 5\n    additional_paintings_needed = 56 - total_paintings_done\n\n    paintings_per_day = total_paintings_done / total_days\n    additional_days_needed = additional_paintings_needed / paintings_per_day\n\n    return int(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    return int((3+3+3+3+3+3+3+3)/3)\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    # Calculate the number of intervals between pieces of paper\n    intervals = 18 - 1  # 17 intervals between 18 pieces of paper\n    \n    # Calculate the number of leaves inserted\n    leaves = intervals // 3  # One leaf every 3 intervals\n    \n    return leaves\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total age of the parents\n    x = symbols('x')\n\n    # The average age for a family of six is 29, hence the total age for the family is 6 * 29\n    total_age_family = 6 * 29\n\n    # The total age of the children is 64\n    total_age_children = 64\n\n    # Using the age relationship between parents and children, we have: total_age_family = x (parents' total age) + total_age_children\n    equation = Eq(total_age_family, x + total_age_children)\n\n    # Solve for the total age of the parents\n    parents_total_age = solve(equation, x)[0]\n\n    # The average age of the parents 3 years ago is: (parents_total_age - 3 * 2 people) / 2 people\n    average_age_parents_3_years_ago = (parents_total_age - 3 * 2) / 2\n\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef cross_time(group):\n    slowest = max(group)\n    return sum(group) + slowest\n\ndef solution():\n    people = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Consider all the permutations of people\n    for perm in permutations(people):\n        # Step 1: First two people cross\n        time_spent = max(perm[0], perm[1])\n        # Step 2: Fastest person rows back\n        time_spent += perm[0]\n        # Step 3: Next two people cross\n        time_spent += max(perm[2], perm[3])\n        # Step 4: Fastest person among the initial pair rows back\n        time_spent += perm[1] if perm[1] < perm[2] else perm[2]\n\n        if time_spent < min_time:\n            min_time = time_spent\n\n    return min_time\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n\n    # Since it's an arithmetic progression, we can find the common difference by:\n    # (term_12 - term_5) / (12 - 5)\n    common_difference = (term_12 - term_5) / (12 - 5)\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    common_factor = 95\n    return common_factor * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    \n    # Calculate the number of terms in the original sequence\n    n = ((242 - first_term) // common_difference) + 1\n    \n    # Since we're removing three terms at a time, the number of times we can do this operation is (n-3)/3\n    # Subtract 3 for the remaining 3 numbers\n    loops = (n - 3) // 3\n    \n    # each loop, the sum of first three numbers added to the last is first_term * 3 + common_difference * 3\n    increment_per_loop = first_term * 3 + common_difference * 3\n    \n    # Update the first term and the common difference after all the loops.\n    new_first_term = first_term + loops * increment_per_loop\n    new_common_difference = common_difference * 3\n    \n    # The second number on the blackboard will be the new first term plus the new common difference\n    second_number = new_first_term + new_common_difference\n\n    return second_number\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let's denote Pip, Bud, and Bob's weights as p, b, and o respectively.\n    # According to the problem:\n    # (p + b) / 2 = 30 => p + b = 60  (Equation 1)\n    # (p + o) / 2 = 33 => p + o = 66  (Equation 2)\n    # (b + o) / 2 = 36 => b + o = 72  (Equation 3)\n    \n    # We can add Equation 1 and Equation 2 to get:\n    # p + b + p + o = 60 + 66 => 2p + b + o = 126 (Equation 4)\n    # Subtract Equation 3 from Equation 4:\n    # (2p + b + o) - (b + o) = 126 - 72 => 2p = 54 => p = 27\n    \n    return 27\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n\n    return closest_number\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    return 29 + 37 + 76 + 63 + 24 + 45 + 61 + 55\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time run before rain in minutes\n    # d be the distance before rain\n    # s be the usual speed in m/min\n    t, d, s = symbols('t d s')\n\n    # Equations based on the problem statement\n    # Total time supposed to take is 30 minutes\n    # 30 = t + (2400 / (0.8 * s))\n    equation1 = Eq(30, t + (2400 / (0.8 * s)))\n\n    # She is delayed by 5 minutes due to rain, hence took 35 minutes\n    # 35 = t + (2400 / (0.8 * s) + d / s)\n    equation2 = Eq(35, t + (2400 / (0.8 * s) + d / s))\n\n    # The usual speed covers the journey in 30 minutes\n    # Hence d + 2400 = 30 * s\n    equation3 = Eq(d + 2400, 30 * s)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (t, d, s))\n\n    # Length of the journey = d + 2400\n    return solutions[d] + 2400\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n\n    # Using inverse proportions: People1 * Days1 = People2 * Days2\n    required_people = (original_people * original_days) / target_days\n    \n    additional_people = required_people - original_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approximate_value = 0.6957\n\n    value_after_years = initial_value * (1 - depreciation_rate) ** years\n\n    return round(value_after_years, 2)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let the original number of students in school A be a\n    # Then, the original number of students in school B would be 1050 - a\n    # After transferring, school A would have a - 20 students, and school B would have (1050 - a) + 20\n    # According to the problem, a - 20 is 10 more students than (1050 - a) + 20\n    # Formulate the equation: a - 20 = ((1050 - a) + 20) + 10\n    # Simplify the equation to find a\n    a = (1050 + 20 + 10 + 20) / 2\n    \n    return a\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # temperature at 5:00 am\n    rate_of_rise = 2   # degrees per hour\n    hours_passed = 5.5 # time from 5:00 am to 10:30 am\n\n    final_temp = initial_temp + rate_of_rise * hours_passed\n\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total amount Mrs. Chan had initially\n    x = symbols('x')\n\n    # After spending in shop A, remaining = x/2 - 1\n    # After spending in shop B, remaining = (x/2 - 1)/2 - 2\n    # After spending in shop C, remaining = ((x/2 - 1)/2 - 2)/3 - 3\n    # what's left after shop C is $49\n    equation = Eq((((x / 2 - 1) / 2 - 2) / 3 - 3), 49)\n\n    # solving the equation for x\n    solution = solve(equation, x)\n\n    # First amount had by Mrs Chan\n    return solution[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    n = 7  # number of shelves\n    total_books = 280  # total number of books\n    d = -3  # common difference\n    \n    # Let the number of books on the top shelf be 'a'\n    a = symbols('a')\n    \n    # Sum of arithmetic sequence formula: n/2 * (2a + (n-1)d)\n    equation = Eq(n/2 * (2*a + (n-1)*d), total_books)\n    \n    # solve for 'a'\n    a_value = solve(equation, a)\n    \n    return a_value[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell could potentially draw all pencils of other colors before drawing a green one.\n    # There are 3 blue and 3 white pencils, so he could draw up to 3 + 3 pencils without picking a green one.\n    max_other_pencils = 3 + 3\n    \n    # To ensure he gets at least 1 green pencil, he has to draw one more after the other colors.\n    min_draws_for_green = max_other_pencils + 1\n    \n    return min_draws_for_green\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Get all divisors of 2240\n    divisors_2240 = divisors(2240)\n\n    # Filter the divisors to find which ones make the result a square number\n    n_values = [d for d in divisors_2240 if is_square(2240 // d)]\n\n    # There might be multiple divisors that satisfy the condition, \n    # but the question seems to imply a single value for n. \n    # Assuming we need the largest factor to ensure the result is square.\n    ans = max(n_values)\n\n    return ans\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep = 3\n    mope = 5\n    cook = 9\n    clean = 21  # 3 weeks is 21 days\n\n    ans = lcm(sweep, mope, cook, clean)\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    both_competitors = (math_competitors + art_competitors) - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(candies, kids*18 + 12)\n    equation2 = Eq(candies, (kids + 2)*15)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    # Loop through all the page numbers\n    for page_number in range(1, 311):\n        # Convert each page number to string and sum the digits\n        total_sum += sum(int(digit) for digit in str(page_number))\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    return 22 * 125 * 8\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n    age_difference_now = dad_age_now - avril_age_now\n\n    age_difference_2_years_ago = age_difference_now\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    total_cost = cost_per_item * 11\n    return total_cost\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    import math\n    \n    numerator = (-4.56)**2 - 8.1**3\n    denominator = 7.2**3\n    division = numerator / denominator / (-math.sqrt(6 + 3/4) + 30.15)\n    expression = 16.7 - (division)**(1/3)\n    \n    ans = round(expression, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let 'n' be the number of years later\n    # Currently, Oliver is 20 and Lin is 26\n    oliver_current_age = 20\n    lin_current_age = 26\n    \n    # The sum of their ages in 'n' years will be 48\n    target_sum_age = 48\n    \n    # In 'n' years, Oliver will be 20 + n and Lin will be 26 + n\n    \n    # Setting up the equation:\n    # (20 + n) + (26 + n) = 48\n    \n    # Simplify the equation:\n    # 46 + 2n = 48\n    # 2n = 48 - 46\n    # 2n = 2\n    # n = 2 / 2\n    n = (target_sum_age - (oliver_current_age + lin_current_age)) // 2\n\n    # Return the number of years later\n    return n\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Speed ratio between Jayden and Carter\n    speed_ratio = 7 / 4\n\n    # Compute the total distance they both cover when Jayden first reaches place B.\n    # The total distance covered by both together will be twice the distance from A to B\n    total_distance = 2 * 440\n\n    # Compute the part of the total distance covered by Jayden using the speed ratio\n    jayden_distance = (speed_ratio / (1 + speed_ratio)) * total_distance\n\n    # The meeting point is the distance Jayden covered minus the distance from A to B\n    meeting_point_from_A = jayden_distance - 440\n\n    return meeting_point_from_A\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_lim_age, mrs_lim_age = symbols('mr_lim_age mrs_lim_age')\n\n    equation1 = Eq((mr_lim_age - 7) / (mrs_lim_age - 7), 6/5)\n    equation2 = Eq(mr_lim_age + mrs_lim_age, 69)\n\n    solutions = solve((equation1, equation2), (mr_lim_age, mrs_lim_age))\n\n    return solutions[mr_lim_age]\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam and Peter gave 20% of their stickers to John, which increased John's stickers by 80%\n    equation1 = Eq(john + 0.2 * sam + 0.2 * peter, john * 1.8)\n\n    # Sam had 20 stickers more than John in the end\n    equation2 = Eq(sam - 0.2 * sam, john + 20)\n    \n    # Sam and Peter had stickers in the ratio 7 : 5\n    equation3 = Eq(sam, 7/5 * peter)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # Calculate the total score of the 5 students\n    total_score_5_students = 5 * 87  # Since mean = total score / number of students\n\n    # Calculate the total score of all 6 students when the mean is 88\n    total_score_6_students = 6 * 88\n\n    # Jim's score will be the difference between the total score of 6 students and 5 students\n    jims_score = total_score_6_students - total_score_5_students\n\n    return jims_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    return sum(numbers)\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    price_after_first_discount = initial_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of baseball bats purchased.\n    x = symbols('x')\n    \n    # Cost price of one baseball bat.\n    cost_price_per_bat = 135\n    \n    # Selling price of one baseball bat.\n    selling_price_per_bat = 185\n    \n    # Profit after selling (x - 3) bats.\n    profit = 2945\n    \n    # Total cost price for x bats.\n    total_cost = cost_price_per_bat * x\n    \n    # Total revenue for (x - 3) bats.\n    total_revenue = selling_price_per_bat * (x - 3)\n    \n    # Equation based on the provided information.\n    equation = Eq(total_revenue, total_cost + profit)\n    \n    # Solve the equation for x.\n    solutions = solve(equation, x)\n    \n    # The solution should be the number of bats (positive integer).\n    num_bats = next(s for s in solutions if s.is_integer and s > 0)\n    \n    return num_bats\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n    equation1 = Eq(raja - 286, kumar - 109)\n    equation2 = Eq(kumar - 109, 4 * (raja - 286))\n\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    minibusses_needed = (boys + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Get the solutions for the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # How many triangles make a diamond\n    return solutions[diamond]/solutions[triangle]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rate of work for hot tap as 'h' and for cold tap as 'c'.\n    # Since cold tap flows at twice the rate of hot tap, we have c = 2 * h.\n    # Time taken to fill the bath using both taps is 10 minutes, so their combined\n    # work rate fills 1/10 of the bath per minute.\n\n    h, c = symbols('h c')\n\n    # Equation representing the combined work of hot and cold tap\n    equation1 = Eq(h + c, 1/10)\n\n    # Equation representing the relationship between the flow rates of the taps\n    equation2 = Eq(c, 2 * h)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (h, c))\n\n    cold_rate = solutions[c]\n\n    # Time taken by cold tap alone to fill the bath is the inverse of its rate\n    time_cold_only = 1 / cold_rate\n\n    return time_cold_only\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    last_6_mean = (total_sum - 4 * (1111 - 240)) / 6\n    return last_6_mean\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60\n    bud_money_pounds = 1.10\n    bud_money_p = bud_money_pounds * 100 \n    total_money_p = pip_money_p + bud_money_p \n    total_money_pounds = total_money_p / 100 \n\n    return total_money_pounds\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's candy\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate total number of candies they originally had\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('1234567890', 4):\n        i, s, p = map(int, p)\n        if i + i + i + i == p:\n            return p\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    joyce_speed_ratio = 3\n    lori_speed_ratio = 2\n    lori_speed = 2  # meters per second\n    time = 10  # seconds\n\n    joyce_speed = (joyce_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_joyce_runs = joyce_speed * time\n\n    return distance_joyce_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_A_20 = 0.6\n    probability_A_25_given_20 = 0.3\n    \n    # Use Bayes' Theorem, P(A|B) = P(B|A)*P(A) / P(B)\n    # But here we're looking for P(B|A) given P(A) and P(A|B), so we can simply calculate it as:\n    # P(B|A) = P(A|B) / P(A)\n    probability_A_over_25_given_over_20 = probability_A_25_given_20 / probability_A_20\n    \n    return probability_A_over_25_given_over_20\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # Distance they meet from their house in metres\n    total_distance = 780  # Total distance from house to library in metres\n\n    # Time taken for Don to meet Danny\n    time = distance_met / don_speed\n\n    # Remaining distance Danny has to cover to meet Don\n    danny_remaining_distance = total_distance - distance_met\n\n    # Danny's speed\n    danny_speed = danny_remaining_distance / time\n\n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n\n    num_teams = 5\n    # Total number of games is the combination of 5 teams taken 2 at a time (since each team plays every other team once).\n    num_games = comb(num_teams, 2)\n    \n    return num_games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    used_digits = 0\n\n    while used_digits < 792:\n        pages += 1\n        used_digits += digits_per_page\n\n        if pages >= 10 ** digits_per_page:\n            digits_per_page += 1\n\n    return pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_grams = (1 * 1000 + 500) + (1 * 1000 + 200) + 900  # Convert kg to g and sum\n    weight_per_tin = total_weight_grams / 8  # Divide by number of tins\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can either both be on the left, both be on the right, or one on each side.\n    # This leads to 3 different scenarios:\n    # Scenario 1: A and B on the left, 2 options for A and B, and 2 options for C and D\n    # Scenario 2: A and B on the right, 2 options for A and B, and 2 options for C and D\n    # Scenario 3: A on one side, B on the other, 2 options for each side, and 2 options for C and D\n\n    # Calculate the number of ways for each scenario:\n    scenario1 = 2 * 2\n    scenario2 = 2 * 2\n    scenario3 = 2 * 2 * 2\n\n    # Total number of ways is the sum of all three scenarios\n    total_ways = scenario1 + scenario2 + scenario3\n\n    return total_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    # Cross multiply to find the value of the box (□)\n    value = (20 * 27) / 30\n    return value\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # maximum marbles she could take without having 4 of the same color\n    # take 3 from each color at most\n    max_without_4_same = 3 * 3\n    # To ensure that she gets at least 4 of the same color, she needs to take one more\n    min_to_get_4_same = max_without_4_same + 1\n    \n    return min_to_get_4_same\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n    \n    for digit1 in digits:\n        for digit2 in digits:\n            if digit1 != digit2:\n                two_digit_numbers.add(digit1 + digit2)\n    \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    \n    # Since the number is to be even, the last digit must be 4 (the only even digit).\n    digits.remove(4)\n    # The smallest digit should come first, which is now 5.\n    first_digit = 5\n    digits.remove(5)\n\n    # The remaining digits should be arranged in ascending order to form the smallest 4-digit number.\n    digits.sort()\n    \n    # Concatenate the digits to form the smallest 4-digit even number.\n    smallest_number = int(str(first_digit) + ''.join(map(str, digits)) + '4')\n    \n    return smallest_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    # Initialize the variable to store the largest possible two-digit number\n    largest_number = 0\n    # Loop through all two-digit numbers\n    for num in range(10, 100):\n        if num % 7 == 5 and num % 13 == 11:\n            largest_number = max(largest_number, num)\n    return largest_number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    days_per_worker = 3 * 3\n    days_for_one_worker = days_per_worker / 1\n    return days_for_one_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Given expression without brackets can be evaluated directly.\n    original_result = 285 + 15 / 5 - 2\n\n    # List to store all unique results\n    results = set([original_result])\n\n    # Inserting brackets and evaluating all possible expressions:\n    # (285 + 15) / (5 - 2)\n    results.add((285 + 15) / (5 - 2))\n    # (285 + 15) / 5 - 2\n    results.add((285 + 15) / 5 - 2)\n    # 285 + (15 / 5) - 2\n    results.add(285 + (15 / 5) - 2)\n    # 285 + 15 / (5 - 2)\n    results.add(285 + 15 / (5 - 2))\n    # 285 + ((15 / 5) - 2)\n    results.add(285 + ((15 / 5) - 2))\n    # (285 + 15 / 5) - 2\n    results.add((285 + 15 / 5) - 2)\n    # 285 + (15 / (5 - 2))\n    results.add(285 + (15 / (5 - 2)))\n\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    \n    pupils_per_row = total_pupils // rows\n\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    # List to store the state of lockers, True for unlocked, False for locked\n    lockers = [True] * 100\n    \n    # Lock all lockers divisible by 3\n    for i in range(3, 101, 3):\n        lockers[i - 1] = False\n\n    # Toggle lockers divisible by 5\n    for i in range(5, 101, 5):\n        lockers[i - 1] = not lockers[i - 1]\n\n    # Count the number of unlocked lockers\n    ans = sum(lockers)\n    return ans\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    for i in range(len(perm) - 1):\n        if perm[i] == 'D' and perm[i+1] == 'E':\n            return 0\n        if perm[i] == 'E' and perm[i+1] == 'D':\n            return 0\n    return 1\n\ndef solution():\n    count = 0\n    students = 'ABCDEFG'\n    for perm in permutations(students):\n        if perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C') or \\\n           perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            if perm.index('F') + 1 == perm.index('G') or perm.index('F') - 1 == perm.index('G'):\n                count += count_valid_permutations(perm)\n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_to_yiding_ratio = 4 / 3\n    yiding_at_nicolas_16 = 16 / nicolas_to_yiding_ratio\n    return yiding_at_nicolas_16\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Let x be the cost of one cake \n    \n    # Scenario 1: Lucy borrows $11 after buying 10 cakes\n    equation1 = Eq(10 * x - 11, 0)\n    \n    # Scenario 2: Lucy borrows $26 after buying 13 cakes\n    equation2 = Eq(13 * x - 26, 0)\n\n    # Solve the equations to find the cost of one cake\n    cost = solve((equation1, equation2), (x))\n\n    return cost[x]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / 10\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n\n    ans = (num1 + num2) / 2\n\n    return ans\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    known_scores = [37, 53, 29, 41]\n    total_known_scores = sum(known_scores)\n    \n    total_score = mean_score * total_matches\n    x = total_score - total_known_scores\n    \n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('CHEESE')\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    # Calculating the factorial for each letter count and total letters\n    total_ways = factorial(total_letters)\n    c_ways = factorial(c_count)\n    h_ways = factorial(h_count)\n    e_ways = factorial(e_count)\n    s_ways = factorial(s_count)\n\n    # Using the formula for permutations of multisets to find the number of distinct arrangements\n    ans = total_ways // (c_ways * h_ways * e_ways * s_ways)\n\n    return ans\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Total numbers from 100 to 999\n    no_sevens = 8 * 9 * 9  # Numbers without any seven\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    # Subtract numbers with exactly one seven\n    one_seven_first_digit = 1 * 9 * 9  # 7xx\n    one_seven_second_digit = 8 * 1 * 9  # x7x\n    one_seven_third_digit = 8 * 9 * 1  # xx7\n    exactly_one_seven = one_seven_first_digit + one_seven_second_digit + one_seven_third_digit\n\n    ans = at_least_two_sevens - exactly_one_seven\n    return ans\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals, cows, goats = symbols('total_animals cows goats')\n    \n    # Initial conditions\n    equation1 = Eq(cows, 0.65 * total_animals)\n    equation2 = Eq(goats, total_animals - cows)\n\n    # After 240 more animals\n    equation3 = Eq(cows + 240 * 0.2, 0.65 * total_animals + 0.2 * (total_animals + 240))\n    equation4 = Eq(goats * 2, total_animals - cows + 240 - 240 * 0.2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals, cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(100000, 1000000):\n        if int(str(i)[-1]) == 9:\n            if int(str(i)[:-1]) * 4 == int(str(9) + str(i)[:-1]):\n                return i\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    \n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, jonathan = symbols('abigail jonathan')\n\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_work_days = 27\n\n    # Total work done by Bob alone\n    bob_total_work = total_work_days * bob_work_rate\n\n    # Remaining work that needs to be done by Alice\n    remaining_work_for_alice = 1 - bob_total_work\n\n    # Number of days Alice actually worked\n    actual_work_days_for_alice = remaining_work_for_alice / alice_work_rate\n\n    # Days Alice took off\n    days_off_for_alice = total_work_days - actual_work_days_for_alice\n\n    return days_off_for_alice\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if ABA + CDC == 726 and A != 0 and C != 0:\n            ans = A + B + C + D\n            return ans\n        ABA = 100 * A + 10 * B + A\n        CDC = 100 * C + 10 * D + C\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n    \n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the given problem\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Calculate the cost for 5 bananas\n    cost_for_five_bananas = 5 * solutions[banana]\n\n    return cost_for_five_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of days to finish reading the storybook\n    # Let p be the number of pages in the storybook\n    d, p = symbols('d p')\n\n    # Vanessa reads 30 pages a day and finishes 2 days later than the deadline\n    eq1 = Eq(30 * (d + 2), p)\n    \n    # Vanessa reads 39 pages a day and finishes 4 days earlier than the deadline\n    eq2 = Eq(39 * (d - 4), p)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (d, p))\n\n    # Return the number of days and pages as a tuple\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020202202022'  # This is the repeating part of the sequence\n    sequence_length = len(sequence)\n    \n    full_repeats = 535 // sequence_length\n    remaining_digits = 535 % sequence_length\n    \n    full_repeats_count_2 = sequence.count('2') * full_repeats\n    remaining_count_2 = sequence[:remaining_digits].count('2')\n    \n    total_count_2 = full_repeats_count_2 + remaining_count_2\n\n    return total_count_2\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    result = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return result\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta(a, b):\n        return a * a + a + b\n\n    ans = delta(10, 9)\n    return ans\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_away_cookies = 55\n\n    remaining_cookies = morning_cookies + afternoon_cookies - given_away_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let's denote the total number of 50 cent coins as f and the total number of 1 dollar coins as d.\n    # Initially, we have the following ratio of 50 cent to 1 dollar coins: f / d = 2 / 5\n    # After receiving 10 one-dollar coins and 5-dollars worth of fifty cent coins (which is 10 fifty-cent coins), the ratio becomes:\n    # (f + 10) / (d + 10) = 1 / 2\n    \n    # We can set up our equations based on the above statements\n    # f / (f + d) = 2 / 7 (The fraction of fifty-cent coins Owen originally had)\n    # (f + 10) = 1/2 * (d + 10) * 2 (After his mother gave him additional coins, Owen had twice as many one-dollar coins as fifty cent coins)\n    \n    # Solving the above two equations will give us the initial values of f and d.\n    for f in range(1, 100):\n        d = (7*f)/2 - f  # from f / (f + d) = 2 / 7, solve for d\n        if (f + 10) * 2 == (d + 10):  # after his mother gave him more coins\n            break\n    \n    # Owen's initial total number of coins is the sum of fifty-cent and one-dollar coins\n    ans = f + d\n    return int(ans)\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n\n    # Each adult ticket costs $5, each child ticket costs $3\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    # 19 tickets were sold in total\n    equation2 = Eq(adults + children, 19)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the variables for the number of marbles each person has after the transactions\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Define the equations based on the problem statement\n    # After Charlene gives 15 marbles to Betsy\n    # And Betsy gives 8 marbles to Anna, we have:\n    end_ratio = Eq(anna/betsy, 2/5)\n    end_ratio2 = Eq(betsy/charlene, 5/7)\n    total_marbles = Eq(anna + betsy + charlene, 168)\n\n    # Solve the system of equations for anna, betsy, and charlene\n    solutions = solve((end_ratio, end_ratio2, total_marbles), (anna, betsy, charlene))\n\n    # Calculate Betsy's initial number of marbles before receiving from Charlene\n    betsy_initial = solutions[betsy] - 15  # Charlene gave 15 marbles to Betsy\n    return betsy_initial\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    andy_total_savings = 378\n    brenda_daily_savings = 6\n\n    # Calculate the number of days Andy took to save $378\n    days_taken = andy_total_savings // andy_daily_savings\n    \n    # Calculate how much Brenda saves in that number of days\n    brenda_savings = days_taken * brenda_daily_savings\n\n    return brenda_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    for correct in range(11):\n        wrong = 10 - correct\n        score = correct * 6 - wrong * 2\n        if score == 44:\n            return correct\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original dimensions: 100% of length (L), breadth (B), height (H)\n    # New dimensions: 110% of length, (4/5)*100% of breadth, (11/10)*100% of height\n\n    # The new volume as a percentage of the old volume\n    new_volume_percentage = (110 / 100) * ((4 / 5) * 100 / 100) * (11 / 10) * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    total_contestants = 8\n    # Number of ways to choose the three winners out of 8 contestants\n    # is a permutation since the order matters (gold, silver, bronze)\n    num_ways = factorial(total_contestants) // factorial(total_contestants - 3)\n    \n    return num_ways\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    points = 10\n    points_per_triangle = 3\n\n    # The number of ways to choose 3 points out of 10 to form a triangle\n    num_triangles = comb(points, points_per_triangle)\n\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_numbers = 30 + 40 + 50\n    repeated_times = 3\n    total_sum = sum_numbers * repeated_times\n    return total_sum\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * (100 / remaining_work_percentage)\n    \n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hour1, hour2 = symbols('hour1 hour2')\n    total_mushrooms = 40\n\n    equation1 = Eq(hour1 + 26, hour2)\n    equation2 = Eq(hour1 + hour2, total_mushrooms)\n\n    solutions = solve((equation1, equation2), (hour1, hour2))\n\n    return solutions[hour2]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # A way to find out the largest possible number of questions Noa can solve,\n    # given that everyone solves at least one question and no two students solve the same number of questions,\n    # is to assign the smallest possible numbers of questions to the four classmates first,\n    # under the conditions described. This would leave Noa with the maximum number of questions.\n    \n    # Since there are 5 students, and each student must solve at least one question,\n    # we can assign one question to the student solving the least amount, \n    # two to the next, and so on, until we assign questions to 4 students.\n    # We then subtract this total from the 40 questions\n    # to find out how many Noa can potentially solve.\n    \n    # Assign the minimum questions to Noa's classmates to maximize Noa's portion\n    total_assigned_to_classmates = 1 + 2 + 3 + 4  # since there are 4 classmates and each must get a different number\n\n    # Subtract the total assigned to classmates from the total number of questions\n    noa_questions = 40 - total_assigned_to_classmates\n\n    return noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    scan, ted = symbols('scan ted')\n\n    # Ratio of Scan's age to Ted's age is 1:4\n    equation1 = Eq(scan/ted, 1/4)\n\n    # Ratio of their ages 4 years from now will be 1:3\n    equation2 = Eq((scan + 4)/(ted + 4), 1/3)\n\n    # Solve the system of equations\n    ages = solve((equation1, equation2), (scan, ted))\n\n    # Extract Scan's and Ted's age\n    scan_age = ages[scan]\n    ted_age = ages[ted]\n\n    # Now we need to find how many years ago the ratio of their ages was 1:9\n    years_ago = symbols('years_ago')\n\n    # Equation for the ratio 1:9 some years ago\n    equation_years_ago = Eq((scan - years_ago)/(ted - years_ago), 1/9)\n\n    # Solve for years_ago\n    years_ago_solution = solve((equation_years_ago.subs({scan: scan_age, ted: ted_age})), (years_ago))\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n    difference = hottest_temperature - coldest_temperature\n\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging (from 6:30 AM to 7:30 AM)\n    jogging_time_hours = 1\n\n    # Jogging speed in miles per hour\n    jogging_speed_mph = 6.5\n\n    # Calculate distance covered while jogging\n    jogging_distance_miles = jogging_time_hours * jogging_speed_mph\n\n    # Time spent walking (from 7:30 AM to 9:30 AM)\n    walking_time_hours = 2\n\n    # Walking speed in miles per hour\n    walking_speed_mph = 4.5\n\n    # Calculate distance covered while walking\n    walking_distance_miles = walking_time_hours * walking_speed_mph\n\n    # Total distance traveled\n    total_distance_miles = jogging_distance_miles + walking_distance_miles\n\n    return total_distance_miles\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    rounded_number = round(number, -3)\n    return rounded_number\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres_to_centimetres = 9 * 100\n    return metres_to_centimetres\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n    \n    # Total bicycles equation\n    equation1 = Eq(foldable + non_foldable, 476)\n    \n    # Bicycles left after sales\n    equation2 = Eq(non_foldable - (5/9) * non_foldable, 208 - (4/7) * foldable)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n    \n    # Foldable bicycles sold calculation\n    foldable_sold = solutions[foldable] - (4/7) * solutions[foldable]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    slide_amount = 1\n    \n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= slide_amount\n        slide_amount += 1\n    \n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let the number of guppies be g,\n    # then the number of goldfish is 2g\n    # and the number of mollies is 2 * the number of goldfish which is 4g.\n    # According to the question, the total number of mollies is 276,\n    # so we have 4g = 276\n    g = 276 / 4\n\n    # The number of mollies is 4g and the number of guppies is g,\n    # so the difference is 4g - g = 3g\n    difference = 3 * g\n\n    return int(difference)\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3  # cm per meter\n    real_tree_height = 12  # meters\n    model_tree_height = scale_ratio * real_tree_height  # in cm\n    return model_tree_height\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # From the pigeonhole principle, if there are n students and we want at least one to get k candies,\n    # then we need to distribute at least n * (k-1) + 1 candies to ensure this happens.\n    students = 20\n    candies_needed_for_least_3 = 3\n    min_candies = students * (candies_needed_for_least_3 - 1) + 1\n\n    return min_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    n = 20\n    factors_sum = sum(i + n//i for i in range(1, int(n**0.5)+1) if n % i == 0)\n    return factors_sum\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    ans = 5 * 34\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_mark = 8\n    wrong_mark = -4\n    total_score = 100\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_fraction = 1 - 5/8\n    remaining_grams = 6000\n    original_grams = remaining_grams / remaining_fraction\n    return original_grams\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # At worst, Yohan could pick all red and black socks before getting a pair of white socks.\n    max_red_socks = 10  # All red socks\n    max_black_socks = 10  # All black socks\n    # After that, he would need to take just two white socks to have a pair of white socks.\n    max_white_socks = 2  # Two white socks for one pair\n    # Total socks Yohan must take to guarantee a pair of white socks\n    total_socks = max_red_socks + max_black_socks + max_white_socks\n    return total_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    result = 0.60 * 765\n    return result\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    sum_ = sum(range(1, 20, 2))\n    return sum_\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n\n    # The number of gaps between lamp posts is the number of flowers \n    # divided by the number of flowers between two lamp posts\n    num_gaps = total_flowers // flowers_between_lamps\n\n    # The number of lamp posts is one more than the number of gaps\n    num_lamp_posts = num_gaps + 1\n\n    # The total length of the road divided by the number of gaps \n    # gives the distance between every two lamp posts\n    road_length = 50\n    distance_between_lamps = road_length / num_gaps\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    left_books = 6\n    right_position = 14\n\n    total_books = left_books + right_position\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temperature = 8\n    temperature_difference = 17\n\n    final_temperature = initial_temperature - temperature_difference\n\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    # Since trees are planted at both ends, there should be one additional tree accounted for.\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 / (4/5)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_number = first_number * (ratio ** (5 - 1))\n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    for_sister = 6\n    number_of_friends = 6\n    \n    sweets_for_friends = (total_sweets - for_sister) // number_of_friends\n    \n    return sweets_for_friends\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    side_length = 12\n    bush_distance_from_edge = 1.5\n    distance_between_bushes = 3\n\n    effective_side_length = side_length - 2 * bush_distance_from_edge\n    number_of_bushes_per_side = effective_side_length // distance_between_bushes\n    total_bushes = 4 * number_of_bushes_per_side\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    p_days = 12\n    q_days = 8\n    p_hours_per_day = 8\n    q_hours_per_day = 10\n    \n    p_work_per_hour = 1 / (p_days * p_hours_per_day)\n    q_work_per_hour = 1 / (q_days * q_hours_per_day)\n    \n    combined_work_per_hour = p_work_per_hour + q_work_per_hour\n    combined_hours_per_day = 8\n    \n    days_to_complete_job = 1 / (combined_work_per_hour * combined_hours_per_day)\n\n    return days_to_complete_job\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    faster_van_speed = 132\n    other_van_speed = 78\n    time_in_hours = 8\n    \n    distance_apart = (faster_van_speed + other_van_speed) * time_in_hours\n\n    return distance_apart\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since each child must get at least one apple and no two can have the same number,\n    # we can begin by distributing the smallest possible number to each child.\n    # Start with 1 apple each for the first four children: 1, 2, 3, 4 apples.\n    # Now we have distributed 1 + 2 + 3 + 4 = 10 apples.\n    # There are 19 - 10 = 9 apples left.\n    # If we give all remaining apples to the fifth child, that child will have 9 apples.\n    # However, for that child to have the maximum number of apples and still have each child \n    # get a unique number, we should attempt to \"push\" the remaining apples towards the last child.\n    # Let's correct the distribution:\n    \n    # Now assign the last child to get the remaining apples.\n    # Since there are already 4 children getting 1, 2, 3, and 4 apples, the fifth child\n    # can get a minimum of 5 apples to maintain the distinct number condition.\n    # Therefore, the most the last child can get is what remains after the minimum distribution\n    # to the first four children, i.e., 19 - (1+2+3+4) = 19 - 10 = 9 apples.\n\n    # However, since this is a continuous sequence and not individual numbers, \n    # we also need to ensure that no two children have the same amount.\n    # Since the first four children have taken 1 to 4 apples respectively, the last child can have 5+ apples.\n    # Hence, distribute one more apple each to the first four children to keep the uniqueness,\n    # which gives us the sequence 2, 3, 4, 5 and distribute the remaining to the fifth child.\n    \n    # Recalculate the distribution:\n    # Now distribute the minimum number again to the first 4 children, for the new sequence 2, 3, 4, 5\n    # To maintain distinct numbers, we have:\n    # 19 - (2+3+4+5) = 19 - 14 = 5 apples are left.\n    # These 5 apples go to the fifth child, who already has a minimum of 5, so the maximum they can get is 5 + 5 = 10.\n    \n    max_apples_fifth_child = 5 + 5  # The maximum number the last child can get\n\n    return max_apples_fifth_child\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 / (remaining_work_percentage / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    score = solve(equation, original_score)\n\n    return score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    # Find all divisors of 78\n    divs = divisors(78)\n    # Filter out odd divisors since the number of bags must be even\n    even_divs = [d for d in divs if d % 2 == 0]\n    # Subtract 1 because we don't consider the trivial division (78 apples in one bag)\n    return len(even_divs) - 1\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Define the equivalent ratios\n    rabbits_per_goat = 9 / 3  # 3 goats are equivalent to 9 rabbits\n    goats_per_cow = 2 / 4     # 4 cows are equivalent to 2 goats\n    \n    # Calculate how many rabbits are equivalent to 1 cow\n    rabbits_per_cow = rabbits_per_goat / goats_per_cow\n    \n    # Calculate how many rabbits 2 cows are equivalent to\n    rabbits_for_2_cows = rabbits_per_cow * 2\n\n    return int(rabbits_for_2_cows)\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    score = 168\n    for correct_questions in range(total_questions - unattempted_questions + 1):\n        wrong_questions = total_questions - unattempted_questions - correct_questions\n        if 4 * correct_questions - wrong_questions == score:\n            return correct_questions\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let's denote the number of pencils as 4x and the number of pens as 5x\n    # After taking out a pen and replacing it with a pencil, we have:\n    # Pencils: 4x + 1, Pens: 5x - 1\n    # The new ratio is (4x + 1) : (5x - 1) = 7 : 8\n    # Now we'll solve for x using the proportion 7/8 = (4x + 1)/(5x - 1)\n\n    # We can cross-multiply to solve for x:\n    # 7 * (5x - 1) = 8 * (4x + 1)\n    # 35x - 7 = 32x + 8\n    # 3x = 15\n    # x = 5\n\n    # Now we can find the total number of pencils and pens using x:\n    # Total = 4x (pencils) + 5x (pens) = 9x\n    x = 5\n    total = 9 * x\n\n    return total\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    # Using formula for the sum of n terms in an arithmetic progression: S_n = n/2 * (2a + (n-1)d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operator(a, b):\n        return a * b - 5 * a + 8\n    \n    result = custom_operator(10, 9)\n    result = custom_operator(result, 8)\n    result = custom_operator(result, 7)\n    result = custom_operator(result, 6)\n    result = custom_operator(result, 5)\n    result = custom_operator(result, 4)\n    \n    return result\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    girls_percentage = 100 - boys_percentage\n\n    total_children = girls * 100 / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    current_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n    return current_strawberries\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    planned_profit = 0.60\n    actual_profit = 0.80 * planned_profit\n    first_day_sales_fraction = 0.70\n    first_day_profit_rate = 0.60\n\n    # Calculate the actual profit rate from the first day\n    first_day_actual_profit = first_day_sales_fraction * first_day_profit_rate\n\n    # The actual total profit includes both the first and second day sales\n    # The first day has already contributed to some profit\n    # We need to find out the second day discount rate that would result in the total actual profit\n    second_day_sales_fraction = 1 - first_day_sales_fraction\n    second_day_loss_rate = first_day_actual_profit - actual_profit\n\n    # Since on the second day Mike sells the rest at a loss (which is a negative profit), we deduct it from 1 to get the discount rate\n    discount_rate = second_day_loss_rate / second_day_sales_fraction\n\n    return round(discount_rate, 2)\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    equation1 = Eq(curry_puff_price, tuna_puff_price - 0.2)\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    last_page_before_missing = 14\n    first_page_after_missing = 35\n\n    # Newspapers are printed in such way that each sheet contains 4 page numbers:\n    # if n is on the right side, n+1 will be on the next left side, n+2 on the back of n+1 and n+3 on the back of n.\n    # Considering that, pages before n and after n+1 are on the same sheet.\n    # Therefore, the last sheet number before the missing one is (last_page_before_missing + 1) // 4, because if last_page_before_missing is even it is a right page, \n    # else if it is odd it is a left page and the next is even, so we still can use the same logic.\n    # The first sheet number after the missing one is (first_page_after_missing + 2) // 4, because first_page_after_missing is on the right hence the sheet will have next left page \n    # which has value first_page_after_missing + 1. Then its back will have an additional 1 so +2 in total, hence the first missing sheet is (first_page_after_missing + 2) // 4.\n\n    missing_sheets = ((first_page_after_missing + 2) // 4) - ((last_page_before_missing + 1) // 4)\n\n    return missing_sheets\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for tens in digits:\n        for ones in digits:\n            if tens != ones and (10 * tens + ones) % 2 != 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for number in range(1, 500):\n        if number % 5 == 1 and number % 8 == 4 and number % 9 == 5:\n            return number\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    # Assume all are boys and receive 2 balloons each\n    all_boys_balloons = total_children * 2\n    # Calculate the surplus balloons when assuming all are boys\n    surplus_balloons = total_balloons - all_boys_balloons\n    # Each girl gets 2 more balloons than each boy, so we divide the surplus by 2 to find the number of girls\n    num_girls = surplus_balloons / 2\n    # Subtract the number of girls from total children to get number of boys\n    num_boys = total_children - num_girls\n    return int(num_boys)\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_count = 10\n    end_count = 25\n    \n    num_counted = end_count - start_count + 1\n    \n    return num_counted\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals_initial, cows_initial, goats_initial = symbols('total_animals_initial cows_initial goats_initial')\n\n    # Equation for initial distribution of cows (65% of total)\n    equation1 = Eq(cows_initial, 0.65 * total_animals_initial)\n    # Equation for initial number of goats (100% - 65% = 35% of total)\n    equation2 = Eq(goats_initial, total_animals_initial - cows_initial)\n    # Equation for new total number of animals after adding 240 more\n    equation3 = Eq(total_animals_initial + 240, cows_initial * 1.20 + goats_initial * 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_animals_initial, cows_initial, goats_initial))\n\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    product = 1\n    for i in range(3, 21, 2):\n        product *= (1 + 2 / i)\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    # convert 85cm to meters\n    string_length_meters = 85 / 100\n\n    # calculate total string length needed in meters\n    total_length_needed = 400 * string_length_meters\n\n    # length of one roll in meters\n    roll_length = 20\n\n    # calculate number of rolls needed\n    num_rolls_needed = total_length_needed / roll_length\n\n    # since we cannot buy a fraction of a roll, we need to round up to the nearest whole number\n    return int(num_rolls_needed) if num_rolls_needed.is_integer() else int(num_rolls_needed) + 1\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    donation = salary / 4\n    remainder = salary - donation\n    food = (5/6) * remainder\n    savings = remainder - food\n    equation = Eq(food - donation, 78)\n\n    solutions = solve(equation, salary)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, emma = symbols('john emma')\n    equation1 = Eq(john + emma, 27 - 3*2)  # Subtract 3 years for each person to their current ages\n    equation2 = Eq(john, emma + 7)\n\n    solution = solve((equation1, equation2), (john, emma))\n\n    return solution[emma]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # Calculate the last digit of a power of 2\n    last_digit_2 = (2 ** (2017 % 4)) % 10  # Using the fact that the pattern repeats every 4\n    \n    # Calculate the last digit of a power of 3\n    last_digit_3 = (3 ** (2017 % 4)) % 10  # Using the fact that the pattern repeats every 4\n    \n    # The last digit of the whole expression\n    last_digit = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two time periods\n    t1, t2 = symbols('t1 t2')\n\n    # Distance walked at first speed = speed * time\n    d1 = 150 * (t1 - 10)\n    \n    # Distance walked at second speed = speed * time\n    d2 = 200 * t2\n    \n    # The total distance walked is the sum of distances at two different speeds\n    equation1 = Eq(d1 + d2, 3700)\n    \n    # The total time spent walking (t1 + t2) is also the duration he walked at first speed\n    equation2 = Eq(t1 + t2, t1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t1, t2))\n    \n    # Sum t1 and t2 to get the total time spent walking\n    total_time = solutions[t1] + solutions[t2]\n    \n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    a7 = 57\n    a15 = 89\n    n7 = 7\n    n15 = 15\n\n    common_difference = (a15 - a7) / (n15 - n7)\n\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences (remainder, modulus)\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n\n    # Solve the system of congruences\n    number, _ = solve_congruence(*congruences)\n\n    # Find the lowest positive number that fits the criteria and is less than 400\n    while number < 400:\n        return number\n        number += 2 * 3 * 5 * 7  # Product of the moduli\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # A seven-digit number is divisible by 9 if the sum of its digits is divisible by 9.\n    # The given form is 47A1B9C and we know that digits have to be different.\n    # The sum of the known digits 4 + 7 + 1 + 9 = 21.\n    # Let's find the possible values for A, B, C such that their sum with 21 is divisible by 9.\n    # Also note that A, B, C can't be 4, 7, 1, 9 and they must be different from each other.\n\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len({4, 7, A, 1, B, 9, C}) == 7: # ensure all digits are different\n                    if (4 + 7 + A + 1 + B + 9 + C) % 9 == 0:\n                        return A + B + C, f\"47A1B9C -> 47{A}1{B}9{C}\"\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_current = 240\n    sweets_per_week = 45 - 60\n    sweets_goal = 150\n\n    weeks = (sweets_goal - sweets_current) / sweets_per_week\n\n    return abs(weeks)\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    carrie_payment = solutions[apple] + solutions[orange]\n\n    return carrie_payment\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    return 3**3  # Each of the three positions can be filled with any of the three digits\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    both_classes_students = (sport_class_students + reading_class_students) - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n\n    # Price for two pairs of rackets (2 pairs * 2 rackets per pair)\n    total_rackets_cost = 4 * racket_price\n\n    # Remaining money for tennis balls\n    remaining_money = 140 - total_rackets_cost\n\n    # Number of tennis balls he can buy\n    num_tennis_balls = remaining_money // ball_price\n\n    return int(num_tennis_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Since there are 3 colors, to guarantee that we have at least one ball of each color,\n    # we must consider the worst-case scenario using the Pigeonhole Principle.\n    # If we take 4 balls of the same color, we still don't have 3 different colors.\n    # If we take another 4 balls, they could all be the same second color, still not ensuring 3 different colors.\n    # But after we take one more ball, we are guaranteed to have 3 different colored balls.\n    \n    # 4 balls of the first color + 4 balls of the second color + 1 ball to ensure the third color\n    num_balls_required = 4 + 4 + 1\n    return num_balls_required\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week = 0\n    \n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week += 1\n    \n    return week\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_durians_fraction = 4 / 6\n    sold_durians = total_durians * sold_durians_fraction\n    durians_left = total_durians - sold_durians\n    \n    return int(durians_left)\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the weight of one box of apples and 'o' the weight of one box of oranges\n    a, o = symbols('a o')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * a + 5 * o, 270)\n    equation2 = Eq(3 * a + 7 * o, 342)\n\n    # Solve the equations for 'a' and 'o'\n    solutions = solve((equation1, equation2), (a, o))\n\n    return solutions[a], solutions[o]\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points, and the distance between adjacent points is equal. \n    # So the circle is divided into 12 equal parts.\n    # For a right-angled triangle to be formed from these points, \n    # the hypotenuse must be the diameter of the circle. \n    # We can choose any point as the vertex of the right angle. There are 12 choices for this.\n    # Once we have chosen this point, there are 5 points on one side and 5 points on the other side\n    # (not counting the one opposite, since it would form a line, not a right-angled triangle).\n\n    # For each choice of vertex for the right angle, we have 5 ways to choose a point on one side \n    # and 5 ways to choose a point on the other side, making 5 * 5 = 25 right-angled triangles for each vertex.\n    # Since there are 12 such vertices, the total number of right-angled triangles is 12 * 25.\n\n    num_triangles = 12 * 25\n    return num_triangles\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n    \n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # Since the tiger is both in the exact middle of the line and the 11th in line,\n    # there should be as many animals in front of the tiger as there are behind.\n    # Therefore, multiply the position of the tiger by 2 and subtract 1 (the tiger itself)\n    total_animals = (11 * 2) - 1\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3)*24 + (2/5)*30 + (1/3)*15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # The number of roses that Nancy initially divides into 3 vases\n    initial_roses = 24\n    # The number of vases Nancy divides the new roses into\n    new_vases = 4\n\n    # Each of the initial vases must have an amount of roses that is a multiple of 4,\n    # because they will be evenly distributed in the new 4 vases.\n    # The smallest multiple of 4 that is greater than or equal to 3 is 3 * 4 = 12.\n    # Therefore, the number of roses in each of the initial 3 vases is 24 / 3 = 8,\n    # so each of the new 4 vases will have 8 roses.\n    roses_per_new_vase = initial_roses / 3\n\n    # Since all new four vases have the same number of roses as the initial vases' roses each,\n    # the total number of roses is the same in both sets of vases:\n    total_roses = roses_per_new_vase * new_vases\n\n    return int(total_roses)\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # cost of a packet of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # cost of a packet of Mamee\n    big_packet_jelly_cost = 6 * mamee_cost  # cost of a big packet of jelly\n\n    return big_packet_jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number = 2405 + 1827\n    return number\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n    return int(num)\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavor = 2\n    cherry_flavor = 7\n    mint_flavor = 1\n\n    # Will hates to eat candy in mint flavor, so we don't count it\n    max_candies_will_can_eat = lemon_flavor + cherry_flavor\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Loop through all four-digit numbers\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n\n                    # Check if all digits are different\n                    if len({A, B, C, D}) == 4:\n                        AB = A * 10 + B\n                        BC = B * 10 + C\n                        CD = C * 10 + D\n                        ABC = A * 100 + B * 10 + C\n                        BCD = B * 100 + C * 10 + D\n                        ABCD = A * 1000 + B * 100 + C * 10 + D\n\n                        # Check the divisibility conditions\n                        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                            return ABCD\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In a single elimination tournament, the number of games is always one less than the number of players\n\n    return games_played\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ages of the two sons and two daughters\n    son_older, son_younger, daughter_older, daughter_younger = symbols('son_older son_younger daughter_older daughter_younger')\n\n    # Equations based on the problem statement\n    eq1 = Eq(son_older + son_younger + daughter_older + daughter_younger, 55)  # sum of the children's ages\n    eq2 = Eq(son_younger - son_older, 3)  # two sons were born three years apart\n    eq3 = Eq(daughter_older - daughter_younger, 2)  # two daughters were born two years apart\n    eq4 = Eq(son_younger, 2 * daughter_older)  # younger son is twice the age of the older daughter\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (son_older, son_younger, daughter_older, daughter_younger))\n\n    # Find the youngest child's age among the solutions\n    youngest_child_age = min(solutions.values())\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # given height and the ratio of height to width\n    height = 21\n    ratio_h_to_w = 3/4\n\n    # calculate the width based on the given ratio\n    width = (height / 3) * 4\n\n    # calculate the perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    # Price of strawberry cake\n    strawberry_cake = 3\n    \n    # Price of marble cake; $2 more than strawberry cake\n    marble_cake = strawberry_cake + 2\n    \n    # Price of cheese cake; thrice the price of marble cake\n    cheese_cake = 3 * marble_cake\n    \n    # Price of 2 cheese cakes\n    price_2_cheese_cakes = 2 * cheese_cake\n\n    return price_2_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if (num % 2 == 1) and (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_digits = [4, 2, 8, 5, 7, 1]\n    sum_of_digits = 0\n    for i in range(58):\n        sum_of_digits += recurring_digits[i % 6]\n    return sum_of_digits\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "def solution():\n    from math import factorial\n\n    total_books = 3 + 4 + 2 + 2   # Total number of books\n    biographies = 3\n    science_fictions = 4\n    magazines = 2\n    practice_books = 2\n    \n    # Calculate the number of ways to arrange the books\n    ans = factorial(total_books) // (factorial(biographies) * factorial(science_fictions) * factorial(magazines) * factorial(practice_books))\n    \n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of solution exchanged from A to B\n    x = symbols('x')\n    # Equation for the final concentration in bottle A after exchange\n    equation1 = Eq((50 * 0.11 - x * 0.11 + x * 0.47) / 50, (50 * 0.47 - x * 0.47 + x * 0.11) / 50)\n\n    # Solve for x\n    solution_x = solve(equation1, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_string_length = 13\n    difference_length = 25\n    nick_string_length = tom_string_length + difference_length\n    ans = nick_string_length - tom_string_length\n    return ans\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    chicken_tenders_students = 18\n    total_students = 50\n\n    percentage = (chicken_tenders_students / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Since each place in the three-digit number can be filled with any of\n    # the cards and cards can be reused, this is a permutation with repetition.\n    \n    # There are 3 choices for each of the 3 positions in the number.\n    choices_per_position = 3\n    \n    # The total number of different three-digit numbers is then:\n    ans = choices_per_position ** 3\n    \n    return ans\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    # The equation is 8 * box + 3 = 75.\n    # To find the value of box, we need to perform inverse operations.\n    \n    # First, subtract 3 from both sides of the equation.\n    result = 75 - 3\n    \n    # Then, divide the result by 8 to find the value of box.\n    box = result / 8\n    \n    return box\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    length_in_cm = 20 * 100  # Convert the length to centimeters\n    planting_distance = 40\n    offset = 20\n\n    # Available length for planting cauliflowers in cm\n    available_length = length_in_cm - 2 * offset\n\n    # Number of cauliflowers planted\n    number_of_cauliflowers = (available_length // planting_distance) + 1\n\n    return int(number_of_cauliflowers)\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candies = 15\n    ways = 0\n    for pile_combo in combinations(range(1, candies), 3):\n        if sum(pile_combo) < candies:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    prime_numbers = []\n    for number in range(2, 51):\n        if isprime(number):\n            if isprime(number + 6) or isprime(number - 6):\n                prime_numbers.append(number)\n    ans = len(prime_numbers), prime_numbers\n    return ans\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    total = 250\n    \n    ans = (percentage / 100) * total\n    \n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_meters = 3.7 + 64 / 100\n    total_to_subtract = 2 + 7 / 100\n    ans = total_meters - total_to_subtract\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the given word problem\n    equation1 = Eq(1 * banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(1 * banana + 1 * pear, 62)  # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    fib_seq = [1, 2, 3, 5, 8, 13, 21]\n    next_num = fib_seq[-1] + fib_seq[-2]\n    return next_num\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of black, white, and grey rabbits\n    black, white, grey = symbols('black white grey')\n    \n    # Equation 1: Total rabbits\n    equation1 = Eq(black + white + grey, 59)\n    \n    # Equation 2: Black + White is 11 more than Grey\n    equation2 = Eq(black + white, grey + 11)\n    \n    # Equation 3: Black is 9 less than White\n    equation3 = Eq(black, white - 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruits = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruits * fraction_apples\n    num_pears = total_fruits - num_apples\n    return int(num_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # Given sequence is a geometric sequence with common ratio 2.\n    # The nth term of a geometric sequence can be found using the formula: a_n = a_1 * r^(n-1)\n    # Where a_1 is the first term and r is the common ratio.\n    \n    # First term (a_1) of the sequence is given as 1.\n    a_1 = 1\n    # Common ratio (r) is 2 since each term is double the previous term.\n    r = 2\n    # To find the 20th term: a_20 = a_1 * r^(20-1)\n    a_20 = a_1 * r**(20-1)\n    # To find the 17th term: a_17 = a_1 * r^(17-1)\n    a_17 = a_1 * r**(17-1)\n\n    # The result of the division of the 20th term by the 17th term is:\n    # a_20 / a_17 = (a_1 * r^(20-1)) / (a_1 * r^(17-1)) = r^(20-1-17+1) = r^3\n    # Simplify r^3 since r is 2: 2^3 = 8\n    ans = r**3\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_integers = 35\n    half_sum = sum_of_integers / 2\n\n    # Find the two numbers closest to half of the sum, these will offer the largest product\n    first_integer = int(half_sum)\n    second_integer = sum_of_integers - first_integer\n    \n    # Maximize the product by having the two numbers as close to each other as possible\n    largest_product = first_integer * second_integer\n\n    return largest_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_earnings_per_day = 70\n    days_worked = 6  # Monday to Saturday is 6 days\n\n    total_earnings = average_earnings_per_day * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    seconds = minutes * seconds_per_minute\n    return seconds\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Initial average for Alice, Becky, and Crystal\n    initial_average = 60\n    # Total books Alice, Becky, and Crystal have together\n    total_initial_books = initial_average * 3\n\n    # New average after counting Dennis\n    new_average = initial_average + 10\n    # Total books all of them have together now\n    total_final_books = new_average * 4\n\n    # Books that Dennis has\n    dennis_books = total_final_books - total_initial_books\n\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    height = 16\n    day_climb = 5\n    night_slide = 3\n    total_climbed = 0\n    day_count = 0\n\n    while total_climbed < height:\n        day_count += 1\n        total_climbed += day_climb\n        if total_climbed >= height:\n            break\n        total_climbed -= night_slide\n\n    return day_count\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    smallest_two_digit_prime = 11\n    largest_two_digit_square = 81  # 9^2 is the largest square in two digits\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1st_and_4th = 9\n    # Since flags are placed at a consistent distance, the distance between each flag (d) is 9m / (4 - 1)\n    distance_per_flag = distance_1st_and_4th / (4 - 1)\n    # The distance between the 1st and 9th flag is: (9 - 1) * distance_per_flag\n    distance_1st_and_9th = (9 - 1) * distance_per_flag\n    return distance_1st_and_9th\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n    \n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_height = (johns_height / ratio_john) * ratio_mike\n\n    return mikes_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7 * 0.01\n    tenths = 6 * 0.1\n    ones = 4 * 1\n    number = ones + tenths + hundredths\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_ship = 22\n    speed_current = 3\n    distance = 200\n\n    speed_downstream = speed_ship + speed_current\n    \n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n\n    # Equations based on the problem statement\n    equation1 = Eq((peaches - 10) / students_A, 5)\n    equation2 = Eq((peaches + 2) / students_B, 8)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n    # Calculate the ratio of cost_pen to cost_pencil.\n    pencils_per_pen = cost_pen / cost_pencil\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 36\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * points_correct + incorrect_answers * points_incorrect) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    planes = 2\n\n    ways = trains + buses + planes\n\n    return ways\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    return 9.95 - 2.6 - 3.412\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    ways_to_place_sketches = factorial(6)  # 6 positions to place 3 sketches (between 7 dances)\n    ways_to_arrange_dances = factorial(7)  # 7 dances can be arranged in any order\n    ways_to_arrange_sketches = factorial(3)  # 3 sketches can be arranged in any order\n    ans = ways_to_place_sketches * ways_to_arrange_dances * ways_to_arrange_sketches\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, Eq, solve, real_roots\n\n    # Assign symbol to unknown variable h\n    h = symbols('h')\n\n    # Set the equation for cube root calculation\n    # to find the value of h such that 28512/h is a cube number\n    equation = Eq(h ** (1/3), (28512) ** (1/3))\n\n    # Solve the equation for possible values of h\n    h_value = solve(equation, h)\n\n    # Since we need h to be an integer, and the cube root of 28512\n    # to still be an integer, we need to find the largest cube number\n    # that divides 28512\n    cube_root_h = 28512\n    for x in range(2, int(28512 ** (1/3)) + 1):\n        if (28512 % (x**3)) == 0:\n            cube_root_h = x**3\n            break\n\n    # Calculate the value of h that makes 28512/h a cube\n    ans = 28512 // cube_root_h\n\n    return ans\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart will always get 2 M&Ms of different colors if he picks more M&Ms than\n    # there are in the largest group plus one. This ensures that even if he picks\n    # all M&Ms of one color, the next one he picks must be of a different color.\n    largest_group = max(3, 4, 5)\n    ans = largest_group + 1\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # This problem is an example of derangement, also known as the \"hat-check problem\".\n    # Number of derangement of n objects, !n, is given by:\n    # !n = (n - 1) * (!(n - 1) + !(n - 2)) if n > 1, and !0 = 1, !1 = 0\n    \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n    \n    return derangement(7)\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    # For fathers: each father shakes hands with 9 other fathers, 9 mothers, and 9 children from other families.\n    # 3 members in each of the other 9 families = 27 handshakes per father.\n    handshakes_fathers = 10 * 27\n\n    # For mothers: each mother shakes hands with 9 fathers and 9 children from other families.\n    # Total 18 handshakes per mother.\n    handshakes_mothers = 10 * 18\n\n    # For children: each child shakes hands with 9 fathers and 9 mothers from other families.\n    # Total 18 handshakes per child.\n    handshakes_children = 10 * 18\n\n    # Add up all handshakes.\n    total_handshakes = handshakes_fathers + handshakes_mothers + handshakes_children\n\n    # Divide by 2 because each handshake is counted twice.\n    total_handshakes = total_handshakes // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Using the difference of two squares formula: a^2 - b^2 = (a - b)(a + b)\n    a = 31415926\n    b = 31415925\n    ans = (a - b) * (a + b)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n    \n    total_children = mark_position + helen_position_from_end + children_between\n    \n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits = 5  # There are 5 odd digits (1, 3, 5, 7, 9)\n    # Each of the three places can be filled by any of the odd digits\n    # Therefore, using the multiplication principle\n    total_numbers = odd_digits * odd_digits * odd_digits\n    return total_numbers\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    recurring_sequence = \"85274\"\n    position = 79\n    recurring_sequence_length = len(recurring_sequence)\n    \n    sequence_position = (position - 1) % recurring_sequence_length\n    ans = int(recurring_sequence[sequence_position])\n    \n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # We want to find the largest three-digit number x such that (x + 2009) is divisible by both 17 and 19\n    # First, find the least common multiple (LCM) of 17 and 19, since the number must be divisible by both.\n    lcm = 17 * 19  # Because 17 and 19 are prime, their LCM is their product\n    # Now we find the largest three-digit number that when 2009 is added is divisible by lcm\n    # Iterate downwards from the largest three-digit number (999)\n    for x in range(999, 99, -1):\n        if (x + 2009) % lcm == 0:\n            return x\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    bill = 82\n    hours = 40  # Free hours\n    \n    # Calculate the bill for hours over 40 and up to 50\n    if bill > 0:\n        for extra_hour in range(1, 11):\n            bill -= 5\n            hours += 1\n            if bill <= 0:\n                break\n    \n    # Calculate the bill for hours over 50 and up to 60\n    if bill > 0:\n        for extra_hour in range(1, 11):\n            bill -= 8\n            hours += 1\n            if bill <= 0:\n                break\n    \n    # Calculate the bill for hours over 60\n    if bill > 0:\n        hours += bill // 15\n    \n    return hours\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    given_sum = 1939\n    missing_page_number = total_sum - given_sum\n    return missing_page_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Since Jane needs to draw 4 different coloured marbles at minimum,\n    # in the worst case scenario, she could be drawing all the marbles of one color\n    # before moving on to the next color. To make sure we have 4 different colors,\n    # we take the maximum number of marbles in one color (not including\n    # the last color we need to draw), and add 1 for each subsequent color.\n\n    # Maximum number of marbles of one color, not including the last one we want to draw,\n    # is the sum of the three largest amounts.\n    max_marbles = sorted([4, 7, 6, 2], reverse=True)[:3]\n\n    # At least how many marbles she needs to draw to ensure that there are 4 different colored marbles\n    # can be calculated by adding one for each color (to switch to a new color), starting with the sum of\n    # the three maximum piles we previously calculated.\n    num_drawn = sum(max_marbles) + 1  # Adding 1 to account for the last color.\n\n    ans = num_drawn\n    return ans\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(0, 999):\n        if (i + (i + 1)) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a recursive function to calculate the number of ways to climb the stairs\n    def count_ways(steps_remaining, step_to_avoid):\n        if steps_remaining < 0:\n            return 0\n        elif steps_remaining == 0:\n            return 1\n        elif steps_remaining == step_to_avoid:\n            return 0\n        else:\n            return (count_ways(steps_remaining - 1, step_to_avoid) +\n                    count_ways(steps_remaining - 2, step_to_avoid) +\n                    count_ways(steps_remaining - 3, step_to_avoid))\n    \n    # Calculate ways to reach step 4 (as step 5 is muddy and cannot be stepped on)\n    ways_to_step4 = count_ways(4, 5)\n    # Calculate ways to go from step 6 to 10 (since step 5 is muddy)\n    ways_from_step6_to_10 = count_ways(4, -1)  # -1 represents that there is no step to avoid\n    \n    # Multiply the two segments for total combinations, avoiding the muddy step 5\n    total_ways = ways_to_step4 * ways_from_step6_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    daily_earnings = 60\n    days_in_a_week = 7\n    total_earnings = daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n    solution_x = solve(equation, x)\n\n    return solution_x[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    max_value = 85\n    for largest in range(max_value, 0, -2): \n        for second in range(1, largest, 2):   \n            for third in range(1, second, 2): \n                for fourth in range(1, third, 2):  \n                    for fifth in range(1, fourth, 2): \n                        if largest + second + third + fourth + fifth == max_value:\n                            return largest\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    tax_below_30k = T / 100 * 30000\n    tax_above_30k = (T + 3) / 100 * (income - 30000)\n    total_tax = tax_below_30k + tax_above_30k if income > 30000 else T / 100 * income\n\n    equation = Eq(total_tax, (T + 1) / 100 * income)\n\n    solutions = solve((equation), (income, T))\n\n    return [s[income] for s in solutions if s[income] > 0][0]\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest_to_one\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_in_still_water = 88\n    speed_of_current = 12\n    distance = 500\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the two unknowns\n    twenty_cent, fifty_cent = symbols('twenty_cent fifty_cent')\n    \n    # Equation 1: The total number of coins is twenty-one\n    equation1 = Eq(twenty_cent + fifty_cent, 21)\n    \n    # Equation 2: The total value of the coins is $6.30, or 630 cents\n    # We multiply the number of 20-cent coins by 20 and the number of 50-cent coins by 50\n    equation2 = Eq(20 * twenty_cent + 50 * fifty_cent, 630)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (twenty_cent, fifty_cent))\n    \n    # Get the number of 50-cent coins\n    return solutions[fifty_cent]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let s be the speed of Alan in meters per minute\n    # Since Phillip walks 15 meters more per minute than Alan, Phillip's speed is s + 15\n    # Alan takes 3 minutes more than Phillip to arrive at B, so Alan takes 12 + 3 = 15 minutes\n    # Using the formula distance = speed * time, we have:\n    # Distance from A to B for Phillip: (s + 15) * 12\n    # Distance from A to B for Alan: s * 15\n    # Since both distances are the same, we set them equal to each other and solve for s:\n    # (s + 15) * 12 = s * 15\n\n    # Solving the equation\n    from sympy import symbols, solve, Eq\n\n    s = symbols('s')\n    equation = Eq((s + 15) * 12, s * 15)\n    solution = solve(equation, s)\n\n    # Now that we have the speed of Alan, we can find the distance from A to B\n    distance = solution[0] * 15\n\n    return distance\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n\n    count = 0\n    num = \"2\"\n    \n    # We only check the first six numbers in the sequence as beyond that, the numbers will be too\n    # large to be perfect squares (as the number of digits would be odd).\n    for i in range(6):\n        if math.sqrt(int(num)).is_integer():\n            count += 1\n        num += \"5\"\n    \n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    # Let x be the original amount of money Alice had.\n    # According to the problem, after Alice spent $36, she had $25.40 less than Tom.\n    # So, (x - 36) = 68.10 - 25.40\n    # Solve for x to find the original amount of money Alice had.\n\n    tom_money = 68.10\n    amount_spent_by_alice = 36\n    difference_after_spending = 25.40\n    alice_money_after_spending = tom_money - difference_after_spending\n\n    original_alice_money = alice_money_after_spending + amount_spent_by_alice\n\n    return original_alice_money\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    # Calculate the total sum of the first set of numbers\n    total_sum_first_set = 5 * 28\n    # Calculate the total sum of the second set of numbers\n    total_sum_second_set = 12 * 11\n    # Total number of numbers\n    total_numbers = 5 + 12\n    # Calculate the mean of all numbers \n    mean_total = (total_sum_first_set + total_sum_second_set) / total_numbers\n    \n    return mean_total\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_gaps = 9 - 1 # Since there are 9 benches, there will be 8 gaps between them\n    \n    total_length_of_gaps = distance_between_benches * number_of_gaps\n    total_length_of_benches = total_distance - total_length_of_gaps\n\n    bench_length = total_length_of_benches / 9\n\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, classA, classB = symbols('candies classA classB')\n    equation1 = Eq(classA, 2 * classB)  # class A has twice the number of students as class B\n    equation2 = Eq(4*classA - candies, -20)  # Giving 4 candies/student in class A needs 20 more candies\n    equation3 = Eq(6*classB - candies, 16)  # Giving 6 candies/student in class B leaves 16 candies\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (candies, classA, classB))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cuts = 21\n    regeneration = 5\n    original_arms = total_cuts\n\n    # For each regeneration cycle, we add the regeneration number minus one.\n    # Because after 4 cuts the 5th triggers a regeneration, adding only 4 to the original count.\n    while total_cuts > 0:\n        if total_cuts >= regeneration:\n            original_arms += regeneration - 1\n        total_cuts -= regeneration\n        \n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # Sum of three greatest numbers (including the third greatest which is 246)\n    # The first two numbers must be at least one unit greater than 246, so 247 and 248.\n    sum_of_three_greatest = 246 + 247 + 248\n\n    # The remaining seven numbers must be at least 1, 2, ..., 7 to be distinct whole numbers.\n    sum_of_seven_smallest = sum(range(1, 8))\n\n    # Substract the sums from 2021 to get the minimum possible value for the fourth greatest number.\n    min_fourth_greatest = 2021 - (sum_of_three_greatest + sum_of_seven_smallest)\n\n    return min_fourth_greatest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # You could take all 6 coins of one color before getting a coin of a different color\n    # Therefore, after taking 7 coins, you are guaranteed to have at least 2 coins of different colors\n    ans = 6 + 1\n    return ans\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Calculate the distance between each adjacent tree\n    distance_per_interval = 20 / (5 - 1)\n    \n    # Calculate the number of intervals between the 8th and the 14th tree\n    intervals = (14 - 8)\n\n    # Calculate the total distance\n    total_distance = intervals * distance_per_interval\n    \n    return total_distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    ans = 0\n    for i in range(1, 25):\n        if i % 2 != 0 and i % 3 != 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n\n    distance = (speed_m_per_min / 60) * time_seconds\n\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age = symbols('grey_age father_age')\n    equation1 = Eq(father_age, grey_age*3)\n    equation2 = Eq(father_age - grey_age, 30)\n    solutions = solve((equation1, equation2), (grey_age, father_age))\n    \n    return solutions[father_age]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        ""
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    result = 10 * (numerator / denominator)\n    return result\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n    \n    # Using the Pigeonhole Principle, we divide the books among the layers.\n    # By the Pigeonhole Principle, at least one layer (pigeonhole) must have at least\n    # ceil(total_books / total_layers) books.\n    least_books_on_most_layer = -(-total_books // total_layers)\n    \n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    \n    # Calculate number of rows using the formula: n = (last_term - first_term) / difference + 1\n    num_rows = (last_term - first_term) / difference + 1\n    \n    # Calculate sum of arithmetic sequence using the formula: \n    # sum = n/2 * (first_term + last_term)\n    total_seats = num_rows / 2 * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)  # Permute the three available digits\n    return len(list(perm))  # Count the number of permutations\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 3):  # 0 cannot be in the hundreds place, 1 or 2 only\n        for tens in range(0, 3):\n            for ones in range(0, 3):\n                if len(set([hundreds, tens, ones])) == 3:\n                    # All digits are different\n                    count += 1\n                elif len(set([hundreds, tens, ones])) == 2 and 0 in [tens, ones]:\n                    # Only two digits are different, and one of the digits can be 0\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    num_cows = 523\n    num_pigs = 172\n    difference = num_cows - num_pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3*5*7\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divider = quotient + 1  # Since we're looking for the smallest dividend, we start with the smallest possible divider greater than the quotient\n    dividend = quotient * divider + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let's define y as a symbol\n    y = symbols('y')\n\n    # Hazel's age in three years\n    hazel_age_in_3_years = y\n    \n    # Jessica is 3 years younger than Hazel\n    jessica_age_in_3_years = y - 3\n    \n    # Hazel's age next year\n    hazel_age_next_year = hazel_age_in_3_years - 2\n    \n    # Jessica's age next year\n    jessica_age_next_year = jessica_age_in_3_years - 2\n    \n    # Total age next year\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total number of animals originally be 'total'\n    # Let the number of goats originally be 'goats'\n    total, goats = symbols('total goats', real=True, positive=True)\n    \n    # Equation 1: Cows were 65% of the original total\n    cows = 0.65 * total\n    \n    # Equation 2: The rest were goats\n    equation1 = Eq(goats, total - cows)\n    \n    # Equation 3: When 240 animals are added, the cows become 85% (65% + 20%) of the new total (original + 240)\n    equation2 = Eq(cows + 240, 0.85 * (total + 240))\n    \n    # Equation 4: Goats doubled after adding 240, so goats + 240 = 2 * goats\n    equation3 = Eq(goats + 240, 2 * goats)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total, goats))\n    \n    # Return the number of goats originally\n    return solutions[goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to cm\n    section_1 = 30  # already in cm\n    section_2 = 1.5 * 100  # convert from m to cm\n    section_3 = 150 / 10  # convert from mm to cm\n    \n    # Sum the widths of all sections\n    total_width = section_1 + section_2 + section_3\n    \n    return total_width\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    # Let's denote Melanie's age as M and her uncle's age as U.\n    M = 8\n\n    # The difference in age between Melanie and her uncle will stay constant over the years.\n    # So, when Melanie reaches the age of her uncle, the uncle will be 38 years old.\n    # At that time, the age difference will remain the same as it is now.\n\n    # We can form an equation: U - M = 38 - U\n    # Then we solve for her uncle's age U.\n    U = (38 + M) / 2\n\n    return U\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pounds = 3.00 * 100\n    percentage = (15 / pence_in_pounds) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if (i % 4 == 0 and not i % 6 == 0) or (not i % 4 == 0 and i % 6 == 0):\n            # skip if i is a multiple of 4 or 6, but not both\n            continue\n        count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    \n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    n = (5 - 3) // 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    return 18 + 3 - 8 + 17\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    total = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    ans = total\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sisters_age_3_years_later = amy_age_5_years_ago\n    sisters_age_now = sisters_age_3_years_later - 3\n\n    return sisters_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 possible ranks for the cards (1, 2, ..., 10, J, Q, K)\n    ranks = 13\n\n    # Use the Pigeonhole Principle: since there are 4 suits,\n    # you need to pick one more than the number of possibilities\n    # (ranks * number of suits) to ensure at least two have the same rank.\n    ans = ranks * 4 + 1\n    \n    return ans\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 21 and i % 2 == 0:\n            return i\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 21):\n        for j in range(i+1, 21):\n            total_sum += (i/j)\n    return total_sum\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_value = 18\n    fraction = 3/5\n    whole_amount = part_value / fraction\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_spent = 156\n    price_cactus = 2\n    price_sunflower = 7\n\n    for num_sunflowers in range(total_spent):\n        num_cacti = num_sunflowers + 6\n        if price_cactus * num_cacti + price_sunflower * num_sunflowers == total_spent:\n            return num_cacti\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price = symbols('book_price')\n    pencil_price = 40  # pence, which is equal to 0.4 pounds\n    \n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * pencil_price * 0.01  # converting pence to pounds\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * pencil_price * 0.01  # converting pence to pounds\n    \n    # Equation: Sarah paid 1 pound more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1)\n    \n    # Solve the equation to find the book price\n    book_price_solution = solve(equation, book_price)\n    \n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    sum_even_squares = sum([i**2 for i in range(2, 21, 2)])\n    sum_odd_squares = sum([i**2 for i in range(1, 20, 2)])\n    ans = sum_even_squares - sum_odd_squares\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_capacity = 2\n    num_jugs = 6\n\n    water_used = jug_capacity * num_jugs\n    water_left = total_water - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    L, M = symbols('L M')  # L for Liverpool fans, M for Manchester United fans\n\n    # Equation 1: Initially there are 1000 more Liverpool fans than Manchester fans\n    equation1 = Eq(L, M + 1000)\n\n    # Equation 2: After 472 Liverpool fans and 4836 Manchester fans enter,\n    # Manchester fans is 3 times that of the Liverpool fans\n    equation2 = Eq(M + 4836, 3 * (L + 472))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Create equations based on the given problem\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1)\n\n    # Solve the equation for the book_price\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_additional_points = 18\n    jack_points = andrew_points + jack_additional_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    ans = comb(total_players, players_needed)\n    return ans\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    andy_final = 3 + 2  # 3 dollars left after giving 2 dollars to Mike\n    andy_before_nini = andy_final * 2\n    andy_before_bob = andy_before_nini * 2\n    andy_original = andy_before_bob * 2\n    return andy_original\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of peaches be p, \n    # the number of students in class A be a,\n    # and the number of students in class B be b.\n    p, a, b = symbols('p a b')\n\n    # Each student in class A can get 5 peaches, with 10 left over\n    equation1 = Eq(5 * a + 10, p)\n\n    # Class B needs 2 more peaches for each student to get 8 peaches\n    equation2 = Eq(8 * b - 2, p)\n\n    # Class A has 3 more students than Class B\n    equation3 = Eq(a, b + 3)\n\n    # Solve the system of equations for the number of peaches p\n    solutions = solve((equation1, equation2, equation3), (p, a, b))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    # Initialize variables\n    current_number = 1\n    digit_count = 0\n    \n    # Until we reach the 2023rd digit\n    while digit_count < 2023:\n        # Convert current number to a string to count digits\n        number_str = str(current_number)\n        # Increase the total digit count by the number of digits\n        # in the current number\n        digit_count += len(number_str)\n        # If we've reached or exceeded the target count\n        if digit_count >= 2023:\n            # Calculate the index of the digit we want in the current\n            # number string\n            target_digit_index = 2023 - (digit_count - len(number_str)) - 1\n            # Return the target digit\n            return int(number_str[target_digit_index])\n        # Move on to the next number\n        current_number += 1\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    # Calculate age on 31/12/98 which is a day before 11th birthday\n    age_on_981231 = 11 - 1\n\n    # Calculate the age on 31/12/01 by adding the years passed from 98 to 01\n    years_passed = 2001 - 1998\n    age_on_011231 = age_on_981231 + years_passed\n\n    return age_on_011231\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    odd_numbers = []\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    t_shirts, caps = symbols('t_shirts caps')\n\n    # The ratio of the number of T-shirts to caps is 8:5\n    ratio_equation = Eq(8 * caps, 5 * t_shirts)\n\n    # The cost of each T-shirt is $3 and each cap is $5\n    # Siti sold 1/4 of T-shirts and 1/5 of caps\n    sales_equation = Eq((1/4) * t_shirts * 3 + (1/5) * caps * 5, 132)\n\n    # Solve the two equations\n    solutions = solve((ratio_equation, sales_equation), (t_shirts, caps))\n\n    # Solution is the number of T-shirts\n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    capacity = 6\n    trips = (students + capacity - 1) // capacity\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    target_term = 36\n\n    ordinal_number = (target_term - first_term) // difference + 1\n    \n    return ordinal_number\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe, eric = symbols('joe eric')\n    # Joe has 7 times as many game cards as Eric\n    equation1 = Eq(joe, 7 * eric)\n\n    # Joe gives x cards to Eric\n    x = symbols('x')\n    \n    # After giving x cards, both will have 168 cards each\n    equation2 = Eq(joe - x, 168)\n    equation3 = Eq(eric + x, 168)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (joe, eric, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = 10 * tens_digit + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    caught_initially = 8\n    ran_away = 5\n    caught_after_search = 9\n    total_caught = (caught_initially - ran_away) + caught_after_search\n    return total_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n    num_pictures = total_time / time_for_one_picture\n    return num_pictures\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # Given that 6 is directly opposite to 19,\n    # The difference between these two numbers' positions gives us half the total number of people in the circle.\n    half_circle = 19 - 6\n    # Therefore, the total number of people is twice the \"half-circle\"\n    total_people = 2 * half_circle\n    \n    return total_people\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    # There are 5 students.\n    num_students = 5\n\n    # The number of ways to arrange n items in sequence is n! (factorial of n).\n    ans = factorial(num_students)\n\n    return ans\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    for anne_pears in range(1, total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    ans = amy_swims - joanne_swims\n    return ans\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # There are 10 apples and two distinct groups. Since the two groups must contain a different number of apples,\n    # the first group can have anywhere from 1 to 9 apples (since giving all of them to one group would mean the\n    # other has 0, making them not different). For each amount given to the first group, the second group receives\n    # the remaining apples, making this a unique split. Therefore, the total number of ways she can split the apples\n    # is the number of possibilities for the first group, which would be 9 (from 1 to 9).\n    \n    return 9\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the digits a, b, c, d\n    a, b, c, d = symbols('a b c d')\n\n    # Construct the equation\n    equation = Eq((1000 * a + 100 * b + 10 * c + d) + (100 * a + 10 * b + c) + (10 * a + b) + a, 1370)\n\n    # Solve the equation\n    sol = solve(equation, (a, b, c, d))\n\n    # Find the value of abcd\n    abcd = sol[a] * 1000 + sol[b] * 100 + sol[c] * 10 + sol[d]\n\n    return abcd\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    \n    original_condition = Eq(isaac, 5 * joseph)\n    after_condition = Eq(joseph + 154, 9/10 * isaac)\n    \n    solutions = solve((original_condition, after_condition), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    factorial_29 = factorial(29)\n    ans = count_trailing_zeros(factorial_29)\n\n    return ans\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    base8_number = '12345654321'\n    n = int(base8_number, 8)  # Convert the base 8 number to a base 10 integer\n    remainder_sum = n % 7 + n % 9\n    return remainder_sum\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    def sum_of_digits(year):\n        return sum(int(d) for d in str(year))\n    \n    count = 0\n    for year in range(2018, 2109):\n        if sum_of_digits(year) == 18:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2018 * 10 + A) % 9 == 0:\n            return (2018 * 10 + A) % 8\n    return None\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be L meters.\n    # When Linda has jogged 1200m, Ted has jogged (L - 1200)m.\n    # Linda's speed is 3k and Ted's speed is 4k for some constant k.\n    # Since they meet at the same time, the ratio of distances jogged by Linda to Ted should be equal to the ratio of their speeds.\n    # Therefore, 1200 : (L - 1200) = 3 : 4\n\n    # Cross multiply to find L\n    # 4 * 1200 = 3 * (L - 1200)\n    # 4800 = 3L - 3600\n    # 3L = 8400\n    # L = 2800\n    ans = 2800\n    return ans\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This problem is known as the derangement problem or the hat-check problem.\n    # The number of derangements of n items is sometimes denoted as !n, subfactorial of n, or n¡.\n    # It can be calculated using the formula !n = (n - 1) * (!(n - 1) + !(n - 2))\n    # The first few values are: !1 = 0, !2 = 1, and we can calculate subsequent values using the formula.\n    def subfactorial(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600  # starting amount\n    rate = 0.02       # interest rate of 2% per year\n\n    interest = principal * rate  # interest after one year\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n\n    result = (percentage / 100) * total_weight\n\n    return result\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Squirrel Ryan is in front of Squirrel Elvis, with 1 squirrel between them.\n    \n    # This means that the total number of squirrels will be:\n    # Number of squirrels in front of Ryan + Ryan himself + 1 squirrel between them\n    # + Elvis himself + Number of squirrels behind Elvis\n    \n    # Ryan says that there are 5 squirrels in front of him\n    in_front_of_ryan = 5\n    \n    # Elvis says that there are 7 squirrels behind him\n    behind_elvis = 7\n\n    # Adding 1 for Ryan, 1 for the squirrel between them, and 1 for Elvis\n    squirrels_between_ryan_and_elvis = 1 + 1 + 1\n    \n    # Hence, the total number of squirrels is:\n    total_squirrels = in_front_of_ryan + squirrels_between_ryan_and_elvis + behind_elvis\n    \n    return total_squirrels\n    \nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    total_amount = 45\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    total_sum = sum(range(1, 20, 2))\n    return total_sum\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pupils in School P\n    # Let y be the number of pupils in School Q\n    x, y = symbols('x y')\n\n    # Initial condition (The ratio of the pupils in School P and School Q is 2:3)\n    equation1 = Eq(x/y, 2/3)\n    \n    # After admitting 240 Primary one pupils (The ratio became 3:4)\n    equation2 = Eq((x + 240)/(y + 240), 3/4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack_age = symbols('jack_age')\n\n    equation = Eq(jack_age - 5, (jack_age + 8) / 2)\n    \n    solved_age = solve(equation, jack_age)\n\n    return solved_age[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    spent_on_bag_percentage = 70\n    spent_on_purse_fraction = 3 / 8\n\n    remaining_after_bag = 100 - spent_on_bag_percentage\n    spent_on_purse_percentage = spent_on_purse_fraction * remaining_after_bag\n\n    return spent_on_purse_percentage\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12\n    new_total_students = 6\n    candies_each = total_candies // new_total_students\n\n    return candies_each\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of straws used by each child\n    kenny, timmy, ron = symbols('kenny timmy ron')\n    \n    # Create the equations based on the problem description\n    equation1 = Eq(timmy, kenny - 12)  # Timmy used 12 fewer straws than Kenny\n    equation2 = Eq(ron, kenny + 20)    # Ron used 20 more straws than Kenny\n    equation3 = Eq(kenny + timmy + ron, 284)  # Altogether they used 284 straws\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    # Return the number of straws Ron used\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Total number of ways to arrange the letters in the word 'EDUCATION'\n    total_ways = factorial(len('EDUCATION'))\n\n    # Total number of ways to arrange the vowels 'EUAIO'\n    vowel_ways = factorial(len('EUAIO'))\n\n    # We have 6 consonants (including 'Y'). We can place the vowels in the gaps between the consonants\n    # Therefore, we have 7 gaps (before D, between D and C, C and T, T and N, and after N)\n    vowel_positions = 7\n\n    # Total number of ways to arrange the vowels together\n    vowels_together = vowel_positions * vowel_ways\n\n    # Subtracting the number of ways having vowels together from the total number of arrangements\n    ans = total_ways - vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.3 * x + 0.7 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Initial count of sweets Sharon can buy\n    sweets = 11\n    \n    # Count of wrappers Sharon currently has\n    wrappers = 11\n    \n    # Keep exchanging wrappers for sweets until not enough wrappers left\n    while wrappers >= 3:\n        # Exchange wrappers for sweets\n        new_sweets = wrappers // 3\n        sweets += new_sweets\n        \n        # Calculate leftover wrappers and add new wrappers from the new sweets\n        wrappers = wrappers % 3 + new_sweets\n    \n    return sweets\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Since BP and CP are angle bisectors, they divide the angles in half.\n    # Let m<ABP = x and m<ACP = y\n    # Because it is a triangle, the sum of the angles in triangle ABC is 180 degrees.\n    # Therefore, m<ABC = 2 * x and m<ACB = 2 * y\n    # We know that m<BAC = 50 degrees, thus we can describe the sum of angles in triangle ABC as:\n    # 50 + 2 * x + 2 * y = 180 which simplifies to x + y = 65\n    # m<BPC is obtained by summing m<ABP + m<ACP\n    # which translates to x + y\n\n    x_plus_y = 65  # From our previous conclusion\n    return x_plus_y * 2  # m<BPC is the sum of the two angles, doubled\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    arrival_hour = 11\n    arrival_minute = 40\n    duration_hours = 4\n    duration_minutes = 50\n\n    leave_hour = arrival_hour + duration_hours\n    leave_minute = arrival_minute + duration_minutes\n\n    if leave_minute >= 60:\n        leave_hour += leave_minute // 60\n        leave_minute = leave_minute % 60\n    \n    if leave_hour >= 24:\n        leave_hour -= 24\n\n    return (leave_hour, leave_minute)\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Total weight of sweets in grams\n    total_weight_g = 5000 # kg to g\n    # Weight of sweets per bag in grams\n    weight_per_bag_g = 250\n    # Cost of all sweets\n    total_cost_pounds = 10\n    # Price of each bag sold in pence\n    selling_price_per_bag_pence = 65\n    \n    # Convert total cost from pounds to pence\n    total_cost_pence = total_cost_pounds * 100\n\n    # Calculate the number of bags\n    number_of_bags = total_weight_g / weight_per_bag_g\n\n    # Calculate total revenue from selling all bags\n    total_revenue_pence = number_of_bags * selling_price_per_bag_pence\n\n    # Calculate profit in pence\n    profit_pence = total_revenue_pence - total_cost_pence\n    \n    # Convert profit to pounds\n    profit_pounds = profit_pence / 100\n\n    # Calculate percentage profit\n    percentage_profit = (profit_pounds / total_cost_pounds) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 3\n    denominator_initial = 20\n    multiplier = 15 // numerator\n\n    denominator_final = denominator_initial / multiplier\n    \n    return int(denominator_final)\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    difference = (fifteenth_number - tenth_number) / (15 - 10)\n    twelfth_number = tenth_number + 2 * difference\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Ways from Ayton to Beeton\n    Ayton_Beeton = 4\n    # Ways from Beeton to Ceeton\n    Beeton_Ceeton = 5\n    # Ways from Ceeton to Deeton\n    Ceeton_Deeton = 6\n    # Ways directly from Ayton to Deeton\n    Ayton_Deeton = 3\n    \n    # Ways from Ayton to Deeton via Beeton and Ceeton (multiplication principle)\n    Ayton_Beeton_Ceeton_Deeton = Ayton_Beeton * Beeton_Ceeton * Ceeton_Deeton\n    \n    # Total different ways (addition principle)\n    total_ways = Ayton_Beeton_Ceeton_Deeton + Ayton_Deeton\n    \n    return total_ways\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of each type of bird\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed', integer=True)\n\n    # Equations based on given information\n    # The number of two-tail birds is 5 more than twice as many as the number of eight-tail birds\n    eq1 = Eq(two_tailed, 2 * eight_tailed + 5)\n    # The number of three-tail birds is 2 more than half the number of six-tailed birds\n    eq2 = Eq(three_tailed, six_tailed / 2 + 2)\n    # The total number of tails is 2 less than four times as many as the total number of heads: \n    # 2*(two_tailed) + 3*(three_tailed) + 6*(six_tailed) + 8*(eight_tailed) = 4*(two_tailed + three_tailed + six_tailed + 2*eight_tailed) - 2\n    eq3 = Eq(2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed, 4*(two_tailed + three_tailed + six_tailed + 2*eight_tailed) - 2)\n    # The difference between the total number of their heads and their tails is 241:\n    # (two_tailed + three_tailed + six_tailed + 2*eight_tailed) - (2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed) = 241\n    eq4 = Eq(two_tailed + three_tailed + six_tailed + 2*eight_tailed - (2*two_tailed + 3*three_tailed + 6*six_tailed + 8*eight_tailed), 241)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        # Count how many times a number is underlined (multiple of 2, 3, or 4)\n        underline_count = (number % 2 == 0) + (number % 3 == 0) + (number % 4 == 0)\n        if underline_count == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally = 3.75\n    joe = symbols('joe')\n    total_spent = 2 * 2.50  # Both spent $2.50 each\n\n    # Setting up the equation: Sally's remaining money + Joe's remaining money = total remaining money\n    equation = Eq((sally - 2.50) + (joe - 2.50), 5)\n\n    # Solving the equation to find out how much money Joe had initially\n    joe_initial = solve(equation, joe)\n\n    return joe_initial[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n\n    total_trees_first_3_days = first_3_days_avg * 3\n    total_trees_last_5_days = last_5_days_avg * 5\n    \n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n    total_days = 8\n    \n    average_trees = total_trees / total_days\n    \n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculate the number of ways to choose 2 different lunch options\n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetable = comb(salads, 1) * comb(vegetables, 1)\n    salad_sandwich = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetable = comb(soups, 1) * comb(vegetables, 1)\n    soup_sandwich = comb(soups, 1) * comb(sandwiches, 1)\n    vegetable_sandwich = comb(vegetables, 1) * comb(sandwiches, 1)\n\n    # Total number of ways to combine two different options\n    total_combinations = salad_soup + salad_vegetable + salad_sandwich + soup_vegetable + soup_sandwich + vegetable_sandwich\n\n    return total_combinations\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Since the number is even, the ones digit must be even\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the magic number\n    magic_number = symbols('magic_number')\n\n    # Create equations based on the problem statement\n    equation = Eq((202 + magic_number), 6 * (22 + magic_number))\n\n    # Solve the equation\n    solution = solve(equation, magic_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n    layer = 0\n\n    while True:\n        boys = (layer * 4 + 1) ** 2 - (layer * 4 - 1) ** 2 if layer > 0 else 1\n        girls = (layer * 4 + 3) ** 2 - (layer * 4 + 1) ** 2\n        total_students += boys + girls\n        if boys - girls == boys_more_than_girls:\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all numbers are prime\n        if all(isprime(n + i) for i in [0, 2, 4, 106, 308]):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the mass of strawberries at first\n    s = symbols('s')\n    \n    # Let m be the mass of mangoes at first\n    # So, m = s + 448 (since there were 448g more mangoes than strawberries)\n    m = s + 448\n\n    # After 900g of mangoes were given away, the mass of mangoes becomes m - 900\n    # At this point, the mass of strawberries is twice as much as the mass of mangoes\n    # Which gives us the equation s = 2 * (m - 900)\n\n    equation = Eq(s, 2 * (m - 900))\n\n    # Solve the equation for the mass of strawberries\n    mass_of_strawberries = solve(equation, s)\n\n    return mass_of_strawberries[0]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    items = symbols('items')\n    apples = 2/3 * items\n    bananas = 1/9 * items\n    lemons = items - apples - bananas\n    equation = Eq(apples, lemons + 12)\n    \n    items_count = solve(equation, items)\n    \n    lem = items_count[0] - 2/3*items_count[0] - 1/9*items_count[0]\n    return lem\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let m represent the original amount of money Max had, and a represent the original amount of money Anthony had.\n    m, a = symbols('m a')\n\n    # If Max bought the chocolates, he would have spent $12, so he would have m - 12 left.\n    # Anthony would still have a left. The ratio of their remaining money is 2:5.\n    eq1 = Eq((m - 12) / a, 2/5)\n\n    # If Anthony bought the chocolates, he would have spent $12, so he would have a - 12 left.\n    # Max would still have m left. The ratio of their remaining money is 8:13.\n    eq2 = Eq(m / (a - 12), 8/13)\n\n    # We solve the system of equations.\n    solutions = solve((eq1, eq2), (m, a))\n\n    # We return the value of m, which represents the original amount of money Max had.\n    return solutions[m]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let r represent the original number of red stickers\n    # and b represent the original number of blue stickers\n    # Given r = b (initially she had the same number of each)\n    r, b = symbols('r b')\n    \n    # Liz gave away 2/3 of her red stickers, so she is left with 1/3 of her red stickers\n    red_left = r * (1 - 2/3)\n    \n    # She was left with 1/4 of her total stickers in the end\n    total_left = (r + b) / 4\n\n    # As she has equal number initially and gave 1-2/3 of red stickers left,\n    # 1/4 th of total is equal to left over of red plus some blue stickers left.\n    equation = Eq(red_left + b, total_left)\n\n    # Solve the equation to find the original number of blue stickers she had\n    solution = solve((equation, Eq(r, b)), (r, b))\n    \n    # She has 1/3 of her red stickers and 1/4 of total stickers left\n    # So, blue stickers left are (1/4 total - 1/3 red)\n    blue_left = solution[r] / 4 - (1/3 * solution[r])\n    \n    # Initially she had equal numbers of red and blue stickers which equals solution[r]\n    # Fraction of blue stickers she gave away is (initial blue stickers - blue left) / initial blue stickers\n    blue_given_away_frac = (solution[r] - blue_left) / solution[r]\n    \n    return blue_given_away_frac.evalf()\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # Using stars and bars method subtracting the combinations when at least one kid gets no pen.\n    total_ways = combinations(20 - 1, 6 - 1)\n    \n    return total_ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    pattern = [base_unit_digit]\n\n    # Generate cyclic pattern of unit digits for powers of 4\n    while True:\n        next_digit = (base_unit_digit * pattern[-1]) % 10\n        if next_digit == pattern[0]:\n            break\n        pattern.append(next_digit)\n\n    # Find the index corresponding to the power 2022 in the cyclic pattern\n    index = (2022 % len(pattern)) - 1\n\n    # Get unit digit for 444^2022, which is the same as 4^2022\n    ans = pattern[index]\n\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # The smallest possible number of marbles in the biggest pile\n    # can be determined by ensuring that the other piles have the smallest amount of marbles.\n    # That is, we start by giving 1 marble to the first pile, 2 to the second, and so on,\n    # until we reach the last pile, which will have the remaining marbles.\n    \n    # Start the piles with 1, 2, and 3 marbles respectively\n    pile1 = 1\n    pile2 = 2\n    pile3 = 3\n    \n    # Calculate the remaining marbles for the last pile\n    total_marbles = 16\n    pile4 = total_marbles - (pile1 + pile2 + pile3)\n    \n    return pile4\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # convert all measurements to millimetres\n    measurements_mm = [\n        10,             # 10 millimetres\n        100 * 10,       # 100 centimetres\n        10 * 1000,      # 10 metres\n        2 * 10**6,      # 2 kilometres\n        2800 * 10,      # 2800 centimetres\n        2500 * 1000,    # 2500 metres\n        100,            # 100 millimetres\n        100 * 1000      # 100 metres\n    ]\n    \n    # Find the smallest length\n    smallest_length = min(measurements_mm)\n    \n    return smallest_length\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    daily_increase = 4\n\n    # Calculate the number of days it took to finish the book using the arithmetic sequence formula:\n    # last_day_pages = first_day_pages + (num_days - 1) * daily_increase\n    num_days = ((last_day_pages - first_day_pages) / daily_increase) + 1\n\n    # Now calculate the total number of pages using the sum formula for an arithmetic sequence:\n    # total_pages = num_days / 2 * (first_day_pages + last_day_pages)\n    total_pages = num_days / 2 * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # There are 5 choices for the first digit (cannot be '0' and it has to be odd, so only 1, 3, or 5)\n    # There are 5 choices remaining for the second digit (since one digit has been used already)\n    # There are 4 choices for the third digit (since two digits have been used already)\n    # Thus we use the multiplication principle to find the total number of combinations\n    count = 3 * 5 * 4\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    can_swim = 20\n    can_play_basketball = 25\n    can_both = 10\n    can_neither = 9\n    \n    total_students = (can_swim + can_play_basketball - can_both) + can_neither\n    \n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, (2/3) * B)\n    equation2 = Eq(B, (4/5) * C)\n    equation3 = Eq(C - A, 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201 + 1):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let's assume the number of cows is x and the number of ducks is y.\n    # We know that:\n    # x + y = 25 (because there are 25 cows and ducks in total)\n    # 4x + 2y = 68 (because cows have 4 legs and ducks have 2)\n    # We can solve this system of equations for x and y.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the number of cows, y is the number of ducks\n    equation1 = Eq(x + y, 25)\n    equation2 = Eq(4*x + 2*y, 68)\n\n    solutions = solve((equation1, equation2), (x, y))\n    ducks = solutions[y]\n\n    return ducks\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # We will use the inductive formula for maximum number of regions created with n lines (or planes for triangles):\n    # R(n) = R(n-1) + n, where R(1) = 2 (a single line divides the plane into 2 regions)\n    \n    # For triangles, each side can be considered as a line, hence for n triangles we have a maximum of 3n lines\n    # We initialize our variables, with R(1) being 2 and n being 0 (no triangles yet)\n    regions = 2\n    n = 0\n    \n    # We loop through each side of the triangles, adding the new regions created by the nth line\n    # Which follows the formula: regions = regions + n\n    for i in range(1, 3*5 + 1):  # 3*5 sides for 5 triangles\n        regions += i\n    \n    return regions\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    # Let's denote the number of girls as 'g' and the number of boys as 'b'.\n    # From the problem statement, we have two equations:\n    # g + b = 70 (total number of students)\n    # 70*g + 63*b = 66*70 (total marks of girls and boys)\n    \n    # Let 'g' be the number of girls\n    g = symbols('g')\n    \n    # We know the total number of students\n    b = 70 - g\n    \n    # Write down the equation relating the average scores\n    equation = Eq(70*g + 63*b, 66*70)\n    \n    # Solve the equation for the number of girls 'g'\n    solutions = solve(equation, g)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    # Let's denote:\n    #   total_avg - the average height of the group (children)\n    #   girls_avg - the average height of the girls\n    #   boys_avg - the average height of the boys\n    # The number of girls (num_girls) is 11 and the number of boys (num_boys) is 5\n    # We know from the problem:\n    #   total_avg = 122.5\n    #   girls_avg = boys_avg + 3.2\n    #   total_avg = (num_girls * girls_avg + num_boys * boys_avg) / (num_girls + num_boys)\n    # We need to find girls_avg, which is the average height of the girls\n    \n    total_avg = 122.5  # Average height of the group\n    num_girls = 11     # Number of girls\n    num_boys = 5       # Number of boys\n    \n    # Rearrange the equation to express boys_avg in terms of total_avg and girls_avg:\n    # boys_avg = (total_avg * (num_girls + num_boys) - num_girls * girls_avg) / num_boys\n    \n    # Now we substitute boys_avg from above into girls_avg = boys_avg + 3.2 to get:\n    # girls_avg = ((total_avg * (num_girls + num_boys) - num_girls * girls_avg) / num_boys) + 3.2\n    \n    # After simplifying, we get:\n    # girls_avg * (num_girls + num_boys / num_boys) = total_avg * (num_girls + num_boys) / num_boys + 3.2\n    # We now solve for girls_avg:\n    \n    girls_avg = (total_avg*(num_girls + num_boys) + 3.2*num_boys) / (num_girls + num_boys/num_boys)\n    \n    return girls_avg\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Arithmetic sequence sum formula S = n/2 * (a1 + an)\n    # For 9 consecutive odd numbers with sum 1503:\n    # 1503 = 9/2 * (a1 + a9)\n    # The sequence has a constant difference of 2 between each term since they are odd numbers.\n    # Since they are consecutive and there are 9 numbers, a9 = a1 + 2*(9-1)\n    # Substitute a9 into the sum formula:\n    # 1503 = 9/2 * (a1 + (a1 + 2*(9-1)))\n    # Solve for a1:\n    n = 9\n    total_sum = 1503\n    a1 = (total_sum - n * (n-1)) / n\n    return int(a1)\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    n1 = 32\n    n2 = 108\n    term_n1 = 157\n    term_n2 = 537\n\n    common_difference = (term_n2 - term_n1) / (n2 - n1)\n\n    first_term = term_n1 - (n1 - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, solve\n\n    donna_initial_candies = symbols('x')\n\n    donna_kept = donna_initial_candies / 2 + 3\n    jane_received = donna_initial_candies - donna_kept\n\n    jane_ate = jane_received / 3 + 4\n    kate_received = jane_received - jane_ate\n\n    kate_ate = kate_received / 4\n    kate_left = kate_received - kate_ate\n\n    equation = kate_left - 42\n\n    ans = solve(equation, donna_initial_candies)\n\n    return ans[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Number of possible receivers from A in the first pass (B, C, or D)\n    first_pass_options = 3\n    \n    # After the first pass, the next person has two options to pass (excluding A and the passer)\n    second_pass_options = 2\n    \n    # In the third pass, there's only one option to return the ball to A.\n    third_pass_options = 1\n    \n    # Calculate total different methods by multiplication principle\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let Jason's initial number of storybooks be j and Anthea's be a\n    # Given that if Jason gives 4 storybooks to Anthea, both will have the same number\n    # So, j - 4 = a + 4\n    # Also given that Jason initially has 30 storybooks\n    # So, j = 30\n    # We can now find Anthea's initial number of storybooks (a) by substituting j = 30 in the above equation\n    # 30 - 4 = a + 4\n    # 26 = a + 4\n    # a = 26 - 4\n    # a = 22\n    \n    # Original number of storybooks Jason has\n    j = 30\n    # Original number of storybooks Anthea has (after calculating)\n    a = 22\n    \n    # Difference between the number of storybooks originally\n    # Since we already know j = 30, we're asked for the value of j - a,\n    # which is the difference in the number of storybooks between Jason and Anthea at first\n    difference = j - a\n\n    return difference\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        Q, P = perm\n        if Q != 0:  # Q should not be zero as it is a 2-digit number\n            if (Q + P) == (P * 10 + Q):\n                return (P * 10 + Q)\n            \nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 1\n    for i in range(1, 41):\n        if i % 4 == 0 and i % 10 == 0:\n            lcm = i\n            break\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # meters per second\n    time_in_minutes = 12\n    time_in_seconds = time_in_minutes * 60  # converting minutes to seconds\n    distance = speed * time_in_seconds  # distance = speed * time\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor = 4\n    reduced_2020 = 2020 // common_factor\n    reduced_505 = 505 // common_factor\n    \n    ans = common_factor * (reduced_2020 * 68 + reduced_505 * 128)\n    \n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # Efficiency relation and time relation\n    equation1 = Eq(A, 2 * B)\n    equation2 = Eq(A * (B - 12), B * B)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Get the rates of work for A and B\n    rate_A = solutions[A]\n    rate_B = solutions[B]\n    \n    # If they work together, their combined rate is A + B\n    combined_days = 1 / (rate_A + rate_B)\n    \n    return combined_days\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    newspaper_cost = 2.20\n    change = 4.83\n    ten_note = 10\n\n    tissues_cost = ten_note - (newspaper_cost + change)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    all_permutations = set(permutations(digits, 1)) | set(permutations(digits, 2)) | set(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, girls)\n    equation2 = Eq((3/5)*boys - 42, girls - 12)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_students = solutions[boys] + solutions[girls]\n\n    return total_students\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 * tomatoes + 3\n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Rachel and Alice's candy\n    rachel, alice = symbols('rachel alice')\n\n    # Equation if Rachel gives Alice 10 candies\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Equation if Alice gives Rachel 10 candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate total candies they had originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = cost_per_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n    increase_in_temp = today_temp - last_night_temp\n    return increase_in_temp\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    morning_ratio = (boys / girls) - (3 / 2)\n    afternoon_ratio = ((boys + 12) / (girls + 12)) - (19 / 14)\n    \n    solutions = solve((morning_ratio, afternoon_ratio), (boys, girls))\n    \n    total_children_afternoon = solutions[boys] + 12 + solutions[girls] + 12\n    \n    return total_children_afternoon\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours since the speeds are given in km/h\n    late_time = 12 / 60  # 12 minutes late as hours\n    early_time = 4 / 60   # 4 minutes early as hours\n    \n    # Let d be the distance between home and office, t the correct time to reach the office\n    # At 3 km/h, time taken is (t + late_time) = d / 3\n    # At 5 km/h, time taken is (t - early_time) = d / 5\n    \n    # Now we have two equations:\n    # d = 3 * (t + late_time)\n    # d = 5 * (t - early_time)\n    \n    # Equate the two expressions for d and solve for t\n    # 3 * (t + 12/60) = 5 * (t - 4/60)\n    # 3t + 3/5 = 5t - 1/3\n    # 2t = 3/5 + 1/3\n    # 2t = 18/30 + 10/30\n    # 2t = 28/30 = 14/15\n    # t = 7/15 hours\n    \n    # Using the value of t to find d:\n    # d = 3 * (t + 1/5)\n    # d = 3 * (7/15 + 3/15) = 3 * (10/15) = 3 * (2/3) = 2 km\n\n    # Hence, the distance from his home to office is 2 km\n    return 2\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_after_transfer = total_pupils // 2  # Dividing the total equally into two rooms\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial\n\n    # Four different colored socks in a row\n    ways_for_different_colored_socks = factorial(4)\n\n    # Two different colored pairs of socks in a row\n    # First we consider two pairs as one, so we permute 2, then permute within the pairs\n    ways_for_pair_colored_socks = factorial(2) * factorial(2) * factorial(2)\n\n    # The reason for different numbers is because in the first case, each sock is unique\n    # and counted separately, while in the second case, within each pair socks are\n    # interchangeable, reducing the number of unique arrangements.\n\n    return ways_for_different_colored_socks, ways_for_pair_colored_socks\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles**0.5)  # Calculate the side of the square wall\n    red_tiles = 0\n    green_tiles = 0\n    # Calculate number of tiles for each color in each layer\n    for i in range(0, side_length // 2):\n        layer_tiles = (side_length - 2 * i) ** 2 - (side_length - 2 * (i + 1)) ** 2\n        if i % 2 == 0:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n    # Check which color has more tiles\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length1 = 23\n    length2 = 37\n    welded_part = 3\n    full_length = length1 + length2 - welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # T = 2 * pi * sqrt(l / g)\n    # Let's consider T1 = 2 * pi * sqrt(l / g1)\n    # and T2 = 2 * pi * sqrt(l / g2)\n    # where g2 is one-sixth of g1. Hence g2 = g1 / 6\n    # So T2 = 2 * pi * sqrt(l / (g1 / 6)) = 2 * pi * sqrt(6 * l / g1)\n    # Given T1 = 1 s (on Earth), we have T1 = 2 * pi * sqrt(l / g1) = 1\n    # Therefore, our aim is to find T2 = 2 * pi * sqrt(6) * sqrt(l / g1)\n    # Hence T2 = sqrt(6) * T1\n\n    T1 = 1  # Period on Earth\n    T2 = sqrt(6) * T1  # Period on Moon\n\n    return T2\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('1 Mar 2023', '%d %b %Y')\n    end_date = datetime.strptime('15 Apr 2023', '%d %b %Y')\n\n    duration = end_date - start_date\n    return duration.days + 1  # Include both the start and end dates\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Since no specific puzzle is provided, I'll assume \"A\" is a digit in a vertical puzzle of this form:\n    #   AB\n    # + AC\n    # ----\n    #  BB\n    \n    # A, B, and C are unique digits and we need to find out the value of A.\n    # We iterate over all possible values of A, B, C to find the solution.\n\n    for A in range(1, 10):  # A cannot be zero as it's a leading digit.\n        for B in range(10):\n            for C in range(10):\n                if A != B and A != C and B != C:  # Making sure all digits are unique.\n                    AB = A * 10 + B\n                    AC = A * 10 + C\n                    BB = B * 10 + B  # The result is a number with same digit twice which is BB.\n                    if AB + AC == BB:\n                        return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # Total work is considered as 1 (i.e., 100% of the job)\n    total_work = 1\n\n    # A's work rate per day\n    a_rate = 1 / 15\n    # B's work rate per day\n    b_rate = 1 / 10\n\n    # Work done by A and B together in 3 days\n    work_done = 3 * (a_rate + b_rate)\n\n    # Remaining work to be done\n    remaining_work = total_work - work_done\n\n    # Days B will take to finish the remaining work alone\n    days_b = remaining_work / b_rate\n\n    return days_b\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    people = 100\n    side = int(people**0.5)  # calculate the side of the square\n    \n    # Number of people on the outside of a square is 4 times the side length minus 4 (for the corners)\n    outer_people = 4 * side - 4\n    return outer_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # The common difference between terms\n\n    n = 1  # term number\n    term = first_term\n    while term > 0:\n        n += 1\n        term += difference\n\n    # Subtract one because the loop increments n one last time after term is negative\n    return n - 1\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Assuming Tom starts first, to win, he must leave an inevitable state for Jane\n    # where no matter what she does, he can always take the last card.\n    # This state can be achieved when both piles have the same number of cards\n    # because whatever move Jane makes, Tom can mirror her move on the other pile.\n\n    pile_A = 88\n    pile_B = 52\n\n    # Tom's strategy should be to equalize the number of cards in both piles.\n    # Since A has more cards, he should take cards from A to match the number in B.\n    \n    cards_to_take = pile_A - pile_B\n\n    # Returning the number of cards Tom should take from pile A in his first turn\n    return cards_to_take\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let the initial amount of cash Hugo had be x.\n    # After giving away 3/7 of x to his sister, the remaining cash is 4/7 of x.\n    # Subsequently, he gave 1/8 of the remaining cash (which is 4/7 of x) to his mum.\n    # Therefore, the cash left after giving to his mum is 7/8 of the remaining cash.\n    # In the end, Hugo is left with 280.\n\n    # Hence, the equation representing the situation is:\n    # (7/8) * (4/7) * x = 280\n\n    # Solve for x, which represents the initial amount of cash Hugo had.\n    x = 280 * (8/7) * (7/4)\n    return x\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # To ensure at least one student gets at least 3 apples,\n    # we can first give 3 apples to one student,\n    # then distribute the remaining 77 apples to the students one by one.\n    # This is a clear use of the Pigeonhole Principle, as each student will represent a pigeonhole\n    # and each apple represents a pigeon.\n    # We can calculate the maximum class size by giving every other student at least one apple.\n\n    # Give 3 apples to one student\n    remaining_apples = 80 - 3\n\n    # Since all other students must get at least one apple,\n    # the class size is 1 (student with 3 apples) + remaining_apples (each getting one apple)\n    class_size = 1 + remaining_apples\n\n    return class_size\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for correct_william in range(11):\n        points_william = 6 * correct_william - 2 * (10 - correct_william)\n        points_justin = points_william + 24\n        if points_william + points_justin == 96:\n            return correct_william\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the number of red balls be r, white balls be w, and black balls be b.\n    # According to the ratios given,\n    # r/w = 1/2 => r = w / 2\n    # w/b = 3/4 => b = 4w / 3\n    # The total number of balls is 34, so r + w + b = 34.\n    # Substituting r and b in terms of w in the above equation gives:\n    # w/2 + w + 4w/3 = 34\n    # Multiplying all terms by 6 (the LCM of 2 and 3) to clear the fractions gives:\n    # 3w + 6w + 8w = 204\n    # 17w = 204\n    # w = 204 / 17\n    # w = 12\n    # Substituting the value of w into r = w / 2 gives:\n    # r = 12 / 2\n    # r = 6\n    # Therefore, the number of red balls is 6.\n    r = 204 / 17 / 2\n    return int(r)\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost_10_cheesecakes_logcakes = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost_10_cheesecakes_logcakes\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    number_of_people = 8\n    amount_per_person = total_amount / number_of_people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Any factorial greater than 4! will have a last digit of 0 \n    # because it will contain the factors 2 and 5, whose product is 10.\n    return 0\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4/50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5**2  # square base area is side length squared\n    hole_area = 1*1  # square hole area\n    effective_area = base_area - hole_area  # subtract the hole area from the base area\n    height = 480 / effective_area  # divide the volume by the effective area to find the height\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 11):\n        total_sum += i * (2*i - 1)\n    return total_sum\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    # Since the sequence is alternating between addition and subtraction,\n    # we can group the numbers in pairs: (1 - 2), (3 - 4), ..., (999 - 1000),\n    # and then add the last number: +1001.\n    \n    # Each pair yields -1: 1 - 2 = -1, 3 - 4 = -1, ..., 999 - 1000 = -1.\n    # There are 500 pairs of numbers up to 1000 (since 1000/2 = 500).\n    \n    # Now calculate the sum of all pairs and add the last number:\n    total_pairs = -1 * 500\n    last_number = 1001\n    \n    ans = total_pairs + last_number\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y, g = symbols('y g')  # y for yellow beads, g for green beads\n    original_ratio = Eq(y/g, 3/2)\n    new_ratio = Eq((g + 20)/(y + 5), 3/2)\n    \n    solutions = solve((original_ratio, new_ratio), (y, g))\n    \n    original_total = solutions[y] + solutions[g]\n    \n    return original_total\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n\n    # Henry gave 13 marbles to each of his 2 sisters, so we multiply by 2\n    total_marbles_given_to_sisters = marbles_given_to_each_sister * 2\n\n    # Total marbles Henry had at first is the sum of marbles given and marbles left\n    initial_marbles = marbles_given_to_brother + total_marbles_given_to_sisters + marbles_left_with_henry\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Counting two-digit palindromes (from 10 to 99)\n    for i in range(1, 10):  # The first digit can be anything from 1 to 9\n        count += 1  # The second digit must be the same as the first, hence only one possibility per first digit\n    \n    # Counting three-digit palindromes (from 100 to 999)\n    for i in range(1, 10):  # The first digit can be anything from 1 to 9\n        for j in range(0, 10):  # The second digit can be anything from 0 to 9\n            count += 1  # The third digit must be the same as the first, hence only one possibility per first and second digit\n\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    sum = 0\n    for a in range(20, 1, -2):\n        b = a - 1\n        sum += (a + b)\n    \n    return sum\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Calculate the distance they meet from Amy's starting point\n    distance_meet_from_amy = 60 * 4  # Amy's speed times time\n\n    # Calculate the total distance between Amy's starting point and Christen's starting point\n    # This will be the sum of distances each traveled until they met\n    total_distance = distance_meet_from_amy + (40 * 4)  # Christen's speed times time\n\n    # Calculate the time it takes for Christen to reach Amy's starting point\n    time_for_christen_to_reach_amy = total_distance / 40  # Total distance divided by Christen's speed\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']  # Digits that would make the number even if they are at the end\n    count = 0\n\n    for perm in permutations(digits, 4):  # Generate all possible 4-digit permutations\n        if perm[-1] in even_digits:  # Check if the last digit is even\n            if perm[0] != '0':  # The number should not start with 0\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * 4 - wrong\n        if score == 110:\n            return correct\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = 0.35 * total_cakes\n\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    lemon_chocolate_ratio = 4 / 9\n\n    lemon_cakes = lemon_chocolate_ratio * remaining_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Range for three-digit numbers\n        s = set(str(i))         # Convert to a set of characters to find unique digits\n        if len(s) == 2:         # If there are exactly two different digits\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the books Lily and Judy have initially\n    lily, judy, x = symbols('lily judy x')\n\n    # Equation representing the sharing of books\n    equation = Eq(lily - x, judy + x)\n\n    # Assumption: since after sharing both have the same amount,\n    # it means initially Lily had 2x more books than Judy\n    assumption = Eq(lily - judy, 2 * x)\n\n    # Now we need to express the number of additional books Lily had as an expression\n    solutions = solve((equation, assumption), (lily, judy, x))\n\n    # The answer is the number of additional books Lily had over Judy initially\n    return solutions[lily] - solutions[judy]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Lily can pass the ball either to Cici or April on the first pass.\n    # Whoever receives the ball on the first pass has only one choice: to pass it to the third person.\n    # So there are 2 choices for the first pass, and only 1 choice for the second pass.\n    # Thus, the total number of passing ways is 2 * 1.\n    count = 2 * 1\n    return count\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    fifth_assignment_score = 94\n    total_score_five_assignments = total_score_first_four + fifth_assignment_score\n    average_score_five_assignments = total_score_five_assignments / 5\n    return average_score_five_assignments\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), \n                      (alan, bilal, chloe, david, emily))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    total_wibbles = 11\n    total_arms = 81\n\n    # total arms contributed by wibbles\n    total_wibble_arms = total_wibbles * wibble_arms\n    # remaining arms must belong to wobbles\n    wobble_arms_remaining = total_arms - total_wibble_arms\n    # each wobble has 5 arms\n    wobble_arms = 5\n    # number of wobbles present\n    num_wobbles = wobble_arms_remaining / wobble_arms\n\n    return int(num_wobbles)\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 179):\n        if isprime(a):\n            for b in range(2, 179):\n                if isprime(b) and 7 * a + 9 * b == 179:\n                    return a + b\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15 and \n                    tens == 2 * hundreds and \n                    hundreds == ones + 1):\n                        return 100 * hundreds + 10 * tens + ones\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    total_amount = 420\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Kelvin was already 10 km ahead and they both are cycling in the same direction.\n    # Let's calculate the relative speed at which Maverick is approaching Kelvin.\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10    # km/h\n    relative_speed = maverick_speed - kelvin_speed  # km/h\n\n    # Calculate the time taken by Maverick to catch up with Kelvin according to his belief (24 minutes).\n    # First, convert 24 minutes to hours because the speed is in km/h.\n    maverick_time = 24 / 60  # hours\n\n    # Now, using the relative speed and the time Maverick believes he took, we calculate the distance.\n    maverick_distance = relative_speed * maverick_time\n\n    # If the distance calculated is equal to the initial 10 km lead of Kelvin,\n    # then Maverick's belief is correct.\n    if maverick_distance == 10:\n        return maverick_time * 60  # convert hours back to minutes and return\n    else:\n        # If Maverick's belief is not true, we need to find the actual time it took\n        # for him to catch up with Kelvin. We do this by calculating the time it takes\n        # to cover the 10 km lead with the relative speed.\n        actual_time = 10 / relative_speed  # time in hours\n        return actual_time * 60  # convert hours to minutes and return\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Initial value for the evaluation using the provided operation\n    result = 1\n\n    # According to the given operation, the process is sequential and right associative\n    # i.e., a # (b # c) = a # (b + c - bc/910)\n    # By evaluating from right to left, we can simplify the operation greatly\n    for i in range(2, 2017):\n        result = i + result - (i * result / 910)\n\n    return result\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    final_number = 113\n    number = (final_number - 5) / 9\n    return number\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    # Correct application of the Principle of Multiplication\n    ways = boys * girls\n\n    return ways\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since each child must get at least one eraser, we first distribute one eraser to each child.\n    remaining_erasers = 6 - 3\n    \n    # Now, we have to distribute 3 identical erasers to 3 kids,\n    # which is equivalent to the partitioning of 3 into 3 parts.\n    # This is a problem of \"stars and bars\" or \"balls and urns\", \n    # where we have `n` identical items to put into `k` distinct bins/urns.\n    \n    # The formula for calculating this is: (n + k - 1) choose (k - 1)\n    # n + k - 1 here is 3 erasers + 3 children - 1\n    # k - 1 here is 3 - 1 because we have 3 children\n    \n    n = remaining_erasers \n    k = 3  # number of children\n    \n    # We need to calculate \"n+k-1 choose k-1\"\n    # For that, we can use the factorial function from the math module:\n    from math import factorial\n    combinations = factorial(n + k - 1) // (factorial(k - 1) * factorial(n))\n\n    return combinations\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    for correct in range(7):  # There are at most 6 questions, hence range(7) is used\n        wrong = 6 - correct\n        score = correct * 5 - wrong * 2\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Calculate the length of the road based on the plum trees\n    plum_tree_distance = 4  # Distance between each plum tree in meters\n    total_plum_trees = 41   # Total number of plum trees\n    length_of_road = (total_plum_trees - 1) * plum_tree_distance  # The length of the road in meters\n\n    # Calculate the number of pine trees based on the length of the road\n    pine_tree_distance = 5  # Distance between each pine tree in meters\n    # Number of pine trees is the length of the road divided by the distance between pine trees plus 1 for the tree at the end\n    num_pine_trees = (length_of_road // pine_tree_distance) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    younger, older = symbols('younger older')\n\n    equation1 = Eq(younger - (older - younger), 4)\n    equation2 = Eq(older + (older - younger), 61)\n\n    solutions = solve((equation1, equation2), (younger, older))\n\n    return solutions[younger]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    numbers = [1, 2, 3, 4, 5, 6]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    base_people = 10\n    base_hours = 9\n    target_hours = 3\n    people_needed = (base_people * base_hours) / target_hours\n    return people_needed\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let's denote the original amount of money Bud had as x.\n    # After spending 1/3 of x on a book, Bud is left with 2/3 of x.\n    # Then, she spends 2/5 of the remaining money on a bag.\n    # The cost of the bag is £120, so we have 2/5 * (2/3 * x) = £120.\n\n    # We can solve for x using basic algebra:\n    # (2/5) * (2/3) * x = 120\n    # (4/15) * x = 120\n    # x = 120 * (15/4)\n    # x = 120 * 15 / 4\n\n    initial_money = 120 * 15 / 4\n    \n    return initial_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    difference = 4\n    nancy_weight = candy_weight - difference\n    \n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    # Let x be the total number of watermelons Helen started with.\n    # On the first day, she sold 1/3 of x, leaving 2/3 of x.\n    # On the second day, she sold 60% of the remaining watermelons, leaving 40% of (2/3 of x).\n    # After both days, she had 48 watermelons left.\n\n    # Equation: 0.4 * (2/3) * x = 48\n    # Solve for x.\n\n    x = 48 / (0.4 * (2/3))\n\n    return int(x)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6 - ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1 + 1, 9):\n            for x3 in range(x2 + 1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Jessica has 5 desks in front of her, so she sits at the 6th desk\n    # Judy sits just behind Jessica (adjacent), so Judy is at the 7th desk\n    # There are 7 desks behind Judy\n    # Total desks = Desks in front of Jessica + Jessica's desk + Desks behind Judy\n    total_desks = 5 + 1 + 1 + 7\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Original condition\n    original_condition = Eq(boys + girls, 152)\n\n    # After removing 1/11th of boys and 5 girls\n    removed_condition = Eq(boys - boys / 11, girls - 5)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, removed_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtraction_amount = 11\n\n    term = (0 - initial_amount) // subtraction_amount # Find when the sequence crosses zero\n    first_negative_number = initial_amount + (term * subtraction_amount)\n    \n    return first_negative_number - subtraction_amount # Subtract once more to find the first negative\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    return (888 * 999) % 100\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    first_number = 0.11\n    midpoint = 0.126\n    second_number = 2 * midpoint - first_number\n    return second_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio_choc_toff = 12 / 7\n    toffees = chocolates / ratio_choc_toff\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for i in range(28, 41):\n        if i % 4 == 0 and 9 in set(factors for factors in range(1, i + 1) if i % factors == 0):\n            return i\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mango_price = 56\n    mango_cases = 24\n    lychee_cases = 19\n\n    total_cost = 2826\n    lychee_cost_per_case = (total_cost - (mango_price * mango_cases)) / lychee_cases\n    \n    return lychee_cost_per_case\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    totals = set()  # Using a set to store the unique totals\n    coins = [1, 2, 5]  # Coin denominations\n    \n    # Iterating through all possible combinations of 3 coins\n    for coin1 in coins:\n        for coin2 in coins:\n            for coin3 in coins:\n                totals.add(coin1 + coin2 + coin3)\n\n    return len(totals)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if int(f\"{A}{B}{5}\") * 4 == int(f\"{5}{C}{A}\"):\n                    return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    return 0.65 + 0.507 + 0.25\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['1', '1', '2', '2']\n    perm_set = set(permutations(cards, 3))  # Using a set to remove duplicates\n    valid_numbers = {int(''.join(p)) for p in perm_set if p[0] != '0'}  # Eliminating numbers that start with 0\n    return len(valid_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since we know it's a single digit multiplication and result is a three-digit number\n    # the multiplicand must be less than 10. We have 10 possibilities (0-9).\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Constructing the numbers from the digits\n                number1 = int(f\"{P}{Q}{R}\")\n                number2 = int(f\"{Q}5\")\n                # Performing the multiplication\n                product = number1 * number2\n                # Construct the expected result number in terms of P, Q, R\n                expected = int(f\"3{R}{Q}{P}\")\n                # Check if the multiplication is equal to the expected result\n                if product == expected:\n                    # Returning the sum of P, Q, and R\n                    return P+Q+R\n    return None\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    total_children = 50\n    total_amount_paid = 555\n    price_without_name = 10\n    price_with_name = 15\n\n    # Let x be the number of children who paid to have their name on the shirt\n    # Then (total_children - x) is the number of children who paid without name\n    # We can create the following equation based on total amount paid\n    # x * price_with_name + (total_children - x) * price_without_name = total_amount_paid\n\n    # Solving for x gives us the number of children who paid to have their name on the shirt\n    for x in range(total_children + 1):\n        if x * price_with_name + (total_children - x) * price_without_name == total_amount_paid:\n            return x\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Time Susan jogs: 7:30 AM to 8:30 AM = 1 hour\n    jogging_time = 1\n    # Speed Susan jogs: 5 miles per hour\n    jogging_speed = 5\n    # Distance Susan jogs\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Time Susan walks: 8:30 AM to 10:30 AM = 2 hours\n    walking_time = 2\n    # Speed Susan walks: 3 miles per hour\n    walking_speed = 3\n    # Distance Susan walks\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    # For five consecutive numbers: sum = 5/2 * (first_term + last_term)\n    # And since numbers are consecutive last_term = first_term + 4\n    # Given sum of numbers: sum = 100\n    # We get 100 = 5/2 * (first_term + first_term + 4)\n    # Solve for first_term: 100 = 5/2 * (2 * first_term + 4)\n    # 2 * 100 = 5 * (2 * first_term + 4)\n    # 200 = 10 * first_term + 20\n    # 180 = 10 * first_term\n    first_term = 180 / 10\n\n    return int(first_term)\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    cube_root = 1\n    while True:\n        if (44000 % (cube_root ** 3)) == 0:\n            q = 44000 // (cube_root ** 3)\n            if (q ** (1/3)).is_integer():\n                return q\n        cube_root += 1\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_big_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_big_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = total_balls % balls_per_bag\n    bags_used = (total_balls - remaining_balls) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # You could draw all four suits of two different numbers (8 cards) without having three\n    # of the same number.\n    # The next card you draw must result in having at least three cards of the same number.\n    cards_drawn = 8 + 1\n    return cards_drawn\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_suits = {\n        'spades': set(['A', 'J', 'K']),\n        'hearts': set(['3', '5', 'K']),\n        'diamonds': set(['2', '7', 'J']),\n        'clubs': set(['A', '7'])\n    }\n\n    # Step 1: Eddie couldn't figure out the card, so the suit is not clubs (it has unique numbers).\n    possible_suits.pop('clubs')\n\n    # Step 2: Neither Avril nor Eddie knows the card, so the number can't be unique across remaining suits.\n    # Remove unique numbers from consideration.\n    all_numbers = set().union(*possible_suits.values())\n    unique_numbers = {number for number in all_numbers if sum([number in numbers for numbers in possible_suits.values()]) == 1}\n    for suit, numbers in possible_suits.items():\n        possible_suits[suit] = numbers - unique_numbers\n\n    # Step 3: Avril now says she knows the card, so we look for a suit with exactly one number option.\n    known_card = None\n    for suit, numbers in possible_suits.items():\n        if len(numbers) == 1:\n            known_card = (suit, numbers.pop())\n\n    # Eddie then also knows the card, which confirms the number must be correct as it's not shared between suits.\n    return known_card\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_distance = 800\n    number_of_trees = 21\n    number_of_intervals = number_of_trees - 1\n    distance_between_trees = total_distance / number_of_intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n\n    # Joey's calculation\n    joey_calculation = (andy_gives / 2)\n    joey_answer = andy_notebooks - joey_calculation\n\n    # Correct calculation\n    correct_answer = (andy_notebooks - andy_gives) / 2\n\n    # Answer array to store Joey's answer and the correct answer\n    answer = [joey_answer, correct_answer]\n\n    return answer\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    result = (3/4) * 28\n    return result\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    base_number = 200\n    prime_count = 0\n    \n    # Iterate through each position in the number\n    for position in range(3):  # As 200 has exactly three digits\n        for digit in range(10):  # Possible digits range from 0 to 9\n            if position == 0 and digit == 0:  # Skip leading zero\n                continue\n            \n            # Create a list of characters representing the number\n            number_chars = list(str(base_number))\n            \n            # Change the digit at the current position\n            number_chars[position] = str(digit)\n            \n            # Join the characters to form a new number\n            new_number = int(''.join(number_chars))\n            \n            # Check if the new number is prime and increment the count if it is\n            if new_number != base_number and isprime(new_number):\n                prime_count += 1\n\n    return prime_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let the smaller number be x. Then the other number, which is twice the small number, is 2x.\n    # The sum of these two numbers is 72, so we have the equation x + 2x = 72.\n    \n    x = 72 / 3  # solving the equation for x gives us this expression.\n\n    return x  # This is the smaller number.\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    known_numbers = [3, 4, 6, 10]\n    total_sum_of_numbers = mean_value * 5\n    sum_of_known_numbers = sum(known_numbers)\n    fifth_number = total_sum_of_numbers - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    people_in_front_of_Emily = 25\n    Danny_position_from_back = 14\n    Emily_position_from_back = Danny_position_from_back - 1\n    total_people = people_in_front_of_Emily + Emily_position_from_back + 1\n\n    return total_people\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Each cut divides the piece of wood into one additional section.\n    # Thus, for 4 sections, Emma makes 3 cuts since the first section doesn't require a cut.\n\n    # Emma needs 12 minutes to make 3 cuts.\n    # This means each cut takes 12 / 3 = 4 minutes.\n\n    # To make the piece of wood into 5 sections, Emma needs to make 5 - 1 = 4 cuts.\n    # Therefore, for 4 cuts, she will need 4 cuts * 4 minutes per cut.\n\n    time_for_5_sections = 4 * 4\n\n    return time_for_5_sections\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the deadline in days, and p be the total number of pages in the book.\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, she finishes 2 days after the deadline.\n    equation1 = Eq(30 * (d + 2), p)\n\n    # If she reads 39 pages a day, she finishes 4 days before the deadline.\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (d, p))\n\n    # Extract and return the number of days to finish reading and the total pages.\n    deadline_days = solutions[d]\n    total_pages = solutions[p]\n\n    return deadline_days, total_pages\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    # The distance between the two buildings is 90 meters.\n    # If 9 trees are planted at regular intervals between the buildings,\n    # that means there are 10 intervals between the 9 trees.\n    \n    total_distance = 90\n    number_of_trees = 9\n    number_of_intervals = number_of_trees + 1  # One more interval than the number of trees\n    \n    distance_between_each_tree = total_distance / number_of_intervals\n    \n    return distance_between_each_tree\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    pages = 0\n    count = 0\n\n    while True:\n        pages += 1\n        count += str(pages).count('5')\n        if count == 30:\n            break\n\n    return pages\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    # Correct Mistake in the calculation and solve for x\n    correct_step = solve(equation, x)\n\n    # Check if Celeste's final answer was correct\n    if correct_step[0] != 4/3:\n        error_in_calculation = True\n        correct_age = correct_step[0]\n    else:\n        error_in_calculation = False\n        correct_age = 4/3\n    \n    return (error_in_calculation, correct_age)\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10+9+8+7+6) - (5+4+3+2+1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_worker_per_day = 2\n    total_rooms = 4\n    workers = 2\n    \n    days_to_paint = (total_rooms / rooms_per_worker_per_day) / workers\n    \n    return days_to_paint\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of apple and orange\n    apple, orange = symbols('apple orange')\n\n    # Set up the equations based on the information given\n    # Kate: 1 apple + 2 oranges = 48p\n    equation1 = Eq(apple + 2 * orange, 48)\n\n    # Jade: 1 apple + 1 orange = 31p\n    equation2 = Eq(apple + orange, 31)\n\n    # Solve for the cost of apple and orange\n    solution = solve((equation1, equation2), (apple, orange))\n\n    # We want to find the cost of 1 orange\n    return solution[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money = symbols('pocket_money')\n    price_per_ball = symbols('price_per_ball')\n\n    # Equation: pocket_money = 4 * price_per_ball + 0.27\n    equation1 = Eq(pocket_money, 4 * price_per_ball + 0.27)\n    # Equation: pocket_money = 2 * price_per_ball + 1.51\n    equation2 = Eq(pocket_money, 2 * price_per_ball + 1.51)\n\n    # Solve the equations to find the value of 'price_per_ball' and 'pocket_money'\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n\n    # Fetching the amount of pocket money\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3 / 8)\n    remaining_badges = total_badges - given_badges\n\n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        if str(num).count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elias, aileen = symbols('elias aileen')\n    \n    original_condition = Eq(elias, 5 * aileen)\n    after_condition = Eq(elias - 88, aileen - 8)\n    \n    solutions = solve((original_condition, after_condition), (elias, aileen))\n    \n    elias_final = solutions[elias] - 88\n    aileen_final = solutions[aileen] - 8\n    \n    return elias_final, aileen_final\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    # Since Louis is in the line, we have to subtract 1 to get the number of people in front of him\n    people_in_front = total_people - people_behind - 1\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas, gerald = symbols('thomas gerald')\n\n    equation1 = Eq(thomas, 5/3 * gerald)\n    equation2 = Eq(thomas + gerald, 104)\n\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    diff = solutions[thomas] - solutions[gerald]\n\n    return diff\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return cookies_with_48_grams\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert from base 8 to base 10, perform addition and convert back to base 8\n    sum_base10 = int('25', 8) + int('37', 8)\n    ans = oct(sum_base10)[2:]  # Slice to remove the '0o' prefix\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    fraction = 8 / 11\n    amount = 1.54\n\n    result = fraction * amount\n\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults, children = symbols('boys girls adults children')\n\n    equation1 = Eq(boys, 2/7 * girls)\n    equation2 = Eq(adults, 2/3 * children)\n    equation3 = Eq(children, boys + girls)\n    equation4 = Eq(adults, 1228 + boys)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (boys, girls, adults, children))\n\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n\n    return total_people\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(b + 24, a - 2)\n    equation2 = Eq(a + 25, 5 * (b - 25))\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price = 150\n    selling_price = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let the original number of rackets be x\n    # Proceeds = selling_price * (x - remaining_rackets)\n    # Total cost = cost_price * x\n    # Profit = proceeds - total cost\n    # So, the equation will be:\n    # selling_price * (x - remaining_rackets) = cost_price * x + profit\n    # solving for x\n\n    x = symbols('x')\n    equation = Eq(selling_price * (x - remaining_rackets), cost_price * x + profit)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the initial amount of money Chloe and Gordon had.\n    # Chloe spent $20 each day and has $157 left.\n    # Gordon spent $25 each day and has $82 left.\n    \n    # Let's say they spent money for 'd' days.\n    # Then Chloe's equation is: x - 20d = 157\n    # And Gordon's equation is: x - 25d = 82\n    \n    # We solve the two equations:\n    # x - 20d = 157...(1)\n    # x - 25d = 82....(2)\n    \n    # Subtracting equation (2) from (1) gives:\n    # (x - 20d) - (x - 25d) = 157 - 82\n    # -20d + 25d = 75\n    # 5d = 75\n    # d = 15\n    \n    # Now that we know they spent money for 15 days,\n    # we can substitute d in Gordon's equation:\n    # x - 25 * 15 = 82\n    # x - 375 = 82\n    # x = 82 + 375\n    initial_amount = 82 + 375\n    return initial_amount\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n + (n * (n - 1) // 2) + (n * (n - 1) * (n - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # ensure x2 is greater than x1\n            for x3 in range(x2+1, 14):  # ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the total value of all jewels in box P before the transfer\n    # and y as the total value of all jewels in box Q before the transfer.\n    # There are 3 jewels in each box before the transfer.\n    x, y = symbols('x y')\n\n    # The average value of jewels in P is x/3 and in Q is y/3.\n    # After transferring a 5000 worth jewel from P to Q, we have:\n    # - The new average value of jewels in P is (x - 5000)/3 + 1000\n    # - The new average value of jewels in Q is (y + 5000)/3 + 1000\n\n    # We setup our equations based on the average value increase information:\n    equation1 = Eq(((x - 5000) / 3) + 1000, (x / 3))\n    equation2 = Eq(((y + 5000) / 3) + 1000, (y / 3))\n\n    # We solve the system of equations for x and y:\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The sum of x and y will give us the total value of all 6 jewels.\n    return solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    buy_price = 15\n    bad_melons_fraction = 1/5\n    sell_price_per_melon = 1.50\n\n    bad_melons = total_melons * bad_melons_fraction\n    good_melons = total_melons - bad_melons\n\n    revenue = good_melons * sell_price_per_melon\n    profit = revenue - buy_price\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    oranges = 150\n    apples = 100\n    oranges_left = 17\n    apples_left = 5\n\n    # Subtract the leftovers to get the divisible amounts\n    divisible_oranges = oranges - oranges_left\n    divisible_apples = apples - apples_left\n\n    # Find the greatest common divisor (GCD) of the divisible amounts\n    neighbours = gcd(divisible_oranges, divisible_apples)\n\n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_interval = 1\n\n    # The number of crosses is equal to the line length divided by the interval\n    # between crosses plus the crosses at the beginning and the end.\n    num_crosses = (line_length // cross_interval) + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the original number of Sandra's marbles\n    # Let j be the original number of Jessica's marbles\n    s, j = symbols('s j')\n    \n    # Sandra gave Jessica 13 marbles\n    # So, Sandra has s-13 and Jessica has j+13 after giving\n    # Sandra had 6 fewer marbles than Jessica after giving\n    equation1 = Eq(s - 13, j + 13 - 6)\n    \n    # Solve for s and j\n    solutions = solve(equation1, (s, j))\n    \n    # Calculate the difference in the number of marbles at the beginning\n    more_marbles = solutions[s] - solutions[j]\n    \n    return more_marbles\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1_and_6 = 60\n    number_of_intervals_1_and_6 = 6 - 1 \n    interval_length = distance_between_1_and_6 / number_of_intervals_1_and_6\n\n    number_of_intervals_1_and_9 = 9 - 1\n    distance_between_1_and_9 = interval_length * number_of_intervals_1_and_9\n\n    return distance_between_1_and_9\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # The pattern \"red, red, green, yellow, yellow, green\" has 6 balloons\n    green_balloons_in_pattern = 2  # There are 2 green balloons in each pattern\n\n    full_patterns = 75 // pattern_length  # Calculate how many full patterns there are\n    remaining_balloons = 75 % pattern_length  # Calculate the remaining balloons after full patterns\n\n    # Count the green balloons from full patterns\n    green_balloons = full_patterns * green_balloons_in_pattern\n\n    # Count the green balloons in the remaining balloons\n    if remaining_balloons >= 3:\n        green_balloons += 1\n    if remaining_balloons == 6:\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    total_shared = 26 * 7\n    at_school_before_sharing = total_shared + 22  # since she left with 22 after sharing\n    initially_bought = at_school_before_sharing * 3  # since she ate 1/3 at home\n    return initially_bought\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n    total_floors = 25\n\n    # Calculate the ratio of their speeds using the floors they have reached\n    speed_ratio = bob_current_floor / andy_current_floor\n\n    # To find out which floor Bob is on when Andy reaches the top, multiply the total floors by the speed ratio\n    bob_final_floor = speed_ratio * total_floors\n\n    return int(bob_final_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    return 8 / (2/3)\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    # Start with the assumption that 1 appears 15 times and 2 appears 14 times\n    # As we know from 1 to 9, each number will appear once, and from 10 to 99, \n    # each digit will appear 10 times each in tens place and 10 times in ones place (20 times). \n\n    # All digits (0-9) appear equally in tens place from 10 to 99.\n    # Number of ones needed to reach 15 is 15 (from 10, 11, 12, ...,19) - 9 (from 1, 2, 3, ..., 9)\n    # So, we need 6 extra ones which can be accommodated in the numbers 100-109\n    \n    # To get fourteen \"2\"s, we have 10 from the digits 20 to 29 and 4 more needed.\n    # This will result in the count of \"2\" to be at fourteenth position which will be at 114.\n    \n    n = 109 + (4 * 10)  # Since the fourteenth \"2\" falls at 114\n    return n\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_speed, total_words = symbols('original_speed total_words')\n\n    equation1 = Eq(total_words / original_speed, 3)\n    equation2 = Eq(total_words / (original_speed + 30), 2)\n\n    solutions = solve((equation1, equation2), (original_speed, total_words))\n\n    return solutions[total_words]\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # 0 represents off, 1 represents on\n\n    # Ms. Lily presses every alternate switch starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = 1  # Turn on the light\n\n    # Sam presses each even-numbered switch 7 times\n    for i in range(1, 10, 2):\n        lights[i] += 7\n\n    # The even-numbered switches will toggle state 7 times,\n    # so they will end up in the same state they started (since 7 is odd).\n    # Therefore, we count the lights that are on (1)\n    ans = lights.count(1)\n\n    return ans\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A contains 2/3 as much water as B initially\n    equation1 = Eq(A, 2/3 * B)\n    \n    # When 4 liters of water is poured from B to A,\n    # A will contain 7/8 as much water as B\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Total amount of water is A + B\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    total_depth = 8\n    climb_up = 3\n    slide_down = 2\n    net_climb = climb_up - slide_down\n    current_depth = total_depth\n    day = 0\n\n    while current_depth > climb_up:\n        day += 1\n        current_depth -= net_climb\n    \n    # On the final day it climbs out without slipping back\n    day += 1\n\n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_sugar_content_ml = 900 * 0.06\n    final_desired_content_ml = 900 * 0.10\n\n    additional_sugar = final_desired_content_ml - initial_sugar_content_ml\n\n    return additional_sugar\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    num_seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * num_seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_used = 2\n    total_parts = 100\n    \n    parts_per_hour = parts_made / hours_used\n    remaining_parts = total_parts - parts_made\n    hours_needed = remaining_parts / parts_per_hour\n    \n    return hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n\n    total_cost = cost_per_bar * num_bars\n\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Worst case scenario for drawing 2 balls of each color\n    worst_case_2_each_color = 2 * 3\n    \n    # Since we need at least 3 different colored balls, we need one more draw\n    ans = worst_case_2_each_color + 1\n    \n    return ans\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from itertools import combinations\n\ndef solution():\n    colors = 5\n    taken_balls = 2\n    combinations_of_balls = list(combinations(range(colors), taken_balls))\n    # Subtract 1 because we start counting from 0\n    num_people = len(combinations_of_balls) + 1  \n\n    return num_people\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # Any two even numbers multiplied together will be divisible by 4.\n    # There are 16 even numbers in the range from 10 to 41.\n    # However, if we have unlucky draws, we could pick an odd number first (when we can say that none of them are divisible by 4).\n    # After this, we have 31 numbers left and still can be unlucky to draw 15 evens.\n    # The next draw (the 17th) would be the second even number ensuring the product with another even is divisible by 4.\n    # So we need to draw 17 numbers to ensure the product of two of them is divisible by 4.\n    \n    ans = 17\n    return ans\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    total_cards = 876\n\n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n\n    # The sum of their cards\n    equation2 = Eq(hisham + melissa, total_cards)\n\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    hisham_cards = solutions[hisham]\n    melissa_cards = solutions[melissa]\n\n    # Number of cards Melissa should give Hisham to have the same amount\n    cards_to_give = int((melissa_cards - hisham_cards) / 2)\n\n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    dividend = 20504\n    divisor = 8\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    \n    common_difference = (third_term - first_term) / (3 - 1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # convert 2 m 20 cm to cm\n    piece_length = total_length_cm / 2\n    return piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(46, 51):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Largest two-digit square number\n    two_digit_squares = [x**2 for x in range(1, 10) if len(str(x**2)) == 2]\n    largest_two_digit_square = two_digit_squares[-1]\n\n    # Product of smallest two-digit prime number and the largest two-digit square number\n    ans = smallest_two_digit_prime * largest_two_digit_square\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((40 / (x + 5)), 5)\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian is currently 14 years old and his father is 41.\n    # The difference in age is 41 - 14 = 27 years.\n    age_difference = 27 \n\n    # Let's denote Brian's future age as 'b' and his father's future age as 'f'.\n    # We know that the father's age will always be Brian's age + 27\n    # And the reverse of Brian's age should be equal to his father's age\n    # That means: if b = 10 * x + y then f = 10 * y + x\n    # We will keep checking for every age Brian could achieve (up to a reasonable limit)\n    \n    for b in range(15, 100): # Assuming Brian's age won't reverse after he is 100\n        f = b + age_difference\n        if int(str(b)[::-1]) == f: # Check if reverse of Brian's age is his father's age\n            return b # Return Brian's age when his age is the reverse of his father's\n    \n    return None # If no age found, return None\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_usd = euro_to_usd * cost_in_euros\n    return cost_in_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        value = a + (b / c) + (d / e) * f - (g + (h / j))\n        if value.is_integer():\n            max_value = max(max_value, value)\n    return int(max_value)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    total_books_new = 3900 + 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    ratio_total = ratio_chinese + ratio_malay + ratio_english\n\n    chinese_books_initial = (ratio_chinese / ratio_total) * total_books_initial\n    malay_books_initial = (ratio_malay / ratio_total) * total_books_initial\n    english_books_initial = (ratio_english / ratio_total) * total_books_initial\n\n    chinese_books_new = chinese_books_initial * 1.20\n    malay_books_new = malay_books_initial * 1.10\n\n    english_books_new = total_books_new - (chinese_books_new + malay_books_new)\n    increase_percentage_english = ((english_books_new - english_books_initial) / english_books_initial) * 100\n\n    return increase_percentage_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    lcm = 1\n    a = 12\n    b = 56\n\n    while lcm % a != 0 or lcm % b != 0:\n        lcm += 1\n        \n    return lcm\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors_total_score = 12 * 10\n    all_participants_total_score = 20 * 14\n    seniors_total_score = all_participants_total_score - juniors_total_score\n    seniors_average_score = seniors_total_score / 8\n\n    return seniors_average_score\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, the combined age was 10, so now the combined age is 10 + 2 * 4\n    current_combined_age = 10 + 2 * 4\n    # In two years, the combined age will be the current combined age plus 2 * 2\n    future_combined_age = current_combined_age + 2 * 2\n    return future_combined_age\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    not_attempted = 1\n    attempted_questions = total_questions - not_attempted\n    correct_points = 4\n    incorrect_points = -2\n    score = 66\n    \n    # Let's denote x as the number of correct answers.\n    # Since Rex did not attempt 1 question, the number of incorrect answers will be (attempted_questions - x).\n    # The total score is then x*correct_points + (attempted_questions - x)*incorrect_points.\n    # We can set up the equation:\n    # correct_points*x + incorrect_points*(attempted_questions - x) = score\n\n    # Rearranging the equation to find x:\n    # (correct_points - incorrect_points)*x = score - incorrect_points*attempted_questions\n    # x = (score - incorrect_points*attempted_questions) / (correct_points - incorrect_points)\n\n    x = (score - incorrect_points*attempted_questions) / (correct_points - incorrect_points)\n    return int(x)\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    correct_percentage = 0.60\n    correct_marks = 5\n    wrong_marks = -2\n    unanswered_marks = 1\n    total_score = 264\n\n    correct_questions = total_questions * correct_percentage\n    wrong_questions = total_questions - correct_questions\n    unanswered_questions = total_questions - correct_questions\n\n    score_from_correct = correct_questions * correct_marks\n    score_from_unanswered = unanswered_questions * unanswered_marks\n\n    diff = total_score - score_from_correct - score_from_unanswered\n\n    wrong_questions_solved = diff / (wrong_marks - correct_marks)\n    correct_answers = correct_questions - wrong_questions_solved\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    min_apples_per_container = 1\n\n    # According to Pigeonhole Principle, to guarantee at least one container has\n    # 2 apples, we distribute 1 apple per container and then put another apple in any one.\n    min_total_apples = containers * min_apples_per_container + 1\n    \n    return min_total_apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** -2021)\n    denominator = 92 * (10 ** -2023)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made_by_50g = 160\n    butter_needed_for_300_cookies = (50 / cookies_made_by_50g) * 300\n    return butter_needed_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra, timm = symbols('dedra timm')\n    \n    # Before receiving money\n    equation1 = Eq(dedra, 4 * timm)\n    \n    # After receiving money\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n    \n    solutions = solve((equation1, equation2), (dedra, timm))\n    \n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    digits = \"\"\n    num = 1\n    # Keep adding the digits of consecutive numbers to the string\n    while len(digits) < 1000:\n        digits += str(num)\n        num += 1\n    # Get the 1000th character in the string\n    ans = int(digits[999])\n    return ans\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(3 * square - 2, 19)\n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Jane and Jack's ages\n    jane, jack = symbols('jane jack')\n    \n    # Setup the equations based on the problem statement\n    equation1 = Eq(jane - jack, 5)   # Jane is 5 years older than Jack\n    equation2 = Eq(jane + jack, 33)  # The sum of their ages is 33\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    # Jane's age is what we want to return\n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Use the Inclusion-Exclusion Principle to calculate the total\n    total = A + C + E - AC - AE - CE + ACE\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    people_behind = 14\n    total_people = 23\n\n    people_in_front = total_people - people_behind - 1  # Subtracting Louis and the people behind him\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    ans = permutations(18, 3)\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age = 4  # Jack is 4 years old\n    jason_age, bruce_age, willie_age = symbols('jason_age bruce_age willie_age')\n\n    # Jason is older than Jack\n    eq1 = Eq(jason_age > jack_age, True)\n\n    # Bruce and Willie are of the same age as Jason\n    eq2 = Eq(bruce_age, jason_age)\n    eq3 = Eq(willie_age, jason_age)\n\n    # The total age of the 4 children is 19 years\n    eq4 = Eq(jack_age + jason_age + bruce_age + willie_age, 19)\n\n    # Since Jason, Bruce, and Willie are all the same age, we can reduce the equations\n    solutions = solve((eq4, eq2, eq3), (jason_age, bruce_age, willie_age))\n\n    for solution in solutions:\n        if solution[jason_age] > 4:  # Ensure that Jason is older than Jack\n            return solution[jason_age]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    for n in range(1, 1000):  # Reasonably large range to cover possible scenarios\n        if n % 5 == 3 and (n + 2) % 6 == 0:\n            return n\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jake and John's current ages\n    jake, john = symbols('jake john')\n\n    # Equation 1: sum of their current ages is 44\n    equation1 = Eq(jake + john, 44)\n\n    # Equation 2: in 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # John's age in 14 years\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    annual_interest_rate = 0.06\n    period = 3  # 3 years\n\n    present_value = future_value / ((1 + annual_interest_rate) ** period)\n\n    return present_value\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the youngest child's age\n    y_age = symbols('y_age')\n\n    # Calculate the age difference between each child\n    age_diff = 15 / 12  # converting months to years\n\n    # Create a list of equations based on the information provided\n    equations = [Eq(y_age + i * age_diff * 6, y_age + (8 - i) * age_diff) for i in range(9)]\n\n    # Solve the system of equations\n    solutions = solve(equations, y_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from sympy import symbols, minimize\n\ndef solution():\n    x = symbols('x')\n    # Explore all possible bracket insertions and evaluate the expressions\n    expressions = [\n        (15 + 5) * (5 + 15) - 6 + 7,\n        (15 + 5) * 5 + (15 - 6) + 7,\n        15 + 5 * (5 + (15 - 6) + 7),\n        (15 + (5 * 5) + 15) - 6 + 7,\n        15 + ((5 * 5) + 15 - 6) + 7,\n        (15 + 5 * 5 + 15) - (6 + 7),\n        (15 + 5 * (5 + 15) - 6 + 7),\n        15 + 5 * (5 + 15 - 6) + 7,\n        15 + 5 * (5 + (15 - 6)) + 7\n    ]\n    # Minimize the result\n    min_result = min([expr.evalf() for expr in expressions])\n    return min_result\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    return 2018 - 786\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for n in range(1, 2008):\n        total += (n**2 + (n+1)**2) / (n * (n+1))\n    return round(total)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        new_number = int(str(i % 10) + str(i // 10))\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let x be the number of sweets Jiaxiang has.\n    # Cayden has x + 5 sweets.\n    # After Cayden gives Jiaxiang 10 sweets:\n    # Cayden has (x + 5 - 10) sweets and Jiaxiang has (x + 10) sweets.\n    # The difference in the number of sweets they have now is:\n    # |(x + 5 - 10) - (x + 10)|\n    # Simplify the absolute difference:\n    difference = abs((x + 5 - 10) - (x + 10))\n    # Plug in the values and compute the difference:\n    difference = abs((-5) - 10)\n    \n    return difference\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) + 1  # first multiple of 11 greater than 50\n    last_multiple = 150 // 11  # last multiple of 11 less than 150\n    num_multiples = last_multiple - first_multiple + 1\n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 * 0.01) * 74 - 0.3 / (2 / 15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    initial_sum = 72 * 5\n    final_sum = 75 * 6\n    marys_score = final_sum - initial_sum\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    time_to_cross = (train_length + bridge_length) / speed\n    \n    return time_to_cross\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    morning_cookies = 200 * (1/5)\n    remainder = 200 - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for number in range(999, 100, -1):\n        if number % 9 == 0 and number % 2 != 0:  # Divisible by 9 and odd\n            tens_digit = (number // 10) % 10  # Extract the tens digit\n            if tens_digit % 4 == 0:           # Tens digit divisible by 4\n                return number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    # Number of doughnuts to distribute\n    doughnuts = 11\n    # Number of students\n    students = 4\n    \n    # Since each student must get at least one doughnut,\n    # we give one doughnut to each student first.\n    doughnuts -= students\n    \n    # Now we need to distribute the remaining doughnuts\n    # to the students in any manner.\n    \n    # This problem is equivalent to placing doughnuts + students - 1 separators\n    # to get students - 1 partitions (places where we switch from placing \n    # in one student's pile to the next student's pile).\n\n    # We use the stars and bars combinatorial method, for which there is a formula:\n    # We have doughnuts indistinguishable items and we want to choose students-1 separators.\n    # The number of ways is given by the combination formula C(n + k - 1, k - 1),\n    # where n is the number of items and k is the number of partitions.\n    \n    from math import comb\n    ans = comb(doughnuts + students - 1, students - 1)\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48  # m, distance to the wet market\n    speed = 8      # m/min, Auntie Lina's walking speed\n    time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Given quantities of marbles\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # To guarantee at least one of each color is drawn, she must take all of the\n    # most numerous color marbles plus three more (one of each of the other colors).\n    max_color = max(red, green, blue, orange)\n    ans = max_color + 3  # Three more for the other colors\n\n    return ans\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define possible coin values in pence (multiples of 5)\n    coin_values = [5, 10, 20, 50, 100, 200]  # 1 pound = 100 pence\n\n    # Five pound note value in pence\n    five_pound_note = 500 \n    \n    # Iterate through all combinations of five distinct coin values\n    for a in coin_values:\n        for b in coin_values:\n            if b == a: continue\n            for c in coin_values:\n                if c in (a, b): continue\n                for d in coin_values:\n                    if d in (a, b, c): continue\n                    for e in coin_values:\n                        if e in (a, b, c, d): continue\n                        \n                        # If the sum of five distinct coins matches the five pound note, return the spent amount\n                        if a + b + c + d + e == five_pound_note:\n                            return five_pound_note - (a + b + c + d + e)\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    return 0.2 * 7\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    for ten_notes in range(39):\n        two_notes = 38 - ten_notes\n        if (0.2 * ten_notes) * 10 == 3 * (0.25 * two_notes) * 2:\n            cost_of_fan = (0.8 * ten_notes) * 10 + (0.75 * two_notes) * 2\n            return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    initial_hives = 5\n    initial_honey = 50\n    target_honey = 90\n    \n    # Calculate the honey production rate per hive\n    rate_per_hive = initial_honey / initial_hives\n    \n    # Determine the number of hives needed for the target production\n    required_hives = target_honey / rate_per_hive\n    \n    # Calculate how many more hives are needed\n    additional_hives = required_hives - initial_hives\n    \n    return int(additional_hives)\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    # Let's denote Ali's erasers as A and Kumar's erasers as K.\n\n    # According to the problem, we have the following equations:\n    # A / K = 7 / 5 ... (1)\n    # (A - 10) / (K + 10) = 1 / 5 ... (2)\n\n    # Let's find a common multiple of 7 and 1 for A, and 5 for K\n    # We can express A as 7x and K as 5x where x is any positive integer.\n\n    # Plugging into the second equation we get:\n    # (7x - 10) / (5x + 10) = 1 / 5\n    # 5(7x - 10) = (5x + 10)\n    # 35x - 50 = 5x + 10\n    # 35x - 5x = 60\n    # 30x = 60\n    # x = 2\n\n    # Now we find the actual number of erasers\n    # A = 7x = 7*2 = 14\n    # K = 5x = 5*2 = 10\n\n    # Together they have A + K erasers\n    total_erasers = 14 + 10  # Ali's and Kumar's erasers\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    # initial problem solved by the first student\n    a1 = 4\n    \n    # common difference (increment of problems solved by consecutive students)\n    d = 3\n    \n    # student number for whom we want to find the number of math problems solved\n    n = 23\n    \n    # using the formula a_n = a1 + (n-1)d to find the nth term in an arithmetic sequence\n    an = a1 + (n - 1) * d\n    \n    return an\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "import math\n\ndef solution():\n    east_west_distance = 15 - 9  # Total distance travelled east-west\n    north_south_distance = 3 + 5  # Total distance travelled north-south\n    shortest_distance = math.sqrt(east_west_distance**2 + north_south_distance**2)\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for banana and pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(1 * banana + 3 * pear, 84)\n    equation2 = Eq(1 * banana + 1 * pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time = 8 * 60 + 20  # total time in minutes\n    activity_time = 45  # duration of each activity\n    break_time = 20  # duration of each break\n\n    # Set initial condition\n    activities = 0\n    time_elapsed = 0\n\n    # Loop through the activities including their break times\n    while time_elapsed + activity_time <= total_time:\n        activities += 1\n        time_elapsed += activity_time + break_time\n\n        # Subtract the last break time since it's after the last activity\n        if time_elapsed + activity_time > total_time:\n            activities += (total_time - time_elapsed) // activity_time\n            break\n\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote Adam's weight as a, Ben's weight as b, and Carl's weight as c.\n    # The following three equations are given:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n\n    # Add all three equations to get 2(a + b + c) = 102 + 97 + 92\n    # Then divide both sides by 2 to get the total weight a + b + c\n    total_weight = (102 + 97 + 92) / 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and ''.join(perm) > '5000':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A_efficiency = 2  # A's efficiency is twice B's\n    A_days_less = 5  # A is able to finish a job in 5 days less than B\n    \n    # Define symbols for A and B's time to complete the work\n    A_time, B_time = symbols('A_time B_time')\n    \n    # Equation based on the efficiency: A's time to finish work is (1/A_efficiency) of B's time\n    equation1 = Eq(A_time, B_time / A_efficiency)\n    \n    # Equation based on the time: A finishes the job in 5 days less than B\n    equation2 = Eq(A_time, B_time - A_days_less)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (A_time, B_time))\n    \n    # Returning B's time to complete the work\n    return solution[B_time]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3 / 5) * 35\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    # Divisibility rule for 11: Sum of digits at odd positions and\n    # Sum of digits at even positions. The difference between the two sums must be a multiple of 11.\n    number = 123456\n    str_number = str(number)\n    odd_sum = sum(int(digit) for i, digit in enumerate(str_number) if i % 2 != 0)\n    even_sum = sum(int(digit) for i, digit in enumerate(str_number) if i % 2 == 0)\n    difference = abs(odd_sum - even_sum)\n\n    # Check whether the difference is divisible by 11\n    remainder = difference % 11\n    return remainder == 0, remainder\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = total_bulbs * 0.25\n    tulip_bulbs = total_bulbs * 1/5\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # Initial length in meters\n    final_length_m = 0.78  # Final length in meters\n\n    melted_length_m = initial_length_m - final_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Define a function that uses recursion to find the number of ways\n    def climb_stairs(n):\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n in memo:\n            return memo[n]\n        total_ways = climb_stairs(n-1) + climb_stairs(n-4)\n        memo[n] = total_ways\n        return total_ways\n    \n    memo = {}\n    ans = climb_stairs(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    ans = 3549 // 7\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    \n    # At the first stop two-fifths get off and then 7 people get on\n    passengers_after_first_stop = initial_passengers - (2/5) * initial_passengers + 7\n    \n    # At the next stop a quarter of the people remaining on the bus get off and then 13 get on\n    passengers_after_second_stop = passengers_after_first_stop - (1/4) * passengers_after_first_stop + 13\n    \n    return int(passengers_after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Since the sequence increments by 0.5, let's multiply everything by 2 to use integers\n    sum_of_numbers = sum(range(1, int(2 * 10) + 1, 2))  # Sums every second integer from 1 to 20\n    # Now calculate the square of that sum\n    ans = (sum_of_numbers / 2) ** 2\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    round_off_error = 5 / 2  # because it's rounded to the nearest 5 pounds\n    actual_min_price = estimated_price - round_off_error\n\n    return actual_min_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum_ages = 22\n    future_sum_ages = 40\n    years_until_future = future_sum_ages - current_sum_ages\n    return years_until_future\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for x1 in range(98, 103):\n        for x2 in range(98, 103):\n            x3 = 300 - x1 - x2\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_left_to_right = 10\n    toys_between_rabbit_and_elephant = 5\n    \n    rabbit_position_left_to_right = elephant_position_left_to_right - toys_between_rabbit_and_elephant - 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right\n    \n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and \n            pencils % 3 == 2 and \n            pencils % 4 == 3 and \n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    number_of_people = 1 + 3  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits // number_of_people\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    ans = (3 / 7) * 385\n    return ans\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the fraction of the book that each person can write per day as their work rate.\n    # Then, Nancy's work rate is 1/6 per day, and the combined work rate of Nancy and Tim is 1/4 per day.\n\n    nancy_rate = 1/6\n    combined_rate = 1/4\n\n    # Let tim_rate be the rate at which Tim can write the book alone\n    tim_rate = symbols('tim_rate')\n\n    # Equation representing combined work rate of Nancy and Tim\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n\n    # Solving for tim_rate\n    tim_rate_solution = solve(equation, tim_rate)\n\n    # The time it takes Tim to complete the book by himself is the reciprocal of his work rate\n    tim_time = 1 / tim_rate_solution[0]\n\n    return tim_time\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass of the sauce to grams for ease of calculation\n    total_mass_grams = 172 * 1000\n    \n    # Given the weights per packet\n    weight_p = 300\n    weight_q = 400\n    weight_r = 500\n    \n    # Given the ratio of the packets\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n    \n    # Total ratio\n    total_ratio = ratio_p + ratio_q + ratio_r\n    \n    # Total weight contributed by one set of packets as per the ratio\n    weight_per_set = (ratio_p * weight_p) + (ratio_q * weight_q) + (ratio_r * weight_r)\n    \n    # Number of sets of packets used\n    num_sets = total_mass_grams / weight_per_set\n    \n    # Total number of packets used\n    total_packets = num_sets * total_ratio\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_numbers = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_numbers\n    sum_others = sum(numbers)\n    a = total_sum - sum_others\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n    \n    # Convert the time of the first two traffic lights to seconds\n    first_light_time = 1 * 60  # 1 minute in seconds\n    second_light_time = int(1.5 * 60)  # 1.5 minutes in seconds\n    \n    # Find the least common multiple for the first two traffic lights\n    lcm_two_lights = lcm(first_light_time, second_light_time)\n    \n    # Since all three traffic lights turn green every 9 minutes (540 seconds),\n    # find the least common multiple for the first two and 540 seconds.\n    # This will ensure the third light is synchronized with the 9-minute interval.\n    time_all_lights = 9 * 60  # 9 minutes in seconds\n    \n    # The third light has to be at least 30 seconds or longer\n    # hence start from 30 seconds and find the smallest time greater than\n    # 30 seconds that gives a common multiple with the lcm of the first two lights\n    # and the 9 minute cycle\n    for third_light_time in range(30, time_all_lights + 1):\n        if lcm(lcm_two_lights, third_light_time) == time_all_lights:\n            return third_light_time\n        \n    # If no time was found which should not happen based on the problem constraints, return None\n    return None\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimeters\n    pink_length_cm = 2.5 * 100  # converting meters to centimeters\n    blue_length_cm = 220  # already in centimeters\n    orange_length_cm = 30.5  # already in centimeters\n\n    # Find the longest ribbon\n    longest_ribbon = max(pink_length_cm, blue_length_cm, orange_length_cm)\n\n    # Determine which color corresponds to the longest ribbon\n    if longest_ribbon == pink_length_cm:\n        return \"pink\"\n    elif longest_ribbon == blue_length_cm:\n        return \"blue\"\n    elif longest_ribbon == orange_length_cm:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prep_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50  # 50% discount\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n\n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n\n    total_cars = red_cars + blue_cars + green_cars\n    total_capacity = (red_cars * red_car_capacity) + (blue_cars * blue_car_capacity) + (green_cars * green_car_capacity)\n\n    average_capacity = total_capacity / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    result = 4 + 44 + 444\n    return result\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    percent_boys = (boys / total_students) * 100\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    book_cost_cad = 64\n    exchange_rate = 1.25\n    book_cost_usd = book_cost_cad / exchange_rate\n    return book_cost_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the book is on the 8th shelf from the front and 10th from the back,\n    # then there must be 7 shelves before it and 9 shelves after it.\n    # We add these shelves and include the shelf with the book itself to get the total number of shelves.\n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # The total score required for an average of 90 points for five students\n    total_score_needed = 90 * 5\n    \n    possible_scores = range(0, 101)  # Since scores are whole numbers from 0 to 100\n    \n    # Since all students must score differently, we start with the lowest possible score\n    # for the student with the lowest marks and find the combination of scores that adds up\n    # to the total score needed.\n    for lowest_score in possible_scores:\n        for second_score in possible_scores:\n            if second_score > lowest_score:\n                for third_score in possible_scores:\n                    if third_score > second_score:\n                        for fourth_score in possible_scores:\n                            if fourth_score > third_score:\n                                for fifth_score in possible_scores:\n                                    if (fifth_score > fourth_score and lowest_score + second_score + third_score + fourth_score + fifth_score == total_score_needed):\n                                        return lowest_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the length of Rope B in cm.\n    b = symbols('b')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(3*b, b + 130)  # Ribbon A is 3 times Rope B and also 1 m 30 cm longer than Rope C\n    equation2 = Eq(b + 56, 3*b - 130)  # Rope C is 56 cm longer than Rope B and Rope A is 1 m 30 cm longer than Rope C\n    \n    # Solve the system of equations for b\n    solution = solve((equation1, equation2), b)\n    \n    # Calculate the lengths of Rope A, B, and C in cm\n    rope_b_length = solution[b]\n    rope_c_length = rope_b_length + 56\n    ribbon_a_length = 3 * rope_b_length\n    \n    # Calculate the total length in cm\n    total_length = ribbon_a_length + rope_b_length + rope_c_length\n    \n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest = max(numbers)\n    smallest = min(numbers)\n    \n    result = (2 * largest) - (3 * smallest)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial as fact\n\ndef solution():\n    # Total possible ways to choose 3 letters out of 5 without any restrictions\n    total_ways = fact(5) // (fact(3) * fact(5 - 3))\n    \n    # Ways to choose 3 letter string that includes A and B\n    # The remaining letter can be chosen from the remaining 3 letters (C, D, E)\n    favorable_ways = fact(3) // (fact(1) * fact(3 - 1))\n    \n    # The probability that A and B will both be in the string\n    probability = favorable_ways / total_ways\n    \n    return probability\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel travels for 1.5 hours after they pass each other until Eleanor arrives in City G\n    extra_distance_by_rachel = 84 * 1.5 # The distance Rachel travels after they pass each other\n    \n    # Since Rachel is still 39 km from City F and has traveled an extra distance\n    total_distance_by_rachel = extra_distance_by_rachel + 39\n    \n    # Eleanor travels 4 hours to reach City G from City F\n    # Thus Rachel travels for 2.5 hours before they pass each other \n    # (because when Eleanor takes 1.5 hours after passing Rachel to reach City G, \n    # Rachel is still 39 km away from City F)\n    distance_by_rachel_before_passing = 84 * 2.5\n    \n    # Total distance between the two cities\n    distance_between_cities = total_distance_by_rachel + distance_by_rachel_before_passing\n    \n    return distance_between_cities\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_male = 50\n    total_female = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n\n    student_males = total_male * (student_male_percentage / 100)\n    student_females = total_female * (student_female_percentage / 100)\n    total_students = student_males + student_females\n    total_members = total_male + total_female\n\n    student_percentage = (total_students / total_members) * 100\n\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    fruit_juice_in_first = 200 * 0.35\n    fruit_juice_in_second = 300 * 0.50\n    total_fruit_juice = fruit_juice_in_first + fruit_juice_in_second\n    concentration = (total_fruit_juice / total_volume) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    # Given ratios x:48 and 3:4, we can equate the cross products to find x.\n    x = 48 * 3 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    # Let x be the number of apples Amy has to give to John\n    # Amy will have (37 - x) apples after giving x apples to John\n    # John will have (15 + x) apples after receiving x apples from Amy\n    # According to the problem statement, Amy needs to have 4 more apples than John\n    # Therefore, (37 - x) = (15 + x) + 4\n    # Solving for x:\n    x = (37 - 4 - 15) // 2\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    total_cookies = 855\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, total_cookies)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    # let x be the total number of papers\n    # let y be the original number of papers she plans to mark per hour\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Original plan: x = y * 5\n    # New plan after 1 hour and marking y papers: (x - y) = (y + 6) * 4\n    # Plan if marking 10 more papers per hour: x = (y + 10) * 4\n\n    equation1 = Eq(x, y * 5)\n    equation2 = Eq(x - y, (y + 6) * 4)\n    equation3 = Eq(x, (y + 10) * 4)\n\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Total number of pies of each type\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    chicken_more_than_vegetable = (chicken_pies - vegetable_pies) / chicken_pies\n\n    # (2) Fraction of the vegetable pies less than fruit pies\n    vegetable_less_than_fruit = (fruit_pies - vegetable_pies) / vegetable_pies\n\n    return chicken_more_than_vegetable, vegetable_less_than_fruit\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    bags_packed = markers_left // 5\n    return bags_packed\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug_price, cup_price = symbols('jug_price cup_price')\n\n    equation1 = Eq(4 * jug_price + 5 * cup_price, 85)\n    equation2 = Eq(2 * jug_price + 2 * cup_price, 40)\n    \n    solutions = solve((equation1, equation2), (jug_price, cup_price))\n\n    return solutions[cup_price]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    \n    ans = greatest_1_digit_even + smallest_2_digit_odd\n    return ans\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    sum_of_digits = 0\n    for page in range(1, 208):\n        for digit in str(page):\n            sum_of_digits += int(digit)\n    return sum_of_digits\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_made = 3 / 4\n\n    total_designs = made_designs / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100,1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    ans = 5.4 + 3.7\n    return ans\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speed as 'v' when altitude is 2000 meters\n    v, g, h1, h2 = symbols('v g h1 h2')\n    \n    # Constants\n    g_value = 9.81  # Acceleration due to gravity in m/s^2\n    \n    # Initial height is 3000 meters, final height is 2000 meters\n    h1_value = 3000  # in meters\n    h2_value = 2000  # in meters\n    \n    # Since air resistance is ignored, we use the conservation of energy\n    # Potential energy at h1 + Kinetic energy at h1 = Potential energy at h2 + Kinetic energy at h2\n    # m * g * h1 + 0 = m * g * h2 + 1/2 * m * v^2  (Since initial velocity is 0)\n    # Canceling 'm' from both sides and multiplying by 2 to get rid of the fraction:\n    # 2 * g * h1 = 2 * g * h2 + v^2\n    \n    # Simplified equation\n    equation = Eq(2 * g * h1 - 2 * g * h2, v**2)\n    solution = solve(equation.subs({g: g_value, h1: h1_value, h2: h2_value}), v)\n    \n    # Returning the positive solution since speed cannot be negative\n    return max(solution)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Each pattern has 13 cards, so there are 10 different sets of 4 consecutive numbers\n    # (1-4, 2-5, ..., 10-13) in each pattern. When drawing the cards, for the worst case \n    # scenario, we want to reach the point where we get at least one set of 4 consecutive \n    # numbers for any pattern. \n    \n    # If we draw all four 1s, all four 2s, all four 9s, all four 10s, and one of the 11s,\n    # we are still not guaranteed to have 4 consecutive numbers (worst case scenario).\n    # The moment we draw another card (which is at least 11, 12, or 13), we are guaranteed \n    # to have 4 consecutive numbers. So, the number of cards we need to draw is:\n    \n    # 4 (different patterns) * 4 (1s through 10s) + 1 (any of 11, 12, or 13) + 1 (to ensure 4 consecutive)\n    \n    num_cards_drawn = 4 * 4 * 4 + 1 + 1\n    \n    return num_cards_drawn\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for the cost of a cap (c) and a wristband (w)\n    c, w = symbols('c w')\n\n    # Equation representing that the cost of each cap is 3 times the cost of each wristband\n    eq1 = c - 3 * w\n\n    # Let x be the total money Caleb had. He spent 2/5 of his money on 4 caps and 6 wristbands.\n    # So the equation representing this spend is: 2/5 * x = 4*c + 6*w\n    x = symbols('x')\n    eq2 = 2 * x / 5 - (4 * c + 6 * w)\n\n    # Solve the equations to find values of c, w, and x\n    solution1 = solve((eq1, eq2), (c, w, x))\n\n    # Calculate how much money is remaining after the first transaction\n    money_remaining_after_first_purchase = (3/5) * solution1[x]\n\n    # He bought some more caps with 1/3 of his remaining money\n    money_spent_on_more_caps = (1/3) * money_remaining_after_first_purchase\n    number_of_additional_caps = money_spent_on_more_caps / solution1[c]\n\n    # The total caps he bought are the 4 initial ones plus the additional ones bought with the remaining money\n    total_caps = 4 + number_of_additional_caps\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    remaining_digits = [0, 2, 4, 5, 6, 8, 9]  # Since A, C, and G are given, remove them from the pool\n    \n    # Fix A, C, and G to the given digits and use permutations for the other 7 places\n    for perm in permutations(remaining_digits):\n        num_str = f\"3{perm[0]}1{perm[1]}{perm[2]}{perm[3]}7{perm[4]}{perm[5]}{perm[6]}\"\n        \n        # Convert string to int to check divisibility\n        num = int(num_str)\n        \n        # Check divisibility by corresponding numbers\n        # Since the number ends in 0, it is divisible by 10, no need to check\n        divisible = True\n        for i in range(1, 10):\n            if int(num_str[:i]) % i != 0:\n                divisible = False\n                break\n        \n        # If all conditions are met, return the result\n        if divisible:\n            return tuple(int(digit) for digit in num_str[1:])  # Exclude the first digit A which is given as '3'\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    three_years_ago = ashley_age - 3\n    brother_age = three_years_ago - 2\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    def skipped_page_number(index):\n        # Calculate the correct page number considering every third page is skipped\n        return index + (index // 2)\n\n    # Use loop to find the last valid page number before we exceed the number of pages    \n    index = 1\n    while skipped_page_number(index + 1) <= 89:\n        index += 1\n\n    return skipped_page_number(index)\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    total_tickets = 19\n    total_amount = 75\n    adult_ticket_price = 5\n    child_ticket_price = 3\n\n    for adult_tickets in range(total_tickets + 1):\n        child_tickets = total_tickets - adult_tickets\n        if adult_tickets * adult_ticket_price + child_tickets * child_ticket_price == total_amount:\n            return adult_tickets\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Calculate multiples of 3\n    multiples_3 = 600 // 3\n    \n    # Calculate multiples of 5\n    multiples_5 = 600 // 5\n    \n    # Calculate multiples of both 3 and 5 (i.e., 15)\n    multiples_15 = 600 // 15\n    \n    # Apply the inclusion-exclusion principle\n    ans = multiples_3 + multiples_5 - multiples_15\n    \n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n\n    grandma_age_now = grandma_age_future - (tom_age_future - tom_age_now)\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of students in class A and B\n    A, B = symbols('A B')\n    \n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # Then she has 4A - 20 candies in total\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # Then she has 6B + 16 candies in total\n    # The number of students in class A is twice of class B, A = 2B\n    \n    # Since the total number of candies is the same in both cases,\n    # we can set up the following equation: 4A - 20 = 6B + 16\n    # And we know that A = 2B\n    # Now we can solve this system of equations for A and B\n    \n    equation1 = Eq(4 * A - 20, 6 * B + 16)\n    equation2 = Eq(A, 2 * B)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Get the total number of candies. Now we use either 4A - 20 or 6B + 16 with the found values for A and B\n    total_candies = 4 * solutions[A] - 20\n\n    return total_candies\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    \n    # Coins\n    ten_p = 5\n    twenty_p = 3\n    fifty_p = 1\n    \n    # Ways to make up 70 pence\n    for ten in range(ten_p + 1):\n        for twenty in range(twenty_p + 1):\n            for fifty in range(fifty_p + 1):\n                if ten * 10 + twenty * 20 + fifty * 50 == 70:\n                    ways += 1\n    \n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # To ensure we get 2 stickers of the same colour, we consider the worst-case scenario\n    # using the Pigeonhole Principle. We can pick 1 red and 1 green without getting 2 of the same color.\n    # But the next sticker we pick must be either red or green, which would give us 2 of the same\n    # colour. Hence, the worst-case scenario would require us to pick 3 stickers.\n\n    ans = 3  # 1 red, 1 green, and 1 more of any colour guarantees 2 of the same colour\n    return ans\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Worst case scenario for blue balls: all 4 orange and 2 yellow balls are picked before getting 4 blue balls.\n    # So she would draw 4 (orange) + 2 (yellow) + 1 (to get a 4th ball of any color, which will be blue in the worst case)\n    ans = 4 + 2 + 1\n    return ans\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Each duckling has 2 legs, baby geese have 2 legs, and lambs have 4 legs.\n    total_legs = 36\n    duckling_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    # Subtract the known legs from the total to find the legs of the lambs\n    lamb_legs = total_legs - duckling_legs - baby_geese_legs\n    # Divide by 4 to find the number of lambs\n    lambs = lamb_legs // 4\n    return lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    # Using the formula for the number of matches in a round-robin tournament\n    # where each team plays every other team exactly once:\n    # Number of matches = n * (n - 1) / 2, where n is the number of teams\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation: 3 times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n    # Equation: Total number of sweets given to boys and girls\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    max_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    min_number = int(''.join(map(str, sorted(digits))))\n    return max_number - min_number\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # The top layer has 1 box, the second layer has a square of 2x2 boxes, and the third layer has a square of 3x3 boxes.\n    # So we simply need to sum the squares of the numbers 1 to 3.\n    total_boxes = 1**2 + 2**2 + 3**2\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_spend = 2.35 + 0.78 + 0.65\n    total_given = 5\n    change = total_given - total_spend\n    return round(change, 2)\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies_needed = 600\n    good_copies_A = (3/5) * total_good_copies_needed\n    good_copies_B = (2/5) * total_good_copies_needed\n\n    bad_copies_per_good_A = 1/4\n    bad_copies_per_good_B = 1/5\n\n    total_copies_A = good_copies_A * (1 + bad_copies_per_good_A)\n    total_copies_B = good_copies_B * (1 + bad_copies_per_good_B)\n\n    total_copies_needed = total_copies_A + total_copies_B\n\n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    value = 1.2 + 1.23 + 1\n    ans = value * value - value * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the son's full work time as x\n    son_full_time = symbols('son_full_time')\n\n    # The rate at which the farmer works: 1/24 work per hour\n    farmer_rate = 1 / 24\n\n    # The rate at which the son works: 1/x work per hour\n    son_rate = 1 / son_full_time\n\n    # If they work together for 16 hours, they complete 1 job\n    # The farmer works for all 16 hours, the son only 6 hours\n    equation = Eq(farmer_rate * 16 + son_rate * 6, 1)\n\n    # Solve the equation for son's full time\n    son_full_time_value = solve(equation, son_full_time)\n\n    return son_full_time_value[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles = smiles_per_day * days_in_january\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the amount of sugar in each solution\n    sugar_annie = 300 * 0.15\n    sugar_becky = 400 * 0.25\n    sugar_carol = 300 * 0.35\n\n    # Calculate the total amount of sugar\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n\n    # Calculate the total volume of the solution\n    total_solution = 300 + 400 + 300\n\n    # Calculate the concentration of the resulting sugar solution\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Initial drop height in meters\n    second_bounce_height = initial_height / 2\n    \n    total_distance = initial_height + second_bounce_height * 2\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n    \n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    # The largest three-digit number:\n    max_three_digit = 999\n    \n    # Since we are looking for the largest number divisible by 36,\n    # we start from the largest three-digit number and go down until\n    # we find a number divisible by 36.\n    while max_three_digit % 36 != 0:\n        max_three_digit -= 1\n    \n    return max_three_digit\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    # First, calculate the total number of ways to arrange 5 children\n    total_ways = factorial(5)\n    \n    # Now we calculate the number of ways where Hugh is between Louise and Richard\n    # We treat Louise, Hugh, and Richard as one unit (3 children can be arranged in 3! ways among themselves)\n    # And we then arrange this unit with the other 2 children, giving us 3! * 3 possibilities\n    # (since we have 3 positions where this unit (LHR or RHL) can go)\n    forbidden_ways = factorial(3) * factorial(3)\n    \n    # The number of acceptable arrangements is then the total ways minus the forbidden ways\n    acceptable_ways = total_ways - forbidden_ways\n\n    return acceptable_ways\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    lost_matches = 10\n    total_matches = 5 * lost_matches\n    won_matches = (2 / 5) * total_matches\n    drawn_matches = (7 / 20) * total_matches\n    points = (won_matches * 3) + (drawn_matches * 1)\n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Correct approach to find the dividend\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Correct method: (Divisor * Quotient) + Remainder\n    dividend = (divisor * quotient) + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    for i in range(2, 41, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = 4 * 75 + 3 * 95  # Total cost in pence\n    change = 1000 - total_cost     # Change from £10 (1000p) in pence\n    return change / 100            # Convert pence to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    # First deduction\n    price_after_first_deduction = original_price * (1 - 0.10)\n    # Second deduction\n    final_price = price_after_first_deduction * (1 - 0.20)\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the two means we are looking for\n    mean_first_3, mean_last_5 = symbols('mean_first_3 mean_last_5')\n\n    # Set up the equations based on the given information\n    total_sum = 8 * 555  # Total sum of all 8 numbers\n    equation1 = Eq(mean_first_3 * 3 + mean_last_5 * 5, total_sum)\n    equation2 = Eq(mean_last_5 - mean_first_3, 296)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (mean_first_3, mean_last_5))\n    \n    return solutions[mean_last_5]\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    # Start at 2 and end at 100, counting by twos\n    start = 2\n    end = 100\n    step = 2\n    \n    # Determine how many multiples of two are there from 2 to 100 inclusive\n    count = (end - start) // step + 1\n\n    return count\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    days_for_5_people = 15\n    days_for_unknown_people = 5\n\n    # Calculate the work rate per person per day\n    work_rate_per_person = 1 / (5 * days_for_5_people)\n\n    # Calculate the total work needed\n    total_work = 1\n\n    # Use inverse proportion to find the number of people needed for 5 days\n    people_for_5_days = total_work / (work_rate_per_person * days_for_unknown_people)\n\n    # Calculate the additional people needed\n    additional_people = people_for_5_days - 5\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_position_from_front = pip_position + children_between + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n    return bud_position_from_end\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Equation 1: Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Equation 2: Rasidah spent 3/5 of her money\n    rasidah_left = rasidah - (3/5) * rasidah\n\n    # Equation 3: Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng - (6/7) * chai_seng\n\n    # Equation 4: In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, rasidah_left / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    # Return Rasidah's initial amount\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = symbols('years_ago')\n\n    isaac_age_then = isaac_current_age - years_ago\n    mother_age_then = mother_current_age - years_ago\n\n    equation = Eq(isaac_age_then, mother_age_then / 3)\n\n    years_ago_solution = solve(equation, years_ago)\n\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    age = symbols('age')\n    \n    # Grandma's age conditions\n    condition1 = Eq(age % 4, 2)\n    condition2 = Eq(age % 5, 3)\n    condition3 = Eq(age % 9, 6)\n    \n    # Solve the system of congruences\n    sol = solve((condition1, condition2, condition3), (age))\n    \n    # Return the smallest positive solution\n    ans = min([val for val in sol[age] if val > 0])\n    \n    return ans\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    pounds_per_kg = 2.2\n    kilograms = pounds / pounds_per_kg\n    return kilograms\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(x, y):\n        return sum(range(x, y)) - y\n\n    return custom_op(5, 10) - custom_op(4, 9)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    # Elena's speed\n    elena_speed = 8  # m/s\n    \n    # Cat's speed\n    cat_speed = 3  # m/s\n    \n    # Relative speed between Elena and her cat\n    relative_speed = elena_speed - cat_speed  # m/s\n    \n    # Initial distance between Elena and her cat\n    distance = 500  # meters\n    \n    # Time taken to catch up\n    time_to_catch_up = distance / relative_speed  # seconds\n    \n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3]\n    all_permutations = list(permutations(digits, 3))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes_within_20 = list(primerange(1, 21))\n    count = 0\n    for prime in primes_within_20:\n        if isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_diff = [differences[i] - differences[i - 1] for i in range(1, len(differences))]\n    \n    # Since it's a double arithmetic sequence, the difference of the differences should be constant.\n    # Verify the second_diff is constant.\n    assert len(set(second_diff)) == 1\n    \n    next_diff = differences[-1] + second_diff[0]\n    next_number = 50 + next_diff\n    \n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways to arrange the first four cards\n    first_four = factorial(4) # 4!\n    \n    # Number of ways to choose an even number as the last digit (2 or 4)\n    last_digit_even = 2\n\n    # Number of ways to arrange the cards: 4! * 2\n    total_ways = first_four * last_digit_even\n\n    return total_ways\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1,10):\n        ones_digit = 15 - tens_digit\n        if 0 <= ones_digit <= 9:\n            return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_initial = 8 * 50 # Mean weight times number of apples initially\n    total_weight_final = 9 * 52 # Mean weight times number of apples after adding extra apple\n    weight_of_extra_apple = total_weight_final - total_weight_initial\n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Initialize a count for the total lights on\n    count = 0\n    \n    # Iterate over each light\n    for i in range(1, 251):\n        # If the number of factors (including 1 and itself) is odd,\n        # the light will remain on. For natural numbers, this happens\n        # only when the number is a perfect square.\n        # Check if 'i' is a perfect square by converting the square root to an integer\n        # and back, and checking equality with original number.\n        if int(i**0.5)**2 == i:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    return -4**2\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    # Let x be the total number of pages in the document\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Original time to finish copying the document\n    original_time = x / 50\n    # New time to finish copying the document after speeding up\n    new_time = x / 70\n    # Equation based on the fact that new_time is 2 minutes less than original_time\n    equation = Eq(original_time - new_time, 2)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the number of pages as an integer since the number of pages cannot be a fraction\n    return int(solution[0])\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    term_number = 30\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Start date is January 28, 2013 - which was a Monday\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    \n    # Leap years have an extra day in February\n    def is_leap_year(year):\n        return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    \n    # Look for the next year where January 28 is Monday\n    current_date = start_date + one_year\n    while True:\n        # Adjust for leap year\n        if is_leap_year(current_date.year - 1):\n            current_date += one_day\n        if current_date.weekday() == 0:  # 0 is Monday\n            return current_date.year\n        current_date += one_year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    equation1 = Eq(oranges - apples, 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n    \n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    # Set the divisor to the smallest possible integer that can be\n    # divided by and leave a remainder of 7, which is clearly 8,\n    # since 1 * 8 will leave us with a remainder just above 0.\n    divisor = 8\n\n    # The smallest dividend which gives us remainder 7 when divided by 8\n    # must be 7 more than a multiple of 8. The smallest multiple of 8 is 0\n    # (since we're looking for positive integers), thus the smallest dividend\n    # is 8 * 0 + 7, which is 7.\n    # However, we need the result to be 8, meaning the smallest whole part\n    # of the quotient is 1. So the actual smallest dividend is 8 * 1 + 7.\n    dividend = 8 * 8 + 7\n    \n    return dividend, divisor\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    jogging_time = 1  # from 6:30 AM to 7:30 AM\n    walking_time = 2  # from 7:30 AM to 9:30 AM\n\n    jogging_speed = 6  # in miles per hour\n    walking_speed = 5  # in miles per hour\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    savings_duration = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_savings = original_amount + (daily_savings * savings_duration) - lent_to_brother - spent_on_snacks\n\n    return total_savings\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    original_cost = 400\n    discount_rate = 0.10\n    num_members = 30\n    \n    discounted_cost = original_cost * (1 - discount_rate)\n    cost_per_member = discounted_cost / num_members\n    \n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_charge = 80  # base charge in cents for up to 15 minutes\n    additional_charge = 5  # additional charge in cents per minute after 15 minutes\n    total_cost = 140  # total cost in cents\n    \n    # Deduct the base charge to find out the cost of additional minutes\n    additional_cost = total_cost - base_charge\n    \n    # Calculate number of additional minutes\n    additional_minutes = additional_cost // additional_charge\n    \n    # Total minutes is the sum of the first 15 minutes plus any additional minutes\n    total_minutes = 15 + additional_minutes\n    \n    return total_minutes\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return (a % 3 + b % 3) + (a // 3 * b // 3)  # Custom operation definition from the given pattern\n        \n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(4 * x - 13, 55)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sara_num = symbols('sara_num')\n\n    equation = Eq(((sara_num - 4) / 2) + 11, 37)\n\n    sara_initial_num = solve(equation, sara_num)\n\n    return sara_initial_num[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5 + 1) * 5\n    last_multiple = 120 // 5 * 5\n\n    num_multiples = (last_multiple - first_multiple) // 5 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_length = 900\n    companies = 4\n    days = 5\n\n    one_company_work_per_day = (total_length / companies) / days\n\n    return one_company_work_per_day\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(10 - 2*x + 7*x, 35)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n    # This means Gina was born on 1955 (since 2005 - 50 = 1955)\n\n    # James's age on 10th May 1997\n    james_age_1997 = 20\n    # This means James was born on 1977 (since 1997 - 20 = 1977)\n\n    # We need to find James's age when Gina was 35\n    # Calculate the year when Gina was 35\n    gina_age_35_year = 1955 + 35  # 1990\n\n    # Now calculate James's age in 1990\n    james_age_in_1990 = 1990 - 1977  # James's age when Gina was 35\n\n    return james_age_in_1990\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Last digit in a power cycle for 2 is 2, 4, 8, 6 and it repeats every 4 powers\n    last_digit_2 = pow(2, 2017 % 4)\n\n    # Last digit in a power cycle for 3 is 3, 9, 7, 1 and it repeats every 4 powers\n    last_digit_3 = pow(3, 2017 % 4)\n\n    # Multiplying last digits of both expressions\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2.5 / 0.25\n    return int(total_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy = 5\n    eddie = 9\n    between = 2\n    total_people = (lucy - 1) + between + 1 + (eddie - 1)\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f\"26{B}789\") % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    # Since the remainder must be a prime number and less than the divisor,\n    # the possible remainders are:\n    # For 3: 2 (since 1 is not prime)\n    # For 5: 2, 3\n    # For 7: 2, 3, 5\n    # For 8: 2, 3, 5, 7\n\n    # We start checking from the lowest common multiple of 3, 5, 7, and 8\n    # and add the largest possible remainder which is 7 to get the smallest number\n    # that when divided by 8 gives a remainder of 7.\n    lcm = 3*5*7*8\n    for i in range(7, lcm, lcm):\n        if (i % 3 in [2]) and (i % 5 in [2, 3]) and (i % 7 in [2, 3, 5]) and (i % 8 in [2, 3, 5, 7]):\n            # Collect remainders to ensure they are all different primes\n            remainders = {i % 3, i % 5, i % 7, i % 8}\n            if len(remainders) == 4:\n                return i\n    return -1\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8    # Convert meters to centimeters\n    remain_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remain_length_cm / 9\n\n    # Convert centimeters back to meters and centimeters\n    stripe_length_m = stripe_length_cm // 100\n    stripe_length_extra_cm = stripe_length_cm % 100\n    \n    return (stripe_length_m, stripe_length_extra_cm)\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')  # Define variables\n\n    # Equation based on total number of flowers\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    \n    # Equation based on ratio of orchids to tulips\n    equation2 = Eq(orchids/tulips, 3/5)\n    \n    # Equation based on flowers left after sales\n    equation3 = Eq((orchids - 0.4 * orchids) + \n                   (tulips - (1/5) * tulips) + \n                   (roses - 0.25 * roses), 2644)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    max_left_handed_girls = total_girls - (total_pupils - right_handed)\n    right_handed_girls = total_girls - max_left_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 4 + 5 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    result = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return result\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    books, files = symbols('books files')\n    total_cost = Eq(12 * books + 9 * files, 336)\n    more_books = Eq(books, files + 14)\n   \n    solutions = solve((total_cost, more_books), (books, files))\n    \n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    power = 2013\n    ones_digits = []\n\n    for i in range(1, 10):\n        ones_digit = (i ** power) % 10\n        ones_digits.append(ones_digit)\n\n    ans = sum(ones_digits) % 10\n\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In the worst case, Peter may take one sock of each color before he gets two socks of the same color.\n    # Therefore, after he has taken one red, one blue, and one black sock (3 socks in total),\n    # the next sock he takes must match one of the colors he already has.\n    \n    socks_needed = 3 + 1  # The three different socks + 1 more to guarantee a pair.\n    return socks_needed\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Japan time of departure\n    departure_japan_time = datetime(2023, 7, 2, 20, 0)  # 8:00 PM, July 2nd\n\n    # France time of arrival\n    arrival_france_time = datetime(2023, 7, 3, 1, 0)  # 1:00 AM, July 3rd\n\n    # Adjust France arrival to Japan time by adding the time difference\n    arrival_japan_time = arrival_france_time + timedelta(hours=7)  \n\n    # Calculate the flight duration\n    flight_duration = arrival_japan_time - departure_japan_time\n\n    # Get the duration in hours\n    flight_duration_hours = flight_duration.total_seconds() / 3600\n\n    return flight_duration_hours\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 10):\n        total_digits += i * (min(131, 10**i - 1) - 10**(i-1) + 1)\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    skipped_questions = 3\n    correct_mark = 4\n    incorrect_mark = -1\n    total_score = 168\n\n    # Number of questions attempted\n    attempted_questions = total_questions - skipped_questions\n\n    for correct_answers in range(attempted_questions + 1):\n        incorrect_answers = attempted_questions - correct_answers\n        score = correct_answers * correct_mark + incorrect_answers * incorrect_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one necklace (n) and one earring (e)\n    n, e = symbols('n e')\n\n    # Set up equations based on the given information\n    equation1 = Eq(9*n + 5*e, 1440)  # Equation for 9 necklaces and 5 earrings\n    equation2 = Eq(2*n + 3*e, 439)    # Equation for 2 necklaces and 3 earrings\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, e))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solutions[n] + solutions[e]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    \n    # Eugene had 5 times as many coins as Sid\n    equation1 = Eq(eugene, 5 * sid)\n    \n    # After using coins, they had 51 coins left altogether\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # since 0 cannot be the first digit of a 2-digit number, we have two options for the first place (1, 2)\n    first_digit_options = 2\n    # for the second digit, we can use 0, 1, or 2, giving us three options\n    second_digit_options = 3\n    # by the multiplication principle, the total number of combinations is the product of the options\n    total_combinations = first_digit_options * second_digit_options\n    return total_combinations\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # We know that the sum of an arithmetic sequence is given by\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms.\n    # For five consecutive even numbers, the common difference (d) is 2.\n    # Let the first term be x. Then the terms are x, x+2, x+4, x+6, x+8.\n    # The sum of these terms is given by:\n    # sum = 5/2 * (x + x + 8)\n    # sum = 5/2 * (2x + 8)\n    # sum = 5 * (x + 4)\n    # Since the sum is 200, we have:\n    # 200 = 5 * (x + 4)\n    # x + 4 = 200 / 5\n    # x + 4 = 40\n    # x = 40 - 4\n    # x = 36, which is the smallest of the five numbers.\n    return 36\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # The initial amount of sugar in each container\n    sugar_A = 50 * 0.10\n    sugar_B = 30 * 0.20\n\n    # The final amount of water in each container after x grams are transferred\n    water_A = 50 - x\n    water_B = 30 - x\n\n    # The final concentration of sugar in each container after x grams are transferred\n    # Assuming the concentration of sugar is the same after the transfer\n    concentration_A = (sugar_A + 0.20 * x) / water_A\n    concentration_B = (sugar_B - 0.10 * x) / water_B\n\n    # The equation we need to solve is that the concentration should be the same\n    equation = Eq(concentration_A, concentration_B)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    result = 0\n    numerator = 1\n    denominator = 1\n    for i in range(97, 0, -1):\n        numerator *= (i + 3)\n        denominator *= i\n        result += (numerator / denominator)\n    return result\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Katie needs 8 minutes to cut a piece of wood into 5 sections\n    # This means she makes 4 cuts (since 5 sections require 4 cuts)\n    time_for_4_cuts = 8\n    \n    # To cut the piece of wood 6 times, she needs to make 6 cuts\n    # If her speed is the same, then the time needed is directly proportional to the number of cuts\n    cuts_needed = 6\n\n    # Direct proportion calculation for the time needed\n    time_for_6_cuts = (time_for_4_cuts / 4) * cuts_needed\n\n    return time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    # To be elected, Peter needs more than half of the total votes.\n    # Therefore, we find the next whole number above half the total votes.\n    votes_needed = total_votes // 2 + 1\n\n    # Now we subtract the votes Peter already has to find out how many more he needs.\n    additional_votes_needed = votes_needed - peter_votes\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation: boys + girls = total number of pupils\n    equation1 = Eq(boys + girls, 995)\n    # Equation: there are 7 fewer girls than boys\n    equation2 = Eq(girls + 7, boys)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    numbers = [31, 32]\n    highest_value = max(numbers)\n\n    return highest_value\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # in pence\n\n    # Let the number of each kind of coin be x.\n    # Therefore, the total amount can be calculated as 5x + 10x + 20x in pence.\n    # The total amount in the money box will be 35x because 5+10+20 = 35.\n    # Solving for x in the equation 35x = total_amount gives us the number of each coin.\n    \n    # Calculate the number of each coin (which must be a whole number)\n    x = total_amount // 35\n\n    # Calculate the total number of coins\n    total_coins = x * 3  # because we have an equal number of three kinds of coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount_amount = 189\n    percentage_reduction = (discount_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_days = 9\n    total_sweets = 135\n    daily_increment = 3\n\n    # Let's say he ate 'a' sweets on the first day. Then, the sum of the arithmetic\n    # sequence is given by the formula:\n    # total_sweets = total_days/2 * (2*a + (total_days - 1) * daily_increment)\n\n    # Rearrange the above equation to solve for 'a'.\n    a = (total_sweets * 2 - daily_increment * (total_days - 1) * total_days) / (2 * total_days)\n\n    # The number of sweets eaten on the last day would be:\n    # (first_day_sweets) + (total_days - 1) * daily_increment\n    sweets_last_day = a + (total_days - 1) * daily_increment\n\n    return int(sweets_last_day)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    book_cost = initial_money * 0.10\n    money_left_after_book = initial_money - book_cost\n    dvd_cost = money_left_after_book * 0.20\n    money_left = money_left_after_book - dvd_cost\n    return money_left\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # Annie's initial amount in dollars\n    gift_cost = 20       # The cost of the gift in dollars\n\n    amount_left_in_dollars = initial_amount - gift_cost\n    amount_left_in_cents = amount_left_in_dollars * 100  # Convert the remaining amount to cents\n\n    return amount_left_in_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    \n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 186):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 0.10\n    \n    new_annual_salary = annual_salary + annual_salary * pay_rise_percentage\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # iterate through the months\n        for day in range(1, 32):  # iterate through the days\n            if day > 30 and month in [4, 6, 9, 11]: \n                # April, June, September, November have only 30 days\n                continue\n            if day > 29 and month == 2: \n                # February has at most 29 days\n                continue\n            if month * 31 + day * 12 == 376:  # check the condition\n                # convert to \"ddmm\" format\n                return f'{day:02d}{month:02d}'\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    missing_number = (4.08 * 20 - 1.08 * 20) / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    terms = [119, 117, -115, 113, -111, 109, -107, 105, -103, 101, -99]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n\n    total_cost = price_per_cooker * number_of_cookers\n\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Normal cost of calculators and protractors\n    calculator_cost = 6\n    protractor_cost = 0.30\n\n    # Discounted cost of calculators and protractors\n    calculator_discounted_cost = calculator_cost * (1 - 0.25)\n    protractor_discounted_cost = protractor_cost * (1 - 0.5)\n\n    # David's purchase\n    calculators_bought = 8\n    protractors_bought = 20\n\n    # Total cost\n    total_cost = (calculators_bought * calculator_discounted_cost) + (protractors_bought * protractor_discounted_cost)\n\n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 25 / 40\n    milk_amount = 80 * flour_ratio\n    return milk_amount\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n    sweets_initial = sweets_taken + sweets_left\n    \n    return sweets_initial\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let x be the current age of the older elephant\n    # Let y be the current age of the younger elephant, which is given as 18 years old\n\n    # According to the problem statement, when the younger elephant reaches the current age of the older elephant (say after t years), the older elephant will be 62 years old.\n    # Therefore, we can form the following equation:\n    # x + t = 62 (1), where t is the number of years it takes for the younger elephant to reach the older elephant's current age\n    # Also, it is given that the younger elephant is currently 18 years old. So, after t years, the younger elephant's age will be:\n    # y + t = x (2)\n\n    # We already know the value of y, which is 18. We can substitute it into equation (2) to determine the value of t:\n    # 18 + t = x (3)\n\n    # We can now substitute equation (3) into equation (1):\n    # (18 + t) + t = 62\n    # 18 + 2t = 62\n    # 2t = 62 - 18\n    # 2t = 44\n    # t = 44 / 2\n    t = 22\n\n    # Now we have the value of t, we can find the current age of the older elephant, x:\n    # x = 18 + t\n    x = 18 + t\n\n    return x\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let's consider the total amount of grass to be g,\n    # the rate at which one ox eats the grass to be r,\n    # and the time it takes for 21 oxen to finish the grass to be t weeks.\n    # According to the problem, we have two equations:\n    # 27 oxen * 6 weeks * r (rate) = g (total grass)\n    # 23 oxen * 9 weeks * r (rate) = g (total grass)\n    \n    # Equating the total amount of grass gives us:\n    # 27 * 6 * r = 23 * 9 * r\n    # This implies 27 * 6 = 23 * 9\n    # Solving for r gives us r cancels out on both sides.\n    \n    # Now we need to use the total grass g, to find out how long 21 oxen would take.\n    # We have g = 27 * 6 * r, replacing g in terms of 21 oxen gives us:\n    # 21 * t * r = 27 * 6 * r\n    # Solving for t gives us t = (27 * 6) / 21\n    \n    t = (27 * 6) / 21\n    return t\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_in_kg = (tonnes * 2 / 3) * 1000  # Convert tonnes to kg\n    return two_thirds_in_kg\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen rides a bike to the train station at 10 mph for 1 hour.\n    bike_distance = 10 * 1\n\n    # Ellen takes a train at 50 mph for 2 hours.\n    train_distance = 50 * 2\n\n    # Total distance traveled is the sum of both distances.\n    total_distance = bike_distance + train_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # There are 3 choices (A, B, C) for each ball, hence for 5 balls\n    ways_to_put_balls = 3 ** 5\n    \n    return ways_to_put_balls\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    return (0.02)**2\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    total_marbles = Eq(blue + red + green, 112)\n\n    blue_marbles = solve(total_marbles, blue)\n\n    return blue_marbles[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return numerator // denominator\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd from front to back and 2nd from back to front,\n    # which means there are 3 + 2 - 1 rows.\n    rows = 3 + 2 - 1\n    \n    # Lucas is 4th from left to right and 3rd from right to left,\n    # which means there are 4 + 3 - 1 columns.\n    columns = 4 + 3 - 1\n    \n    # The total number of students is rows multiplied by columns\n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts of money Ema and Keng Wee have\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Ema had $360 less than Keng Wee\n    equation1 = Eq(ema, keng_wee - 360)\n\n    # Ema spent 1/4 of her money, so she has 3/4 left\n    # Keng Wee spent 4/7 of his money, so he has 3/7 left\n    # In the end, they have the same amount of money\n    equation2 = Eq(ema * (3/4), keng_wee * (3/7))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while True:\n        if sum(map(int, str(num))) == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    value = (1/4) * 36\n    ans = value * 10\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # from front to back: 3rd position\n    # from back to front: 2nd position -> there are 3 + 2 - 1 = 4 students in this column\n    front_back = 3 + 2 - 1\n\n    # from left to right: 4th position\n    # from right to left: 3rd position -> there are 4 + 3 - 1 = 6 students in this row\n    left_right = 4 + 3 - 1\n\n    # Total students in the rectangular array\n    total_students = front_back * left_right\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    # Let g be the original number of girls and b be the number of boys.\n    from sympy import symbols, Eq, solve\n    \n    g, b = symbols('g b')\n    \n    # Original ratio of girls to boys: g/b = 9/11\n    equation1 = Eq(g, 9*b/11)\n    \n    # After 2 girls are transferred in: (g + 2)/b = 10/11\n    equation2 = Eq(g + 2, 10*b/11)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n    \n    # Calculate the current number of students\n    current_students = solutions[g] + 2 + solutions[b]\n    \n    return current_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 11):\n        total_sum += (1 + i) / i * i / 2  # Sum of sequence (1/i + 2/i + ... + i/i)\n\n    return total_sum\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq = Eq(2*(3*x - y), 2*x + 4)\n    solutions = solve(eq, (x, y))\n\n    # Substitute x and y into (2x - y)\n    value = 2 * solutions[x] - solutions[y]\n    return value\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_spent = (3 * 31) + (2 * 17) + 78 + (1.05 * 100)  # Convert £1.05 to pence\n    change = (5 * 100) - total_spent  # Convert £5 to pence and calculate the change\n\n    return change / 100  # Convert the change back to pounds\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n\n    more_tiles = solutions[lim] - solutions[tan]\n\n    return more_tiles\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    zehan_current_age = symbols('zehan_current_age')\n    \n    future_age_equation = Eq(zehan_current_age + 12, 3 * zehan_current_age)\n\n    solutions = solve(future_age_equation, zehan_current_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "def solution():\n    from math import comb\n    # Choose exactly one of A, B or C\n    # There are 3 ways to choose either A, B, or C\n    chooses_one_of_ABC = 3\n    # From the remaining 12 students, we choose 4 more to make the team of 5\n    chooses_other_four = comb(12, 4)\n    # Total number of ways\n    total_ways = chooses_one_of_ABC * chooses_other_four\n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n\n    price_per_ticket = total_cost / number_of_tickets\n\n    return price_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    decimal_value = 0.36\n    percent_value = decimal_value * 100\n    return percent_value\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the initial amount of lemon juice in the bottle\n    x = symbols('x')\n\n    # Initial ratio is 2:3, so for every 2 parts of lemon juice, there were 3 parts of water \n    # So, initial water amount is (3/2) * x\n\n    # 80 ml of lemon juice is added, making the total lemon juice x + 80\n    # The new ratio of lemon juice to water is 6:5, so (x + 80) / ((3/2) * x) = 6 / 5\n    \n    equation = Eq((x + 80) / ((3/2) * x), 6/5)\n\n    # Solve for 'x'\n    initial_lemon_juice = solve(equation, x)[0]\n\n    return initial_lemon_juice\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    savannah_ratio = 5\n    shaila_sweets = 36\n\n    total_sweets = shaila_sweets * (savannah_ratio + shaila_ratio) / shaila_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n    \n    # Kim gave 1/3 of her savings to her mother\n    gave_to_mother = (1/3) * savings\n    \n    # Money left after buying dresses and earrings\n    money_left = savings - (177 + 129)\n    \n    # The money left is 50% of what she gave to her mother\n    equation = Eq(money_left, 0.5 * gave_to_mother)\n\n    # Solve the equation to find the total savings\n    total_savings = solve(equation, savings)\n\n    return total_savings[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60\n    increased_speed = usual_speed * 1.30\n    \n    # The time saved by increasing the speed should compensate for the 9 minutes delay\n    # Let the distance to travel be x miles\n    # time = distance / speed\n    # The equation: x / usual_speed - x / increased_speed = 9 / 60 hours\n    \n    time_delay_hours = 9 / 60\n    x = (usual_speed * increased_speed * time_delay_hours) / (increased_speed - usual_speed)\n    \n    return x\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let x be the number we are trying to find\n    # According to the problem statement, we have:\n    # ((x + 8) * 8 - 8) / 8 = 80\n    # Simplify the equation to solve for x\n    x = (80 * 8 + 8) / 8 - 8\n    \n    return x\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for original speed (s) and time (t)\n    s, t = symbols('s t')\n\n    # 25% increase in speed leads to a 20 minute decrease in time\n    equation1 = Eq(s * 1.25 * (t - 20/60), s * t)\n\n    # Decrease speed by 45 m/min leads to a 75% increase in time\n    equation2 = Eq((s - 45) * t * 1.75, s * t)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Calculate the distance based on the original speed and time\n    distance = solutions[s] * solutions[t]\n\n    return distance.evalf()\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    \n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if (red_ropes * 2 + blue_ropes * 3) == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both = 21\n\n    only_one_event = (skipping_rope - both) + (long_jump - both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_year = 12\n    \n    total_second_half = average_second_half * (months_in_year / 2)\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / months_in_year\n    \n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9 * 7):\n        if i % 7 == 0 and (i - 2) % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22 // 2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n    \n    used_flour = brownies + cookies + muffins\n    \n    return used_flour.simplify()\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    # Since the difference between the smallest and greatest factor is 41,\n    # and the smallest factor of any number greater than 1 is 1,\n    # This implies that the greatest factor (which is the number A itself) is 42.\n    A = 42\n\n    # To find the 7th multiple of A, we multiply A by 7.\n    seventh_multiple_of_A = A * 7\n\n    return seventh_multiple_of_A\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given ratio of height to width is 3:4\n    # The height of the television screen is given as 21 cm\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n    \n    # Since the height corresponds to the ratio of 3, we find the corresponding width\n    # using the equivalent ratio for 4\n    width = (height / ratio_height) * ratio_width\n    \n    # The perimeter of a rectangle is given by 2 * (height + width)\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    product = 1\n    for i in range(2, 12):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 / 5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    # Let's denote the weight of Jessie as J and the weight of Buzz as B\n    # From the problem description, we are given two equations:\n    # B = 3J (Buzz is three times as heavy as Jessie)\n    # B = J + 450 (Buzz is 450g heavier than Jessie)\n    \n    # Let's use simple algebraic manipulation to find the weight of Buzz (B)\n    # Using the second equation, we can express J in terms of B:\n    # J = B - 450\n    \n    # Then, substituting this into the first equation, we get:\n    # B = 3(B - 450)\n    # B = 3B - 1350\n    # B - 3B = -1350\n    # -2B = -1350\n    # B = 1350 / 2\n    # B = 675 grams\n    \n    return 675\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # We have two equations:\n    # Equation 1: x - y = -36 (since x is the smaller number, to have a positive difference, we subtract the larger number from it)\n    # Equation 2: x + y = 98\n    # We can solve these two equations for x\n\n    # Add the equations to eliminate y:\n    # (x - y) + (x + y) = -36 + 98\n    # 2x = 62\n    # x = 31\n\n    return 31\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_terms\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Calculate the last digit of each base, raised to the 100th power\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10  # But since we're only interested in the last digit, it's the same as (1 ** 100) % 10\n\n    # Multiply the last digits together to find the last digit of the entire expression\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    percent_correct = 0.70\n    correct_points = 3\n    wrong_points = -1\n    total_score = 78\n\n    correct_answers = total_questions * percent_correct\n    wrong_answers = total_questions - correct_answers\n    \n    marks_from_correct = correct_answers * correct_points\n    marks_from_wrong = wrong_answers * wrong_points\n    \n    score = marks_from_correct + marks_from_wrong\n    \n    # Adjust the number of correct and wrong answers until score matches total_score\n    while score != total_score:\n        correct_answers -= 1\n        wrong_answers += 1\n        score = (correct_answers * correct_points) + (wrong_answers * wrong_points)\n        \n    return int(correct_answers)\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given:\n    cost_of_6_files_and_10_rulers = 40\n    # We need to find the cost of 9 files and 15 rulers.\n    # Since the costs are directly proportional, we do a ratio multiplication\n    # (6 files / 9 files) = (10 rulers / 15 rulers), we multiply the given total cost by 1.5\n    multiplier = 1.5\n    cost_of_9_files_and_15_rulers = cost_of_6_files_and_10_rulers * multiplier\n    return cost_of_9_files_and_15_rulers\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John and Jessie's original amounts\n    jessie, john = symbols('jessie john')\n\n    # Equation 1: John originally had 5/13 of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n\n    # Equation 2: After transfer, John has 50% of Jessie's money.\n    # jessie - 600 is Jessie's money after giving 600 to John\n    # john + 600 is John's money after receiving 600 from Jessie\n    equation2 = Eq(john + 600, 0.5 * (jessie - 600))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Calculate the total amount of money they had originally\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    n, ones, twos = 0, 0, 0\n\n    while True:\n        n += 1\n        ones += str(n).count('1')\n        twos += str(n).count('2')\n        if ones == 15 and twos == 14:\n            return n\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "def solution():\n    from datetime import datetime\n\n    time_in = datetime.strptime(\"10:30\", \"%H:%M\")\n    time_out = datetime.strptime(\"11:00\", \"%H:%M\")\n\n    baking_time = (time_out - time_in).total_seconds() / 60  # convert to minutes\n\n    return baking_time\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tshirts, caps = symbols('tshirts caps')\n    equation1 = Eq(tshirts / caps, 8/5)\n    equation2 = Eq((1/4) * tshirts * 3 + (1/5) * caps * 5, 132)\n\n    solutions = solve((equation1, equation2), (tshirts, caps))\n\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = (3 * 12) + (5 * 11)  # Total cost in pence\n    total_paid = 200  # Amount paid in pence (£2 = 200p)\n    change = total_paid - total_cost  # Change in pence\n\n    pounds = change // 100  # Convert pence to pounds\n    pence = change % 100  # Remainder in pence\n\n    return pounds + pence / 100  # Combine pounds and pence\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    gap_between_ages = 2\n    total_children = 7\n\n    harvirs_age = youngest_age + (total_children - 1) * gap_between_ages\n\n    return harvirs_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n    \n    total_spent = calendar_price + ball_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_used = (1/5) + (1/2)\n    flour_left = 360 / 1000  # Convert grams to kilograms\n    flour_initial = flour_used + flour_left\n\n    return flour_initial\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Conversion of total cost to pence from pounds.\n    total_cost = 500  # 5 pounds in pence\n    \n    # Initialize the maximum possible count for each fruit, considering the cost of one.\n    max_oranges = total_cost // 26\n    max_lemons = total_cost // 30\n    \n    # Initialize ans to None to return if no solution is found.\n    ans = None\n    \n    # Check all possible combinations to find which one gives the exact amount\n    for oranges in range(max_oranges + 1):\n        for lemons in range(max_lemons + 1):\n            # If the combination of oranges and lemons multiplied by their respective costs\n            # equals the total cost, we have a viable solution.\n            if (oranges * 26) + (lemons * 30) == total_cost:\n                return oranges + lemons  # Return the total number of fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # Since the order of sitting around a circular table is considered the same when rotated,\n    # we need to fix one person's position and count the permutations of the remaining people.\n    num_people = 4  # Judy, James, Bowen, and the person asking the question\n    # Fix one person's position to avoid counting rotations as different orders.\n    fixed_positions = num_people - 1\n    # Calculate the permutations of the remaining people.\n    ans = factorial(fixed_positions)\n    return ans\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    result = delta(star(delta(3, 4), 5), 6)\n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    total_cookies = 298\n    cookies_per_box = 8\n    \n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female visitors on the first day\n    # Let m be the number of male visitors on the first day\n    f, m = symbols('f m')\n\n    # Eq1: On the first day, the number of male visitors was 450 more than the number of female visitors\n    eq1 = Eq(m - f, 450)\n\n    # Eq2: On the second day, total visitors is 1354\n    # Female visitors increased by 15%: f + 0.15f = 1.15f\n    # Male visitors decreased by 18%: m - 0.18m = 0.82m\n    # Total number of visitors for the second day: 1.15f + 0.82m = 1354\n    eq2 = Eq(1.15 * f + 0.82 * m, 1354)\n\n    # Solve the simultaneous equations\n    res = solve((eq1, eq2), (f, m))\n\n    # Total visitors on the first day: f + m\n    total_visitors_first_day = res[f] + res[m]\n\n    return int(total_visitors_first_day)\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Leo's and Jason's initial amount of money\n    leo, jason = symbols('leo jason')\n\n    # At first, Leo had $220 more than Jason\n    equation1 = Eq(leo, jason + 220)\n    # Leo and Jason receive their salaries\n    leo_salary, jason_salary = 180, 1100\n    # Now, Jason has 2 times as much money as Leo\n    equation2 = Eq(jason + jason_salary, 2 * (leo + leo_salary))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    # Jason's initial amount plus his salary\n    return solutions[jason] + jason_salary\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # sum of all books\n    # calculate factorial of each type of book\n    biographies_fact = factorial(3)\n    science_fiction_fact = factorial(4)\n    magazines_fact = factorial(2)\n    schoolbooks_fact = factorial(2)\n    # calculate total permutations\n    total_permutations = factorial(total_books)\n    # divide by each factorial to account for indistinguishable items\n    ans = total_permutations // (biographies_fact * science_fiction_fact * magazines_fact * schoolbooks_fact)\n    return ans\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        F = (C + E) % 10\n        H = (A + B + (C + E)//10) % 10\n        if len(set(p)) == len(p) and F == p[4] and H == p[1]:\n            return int(f\"{E}{F}{C}{B}{H}\")\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Since the pencils are identical and the pencil cases are also identical,\n    # we need to find the partitions of 7 into at most 3 parts.\n    # This is equivalent to finding solutions to the equation x + y + z = 7,\n    # where x, y, z are non-negative integers and order does not matter.\n    # We can start by initializing the count of ways to 0.\n    count = 0\n\n    # Loop through all possible values for x, y, z,\n    # and count the valid combinations where order doesn't matter.\n    # The largest number of pencils in a case can't be more than 7,\n    # and we have at most 3 pencil cases to distribute them.\n    for x in range(0, 8):\n        for y in range(x, 8):\n            for z in range(y, 8):\n                if x + y + z == 7:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n    robots_per_week = robots_per_day * days_per_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start = 345\n    step = 9\n\n    # Find the smallest multiple of 9 greater than 345\n    multiple = (start // step) * step\n    \n    # If the multiple is not directly 345, subtract another step to get the last positive number\n    if multiple == start:\n        ans = multiple\n    else:\n        ans = multiple - step\n\n    return ans\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000\n    number_of_friends = 5\n\n    each_payment = total_cost / number_of_friends\n\n    return each_payment\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Total amount paid by the children\n    total_amount = 555\n    # Cost of shirt without name\n    shirt_cost_without_name = 10\n    # Cost of shirt with name\n    shirt_cost_with_name = 15\n    # Total number of children\n    total_children = 50\n\n    # Let x be the number of children who paid to have their name put on the shirt\n    # Then, (total_children - x) will be the number of children who didn't\n\n    # Total amount can be represented by the equation\n    # x * shirt_cost_with_name + (total_children - x) * shirt_cost_without_name = total_amount\n    # x * 15 + (50 - x) * 10 = 555\n    # 15x + 500 - 10x = 555\n    # 5x = 555 - 500\n    # 5x = 55\n    # x = 55 / 5\n    x = (total_amount - total_children * shirt_cost_without_name) / (shirt_cost_with_name - shirt_cost_without_name)\n\n    return int(x)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    time_before_speedup, time_after_speedup = symbols('time_before_speedup time_after_speedup')\n    \n    # David walks at 150m/min for the first part, for \"time_before_speedup + 10\" minutes (including the 10-minute lag)\n    equation1 = Eq(150 * (time_before_speedup + 10), 1500)\n    \n    # Then he walks at 200m/min (150+50) for \"time_after_speedup\" minutes\n    equation2 = Eq(200 * time_after_speedup, 3700 - 1500)\n    \n    # The total time spent walking is the sum of both times (considering he starts walking at his initial speed)\n    total_time = time_before_speedup + 10 + time_after_speedup\n    \n    # Solve the system of equations to find the times\n    solutions = solve((equation1, equation2), (time_before_speedup, time_after_speedup))\n    \n    # Sum the times to get the total time\n    return solutions[time_before_speedup] + 10 + solutions[time_after_speedup]\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the number of male visitors on the first day\n    # Let f represent the number of female visitors on the first day\n    m, f = symbols('m f')\n\n    # On the first day, the number of male visitors (m) was 450 more than the number of female visitors (f)\n    equation1 = Eq(m, f + 450)\n\n    # On the second day, the number of female visitors increased by 15%\n    # So the number of female visitors on the second day is f + 0.15*f = 1.15*f\n    # The number of male visitors decreased by 18%\n    # So the number of male visitors on the second day is m - 0.18*m = 0.82*m\n    # The total number of visitors on the second day was 1354\n    equation2 = Eq(1.15*f + 0.82*m, 1354)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (m, f))\n\n    # Extract the number of male visitors on the first day\n    male_visitors_first_day = solutions[m]\n\n    return male_visitors_first_day\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position*2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Calculate the time difference using 24-hour format\n    singapore_departure = 5  # 05:00 in 24-hour format\n    london_arrival = 11      # 11:00 in 24-hour format\n\n    if london_arrival <= singapore_departure:\n        # If the arrival time in London is less than or equal to the departure time from Singapore,\n        # it means the flight has landed on the next day.\n        london_arrival += 24  # Convert to next day time\n    \n    # Adjust London time to Singapore time by adding the time difference\n    adjusted_london_arrival = london_arrival + 7\n    \n    # Calculate flight duration\n    flight_duration = adjusted_london_arrival - singapore_departure\n\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 4 hearts\n    hearts = factorial(4)\n    # Number of ways to arrange 3 spades\n    spades = factorial(3)\n    # Number of ways to arrange 7 diamonds\n    diamonds = factorial(7)\n    # Total number of cards\n    total_cards = 4 + 3 + 7\n    # Number of ways to arrange all the cards\n    total_arrangements = factorial(total_cards)\n    # Divide by the number of arrangements within each suit since they are indistinguishable\n    arrangements = total_arrangements // (hearts * spades * diamonds)\n    return arrangements\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of $5$ is 0.\n    first_digit = 0\n    # Second digit: the smallest odd number among the natural numbers is 1.\n    second_digit = 1\n    # Third digit: the largest odd number in a single digit is 9.\n    third_digit = 9\n    # Fourth digit: the smallest even number in nature is 2.\n    fourth_digit = 2\n    # Fifth digit: the largest single digit that is a multiple of $2$ is 8.\n    fifth_digit = 8\n    # Sixth digit: the smallest odd number greater than $1$ in nature is 3.\n    sixth_digit = 3\n    # Seventh digit: a single digit number, a multiple of $2$ and $5$ is 0 (as it should be even and end with 0 to be multiple of 5).\n    seventh_digit = 0\n\n    # Combine the digits to form the phone number\n    phone_number = str(first_digit) + str(second_digit) + str(third_digit) + \\\n                   str(fourth_digit) + str(fifth_digit) + str(sixth_digit) + str(seventh_digit)\n    \n    # Convert to integer\n    ans = int(phone_number)\n    return ans\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, 1.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages = 80  # Last day pages read\n    pages_per_day_increase = 5\n    day = 1  # Start from the first day\n    pages_read_first_day = 20\n\n    # Calculate total pages read each previous day\n    while total_pages < 80 + 20 * day:\n        total_pages += pages_read_first_day + pages_per_day_increase * (day - 1)\n        day += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    ans = almonds - cashew_nuts\n    return ans\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Johnny's approach seems to be multiplying the remainder by the quotient instead of adding.\n    # His calculation: (9 * 2) + 4 = 22, which is incorrect.\n    # The correct approach to find the dividend is: (quotient * divisor) + remainder.\n    \n    # Given values\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Correct calculation\n    dividend = (quotient * divisor) + remainder\n    \n    # Check Johnny's answer\n    correct = dividend == 22\n    \n    return dividend, correct\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    positive_sum = sum(range(4, 55, 4))\n    negative_sum = sum(range(2, 53, 4))\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    x = symbols('x')\n    eq1 = Eq(x % 6, 3)\n    eq2 = Eq(x % 7, 4)\n    eq3 = Eq(x % 8, 1)\n    result = solve((eq1, eq2, eq3), x)\n    \n    return min(result)\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(10):\n            for M in range(10):\n                for O in range(10):\n                    for G in range(1, 10):\n                        if len({S, A, M, O, G}) == 5:  # Ensure all digits are unique\n                            SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                            OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                            if SASMO * 4 == OGAMS:\n                                return SASMO\n    return None  # If no solution is found\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    for boys in range(41):\n        girls = 40 - boys\n        if boys * 4 - girls * 3 == 62:\n            return boys\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # The sequence pattern is that the number n is repeated n times.\n    # We need to find the total number of elements before the first 11 appears.\n    # That would be 1 + 2 + 2 + 3 + ... + 10, since we want to stop before the first 11.\n    \n    total_elements = sum([i for i in range(1, 11)]) * 2 - 1  # Sum of the first 10 integers, doubled minus 1 for the pattern\n    \n    # Now we find the median of the sequence.\n    # Since the sequence is not strictly increasing, we cannot use the formula for finding the median of an arithmetic sequence.\n    # Instead, we construct the actual sequence up to the first 10.\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n    \n    # The median will be the middle element of this sequence.\n    median = sequence[total_elements // 2]\n\n    return median\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length that is cut from both ropes\n    x = symbols('x')\n\n    # After x is cut from both ropes, new lengths will be: (65 - x) for rope A and (29 - x) for rope B\n    # According to the question, the new length of rope A is 3 times the new length of rope B\n    equation = Eq(65 - x, 3 * (29 - x))\n\n    # Solve the equation to find the value of x\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    num_rolls = 30\n    # Probability of getting a 5 in one roll of a fair die\n    probability_of_five = 1 / 6\n    \n    # Expected number of times getting a 5 in 30 rolls\n    expected_fives = num_rolls * probability_of_five\n\n    return expected_fives\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    ratio_eq1 = Eq(A / B, 2 / 3)\n    ratio_eq2 = Eq(B / C, 6 / 5)\n    average_eq = Eq((A + B + C) / 3, 45)\n\n    solutions = solve((ratio_eq1, ratio_eq2, average_eq), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    # Define variables based on the problem statement\n    dresses = 6\n    dress_cost = 7 # Multiplied by x, so it's 7x per dress\n    skirts = 3\n    skirt_cost = 35\n    total_cost = 441\n\n    # Calculate the total cost of skirts\n    total_skirt_cost = skirts * skirt_cost\n\n    # Subtract the cost of skirts from the total cost to find total cost of dresses\n    total_dress_cost = total_cost - total_skirt_cost\n\n    # Since the total cost of dresses is 6 times the cost of one dress, divide by 6 to find the cost of one dress\n    cost_per_dress = total_dress_cost / dresses\n\n    # The cost per dress is 7x, so we divide by 7 to find the value of x\n    x = cost_per_dress / dress_cost\n\n    return x\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    digits = [1, 3, 5, 7, 9]  # odd digits\n    count = len(digits) ** 3  # three places to fill with odd digits\n    return count\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The pattern shows that when you split the terms, the sum always equals n/(n+1) for n terms\n    # For 2011 terms, n would be 2011\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time taken by the lazy decorator alone to paint the house\n    x = symbols('x')\n    \n    # 1/x is the lazy decorator's work rate\n    # 1/12 is the energetic decorator's work rate\n    # Together, they paint 1/8 of the house in a day\n    equation = Eq(1/x + 1/12, 1/8)\n    \n    # Solve the equation to find the days it would take for the lazy decorator to paint the house alone\n    days_lazy = solve(equation, x)[0]\n    \n    return days_lazy\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):  # Loop through odd numbers from 1 to 999\n        remainder_sum += (i ** 2) % 3\n\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let's denote the original length and width of the rectangle as L and W,\n    # and the modified length as L + 12. The perimeter of the modified rectangle is given as P = 38 cm.\n    # We know that the perimeter of a rectangle is calculated by the formula P = 2(L + W).\n    # The perimeter of the modified rectangle is P_modified = 2(L + 12 + W).\n    # Since the perimeter of the modified rectangle is given, we can set up an equation:\n    # P_modified = 38 = 2(L + 12 + W).\n    # To find the perimeter of the original rectangle, we first need to find the original L and W.\n    \n    from sympy import symbols, Eq, solve\n\n    L, W = symbols('L W')\n\n    # We have one equation from the modified perimeter:\n    equation1 = Eq(2 * (L + 12 + W), 38)\n    \n    # Since we don't have another equation to solve for L and W directly, we can express W in terms of L and substitute back to the perimeter formula:\n    solutions = solve(equation1, W)\n\n    # We now express the perimeter of the original rectangle in terms of L, using the solved value for W from the first equation\n    original_perimeter = 2 * (L + solutions[W])\n\n    # We can now substitute L + 12 for L in the modified perimeter equation since we know the perimeter is 38 when the length is increased by 12 cm.\n    # This gives us L in terms of the original perimeter OP:\n    # 38 = 2(L + 12 + W)\n    # OP = 2(L + W)\n    # Since 38 = OP + 24 (because we've increased the length by 12 cm on both sides of the rectangle), we can solve for OP\n    OP = Eq(original_perimeter - 24, 38)\n\n    # Solving the final equation\n    perimeter_solution = solve(OP)\n\n    # The original perimeter is the solution to our final equation:\n    return perimeter_solution[original_perimeter]\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    n = 11\n    common_difference = 4\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n\n    equation1 = Eq(jamie_anne, natasha + 18)\n    equation2 = Eq(jamie_anne / natasha, 5/3)\n\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    # Looping through possible values for a and b since they are digits (0-9)\n    for a in range(1, 10):  # a cannot be 0 because it's the first digit in a two-digit number\n        for b in range(0, 10):\n            if int(f\"{a}{b}\") + int(f\"{b}{a}\") + b == int(f\"{a}{a}{b}\"):\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins Sana and Mina have.\n    sana, mina = symbols('sana mina')\n\n    # Create two equations based on the problem statement.\n    equation1 = Eq(sana, 8 * mina)  # Sana had 8 times as many coins as Mina.\n    equation2 = Eq(sana + mina, 234)  # Sana and Mina had 234 coins in total.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Mina gave away 12 coins.\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    grapes_sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - grapes_sold_monday\n    grapes_sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - grapes_sold_tuesday\n    grapes_per_bag = 3/4\n    num_bags = remaining_after_tuesday / grapes_per_bag\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    num_students = 123\n    total_flour = flour_per_student * num_students\n\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence_in_pounds = 3.00 * 100  # convert pounds to pence\n    percentage = (15 / pence_in_pounds) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles past 10 lamp posts in 50 seconds\n    # (from the first to the eleventh)\n    posts_per_50_seconds = 10\n\n    # Calculate how many lamp posts he cycles past in 80 seconds\n    # by setting up a proportion (10 posts / 50 seconds = x posts / 80 seconds)\n    posts_per_80_seconds = (posts_per_50_seconds / 50) * 80\n\n    # He always starts at one lamp post and cycles past other lamp posts\n    # The actual number of lamp posts he will cycle past is the number of intervals \n    # plus the starting lamp post\n    total_lamp_posts = posts_per_80_seconds + 1\n\n    return int(total_lamp_posts)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Each corner is counted twice when we multiply the 6 flowers by the 4 sides,\n    # so we subtract the 4 corners to avoid counting them twice.\n    flowers_per_side = 6\n    sides = 4\n    corners = 4\n\n    total_flowers = (flowers_per_side * sides) - corners\n\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples = (2 / 3) * total_items\n    bananas = (1 / 9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n\n    total_items_solution = solve((equation), (total_items))\n\n    lemons_number = lemons.subs(total_items, total_items_solution[0])\n\n    return lemons_number\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    additional_length = 56\n\n    football_field_length = basketball_court_length + additional_length\n\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    ana_discount_percentage = ana_discount * 100\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Factors of 4 are 1, 2, and 4. The sum of these is 7.\n    ones_place = sum([i for i in range(1, 5) if 4 % i == 0])\n    \n    # The digit in the hundreds place has a value of 800, so it is 8.\n    hundreds_place = 8\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place, so it is 9.\n    thousands_place = hundreds_place + 1\n    \n    # The digit in the tens place is the difference between the digit in the hundreds place and the digit in the ones place.\n    tens_place = hundreds_place - ones_place \n    \n    # The number is between 40000 and 50000, so the digit in the ten-thousands place is 4.\n    ten_thousands_place = 4\n    \n    # Assembling the number.\n    number = (ten_thousands_place * 10000 +\n              thousands_place * 1000 +\n              hundreds_place * 100 +\n              tens_place * 10 +\n              ones_place)\n    return number\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    s = 1\n    while True:\n        r_min = (3 * s) // 10 + 1\n        r_max = (5 * s) // 16\n        if r_min <= r_max:\n            break\n        s += 1\n    return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    fraction = 5/6\n\n    total_two_days = first_day + second_day\n    total = total_two_days / fraction\n\n    return int(total)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Total capacity of the bus in terms of children\n    total_capacity_children = 40\n\n    # Number of children already on the bus\n    children_on_bus = 15\n\n    # Remaining capacity for children\n    remaining_capacity_children = total_capacity_children - children_on_bus\n\n    # The capacity ratio between children and adults\n    capacity_ratio = 40 / 24\n\n    # Calculate the greatest number of adults that could be on the same bus\n    # by converting the remaining capacity for children to the equivalent number of adults\n    greatest_number_adults = remaining_capacity_children / capacity_ratio\n\n    return int(greatest_number_adults)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # We need to find the smallest number that can be multiplied by 28 to give a perfect square.\n    # The prime factorization of 28 is 2^2 * 7. To form a perfect square, each prime factor's power\n    # needs to be even. We need another 7 to make the power of 7 even.\n    # So, the smallest number is 7.\n\n    num = 28\n    perfect_square_factor = 1\n\n    # Find prime factors and make the power of each an even number\n    for i in range(2, num + 1):\n        if num % i == 0:  # Found a prime factor\n            count = 0\n            while num % i == 0:\n                count += 1\n                num //= i\n            if count % 2 != 0:  # If count of this prime is odd\n                perfect_square_factor *= i  # multiply the factor to our result\n\n    # Since we need the smallest number, return the largest divisor of 28 that would\n    # make the resulting product a perfect square\n    ans = perfect_square_factor\n    return ans\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3  # time to cook 2 pancakes in minutes\n    total_time = 12  # total cooking time in minutes\n    pancakes_per_minute = 2 / time_for_2_pancakes  # rate of cooking pancakes per minute\n    total_pancakes = total_time * pancakes_per_minute  # total pancakes cooked in 12 minutes\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    uniform_sizes = 3\n\n    min_students_same_size = (total_students // uniform_sizes) + 1\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    ans = triangle_operation(8, triangle_operation(6, 4))\n    return ans\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    spent_on_dvd = 740\n    remaining_after_dvd = salary - spent_on_dvd\n    spent_on_tv = 3/4 * remaining_after_dvd\n    remaining_after_tv = salary - (spent_on_dvd + spent_on_tv)\n    remaining_salary_fraction = 1/5\n\n    equation = Eq(remaining_salary_fraction * salary, remaining_after_tv)\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    # Let's assume Russell's current age is r\n    from sympy import symbols, Eq, solve\n    \n    r = symbols('r')  # Declaration of the symbol\n    # Equation representing the given condition\n    equation = Eq(r + 32, 4 * (r - 16))\n    # Solve the equation to find Russell's age\n    solved_ages = solve(equation, r)\n    \n    # Since we are looking for a realistic age, we need a solution that's positive\n    current_age = [age for age in solved_ages if age > 0][0]\n    \n    return current_age\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percent = 40\n    total = 120\n    ans = (percent / 100) * total\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Opposite numbers in a circle are separated by half the total number of people\n    # The difference between the two given numbers\n    number_difference = 19 - 6\n    \n    # Since they stand opposite, the number difference must account for half the circle\n    # Therefore, the total number of people is twice the difference\n    total_people = number_difference * 2\n\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                pip_number = int(f\"{A}{B}{C}{A}\")\n                bud_number = int(f\"{A}{C}{B}{A}\")\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of students in Class 6A be a and in Class 6B be b\n    a, b = symbols('a b')\n\n    # Create the equations based on the given information\n    # Equation 1: a = (4/9)*b (original number of students)\n    # Equation 2: (a - 3) + 18 = (b + 3) - 18 after reshuffling\n    equation1 = Eq(a, (4/9)*b)\n    equation2 = Eq(a - 3 + 18, b + 3 - 18)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # Number of cuts required to have 5 pieces\n    cuts_needed = 5 - 1 # since he cuts it into two pieces, he needs one less cut than the number of pieces\n\n    # Total time taken for these cuts\n    total_time = cuts_needed * 2 # each cut takes 2 minutes\n\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n\n    # Calculate the number of shelves with spelling books\n    shelves_with_spelling_books = total_spelling_books // spelling_books_per_shelf\n\n    # Calculate the number of shelves with math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n\n    # Since each shelf with math books has 4 math books\n    total_math_books = shelves_with_math_books * 4\n\n    return total_math_books\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    num_days_in_week = 7\n    \n    total_weekly_earnings = average_daily_earnings * num_days_in_week\n    \n    return total_weekly_earnings\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Time taken to walk from the first floor to the fourth floor\n    time_to_fourth_floor = 6  # in minutes\n    \n    # Ratio of floors\n    floors_walked = 4 - 1  # from the first floor to the fourth floor\n    total_floors_to_walk = 10 - 1  # from the first floor to the tenth floor\n    \n    # Calculate the total time to walk up to the tenth floor\n    time_to_tenth_floor = (time_to_fourth_floor / floors_walked) * total_floors_to_walk\n    \n    return int(time_to_tenth_floor)\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    # base quantities from the recipe\n    base_chocolate = 40  # grams of chocolate\n    base_biscuits = 100  # grams of biscuits\n    \n    # available biscuits\n    available_biscuits = 75  # grams of biscuits\n    \n    # using proportions to calculate the necessary chocolate\n    chocolate_needed = (available_biscuits * base_chocolate) / base_biscuits\n    \n    return chocolate_needed\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    more_flowers = 3\n\n    harry_flowers = luna_flowers - more_flowers\n\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    combinations = pasta_choices * sauce_choices * topping_choices\n\n    return combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = 32 / (1/2)\n    return n\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    distance1 = 280\n    speed1 = 7\n    time1 = distance1 / speed1\n    \n    distance2 = 400\n    speed2 = 5\n    time2 = distance2 / speed2\n    \n    # The remaining distance is 800 - (280 + 400) meters\n    distance3 = 800 - (distance1 + distance2)\n    speed3 = 8\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9*6) - (7*6)\n    return ans\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the final number of marbles Anna, Betsy, and Charlene had.\n    a, b, c = symbols('a b c')\n    \n    # According to the question, the ratio after the transfers is 2:5:7\n    equation1 = Eq(a/b, 2/5)\n    equation2 = Eq(a/c, 2/7)\n    equation3 = Eq(a + b + c, 168)  # Total number of marbles after the transfers is still 168\n    \n    # After Charlene gave 15 marbles to Betsy\n    # and Betsy gave 8 marbles to Anna\n    # Let x be the initial number of marbles Betsy had.\n    x = symbols('x')\n    equation4 = Eq(b, x + 15 - 8)  # Betsy's marbles after the transfers\n    equation5 = Eq(c, c + 0)  # Charlene gave and did not receive any marbles\n    equation6 = Eq(a, a + 8)  # Anna received 8 marbles from Betsy\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (a, b, c, x))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    \n    # Calculate the total number of permutations\n    total_permutations = factorial(total_cards)\n    \n    # Calculate the permutations for each color (since same colored cards are identical)\n    yellow_permutations = factorial(yellow_cards)\n    red_permutations = factorial(red_cards)\n    green_permutations = factorial(green_cards)\n    \n    # Calculate the number of different ways to arrange the cards\n    arrangements = total_permutations // (yellow_permutations * red_permutations * green_permutations)\n    \n    return arrangements\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    num_pages = 268\n    num_digits = 0\n\n    # single-digit page numbers (1-9)\n    num_digits += 9\n\n    # two-digit page numbers (10-99)\n    num_digits += 2 * (99 - 10 + 1)\n\n    # three-digit page numbers (100-268)\n    num_digits += 3 * (num_pages - 100 + 1)\n\n    return num_digits\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of lollipops and gumdrops before adding candy\n    lollipops, gumdrops = symbols('lollipops gumdrops')\n    \n    # Equation based on the initial ratio\n    equation1 = Eq(lollipops / gumdrops, 5/7)\n    \n    # Equation based on the ratio after adding candy\n    equation2 = Eq((lollipops + 120) / (gumdrops + 120), 4/5)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (lollipops, gumdrops))\n    \n    # Calculate the total number of pieces of candy now\n    total_candy = solutions[lollipops] + 120 + solutions[gumdrops] + 120\n\n    return total_candy\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n    \n    width = 136  # convert to cm to use integers\n    height = 80  # convert to cm to use integers\n\n    square_side = gcd(width, height)\n    num_squares = (width // square_side) * (height // square_side)\n    \n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for digit1 in [4, 5, 7]: # Hundreds\n        for digit2 in [4, 5, 7]: # Tens\n            for digit3 in [5, 7]: # Units (only odd digits)\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    initial_opposite = 16 - 8\n    new_opposite = 22 - 8\n    increased_students = new_opposite * 2 - initial_opposite * 2\n    return increased_students\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    limit = 201\n    divisible_by_5 = (limit - 1) // 5\n    divisible_by_7 = (limit - 1) // 7\n    divisible_by_both = (limit - 1) // (5 * 7)\n    \n    ans = divisible_by_5 + divisible_by_7 - divisible_by_both\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    equation1 = Eq(1*durian + 2*pineapple + 3*watermelon, 440)\n    equation2 = Eq(4*durian + 6*pineapple + 9*watermelon, 1625)\n\n    solutions = solve((equation1, equation2), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of teams be 'n'\n    n = symbols('n')\n\n    # Each team plays 'n-1' other teams twice (home and away), which gives us 'n*(n-1)' matches\n    # However, each match is counted twice because it involves two teams, so we divide by 2 to get the total unique matches\n    equation = Eq(n * (n - 1) // 2, 30)\n\n    # Solve the equation for 'n'\n    num_teams = solve(equation, n)\n\n    # Filter out the negative solution since the number of teams cannot be negative\n    ans = [sol for sol in num_teams if sol.is_positive]\n\n    return ans[0]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 10000):\n        if i - int(str(i)[:-1]) == 135:\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    # The boat must always return with one student to bring it back.\n    trips_crossing = (students - 1) // (boat_capacity - 1)\n    # Count the return trips (trips crossing - 1 because the last trip doesn't require a return)\n    trips_returning = trips_crossing - 1\n    total_trips = trips_crossing + trips_returning\n    # If there is a remainder, it means an extra trip is needed without return\n    if (students - 1) % (boat_capacity - 1) != 0:\n        total_trips += 1\n    return total_trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    hundreds = 3\n    tens = 2\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students involved in the streaming exercise.\n    # According to the question, we can establish two equations based on the given percentages:\n    # 0.8x = Students who chose Grade A math only + 75 (because 80% of x chose Grade A math)\n    # 0.35x = Students who chose Grade B math only + 75 (because 35% of x chose Grade B math)\n    # 0.1x = Students who chose neither (because 10% of x chose neither)\n    # x = Students who chose Grade A math only + Students who chose Grade B math only + 75 + Students who chose neither\n    # From this, we can rearrange the equations:\n    # 0.8x - 75 = Students who chose Grade A math only\n    # 0.35x - 75 = Students who chose Grade B math only\n    # Adding up all students, we get:\n    # x = (0.8x - 75) + (0.35x - 75) + 75 + 0.1x\n    # x = 0.8x + 0.35x + 0.1x - 75\n    # x = 1.25x - 75\n    # Solving for x, we get:\n    # 0 = 0.25x - 75\n    # 0.25x = 75\n    # x = 75 / 0.25\n    \n    x = 75 / 0.25\n    return int(x)\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    from math import factorial\n\n    num = factorial(100)\n    den = factorial(99) + factorial(98)\n\n    ans = num / den\n\n    return ans\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from sympy import divisors\n    \n    # Initialize the possible numbers and their factors count\n    numbers_factors = {i: len(divisors(i)) for i in range(1, 14)}\n\n    # Initialize the list to hold the numbers of the students who raised their hands \n    # Since we know they have a unique count of factors, the only such numbers up to 13 are 4 and 9 (2 and 3 factors respectively)\n    known_factors_numbers = [4, 9]\n\n    # Candidates for Alice's number based on her statement - it must be an odd number\n    alices_candidates = [num for num in range(1, 14) if num not in known_factors_numbers and num % 2 == 1]\n    \n    # Use the information from May to find her number.\n    # Since May's number is smaller than Alice's by 2 and bigger than Mark's by 1,\n    # we iterate through Alice's candidates and apply the conditions to find possible numbers for May and Mark.\n    # And since Mark didn't raise his hand, May's number should not give a unique factor count.\n\n    for alice_num in alices_candidates:\n        may_num = alice_num - 2\n        if may_num in numbers_factors and numbers_factors[may_num] not in numbers_factors.values():\n            continue\n        mark_num = may_num - 1\n\n        # If the numbers fit the description and are within the range, we proceed\n        if 1 <= may_num <= 13 and 1 <= mark_num <= 13 and mark_num not in known_factors_numbers:\n            # We found the numbers for Alice, May, and Mark.\n            # We know the numbers of the students who raised their hands.\n            # We can find out the unchosen numbers by process of elimination.\n\n            # Combined numbers of all students with known numbers.\n            combined_numbers = set(known_factors_numbers + [alice_num, may_num, mark_num])\n            unchosen_numbers = [num for num in range(1, 14) if num not in combined_numbers]\n            \n            # Calculate the product of the unchosen numbers.\n            return eval('*'.join(map(str, unchosen_numbers)))\n\n# Store the result in 'ans' variable.\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    frank, alex, paul = symbols('frank alex paul')\n\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 4, 6, 9]\n    all_numbers = [''.join(p) for p in permutations(map(str, digits))]\n    all_numbers = [int(num) for num in all_numbers]\n    avg = sum(all_numbers) / len(all_numbers)\n    return avg\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of boys at first, g represent the number of girls at first\n    b, g = symbols('b g')\n\n    # Since there was an equal number of boys and girls at first, we have b = g\n    # After 60 boys and 12 girls left the gathering, the number of boys is b - 60\n    # and the number of girls is g - 12\n\n    # The final count must satisfy that the girls are twice the boys\n    # So we get g - 12 = 2 * (b - 60)\n\n    # Now we set up the equations according to the problem statement\n    equation1 = Eq(b, g)\n    equation2 = Eq(g - 12, 2 * (b - 60))\n    \n    # Solve the equation system\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Since b and g are equal, we can return the solution for b\n    return solutions[b]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for hundreds_digit in range(9, 9 + 1):  # '9' is the greatest 1-digit number\n        for tens_digit in range(0, 10):\n            for ones_digit in range(0, 10):\n                if (tens_digit != ones_digit) and (hundreds_digit != tens_digit) \\\n                   and (hundreds_digit != ones_digit) and (ones_digit % 2 == 0) \\\n                   and (tens_digit + ones_digit == 15):\n                    return hundreds_digit * 100 + tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    \n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80  # km/h\n    car_speed = 120  # km/h\n    time_difference = 3  # hours\n    \n    # Distance covered by the van before the car started\n    van_distance_start = van_speed * time_difference\n    \n    # Relative speed is the difference in speeds of car and van\n    relative_speed = car_speed - van_speed\n    \n    # Time needed to catch up is the distance at start divided by the relative speed\n    catch_up_time = van_distance_start / relative_speed\n    \n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    hats = 5  # 4 hats plus the option of no hat\n    shirts = 3\n    pants = 2\n    skirt = 1\n\n    total_combinations = hats * shirts * pants * skirt\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert the recurring decimal 0.0101... to a fraction\n    repetend_length = 2  # since the repetend is \"01\" which has length 2\n    repetend_fraction = Fraction(1, 10**repetend_length - 1)\n\n    # Calculate the product of the fraction with itself\n    product = repetend_fraction * repetend_fraction\n\n    # The length of the repetend in the product is determined by the denominator\n    # of the simplified fraction. A prime factorization can help find the repetend length.\n    denominator = product.denominator\n\n    # Finding the smallest power of 10 that is 1 modulo the denominator will give us the repetend length\n    pow_of_10 = 1\n    count = 0\n    while True:\n        if pow_of_10 % denominator == 0:\n            break\n        pow_of_10 = (pow_of_10 * 10) % denominator\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Pages Printer A prints per minute\n    pages_per_minute_A = 300 / 12\n    # Pages Printer B prints per minute\n    pages_per_minute_B = 300 / 10\n    \n    # Total pages per minute when both printers are used\n    pages_per_minute_both = pages_per_minute_A + pages_per_minute_B\n    \n    # Convert half an hour to minutes\n    time_minutes = 0.5 * 60\n    \n    # Calculate total pages printed by both printers in half an hour\n    total_pages = pages_per_minute_both * time_minutes\n    \n    return int(total_pages)\n    \nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    \n    # Define the fractions of each fruit type\n    apples_frac = 2/3\n    bananas_frac = 1/9\n    lemons_frac = 1 - (apples_frac + bananas_frac)  # lemons constitute the remaining fraction\n    \n    # Rena bought 12 more apples than lemons\n    apples_lemons_difference = 12\n\n    # Define the equation based on the given conditions\n    equation = Eq(apples_frac * total_items - lemons_frac * total_items, apples_lemons_difference)\n\n    # Solve the equation to find the total number of items\n    total_items_solution = solve(equation, total_items)\n    \n    # Calculate the number of lemons bought\n    lemons = lemons_frac * total_items_solution[0]\n\n    return int(lemons)\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day == 31:\n                continue\n            date_str = f\"{day:02d}/{month:02d}/2019\"\n            count += date_str.count(\"3\")\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for number of durian, chocolate, and strawberry puffs\n    d, c, s = symbols('d c s')\n    \n    # Define the ratio equations\n    ratio_eq = Eq(d/c, 3/4) & Eq(d/s, 3/2) & Eq(c/s, 4/2)\n    \n    # Define the total money equation\n    total_money_eq = Eq(5*d + 3*c + 4*s, 560)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_money_eq), (d, c, s))\n    \n    # Calculate the amount of money collected from durian puffs\n    durian_money = 5 * solutions[d]\n    \n    return durian_money\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # The only cubes that have exactly three faces painted are the corners\n    # of the original cuboid. Since it's a cuboid, there are 8 corners.\n    corners = 8\n    return corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):  # tens digit must be 1-9 for a two-digit number\n        for ones in range(0, 10):  # ones digit must be 0-9 for a two-digit number\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191\n    rate_second_period = 1.166\n\n    amount_after_three_years = principal * rate_first_period\n    total_amount = amount_after_three_years * rate_second_period\n    \n    return round(total_amount, 2)\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Units of A, B, C, D and Zachary, Yvonne, Xavier, Waylon\n    A, B, C, D, Z, Y, X, W = symbols('A B C D Z Y X W')\n\n    # Equations based on the given information\n    equations = [\n        Eq(A, Z),  # A is Zachary\n        Eq(B, Y),  # B is Yvonne\n        Eq(C, X),  # C is Xavier\n        Eq(D, W),  # D is Waylon\n        A - C > 0,  # A (Zachary) is higher than C (Xavier)\n        A - D < 0,  # A (Zachary) is lower than D (Waylon)\n        B - X < 0,  # B (Yvonne) is lower than X (Xavier)\n        D - 5 * Y == 0,  # D (Waylon) is 5 times B (Yvonne)\n        Z + 2 - X == Z - W,  # Zachary two levels higher equals the difference with Waylon and Xavier\n        Z == Y + X,  # Zachary's level is the sum of Yvonne's and Xavier's\n    ]\n    \n    # Domain for each person's unit level\n    domain = {A: (1, 18), B: (1, 18), C: (1, 18), D: (1, 18), Z: (1, 18), Y: (1, 18), X: (1, 18), W: (1, 18)}\n    \n    # Find all possible solutions within the given levels\n    solutions = solve(equations, (A, B, C, D, Z, Y, X, W), dict=True, domain=domain)\n    \n    # Filter solutions to meet the apartment levels constraints\n    valid_solutions = [s for s in solutions if all(1 <= s[var] <= 18 for var in [A, B, C, D])]\n    \n    # Assuming there's only one valid solution, return A's level\n    return valid_solutions[0][A] if valid_solutions else None\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    donut, raisin_roll = symbols('donut raisin_roll')\n\n    equation1 = Eq(raisin_roll, 3 * donut)\n    equation2 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n\n    solutions = solve((equation1, equation2), (donut, raisin_roll))\n\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    students_school1 = 24\n    students_school2 = 36\n    students_school3 = 42\n\n    # Find the greatest common divisor of the three numbers\n    gcd12 = gcd(students_school1, students_school2)\n    gcd123 = gcd(gcd12, students_school3)\n    \n    return gcd123\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * (12 + 1) // 2  # Sum of first 12 natural numbers\n    middle = total_numbers // 2  # Find the middle position\n    \n    if total_numbers % 2 == 1:  # If total_numbers is odd\n        # There will be a single median value\n        # Find the number in the sequence which occupies this middle position\n        count = 0\n        for i in range(1, 13):\n            count += i\n            if count >= middle + 1:\n                return i\n    else:\n        # There will be two median values (as there are an even number of elements)\n        # Find the two numbers in the sequence which occupy these middle positions\n        count = 0\n        for i in range(1, 13):\n            count += i\n            if count >= middle:\n                # Check if the middle value is completely occupied by one number\n                if count > middle:\n                    return i\n                else:\n                    return (i + i + 1) / 2  # Average of the two middle numbers\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n\n    digits = [4, 5, 8]\n    all_possible_numbers = permutations(digits)\n    count = len(list(all_possible_numbers))\n\n    return count\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # Let's denote the first term of the sequence as a1 and the common difference as d.\n    # We know the sum of the first n terms of an arithmetic sequence can be found by the formula:\n    # S_n = n/2 * (2a1 + (n - 1)d)\n   \n    # Giving us two equations based on the information provided:\n    # 99 = 9/2 * (2a1 + (9 - 1)d) -> (1)\n    # 540 = 27/2 * (2a1 + (27 - 1)d) -> (2)\n    \n    # Let's now solve this system of two equations for a1 and d.\n    from sympy import symbols, Eq, solve\n    \n    a1, d = symbols('a1 d')  # Our two unknowns\n    equation1 = Eq((9/2) * (2 * a1 + (9 - 1) * d), 99)\n    equation2 = Eq((27/2) * (2 * a1 + (27 - 1) * d), 540)\n    \n    solutions = solve((equation1, equation2), (a1, d))\n    \n    # Now that we have a1 and d, we can find the sum of the first 16 terms\n    a1_value = solutions[a1]\n    d_value = solutions[d]\n    \n    sum_first_16 = (16/2) * (2 * a1_value + (16 - 1) * d_value)\n    \n    return sum_first_16\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    needed_loafs = 24\n\n    cups_needed = needed_loafs / loafs_per_cup\n\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n\n    for i in range(7, 41):\n        count += len(str(i))\n\n    return count\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # In the group stage, 4 teams play a single round-robin tournament\n    # Each team plays against each other once, i.e. 3 games for each team\n    games_in_group_stage = (4 * 3) / 2 * 8  # Each group has 4 choose 2 games and 8 groups in total\n\n    # For the knockout round, we have:\n    # Round of 16, Quarter-finals, Semi-finals, Third place playoff and Final\n    # As it is single elimination, there is only one game between any two teams\n    games_in_knockout_round = 16 / 2 + 8 / 2 + 4 / 2 + 1 + 1  # always dividing by two for each stage except for third place and final\n\n    # Adding both stages together to get total number of games\n    total_games = games_in_group_stage + games_in_knockout_round\n\n    return int(total_games)\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import gcd\n    \n    # Flashes per minute\n    red_flashes = 4\n    green_flashes = 6\n    \n    # Calculate least common multiple (LCM) of red_flashes and green_flashes\n    lcm = (red_flashes * green_flashes) // gcd(red_flashes, green_flashes)\n    \n    # Number of times they flash together per minute is 1 / lcm (since lcm is in seconds)\n    flashes_together_per_minute = 1 / (lcm // red_flashes)\n    \n    # Calculate how many times they flash together in an hour\n    flashes_together_per_hour = flashes_together_per_minute * 60\n    \n    # Include first and last time\n    ans = int(flashes_together_per_hour + 1)\n    \n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 1, 22)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_paintings = 40\n    french_landscapes = 25\n    \n    landscapes = total_paintings * 0.4\n    still_lifes = total_paintings - landscapes\n    \n    french_still_lifes = french_paintings - french_landscapes\n    non_french_still_lifes = still_lifes - french_still_lifes\n\n    return int(non_french_still_lifes)\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink\n    max_volume_per_glass = total_volume // 9  # Greatest volume in each glass\n    \n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    weight1 = 100\n    concentration1 = 0.50\n\n    weight2 = 400\n    concentration2 = 0.80\n\n    total_weight = weight1 + weight2\n    total_rice = (weight1 * concentration1) + (weight2 * concentration2)\n\n    concentration_in_mixture = total_rice / total_weight\n\n    return concentration_in_mixture\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n    \n    distance = speed_m_per_min * time_minutes\n    \n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = 0\n    current_number = 0\n    \n    for i in range(2017):\n        current_number = current_number * 10 + 2\n        total_sum += current_number\n        \n    last_five_digits = total_sum % 100000\n\n    return last_five_digits\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    # The total amount of hay can feed 12 horses for 15 days.\n    total_feed_days = 12 * 15\n\n    # Find out for how many days it can feed 1 horse using the unitary method.\n    feed_days_per_horse = total_feed_days / 12\n\n    # Now find out for how long it can feed 20 horses with the same pile of hay.\n    feed_days_for_20_horses = feed_days_per_horse / 20\n\n    return feed_days_for_20_horses\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        first_digit = i // 1000\n        shifted_number = (i % 1000) * 10 + first_digit\n        if shifted_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let x be the number of years later\n    # Oliver's age in x years: 20 + x\n    # Lin's age in x years: 26 + x\n    # Sum of their ages in x years: (20 + x) + (26 + x) = 48\n    # Solve for x:\n    x = symbols('x')\n    equation = Eq((20 + x) + (26 + x), 48)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    # Start with the smallest number that ends with 35, which would be 35 itself.\n    number = 35\n    while True:\n        # Check if it is a multiple of 35\n        if number % 35 == 0:\n            # Convert the number to a string to easily sum its digits\n            digits = str(number)\n            # Sum all the digits\n            sum_of_digits = sum(int(digit) for digit in digits)\n            # Check if the sum of digits is 35\n            if sum_of_digits == 35:\n                # Return the number if it fulfills both conditions\n                return number\n        # Increase the number by 100 to look for the next number that ends with 35\n        number += 100\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    \n    # Total amount Mrs. Lim had initially\n    initial_amount = 8 * y\n    \n    # Amount spent on watch\n    watch_cost = 4 * y\n    \n    # Amount spent on handbag\n    handbag_cost = 20\n    \n    # Amount given to each child\n    amount_per_child = y - 5\n    \n    # Equation representing the total amount spent and given to children\n    equation = Eq(watch_cost + handbag_cost + 2 * amount_per_child, initial_amount)\n    \n    # Solve for y\n    solution = solve(equation, y)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    leap_years = 0\n    \n    for year in range(1901, 2000):\n        if (year % 4) == 0:\n            leap_years += 1\n            \n    total_days = (99 * 365) + leap_years\n    \n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit_period = 2  # days for one deposit and one spend\n    full_cycles = days // deposit_period\n    \n    deposit_amount = 10\n    spend_amount = 8\n    total_change_per_cycle = deposit_amount - spend_amount\n    \n    money_after_cycles = initial_amount + full_cycles * total_change_per_cycle\n    \n    # Check if there's an incomplete cycle (last day of the cycle)\n    if days % deposit_period == 1:\n        money_after_cycles += deposit_amount\n    \n    return money_after_cycles\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99  # numbers less than 100\n    divisible_by_3 = total_numbers // 3\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (3 * 7)\n\n    # Using Inclusion-Exclusion Principle to find numbers not divisible by 3 or 7\n    not_divisible_by_3_or_7 = total_numbers - (divisible_by_3 + divisible_by_7 - divisible_by_both)\n\n    return not_divisible_by_3_or_7\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    total_strikes = sum(range(1, 13))\n    return total_strikes\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value in pence\n    ten_pence_value = 10  # value of one ten-pence coin in pence\n\n    num_coins = total_value / ten_pence_value  # calculate number of ten-pence coins\n    total_weight = num_coins * weight_per_coin  # calculate total weight\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let n be the number of buttons Nina originally has,\n    # and j be the number of buttons James has.\n    # Since Nina gave 4 buttons to James and they ended up with the same amount,\n    # Nina had j + 4 buttons, and James had n - 4 buttons after the exchange.\n    # Therefore, according to the problem, we have:\n    # n + j = 22 (total buttons)\n    # n - 4 = j + 4 (same amount after Nina gives James 4 buttons)\n    # \n    # Now we solve these equations:\n    # n + j = 22             (1)\n    # n = j + 8              (2) (from n - 4 = j + 4)\n    #\n    # Substitute equation (2) into equation (1)\n    # (j + 8) + j = 22\n    # 2j + 8 = 22\n    # 2j = 22 - 8\n    # 2j = 14\n    # j = 14 / 2\n    j = 7  # James initially has 7 buttons\n\n    # Using equation (2)\n    # n = j + 8\n    n = j + 8  # Nina initially has 7 + 8 buttons\n\n    return n\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, apple = symbols('mango pear apple')\n    \n    # defining equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    score_for_correct = 5\n    score_for_wrong = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * score_for_correct + wrong_answers * score_for_wrong == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n    number_of_adults = (total_people * ratio_adults) / total_ratio\n    return int(number_of_adults)\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    candies = 35\n    children = 9\n    start_seat = 3\n    last_seat = (start_seat + candies - 1) % children\n    return last_seat if last_seat != 0 else children\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    return sum([9, 12, 17, 18, 21, 23])\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given parameters\n    g = 9.81  # acceleration due to gravity, m/s^2\n    initial_speed = 10.0  # initial speed of the box, m/s\n    angle_deg = 37.0  # incline angle in degrees\n    angle_rad = math.radians(angle_deg)  # convert angle to radians\n\n    # Calculate the height and distance along the ramp using kinematics\n    # Using the formula: height = (initial_speed^2 * sin(angle_rad)^2) / (2 * g)\n    height = (initial_speed**2 * math.sin(angle_rad)**2) / (2 * g)\n\n    # Using the formula: distance = (initial_speed^2 * sin(2 * angle_rad)) / (2 * g)\n    distance = (initial_speed**2 * math.sin(2 * angle_rad)) / (2 * g)\n\n    return (height, distance)\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + (30 * 30) + (30 * 30 * 30)\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    num_players = 64\n    players_per_match = 4\n\n    # In each match 3 players are knocked out\n    # This continues until there is only one player left who is the winner\n    # The number of matches equals the number of players being knocked out\n    # thus, the number of matches required is total players - 1\n    num_matches = num_players - 1\n\n    return num_matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    return 2.5 * 24\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    numbers = [1, 3, 5, 95, 97, 99]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Iterating over all four-digit numbers\n    for original_number in range(1000, 10000):\n        # Moving the first digit to the ones place and subtract the original number\n        first_digit = original_number // 1000\n        rest_number = original_number % 1000\n        new_number = rest_number * 10 + first_digit\n        if new_number - original_number == 4707:\n            return original_number\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22  # Total weight of cheese and 4 bags of flour\n    cheese_weight = 6  # Weight of the cheese\n    flour_weight = (total_weight - cheese_weight) / 4  # Weight of one bag of flour\n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assume the known exchange rate is 1 British pound (£) to 1.2 Euros (€) as an example\n    # and 1 Euro (€) to 70 Russian Rubles (₽) as current rates are not provided in the problem.\n\n    pound_to_euro = 1.2  # Example exchange rate from British pound to Euro\n    euro_to_rub = 70  # Example exchange rate from Euro to Russian Rubles\n\n    cost_of_cd_in_pounds = 14  # The cost of a CD in England in British pounds\n    cost_of_cd_in_euros = cost_of_cd_in_pounds * pound_to_euro  # Convert cost to Euros\n    cost_of_cd_in_rubles = cost_of_cd_in_euros * euro_to_rub  # Convert cost to Russian Rubles\n\n    # Assume Richard has an amount equal to the cost of one CD in British pounds, converted to Russian Rubles\n    richards_money_in_rubles = cost_of_cd_in_pounds * pound_to_euro * euro_to_rub\n\n    # Calculate how many CDs Richard can buy in St Petersburg with his money in Russian Rubles\n    number_of_cds = richards_money_in_rubles // cost_of_cd_in_rubles\n\n    return int(number_of_cds)\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Maximum balls of same color before picking 4 balls of the second color\n    max_same_color = 4\n    \n    # Maximum balls that can be picked without getting 2 groups of 4 of the same color\n    # Subtracting 1 from each group since we can have one less than the required for two groups,\n    # that means pick all but one from the two largest groups and all from the smallest group.\n    max_balls_before_second_group = (5 - 1) + (4 - 1) + 2\n    \n    # The next pick guarantees the second group of 4 balls of the same color\n    balls_to_pick = max_balls_before_second_group + 1\n\n    return balls_to_pick\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n    \n    # Check each option to find one that satisfies all conditions\n    for age in [28, 39, 52, 84]:\n        # Condition 1: '3 years ago, my age was a square number.'\n        age_3_years_ago = age - 3\n        if int(age_3_years_ago ** 0.5) ** 2 == age_3_years_ago:\n            # Condition 2: 'Next year it will be a prime number.'\n            age_next_year = age + 1\n            if isprime(age_next_year):\n                # Condition 3: 'In 12 years’ time, it will be a cube number.'\n                age_in_12_years = age + 12\n                if round(age_in_12_years ** (1/3)) ** 3 == age_in_12_years:\n                    return age\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Let's denote the first term of the sequence as 'a'\n    # and common difference as 'd'.\n    # The sum of the first n terms (S_n) of an arithmetic sequence can be expressed as:\n    # S_n = n/2 * (2a + (n-1)d)\n    \n    # Let's write the two given conditions as equations:\n    # For the sum of the first 9 terms (S_9): 72 = 9/2 * (2a + 8d) => 144 = 9 * (2a + 8d)\n    # For the sum of the first 23 terms (S_23): 736 = 23/2 * (2a + 22d) => 1472 = 23 * (2a + 22d)\n    \n    # We can solve these two equations to find the values of 'a' and 'd'.\n    # Multiply both equations by 2 to simplify:\n    # Equation 1: 16a + 72d = 144\n    # Equation 2: 46a + 506d = 1472\n    \n    # Now let's use linear equations to solve for 'a' and 'd':\n    # Multiply Equation 1 by 46 and Equation 2 by 16 and subtract them to find 'd':\n    d = (1472*16 - 144*46) / (506*16 - 72*46)\n    # Now that we have 'd', we can substitute back in Equation 1 to find 'a':\n    a = (144 - 72*d) / 16\n    \n    # Finally, we'll find the sum of the first 16 terms (S_16):\n    S_16 = 16/2 * (2*a + (16-1)*d)\n    \n    return int(S_16)\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To ensure getting two M&M's of different colors, Bart needs to pick at least one M&M of each color.\n    # However, since there's a chance he picks both M&M's of a single color if only two are taken,\n    # Bart needs to take out 3 M&M's, one of each color present to ensure two of different colors.\n\n    # In the worst scenario, Bart picks 3 M&M's of the same color first, then another 3 of the next color,\n    # finally he picks 1 M&M of the last color, guaranteeing two different colors in total of 7 picks.\n    \n    # Since there are only 3 red and 4 yellow M&Ms, taking 5 ensures at least one brown and one non-brown M&M.\n    ans = 5\n\n    return ans\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Andrew to Bernice level ratio when Andrew is at level 5\n    andrew_to_bernice_ratio = 5 / 3\n\n    # Bernice to Cassandra level ratio when Bernice is at level 6\n    bernice_to_cassandra_ratio = 6 / 10\n\n    # Calculate the Andrew to Cassandra ratio\n    andrew_to_cassandra_ratio = andrew_to_bernice_ratio * bernice_to_cassandra_ratio\n\n    # Calculate the level Andrew will be at when Cassandra is at level 19\n    andrew_level = andrew_to_cassandra_ratio * 19\n\n    return andrew_level\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    total_digits = 43\n    repeats = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n\n    sum_of_full_pattern = sum(int(digit) for digit in pattern)\n    sum_of_partial_pattern = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = (sum_of_full_pattern * repeats) + sum_of_partial_pattern\n\n    return total_sum\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz = 30  # minutes\n    num_quizzes = 4\n\n    total_time_minutes = time_per_quiz * num_quizzes\n    total_time_hours = total_time_minutes / 60\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    # Define the new operation\n    def new_operation(a, b):\n        return a * b + a + b\n\n    # Given values\n    result = 59\n    a = 2\n    b = 4\n\n    # According to the new operation, the equation can be written as:\n    # 2 * (x * 4 + x + 4) + 2 + (x * 4 + x + 4) = 59\n    # Solve for x using simple algebraic manipulation\n\n    # Work inside the parentheses first:\n    # x * 4 + x + 4 is the result of the inner operation x ⊻ 4\n    # Let's represent it with a single variable y\n    # y = x * 4 + x + 4\n    # so the equation becomes:\n    # 2 * y + 2 + y = 59\n\n    # We want to solve for y first:\n    # 3 * y + 2 = 59\n    # y = (59 - 2) / 3\n    # y = 57 / 3\n    y = (result - 2) / 3\n\n    # Now we use the definition of y to solve for x:\n    # y = x * 4 + x + 4\n    # x * 4 + x = y - 4\n    # x * (4 + 1) = y - 4\n    # x = (y - 4) / 5\n    x = (y - 4) / (4 + 1)\n\n    return int(x)\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres = kilometres * 100000  # there are 100,000 centimetres in a kilometre\n    return centimetres\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_before_turning_back = 40 / 60\n    \n    # Calculate the distance each drove before Samuel turned back\n    distance_shafur = 54 * time_before_turning_back\n    distance_samuel = 66 * time_before_turning_back\n    \n    # Since Samuel turns back, he needs to cover the distance he drove back plus the distance to Town Y.\n    # Distance remaining for Samuel after he drove back to town X to refill petrol\n    remaining_distance_samuel = distance_shafur - distance_samuel\n    \n    # Time taken for Shafur to reach Town Y after Samuel turned back\n    time_shafur_to_town_y = remaining_distance_samuel / 54\n    \n    # Distance between Town X and Town Y is the distance Shafur drove plus the remaining distance he drove alone.\n    distance_x_to_y = distance_shafur + (54 * time_shafur_to_town_y)\n    \n    return distance_x_to_y\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages_sum = 4 + 7 + 12\n\n    years = 0\n    while grandson_ages_sum != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandson_ages_sum += 3  # Each year, each grandson grows 1 year older\n    \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_per_chair = symbols('cost_per_chair')\n    \n    # Let's say the cost of each chair is 'cost_per_chair'\n    # Then, the cost of each table is '3 * cost_per_chair'\n    # 4 tables and 9 chairs cost $504 in total\n    # So, the equation is: 4 * (3 * cost_per_chair) + 9 * cost_per_chair = 504\n    # Simplified: 12 * cost_per_chair + 9 * cost_per_chair = 504\n    # 21 * cost_per_chair = 504\n    equation = Eq(4 * (3 * cost_per_chair) + 9 * cost_per_chair, 504)\n    \n    # Solving the equation for the cost_per_chair\n    solutions = solve(equation, cost_per_chair)\n    \n    # We return the solution, which should represent the cost of each chair\n    return solutions[0]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for num_5 in range(0, int(40/5)+1):\n        for num_10 in range(0, int(40/10)+1):\n            if (num_5 * 5 + num_10 * 10) == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # This is the common difference between the terms\n    \n    # We want to find the first negative term, therefore we set up the following inequality:\n    # first_term + (n - 1) * difference < 0\n    # Where n is the number of terms\n    # Solving for n gives us:\n    # n < 1 - first_term / difference\n\n    n = 1 - first_term / difference\n    \n    # Since n represents a count of terms, it must be an integer.\n    # We make sure to take the floor of n since we want the number of full terms before reaching a negative value.\n    num_terms = int(n)\n    \n    return num_terms\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(digit) for digit in str(num)]\n        product = digits[0] * digits[1] * digits[2]\n        if product > 99 and product < 1000:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    capacity = 9\n    vases = (flowers + capacity - 1) // capacity\n    return vases\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # First expression\n    expr1_numerator = 7 / (-3.3333333333333333)  # Since -3.33... is equivalent to -10/3\n    expr1_denominator = (-0.027) ** (1/3)  # Cube root of -0.027\n    expr1 = expr1_numerator / expr1_denominator\n\n    # Second expression\n    expr2_numerator = (2 ** 3) / (4 ** 2)  # 2^3 divided by 4^2\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7))  # 0.125 times [1.8 - (0.2 times 7)]\n    expr2 = expr2_numerator / expr2_denominator\n    \n    # Third expression part 1\n    expr3_part1 = 0.1 / 0.142857  # 0.1 divided by 0.142857, since 0.142857 is the fraction 1/7\n\n    # Third expression part 2\n    expr3_part2 = 2 * 0.3\n\n    # Third expression\n    expr3 = expr3_part1 + expr3_part2\n    \n    # Final result\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3) * 3  # Ceiling division to find the first multiple of 3\n    last_multiple = 81 // 3 * 3       # Floor division to find the last multiple of 3\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "from math import gcd\n\ndef solution():\n    num1 = 12\n    num2 = 15\n    lcm = (num1 * num2) // gcd(num1, num2)\n    return lcm\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the first part of the pyramid numbers: 3 to 10\n    sum_first_half = sum(range(3, 11))\n    \n    # Calculate the sum of the second part of the pyramid numbers: 10 back to 3\n    # Here we exclude 10 as it should not be counted twice\n    sum_second_half = sum(range(3, 10))\n    \n    # Total sum is the sum of the first and second parts\n    total_sum = sum_first_half + sum_second_half\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has 50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n\n    # Pip spends 80% of his pocket money\n    pip_spent = 0.8 * pip\n    pip_left = pip - pip_spent\n\n    # Bud spends 3/4 of her pocket money\n    bud_spent = 3/4 * bud\n    bud_left = bud - bud_spent\n\n    # Ratio of Pip's leftover to Bud's is 6:5\n    equation2 = Eq(pip_left/bud_left, 6/5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    remaining_phones = 78\n    february_sales = remaining_phones + 13\n    january_sales = 2 * february_sales - 13\n    initial_phones = 2 * january_sales - 22\n    return initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game played eliminates one player.\n    # Hence, the number of games needed to determine a winner is\n    # one less than the number of players, since one player remains undefeated.\n    num_players = 5\n    num_games = num_players - 1\n    return num_games\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n    pencils = (total_items - more_pens) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate spending for each period\n    jan_to_apr = 500 * 4\n    may_to_jul = 300 * 3\n    aug_to_sep = 400\n    oct_to_dec = 300 * 3\n\n    # Total spending from January to December\n    total_spending = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Total months from January to December\n    total_months = 12\n\n    # Calculate average spending per month\n    average_per_month = total_spending / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    initial_apples = 5 * 9\n    additional_apples = 16\n    total_apples = initial_apples + additional_apples\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_red_packets = 4\n    each_amount = 70\n    shortage = 15\n\n    total_amount = (total_red_packets * each_amount) - shortage\n\n    return total_amount\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, the number of games or matches played is one less than the number of participants,\n    # since in each game one participant gets knocked out and only one remains unbeaten at the end.\n    num_people = 5\n    num_games = num_people - 1\n\n    return num_games\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # 8th from the front, 10th from the back\n    # Let total shelves be x\n    # then x - 8 + 1 = 10 (Position from the back can be calculated as total - position from front + 1)\n    # Simplify to find x\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 2016\n    factors = factorint(2016)\n    \n    # Convert factorization to list of exponents multiplied by base\n    ages = []\n    for base, exponent in factors.items():\n        ages.extend([base] * exponent)\n    \n    # Need to find 4 different ages that multiply to 2016\n    # Sort the ages to start with the smallest possible ages\n    ages.sort()\n    \n    # 2016 = 2^5 * 3^2 * 7^1\n    # We have [2, 2, 2, 2, 2, 3, 3, 7]\n    # Smallest 4 children would then have ages: 2*2 (combining two 2s), 2, 3, 7\n    # They should be multiplied to match unique ages without going over age of 10\n    # 2 (from 2*1), 4 (from 2*2), 3, 7 – all under 10 and unique\n    ages[1] *= ages[0]  # Combine two 2's into one age, making it 4\n    del ages[0]  # Remove the used 2\n    \n    # The sum of the ages of the four children\n    sum_of_ages = sum(ages[:4])\n    \n    return sum_of_ages\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote:\n    # a = number of marbles Anna initially had\n    # b = number of marbles Betsy initially had\n    # c = number of marbles Charlene initially had\n\n    a, b, c = symbols('a b c')\n\n    # Total number of marbles\n    equation1 = Eq(a + b + c, 168)\n\n    # Transactions\n    # After Charlene gave 15 marbles to Betsy\n    # b' = b + 15\n    # c' = c - 15\n    # After Betsy gave 8 marbles to Anna\n    # a' = a + 8\n    # b'' = b' - 8\n\n    # Final ratio 2:5:7\n    # a + 8 : b + 7 : c - 15 = 2 : 5 : 7\n\n    equation2 = Eq((a + 8) * 5, (b + 7) * 2)\n    equation3 = Eq((a + 8) * 7, (c - 15) * 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    total_rows = 7 + 4 - 1\n    total_columns = 3 + 7 - 1\n    total_students = total_rows * total_columns\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # 4 years ago, combined age was 10 years\n    combined_past_age = 10\n    # Each dog ages 4 years from that time to now, so +8 years\n    combined_current_age = combined_past_age + 8\n    # In 2 more years, each dog ages 2 years, so +4 years in total\n    combined_future_age = combined_current_age + 4\n    \n    return combined_future_age\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * 0.8 + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ten_p_coin = symbols('ten_p_coin')\n    twenty_p_coin = 2 * ten_p_coin\n    five_p_coin = ten_p_coin / 2\n    \n    total_amount = 15.75 * 100  # Convert pounds to pence\n    \n    equation = Eq(five_p_coin * 5 + ten_p_coin * 10 + twenty_p_coin * 20, total_amount)\n    solution = solve(equation, ten_p_coin)\n\n    twenty_p_count = 2 * solution[0]\n    \n    return twenty_p_count\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n\n    common_difference = (nth_term - first_term) / (n - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers\n    equation1 = Eq(girls, boys - 1)\n    # Each girl has half as many sisters as brothers\n    equation2 = Eq(girls - 1, 2 * (boys - girls))\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Calculate the total number of children in the family\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for x\n    x = symbols('x')\n\n    # Convert minutes to hours for each time interval\n    time_first_30_min = 30 / 60  # in hours\n    time_second_30_min = 30 / 60  # in hours\n    time_last_30_min = 30 / 60  # in hours\n\n    # Express the total distance as the sum of distances covered in each time interval\n    total_distance = Eq(x * time_first_30_min + (x - 20) * time_second_30_min + (x + 10) * time_last_30_min, 70)\n\n    # Solve for x\n    solution = solve(total_distance, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining = 60\n    eaten_fraction = 3/5\n    original_mass = remaining / (1 - eaten_fraction)\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(year=2022, month=5, day=15)\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime(\"%d %B\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) / difference) + 1\n\n    return int(num_students)\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n\n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number = base_10_number // 6\n        base_6_number = str(remainder) + base_6_number\n\n    return base_6_number\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    number_of_people = 6\n    total_cost = total_cost_per_person * number_of_people\n    tip = total_cost * 0.10\n    total_payment = total_cost + tip\n    note_given = 50\n    change = note_given - total_payment\n    \n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    day_distance = 4\n    night_distance = 2\n    effective_distance_per_day = day_distance - night_distance\n    days_taken = 0\n    \n    while total_distance > 0:\n        days_taken += 1\n        total_distance -= day_distance\n        if total_distance <= 0:\n            break\n        total_distance += night_distance\n    \n    return days_taken\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # There are 27 apples distributed to 5 children with different amounts.\n    # We want to minimize the number of apples for the child who gets the most\n    # while ensuring each child gets at least one apple.\n    \n    # If we give the first child 1 apple, the second child 2 apples, and so on,\n    # we're left with the least number for the child who gets the most after the distribution.\n    total_apples = 27\n    children = 5\n    \n    # Distribute in increasing order such as 1, 2, 3..., apples to minimize the max number \n    min_distributed_apples = sum(range(1, children))  # Sum of smallest possible unique numbers\n    remaining_apples = total_apples - min_distributed_apples\n    \n    # The child with the most apples would be the last one\n    # The first (children - 1) children get 1, 2, ..., (children - 1) apples respectively\n    most_apples = remaining_apples + (children - 1)\n    \n    return most_apples\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # The winning strategy involves making sure that after your turn,\n    # the number of marbles left is a multiple of 4. This way, no\n    # matter what the opponent does, you can always return to a\n    # multiple of 4 on your turn. You will ultimately win by\n    # forcing your opponent to take the last marble.\n\n    # To find out with how many marbles Jason should start, we look\n    # for a number such that the remaining marbles after Jason's turn\n    # are a multiple of 4. Since 26 is not a multiple of 4, we want\n    # to reduce the number down to the nearest multiple of 4.\n\n    total_marbles = 26\n    marbles_taken_by_Jason = total_marbles % 4\n    \n    # If marbles_taken_by_Jason is 0, it means Jason can't force\n    # a start with a multiple of 4, but since total_marbles (26)\n    # is not a multiple of 4, Jason will never take 0. So, we do\n    # not have to check for this condition explicitly.\n\n    return marbles_taken_by_Jason\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    divisible_sum = 2013\n    current_sum = 0\n    n = 1\n    while True:\n        current_sum += 5 * n\n        if current_sum % divisible_sum == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6 / 7) * 42\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    from itertools import combinations\n\n    ways = []\n    for combo in combinations(range(1, 25), 7):\n        if sum(combo) == 25:\n            ways.append(combo)\n\n    return len(ways), ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic drinks 90% of the day, we assume they must be at one of the three bars at any given time.\n    # If they are not at two of the bars, the only place they can be is the third bar.\n    # Therefore, the probability of the alcoholic being in the third bar, given they are not at the other two, is 100%.\n    return 1.0\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    base_number = (18 * 7) / 3\n    result = (base_number * 5) / 6\n    return result\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the grass grown per week, and c the grass consumption rate of one cow per week.\n    g, c = symbols('g c')\n\n    # Equation based on the first scenario: 120 cows eating for 12 weeks\n    equation1 = Eq(120 * c * 12, g * 12 + 120 * c * 11)\n\n    # Equation based on the second scenario: 150 cows eating for 8 weeks\n    equation2 = Eq(150 * c * 8, g * 8 + 150 * c * 7)\n\n    # Solve the system of equations for g and c\n    solutions = solve((equation1, equation2), (g, c))\n\n    # Calculate how many cows can be sustained for 6 weeks using the found g and c values\n    g_value = solutions[g]\n    c_value = solutions[c]\n    cows_six_weeks = Eq(g * 6, c * 6 * symbols('x') + c_value * 5 * symbols('x'))\n    x_value = solve(cows_six_weeks, symbols('x'))\n\n    return x_value[0]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    days_worked = 3 * 7  # three weeks\n    end_date = start_date + timedelta(days=days_worked - 1)  # minus one day because the start day is included\n\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    equation1 = Eq(4 * volunteers + 5, trees)\n    equation2 = Eq(7 * volunteers - 7, trees)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    boys_more = 55\n    total_students = 0\n\n    # Find the difference between the number of boys and girls on each layer.\n    # Since the square array alternates between boys and girls and the outermost layer is full of boys,\n    # the difference between boys and girls will be the side length of the square that is always odd.\n    for side_length in range(1, boys_more + 2, 2):\n        # Boys are on the outer and central square when the side_length is odd.\n        boys = side_length ** 2\n        # Girls are on the rest of the squares.\n        girls = (side_length - 2) ** 2 if side_length > 1 else 0\n        if boys - girls == boys_more:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of stickers in Bag A be a and in Bag B be b\n    a, b = symbols('a b')\n\n    # Equation 1: The total number of stickers before moving any\n    eq1 = Eq(a + b, 270)\n\n    # Equation 2: The new ratio after moving 56 stickers from A to B\n    eq2 = Eq((b + 56)/(a - 56), 3/2)\n\n    # Use sympy.solve to solve the system of equations\n    solutions = solve((eq1, eq2), (a, b))\n\n    # Return the number of stickers in Bag A at first\n    return solutions[a]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Applying cross multiplication to find the missing number (x)\n    # 10/x = 14/21\n    # 10 * 21 = x * 14\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    difference = 6\n    last_term = 41\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "import math\n\ndef solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets = math.ceil(children / bars_per_packet)\n\n    return packets\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    # Define a function to calculate sum of factors excluding the number itself\n    def sum_of_factors(num):\n        return sum([i for i in range(1, num) if num % i == 0])\n    # Initialize the starting number\n    num = 2\n    # Loop to find the smallest perfect number\n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 0\n    for num in range(30, 13, -2):\n        ans = ans - num + (num - 2)\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 31\n    common_difference = 3\n    n = 10\n\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes // cakes_per_box\n    if total_cakes % cakes_per_box != 0:\n        num_boxes += 1\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    for_sister = 6\n    num_friends = 6\n\n    sweets_per_friend = (total_sweets - for_sister) // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # lovelle had X muffins\n    # makayla had 3998 - X muffins\n\n    # After selling muffins\n    # lovelle has X - 462 muffins\n    # makayla has (3998 - X) * (3/5) = (3998 - X) * 0.6 muffins\n\n    # Now they have an equal number of muffins left:\n    # X - 462 = (3998 - X) * 0.6\n\n    equation = Eq(lovelle - 462, (3998 - lovelle) * 0.6)\n\n    solution = solve(equation, lovelle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the variable for total money\n    total_money = symbols('total_money')\n    \n    # Equation representing the sum of money spent on the book and bag\n    equation = Eq((1/4) * total_money + (2/7) * total_money, 225)\n    \n    # Solve for total money\n    solved = solve(equation, total_money)\n    \n    # Return the value of total money\n    return solved[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # Initialize the count of different positive integers\n    count = 0\n    # The maximum number of different positive integers that can add up to 30\n    # is when we use all numbers from 1 to the number x such that 1+2+3+...+x <= 30\n    # This is actually the summation of an arithmetic series (1, 2, ..., x)\n    # We search for the largest x such that the sum 1+2+...+x is not more than 30.\n    # Sum of first x natural numbers is x(x + 1) / 2 <= 30\n    while (count * (count + 1)) // 2 <= 30:\n        count += 1\n    # we subtract 1 because our while loop will exit when count is one past the correct number\n    return count - 1\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # The dealer must select at least 1 card from each of the first three colors\n    # to ensure there's no 10 cards of the same colour. Therefore, he must select:\n    # 3 (from the first color) + 7 (from the second color) + 11 (from the third color)\n    # cards to ensure he doesn't have 10 cards of one colour. Plus one more card to guarantee\n    # to have 10 cards of the same colour (due to the Pigeonhole Principle), which will definitely\n    # be from the last color since it has the most cards.\n\n    cards_selected = 3 + 7 + 11 + 1\n    return cards_selected\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    result = 5 / 100 * 180\n    return result\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_gaps = 8 - 1  # One less gap than the number of daffodils\n    gap_length = 1.1\n    total_length_of_gaps = number_of_gaps * gap_length\n    length_of_row = total_length_of_gaps + 2 * (0)  # Daffodils themselves don't add to the length\n\n    return length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n    length_per_piece = total_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    # Since the boxes are identical and we cannot have the same number of stickers in each,\n    # we just need to find distinct partitions of 9 into 3 parts.\n    # This reduces to solving `a + b + c = 9`, where a, b, and c are unique natural numbers.\n    \n    # We initialize the counter\n    count = 0\n    \n    # We iterate through all possible values for the first box\n    for a in range(1, 8):\n        # We iterate through the remaining possible values for the second box\n        for b in range(a + 1, 9 - a):\n            # Since the boxes are identical, we can directly find the value for the third box\n            c = 9 - (a + b)\n            \n            # If c is greater than b (to maintain uniqueness), we have a valid distribution\n            if c > b:\n                count += 1\n                \n    # We return the count of unique distributions\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # if Jane drinks x ml, Alex drinks 1.5x ml\n    # x + 1.5x = total_juice\n    # 2.5x = total_juice\n    jane_share = total_juice / 2.5\n    alex_share = 1.5 * jane_share\n    return alex_share\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    minutes = distance / speed\n    return minutes\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n\n    total_ways_without_restriction = comb(total_girls + total_boys, group_size)\n    \n    # Ways to form a group with no boys (all girls)\n    all_girls_ways = comb(total_girls, group_size)\n\n    # Subtracting ways of all girl groups from the total ways gives us the desired result\n    return total_ways_without_restriction - all_girls_ways\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_quarter_of_16 = 1/4 * 16\n    half_of_missing_number = one_quarter_of_16\n    missing_number = half_of_missing_number * 2\n\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    friends = 6\n\n    pears_per_friend = total_pears // friends\n    strawberries_per_friend = total_strawberries // friends\n    chocolates_per_friend = total_chocolates // friends\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend + chocolates_per_friend\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let x be the initial amount of money Bud had.\n    # Bud spent 1/4 of it on a book so she is left with 3/4 of x.\n    # Then, she spent 2/5 of the remaining money (3/4 of x) on a bag, which cost 60 pounds.\n    # So we have the equation 2/5 * (3/4) * x = 60\n    # Simplify the equation to find x.\n\n    bag_cost = 60\n    fraction_remaining_after_book = 3/4\n    fraction_spent_on_bag = 2/5\n\n    # Calculate the initial amount of money (x)\n    initial_money = bag_cost / (fraction_remaining_after_book * fraction_spent_on_bag)\n\n    return initial_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    ans = x * y\n    return ans\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    while total_digits < 157:\n        pages += 1\n        total_digits += len(str(pages))\n\n    return pages - 1  # Subtract 1 because we overshoot the total number\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 242, 2):  # Only check odd numbers\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    total_distance = (41 - 1) * 3  # number of gaps between trees * distance between trees\n    num_lamp_posts = (total_distance // 8) + 1  # number of intervals of 8m + 1 for the lamp post at the end\n    return num_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for unit_price in range(1, 1000):\n        total_price = unit_price * 72\n        if str(total_price)[1:4] == '679' and total_price > 10679 and total_price < 96790:\n            return unit_price\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n    \n    equation1 = Eq(4 * students_A, candies - 20)  # For class A, each student gets 4 candies, 20 more needed\n    equation2 = Eq(6 * students_B, candies + 16)  # For class B, each student gets 6 candies, 16 candies left\n    \n    solutions = solve((equation1, equation2), (candies, students_B))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n\n    time_to_pass = train_length / speed  # time = distance / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_savings = 24\n    dvd_cost = total_savings / 3\n    remaining_after_dvd = total_savings - dvd_cost\n    book_cost = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - book_cost\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    rabbits_initial = 32\n    for year in range(1, 4):\n        # Each year, rabbit population triples\n        rabbits_initial *= 3\n        # Wolves eat half of the rabbit population\n        rabbits_initial //= 2\n    \n    return rabbits_initial\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Calculate the time taken for each part of the trip\n    time_at_60 = 1 / 60  # time = distance / speed\n    time_at_30 = 1 / 30  # time = distance / speed\n\n    # Calculate the total distance and total time\n    total_distance = 1 + 1\n    total_time = time_at_60 + time_at_30\n\n    # Calculate the average speed using the formula: average speed = total distance / total time\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    num_washes = (target_amount / amount_per_wash) + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    multiplier = 2\n    day_number = 4\n\n    candies_eaten_on_fourth_day = initial_candies * (multiplier ** (day_number - 1))\n\n    return candies_eaten_on_fourth_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    for n in range(2, 200):  # As the greatest remainder is 'a+5', start from 2 and go up to 199 because 'a' is at least 0 and less than 'n'.\n        if (290 - a) % n == 0 and (235 - (a + 2)) % n == 0 and (200 - (a + 5)) % n == 0:\n            return n\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_earnings_per_day = 70\n    num_of_working_days = 6  # Monday to Saturday\n    total_earnings = average_earnings_per_day * num_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    # Let x be the smaller angle\n    # The larger angle is 2x\n    # Sum of angles in a triangle = 180 degrees\n    # One angle is 90 degrees (right angle)\n    # Therefore: x + 2x + 90 = 180\n\n    # Solve for x\n    x = (180 - 90) / 3\n\n    # Find the larger angle which is 2x\n    largest_angle = 2 * x\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for I in range(1, 10):\n        for P in range(1, 10):\n            if I != P:\n                IS = int(f\"{I}{S}\")\n                PI = int(f\"{P}{I}\")\n                if 4 * IS == PI:\n                    return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_sum = 765\n    num_members = 9\n    # The middle term of an arithmetic sequence where the sum is known and the number of terms is odd can be found by:\n    # middle_term = sum / number_of_terms\n    middle_age = total_sum // num_members\n    return middle_age\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    # Average sunshine for Monday to Saturday\n    avg_mon_to_sat = 3\n    \n    # Total sunshine hours from Monday to Saturday\n    total_sun_mon_to_sat = avg_mon_to_sat * 6\n    \n    # Sunshine hours on Sunday\n    sun_sun = 10\n    \n    # Total sunshine hours for the whole week\n    total_sun_week = total_sun_mon_to_sat + sun_sun\n    \n    # Number of days in the week\n    days_in_week = 7\n    \n    # Average amount of sunshine per day for the whole week\n    avg_sun_week = total_sun_week / days_in_week\n    \n    return avg_sun_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # running speed is twice the walking speed\n    walking_time_to_school = 24  # minutes\n\n    # Calculate the distance to school\n    distance_to_school = walking_speed * walking_time_to_school\n\n    # Calculate the time taken to cover half the distance by walking\n    time_walking_half_distance = (distance_to_school / 2) / walking_speed\n\n    # Calculate the time taken to cover the other half by running\n    time_running_half_distance = (distance_to_school / 2) / running_speed\n\n    # Summing up the times for walking and running\n    total_time = time_walking_half_distance + time_running_half_distance\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    total_intervals = total_trees + 1\n    road_length = 320\n\n    distance_between_trees = road_length / total_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.5\n    girls_saw_movie = girls * 0.6\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kim_savings = symbols('kim_savings')\n    \n    # Let x be the total savings Kim had initially\n    # She gave 1/3 to her mother -> amount given to mother = x / 3\n    # She then spent $177 on dresses and $129 on earrings -> total spent = 177 + 129\n    # The remaining is 1/2 of what she gave to her mother -> remaining = (x / 3) / 2\n    # According to the problem: remaining = x - (x / 3) - 177 - 129\n    # So, we have the equation (x / 3) / 2 = x - (x / 3) - 177 - 129\n    \n    amount_spent = 177 + 129\n    equation = Eq((kim_savings / 3) / 2, kim_savings - (kim_savings / 3) - amount_spent)\n    \n    # Now we solve for x\n    solutions = solve(equation, kim_savings)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # The problem can be seen as a partition of integer 6 into 3 parts\n    # This is known as the partition function P(n, k) with n = 6 and k = 3\n    # However, as the baskets are identical, we consider partitions where order doesn't matter - stars and bars method.\n    # The formula for combination with repetition is C(n + k - 1, k - 1)\n\n    from math import comb\n\n    # Since we have 3 baskets and 6 apples, we have (6 + 3 - 1) \"stars\" to place in 2 \"bars\"\n    ans = comb(6 + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    left_over = total_length % cut_length\n    return left_over\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    fraction = 3 / 100\n    ans = whole_number + fraction\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9*necklace + 5*earring, 1440)\n    equation2 = Eq(3*necklace + earring, 438)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            sum_of_N += N\n    return sum_of_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    daily_skirts = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        total_skirts += daily_skirts * day\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, chickens = symbols('cows chickens')\n    equation1 = Eq(cows + chickens, 8)\n    equation2 = Eq(4*cows + 2*chickens, 26)\n\n    solutions = solve((equation1, equation2), (cows, chickens))\n    \n    return solutions[chickens]\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3\n    in_range = lambda x: x >= 30 and x <= 60\n    ans = [term for term in range(first_term, 61, difference) if in_range(term)]\n    return ans\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    digit_count = 0\n    number = 1\n    while digit_count < 2023:\n        digit_count += len(str(number))\n        if digit_count < 2023:\n            number += 1\n    return int(str(number)[2023 - digit_count - 1])\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    minimum_sweets_per_student = 5\n\n    # To find out the class size we divide the total number of sweets by the minimum\n    # number of sweets each student should get\n    class_size = total_sweets // minimum_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(1 * apple + 1 * banana, 0.48)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the additional tax rate (T)\n    T = symbols('T')\n\n    # Calculate the tax for the first $50,000\n    tax_first_50k = 0.08 * 50000\n\n    # Calculate the tax for the remaining income\n    tax_remaining_income = (0.08 + T) * (150000 - 50000)\n\n    # Total tax paid\n    total_tax = tax_first_50k + tax_remaining_income\n\n    # Equation based on the total tax paid\n    tax_equation = Eq(total_tax, 15000)\n\n    # Solve the equation\n    solution_T = solve(tax_equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    for correct in range(25):\n        incorrect = 24 - correct\n        score = correct * 4 - incorrect * 2\n        if score == 66:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of candies Rachel and Alice have as r and a respectively.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, they have the same number\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they both eat 8 pieces of candy, Rachel has 3 times as many as Alice\n    equation2 = Eq((r - 8) / 3, a - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    days_of_january = 31\n    boys = 432\n    # Using the pigeonhole principle, divide the total boys by the number of days in January\n    max_births = (boys + days_of_january - 1) // days_of_january\n    return max_births\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # There are three choices for the hundreds place (2, 3)\n    # Two choices for the tens (the remaining number from 2, 3, and 0, since 0 cannot be in hundreds place)\n    # One choice for the ones (the remaining number)\n    # So in total, there are 3 * 2 * 1 possible combinations\n    ans = 2 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4\n    total_cars = 31\n    distance_between_cars = 5\n\n    length_of_other_cars = (total_cars - 1) * other_cars_length\n    total_distance_between_cars = (total_cars - 1) * 2 * distance_between_cars\n    total_length = first_car_length + length_of_other_cars + total_distance_between_cars\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given terms and their positions\n    term_7 = 105\n    term_8 = 120\n    term_9 = 135\n\n    # Calculate the common difference\n    common_difference = term_8 - term_7\n    \n    # Calculate the first term a1 using the common difference\n    term_1 = term_7 - (7 - 1) * common_difference\n\n    # Calculate the 100th term using the formula for the nth term of an arithmetic sequence\n    term_100 = term_1 + (100 - 1) * common_difference\n\n    return term_100\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDEFG'):\n        # Check if D and E are next to each other\n        if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n            # Check if A is in the middle of B and C\n            for i in range(1, 6):\n                if perm[i] == 'A' and (('B' in [perm[i-1], perm[i+1]]) and ('C' in [perm[i-1], perm[i+1]])):\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Sarah's share ratio is 3\n    sarah_ratio = 3\n    # Sarah received 12 sweets\n    sarah_sweets = 12\n    \n    # Calculate the value of one part in the ratio\n    one_part = sarah_sweets / sarah_ratio\n    \n    # Total ratio of sweets 2 + 3 + 5\n    total_ratio = 2 + 3 + 5\n    \n    # Calculate the total sweets\n    total_sweets = one_part * total_ratio\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_per_packet_cost_pence = 73\n    cakes_cost_pounds = 1.13\n    \n    total_biscuits_cost_pence = 7 * biscuits_per_packet_cost_pence\n    total_cakes_cost_pounds = 9 * cakes_cost_pounds\n    \n    total_cost_pounds = (total_biscuits_cost_pence / 100) + total_cakes_cost_pounds\n    \n    total_paid_pounds = 20\n    change_pounds = total_paid_pounds - total_cost_pounds\n    \n    return round(change_pounds, 2)\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    original_length = current_length / (1 + growth_rate)\n\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_petrol = week1 + week2 + week3\n    return total_petrol\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of stickers\n    p = symbols('p')\n\n    # Sam has 40 stickers more than Peter\n    s = p + 40\n\n    # Sam gives 20% of his to Peter\n    p_new = p + 0.20 * s\n    s_new = s - 0.20 * s\n\n    # Peter gives 25% of his new total to Sam\n    p_final = p_new - 0.25 * p_new\n    s_final = s_new + 0.25 * p_new\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(s_final - p_final, 96)\n\n    # Solve the equation\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n\n    return home_arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40', '%H:%M')\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # Digits to be used\n    digits = '2017'\n\n    # Count 3-digit numbers\n    # Can't start with '0', so we choose 2 out of the remaining 3 digits to form a 3-digit number\n    count_3_digits = len(list(permutations(digits[1:], 2))) * (len(digits) - 1)\n\n    # Count 4-digit numbers\n    # All digits must be used, so simply count the permutations of 4 digits\n    count_4_digits = len(list(permutations(digits, 4)))\n\n    # Total combinations are the sum of 3-digit and 4-digit numbers\n    total = count_3_digits + count_4_digits\n\n    return total\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6 + 1/2\n    division_result = result / (1/2)\n    return division_result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    n = 14\n    a = 5\n    d = 3\n    l = a + (n - 1) * d\n    sum_seq = n * (a + l) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_nines(n):\n        count = 0\n        while n > 0:\n            if n % 10 == 9:\n                count += 1\n            n //= 10\n        return count\n\n    total_nines = 0\n    page_number = 0\n\n    while total_nines < 181:\n        page_number += 1\n        total_nines += count_nines(page_number)\n\n    return page_number if total_nines == 181 else page_number - 1\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # \"c\" is the number of crystals Jason had at first\n    c = symbols('c')\n\n    # Half of the crystals plus 10 sold to Yvonne\n    equation1 = Eq(c / 2 + 10, c - 35 - 20 + 14)\n    \n    # Solve the equation to find the original number of crystals\n    original_crystals = solve(equation1, c)\n\n    return original_crystals[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_repeats = grey_rabbits / 2\n    total_rabbits = pattern_repeats * (1 + 2 + 2)\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    digits = [0, 1, 5, 8]\n    three_digit_numbers = []\n\n    for i in range(1, len(digits)):  # First digit cannot be 0\n        for j in range(len(digits)):\n            for k in range(len(digits)):\n                if i != j and i != k and j != k:  # All digits should be different\n                    number = digits[i]*100 + digits[j]*10 + digits[k]\n                    three_digit_numbers.append(number)\n\n    largest_number = max(three_digit_numbers)\n    smallest_number = min(three_digit_numbers)\n\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    count = 0\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    n = 180\n    factor = 9\n    count = 0\n\n    for i in range(1, n // factor + 1):\n        if n % (i * factor) == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n\n    total_age = sarah_age + peter_age + mike_age\n\n    return int(total_age)\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    return solution[u]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    quantity = 12\n    total_cost = price_per_box * quantity\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Convert pounds to pence\n    total_pence = 200\n    \n    # Cost of individual sweets and cost of three sweets\n    cost_single = 12\n    cost_triplet = 30\n    \n    # Calculate the number of triplet sweets she can buy\n    triplet_sweets = total_pence // cost_triplet\n    remaining_pence = total_pence % cost_triplet\n    \n    # Calculate the number of single sweets she can buy with the remaining pence\n    single_sweets = remaining_pence // cost_single\n    \n    # Total number of sweets is the sum of triplet sweets times 3 and single sweets\n    max_sweets = (triplet_sweets * 3) + single_sweets\n    \n    return max_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_now = 7\n    may_age_future = 10\n    kenny_age_future = symbols('kenny_age_future')\n    brother_age_future = kenny_age_future - 2\n    \n    equation = Eq(kenny_age_future + brother_age_future, 3 * may_age_future)\n    \n    kenny_age_now = solve(equation, kenny_age_future)[0] - (may_age_future - may_age_now)\n    \n    difference_in_age = kenny_age_now - may_age_now\n    \n    return difference_in_age\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # The problem is equivalent to finding the number of ways to partition\n    # the number 10 into 7 distinct parts, which is the same as finding the number\n    # of ways to distribute 10 identical items into 7 distinct boxes.\n\n    # However, since there must be at least 1 ball in each box, we can consider this as\n    # first placing 1 ball into each box and distributing the remaining 3 balls into the 7 boxes.\n\n    # Thus, we need to find the combinations of distributing 3 identical balls into 7 boxes,\n    # which is the stars and bars problem and can be calculated as C(n+k-1, k-1)\n\n    # Number of balls remaining to be distributed\n    remaining_balls = 10 - 7  # Because one in each box\n    # Number of boxes\n    boxes = 7\n    # Calculate combinations using the formula C(n+k-1, k-1)\n    ans = comb(remaining_balls + boxes - 1, boxes - 1)\n\n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # For Felix to ensure victory, he should aim to leave John with a position with 3 candies left after John's turn\n    # because whatever John does next (eat 1 or 2 candies), Felix will then be able to eat the remaining and win.\n\n    # The strategy for Felix is to go second and then mirror John's moves to always end up with a\n    # total candies eaten equal to a multiple of 3 after John's turn.\n    # If John eats 1 candy, Felix should eat 2 candies.\n    # If John eats 2 candies, Felix should eat 1 candy.\n\n    # By using this strategy, Felix will always reach the next multiple of 3.\n    # When there are 4 candies left, John will have to eat and leave 3 or 2 candies to Felix,\n    # Felix will then eat 2 or 1 respectively, winning the game.\n\n    # This strategy shows that Felix should go second, and that is Felix's winning strategy.\n    return \"second\", \"mirror John's moves to reach multiple of 3\"\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation1 = Eq(x + 5, x + 4)\n    equation2 = Eq(x - 3 * 4, x)\n\n    solutions = solve((equation1, equation2), x)\n\n    ans = solutions[x] + 4  # since we need 4 more pails of 3 litres each after using the x litres\n    return ans\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable we want to solve for\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes_needed = (total_length + pipe_length - 1) // pipe_length\n\n    return num_pipes_needed\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8*9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0\n    for i in range(1, 2017):\n        times_underlined = 0\n        if i % 2 == 0:\n            times_underlined += 1\n        if i % 3 == 0:\n            times_underlined += 1\n        if i % 4 == 0:\n            times_underlined -= 1  # Because every multiple of 4 is also a multiple of 2.\n        if times_underlined == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 28:\n        if '3' in str(page):\n            count += str(page).count('3')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    # Initial total amount in cents\n    total_amount = 50 + 20 + 10 + 5\n    \n    # List of coins in cents\n    coins = [50, 20, 10, 5]\n\n    # Check for each coin if Zoey would have twice as much as her brother\n    for coin in coins:\n        # Calculate Zoey's amount after losing the coin\n        zoey_amount = total_amount - coin\n\n        # If Zoey has twice as much as her brother, we found the lost coin\n        if zoey_amount == 2 * (total_amount - zoey_amount):\n            return coin\n\n    return None  # If no such coin was found (should not happen)\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)  # Ways to choose 4 girls from 8\n    boys_ways = comb(12, 3)  # Ways to choose 3 boys from 12\n    total_ways = girls_ways * boys_ways\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # As we know, average = sum of terms / number of terms\n    # All possible sums of 4 numbers out of 5 will be 4 times their respective averages\n    sums_of_4_numbers = [4 * average for average in [36, 38, 39, 45, 49]]\n    \n    # The sum of all 5 numbers can be found by adding the smallest sum_of_4_numbers\n    # with the largest number (which is excluded from this sum).\n    # As every number is included in 4 of these sums, the sum of all numbers\n    # will be (sum(sums_of_4_numbers) - smallest_sum_of_4_numbers) / 4.\n    # The largest number can then be found by subtracting the largest sum_of_4_numbers\n    # from this total sum.\n    \n    total_sum = (sum(sums_of_4_numbers) - min(sums_of_4_numbers)) // 4\n    largest_number = total_sum - max(sums_of_4_numbers)\n    \n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55   # Convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # Convert 16.35 to minutes\n    time_you_arrive = first_bus_time + 4  # You arrive 4 minutes late\n\n    waiting_time = second_bus_time - time_you_arrive  # Time to wait for the second bus in minutes\n\n    return waiting_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g.\n    # Then: b + g = 152, and (b - b/11) = (g - 5)\n    # Simplify the second equation to: 11b - b = 11g - 55\n    # Which is equivalent to: 10b = 11g - 55\n    # Now we have two equations:\n    # I. b + g = 152\n    # II. 10b = 11g - 55\n    # Multiply I by 10 and subtract from II to solve for g:\n    # 10b + 10g = 1520\n    # II - (10 * I), gives:\n    # 0b + g = 5 -> g = 5 (This indicates we did something wrong since we expect more girls)\n    \n    # We will start with our assumption and mathematical equation again.\n    # Let the number of boys be b and number of girls be g\n    # Then: b + g = 152\n    # Removing 1/11 of boys and 5 girls gives us: b - b/11 = g - 5\n    # Simplify and solve for b:\n    # b - b/11 + 5 = g\n    # b(1 - 1/11) + 5 = g\n    # b*10/11 + 5 = g\n    \n    # Now we substitute g from the first equation:\n    # b*10/11 + 5 = 152 - b\n    # b*10/11 + b = 152 - 5\n    # (b*10/11) + (b*11/11) = 147\n    # b*(10/11 + 11/11) = 147\n    # b*(21/11) = 147\n    # b = 147 * (11/21)\n    # b = 7 * 11\n    # b = 77 (This is the original number of boys)\n    b = 147 * (11/21)\n    return int(b)\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    \n    num_trees = (road_length // distance_between_trees) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    number_of_workers = 70\n    lorry_capacity = 8\n    lorries_needed = (number_of_workers + lorry_capacity - 1) // lorry_capacity\n    return lorries_needed\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    men = symbols('men')\n    women = symbols('women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n    \n    solution_dict = solve((equation1, equation2), (men, women))\n    \n    return solution_dict[men] + solution_dict[women]\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    first_three_days = 40\n    average_next_four_days = 20\n    last_two_days = 60\n\n    total_pages = first_three_days + (average_next_four_days * 4) + last_two_days\n\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # The remainders are the same (3), and we want to find a number less than 200\n    # We can set up the congruences as follows:\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    \n    # Use the Chinese Remainder Theorem to find a solution for these congruences\n    num, _ = solve_congruence(*congruences)\n    \n    # Since we need a three-digit number less than 200\n    # We find the smallest three-digit number that satisfies the congruence\n    while num < 100 or num >= 200:\n        num += 4 * 5 * 9  # product of the moduli\n    \n    return num\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # Let x be the total number of students and y be the total number of rooms.\n    # We set up the equations based on the problem statement:\n    # If 4 students live in one room, there are x students and x/4 rooms.\n    # There are 6 more students than rooms can hold, therefore x - 4*(x/4) = 6.\n    # Simplify to get x % 4 = 6 % 4\n    students_remainder = 6 % 4\n\n    # If 5 students live in one room, there are y rooms and 5y students.\n    # There are 1 room without students, therefore 5y - x = 5\n    rooms_remainder = 1 * 5\n    \n    # Now we find such x that satisfies both conditions\n    # x % 4 == students_remainder and x % 5 == rooms_remainder\n    # We use the Chinese Remainder Theorem and iterate through possible number of students\n    x = students_remainder\n    while True:\n        if x % 5 == rooms_remainder:\n            break\n        x += 4  # increment x by the number of students per room in the first scenario\n    \n    return x\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3 and dice1 + dice2 + dice3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandson_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n        if bill_age == sum(grandson_ages):\n            return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_original = 7 * 9\n    total_sum_new = 6 * 10\n    removed_number = total_sum_original - total_sum_new\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_still_at_party = total_people - people_left\n    return int(people_still_at_party)\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple of the arrival times of trains from Aytown, Beeville, and Ceeford\n    lcm_minutes = lcm(15, 12, 8)\n\n    # Convert the lcm to hours and minutes\n    lcm_hours, lcm_remaining_minutes = divmod(lcm_minutes, 60)\n\n    # Starting time is 10:00 am\n    start_hour = 10\n    next_time_hour = start_hour + lcm_hours\n    next_time_minute = lcm_remaining_minutes\n\n    # Adjust for 24-hour time format if it goes beyond\n    next_time_hour = next_time_hour % 24\n\n    return f\"{next_time_hour:02d}:{next_time_minute:02d}\"\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    deduction_wrong = -2\n    total_marks = 79\n\n    # Let x be the number of correct answers\n    # Since there are 20 questions, the number of wrong or unanswered is 20-x\n    # We create an equation for the total marks:\n    # 5*x + 2*(20 - x) = 79\n    \n    # We need to find the value of x that satisfies the equation\n    # Now, solving for x:\n    x = (total_marks - deduction_wrong * total_questions) / (marks_correct - deduction_wrong)\n\n    return int(x)\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    # By inclusion-exclusion principle: \n    # At least one sport A ∪ B ∪ C = A + B + C - (A ∩ B + B ∩ C + A ∩ C) + (A ∩ B ∩ C)\n\n    # However, since the sum of participants in each individual activity exceeds the total number of students\n    # the overlapping part for all three sports cannot be 0. We need to find the minimum of A ∩ B ∩ C\n    \n    # The overlap of all three has to at least grow enough such that the equation does not exceed total students\n    all_three_overlap = (swimmers + cyclists + table_tennis_players) - total_students\n    \n    return all_three_overlap\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        # Convert number to string and count occurrences of '0'\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    factor = 3999 * 2014\n    ans = (factor * 2014.2014 + factor * 3999.3999) / 12.0012\n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass_tree = 30  # time in seconds\n    length_of_train = 360  # length in meters\n\n    # speed = distance / time\n    speed_of_train = length_of_train / time_to_pass_tree  # speed in meters per second\n\n    # Convert to km/h by multiplying with 3.6 (1 m/s = 3.6 km/h)\n    speed_of_train_kmh = speed_of_train * 3.6\n\n    return speed_of_train_kmh\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_climb_per_day = day_climb - night_slide\n    distance_covered = 0\n    day = 0\n\n    while distance_covered < total_distance:\n        day += 1\n        distance_covered += day_climb\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= night_slide\n\n    return day\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # If we draw 3 marbles, in the worst case, they could all be from the most plentiful color (12 red marbles).\n    # If we draw 1 more, we might get a marble of the second most plentiful color (9 blue), and so on.\n    # So, keep drawing one from each category (red, blue, and yellow)\n    # until we are guaranteed to have one of each of the four colors.\n    # 1 red + 1 blue + 1 yellow + 1 more (to ensure fourth color) = 4\n    \n    # Now, consider worst case scenario to ensure that there are 4 marbles of different colors:\n    # If we take all three red marbles, we still don't have 4 different colors.\n    # To get the fourth color (blue), we would need to draw all yellow marbles as well.\n    # So we add the count of yellow marbles:\n    # 3 (red) + 3 (the count of yellow marbles) = 6\n    # Drawing 6 marbles ensures 3 colors: red, yellow, and blue.\n    \n    # To ensure the fourth color, we have to draw one more, no matter what:\n    ans = 6 + 1\n    \n    return ans\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    n = 10  # starting number for one person\n    m = 24  # number opposite to the starting person\n\n    # The difference between the numbers that are opposite to each other\n    difference = m - n\n\n    # The people are evenly spaced, so the difference must be half the circle\n    # So, total people playing the game is difference * 2\n    total_people = difference * 2\n\n    return total_people\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_and_stationery_percent = 20\n    savings_minus_food = -6\n\n    books_and_stationery = (books_and_stationery_percent / 100) * pocket_money\n    transport_plus_food = pocket_money - books_and_stationery\n    # Let's assume transport cost is x, then food cost will be 3x\n    # and savings will be 3x + 6 (because savings is 6 more than food which is 3x)\n    # So, x + 3x + 3x + 6 = transport_plus_food\n    # 7x + 6 = transport_plus_food\n    x = (transport_plus_food - 6) / 7\n    savings = 3 * x + 6\n    savings_percent = (savings / pocket_money) * 100\n    \n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    for age_this_year in factors_of_66:\n        age_four_years_ago = age_this_year - 4\n        if age_four_years_ago % 6 == 0:\n            return age_this_year\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import gcd\n\n    lcm = (24 * 64) // gcd(24, 64)\n\n    return lcm\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    count = 0\n    for i in range(3267, 5121):\n        s = str(i)\n        if len(set(s)) == len(s) and all(digit in '123456' for digit in s):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [num for num in range(10, 100) if 75 % num == 0]\n    for num in factors_of_75:\n        if num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Little Miss Careless saw the subtrahend wrongly and wrote 41 instead of 14.\n    # She got 50 as her answer. So, we add the difference of the digits she\n    # misread to her answer to find the correct difference.\n    wrong_subtrahend = 41\n    correct_subtrahend = 14\n    careless_result = 50\n\n    # The difference between the subtrahend she saw and the correct subtrahend\n    difference_in_subtrahend = wrong_subtrahend - correct_subtrahend\n\n    # Add the difference to the result she got.\n    correct_difference = careless_result + difference_in_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([40, 36, 32, 28, 24]) - sum([38, 34, 30, 26, 22])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters = 4\n    sisters_apples_each = 5\n    apples_left = 20\n\n    total_apples = justin_apples + (sisters * sisters_apples_each) + apples_left\n    \n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    P = 5000  # Initial principal balance\n    A = 7320.5  # Amount owed after 4 years\n    t = 4  # Time period in years\n    r = symbols('r')  # Interest rate (as a decimal)\n\n    # Compound interest formula: A = P * (1 + r) ** t\n    # We need to solve for r\n    equation = Eq(A, P * (1 + r) ** t)\n    r_value = solve(equation, r)\n\n    # r_value is a list of potential solutions including complex. We need the real solution which is a percent.\n    interest_rate = [sol.evalf() for sol in r_value if sol.is_real][0]\n\n    return interest_rate\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Let n be the number of soldiers in one row (or column) of the original square\n    # After adding 31 soldiers and one more row and column, we have (n+1)^2 = n^2 + 31\n    # Thus, 2n + 1 = 31, solving for n gives us n = 15\n    # The total number of soldiers in the array now is (n+1)^2\n    n = (31 - 1) // 2\n    total = (n + 1) ** 2\n    return total\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return float(56 / 21)\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    \n    february_saved = total_saved - january_saved - march_saved\n    \n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes_available = 1 * 60 + 20  # 1 hour and 20 minutes\n\n    num_pictures = total_minutes_available / minutes_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Since there are 6 children in total and each needs to get at least one apple,\n    # we can give one apple to each of the other 5 children first.\n    apples_for_others = 5\n\n    # The remaining apples can be given to Ann.\n    anns_apples = 30 - apples_for_others\n\n    return anns_apples\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1356789', 3):\n        first_number = int(''.join(p))\n        second_number = 2 * first_number\n        third_number = 4 * first_number\n        combined = str(first_number) + str(second_number) + str(third_number)\n        if len(set(combined)) == 7 and all(d in combined for d in '1356789'):\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # If Cherry wears a blouse and pants, she must choose a pair of shoes\n    blouse_pants_shoes = shirts * pants * shoes\n    \n    # If Cherry wears a dress, she can choose either shoes or heels\n    dress_shoes_or_heels = dresses * (shoes + heels)\n    \n    # Total combinations\n    total_combinations = blouse_pants_shoes + dress_shoes_or_heels\n    \n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the objects\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A + B, 13)  # A and B weigh 13kg together\n    equation2 = Eq(A + C, 25)  # A and C weigh 25kg together\n    equation3 = Eq(C, 3 * B)   # C weighs 3 times as much as B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one book and one teddy bear\n    book, teddy_bear = symbols('book teddy_bear')\n    \n    # Create the equations based on the given information\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n    \n    # Solve the system of equations for the cost of one book and teddy bear\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n    \n    # Return the cost of one book\n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # We know that if the prime factorization of a number is a^p * b^q * ...,\n    # then the total number of factors is (p+1)*(q+1)*...,\n    # and for the highest common factor, the exponents in its prime factorization\n    # are the minima of corresponding exponents in the factorized forms of M and N.\n    \n    # Since M and N are only divisible by 3 and 5 and their HCF is 75 = 3^1 * 5^2,\n    # M = 3^a * 5^b and N = 3^c * 5^d such that a, b, c, d >= 0 and a, c >= 1 and b, d >= 2.\n    \n    # To find M and N, we need to find a, b, c, d such that:\n    # (a+1)*(b+1) = 12 (number of factors of M) and\n    # (c+1)*(d+1) = 10 (number of factors of N).\n    \n    # Possible pairs for 12 factors: (1,11), (2,5), (3,3) - since 1 would mean the power of 0 (absent prime factor)\n    # Possible pairs for 10 factors: (1,9), (2,4) - since 1 would mean the power of 0 (absent prime factor)\n    \n    # Now, we find values of a, b, c, d from the pairs subtracting 1 from each element of the pairs:\n    # For M with 12 factors: (0,10), (1,4), (2,2) - adjusted for exponents\n    # For N with 10 factors: (0,8), (1,3) - adjusted for exponents\n    \n    # However, we know that for HCF, a, c >= 1 and b, d >= 2.\n    # So we eliminate (0,10) for M and (0,8) for N.\n    # We end up with:\n    # M: (1,4), (2,2) => M can be 3^1 * 5^4 or 3^2 * 5^2\n    # N: (1,3) => N must be 3^1 * 5^3 to match the HCF and number of factors.\n    \n    # Now we calculate M and N:\n    M_values = [3**1 * 5**4, 3**2 * 5**2]\n    N_value = 3**1 * 5**3\n    \n    # Since the HCF of M and N is 75, and both must include this factor, we use it as a starting point.\n    possible_M = [M for M in M_values if M % 75 == 0]\n    \n    # We expect only one valid M that meets the HCF condition with the N.\n    assert len(possible_M) == 1\n    \n    M = possible_M[0]\n    N = N_value\n    \n    # Adding M and N to get the sum:\n    return M + N\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all to grams (1 kg = 1000g)\n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Calculate the mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Find the difference in grams\n    difference_g = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the difference back to kg and g\n    difference_kg = difference_g // 1000\n    difference_g %= 1000\n\n    return (difference_kg, difference_g)\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nina, james = symbols('nina james')\n\n    # Total number of buttons they have originally\n    equation1 = Eq(nina + james, 22)\n\n    # After Nina gives 4 buttons to James, they have the same number\n    equation2 = Eq(nina - 4, james + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nina, james))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 1  # Initialize with the first value of the series\n    for i in range(2, 101):  # Loop from 2 to 100\n        for j in range(1, i):  # Loop from 1 to i-1\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if (correct * 4) - (incorrect * 2) == 29:\n            return correct\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_length = 5\n    target_length = 52\n\n    full_pattern_sum = sum(range(1, pattern_length + 1))\n    full_patterns = target_length // pattern_length\n    partial_pattern_length = target_length % pattern_length\n\n    total_sum = full_pattern_sum * full_patterns + sum(range(1, partial_pattern_length + 1))\n\n    return total_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper / paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    # Since there are no trees at either end, we consider the intervals to be one less than the number of trees\n    intervals = total_trees - 1\n    return total_distance / intervals\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits: 10 fish / 4 rabbits\n    fish_per_rabbit = 10 / 4\n\n    # Oscar trades 5 rabbits for 6 packs of wheat: 5 rabbits / 6 packs of wheat\n    rabbits_per_pack_wheat = 5 / 6\n\n    # Find out how many fish per pack of wheat\n    fish_per_pack_wheat = fish_per_rabbit * rabbits_per_pack_wheat\n\n    # Calculate how many fish Owen should give Dennis for 12 packs of wheat\n    fish_for_12_packs_wheat = fish_per_pack_wheat * 12\n\n    return fish_for_12_packs_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = Fraction(10) + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    \n    number_of_short_rods = total_length / short_rod_length\n\n    return number_of_short_rods.numerator // number_of_short_rods.denominator\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    deal_laptop_count = 30\n    required_laptops = 20\n\n    # Calculate the cost when buying laptops individually\n    individual_cost = single_laptop_cost * required_laptops\n\n    # Calculate the cost per laptop under the deal\n    deal_cost_per_laptop = deal_cost / deal_laptop_count\n\n    # Calculate the cost for the required laptops under the deal\n    deal_cost_for_required_laptops = deal_cost_per_laptop * required_laptops\n\n    # Calculate the savings\n    savings = individual_cost - deal_cost_for_required_laptops\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Total singing performances is 6, dancing performances is 4.\n    # To ensure at least 1 singing performance between every 2 dancing performances,\n    # we could first arrange the singing performances and then insert the dancing\n    # performances between them.\n    \n    # We have 7 positions to insert the dancing performances (_S_S_S_S_S_S_)\n    # where S represents singing and _ represents possible positions for dancing.\n    # With 4 dancing performances, we have C(7,4) ways to choose the positions.\n    # Then the singing performances within themselves have 6! permutations and\n    # the dancing performances within themselves have 4! permutations.\n\n    # Calculate the number of possible positions to insert dancing performances\n    positions = factorial(7) // (factorial(4) * factorial(7 - 4))\n    \n    # Calculate the permutations of singing and dancing performances\n    sing_permutations = factorial(6)\n    dance_permutations = factorial(4)\n\n    # Calculate the total number of different ways to arrange the performances\n    total_ways = positions * sing_permutations * dance_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    return discounted_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')  # Variable for the number of penguins\n\n    # If 3 fish are given to each penguin, there will be 5 fish left\n    equation1 = Eq(3 * penguins + 5, 4 * penguins)  # Total fish when giving 3 to each penguin\n    # If 4 fish are given to each penguin, 15 more fish are needed\n    equation2 = Eq(4 * penguins - 15, 4 * penguins)  # Total fish when giving 4 to each penguin\n\n    # Solve the system of equations\n    num_penguins = solve((equation1, equation2), (penguins))\n\n    return num_penguins[penguins]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    original_number = -14 + 26\n    correct_result = original_number + 26 + 26\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    for ht1 in range(4):  # Home team score possibilities at half-time.\n        for ht2 in range(3):  # Away team score possibilities at half-time.\n            # Scores at half-time must be less than or equal to final scores.\n            if ht1 <= 3 and ht2 <= 2:\n                for ft1 in range(ht1, 4):  # Possible scores for full-time.\n                    for ft2 in range(ht2, 3):\n                        if ft1 == 3 and ft2 == 2:  # Final score must be 3-2.\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    fraction_lost = 3/8\n    cards_lost = original_cards * fraction_lost\n    return cards_lost\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # a can't be 0 because it's the first digit\n        for b in range(10):  # b can be 0-9\n            ab = int(f'{a}{b}')\n            ba = int(f'{b}{a}')\n            aab = int(f'{a}{a}{b}')\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    clara, emma = symbols('clara emma')\n\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n\n    solutions = solve((equation1, equation2), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n    students = 6\n    monitors = 2\n    return comb(students, monitors)\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the total number of girls and b be the total number of boys\n    boys_cannot_swim, girls_cannot_swim, g, b = symbols('boys_cannot_swim girls_cannot_swim g b')\n    \n    # Since the number of girls who cannot swim is equal to the number of boys who cannot swim\n    equation1 = Eq(girls_cannot_swim, boys_cannot_swim)\n\n    # Fraction of girls who can swim is 3/8, hence those who can't swim is 5/8\n    equation2 = Eq(girls_cannot_swim, g * 5/8)\n\n    # Fraction of boys who can swim is 3/5, hence those who can't swim is 2/5\n    equation3 = Eq(boys_cannot_swim, b * 2/5)\n\n    # Together, the number of pupils who cannot swim is 20\n    equation4 = Eq(girls_cannot_swim + boys_cannot_swim, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (boys_cannot_swim, girls_cannot_swim, g, b))\n\n    # Calculate the total number of pupils which is the sum of boys and girls\n    total_pupils = solutions[g] + solutions[b]\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Mike's position being 2nd from any direction implies\n    # that there are exactly 3 rows and 3 columns in the rectangular array.\n    # Because if there were more or less, his position couldn't be always 2nd\n    # when counting from any side.\n    \n    # The number of students is therefore the number of desks,\n    # which is the area of the rectangle (3 rows * 3 columns).\n    \n    num_students = 3 * 3\n    \n    return num_students\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    mangoes_weight = 2 * (full_weight - half_full_weight)\n    empty_basket_weight = full_weight - mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 0.85 * 400\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    # Bud's portion is the remaining part after Pip ate 3/5 of the sweets\n    # Therefore, Bud's part is 1 - 3/5 = 2/5 of the total.\n    bud_portion = 2 / 5\n    \n    # If 16 sweets were left for Bud, and that constitutes 2/5 of the total,\n    # we can find the total sweets by dividing the count of Bud's sweets by Bud's portion.\n    total_sweets = 16 / bud_portion\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    number = 6 * 5\n    percent_of_40 = (number / 40) * 100\n    return percent_of_40\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_spent_for_3_cups = 30\n    number_of_cups_mandy_wants = 5\n    \n    cost_per_cup = total_spent_for_3_cups / 3\n    total_cost_for_mandy = cost_per_cup * number_of_cups_mandy_wants\n\n    return total_cost_for_mandy\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_mushroom_houses = 5\n    small_mushroom_houses = 9\n    total_rabbits = 38\n    rabbits_in_big_houses = big_mushroom_houses * 4\n\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    rabbits_per_small_house = remaining_rabbits // small_mushroom_houses\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    daily_income = 60\n    days_in_week = 7\n\n    total_income = daily_income * days_in_week\n\n    return total_income\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += (i**2 - (i-1)**2)\n        else:\n            ans -= (i**2 - (i-1)**2)\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    def count_ways(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n\n    ans = count_ways(6)\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July is 5 months\n    total_pizzas = average_pizzas_per_month * number_of_months\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_of_numbers = 21 + 22 + 23\n    for i in range(1, sum_of_numbers + 1):\n        if 2 * 3 * i == sum_of_numbers:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, ryan = symbols('abigail ryan')\n    \n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n    \n    solutions = solve((equation1, equation2), (abigail, ryan))\n    \n    ryan_age_in_2_years = solutions[ryan] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    result = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return result\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    still_water_speed = 33\n    current_speed = 3\n    distance = 150\n\n    upstream_speed = still_water_speed - current_speed\n    time_upstream = distance / upstream_speed\n    \n    return time_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    drink, popcorn = symbols('drink popcorn')\n    \n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n    \n    solutions = solve((equation1, equation2), (drink, popcorn))\n    \n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n        \n    last_multiple = (92 // 4) * 4\n    if last_multiple > 92:\n        last_multiple -= 4\n\n    count_of_multiples = (last_multiple - first_multiple) // 4 + 1\n    \n    return count_of_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = sum([(-1)**((x-1)//4) * x for x in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base = 9\n    exponent = 99\n    ones_digit_pattern = [base**i % 10 for i in range(1, 5)]  # Calculate pattern for ones digit every power upto 9^4\n    pattern_length = len(ones_digit_pattern)\n    pattern_index = exponent % pattern_length - 1  # Subtract 1 because list indices start from 0\n    ones_digit = ones_digit_pattern[pattern_index]\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the symbol 'age' represent Claire's current age\n    age = symbols('age')\n\n    # Equation representing the age relationship stated\n    equation = Eq(age + 6, 3 * age)\n\n    # Solve the equation for the current age\n    current_age = solve(equation, age)[0]\n\n    # Calculate Claire's age two years from now\n    age_two_years_later = current_age + 2\n\n    return age_two_years_later\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    actual_duration = 1 - 11/12\n    late_departure = 15\n    late_arrival = 5\n    scheduled_duration = (late_departure - late_arrival) / actual_duration\n    return scheduled_duration\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_product = total_product - known_product\n    missing_number = missing_product / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # Coin values in pence\n    fare = 44\n    minimal_coins = 0\n    \n    # Susan pays with the biggest coin smaller than or equal to the fare amount,\n    # to minimize the number of coins.\n    amount_paid = coins[next((i for i, coin in enumerate(coins) if coin <= fare), len(coins)-1)]\n    \n    # Number of coins that change hands includes the one Susan pays with and the change she receives\n    number_of_coins_change = 1  # Susan pays with one coin\n    \n    # Calculate the change to be given back to Susan\n    change_to_give = amount_paid - fare\n    \n    # Go through the coin values and give change using the largest possible coins\n    for coin in coins:\n        while change_to_give >= coin:\n            change_to_give -= coin\n            number_of_coins_change += 1  # Increment the coin count for each coin used in giving change\n    \n    return number_of_coins_change\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people  # Use floor division to get whole number of sweets per person\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To ensure Jane has 4 different coloured marbles, we consider the worst case scenario using the Pigeonhole Principle.\n    # She could draw all 4 red, then all 7 green, and then all 6 blue.\n    # After these, the next marble she draws must be orange, ensuring she has all 4 different colours.\n    \n    # Total marbles drawn in the worst case before getting 4 different colours\n    total_marbles = 4 + 7 + 6 + 1\n    \n    return total_marbles\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_slide = 1\n    effective_distance = day_distance - night_slide\n    # Subtracting 3 from total as on the last day it climbs out of burrow\n    remaining_distance = total_distance - day_distance  \n    days = 1  # because it climbs out on the last day\n    \n    days += remaining_distance // effective_distance\n    # If any distance is left after sliding down that means there is an extra day\n    if remaining_distance % effective_distance != 0:\n        days += 1\n        \n    return days\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # We use \"stars and bars\" (balls and urns) theorem\n    # Number of ways to distribute n indistinguishable items into k distinct bins\n    # n = 19 - 4 (since each of the 4 kids must get at least 1 book)\n    # k = 3 (which is 4 - 1, since 3 separators are needed to create 4 sections)\n    ways = nCr(19 - 4 + 4 - 1, 4 - 1)\n    return ways\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans.\n    m, t, v = symbols('m t v')\n\n    # Each motorbike has 2 wheels, each tricycle has 3 wheels, and each van has 4 wheels.\n    # System of equations based on the given information:\n    equation1 = Eq(2*m + 4*v - 3*t, 35)       # 35 more motorbike and van wheels than tricycle wheels.\n    equation2 = Eq(3*t + 4*v - 2*m, 13)       # 13 more tricycle and van wheels than motorbike wheels.\n    equation3 = Eq(2*m + 3*t + 4*v, 101)      # Total of 101 wheels.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (m, t, v))\n\n    # How many more motorbikes than vans are there?\n    more_motorbikes_than_vans = solutions[m] - solutions[v]\n\n    return more_motorbikes_than_vans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    diff = 1\n    while a < 100:\n        diff += 1\n        a += diff\n    return a\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # This is a problem of partitioning an integer into a fixed number of parts,\n    # which is equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 6 where x1, x2, x3 are positive integers (pencil cases cannot be empty).\n    \n    # Since the pens are identical, we can use stars and bars theorem (combinatorial method)\n    # to find the number of ways to partition the pens:\n    # We have 6 identical items and 3 - 1 = 2 partitions (since there cannot be an empty case).\n    # The number of ways to distribute n identical items into k different boxes is (n - 1)C(k - 1).\n    \n    # In our case, it is (6 - 1)C(3 - 1) = 5C2\n    \n    from math import comb\n    return comb(5, 2)\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n    D = 41\n\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(B, C + 5)\n    equation3 = Eq(C + D, A)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4 * i) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = milk_per_cup * cups_needed\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2 # Pip and Bud themselves are also people in the line\n\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both_sports = symbols('both_sports')\n\n    football_lovers = 3 * both_sports\n    basketball_lovers = 4 * both_sports\n    total_students = 36\n\n    # Inclusion-Exclusion Principle formula for two sets:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # total_students = football_lovers + basketball_lovers - both_sports\n    equation = Eq(football_lovers + basketball_lovers - both_sports, total_students)\n\n    solutions = solve(equation, both_sports)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef count_valid_dates(year):\n    valid_dates = 0\n    # Generate all possible permutations of 2 zeros, 2 ones, 2 twos, and 2 from [3-9]\n    perm_set = set(permutations('001122' + str(year)[-2:], 8))\n    for perm in perm_set:\n        # Join the permutation tuple to form a string\n        date_str = ''.join(perm)\n        # Extract the year, month, and day\n        y, m, d = int(date_str[:4]), int(date_str[4:6]), int(date_str[6:])\n        # Check if the extracted year matches the given year\n        # Check if the month is valid (1-12)\n        # Check if the day is valid based on the month\n        if y == year and 1 <= m <= 12 and 1 <= d <= 31:\n            if m in [1, 3, 5, 7, 8, 10, 12]:\n                valid_dates += 1\n            elif m in [4, 6, 9, 11] and d <= 30:\n                valid_dates += 1\n            elif m == 2 and d <= 28:  # 2014 is not a leap year\n                valid_dates += 1\n    return valid_dates\n\ndef solution():\n    return count_valid_dates(2014)\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    # Given numbers without p and q\n    numbers = [4, 5, 6, 9, 3, 9]\n    # Calculate the sum of given numbers\n    sum_numbers = sum(numbers)\n    # Since the average of 8 numbers is 6, the total sum of 8 numbers must be 8 * 6\n    total_sum = 8 * 6\n    # Calculate the sum of p and q\n    sum_pq = total_sum - sum_numbers\n    # The difference between the highest value and the lowest value is 6\n    difference = 6\n\n    # Find the lowest possible value of q\n    # Since p < q and we want the lowest q, start with the smallest p, which is 0\n    # Increase p until the condition that difference between max and min is 6 is met\n    for p in range(min(numbers) + 1):\n        q = sum_pq - p\n        # Ensure that the difference condition is satisfied\n        if q - max(max(numbers), p) == difference:\n            return q\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    for number in range(10000, 100000):\n        if number % 7 == 3 and number % 11 == 7 and number % 13 == 9:\n            return number\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    adam_speed = 60  # km/h\n    jacob_speed = 80  # km/h\n\n    jacob_time = 3  # hours\n    adam_time = 3 + 0.5  # Jacob's 3 hours plus 30 minutes for Adam, converted to hours\n\n    # Distance each person travelled\n    adam_distance = adam_speed * adam_time\n    jacob_distance = jacob_speed * jacob_time\n\n    # Total distance apart is sum of individual distances\n    total_distance = adam_distance + jacob_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n    \n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_product(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_product(custom_product(custom_product(1, 2), 3), 4)\n    final_result = custom_product(result, 5)\n    return int(final_result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    from sympy import divisors\n\n    num_divisors = len(divisors(252))\n\n    return num_divisors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    \n    # Using the Pigeonhole Principle\n    max_cakes_in_layer = (total_cakes + total_layers - 1) // total_layers\n    \n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07  # 7% GST\n    paid_gst = 0.91  # GST paid in dollars\n\n    cost_before_gst = paid_gst / gst_rate\n\n    return cost_before_gst\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # To guarantee Lucy gets 2 marbles of the same colour in the worst-case scenario:\n    # She takes 1st marble - it could be either blue or yellow.\n    # She takes 2nd marble - it could be the other colour not picked.\n    # She takes 3rd marble - now, she has either two of the same or it ensures two of the same colour.\n    # Therefore, Lucy must take at least 3 marbles to guarantee she has 2 of the same colour.\n\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    total_g = (2.49 * kg_to_g) + 670 + (3 * kg_to_g) + 80\n    return total_g\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time = 60  # Peter exercises for an hour each day, which is 60 minutes\n    cycling_time = total_exercise_time * (1/3)  # 1/3 of the time is spent cycling\n    jogging_time = total_exercise_time - cycling_time  # the rest of the time is spent jogging\n\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_age_now = symbols('justin_age_now')\n\n    equation = Eq(justin_age_now + 18, 4 * (justin_age_now - 6))\n\n    solutions = solve(equation, justin_age_now)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # The sequence is arithmetic with a common difference of -4\n    last_term = 2\n    common_diff = -4\n\n    # The next term is found by adding the common difference to the last term\n    n = last_term + common_diff\n\n    return n\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n    meet_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Starting time is 10:00 am\n    start_hour = 10\n\n    # Convert seconds to hours, minutes, and seconds\n    hours = meet_time_seconds // 3600\n    minutes = (meet_time_seconds % 3600) // 60\n    seconds = meet_time_seconds % 60\n\n    # Calculate the new time\n    total_hours = start_hour + hours\n    next_meet_time_hour = total_hours % 24  # In case they meet after midnight\n    next_meet_time_minute = minutes\n    next_meet_time_second = seconds\n\n    # Format the result\n    if next_meet_time_second < 10:\n        next_meet_time_second = '0' + str(next_meet_time_second)\n    if next_meet_time_minute < 10:\n        next_meet_time_minute = '0' + str(next_meet_time_minute)\n\n    ans = f\"{next_meet_time_hour}:{next_meet_time_minute}:{next_meet_time_second}\"\n    return ans\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Assign at least one apple to each child.\n    apples = 30 - 6  # Subtracting one apple for each child initially.\n    \n    # Since each child must have a different number of apples,\n    # to maximize the number of apples for the child who gets the most,\n    # we should distribute the remaining apples in increasing order.\n    # So the distribution starting from the child who gets the least is like:\n    # 1, 2, 3, 4, 5, ...\n\n    # Let's find the maximum number for the child with the most apples.\n    # This is the sum of first 5 natural numbers subtracted from apples.\n    max_apples_for_last_child = apples - (1 + 2 + 3 + 4 + 5)\n    \n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    # Sam's car details\n    distance = 273  # miles\n    sam_miles_per_gallon = 72.8  # mpg\n\n    # Calculate the amount of petrol Sam's car uses\n    sam_gallons_used = distance / sam_miles_per_gallon\n\n    # Tom's car uses 6 3/4 gallons more than Sam's car\n    tom_additional_gallons = 6 + 3/4\n    tom_gallons_used = sam_gallons_used + tom_additional_gallons\n\n    # Calculate the average rate of consumption for Tom's car\n    tom_miles_per_gallon = distance / tom_gallons_used\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To guarantee 2 M&Ms of different colors, Bart should take out M&Ms considering the worst case scenario.\n    # The worst case is that he picks all M&Ms of the same color before getting a different one.\n    # Since there are more brown M&Ms than yellow or red, he should account for picking all the yellow and red ones first.\n    # The smallest number needed would be all yellow and red M&Ms + 1 more to guarantee a different color.\n\n    # Number of yellow and red M&Ms\n    yellow = 4\n    red = 3\n\n    # The smallest number of M&Ms to take out\n    # All yellow + All red + 1 (to guarantee at least one brown)\n    smallest_number = yellow + red + 1\n    \n    return smallest_number\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum([(2*i + 1) ** 2 for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    num_shirts = 2\n    num_skirts = 2\n    ways_to_match = num_shirts * num_skirts\n    return ways_to_match\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # As per the given sequence: 1, 3, _, 27, 81\n    # We can see that each number appears to be a power of 3.\n    # 1 is 3 to the power of 0, 3 is 3 to the power of 1, 27 is 3 to the power of 3, and 81 is 3 to the power of 4\n    # Therefore, the missing number should be 3 to the power of 2\n    \n    missing_number = 3**2\n    return missing_number\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given the 7th, 8th, and 9th values in the sequence\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n\n    # Finding the common difference of the arithmetic sequence\n    common_difference = eighth_term - seventh_term\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    # where we need to find the first_term and the 100th term \n    first_term = seventh_term - (7 - 1) * common_difference\n\n    # Calculate the 100th term\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert the numbers to base 10 and add them\n    sum_in_base_10 = int('45', 7) + int('66', 7)\n\n    # Convert the sum back to base 7\n    if sum_in_base_10 == 0:\n        return '0'\n    \n    digits = []\n    while sum_in_base_10 > 0:\n        digits.append(str(sum_in_base_10 % 7))\n        sum_in_base_10 //= 7\n\n    # Join the digits in reverse to get the final base 7 number\n    return ''.join(reversed(digits))\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Initial ratio constants\n    ratio_oranges_initial = 3\n    ratio_lemons_initial = 5\n    \n    # Sold oranges adjustment\n    oranges_sold = 48\n\n    # Final ratio constants after selling oranges\n    ratio_oranges_final = 1\n    ratio_lemons_final = 2\n    \n    # Setting up the proportion equation\n    # We have the initial ratio: oranges / lemons = 3 / 5\n    # After selling 48 oranges, the new ratio becomes: (oranges - 48) / lemons = 1 / 2\n    # Let's use lemons as the base for our calculation (x will represent lemons)\n    # 3 / 5 = (3x - 48) / (5x) (since oranges were initially 3/5 of lemons, which is 3x)\n    # Cross multiply to solve for x:\n    # 15x = 10x - 240\n    # 5x = 240\n    # x = lemons = 240 / 5\n\n    x = oranges_sold * ratio_lemons_final / (ratio_lemons_initial - ratio_oranges_final)\n    \n    return int(x)\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_rabbit_per_day = 4\n    number_of_rabbits = 8\n    number_of_days = 5\n\n    total_carrots = carrots_per_rabbit_per_day * number_of_rabbits * number_of_days\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # A horse eats 1 bale in 2 days, so its daily consumption rate is 1/2 bale per day\n    horse_rate = 1/2\n    # A cow eats 1 bale in 3 days, so its daily consumption rate is 1/3 bale per day\n    cow_rate = 1/3\n    # A sheep eats 1 bale in 12 days, so its daily consumption rate is 1/12 bale per day\n    sheep_rate = 1/12\n\n    # Together, their daily consumption rate is the sum of all their rates\n    total_rate = horse_rate + cow_rate + sheep_rate\n\n    # The total number of bales of hay the farmer has is 22\n    total_bales = 22\n\n    # The number of days the bales will last is the total number of bales divided by \n    # the total daily consumption rate of the horse, cow, and sheep\n    days = total_bales / total_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    result = (5/8) * 160\n    return result\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother, daughter = symbols('mother daughter')\n\n    # When the daughter reaches the mother's current age, the mother will be 75\n    equation1 = Eq(mother + (mother - daughter), 75)\n\n    # When the mother was the daughter's current age, the daughter was 3\n    equation2 = Eq(mother - daughter, daughter - 3)\n\n    solutions = solve((equation1, equation2), (mother, daughter))\n\n    return solutions[mother]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    year = \"2014\"\n    count = 0\n    for m in range(1, 13):\n        month = f\"{m:02d}\"\n        for d in range(1, 32):\n            day = f\"{d:02d}\"\n            date = year + month + day\n            if date.count('0') == date.count('1') and date.count('1') == date.count('2'):\n                # Check if the date is valid\n                try:\n                    pd.to_datetime(date, format=\"%Y%m%d\")\n                    count += 1\n                except:\n                    pass\n    return count\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Total number of apples\n    total_apples = 11 + 5 + 7\n    \n    # Since Isabella wants to ensure she gets 3 red apples,\n    # she needs to account for the worst-case scenario where she picks all green and yellow apples first.\n    # Therefore, she should pick all green and yellow apples and one more to start getting red apples.\n    \n    # Apples Isabella needs to pick to start getting red apples - worst-case scenario.\n    apples_to_pick = 11 + 7 + 1\n\n    # In the worst case, she will pick 2 more apples to get the 3 red apples she wants\n    apples_to_pick += 2\n\n    return apples_to_pick\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_amount = 200\n    final_amount = 204\n\n    percentage_change = ((final_amount - initial_amount) / initial_amount) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    return 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.80\n    original_price = total_spent / (1 - discount)\n    savings = original_price - total_spent\n    return savings\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # Calculating the number of games played using combinations (6 choose 2)\n    from math import comb\n    total_games = comb(6, 2)\n    \n    # In a round-robin tournament, each game results in either a win or loss \n    # or a tie. In the case of a tie, 2 points are distributed (1 to each team).\n    # In the case of a win/loss, 2 points are also distributed (2 to the winner, \n    # 0 to the loser). Hence, irrespective of the game's outcome, 2 points are \n    # distributed per game.\n    \n    # Total points is therefore 2 points per game multiplied by the total number of games.\n    total_points = 2 * total_games\n\n    return total_points\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Maximum possible number of left-handed girls would be if all non-right handed pupils are girls\n    max_left_handed_girls = total_pupils - right_handed\n    \n    # Minimum right-handed girls would be if those were the only girls\n    min_right_handed_girls = girls - max_left_handed_girls\n    \n    # left-handed people who must be girls\n    if min_right_handed_girls < 0:\n        min_right_handed_girls = 0\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    total_children = 45\n    minibus_capacity = 8\n    minibuses_needed = -(-total_children // minibus_capacity)  # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    # Writing the provided list of numbers\n    numbers = [101, 97, 102, 99, 98, 103, -100]\n    \n    # Using Python's built-in `sum()` function to calculate the sum of numbers\n    total_sum = sum(numbers)\n\n    return total_sum\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n    \n    # Equations based on the problem statement\n    eq1 = Eq(boys, girls + 90)\n    eq2 = Eq(girls_swim / girls_not_swim, 31/49)\n    eq3 = Eq(boys_swim, boys_not_swim - 120)\n    eq4 = Eq(girls + boys, 1690)\n    \n    # Total number of pupils not able to swim are the sum of girls_not_swim and boys_not_swim\n    eq5 = Eq(girls, girls_swim + girls_not_swim)\n    eq6 = Eq(boys, boys_swim + boys_not_swim)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # Calculating the total number of pupils who cannot swim\n    no_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return no_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    zeros = 0\n    fives_count = 0\n\n    while zeros <= 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            fives_count += 1\n            temp_n //= 5\n        zeros = fives_count\n        \n    return n - 1\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane wants to ensure she gets 4 different coloured marbles,\n    # she must consider the worst case scenario using the Pigeonhole Principle.\n    # In the worst case, she could draw all of one color first, then all of another, and so on.\n    # To ensure she gets 4 different colours, she has to take out the maximum number of marbles\n    # from the three most plentiful colors and then one more to guarantee a fourth color.\n\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Sort the numbers of each colored marble, so we can work with them in decreasing order of quantity\n    marbles = sorted([red, green, blue, orange], reverse=True)\n\n    # She must draw all but one of each of the three largest amounts, plus one more to ensure the last color.\n    # So she draws (green - 1) + (blue - 1) + (red - 1) + 1 \n    # Since orange has the least amount, we don't subtract one from it—it's the +1 at the end\n    marbles_to_draw = (marbles[0] - 1) + (marbles[1] - 1) + (marbles[2] - 1) + 1\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import primerange\n\n    a = None\n    b = None\n\n    # Generate a list of prime numbers less than 41 (since 3a + 7b = 41, both a and b must be less than 41)\n    primes = list(primerange(1, 41))\n\n    # Check all combinations of a and b to solve the equation 3a + 7b = 41\n    for prime_a in primes:\n        for prime_b in primes:\n            if 3 * prime_a + 7 * prime_b == 41:\n                a = prime_a\n                b = prime_b\n                break\n        if a is not None: \n            break\n\n    # Calculate the sum of a and b\n    if a is not None and b is not None:\n        ans = a + b\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Calculate price per chicken tender for each option\n    price_per_tender_4pc = 7 / 4\n    price_per_tender_6pc = 8.5 / 6\n    \n    # Determine which one is a better buy by comparing the price per chicken tender\n    better_buy = '4pc' if price_per_tender_4pc < price_per_tender_6pc else '6pc'\n    \n    return better_buy\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # Let's let x represent Kiera's monthly salary.\n    # She spent $740, so she had x - 740 left.\n    # Then she spent 75% of what's left, so she had (x - 740) * 0.25 remaining.\n    # According to the problem, this remaining amount is 1/5 of her total salary (x).\n    # Therefore, we have the equation (x - 740) * 0.25 = x / 5\n    # Now, let's solve for x.\n\n    x = symbols('x')\n    equation = Eq((x - 740) * 0.25, x / 5)\n    salary = solve(equation, x)[0]\n\n    return salary\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_basket = total_weight_with_apples - weight_with_two_apples - (3 * (weight_with_two_apples / 2))\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 3, 4]\n    unique_numbers = set()\n\n    for r in range(1, len(digits) + 1):\n        for perm in permutations(digits, r):\n            number = int(''.join(map(str, perm)))\n            unique_numbers.add(number)\n    \n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    time = 231\n    while True:\n        time += 1\n        # Adjust the hour if needed\n        if time % 100 == 60:\n            time += 40\n        # Reset time if it exceeds 23:59 (24*60 - 1 minutes)\n        if time == 2360:\n            time = 0\n        digits = set(str(time).zfill(4))  # Ensure we have leading zeros\n        if set('0123').issubset(digits):\n            break\n    return time - 231  # Calculate the difference from the initial time\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100\n    original = after_class * 2\n    \n    return original\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n\n    # Given that initially Lynn and Mary had the same amount of money\n    equation1 = Eq(lynn, mary)\n\n    # After spending money, Mary has thrice as much as Lynn\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    lynn_left = solutions[lynn] - 160\n\n    return lynn_left\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond_op(A, B):\n        return A * A - 3 * B\n\n    def triangle_op(A, B):\n        return 5 * A - B * B\n\n    return triangle_op(diamond_op(4, 2), 6)\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # Define the total number of dice roll outcomes\n    total_outcomes = 6 * 6\n\n    # Calculate the number of desirable outcomes (sum greater than 10)\n    desirable_outcomes = 0 # initialize\n    for i in range(1, 7): # for each possibility of the first die\n        for j in range(1, 7): # for each possibility of the second die\n            if i + j > 10: # sum is greater than 10\n                desirable_outcomes += 1\n\n    # Calculate the probability of a win for the player\n    win_probability = desirable_outcomes / total_outcomes\n\n    # Calculate the expected winnings per game\n    expected_winnings_per_game = (win_probability * 10) - (1 - win_probability)\n\n    # Calculate the expected loss after 60 games\n    expected_loss = 60 * expected_winnings_per_game\n\n    # Since we want loss value, take negative of expected_loss\n    ans = -expected_loss\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3/7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3/8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    weight_per_bag = 3/4\n    number_of_bags = remaining_after_tuesday / weight_per_bag\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    tickets_remaining = 28\n    tickets_sold_percentage = 60\n    \n    total_tickets = tickets_remaining / (1 - (tickets_sold_percentage / 100))\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    return (6 * 36) + (3 * 38)\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # Since we want the minimum dividend and dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Devi and Jerry's current ages\n    devi, jerry = symbols('devi jerry')\n    \n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # In 4 years, the ratio of their ages will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5/7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    # Return Jerry's current age\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    sum = 0\n    for i in range(64, 43, -2):\n        sum = sum + i - (i - 2)\n    return sum\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Variable to store the correct and incorrect differences\n    correct_diff = incorrect_diff = 0\n    \n    # Incorrect subtrahend is 20 more than actual (50 becomes 30)\n    incorrect_diff = 36\n    correct_diff = incorrect_diff + 20  # To correct the mistake, we add the difference mistakenly subtracted\n\n    return correct_diff\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(5 * number - 4, 41)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195  # Total amount of juice from the bottles\n    jug_capacity_ml = 250     # Capacity of each jug\n    jugs_needed = -(-total_juice_ml // jug_capacity_ml)  # Ceiling division\n    return jugs_needed\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Initial total number of balls\n    blue_balls = 1  # Number of blue balls\n\n    # Let x be the number of red balls to be removed\n    # We want the number of remaining red balls to be 90% of the total number of balls\n    # Therefore, the equation is: (49 - x) / (total_balls - x) = 0.9\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((49 - x) / (total_balls - x), 0.9)\n\n    # Find the solution for x\n    solution = solve(equation, x)\n    \n    # Solution returns a list, we get the first element which is the number of balls to remove\n    ans = solution[0]\n\n    return ans\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "from math import factorial\n\ndef solution():\n    ans = sum(100 / factorial(97 - i) for i in range(98))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45  # weight of the full box\n    empty_box_weight = 12  # weight of the empty box\n    number_of_matches = 220  # number of matches in the box\n\n    matches_weight = total_weight_with_matches - empty_box_weight\n    weight_per_match = matches_weight / number_of_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cows, birds = symbols('cows birds')\n    \n    # Equation 1: Total animals\n    equation1 = Eq(cows + birds, 1300)\n    \n    # Equation 2: Total legs\n    equation2 = Eq(4*cows + 2*birds, 3440)\n    \n    solutions = solve((equation1, equation2), (cows, birds))\n    \n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for velocities\n    v_north, v_west, v_final = symbols('v_north v_west v_final')\n    \n    # Masses and initial velocities\n    mass1, mass2 = 500, 500\n    v1_north, v1_west = 20, 0\n    v2_north, v2_west = 0, 30\n    \n    # Equations based on conservation of momentum\n    eq1 = Eq(mass1 * v1_north + mass2 * v2_north, (mass1 + mass2) * v_north)\n    eq2 = Eq(mass1 * v1_west + mass2 * v2_west, (mass1 + mass2) * v_west)\n    \n    # No momentum in west for the first car and no momentum in north for the second\n    eq3 = Eq(v1_west, 0)\n    eq4 = Eq(v2_north, 0)\n    \n    # Solving the equations\n    solutions = solve((eq1, eq2), (v_north, v_west))\n    \n    # Calculating velocity magnitude\n    v_final = (solutions[v_north]**2 + solutions[v_west]**2)**0.5\n\n    return v_final\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    # Initialize the greatest number to an obviously incorrect number\n    greatest_number = -1\n\n    # 3-digit numbers range from 100 to 999, loop from 999 downward to find the greatest number\n    for num in range(999, 99, -2):  # Step by -2 to check only odd numbers\n        if num % 9 == 0:  # Check divisibility by 9\n            tens_digit = (num // 10) % 10  # Extract the tens place\n            if tens_digit % 4 == 0:  # Check if digit in tens place is divisible by 4\n                greatest_number = num\n                break  # The first number that meets the criteria is the greatest\n\n    return greatest_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_has = 83\n    given_to_ben = 28\n\n    pens_ben_has = jenny_has - given_to_ben\n    return pens_ben_has\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_weeks = 8\n    total_books = books_per_week * total_weeks\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_first_and_last_tree = (21 - 1) * 2\n    number_of_lamp_posts = (distance_between_first_and_last_tree // 10) + 1\n    return int(number_of_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    eq1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    eq2 = Eq(laptop + dvd_player, 2960)\n\n    solutions = solve((eq1, eq2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n    return sizes * colors\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # Let the number of people in the original group be n\n    # Let the average weight of the original group be x\n    # Let the total weight of the original group be total_weight = n*x\n\n    # When Aaron joins, the number of people becomes n+1 and the total weight becomes total_weight+45\n    # The new average is then (total_weight+45) / (n+1) = 61\n\n    # When Ben joins after Aaron, the number of people becomes n+2 and the total weight becomes total_weight+45+71\n    # The new average is then (total_weight+45+71) / (n+2) = 62\n\n    # We can set up the equations as follows:\n    # (total_weight + 45) / (n + 1) = 61  => total_weight + 45 = 61*(n + 1)\n    # (total_weight + 45 + 71) / (n + 2) = 62  => total_weight + 116 = 62*(n + 2)\n\n    # Now we have two equations:\n    # total_weight + 45 = 61*n + 61\n    # total_weight + 116 = 62*n + 124\n\n    # Subtract the first equation from the second equation to eliminate 'total_weight':\n    # (total_weight + 116) - (total_weight + 45) = (62*n + 124) - (61*n + 61)\n    # total_weight - total_weight + 116 - 45 = n(62 - 61) + 124 - 61\n    # 71 = n + 63 => n = 71 - 63 => n = 8\n\n    # Now we know n, we can solve for the original total weight using the second equation:\n    # total_weight + 116 = 62*(n + 2)\n    # total_weight + 116 = 62*(8 + 2)\n    # total_weight + 116 = 620\n    # total_weight = 620 - 116\n    # total_weight = 504\n\n    # Now find the original average weight:\n    # x = total_weight / n\n    # x = 504 / 8\n    # x = 63\n\n    # So, the original average weight was 63kg.\n    return 63\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        if p[0] != 0 and p[1] != 0:\n            triangle, square, star, circle = p\n            num1 = triangle*1000 + square*100 + star*10 + triangle\n            num2 = circle * 1000 + star * 100 + star * 10 + triangle\n            if num1 + num2 == square*10000 + star*1000 + circle*100 + square*10 + star:\n                return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    # Initialize the count of pairs to zero\n    count_pairs = 0\n    \n    # Loop over each distinct pair of numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            # If the sum of the pair is a multiple of 5, increment the count\n            if (i + j) % 5 == 0:\n                count_pairs += 1\n    \n    # Return the total count of pairs\n    return count_pairs\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    full_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n    \n    # Sum of digits in one pattern\n    sum_of_one_pattern = sum(range(1, pattern_length + 1))\n    \n    # Calculate the final sum\n    total_sum = full_patterns * sum_of_one_pattern + sum(range(1, remaining_digits + 1))\n    \n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # in pounds\n    coffee_cost = 3.69  # in pounds\n    milk_cost = 0.89  # 89p converted to pounds\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario: to ensure 4 balls of the same color,\n    # Sheila can first take out all balls of the other two colors.\n    # She can take out 3 blue, 3 orange, and 2 yellow without having 4 of the same color.\n    # Hence, on the next draw (the 9th ball), she must get the fourth ball of one color.\n\n    return 3 + 3 + 2 + 1  # 3 blue, 3 orange, 2 yellow, and 1 more to guarantee 4 of the same color\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    oranges_weight = 4.1\n    mangoes_weight = 2\n\n    total_cost = (orange_price_per_kg * oranges_weight) + (mango_price_per_kg * mangoes_weight)\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including the unknown 'a'\n\n    # Sum of the given numbers\n    sum_of_numbers = sum(numbers)\n    \n    # Using the mean formula: mean = sum_of_elements / number_of_elements\n    # sum_of_elements = mean * number_of_elements\n    total_sum = mean_value * total_numbers\n    \n    # Subtracting the sum_of_numbers from total_sum to find the value of 'a'\n    a = total_sum - sum_of_numbers\n    \n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    ans = 4825 + 1754\n    return ans\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A's daily work rate\n    work_rate_a = 1 / 15\n    # B's daily work rate\n    work_rate_b = 1 / 10\n    # Combined work rate for A and B\n    combined_rate = work_rate_a + work_rate_b\n    # Work done in the first 4 days by A and B\n    work_done_4_days = 4 * combined_rate\n    # Remaining work to be done by B alone\n    remaining_work = 1 - work_done_4_days\n    # Number of days B needs to finish the remaining work alone\n    days_needed_by_b = remaining_work / work_rate_b\n\n    return days_needed_by_b\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Golden Pyramid Method adds the series twice excluding the top number which is 13.\n    # Calculate the sum of series from 1 to 12 and double it.\n    n = 12\n    sum_to_12 = (n * (n + 1)) // 2  # Sum from 1 to 12\n\n    # Now add the peak of the pyramid, number 13, once.\n    total_sum = (2 * sum_to_12) + 13  # Total sum of the Golden Pyramid\n\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    price_reduction = original_price - reduced_price\n    percentage_reduction = (price_reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    total_students = 0\n    boys_more_than_girls = 52\n    layer = 0\n    \n    while True:\n        boys = (layer * 4 + 1)**2 - (layer * 4 - 1)**2 if layer > 0 else 1\n        if layer == 0:\n            girls = 0\n        else:\n            girls = ((layer - 1) * 4 + 1)**2 - ((layer - 1) * 4 - 1)**2 if layer > 1 else 0\n        if boys - girls == boys_more_than_girls:\n            total_students = (layer * 4 + 1)**2\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    num_bottles = 1000\n\n    # The number of test tubes required is the number of binary digits (bits) required to uniquely\n    # identify all bottles. This is equivalent to the smallest number of bits required to represent\n    # the number 1000 in binary, because each test tube can represent a binary digit in the binary\n    # representation of the bottle numbers.\n    num_test_tubes = 0\n    while 2 ** num_test_tubes < num_bottles:\n        num_test_tubes += 1\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    num = 100\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    ducklings_legs = 4 * 2  # Each duckling has 2 legs\n    baby_geese_legs = 2 * 2  # Each baby goose has 2 legs\n    total_legs_without_lambs = ducklings_legs + baby_geese_legs\n    remaining_legs = 36 - total_legs_without_lambs\n    \n    lamb_legs = 4  # Each lamb has 4 legs\n    num_lambs = remaining_legs // lamb_legs  # Integer division\n    \n    return num_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # converting litres to millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n\n    # On the fourth day, he ate 1/4 of the remaining number of sweets\n    # Let's trace it back to before he ate on the fourth day\n    before_fourth_day = remaining_sweets / (1 - 1/4)\n\n    # On the third day, he ate 1/5 of the remaining number of sweets\n    # Trace it back to before he ate on the third day\n    before_third_day = before_fourth_day / (1 - 1/5)\n\n    # On the second day, he ate 1/6 of the remaining number of sweets\n    # Trace it back to before he ate on the second day\n    before_second_day = before_third_day / (1 - 1/6)\n\n    # On the first day, he ate 1/7 of the number of sweets\n    # Trace it back to before he ate on the first day\n    initial_sweets = before_second_day / (1 - 1/7)\n\n    return initial_sweets\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of cookies\n    x = symbols('x')\n    # Charlene kept half of the cookies plus 8\n    charlene_kept = x / 2 + 8\n    # Emerald received this quantity\n    emerald_received = x - charlene_kept\n    # Emerald ate 1/3 of what she received plus 4\n    emerald_ate = emerald_received / 3 + 4\n    # Hebe received this (leftover) quantity\n    hebe_received = emerald_received - emerald_ate\n    # Hebe ate 1/4 of what she received\n    hebe_ate = hebe_received / 4\n    # Hebe had 42 cookies left\n    hebe_left = hebe_received - hebe_ate\n\n    equation = Eq(hebe_left, 42)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    common_difference = 7\n    last_term = 150\n\n    # Using the formula for nth term of an AP: a_n = a_1 + (n - 1) * d\n    # where a_n is the nth term, a_1 is the first term, n is the number of terms, and d is the common difference\n    # Rearrange the formula to solve for n: n = ((a_n - a_1) / d) + 1\n    num_kids = ((last_term - first_term) / common_difference) + 1\n    \n    return int(num_kids)\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    for teams in range(1, 30):  # Start from 1 to 29, as 30 would mean 1 game per team.\n        matches = teams * (teams - 1)  # Total matches if each team plays each other once.\n        if matches == 30:  # Each team plays each other twice, therefore total matches would be double.\n            return teams\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    sets_in_5_days = 720\n    days_for_720_sets = 5\n    \n    # Find the daily production rate\n    daily_sets = sets_in_5_days / days_for_720_sets \n    \n    # Calculate the total number of days needed\n    total_days = total_uniforms / daily_sets\n    \n    return int(total_days)\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Helper function to calculate the Fibonacci number for n steps\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n        \n    # Ways to reach the 5th step\n    ways_to_5th_step = fibonacci(5)\n    \n    # Ways to reach the 10th step from the 5th step\n    ways_to_10th_from_5th = fibonacci(6)\n    \n    # Multiplying ways to 5th step with the ways to 10th from 5th gives the total combinations\n    total_ways = ways_to_5th_step * ways_to_10th_from_5th\n    \n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Define the equations based on the given information\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Get the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solution = solve(equation, boys)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    product = 2 * 2 * 2 * 3 * 8 * 5 * 5 * 25\n    count = 0\n    while product % 10 == 0:\n        product //= 10\n        count += 1\n    return count\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(40, 51):\n        if int(i**0.5) == i**0.5:  # Check if the square root is an integer\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_amount = 150\n    cup_amount = 40\n    cups_poured = 3\n    water_left = initial_amount - cup_amount * cups_poured\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for notebook, pencil case, and eraser\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    # Return the cost of the pencil case\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x', integer=True, positive=True)\n    expr = x * (x+1) * (x+2) * (x+3) - 3024\n    solutions = solve(expr, x)\n    largest_number = max(solutions) + 3\n    return largest_number\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's Bob's initial amount of cards be x\n    # and Alan's initial amount of cards be y\n    x, y = symbols('x y')\n    \n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(x, y + 15)\n    \n    # Colin gives Bob 25 cards, so now Bob has x + 25 cards\n    # After Colin's gift, Bob now has 3 times as many as Alan\n    equation2 = Eq(x + 25, 3 * y)\n    \n    # Solving the equations to find the value of y (Alan's cards)\n    solution = solve((equation1, equation2), (x, y))\n    \n    return solution[y]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Compute least common multiple of pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum number of packs required to exceed 1000 markers\n    min_packs = (1000 // pack_lcm) + (1 if 1000 % pack_lcm != 0 else 0)\n  \n    return min_packs * 4  # As he needs to buy 4 packs each time to keep the balance\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    total_students = 10\n    handshakes = total_students * (total_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to fractions\n    n1 = 1/9 # 0.11111...\n    n2 = 7/90 # 0.0777...\n    f1 = 99251 * n1 + n2 # 0.1 + 0.099251 + 0.0777...\n    \n    n3 = 1/15 # 0.06666...\n    n4 = 3/90 # 0.0333...\n    f2 = 3456 * n3 + n4 # 0.2 + 0.2304 + 0.0333...\n    \n    # Convert fractions to decimals\n    d1 = str(f1)[2:] # get rid of '0.'\n    d2 = str(f2)[2:] # get rid of '0.'\n    \n    # Find the smallest value of n where d1 and d2 have the same n-th decimal digit\n    for n in range(1, min(len(d1), len(d2))):\n        if d1[n] == '7' and d2[n] == '7':\n            return n + 1 # add 1 because the decimal point does not count\n            break\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'anne' be the variable representing the number of apples Anne has\n    anne = symbols('anne')\n    maria = anne + 20   # Maria has 20 more apples than Anne\n    total_apples = Eq(anne + maria, 44)  # The total number of apples they have together\n\n    # Solve the equation for the number of apples Anne has\n    anne_apples = solve(total_apples, anne)\n\n    return anne_apples[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    # Find the number closest to the target by calculating the smallest absolute difference\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_in_morning = morning_fruit - afternoon_fruit\n    \n    return more_fruit_in_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10\n\n    water_weight = (water_ratio * orange_weight) / orange_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n    total_required_score = required_average * 5  # Total required score for 5 judges\n    current_total = sum(scores)  # Total score from the first 4 judges\n    min_final_score = total_required_score - current_total  # Minimum score needed from the final judge\n    return min_final_score\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # Total pages read\n    total_pages = 550\n    # Pages read on the first and last day\n    first_day_pages = 30\n    last_day_pages = 70\n    \n    # Since Jason reads the same amount more each day, this forms an arithmetic sequence.\n    # To find the difference (d) in this arithmetic sequence we need to solve the equation:\n    # total_pages = (n/2) * (2*first_day_pages + (n - 1)*d)\n    # And we also know that last_day_pages = first_day_pages + (n - 1)*d\n    # Thus n can be calculated as (last_day_pages - first_day_pages) / d + 1\n    # Our goal is to find d\n\n    # Let's rearrange the terms to express n in terms of d:\n    # n = (last_day_pages - first_day_pages) / d + 1\n    # Replace n in the total_pages equation:\n    # total_pages = ((last_day_pages - first_day_pages) / d + 1)/2 * (2*first_day_pages + ((last_day_pages - first_day_pages) / d)*d)\n    # Simplify the equation\n    # 2*total_pages = (last_day_pages - first_day_pages + d) * (2*first_day_pages + last_day_pages - first_day_pages)\n    # 2*total_pages = d**2 - (2*first_day_pages - last_day_pages) * d + (last_day_pages - first_day_pages) * (2*first_day_pages + last_day_pages)\n\n    # Now we have a quadratic equation in terms of d:\n    # d**2 + (2*first_day_pages - last_day_pages) * d + (first_day_pages**2 - last_day_pages * first_day_pages - 2*total_pages) = 0\n\n    # Calculate coefficients for the quadratic equation a*d^2 + b*d + c = 0\n    a = 1\n    b = (2 * first_day_pages - last_day_pages)\n    c = (first_day_pages ** 2 - last_day_pages * first_day_pages - 2 * total_pages)\n\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n\n    # Two solutions for d\n    d1 = (-b + discriminant ** 0.5) / (2 * a)\n    d2 = (-b - discriminant ** 0.5) / (2 * a)\n\n    # d needs to be positive (since he reads more each day)\n    d = max(d1, d2)\n\n    return d\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    \n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    principal = 10000\n    interest_after_two_years = 816\n    # Let r be the interest rate per year.\n    # Interest for the first year is principal * r.\n    # Interest for the second year is (principal + principal * r) * r.\n    # The total interest after two years is interest_after_two_years = principal * r + (principal + principal * r) * r.\n    # So we get the equation principal * r + (principal * r) ** 2 + principal * r ** 2 = interest_after_two_years.\n    # We simplify the equation to (principal * r) ** 2 + 2 * (principal * r) - interest_after_two_years = 0.\n    # Let x = principal * r, and we have x^2 + 2x - interest_after_two_years = 0.\n    # We can use the quadratic formula to find x, and then divide x by principal to get r.\n    from sympy import symbols, Eq, solve\n\n    r = symbols('r')\n    equation = Eq(principal * r + (principal + principal * r) * r, interest_after_two_years)\n    solution = solve(equation, r)\n\n    # We expect two solutions, one positive and one negative. We only want the positive rate of interest.\n    positive_solution = [sol.evalf() for sol in solution if sol.evalf() > 0]\n    annual_interest_rate = positive_solution[0] * 100 # Convert to percentage\n\n    return annual_interest_rate\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # Johnny's logic was wrong. Correct approach:\n    # If \"div 4 = 9 R 2\", then the original number should be \"9 * 4 + 2\"\n    correct_answer = 9 * 4 + 2\n    return correct_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    answer = 43\n    original_number = (answer - 7) / 2\n    return original_number\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    peter_speed, hannah_speed = symbols('peter_speed hannah_speed')\n\n    # Define the equations based on the given information\n    time_ratio = Eq(peter_speed / hannah_speed, 3/4)\n    speed_difference = Eq(peter_speed, hannah_speed + 15)\n\n    # Solve the equations\n    solutions = solve((time_ratio, speed_difference), (peter_speed, hannah_speed))\n\n    return solutions[hannah_speed]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote\n    # m is the cost of a mango\n    # p is the cost of a pear\n    # a is the cost of an apple\n    m, p, a = symbols('m p a')\n\n    # now we have three equations based on the problem description\n    eq1 = Eq(m + p, 3.40)  # total cost of a mango and a pear\n    eq2 = Eq(m + a, 3.80)  # total cost of a mango and an apple\n    eq3 = Eq(4*m + 2*p + a, 13.20)  # Brad's purchase\n\n    # we can solve these equations for m, p, and a\n    solutions = solve((eq1, eq2, eq3), (m, p, a))\n\n    # get the cost of a mango\n    return solutions[m]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols\n    fifty_cents, one_dollar = symbols('fifty_cents one_dollar')\n    \n    # Let x be the total number of fifty-cent coins Owen had initially\n    # Therefore 2x will be the number of one-dollar coins Owen had initially\n    \n    # Owen's mother gave him 10 one-dollar coins and 10 fifty-cent coins (because $5/$0.5 = 10)\n    # In the end, he had twice as many one-dollar coins as fifty-cent coins\n    # So, we set up the equations accordingly\n    \n    # Equation for initial condition\n    equation1 = Eq(fifty_cents/(fifty_cents + one_dollar), 2/7)\n    # Equation after receiving additional coins from his mother\n    equation2 = Eq(one_dollar + 10, 2 * (fifty_cents + 10))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (fifty_cents, one_dollar))\n    \n    # The number of coins Owen had at first is the sum of fifty-cent coins and one-dollar coins he had initially\n    initial_coins = solutions[fifty_cents] + solutions[one_dollar]\n    \n    return initial_coins\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_mcq = 23  # multiple choices\n    time_spent_fitb = 35 # fill in the blank\n    time_remaining = total_time - time_spent_mcq - time_spent_fitb\n    return time_remaining\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    speed = 30  # speed of the train in meters per second\n    time = 45   # time taken to cross the tunnel in seconds\n    train_length = 850  # length of the train in meters\n\n    # Total distance covered by the train is the length of the train plus the length of the tunnel\n    total_distance = speed * time\n\n    # Length of the tunnel is total distance covered minus the length of the train\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    lines = 1\n    max_parts = 1 + circles + lines + (circles * (circles - 1) // 2) + circles * lines\n    return max_parts\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    total_permutations = list(permutations(range(4), 3))  # All permutations of 3 people entering through 4 entrances\n    valid_permutations = [p for p in total_permutations if p[0] != p[1]]  # Filter out permutations where Joe and Mike enter the same entrance\n    return len(valid_permutations)\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n    spent_on_transportation = spent_money / 3\n    spent_on_food = 2 * spent_on_transportation\n    \n    return spent_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    fixed_fee = 4\n    initial_rate = 4\n    additional_rate = 3\n    total_cost = 109\n\n    # Cost of the first 3 tons of water\n    initial_cost = 3 * initial_rate  # 3 tons * 4 dollars/ton\n\n    # Remaining amount for additional water beyond the first 3 tons\n    remaining_amount = total_cost - fixed_fee - initial_cost  # Subtract fixed fee and initial cost\n    \n    # Calculate the maximum additional tons of water she can use\n    additional_tons = remaining_amount // additional_rate  # Divide by additional rate\n\n    # Total tons of water used is the sum of the first 3 tons and additional tons\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9, 3258 % 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, daniel, bala = symbols('carl daniel bala')\n\n    equation1 = Eq(bala, amelia + carl + daniel - 320)\n    equation2 = Eq(bala, amelia / 2)\n    equation3 = Eq(carl, 3/4 * (amelia + bala + daniel))\n    equation4 = Eq(amelia + carl + daniel + bala, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, daniel, bala))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time the lazy gardener would take to mow the lawn on his own.\n    x = symbols('x')\n\n    # The quick gardener works at a rate of (1 lawn) / (12 hours) = 1/12 lawn/hour\n    # The lazy gardener works at a rate of (1 lawn) / (x hours) = 1/x lawn/hour\n    # Together, their combined rate is (1 lawn) / (8 hours) = 1/8 lawn/hour\n    \n    # Set up the equation: 1/12 + 1/x = 1/8\n    equation = Eq(1/12 + 1/x, 1/8)\n    \n    # Solve for x\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples - apples/3 + oranges - oranges/2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Sum of candies brought by each girl\n    number_of_girls = 3       # Total number of girls\n    candy_per_girl = total_candy // number_of_girls  # Divide equally among the girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    given_tomatoes = 7\n\n    matthew_tomatoes = belinda_tomatoes - given_tomatoes\n    matthew_initial_tomatoes = matthew_tomatoes - given_tomatoes\n\n    return matthew_initial_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(182 - (5 * x + 3 * x), 5 * x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n    \n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    \n    return result\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm\n\n    green_line_interval = 5\n    red_line_interval = 6\n\n    # Find the least common multiple of the two intervals\n    minutes_until_sync = lcm(green_line_interval, red_line_interval)\n\n    hours = minutes_until_sync // 60\n    minutes = minutes_until_sync % 60\n\n    # Since trains start at 5 am, we add the hours to 5 to get the synchronized time\n    synchronized_hour = 5 + hours\n    # If the time is past 24 hours, adjust by subtracting 24\n    if synchronized_hour >= 24:\n        synchronized_hour -= 24\n\n    return (synchronized_hour, minutes)\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 0\n    term = 1\n    i = 2\n    while i <= 14:\n        term *= i\n        ans += term\n        i += 1\n        if i % 2 == 0:\n            i += 1\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity = 990  # Jug's capacity in milliliters\n\n    # Since 3 cups fills half the jug, 6 cups would fill the jug\n    # Therefore, divide the jug's capacity by 6 to get the capacity of one cup\n    cup_capacity = total_capacity / 6\n\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Each tree is 3 meters apart, so the distance between the first and the 101th tree is\n    # (101 - 1) * 3 meters\n    distance_to_101th_tree = (101 - 1) * 3\n    \n    # Olivia takes 3 minutes to walk this distance\n    time_to_101th_tree_in_minutes = 3\n    \n    # The speed of Olivia walking can be calculated as distance divided by time\n    # Since she walks distance_to_101th_tree meters in time_to_101th_tree_in_minutes minutes, \n    # her speed is (distance_to_101th_tree / time_to_101th_tree_in_minutes) meters per minute\n    speed_in_meters_per_minute = distance_to_101th_tree / time_to_101th_tree_in_minutes\n    \n    # The distance between the school and Olivia's home is 4000 meters\n    distance_to_home = 4000\n    \n    # The time it takes for Olivia to travel to school can be calculated by dividing \n    # the total distance to home by her speed\n    time_to_school_in_minutes = distance_to_home / speed_in_meters_per_minute\n    \n    return time_to_school_in_minutes\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_100g = 80\n    cost_per_250g = cost_per_100g * (250 / 100)\n    return cost_per_250g\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum([i**2 for i in range(6, 52, 5)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    n = 124 // 4\n    sum_of_squares = sum([(4 * i) ** 2 for i in range(1, n + 1)])\n    return sum_of_squares\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n    count = 0\n    # all possible entrances for 4 people\n    for entrance_combination in permutations(range(1, 4), 4):\n        if len(set(entrance_combination)) >= 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_deduction = 2\n    total_score = 23\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_score - wrong_answers * wrong_deduction\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen traded 5 fish for 2 rabbits, i.e., the ratio of fish to rabbits is 5:2\n    fish_to_rabbits = 5 / 2\n    \n    # Oscar traded 4 rabbits for 7 packs of wheat, i.e., the ratio of rabbits to wheat is 4:7\n    rabbits_to_wheat = 4 / 7\n\n    # To find fish to wheat ratio we multiply the two individual ratios\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    # Now we want to find how many fish correspond to 14 packs of wheat\n    # Let x be the number of fish for 1 pack of wheat\n    # Then x * fish_to_wheat should give us the number of fish needed for 14 packs of wheat\n    # Therefore x * fish_to_wheat * 14 = number of fish for 14 packs of wheat\n    fish_for_14_wheat = fish_to_wheat * 14\n\n    return int(fish_for_14_wheat)\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the number of cows and g be the number of goats initially\n    c, g = symbols('c g')\n\n    # We have two equations based on the problem statement\n    # 1. 0.65(c + g) = c and the rest were goats => g = (1 - 0.65)(c + g)\n    # 2. When 240 more animals are added, the percentage of cows becomes 85% of the new total\n    #    and the number of goats doubles => 0.85(c + g + 240) = c + 240, 2g = g + 240\n\n    # Original percentage equation\n    equation1 = Eq(0.65 * (c + g), c)\n\n    # New percentage equation after adding 240 animals\n    equation2 = Eq(0.85 * (c + g + 240), c + 240)\n\n    # Goat doubling equation\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    # justin's age in 18 years will be 4 times his age 6 years ago\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    # solve the equation\n    age = solve(equation, justin)\n\n    return age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n    total_time = time_per_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We use the Chinese Remainder Theorem\n    # which states that there is a unique number modulo the product of the moduli that satisfies the given congruences.\n    # In this case, our congruences are:\n    # x ≡ 1 (mod 4)\n    # x ≡ 2 (mod 5)\n    # x ≡ 3 (mod 6)\n    \n    # We create the congruences as tuples: (remainder, modulus)\n    congruences = [(1, 4), (2, 5), (3, 6)]\n\n    # We use the solve_congruence function from sympy to find the solution\n    number, _ = solve_congruence(*congruences)\n\n    # We know that the number is less than 100, so we take the solution modulo 100\n    number = number % 100\n    \n    return number\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    discount_threshold1 = 20\n    discount_threshold2 = 50\n    discount1 = 4\n    discount2 = 15\n\n    # Apply the appropriate discount\n    if total_cost >= discount_threshold2:\n        total_cost -= discount2\n    elif total_cost >= discount_threshold1:\n        total_cost -= discount1\n\n    return total_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case: all balls of the same color are drawn first\n    same_color_balls = 5\n    # To ensure 3 different colored balls are drawn, draw all the balls of one color\n    # and then all the balls of a second color. The next ball must be of the third color.\n    balls_needed = same_color_balls + same_color_balls + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    n = 1\n    current_number = 2023\n    while current_number % 11 != 0:\n        n += 1\n        # Append '2023' at the end of the current number\n        current_number = int(str(current_number) + '2023')\n    return n\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    # Tom's age has to be a multiple of 3\n    tom_age = next(age for age in ages if age % 3 == 0 and age != 6)\n    # Jason is younger than Tom\n    jason_age = next(age for age in ages if age < tom_age)\n    # Adam's age is the remaining one\n    adam_age = next(age for age in ages if age not in [jason_age, tom_age])\n    return adam_age\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Initialize the number of apples and number of children (excluding Avril)\n    total_apples = 28\n    children = 5\n\n    # The smallest numbers of apples that can be distributed to the 5 other children\n    # are 1, 2, 3, 4, and 5 (in order to have different amounts for each child).\n    # We calculate the sum of these smallest numbers.\n    min_apples_for_others = sum([i for i in range(1, children + 1)])\n\n    # Subtract the minimum apples given out to the other children\n    # to calculate the maximum Avril could get.\n    max_apples_for_avril = total_apples - min_apples_for_others\n\n    return max_apples_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    laptop_cost = (5/8) * total_money\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # Jocye's speed ratio compared to Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_lori  # Jocye's speed in meters per second\n    time_seconds = 10  # time in seconds\n    distance_jocye = jocye_speed * time_seconds  # distance Jocye can run in 10 seconds\n\n    return distance_jocye\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # There are two positions for the boys and they can be arranged in 2! ways.\n    boy_arrangements = factorial(2)\n\n    # There are three positions for the girls and they can be arranged in 3! ways.\n    girl_arrangements = factorial(3)\n\n    # The total number of arrangements is the product of boy and girl arrangements.\n    total_arrangements = boy_arrangements * girl_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    old_average = 60\n    new_average = 70\n    old_sum = old_average * 2\n    new_sum = new_average * 3\n    added_number = new_sum - old_sum\n\n    return added_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    time_caught_bus = datetime.strptime('16:01', '%H:%M')\n    bus_trip_duration = timedelta(minutes=18)\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n\n    walking_time_to_bus_stop = time_caught_bus - time_left_school\n    walking_time_home = time_got_home - (time_caught_bus + bus_trip_duration)\n\n    total_walking_time = walking_time_to_bus_stop + walking_time_home\n    total_walking_time_minutes = total_walking_time.total_seconds() / 60\n\n    return int(total_walking_time_minutes)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    last_term = 79\n    difference = second_term - first_term\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the amount of money Ken and Lisa have\n    ken, lisa = symbols('ken lisa')\n\n    # Equation representing the initial amounts of Ken and Lisa\n    equation1 = Eq(ken, lisa + 15)\n\n    # Equation after Ken gives some money 'x' to Lisa\n    x = symbols('x')\n    equation2 = Eq(ken - x, lisa + x - 21)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ken, lisa, x))\n\n    # Return the amount of money Ken gave to Lisa\n    return solutions[x]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_marbles = 18 + 6 + 8  # Total marbles in the box\n    # Worst case: we take all but one marble of other colors before getting 2 red marbles\n    must_take = total_marbles - (6 - 2)\n    return must_take\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    max_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    min_number = int(''.join(map(str, sorted(digits))))\n    \n    return max_number - min_number\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Calculate the total number of elements in the sequence\n    total_elements = sum([i * (i+1) for i in range(1, 9)])\n\n    # Calculate the position of the median\n    median_pos = total_elements // 2 + 1  # for sequences with odd lengths, median is at (n+1)/2 position\n\n    # Find the number that lies at the median position\n    current_count = 0\n    for i in range(1, 9):\n        current_count += i\n        if current_count * (i+1) >= median_pos:\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing = 0\n    for i in range(1, 31):\n        times_turned = (i % 2 == 0) + (i % 3 == 0)\n        if times_turned % 2 == 0:\n            facing += 1\n    return facing\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt, symbols\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Probability of car being behind initially chosen gate (gate 1):\n    prob_car_gate1 = 1/3\n    # Probability of car being behind gate 2 since gate 3 has a goat behind it:\n    prob_car_gate2 = 2/3\n    \n    return \"gate 2\" if prob_car_gate2 > prob_car_gate1 else \"gate 1\"\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    result = 2184 / 7\n    return result\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    # Common difference in the arithmetic sequence\n    difference = (fourth_term - first_term) // (4 - 1)\n\n    # Sum of arithmetic series S_n = n/2 * (2*a + (n-1)*d)\n    total_athletes = (num_rows / 2) * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 2 and num % 3 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    increase_per_day = 6\n\n    # Total sum of arithmetic sequence is given by n/2 * (2a + (n-1)d)\n    # total_cookies = days/2 * (2 * first_day + (days - 1) * increase_per_day)\n    # Solving for first_day:\n    # 2 * first_day = (total_cookies * 2 / days) - (days - 1) * increase_per_day\n    # first_day = ((total_cookies * 2 / days) - (days - 1) * increase_per_day) / 2\n\n    first_day = ((total_cookies * 2 / days) - (days - 1) * increase_per_day) / 2\n\n    return int(first_day)\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    sum = 0\n    for i in range(1, 32):\n        sum += i * (i - 1)\n    return sum\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n    spent_on_CDs = 75\n    spent_on_batteries_fraction = 1/4\n    remaining = 1/3\n\n    equation = Eq(original_sum - spent_on_CDs - spent_on_batteries_fraction * (original_sum - spent_on_CDs), remaining * original_sum)\n\n    ans = solve(equation, original_sum)[0]\n\n    return ans\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "网络故障，请重试"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "def solution():\n    from math import factorial\n\n    # Function to calculate combinations    \n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Total number ways to distribute 7 distinct books among 3 students (1 book each) \n    total_ways = nCr(7, 3)\n\n    return total_ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    number_of_friends = 13  # Tommy and 12 friends\n    minutes_each = 142\n    total_time = number_of_friends * minutes_each\n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    repetitions = 99 // 9\n    remainder_of_9digit_number = 0  # Since any multiple of 9 gives a remainder 0 when divided by 9\n    ans = (remainder_of_9digit_number * repetitions) % 9\n    return ans\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    op = symbols('op')  # Define the variable 'op' as our unknown\n\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n    solutions = solve(equation, op)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_people = 1500\n\n    percentage_incorrect = (incorrect_people / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    num_list = [3, 2.1, 2.494, 2.449, 2.51]\n    target = 2.5\n    \n    closest_num = min(num_list, key=lambda x: abs(x - target))\n    \n    return closest_num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 0, 2, 3]\n    even_numbers = []\n    \n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0:  # Last digit must be even to form an even number\n            number = int(''.join(map(str, perm)))\n            if number > 999:  # Making sure it's a 4-digit number\n                even_numbers.append(number)\n    \n    ans = min(even_numbers)\n    return ans\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    for bars in range(1, 100): # using a reasonable range for the number of bars\n        eliot_cost = 12 * bars # cost for Eliot's bars in pence\n        maya_cost = 17 * bars  # cost for Maya's bars in pence\n        eliot_change = 300 - eliot_cost # Eliot pays with three £1 coins (300p)\n        maya_change = 400 - maya_cost   # Maya pays with four £1 coins (400p)\n        if eliot_change == maya_change: # they receive the same amount of change\n            return bars\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_volume = 10  # Litres of orange juice\n    container_volume = 2  # Litres per container\n    num_containers = total_volume / container_volume\n    return int(num_containers)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jackson, chloe = symbols('jackson chloe')\n\n    # Equation 1: Sum of ages of Jackson and Chloe\n    equation1 = Eq(jackson + chloe, 54)\n\n    # Equation 2: In 3 years, Jackson will be 5 times as old as Chloe\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    # Jackson's age after 3 years\n    jackson_age_in_3_years = solutions[jackson] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    result1 = 66 * 2 + 66 * 3\n    result2 = 66 * 5\n    return result1 == result2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dumpling, bun = symbols('dumpling bun')\n\n    equation1 = Eq(6 * dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * dumpling + 1 * bun, 41)\n\n    solutions = solve((equation1, equation2), (dumpling, bun))\n\n    return solutions[dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    smallest, middle, largest = symbols('smallest middle largest')\n\n    # Sum of three numbers\n    eq1 = Eq(smallest + middle + largest, 56)\n\n    # Average of the smallest two numbers\n    eq2 = Eq((smallest + middle) / 2, 14)\n\n    # Average of the largest two numbers\n    eq3 = Eq((middle + largest) / 2, 22)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (smallest, middle, largest))\n\n    # The median is the value of 'middle' which is not the smallest nor the largest\n    return solutions[middle]\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5  # Base fare for the first 1.8 km\n    additional_fare = 1.2  # Fare for each additional km\n    total_cost = 8.5  # Total cost paid by Ryan\n\n    # Calculate additional cost beyond the base fare\n    additional_cost = total_cost - base_fare\n    \n    # Calculate the additional distance traveled beyond the base 1.8 km\n    additional_distance = additional_cost / additional_fare\n    \n    # Calculate the total distance of the taxi drive\n    total_distance = 1.8 + additional_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # If at least one student gets at least 3 apples,\n    # let's find the maximum number of students where this can be true.\n    \n    # If each student gets only 1 apple, we can have at most 80 students,\n    # but this does not satisfy our condition that at least one student gets at least 3 apples.\n    \n    # If each student gets at least 2 apples, we can have at most 80 // 2 = 40 students,\n    # but this still does not satisfy our condition.\n    \n    # If one student gets 3 apples, we have 80 - 3 apples left to distribute one per each remaining student.\n    # Thus, we can calculate the number of students as the remaining apples plus the one who got 3 apples.\n    \n    # Subtract the 3 apples given to one student from the total 80 apples to see how many can be given out one per student\n    remaining_apples = 80 - 3\n    \n    # The total class size includes the one student who got 3 apples\n    class_size = remaining_apples + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y be the number of yellow balloons\n    y = symbols('y')\n    # Red balloons are twice as many as yellow balloons\n    r = 2 * y\n    # Blue balloons are three times as many as yellow balloons\n    b = 3 * y\n    # The total number of balloons is 150\n    total_balloons_eq = Eq(r + b + y, 150)\n\n    # Solve the equation to find the number of yellow balloons\n    y_solution = solve(total_balloons_eq, y)\n\n    # Calculate the number of red balloons\n    red_balloons = 2 * y_solution[0]\n\n    return red_balloons\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    my_chocolates = 8\n    total_chocolates = my_chocolates * 2\n    return total_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n\n    big_cars_needed = boys_in_big_cars // capacity_big_car\n    small_cars_needed = girls_in_small_cars // capacity_small_car\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for the number of years after which their ages sum up to 100\n    years = symbols('years')\n\n    # Mother's age after 'years' years\n    mother_age = 36 + years\n    # Father's age after 'years' years\n    father_age = 42 + years\n    # Julia's age after 'years' years\n    julia_age = 7 + years\n\n    # Equation representing sum of their ages being 100\n    equation = Eq(mother_age + father_age + julia_age, 100)\n\n    # Solve the equation\n    solution = solve(equation, years)\n\n    return solution[0]\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    weight_in_ounces = 56\n\n    weight_in_pounds = weight_in_ounces / ounces_per_pound\n    weight_in_kg = weight_in_pounds / pounds_per_kg\n\n    return round(weight_in_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x + 0.25 * x - 200\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    sum_first_half = sum(range(5, 81))\n    sum_second_half = sum(range(5, 80))\n    total_sum = sum_first_half + sum_second_half\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    for perm in permutations(range(1, 10)):\n        # Generate the 9-digit number by concatenating the digits in the permutation.\n        # Then, calculate the sum of the 7 three-digit numbers.\n        numbers = [perm[i] * 100 + perm[i+1] * 10 + perm[i+2] for i in range(7)]\n        A = sum(numbers)\n        # Update max_value to hold the largest A found so far.\n        max_value = max(max_value, A)\n    return max_value\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price_after_first_discount = 32\n    further_discount = 4\n    discount_rate = 20 / 100\n    \n    # Calculate the original price before any discount\n    original_price = original_price_after_first_discount / (1 - discount_rate)\n    \n    # Calculate the final price after the further discount\n    final_price = original_price_after_first_discount - further_discount\n    \n    # Calculate the total discount\n    total_discount = original_price - final_price\n    \n    # Calculate the total discount percentage\n    total_discount_percentage = (total_discount / original_price) * 100\n    \n    return total_discount_percentage\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    total_people = 5\n    # There are 3! ways to arrange A, B, C with A left to B and B left to C.\n    abc_orders = factorial(3)\n    # There are 2! ways to arrange the remaining two people.\n    remaining_people_orders = factorial(total_people - 3)\n    # Total arrangements are the product of arrangements of the ABC trio and the remaining people.\n    total_arrangements = abc_orders * remaining_people_orders\n    return total_arrangements\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Since it's a sequence pattern, let's examine the given sequence:\n    # 10 x 10 = 1 which might imply the difference between the numbers being multiplied, 10 - 9 = 1\n    # 11 x 11 = 4 which could mean 12 - 8 = 4\n    # Following this pattern: the result of the multiplication is the difference between the next integer of the first number\n    # and the previous integer of the second number.\n    # For 55 the next integer is 56 and the previous is 54.\n    # So the answer should be 56 - 54 according to the identified pattern.\n    \n    ans = 56 - 54\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_perms = sorted([''.join(p) for p in permutations(digits)])\n    return int(all_perms[504])  # Indexing starts from 0, so we need the 505th - 1\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    # There are 3 choices for the first digit (2 or 3), \n    # 2 choices for the second digit (whichever two numbers haven't been used yet)\n    # and 1 choice for the last digit (the remaining number).\n    # However, since it's a three-digit number, we can't use 0 as the first digit.\n    count = 2 * 2 * 1\n\n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent the number of girls and b represent the number of boys\n    g = symbols('g')\n    b = 36 - g  # Since there are a total of 36 students\n    \n    # The total score of girls and boys\n    total_girls_score = 88 * g\n    total_boys_score = 91 * (36 - g)\n    \n    # Equation based on average score\n    equation = Eq(total_girls_score + total_boys_score, 89 * 36)\n    \n    # Solving for g\n    solution = solve(equation, g)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work per day\n    alice_work_rate = 1 / 40\n    # Bob's work per day\n    bob_work_rate = 1 / 60\n    \n    # Total work done by end of 27th day\n    total_work_done = 1\n\n    # Assume x is the number of days Alice takes off\n    # Total work Alice could have done without days off in 27 days\n    alice_total_without_days_off = 27 * alice_work_rate\n\n    # Total work Bob does in 27 days\n    bob_total_work = 27 * bob_work_rate\n\n    # We have the equation:\n    # alice_total_without_days_off - x * alice_work_rate + bob_total_work = total_work_done\n    # Solve for x\n    x = (alice_total_without_days_off + bob_total_work - total_work_done) / alice_work_rate\n\n    return int(x)\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote red, white, and black balls as r, w, and b\n    r, w, b = symbols('r w b')\n\n    # Equations based on given ratios\n    equation1 = Eq(r/w, 1/2)\n    equation2 = Eq(w/b, 3/4)\n    equation3 = Eq(r + w + b, 136)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, w, b))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    seventh_term = 105\n    ninth_term = 135\n    term_difference = (ninth_term - seventh_term) / 2\n    first_term = seventh_term - 6 * term_difference\n\n    hundredth_term = first_term + 99 * term_difference\n    return hundredth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # There are 2 colors of socks, to ensure we get at least one matching pair,\n    # we have to think of the worst-case scenario: picking socks of each color \n    # without getting a pair. Worst case is picking all 4 red socks and all 4 blue socks\n    # without getting a pair, but the next sock we pick must then be a match to one\n    # of those we have already picked.\n    \n    # Number of socks to ensure at least one pair:\n    # We pick one of each color, then the next one must be a match.\n    # 4 red + 4 blue + 1 more = 9 socks to ensure at least one matching pair.\n    \n    num_socks = 4 + 4 + 1\n    return num_socks\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Combined age 4 years ago\n    combined_age_4_years_ago = 24\n    \n    # Adding the 4 years to each of the 3 dogs' ages to get their current age\n    current_combined_age = combined_age_4_years_ago + (4 * 3)\n    \n    # Adding 2 more years to each of the 3 dogs' ages to get their age in 2 years\n    combined_age_in_2_years = current_combined_age + (2 * 3)\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11**2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return n\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour_angle = (8 % 12) * 30 + (30 / 60) * 30\n    minute_angle = 30 * 6\n    angle = abs(hour_angle - minute_angle)\n    return min(angle, 360 - angle)\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 4 * 5\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime('07:45', '%H:%M')\n\n    total_minutes = 13 + 23 + 8 + 27\n    wake_up_time -= timedelta(minutes=total_minutes)\n\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 in [0, 1] else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    cycle_length = 3 + 2 + 2  # Number of beads in one complete cycle (black+white+red)\n    full_cycles = total_beads // cycle_length\n    remaining_beads = total_beads % cycle_length\n    black_beads_in_full_cycle = 3  # Number of black beads in one complete cycle\n\n    # Count all black beads in complete cycles\n    black_beads = full_cycles * black_beads_in_full_cycle\n\n    # Add remaining black beads, if any\n    if remaining_beads > 3:\n        black_beads += 3\n    else:\n        black_beads += remaining_beads\n\n    return black_beads\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = set()\n    for coin1 in [1, 2, 5]:\n        for coin2 in [1, 2, 5]:\n            for coin3 in [1, 2, 5]:\n                coins.add(coin1 + coin2 + coin3)\n    return len(coins)\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    total_heads = 51\n    total_legs = 160\n    \n    # Let's assume the number of chickens (and ducks) is x\n    # Since each chicken (and duck) has 1 head and 2 legs, and each cow has 1 head and 4 legs\n    # We can create two equations based on the total number of heads and legs:\n    # x + cows = total_heads (Equation of heads)\n    # 2*x + 4*cows = total_legs (Equation of legs; because chickens and ducks have same counts)\n\n    # We can simply solve these equations with algebra\n    for chickens in range(total_heads + 1):  # We can only have a whole number of chickens, from 0 to total_heads\n        cows = total_heads - chickens  # If we know chickens (and ducks), we can know the cows\n        legs = 2 * chickens + 4 * cows\n        if legs == total_legs:\n            return chickens  # As the question is about the number of chickens\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "def solution():\n    total_ways = 4 * 3 * 4  # Joe has 4 choices, Mike has 3 (since he can't choose Joe's entrance), Tina has 4\n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice / 5\n    abigail_drink = 200\n    anna_drink = 120\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    return percentage * quantity\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ryan, audrey = symbols('ryan audrey')\n\n    # Equation based on the initial ratio\n    initial_ratio = Eq(ryan / audrey, 2 / 7)\n    \n    # Equation based on the final ratio after transactions\n    final_ratio = Eq((ryan + 20) / (audrey - 80), 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, final_ratio), (ryan, audrey))\n\n    # Extract Audrey's marbles from the solution\n    audrey_marbles_initially = solutions[audrey]\n\n    return audrey_marbles_initially\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_miles = 3000\n    total_hours = 13 * 24 + 22\n\n    average_speed = total_miles / total_hours\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2\n    concentration1 = 40\n    \n    volume2 = 3\n    concentration2 = 70\n    \n    total_volume = volume1 + volume2\n    total_juice = (volume1 * (concentration1 / 100)) + (volume2 * (concentration2 / 100))\n    \n    new_concentration = (total_juice / total_volume) * 100\n    \n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    \n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n\n    num_multiples = ((last_multiple - first_multiple) // 11) + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let w be the initial number of women and m be the initial number of men\n    w, m = symbols('w m')\n\n    # After first bus arrival: w - 36 = (3/5)(m)\n    equation1 = Eq(w - 36, (3/5) * m)\n\n    # After second bus arrival: (w - 36) == (m - 48)\n    equation2 = Eq(w - 36, m - 48)\n\n    # Solve the simultaneous equation\n    solutions = solve((equation1, equation2), (w, m))\n\n    # Calculate the total number of people at the bus stop at first\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away = 777\n\n    final_stamps = (initial_stamps - gave_to_sister + bought_stamps - gave_away)\n\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    bella_and_albert = 2\n\n    total_people = people_in_front_of_bella + bella_and_albert + people_behind_albert\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    prime_numbers = [23, 29]\n    return prime_numbers[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    age_now = symbols('age_now')\n    \n    equation = Eq(age_now + 2, 2 * (age_now - 5))\n    \n    age_now_solution = solve(equation, age_now)\n    \n    return age_now_solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x in range(1, 14):\n        for y in range(x + 1, 14):  # Start from x+1 to ensure y>x and different\n            for z in range(y + 1, 14):  # Start from y+1 to ensure z>y and different\n                # Check if the numbers add up to 14\n                if x + y + z == 14:\n                    # If they do, add the tuple (x, y, z) to our list of ways\n                    ways.append((x, y, z))\n    return ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    height_range = 132 - 124 + 1\n    minimum_same_height_students = 4\n    class_size = height_range * (minimum_same_height_students - 1) + 1\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # Cost for three pens, with each costing 50p\n    change = 5 - total_cost  # Change from £5\n\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5), 2.5*x + 3*(2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n\n    more_english_books = english_books - chinese_books\n\n    return more_english_books\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # One must leave a multiple of 4 for the opponent in each turn to ensure a win.\n    # If you take 1, you leave 14 (not a multiple of 4)\n    # If you take 2, you leave 13 (not a multiple of 4)\n    # If you take 3, you leave 12 (which is a multiple of 4)\n    # So you take 3 to leave a multiple of 4 (15 - 3 = 12), and you can always keep\n    # leaving a multiple of 4 until the last turn when you win.\n    return 3\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    total_go = 42\n    total_checkers = 55\n    total_chess = 33\n    both_go_checkers = 18\n    both_go_chess = 10\n    both_checkers_chess = 9\n    all_three = 5\n    \n    # Use the Inclusion-Exclusion Principle to find the total\n    total_students = (total_go + total_checkers + total_chess\n                      - both_go_checkers - both_go_chess - both_checkers_chess\n                      + all_three)\n    \n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years later when the sum of their ages will be 48\n\n    # Setting up the equation based on the problem statement\n    # (Oliver's current age + x) + (Lin's current age + x) = 48\n\n    # Simplify the equation:\n    # 20 + x + 26 + x = 48\n    # 2x + 46 = 48\n    # 2x = 48 - 46\n    # 2x = 2\n    # x = 1\n\n    x = (48 - (20 + 26)) // 2\n\n    return x\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = num_tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    number_of_poles = 40\n    distance_between_poles = 3\n    # Since there's no pole at the start and end, there's one less interval between poles\n    total_distance = (number_of_poles - 1) * distance_between_poles\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 245\n    factors = factorint(245)\n    \n    # To make 245p a cube, each prime factor's exponent must be a multiple of 3.\n    # We need to multiply by the minimum required powers of the prime factors of 245\n    # to make each exponent a multiple of 3.\n    \n    # For a number to be a cube, all exponents in its prime factorization must be multiples of 3.\n    p = 1\n    for prime, exponent in factors.items():\n        # If the exponent is not a multiple of 3, we must multiply by a power of the prime.\n        while exponent % 3 != 0:\n            exponent += 1\n            p *= prime\n            \n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        e, s, m, o, a = perm\n        if e == 0 or s == 0 or m == 0 or a == 0:  # Skip if any leading digit is zero\n            continue\n        esse = e * 1000 + s * 100 + s * 10 + e\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        if esse + 2018 == sasmo:\n            return s + a + s + m + o\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    centimeters = 736\n    meters = centimeters / 100\n    return meters\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum(64 - i if i % 2 == 0 else -(64 - i) for i in range(0, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = this_year_production / 4\n\n    # Since last year's production was more than 1/4 of this year, we'll add 1\n    # to ensure it is greater than just 1/4\n    return int(last_year_production + 1)\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # one on sick leave and one on personal leave\n    \n    attending_students = total_students - absent_students\n    attendance_rate = attending_students / total_students * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    value = (8 * 15) / 5\n    return value\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_series = sum([(i - 1) / i for i in range(2, 2018)])\n    return sum_series\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30 / 100\n    total_amount = 270\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position gives us the dimensions of the array\n    front_back_dimension = 4 + 3 - 1  # Tim is 4th from front, 3rd from back, we subtract 1 because Tim is counted twice\n    left_right_dimension = 1 + 4 - 1  # Tim is 1st from left, 4th from right, we subtract 1 because Tim is counted twice\n\n    # Total number of band members is the product of the dimensions of the array\n    total_members = front_back_dimension * left_right_dimension\n\n    return total_members\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    common_difference = 26 - 22\n    last_term = 98\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # original ratio 3:8\n    equation1 = Eq(apples / oranges, 3/8)\n    \n    # after removing an apple, ratio becomes 1:3\n    equation2 = Eq((apples - 1) / oranges, 1/3)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(100 - x))\n    return closest\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    original_sum = sum(range(1, 15))\n    new_sum = original_sum + 2019\n    for i in range(1, new_sum // 8):\n        if sum(range(i, i + 8)) == new_sum:\n            return i\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    ans = 9 + 88\n    return ans\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    numerator = 6.5\n    denominator = 1/4\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Define the relationship between rabbits and chickens\n    rabbits_to_chickens = 6 / 2  # 2 rabbits = 6 chickens, hence 1 rabbit = 3 chickens\n\n    # Define the relationship between kangaroos and rabbits\n    kangaroos_to_rabbits = 4 / 3  # 3 kangaroos = 4 rabbits, hence 1 kangaroo = 4/3 rabbits\n    \n    # Calculate the weight of one kangaroo in terms of chickens\n    kangaroo_in_chickens = kangaroos_to_rabbits * rabbits_to_chickens\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_sequence = (first_term + last_term) * num_terms // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {i: word.count(i) for i in set(word)}\n    \n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n    \n    return ans\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = [3, 1, 5, 1, 1, 1, 1]  # List of days for each task\n    overlapping_tasks = [1, 1, 1]  # List of days of tasks that can be overlapped (soaking cut grass, choosing wood, preparing food)\n    \n    max_days_for_main_tasks = max(tasks[:-3])  # Maximum days of tasks unrelated to overlapping ones\n    total_days_for_overlapping_tasks = sum(overlapping_tasks)  # Total days for overlapping tasks\n    \n    # Since overlapping tasks can be done simultaneously with the longest non-overlapping task\n    # We only add additional days required if overlapping tasks take more time than the longest task\n    additional_days = max(0, total_days_for_overlapping_tasks - max_days_for_main_tasks)\n    \n    # Total minimum days will be the sum of days for all tasks not including overlapping tasks\n    # Plus the time taken to perform overlapping tasks concurrently with the longest task\n    total_min_days = sum(tasks) - sum(overlapping_tasks) + additional_days\n    \n    return total_min_days\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    terms = [836, 162, 2]\n\n    ans = common_factor * sum(terms)\n    return ans\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "import math\n\ndef solution():\n    daily_savings = 2.40\n    total_savings_goal = 150\n    # Divide total savings goal by daily savings to get total number of days required\n    days_required = math.ceil(total_savings_goal / daily_savings)\n    # Divide the days by 7 to convert to weeks, and round up for the least number of whole weeks\n    weeks_required = math.ceil(days_required / 7)\n    return weeks_required\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    difference_age = 2\n    brother_age_3_years_ago = (ashley_age - 3) - difference_age\n    brothers_current_age = brother_age_3_years_ago + 3\n    return brothers_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    left_hand_side = 9 * 5 + 15 * 5\n    Y = left_hand_side // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    snow_white_position = 7\n    total_people = (snow_white_position - 1) * 2\n    dwarves = total_people - 1  # Subtract Snow White\n    return dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # If every school had at most 3 participants, to maximize the number of schools\n    # while still ending up with 100 participants, we divide 100 by 3 and round up.\n    participants = 100\n    max_participants_per_school = 3\n    max_schools = -(-participants // max_participants_per_school)\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 3\n    first_term = 7\n    common_difference = 3\n    # To find the last term value which is less than or equal to 52\n    # n = (last_term - first_term) / common_difference + 1\n    # rearrange to find n\n    # last_term = first_term + (n - 1) * common_difference\n    # 52 = 7 + (n - 1) * 3\n    # Solve for n:\n    n = ((52 - first_term) / common_difference) + 1\n\n    # Use the formula for the sum of an arithmetic sequence:\n    # sum = n/2 * (first_term + last_term)\n    sum_sequence = n/2 * (first_term + 52)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    ans = sum((2018 + i) % 5 / 5 for i in range(1, 2019))\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    from math import isqrt\n\n    # Define a function to check if a number is a perfect cube\n    def is_perfect_cube(x):\n        cuberoot = round(x ** (1/3))\n        return cuberoot ** 3 == x\n\n    # Iterate through the possible 4-digit numbers\n    for num in range(1000, 10000):\n        if is_perfect_cube(num * 6) and num % 6 == 0 and isqrt(num // 6) ** 2 == num // 6:\n            return num\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speeds of the trains\n    speed_fast = 48\n    speed_slow = 36\n    \n    # Difference in distance each train travels\n    distance_diff = 70\n    \n    # Total time taken by the trains to meet\n    # Since they meet at the same time, using the ratio of their speeds to\n    # find the ratio of distances they travel till meeting\n    # Let their meeting time be 't', then distance travelled by fast train is\n    # 48t and for the slow train is 36t. \n    # According to the problem, 48t = 36t + 70\n    t = distance_diff / (speed_fast - speed_slow)\n    \n    # Distance travelled by the faster train\n    distance_fast = speed_fast * t\n    \n    # The distance between the two stations is the sum of the distances\n    # each train travelled when they meet\n    distance_between_stations = distance_fast + (speed_slow * t)\n    \n    return distance_between_stations\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    sum_fraction = Fraction(3, 1) + Fraction(5, 9) + Fraction(6, 1) + Fraction(4, 9)\n    return sum_fraction\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim is the 4th from the front and 3rd from the back,\n    # so there are 4-1 people in front of him and 3-1 people behind him.\n    total_rows = (4 - 1) + 1 + (3 - 1)\n\n    # Tim is the 4th from the left and 7th from the right,\n    # so there are 4-1 people to his left and 7-1 people to his right.\n    total_columns = (4 - 1) + 1 + (7 - 1)\n\n    # The total number of band members is the number of rows times the number of columns.\n    total_band_members = total_rows * total_columns\n\n    return total_band_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, 8 * (gigi + 36))\n    equation2 = Eq(lily - 36 - (gigi + 36), 26)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount / 3  # After she lost one coin, she has twice as much as her brother\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1  # Start with one boat\n    while True:\n        # If one boat is added, each boat holds 6 people\n        people_with_extra_boat = (boat + 1) * 6\n        # If one boat is subtracted, each boat holds 9 people\n        people_with_less_boat = (boat - 1) * 9\n        # If both give the same number of students, we found the solution\n        if people_with_extra_boat == people_with_less_boat:\n            return people_with_extra_boat\n        boat += 1\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # We first consider the possible remainders when dividing numbers by 5.\n    # The possible remainders are 0, 1, 2, 3, and 4.\n    # A pair will sum to a multiple of 5 if and only if their remainders\n    # add up to either 5 or 0 (if both have a remainder of 0).\n    \n    # Count how many numbers in 1 to 100 have each possible remainder.\n    remainder_counts = {i: 20 for i in range(5)} # Since 100/5 is exactly 20\n    remainder_counts[0] += 1 # To include 100 itself\n    \n    # Calculate the number of ways to pick pairs that sum to a multiple of 5.\n    # There are two cases: either both numbers leave the same remainder when\n    # divided by 5, or different ones that sum to 5.\n    \n    # For same remainders (both 0 or both 5), we use combinations to avoid repeating pairs.\n    same_remainder_count = sum(\n        remainder_counts[i] * (remainder_counts[i] - 1) // 2 for i in [0, 5]\n    )\n    \n    # For different remainders (e.g., 1 and 4, or 2 and 3), we can multiply the counts.\n    different_remainder_count = (\n        remainder_counts[1] * remainder_counts[4] +\n        remainder_counts[2] * remainder_counts[3]\n    )\n    \n    # The total number of pairs is the sum of both counts.\n    ans = same_remainder_count + different_remainder_count\n    return ans\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (chocolates, friends))\n\n    chocolates_left = solutions[chocolates] - 20 * solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for a in range(1, 10):  # thousands\n        for b in range(a + 1, 10):  # hundreds\n            c = a + b  # tens, sum of thousands and hundreds\n            if c >= 10:  # the tens digit can't be two digits\n                continue\n            for d in range(b + 1, 10):  # ones\n                if c < d and a + b + c + d == 16:  # increasing order and sum check\n                    return d  # returning the ones digit\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "from itertools import permutations\n\ndef solution():\n    # Place unique numbers in a list\n    digits = [0, 2, 4]\n    \n    # Get all permutations of length 2\n    perm = permutations(digits, 2)\n    \n    # Count permutations where the first digit is not zero (valid two-digit numbers)\n    count = sum(1 for p in perm if p[0] != 0)\n    \n    return count\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    return 599999 + 59999 + 5999 + 599 + 59 + 5\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_number = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance for each part of the trip\n    uphill_distance = 3 * 5  # Distance = speed * time\n    downhill_distance = 2 * 10\n\n    # Calculate the total distance and total time\n    total_distance = uphill_distance + downhill_distance\n    total_time = 3 + 2\n\n    # Calculate the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Cost for the first 5 kWh\n    initial_cost = 2 * 5\n\n    # Fixed service fee\n    fixed_service_fee = 3\n\n    # Remaining amount after the initial cost and service fee\n    remaining_amount = 63 - initial_cost - fixed_service_fee\n\n    # Cost of each additional kWh\n    additional_rate = 1\n\n    # Total kWh she can use after the first 5 kWh\n    additional_kWh = remaining_amount / additional_rate\n\n    # Total kWh she can use\n    total_kWh = 5 + additional_kWh\n\n    return total_kWh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    fraction_value = 54\n    whole_number = 63\n    denominator = 7\n\n    numerator = (fraction_value * denominator) / whole_number\n\n    return int(numerator)\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000  # Initial cost of the bike\n    depreciation_rate = 0.10  # Depreciation rate per year\n    years = 5  # Number of years\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    final_value_rounded = round(final_value, 1)  # Round to nearest tenth\n\n    return final_value_rounded\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = (10 * x) + y\n            B = (400 * x) + (40 * y)\n            if B == 10 + (7 * A):\n                return A\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    equation1 = Eq(rasidah, chai_seng - 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), 1/2 * (rasidah * (1 - 3/5)))\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    number = 4320\n    base = 3 / 2\n    \n    # Prime factorization of 4320\n    powers_of_2 = 0\n    powers_of_3 = 0\n    while number % 2 == 0:\n        number //= 2\n        powers_of_2 += 1\n    while number % 3 == 0:\n        number //= 3\n        powers_of_3 += 1\n        \n    # Since we are multiplying by (3/2)^n and we need an integer,\n    # we can only divide by 2, n times, until we exhaust powers_of_2.\n    # So n can be at most powers_of_2.\n\n    # However, as we divide by 2, we are also multiplying by 3 each time.\n    # The new power of 3 can be no greater than powers_of_3 + n, hence,\n    # powers_of_3 + n must be less than or equal to powers_of_2.\n    \n    # So n <= powers_of_2 - powers_of_3, finding n.\n    n_values = powers_of_2 - powers_of_3\n    \n    return n_values\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n    \n    total_cookies = big_boxes * cookies_per_big_box\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n    \n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    difference = (-8) - (-19)\n    return difference\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_pass = 43\n    pass_math = 30\n    pass_science = 28\n    pass_english = 25\n\n    # Using Inclusion-Exclusion principle\n    # At most, all students passing individual subjects might have passed all three tests\n    all_three_pass = pass_math + pass_science + pass_english - total_pass * 2\n\n    # Limit to non-negative values, as we cannot have negative number of students\n    all_three_pass = max(0, all_three_pass)\n\n    return all_three_pass\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    weight1 = 20\n    concentration1 = 35\n    weight2 = 30\n    concentration2 = 60\n    \n    total_weight = weight1 + weight2\n    total_juice = (weight1 * concentration1 / 100) + (weight2 * concentration2 / 100)\n    \n    concentration_new_mixture = (total_juice / total_weight) * 100\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote warehouse B's original grain amount as 'b'\n    b = symbols('b')\n\n    # Warehouse A had 50 tons and received 12 more tons\n    a = 50 + 12\n\n    # Warehouse B shipped out 16 tons\n    b_after_shipping = b - 16\n\n    # Now the grain in warehouse A is 2 times that of warehouse B\n    equation = Eq(a, 2 * b_after_shipping)\n\n    # Solve the equation to find the original amount in warehouse B\n    original_b = solve(equation, b)\n\n    # The solution will be stored in a list, so we take the first element\n    return original_b[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    prime_numbers = [29, 31, 37, 41, 43]\n    # Assuming the missing prime number is between 31 and 41\n    for i in range(31, 42):\n        if i not in prime_numbers:\n            return i\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    box_capacity = 6\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = \"COLLEGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    divisor = 1\n    for count in letter_counts.values():\n        divisor *= factorial(count)\n    return total_permutations // divisor\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.5 * 0.2 * 6000\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fish_for_rabbit = 3\n    rabbit_for_wheat = 2 / 3\n\n    fish_for_wheat = fish_for_rabbit * rabbit_for_wheat\n    return fish_for_wheat\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of people attending the meeting\n    # Let y be the number of benches\n    x, y = symbols('x y')\n\n    equation1 = Eq(x - 3*y, 7)  # When 3 per bench, 7 people are standing\n    equation2 = Eq(x - 7*y, -3 * 7)  # When 7 per bench, 3 benches are left\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    pencils = None\n    for p in range(400, 501):\n        if p % 4 == 1 and p % 5 == 2 and p % 7 == 4:\n            pencils = p\n            break\n    return pencils\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # Include 0\n        for x2 in range(10):  # Include 0\n            for x3 in range(10):  # Include 0\n                if x1 + x2 + x3 == 9:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    # Given that Dell had 32 stickers, and Dell had twice as many as Ginnie,\n    # we can find the number of stickers Ginnie had by dividing by 2.\n    ginnie_stickers = 32 // 2\n\n    # Knowing that Ginnie had 4 times as many stickers as Lyn,\n    # we can find the number of stickers Lyn had by dividing by 4.\n    lyn_stickers = ginnie_stickers // 4\n    \n    # The total number of stickers Ginnie and Lyn had altogether\n    # is the sum of Ginnie's stickers and Lyn's stickers.\n    total_stickers = ginnie_stickers + lyn_stickers\n    \n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(21 - 11)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount * 3) / ratio_sum\n    return bigger_share\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mass_empty, mass_full = symbols('mass_empty mass_full')\n    equation1 = Eq((5/6) * mass_full + mass_empty, 4.6)\n    equation2 = Eq((2/3) * mass_full + mass_empty, 4.45)\n\n    solutions = solve((equation1, equation2), (mass_empty, mass_full))\n\n    return float(solutions[mass_empty]) * 1000  # converting kg to grams\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, solve\n\n    fav_num = symbols('fav_num')\n\n    equation = Eq(2 * fav_num - 3, 19)\n\n    fav_num_solution = solve(equation, fav_num)\n\n    return fav_num_solution[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):   # Loop for hundreds place (odd and non-zero)\n        for j in range(10):     # Loop for tens place\n            for k in range(10): # Loop for ones place (digits can be zero)\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    pages = 0\n    digits_used = 0\n    for digit in range(1, total_digits + 1):\n        if pages < 9:  # Pages with 1 digit (1-9)\n            increment = 1\n        elif pages < 99:  # Pages with 2 digits (10-99)\n            increment = 2\n        elif pages < 999:  # Pages with 3 digits (100-999)\n            increment = 3\n        else:  # Pages with 4 digits (1000 and beyond)\n            increment = 4\n\n        if digits_used + increment <= total_digits:\n            pages += 1\n            digits_used += increment\n        else:\n            break\n\n    return pages\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 12 * 13\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    # Total number of pupils before transfer\n    total_pupils_before = 235 + 567\n    \n    # Each room will have half of total pupils after transfer\n    pupils_each_room_after = total_pupils_before // 2\n    \n    return pupils_each_room_after\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = 0\n    for i in range(1, 21):\n        if i % 2 == 0:\n            ans += i\n        else:\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    difference = 2\n    while term < 100:\n        term += difference\n        difference += 2\n    return term - difference\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n\n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy = 149\n    sister = andy - 38\n    \n    # After giving away 38 notebooks, they will have the same amount.\n    sister_initial = sister - 38\n    return sister_initial\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    # Suppose Clara buys x books and y magazines.\n    # Then, 3.40x + 1.60y = 23\n    # We need to find all pairs of (x, y) that satisfy this equation.\n    \n    # Since Clara cannot buy a negative number of books or\n    # magazines, and the total amount spent is fixed, we look\n    # for non-negative integer solutions for x (books) and y (magazines).\n\n    solutions = []\n    for x in range(0, int(23 / 3.40) + 1):  # Clara can buy at most int(23/3.40) books\n        y = (23 - 3.40 * x) / 1.60\n        if y.is_integer() and y >= 0:\n            solutions.append((x, int(y)))\n    \n    # Return the number of magazines for the solution found.\n    if solutions:\n        _, magazines = solutions[0]   # Assuming there's only one solution\n        return magazines\n    else:\n        return 0  # If no solution is found\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_sequence = (n * (n + 1)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for i in range(1, 100):  # assuming Mr. Lv's age is less than 100\n        base10_age = str(i)\n        base10_age_with_0 = base10_age + '0'\n        base3_age = int(base10_age_with_0, 3)\n        if base3_age == i:\n            return i\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Total number of flowers\n    total_flowers = Eq(orchids + tulips + roses, 3616)\n\n    # Ratio of orchids to tulips\n    ratio_orchids_tulips = Eq(orchids, 3/8 * (orchids + tulips))\n\n    # Flowers left after sales\n    flowers_remaining = Eq(\n        0.60 * orchids + 0.80 * tulips + 0.75 * roses, 2644)\n\n    # System of equations\n    solutions = solve((total_flowers, ratio_orchids_tulips, flowers_remaining), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    from fractions import Fraction\n\n    part1 = Fraction(5, 8) + Fraction(1, 17)\n    part2 = part1 * 8\n    part3 = Fraction(9, 17)\n\n    ans = part2 + part3\n\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Factoring 7007 to find its prime factors\n    factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n        if n == 1:\n            break\n            \n    # Finding two 2-digit multiples of 7\n    for i in range(len(factors)):\n        for j in range(i + 1, len(factors)):\n            num1 = factors[i] * factors[j]\n            num2 = 7007 // num1\n            if 10 <= num1 < 100 and 10 <= num2 < 100 and num1 % 7 == 0 and num2 % 7 == 0:\n                return num1 + num2\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    \n    # Since the table is circular, we fix one person and arrange the remaining 6.\n    # This eliminates the rotation equivalence.\n    num_ways = factorial(6)  # 6! is the number of ways to arrange 6 people\n    \n    return num_ways\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_cost = 9\n    cheesecake_to_cookie_ratio = 3 / 5\n    chocolate_cake_to_cheesecake_ratio = 3 / 2\n\n    cheesecake_cost = cookie_cost * cheesecake_to_cookie_ratio\n    chocolate_cake_cost = cheesecake_cost * chocolate_cake_to_cheesecake_ratio\n\n    return chocolate_cake_cost / 3\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Equations from the problem statement\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Returning the cost of each volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                # Ensure all digits are different (excluding 0, 1, 2, and 9 which are already in the number)\n                if len(set([A, M, C, 0, 1, 2, 9])) == 7:\n                    # Check if the number is divisible by 9\n                    if (2+0+A+M+C+1+9) % 9 == 0:\n                        # If so, return the sum of A, M and C\n                        return A+M+C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, valeria = symbols('mike valeria')\n\n    total_candies = 36\n    mike_eats = mike - 6  # Eat the same amount as Valeria, and 6 candies left\n    valeria_eats = valeria - 22  # Eat the same amount and 22 candies left\n\n    # Situation described by Valeria\n    equation1 = Eq(mike_eats, valeria_eats)\n    # Total number of candies\n    equation2 = Eq(mike + valeria, total_candies)\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_read_in_a_day = 1/4 / 3\n    total_days = 1 / part_read_in_a_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, melissa_then, mother_then, mother_now = symbols('melissa_now melissa_then mother_then mother_now')\n\n    equation1 = Eq(melissa_then, 8)\n    equation2 = Eq(mother_then, 32)\n    equation3 = Eq(mother_now, 3 * melissa_now)\n    equation4 = Eq(mother_now - melissa_now, mother_then - melissa_then)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (melissa_now, melissa_then, mother_then, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 / (2 * 7)\n    return n\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # The repeating decimal of 6/7 is 0.857142...\n    repeating_section = [8, 5, 7, 1, 4, 2]\n    \n    # The length of the repeating section\n    repeat_length = len(repeating_section)\n\n    # The number of full repeats in the first 58 digits\n    num_full_repeats = 58 // repeat_length\n\n    # The number of additional digits after the last full repeat\n    remaining_digits = 58 % repeat_length\n\n    # Calculate the sum of digits in the first 58 digits\n    sum_full_repeats = sum(repeating_section) * num_full_repeats\n    sum_remaining_digits = sum(repeating_section[:remaining_digits])\n\n    # The final sum\n    ans = sum_full_repeats + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal\n\n    recurring_73 = Decimal('4.73').quantize(Decimal('1.0000'))\n    non_recurring_73 = Decimal('4.73')\n    recurring_77 = Decimal('4.77').quantize(Decimal('1.0000'))\n    non_recurring_737 = Decimal('4.737')\n    \n    smallest_one = min(recurring_73, non_recurring_73, recurring_77, non_recurring_737)\n    return smallest_one\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    joel_remove = remaining_plants * 2 + 2\n    total_after_valerie = remaining_plants + joel_remove\n    valerie_remove = total_after_valerie * 2 + 3\n    total_initial = total_after_valerie + valerie_remove\n    ethan_remove = total_initial * 2 + 1\n    total_plants = total_initial + ethan_remove\n    return total_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18  # Eggs remaining after the two sales\n    # Let the initial number of eggs be x\n    # After selling 16 more than half: x - (x/2 + 16)\n    # Then, after selling 7 fewer than half of remaining: (x - (x/2 + 16)) / 2 - 7 = 18\n    # We need to solve for x.\n\n    # Simplifying the equation:\n    # (x - (x/2 + 16)) / 2 - 7 = 18\n    # (x/2 - 16) / 2 - 7 = 18\n    # x/4 - 8 - 7 = 18\n    # x/4 = 33\n    # x = 132\n\n    # Number of eggs after first sell\n    first_sell = (132 / 2 + 16)\n    # Calculate remaining eggs after first sell\n    remaining_after_first_sell = 132 - first_sell\n    # Number of eggs sold in the second sell\n    second_sell = (remaining_after_first_sell / 2 - 7)\n    \n    # Now let's verify the solution is correct\n    initial_eggs = first_sell + second_sell + remaining_eggs\n    return initial_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    PA, PB, PC, PD, PG = symbols('PA PB PC PD PG')\n    # From the problem statement, we know the values of PB, PC, PD, PG\n    PB_val = 60*sqrt(10)\n    PC_val = 60*sqrt(5)\n    PD_val = 120*sqrt(2)\n    PG_val = 36*sqrt(7)\n\n    # We know that the segments are the edges and diagonals of a cube, therefore:\n    # AB = AC = AD (edges of the cube)\n    # AG is a space diagonal of the cube with length s*sqrt(3), where s is the side of the cube\n\n    # Based on the Pythagorean theorem in 3D for the space diagonal\n    # PG**2 = PA**2 + (s*sqrt(3) - PA)**2\n    # Similarly, PB**2, PC**2, PD**2 can be represented in terms of PA and s\n    # After transforming, all sides (s) can be represented in terms of PA, which gives us a system of equations\n\n    # The side of the cube is PA + (s*sqrt(3) - PA)\n    s = PA + (sqrt(3)*PA - PA)\n\n    # Using Pythagorean theorem in 3D\n    # Sides are equal: PD**2 = PB**2 + PC**2, replacing PB, PC with their values\n    equation1 = Eq(PD**2, PB**2 + PC**2)\n    equation1 = equation1.subs({PB: PB_val, PC: PC_val, PD: PD_val})\n\n    # Space Diagonal: PG**2 = 3*s**2, replacing s\n    equation2 = Eq(PG**2, 3*s**2)\n    equation2 = equation2.subs({PG: PG_val})\n\n    # Now we solve the system of equations for PA\n    result = solve((equation1, equation2), (PA, s))\n\n    # We want the positive value of PA\n    PA_val = max([i[0] for i in result])\n    \n    return PA_val\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    for p6_students in range(120):\n        p1_students = 120 - p6_students\n        buckets = 2 * p6_students + (1/2) * p1_students\n        if buckets == 180:\n            return p1_students\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are 2 sides of a coin, heads or tails\n    outcomes_per_toss = 2\n    \n    # Tossing the coin twice\n    total_outcomes = outcomes_per_toss ** 2  # Each toss has 2 outcomes\n    \n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    result = 7 / (1/3)\n    return result\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    fish_per_rabbit = 3\n    rabbits_per_wheat = 2 / 3\n    fish_per_wheat = fish_per_rabbit / rabbits_per_wheat\n    return fish_per_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    incorrect_product = quotient * remainder\n    incorrect_sum = incorrect_product + divisor\n\n    # Proper approach:\n    correct_product = quotient * divisor\n    correct_sum = correct_product + remainder\n\n    is_correct = incorrect_sum == correct_sum\n\n    return correct_sum if not is_correct else incorrect_sum\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    # Initialize a list to store the possible combinations\n    combinations = []\n    # Loop through all the possible values for the first die\n    for die1 in range(1, 7):\n        # Loop through all the possible values for the second die\n        for die2 in range(1, 7):\n            # If the sum of the two dice is 8,\n            # append the combination to the list\n            if die1 + die2 == 8:\n                combinations.append((die1, die2))\n    # The number of different ways to score a sum of 8\n    ans = len(combinations)\n    # Return all possible combinations to see them clearly and the count\n    return combinations, ans\n\n# Call the solution function and unpack the results\ncombinations, ans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    kg_per_box = 14 / boxes_for_14kg\n    total_kg = 66.5\n\n    boxes_needed = total_kg / kg_per_box\n\n    return int(boxes_needed) if boxes_needed.is_integer() else int(boxes_needed) + 1\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    total_students = symbols('total_students')\n\n    # Initial condition: 40% of students are boys\n    # After change: 16 boys leave, 16 girls enter, boys make up 2/15 of the students\n    # Equations based on problem:\n    # (0.4 * total_students - 16) / (total_students + (16 - 16)) = 2/15\n\n    equation = Eq((0.4 * total_students - 16) / total_students, 2 / 15)\n    \n    total_students_solution = solve(equation, total_students)[0]\n    \n    # Calculate the number of girls now\n    boys_initially = 0.4 * total_students_solution\n    boys_now = boys_initially - 16\n    girls_now = total_students_solution - boys_now\n\n    return girls_now\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator_part1 = 3 + 1/3 * 1.9\n    numerator_part2 = 19.5 / (4 + 1/2)\n    numerator = numerator_part1 + numerator_part2\n\n    denominator_part1 = 62/75 - 0.16\n    denominator_part2 = (3.5 + 4 + 2/3 + 2/15) / (0.5 * (1 + 1/20 + 4.1))\n    \n    ans = numerator / denominator_part1 / denominator_part2\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    for n in range(1000, 10000):\n        str_n = str(n)\n        for i in range(4):\n            m = int(str_n[:i] + str_n[i+1:])\n            if n - m == 2021:\n                return n\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Check all permutations of one, two, and three digit numbers\n    for i in range(1, 4):\n        for number_tuple in permutations(digits, i):\n            number = int(''.join(number_tuple))\n            if number < 100 and is_prime(number):\n                primes.add(number)\n\n    return len(primes)\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n    equation1 = Eq(banana + 2*pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # Work rate of A and B\n    work_rate_a = 1 / 15\n    work_rate_b = 1 / 10\n    \n    # Total work done by A and B in 4 days\n    work_done_4_days = 4 * (work_rate_a + work_rate_b)\n    \n    # Remaining work\n    remaining_work = 1 - work_done_4_days\n    \n    # Days for B to finish the remaining work\n    days_for_b_to_finish = remaining_work / work_rate_b\n    \n    return days_for_b_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65)\n    part2 = (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n\n    total_cost = num_tickets * cost_per_ticket\n\n    return total_cost\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    percent_swimming = 82\n    percent_jogging = 54\n    percent_neither = 16\n    \n    students_swimming = (percent_swimming * total_students) / 100\n    students_jogging = (percent_jogging * total_students) / 100\n    students_neither = (percent_neither * total_students) / 100\n    \n    # Students who like swimming or jogging or both = total_students - students_neither\n    students_swimming_or_jogging = total_students - students_neither\n    \n    # Students who like both sports = students_swimming + students_jogging - students_swimming_or_jogging\n    students_both = students_swimming + students_jogging - students_swimming_or_jogging\n    \n    return int(students_both)\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    distance_between_trees = 10\n    road_length = 150\n    num_trees = (road_length // distance_between_trees) + 1\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_time = 5  # minutes per problem for Linda\n    cici_time = 6   # minutes per problem for Cici\n\n    # total time they work together is 2 hours, which is 120 minutes\n    total_time = 2 * 60\n\n    # Linda's and Cici's rates in problems per minute\n    linda_rate = 1 / linda_time\n    cici_rate = 1 / cici_time\n\n    # combined rate of solving problems per minute\n    combined_rate = linda_rate + cici_rate\n\n    # total number of problems solved together\n    total_problems = combined_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy gives to John.\n    # After giving x apples, Amy would have amy - x apples.\n    # John would have john + x apples.\n    # Amy wants to have 4 more apples than John, so:\n    # amy - x = (john + x) + 4\n    # Solve for x:\n    x = (amy - john - 4) / 2\n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    for number in range(14, 17):\n        if number % 2 != 0:\n            return number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    wait_time = 45 - (18 % 45)\n    return wait_time\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Total amount of grass in the pasture\n    total_grass = 14 * 15\n    # The amount of grass 1 goat eats per day\n    goat_grass_per_day = 4\n    # The amount of grass 1 rabbit eats per day\n    rabbit_grass_per_day = 1\n    # The total amount of grass needed per day for 17 goats and 20 rabbits\n    daily_grass_needed = (17 * goat_grass_per_day) + (20 * rabbit_grass_per_day)\n\n    # For how many days can the pasture feed 17 goats and 20 rabbits\n    days = total_grass / daily_grass_needed\n\n    return days\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, None, 21]\n    known_sum = sum(filter(None, numbers))\n    total_numbers = len(numbers)\n    mean_of_numbers = 37\n    total_sum = mean_of_numbers * total_numbers\n    missing_number = total_sum - known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return total_cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for each type of prize\n    x, y, z = symbols('x y z')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(x, y + 83)  # There are 83 more Prizes X than Prizes Y\n    equation2 = Eq(z, x + 24)  # There are 24 more Prizes Z than Prizes X\n    equation3 = Eq(x + y + z, 283)  # The total number of prizes is 283\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # Return the number of Prizes Y\n    return solutions[y]\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    chan, toh = symbols('chan toh')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(1/4 * chan, 1/3 * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chan, toh))\n    \n    # Extract the solution for Mr Toh's money\n    return solutions[toh]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb_rate = 10\n    slide_rate = 1\n    current_height = 0\n    day = 0\n\n    while current_height < height:\n        day += 1\n        current_height += climb_rate\n        \n        if current_height >= height:\n            break\n            \n        current_height -= slide_rate\n        slide_rate += 1\n\n    return day\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    result = 4\n    for i in range(1, 4):\n        result += int(str(4) * (i + 1))\n    return result\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    mean_savings = sum(savings) / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3 / 5) * sandra)\n    equation3 = Eq(tasha - riley, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    # Return the number of erasers Riley has\n    return solutions[riley]\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel_to_number = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n    devil_to_number = {letter: angel_to_number.get(letter, '2') if letter != 'i' else '9' for letter in 'Devil'}\n\n    new_password = \"\".join([devil_to_number.get(letter, '') for letter in 'Devil'])\n\n    return (False, new_password)\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    def recurring_decimal(a, b):\n        return a / (9 if b == 1 else 99)\n\n    # Calculate each term\n    term1 = recurring_decimal(1, 1)\n    term2 = recurring_decimal(12, 2)\n    term3 = recurring_decimal(23, 3)\n    term4 = recurring_decimal(34, 4)\n    term5 = recurring_decimal(45, 5)\n    term6 = 0.54  # this term is not a recurring decimal\n    term7 = recurring_decimal(78, 8)\n\n    # Sum the terms\n    sum_of_terms = term1 + term2 + term3 + term4 + term5 + term6 + term7\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, solve, simplify\n\n    x, a = symbols('x a')\n    equation = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n\n    # Solve for x\n    solution_for_x = solve(equation, x)\n    x_value = solution_for_x[0]\n\n    # Calculate sqrt(x^2 + 8x) in terms of a\n    expression = sqrt(x_value**2 + 8 * x_value)\n    simplified_expression = simplify(expression)\n\n    return simplified_expression\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i+1, 2036):\n            for k in range(j+1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 6):\n        for x2 in range(1, 6):\n            if x1 + x2 == 6:\n                count += 1\n            for x3 in range(1, 6):\n                if x1 + x2 + x3 == 6:\n                    count += 1\n                for x4 in range(1, 6):\n                    if x1 + x2 + x3 + x4 == 6:\n                        count += 1\n                    for x5 in range(1, 6):\n                        if x1 + x2 + x3 + x4 + x5 == 6:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    sheep = 23\n    pens = 11\n    # Calculate the minimum number of sheep in the pen with the most sheep\n    # based on the Pigeonhole Principle\n    min_sheep_most_pen = (sheep + pens - 1) // pens\n    \n    return min_sheep_most_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if all(num % div == remainder for div, remainder in [(3, 2), (4, 2), (5, 2), (7, 5)]):\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys = 18\n    girls = 27\n    total_members = boys + girls\n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n\n    total_age_boys = boys * mean_age_boys\n    total_age_girls = girls * mean_age_girls\n    total_age = total_age_boys + total_age_girls\n\n    mean_age_all = total_age / total_members\n\n    return mean_age_all\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    # Mapping the letters in \"Angel\" to their corresponding numbers\n    mapping = {'A': '0', 'n': '1', 'g': '4', 'e': '7', 'l': '5'}\n\n    angel_number = \"0141705021\"\n    devil = \"Devil\"\n    \n    # Attempt to reconstruct the password from \"Devil\" using the original mapping\n    devil_number = ''.join([mapping.get(char, '') for char in devil])\n    \n    # Check if Andy's input matches the reconstructed password\n    if devil_number == \"4005220912\":\n        return True  # Andy can unlock the chest.\n    else:\n        return devil_number  # Provide the correct password.\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 300):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    ans = lcm(raye_cycle, simon_cycle, taylor_cycle)\n    return ans\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # In the worst case scenario, Sara could pick balls in a way that prolongs getting five of the same color as long as possible.\n    # Thus, she could pick 4 green balls, 4 yellow balls, and 2 red balls (since there are only 2 red balls).\n    # At this point, she has 4 + 4 + 2 = 10 balls.\n    # The next ball she picks must be the fifth ball of either green or yellow.\n    # Therefore, she must pick 10 + 1 balls to be certain of having 5 of the same color.\n    return 10 + 1\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the mass of a chair, and x+2 be the mass of a table.\n    x = symbols('x')\n    \n    # Equation: The total mass of 3 tables equals the total mass of 4 chairs.\n    equation = Eq(3 * (x + 2), 4 * x)\n    \n    # Solve for x\n    chair_mass = solve(equation, x)[0]\n    # Calculate table mass\n    table_mass = chair_mass + 2\n    \n    return table_mass\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 31  # Given that the 10th term is 31\n    n = 10  # Given 10th term\n    difference = 3  # Common difference found by subtracting consecutive elements (28 - 25)\n\n    # Using the nth term formula for an arithmetic sequence: nth_term = first_term + (n - 1) * difference\n    # We rearrange the formula to solve for the first_term\n    first_term = nth_term - (n - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    # The combined speed of Sam and Ben\n    combined_speed = 1 + 0.6  # m/s\n    \n    # Convert 10 minutes to seconds\n    total_time = 10 * 60  # seconds\n    \n    # Total distance covered by both Sam and Ben\n    total_distance = combined_speed * total_time\n    \n    # Number of times they meet is how many laps they've done together divided by the pool's length\n    # Since each lap is two lengths of the pool\n    times_met = total_distance / (2 * 30)\n    \n    return int(times_met)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    first_pair = 89\n    second_pair = 75\n\n    ab = first_pair // 10\n    a = ab % 10\n    b = first_pair % 10\n\n    cd = second_pair // 10\n    c = cd % 10\n    d = second_pair % 10\n    \n    result = a * b + c * d\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    hottest = max(temperatures)\n    coldest = min(temperatures)\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = 2 * average_bob_cindy\n    total_height_three = total_height_bob_cindy + height_doris\n    average_height_three = total_height_three / 3\n    return average_height_three\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    destin, nephew = symbols('destin nephew')\n    \n    # Equation for the age in 6 years\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    \n    # Equation for the age 6 years ago\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    sum_age_in_10_years = solutions[destin] + solutions[nephew] + 20  # 20 accounts for 10 years for each\n\n    return sum_age_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n\n    total_pupils = 40\n    avg_pencils = 35\n    avg_boys_pencils = 20\n    avg_girls_pencils = 60\n    girls = total_pupils - boys\n\n    equation = Eq(boys * avg_boys_pencils + girls * avg_girls_pencils, total_pupils * avg_pencils)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the original number of pies both Mrs Tan and Mrs Lim had\n    x = symbols('x')\n\n    # Mrs Tan now has x + 12 pies, Mrs Lim has x - 4\n    # Mrs Tan has twice as many as Mrs Lim: x + 12 = 2 * (x - 4)\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation for x\n    original_pies = solve(equation, x)\n\n    return original_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "import itertools\n\ndef solution():\n    digits = ['1', '3', '5']\n    perm = itertools.permutations(digits, len(digits))\n    return len(list(perm))\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    departure_time = (6, 35)\n    arrival_time = (10, 22)\n\n    departure_minutes = departure_time[0] * 60 + departure_time[1]\n    arrival_minutes = arrival_time[0] * 60 + arrival_time[1]\n\n    total_minutes = arrival_minutes - departure_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '34563456'  # The repeated pattern\n    pattern_length = len(pattern)\n    total_digits = 50\n\n    complete_repeats = total_digits // pattern_length\n    remaining_digits = total_digits % pattern_length\n\n    # Sum of digits in the repeated pattern\n    sum_pattern = sum(int(digit) for digit in pattern)\n\n    # Sum of digits in the complete repeats and the remaining part\n    sum_complete_repeats = sum_pattern * complete_repeats\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    total_sum = sum_complete_repeats + sum_remaining_digits\n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n\n    # Calculate number of sweets and students in the first group\n    sweets_first_group_total = total_sweets * fraction_first_group\n    students_first_group = sweets_first_group_total / sweets_first_group\n\n    # Calculate the remaining sweets after first group\n    remaining_sweets = total_sweets - sweets_first_group_total\n    # Calculate number of sweets and students in the second group\n    sweets_second_group = 4\n    sweets_second_group_total = remaining_sweets * fraction_second_group\n    students_second_group = sweets_second_group_total / sweets_second_group\n\n    # Calculate the remaining sweets after second group\n    remaining_sweets_after_second_group = remaining_sweets - sweets_second_group_total\n    # Calculate number of students in the third group\n    sweets_third_group = 5\n    students_third_group = remaining_sweets_after_second_group / sweets_third_group\n\n    # Sum all students\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "from sympy import primefactors\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    products = set()\n\n    # Calculate products of all possible pairs and triplets\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            products.add(cards[i] * cards[j])\n            \n    common_products = set()\n    \n    # Find common products among pairs and triplets\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            for k in range(j + 1, len(cards)):\n                prod_triplet = cards[i] * cards[j] * cards[k]\n                if prod_triplet in products:\n                    common_products.add(prod_triplet)\n    \n    # Find which single card was not part of the common product\n    for product in common_products:\n        factors = primefactors(product)\n        for card in cards:\n            if factors.count(card) == 0:\n                return card\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - (father_future_age - tom_age)\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3 / 10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def is_composite(n):\n    if n < 4:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef solution():\n    for num in range(1000, 0, -2):  # an odd number cannot be the largest odd number\n        found = True\n        for i in range(2, num):\n            if is_composite(i):\n                for j in range(2, num - i):\n                    if is_composite(j) and is_composite(num - i - j):\n                        found = False\n                        break\n                if not found:\n                    break\n        if found:\n            return num\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    lcm_days = lcm(25, 20)  # least common multiple of the packet sizes\n    next_start_date = 1 + lcm_days  # she starts new packets on the 1st day, so we add the lcm_days to it\n\n    # Depending on the days next_start_date falls on, calculate the month and day\n    days_in_months = [31, 30, 31, 30, 31, 31]  # March to August (up to 186 days)\n    current_day = 1\n    current_month = 3  # March\n    \n    while next_start_date > days_in_months[current_month - 3]:\n        next_start_date -= days_in_months[current_month - 3]\n        current_month += 1\n        if current_month > 8:  # Reset after August\n            current_month -= 6\n\n    # Return the date in the format (day, month)\n    return (next_start_date, current_month)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    bigger_fraction = 3 + 1/4\n    smaller_fraction = 1 + 3/4\n    difference = bigger_fraction - smaller_fraction\n    \n    return difference\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    total_prize = 580\n    boy_prize = 8\n    girl_prize = 5\n    # Let the number of girls be g, so the number of boys will be 3g\n    # Hence, we have the equation: 8 * 3g + 5 * g = 580\n    for g in range(1, total_prize // girl_prize + 1):\n        if (boy_prize * 3 * g) + (girl_prize * g) == total_prize:\n            # We know this is the correct number of girls, so we can find the boys\n            boys = 3 * g\n            return boys\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    # Start with the first number that satisfies the condition\n    first_term = 3\n    # Find the last number less than 100 that leaves remainder 3 when divided by 4\n    last_term = 100 - (100 % 4) - 1\n    # The difference between consecutive terms in this sequence\n    difference = 4\n    \n    # Calculate the sum of an arithmetic sequence using the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    num_terms = ((last_term - first_term) // difference) + 1\n    sequence_sum = num_terms * (first_term + last_term) // 2\n    \n    return sequence_sum\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for side1 in range(1, 12//2 + 1):  # The side can be at most half the perimeter\n        for side2 in range(side1, (12 - side1) // 2 + 1):  # The second side should start at side1 for isosceles and go up to half of the remaining perimeter\n            side3 = 12 - side1 - side2\n            # To form a triangle, the sum of the lengths of any two sides must be greater than the length of the third side.\n            if side1 + side2 > side3 and side2 == side3:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    sales_tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    sales_tax = bill * sales_tax_percentage\n    total_cost = bill + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the current ages of the younger and elder brothers\n    younger, elder = symbols('younger elder')\n\n    # Equation 1: The sum of their current ages\n    equation1 = Eq(younger + elder, 42)\n\n    # Equation 2: A few years ago, when the elder brother was the age of the current younger brother,\n    # the younger brother was half the elder brother's current age.\n    # Let \"few_years_ago\" be the number of years ago\n    few_years_ago = elder - younger\n    equation2 = Eq(younger - few_years_ago, elder / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (younger, elder))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    \n    both_teams = (sports_team + art_team) - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    # Perform long division using the // operator in Python\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had = 86\n    lena_gave_away = 29\n    lena_left = lena_had - lena_gave_away\n    final_amount = 100\n    strawberries_mother_gave = final_amount - lena_left\n\n    return strawberries_mother_gave\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n\n    passed_second_but_failed_first = 3\n\n    # Apply the Inclusion-Exclusion Principle for two sets:\n    # passed_only_first_exam = (passed_first_exam + failed_second_exam) - (total_students - passed_second_but_failed_first)\n    passed_only_first_exam = passed_first_exam - (total_students - failed_second_exam - passed_second_but_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of ways from A to B to C to D\n    ways_A_B_C_D = 7 * 5 * 2\n    \n    # Number of ways from A to C to D\n    ways_A_C_D = 4 * 2\n    \n    # Number of direct ways from A to D\n    ways_A_D = 6\n\n    # Total number of ways from A to D\n    total_ways = ways_A_B_C_D + ways_A_C_D + ways_A_D\n\n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let's denote chocolate cupcakes as cc and cheese cupcakes as chc\n    cc, chc = symbols('cc chc')\n\n    # Total cupcakes is the sum of chocolate and cheese cupcakes\n    total_cupcakes_eq = Eq(cc + chc, 255)\n\n    # After selling, remaining chocolate cupcakes is 60% and cheese is 25%\n    # The remaining number of cupcakes of each type is equal\n    remaining_cc_eq = Eq(cc * 0.60, chc * 0.25)\n\n    # Solve the system of equations\n    solutions = solve((total_cupcakes_eq, remaining_cc_eq), (cc, chc))\n\n    # Calculate the number of cupcakes Eric had left of each type\n    remaining_cupcakes = solutions[cc] * 0.60 \n\n    return remaining_cupcakes\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen = symbols('pen')\n    pencil_price = 2\n    pencils = 3\n    total_cost = 20\n    \n    # equation for the total cost\n    equation = Eq(2 * pen + pencils * pencil_price, total_cost)\n    \n    # solve for the price of a pen\n    pen_price = solve(equation, pen)[0]\n    \n    return pen_price\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay_kg = 300\n    cattle_count = 5\n    total_days = 10\n    \n    hay_per_cattle_per_day = total_hay_kg / (cattle_count * total_days)\n\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    from math import sqrt\n\n    factors = []\n    for i in range(1, int(sqrt(210)) + 1):\n        if 210 % i == 0:\n            factors.append(i)\n            complement = 210 // i\n            if complement < 10 and complement != i:\n                factors.append(complement)\n\n    factors.sort()\n    youngest = factors[1]  # The first factor is always 1, so we take the second smallest factor\n\n    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let b represent the number of boys and g represent the number of girls.\n    # We are given that 1/4 of the boys equals 2/5 of the girls, and b + g = 39.\n    # The equations can be written as:\n    # (1/4)*b = (2/5)*g  =>  5b = 8g\n    # b + g = 39\n    # We will solve these two equations to find the values of b and g.\n\n    from sympy import symbols, Eq, solve\n\n    b, g = symbols('b g')\n    equation1 = Eq(5*b, 8*g)\n    equation2 = Eq(b + g, 39)\n\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Now we calculate how many more boys than girls are there.\n    more_boys = solutions[b] - solutions[g]\n\n    return more_boys\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_kilograms = 960\n    kilograms_per_box = 8\n\n    return total_kilograms // kilograms_per_box\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    killed_fraction = 3 / 8\n    killed_seedlings = total_seedlings * killed_fraction\n    surviving_seedlings = total_seedlings - killed_seedlings\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    daily_consumption = 12\n    total_locusts = 100\n\n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts % daily_consumption\n\n    if remaining_locusts == 0:\n        ans = daily_consumption\n    else:\n        ans = remaining_locusts\n\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $5 notes and $10 notes\n    num_5, num_10 = symbols('num_5 num_10')\n\n    # Equation 1: The total number of notes\n    eq1 = Eq(num_5 + num_10, 116)\n    \n    # Equation 2: Remaining notes after spending\n    # Spent 60% of $10 notes, so 40% remain\n    # Spent 25% of $5 notes, so 75% remain\n    # Remaining $10 notes is 4/7 of remaining $5 notes\n    eq2 = Eq(0.4 * num_10, (4/7) * 0.75 * num_5)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (num_5, num_10))\n\n    # Calculate the cost of the bag\n    # 60% of $10 notes spent: num_10 * 10 * 0.6\n    # 25% of $5 notes spent: num_5 * 5 * 0.25\n    cost = solutions[num_10] * 10 * 0.6 + solutions[num_5] * 5 * 0.25\n\n    return cost\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = (12 * 92) + (22 * 82) + (32 * 72)\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for Don's and Ben's original number of stickers\n    don, ben = symbols('don ben')\n\n    # Set up the equations based on the problem statement\n    original_ratio = Eq(don / ben, 2 / 3)\n    new_ratio = Eq((don + 10) / (ben - 5), 6 / 7)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (don, ben))\n\n    # Extract Don's original number of stickers\n    don_initial = solutions[don]\n\n    return don_initial\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = 726 * 8\n    return round(ans, 1)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total_sum = sum(range(2, 2017, 2)) - sum(range(3, 2016, 2))\n    return total_sum\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    difference = amy_toys - sally_toys\n    toys_to_give = difference // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # Since a, b, and c are positive integers and we want to maximize abc,\n    # we would keep two values as close to each other as possible and the third one to be the smallest possible integer.\n    # This is because the product of numbers which are closer to each other tends to be larger given a fixed sum.\n    # We start by assigning 1 to c (smallest possible positive integer)\n    c = 1\n    # Given the sum a + b + c = 31, we now find a and b such that a is as close to b as possible\n    remaining_sum = 31 - c\n    \n    # a and b would ideally be equal, or close to equal, to maximize the product\n    a = remaining_sum // 2\n    b = remaining_sum - a\n    \n    # Calculate the product abc\n    product = a * b * c\n    return product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n\n    return william\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # use the formula for sum of squares: n(n + 1)(2n + 1) / 6\n    # we know that 1^2 + 2^2 + ... + 20^2 = 2870\n    # and we want to calculate 1*3 + 3*5 + ... + 39*41\n    # which is (2*1 - 1)*(2*1 + 1) + (2*2 - 1)*(2*2 + 1) + ... + (2*20 - 1)*(2*20 + 1)\n    # = 4*1*1 - 1 + 4*2*2 - 1 + ... + 4*20*20 - 1\n    # = 4*(1^2 + 2^2 + ... + 20^2) - 20, because there are 20 terms each subtracting 1\n    # = 4*2870 - 20\n\n    result = 4 * 2870 - 20\n    return result\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial as f\n\n    # The triplet sisters are considered as one unit, so we have 5 units to arrange (3 girls as one, 2 boys, and 2 students)\n    # Total arrangements of 5 units = 5!\n    total_arrangements = f(5)\n\n    # The triplet sisters can be arranged among themselves in 3! ways\n    triplet_arrangements = f(3)\n\n    # Total arrangements without any restrictions = 5! * 3!\n    total = total_arrangements * triplet_arrangements\n\n    # Now we calculate the arrangements where twin brothers are together\n    # Consider twin brothers as one unit, so we have 4 units to arrange (brothers as one, the triplet unit, and 2 students)\n    brothers_together = f(4)\n\n    # The twin brothers can arrange among themselves in 2! ways\n    twin_arrangements = f(2)\n\n    # Total arrangements where brothers are together = 4! * 2!\n    total_brothers_together = brothers_together * twin_arrangements * triplet_arrangements\n\n    # Final answer is the total arrangements without restrictions subtracted by the arrangements where brothers are together\n    ans = total - total_brothers_together\n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Since trees are planted on opposite ends, we add two trees at the start and the end, then count how many can be planted in-between.\n    num_trees = 2 + (road_length - 2 * distance_between_trees) // distance_between_trees\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    milk_per_cup = 1 / 6\n    order_cups = 30\n    milk_needed = milk_per_cup * order_cups\n\n    return milk_needed\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            number = int(f\"21{x}{y}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Applying the Pigeonhole Principle\n    least_number = (total_students + days_in_week - 1) // days_in_week\n\n    return least_number\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Since there are 7 days in a week, we can divide 55 by 7\n    # to find out how many complete weeks there are, which will\n    # give us the number of Fridays that occur within those weeks.\n    complete_weeks = 55 // 7\n\n    # Each complete week contains exactly one Friday,\n    # so we start with that number of Fridays.\n    fridays = complete_weeks\n\n    # Now we need to check the remaining days after the complete weeks\n    # If the summer vacation starts on a Friday, then by including the\n    # first day (Friday) and the last possible remaining Friday, we can\n    # have 2 more Fridays in addition to the complete weeks' Fridays.\n    remaining_days = 55 % 7\n\n    # If the remaining_days is greater than or equal to 1, that means there\n    # could be one more Friday at the end of the vacation.\n    # If the remaining_days is equal to 2 and the vacation started on Friday,\n    # there would be yet another Friday on the first day of the vacation.\n    # So we check if remaining_days is 1 or 2 for the maximum Fridays possible.\n    if remaining_days >= 1:\n        fridays += 1\n    if remaining_days >= 2:\n        fridays += 1\n    \n    return fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - (1/2))\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percentage = 20\n    total_girls = 25\n\n    girls_with_glasses = (percentage / 100) * total_girls\n\n    return int(girls_with_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    N = 5  # Since N gives a remainder of 5 when divided by 7, start with 5\n    while True:\n        # Check if N is divisible by all the given numbers\n        if all(N % d == 0 for d in [2, 3, 4, 5, 6, 8, 9]):\n            return N\n        N += 7  # Increment N by 7 to maintain the remainder of 5 when divided by 7\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Given:\n    cost_pencil = 2  # cost of one pencil\n    cost_pen = 4     # cost of one pen\n\n    # The number of pencils Owen should give Oscar for one pen\n    # is the cost ratio between pen and pencil\n    pencils_for_pen = cost_pen / cost_pencil\n\n    return int(pencils_for_pen)\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    # Cost for 1 mug and 1 pen\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n\n    # Total cost for 7 mugs and 5 pens\n    total_cost = (7 * cost_per_mug) + (5 * cost_per_pen)\n\n    # Change from £10\n    change = 10 - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_go_to_cathedral = total_pupils - pupils_away\n    return int(pupils_go_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_child_per_song = 3\n    num_songs = 2\n    num_children = 50\n\n    total_time = time_per_child_per_song * num_songs * num_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_per_apple = weight_of_3_apples / 3\n    weight_of_5_apples = weight_per_apple * 5\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    percent_value = 25 / 100\n    decimal_value = 0.3\n\n    ans = \"0.3\" if decimal_value > percent_value else \"25%\"\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    estimated_years = 5\n\n    # Calculating the final amount if money saved for 5 years with given interest rate\n    calculated_amount_after_5_years = initial_amount * ((1 + interest_rate) ** estimated_years)\n\n    if calculated_amount_after_5_years == final_amount:\n        return \"right\"\n    else:\n        # Calculating the actual number of years\n        years = 0\n        current_amount = initial_amount\n        while current_amount < final_amount:\n            current_amount *= (1 + interest_rate)\n            years += 1\n        return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    # The ratio of loafs of bread to cups of flour is 7:4\n    # To find out how many cups are needed for 35 loafs, set up a proportion\n    loafs_made = 35\n    loafs_per_cups = 7\n    cups_needed = 4\n\n    # Setup the proportion 7 loafs / 4 cups = 35 loafs / x cups\n    x = (cups_needed * loafs_made) / loafs_per_cups\n\n    return x\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n    ans = -1\n    for multiple in range(lcm, 1000, lcm):  # Check multiples up to 1000\n        if str(multiple)[-1] == '2':  # Check if the multiple ends with 2\n            ans = multiple\n            break\n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    total_days = days_in_a_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value_diff = 3 * (10**5) - 3 * (10**2)\n    return value_diff\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume John's rate is j, Jonah's rate is o, and Angus's rate is a.\n    # Each of their rates are in walls per hour.\n    j, o, a = symbols('j o a')\n\n    # The combined work of John, Jonah, and Angus is one wall in 27 hours.\n    equation1 = Eq(j + o + a, 1 / 27)\n\n    # The combined work of Jonah and Angus is one wall in 36 hours.\n    equation2 = Eq(o + a, 1 / 36)\n\n    # Solve the system to get the rates of John, Jonah, and Angus.\n    solutions = solve((equation1, equation2), (j, o, a))\n\n    # John's rate is the total rate minus Jonah and Angus's rate.\n    john_rate = solutions[j]\n\n    # The time John takes to build the wall on his own is the inverse of his rate.\n    john_time = 1 / john_rate\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return pow(2, 17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    # Using the Frobenius Coin Problem to find the largest amount that cannot be paid with coins of 4z and 5z\n    # The formula for the largest number that cannot be obtained with coin denominators a and b (where gcd(a,b) = 1) is given by:\n    # (a * b) - a - b\n    a = 4\n    b = 5\n    largest_nonpayable_total = (a * b) - a - b\n    return largest_nonpayable_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    n = 1001\n    max_d = 1\n    for d in range(1, n + 1):\n        if n % d == 0 and (n // d) <= 10:\n            max_d = d\n    return max_d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # 5 years ago, let Claire's age be 'c' and Daniel's age be 'd'.\n    # Therefore, c + d = 14 (combined ages 5 years ago)\n\n    # In the present, Claire and Daniel are 5 years older, so:\n    # Claire's age now is c + 5, Daniel's age now is d + 5.\n\n    # In 3 years, they will be another 3 years older:\n    # Claire's age in 3 years will be c + 5 + 3, Daniel's age in 3 years will be d + 5 + 3.\n\n    # Combined age in 3 years is (c + 5 + 3) + (d + 5 + 3).\n    # Simplifying gives us c + d + 16.\n\n    # Since we know from 5 years ago that c + d = 14, we substitute:\n    # Combined age in 3 years = 14 + 16.\n    \n    combined_age_in_3_years = 14 + 16\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = int(f\"1082{a}{b}\")\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    \n    length_ribbon1 = 45\n    length_ribbon2 = 30\n    \n    longest_piece = gcd(length_ribbon1, length_ribbon2)\n    \n    return longest_piece\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Create equations based on the problem\n    total_students = Eq(boys + girls, 152)  # Total number of students\n    equal_numbers_after_removal = Eq(boys - boys / 11, girls - 5)  # Number of boys and girls after removal\n\n    # Solve the system of equations\n    solutions = solve((total_students, equal_numbers_after_removal), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    num1 = 475\n    num2 = 138\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, pear = symbols('apple pear')\n    \n    # equations based on the provided information\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n    \n    # solve the equations to find the weight of one apple and one pear\n    solution = solve((equation1, equation2), (apple, pear))\n    \n    # calculate the weight of 4 apples and 4 pears\n    weight = 4 * solution[apple] + 4 * solution[pear]\n    \n    return weight\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    \n    num_boxes = total_pencils // pencils_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    \n    amanda_cathy_total = solutions[amanda] + solutions[cathy]\n    \n    return amanda_cathy_total\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_eggs = 50\n    mature_period = 30\n    total_days = 40\n\n    if total_days < mature_period:\n        # No fleas have matured yet\n        return 0\n    else:\n        # Calculate the days when new eggs were laid that had time to become adults\n        adult_days = total_days - mature_period\n        new_adults = adult_days * daily_eggs\n        return new_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    # We can start by isolating the tilde expression on one side of the equation.\n    # Given equation: (24 - tilde_expression) / 3 = 7\n    # Multiplying both sides by 3 to get rid of the denominator: 24 - tilde_expression = 21\n    # Isolating the tilde_expression: tilde_expression = 24 - 21\n    tilde_expression = 24 - (3 * 7)\n    \n    return tilde_expression\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    only_french_japanese = french_japanese - all_three\n    only_french_italian = french_italian - all_three\n    only_japanese_italian = japanese_italian - all_three\n\n    only_french = french - (french_japanese + french_italian - all_three)\n    only_japanese = japanese - (french_japanese + japanese_italian - all_three)\n    only_italian = italian - (french_italian + japanese_italian - all_three)\n\n    total_people = (\n        only_french + \n        only_japanese + \n        only_italian + \n        only_french_japanese + \n        only_french_italian + \n        only_japanese_italian + \n        all_three\n    )\n\n    return total_people\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    orange_drink_volume = 12\n    water_fraction = 3/4\n    water_volume = orange_drink_volume * water_fraction\n    return water_volume\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    number_of_terms = 22\n    common_difference = 3\n\n    # Formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    total_students = number_of_terms / 2 * (2 * first_term + (number_of_terms - 1) * common_difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    # Start with the highest possible value for the denominator, since b, c, and d can't be 0\n    for abcd in range(9999, 0, -1):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n            \nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1 = Fraction(21*286 + 21, 286)\n    num2 = Fraction(6*2530 + 647, 2530)\n    num3 = Fraction(2829 + 1370, 2829)\n\n    ans = num1 / num2 * num3\n    return ans\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # The number of small cubes along each dimension of the cuboid\n    cubes_on_length = 6\n    cubes_on_width = 10\n    cubes_on_height = 12\n\n    # The total number of cubes on each face of the cuboid\n    # We subtract 2 to exclude the corner cubes that have more than one face painted\n    face_length_width = (cubes_on_length - 2) * (cubes_on_width - 2)\n    face_length_height = (cubes_on_length - 2) * (cubes_on_height - 2)\n    face_width_height = (cubes_on_width - 2) * (cubes_on_height - 2)\n    \n    # Since the cuboid have three distinct \"faces\" that could be painted, we multiply by 2\n    total_painted_cubes = 2 * (face_length_width + face_length_height + face_width_height)\n\n    return total_painted_cubes\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    percentage = 30\n    total = 1600\n    \n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59   # in pounds\n\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n    return remaining_money\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # s for Star's work rate (job/hour)\n    # n for Nini's work rate (job/hour)\n    s, n = symbols('s n')\n    \n    # If Star works for 5 hours and Nini for 20 hours, the job is finished\n    equation1 = Eq(5 * s + 20 * n, 1)\n    \n    # If Star works for 20 hours and Nini for 8 hours, the job is also finished\n    equation2 = Eq(20 * s + 8 * n, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Calculate the time it takes for Nini to finish the job by herself\n    time_for_nini = 1 / solutions[n] # since work = rate * time, time = work / rate\n\n    return time_for_nini\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbol for Anne's apples\n    anne = symbols('anne')\n\n    # Maria has 20 apples more than Anne\n    maria = anne + 20\n\n    # Equation for the total number of apples\n    total_apples_eq = Eq(anne + maria, 44)\n\n    # Solve for Anne's apples\n    anne_apples = solve(total_apples_eq, anne)\n\n    return anne_apples[0]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # First, we need to find all odd divisors of 140.\n    # 140 = 2^2 * 5 * 7\n    # Since we need odd divisors, only factors of 5 and 7 are considered (ignore 2^2).\n    \n    # Prime factorization of 140, ignoring even factors, gives us 5 and 7.\n    # To find the number of odd divisors, we need to consider the number of ways\n    # in which we can use powers of the prime factors (including the power 0).\n    # Number of ways = (exponent of 5 + 1) * (exponent of 7 + 1)\n    # Since 5^1 and 7^1 are the only prime factors (and we include 5^0 and 7^0),\n    # there are (1 + 1) * (1 + 1) ways to choose the odd divisors.\n    \n    # Therefore, there are 2 * 2 = 4 ways to choose the odd divisors.\n    num_ways = (1 + 1) * (1 + 1)\n    return num_ways\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Total number of keys\n    total_keys = 20\n    # Total number of classrooms\n    total_classrooms = 20\n    # In the worst case scenario, the warden tries every key for each classroom.\n    # For the first classroom, he tries 20 keys, for the second classroom 19 keys, and so on.\n    # Therefore, the total number of tries is the sum of the first 20 natural numbers minus 1 (since the last key will automatically match the last classroom).\n    num_tries = sum(range(1, total_classrooms+1)) - 1\n    return num_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks look like this: A = 20, B = 16\n    # Jerry must now take stones in such a way that leaves Tom without a winning strategy.\n    # To guarantee a win, Jerry should aim to leave the two stacks with equal number of stones.\n    # This would mean that whatever move Tom makes, Jerry can always mirror the move on the other stack\n    # and keep the number of stones in each stack equal until the last move.\n    # Since Jerry is the next to play, he should take 4 stones from Stack A to balance the stacks.\n    jerry_stack = 'A'\n    jerry_stone = 4\n\n    return f\"Jerry must take {jerry_stone} stone(s) from Stack {jerry_stack}.\"\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet of newspaper has 2 pages at the front and 2 pages at the back\n    # When taking the third sheet, it means it's pages: 5 and 6 on the front, 7 and 8 on the back\n    # Just add these page numbers together.\n    page_numbers_sum = 5 + 6 + 7 + 8\n    return page_numbers_sum\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017/2018) + (20172017/20182018)\n    denominator = 201720172017/201820182018\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2  # 2 peaches for 3 apples, so it's 1.5 apples per peach\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    digits_per_page = 1\n    number_of_pages = 0\n\n    while total_digits > 0:\n        pages_in_this_range = 9 * (10 ** (digits_per_page - 1))\n        digits_needed = pages_in_this_range * digits_per_page\n\n        if total_digits >= digits_needed:\n            total_digits -= digits_needed\n            number_of_pages += pages_in_this_range\n        else:\n            number_of_pages += total_digits // digits_per_page\n            break\n\n        digits_per_page += 1\n\n    return number_of_pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cups = 30 + 50 + 20\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    average_cost = total_cost / total_cups\n    return average_cost\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    \n    for n in range(1, 92):\n        total_digits += len(str(n))\n    \n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time_hour = 9\n    start_time_minute = 15\n    end_time_hour = 11\n    end_time_minute = 6\n\n    start_minutes = start_time_hour * 60 + start_time_minute\n    end_minutes = end_time_hour * 60 + end_time_minute\n\n    duration_minutes = end_minutes - start_minutes\n\n    return duration_minutes\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n    side_length = 1\n    \n    while True:\n        if side_length % 2 == 0:\n            girls = side_length**2\n            boys = (side_length + 2)**2\n        else:\n            boys = side_length**2\n            girls = (side_length - 2)**2\n            \n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n        side_length += 1\n    \n    return total_students\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial number of pens of each colour in Box A\n    blue_A = 10\n    red_A = 15\n    black_A = 20\n    green_A = 25\n    \n    # Number of pens transferred from A to B\n    transferred = 20\n    \n    # Since Jane wants at least 15 pens of each colour in Box A,\n    # we start by returning pens until the colour with the least amount exceeds 15.\n    # Box A will have 15 pens of each colour only if red and blue have 15 pens,\n    # because we start with 10 blue and 15 red and we must transfer 20 out.\n    \n    # We transfer 20 pens, but we don't know the distribution, let's find the worst case.\n    # Worst case: all transferred pens are blue and/or red.\n    \n    # If all 20 transferred pens are red or blue, Jane needs to get back 5 blue pens to make it 15.\n    # After that, Jane will need to return the other 15 pens, but since each box starts with an\n    # equal number of pens of each colour, it doesn't matter which pens they are.\n    \n    # Hence, Jane needs to return at least 5 blue pens to get 15 blue pens in Box A.\n    pens_to_return = 5\n\n    return pens_to_return\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    decimal_value = 1 / 8\n    return decimal_value\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centre_chocolates = 16\n    \n    # All milk chocolates should have soft-centres to maximize the number of soft-centred plain chocolates\n    soft_centre_milk = min(milk_chocolates, soft_centre_chocolates)\n    \n    # Calculate the remaining soft-centred chocolates if all milk chocolates have soft-centres\n    soft_centre_plain = soft_centre_chocolates - soft_centre_milk\n    \n    # Since plain chocolates cannot exceed their total number\n    soft_centre_plain = min(soft_centre_plain, plain_chocolates)\n    \n    return soft_centre_plain\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'd' be the dividend and 'v' be the divisor.\n    d, v = symbols('d v')\n    \n    # The quotient is 29, so the dividend equals to the divisor times the quotient plus the remainder.\n    equation1 = Eq(d, v * 29 + 11)\n    \n    # The sum of the dividend and the divisor is 431.\n    equation2 = Eq(d + v, 431)\n    \n    # Solving the equations to find the values of d and v\n    solutions = solve((equation1, equation2), (d, v))\n    \n    dividend = solutions[d]\n    divisor = solutions[v]\n    \n    # Calculate the difference between the dividend and the divisor\n    difference = abs(dividend - divisor)\n    \n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percent_violin = 12.5 / 100\n    num_violin_pupils = 11\n\n    total_pupils = num_violin_pupils / percent_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of 1p, 2p, 5p, and 10p coins\n    x = symbols('x')\n\n    # Set up the equation\n    # 1*x + 2*x + 5*x + 10*x = 90\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Calculate total number of coins\n    total_coins = solution[x] * 4\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols representing the number of apples and pears\n    apples, pears = symbols('apples pears')\n\n    # The total number of apples and pears initially\n    total_fruits = Eq(apples + pears, 105)\n\n    # After selling 1/3 of the apples and 2/5 of the pears, the ratio of the remaining\n    # apples to pears is 5/6\n    remaining_fruits_ratio = Eq((apples - apples / 3) * 6, (pears - pears * 2 / 5) * 5)\n\n    # Solve the system of equations\n    solutions = solve((total_fruits, remaining_fruits_ratio), (apples, pears))\n    \n    # Calculate the total number of apples and pears sold\n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n    total_sold = apples_sold + pears_sold\n\n    return total_sold\n\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s = total stickers, p = number of pupils\n    s, p = symbols('s p')\n\n    # Equation when giving 13 stickers each: s = 13p + 190\n    equation1 = Eq(s, 13 * p + 190)\n\n    # Equation when giving 17 stickers each: s = 17p + 50\n    equation2 = Eq(s, 17 * p + 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, p))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    ratio_eq = Eq(B/A, 5/4) & Eq(C/B, 6/5)\n    diff_eq = Eq(C - A, 10)\n\n    solutions = solve((ratio_eq, diff_eq), (A, B, C))\n    \n    A_val = solutions[A]\n    B_val = solutions[B]\n    C_val = solutions[C]\n\n    return A_val + B_val + C_val\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat students A, B, C, and D as a single unit since they must be together.\n    # There are 12 - 4 + 1 = 9 units to arrange (8 individual students + 1 unit of 4 students).\n    units_to_arrange = 12 - 4 + 1\n\n    # Calculate permutations for these 9 units.\n    permutations_of_units = factorial(units_to_arrange)\n\n    # The students A, B, C, and D can be arranged among themselves in 4! ways.\n    permutations_within_unit = factorial(4)\n\n    # Total permutations is the product of permutations of the units and permutations within the unit.\n    total_permutations = permutations_of_units * permutations_within_unit\n\n    return total_permutations\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total games played\n    games_played = 6 * (6 - 1) // 2  # Formula: n * (n - 1) / 2\n\n    # Total points distributed (2 points for each game)\n    total_points = games_played * 2\n\n    # Sum of points of five students\n    sum_of_five_students = 7 + 6 + 5 + 4 + 3\n\n    # Points of the remaining student\n    remaining_student_points = total_points - sum_of_five_students\n\n    return remaining_student_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # Original ratio\n    equation1 = Eq(A / B, 5/3)\n    \n    # After transferring 10 grams\n    equation2 = Eq((A - 10) / (B + 10), 7/5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Total weight of both bags\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n    girls_per_boy = 1 / boys_to_girls_ratio\n    number_of_girls = number_of_boys * girls_per_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    first_term = 22\n    last_term = 62\n    total_players = 378\n    \n    # Calculate the number of terms n using the formula for the sum of an arithmetic sequence:\n    # total_players = n/2 * (first_term + last_term)\n    # Therefore, n = 2 * total_players / (first_term + last_term)\n    n = 2 * total_players // (first_term + last_term)\n\n    # Calculate the common difference d using the formula:\n    # last_term = first_term + (n - 1)*d\n    # Therefore, d = (last_term - first_term) / (n - 1)\n    d = (last_term - first_term) // (n - 1)\n\n    return d\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 200 + 1):\n        if num % 3 == 2 and num % 5 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    factors = [48, 925, 38, 435]\n    product = 1\n    for factor in factors:\n        product *= factor\n    \n    product_str = str(product)\n    ans = len(product_str) - len(product_str.rstrip('0'))\n    return ans\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]  # all masses converted to grams\n    max_mass = max(masses)\n    \n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "from sympy import Rational\n\ndef solution():\n    p_bark_given_theft = Rational(9, 10)  # Probability that the dog barks when a thief is around\n    days_in_week = 7\n    weeks_in_1000_days = 1000 / days_in_week\n    bark_times_per_week = 3\n\n    # Probability that the dog barks on any given night P(Bark)\n    p_bark = Rational(bark_times_per_week * p_bark_given_theft, weeks_in_1000_days)\n\n    # Probability that the dog barks during the occurrence of theft P(Bark|Theft)\n    p_bark_during_theft = p_bark_given_theft * p_bark\n\n    return p_bark_during_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_fraction = 6 / 11\n    girls_count = total_children * girls_fraction\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    stickers, pupils = symbols('stickers pupils')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (stickers, pupils))\n    \n    # Extract the number of stickers\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Since we want the smallest possible difference, we should make the two numbers as close as possible.\n    # We arrange the numbers in ascending order for one number, and as descending order for another number.\n    # Example: 123456789 (smallest) and 987654321 (largest)\n    # But we want different numbers, so the next closest arrangement would be to switch the last two digits.\n    # So the second smallest number would be 123456798.\n    \n    smallest_number = int(\"\".join(str(digit) for digit in range(1, 10)))\n    second_smallest_number = int(\"\".join(str(digit) for digit in range(1, 9)) + str(9))\n    \n    # The difference between the smallest and second smallest number:\n    difference = second_smallest_number - smallest_number\n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of girls be g, and the number of boys be g - 65\n    g = symbols('g')\n\n    # After 2/5 of the boys and 3/7 of the girls left the hall, the number of girls and boys are equal\n    # Therefore, (g - 65) - 2/5 * (g - 65) = g - 3/7 * g\n    equation = Eq((g - 65) - 2/5 * (g - 65), g - 3/7 * g)\n\n    # Solve for g, the number of girls\n    number_of_girls = solve(equation, g)[0]\n\n    # Calculate the number of boys originally\n    number_of_boys = number_of_girls - 65\n\n    # Calculate the number of boys and girls left in the hall\n    boys_left = number_of_boys - (2/5 * number_of_boys)\n    girls_left = number_of_girls - (3/7 * number_of_girls)\n\n    # Calculate the total number of students left in the hall\n    total_students_left = boys_left + girls_left\n\n    return total_students_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    # Let x be the total number of bricks at first.\n    # Let y be the number of bricks moved on the first trip.\n    # y = (x / 2) - 26 -> the first trip\n    # (x - y) / 2 + 11 -> the second trip\n    # 68 -> the third trip\n    # 25 are left unmoved.\n    # The equation for the final number of bricks is: y + ((x - y) / 2 + 11) + 68 + 25 = x\n    \n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    x = symbols('x')\n    \n    # Define the equations based on the problem\n    y = (x / 2) - 26\n    equation = Eq(y + ((x - y) / 2 + 11) + 68 + 25, x)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Since we assume that the number of bricks is a whole number, we return the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9, 2412 % 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(boys, girls + 90)\n    total_pupils = girls + boys\n    girls_swim = girls * 31 / (31 + 49)\n    girls_cannot_swim = girls - girls_swim\n    boys_swim = boys * (120 / 240)\n    boys_cannot_swim = boys - boys_swim\n    equation2 = Eq(total_pupils, 1690)\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    girls_cannot_swim_num = solutions[girls] * 49 / (31 + 49)\n    boys_cannot_swim_num = 2 * solutions[boys] / 3\n    pupils_cannot_swim = girls_cannot_swim_num + boys_cannot_swim_num\n    return round(pupils_cannot_swim)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Mike's position as the 2nd in line indicates he's next to either a corner or another student.\n    # If it's a square array, the numbers of desks and chairs are equal: n * n = number of students,\n    # and his position being the 2nd means that n must be at least 2.\n    # We start checking from 3 (as 1 and 2 would mean he isn't the 2nd), and find the count of such square arrays.\n    # Since this is an assignment task, it likely has a single answer, so we aim to find just one square that satisfies these conditions.\n    \n    for n in range(3, 1000):  # Assumed reasonable upper limit for a class size.\n        total_students = n * n\n        # The 2nd in line condition means that removing a row and a column would leave a square one smaller on each side.\n        if (n - 1) * (n - 1) + 1 == total_students:\n            return total_students  # The first solution found will be returned.\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let x be the current age of Geoff and y be the current age of his sister.\n    # According to the problem, we have x + y = 22.\n    # After n years, their ages will be x + n and y + n respectively.\n    # We want to find n such that (x + n) + (y + n) = 40.\n    # Simplifying, we get 2n + (x + y) = 40.\n    # Since x + y = 22, we substitute it in the equation to get 2n + 22 = 40.\n    # Solving for n, we get 2n = 40 - 22, which gives n = 18 / 2 or n = 9.\n    \n    return 9\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    min_divisor = 1\n\n    min_dividend = min_divisor * quotient + remainder\n    \n    return min_dividend\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary to store the number of ways to get to each step\n    ways_to_step = {0: 1, 1: 0}  # He can't get to step 1 with jumps of 2 or 3\n    \n    # Calculate ways to get to each step up to and including 10\n    for step in range(2, 11):\n        # The number of ways to get to the current step is the sum of the ways to get\n        # to the two preceding steps that he could have jumped from (step-2 and step-3)\n        ways_to_step[step] = ways_to_step.get(step-2, 0) + ways_to_step.get(step-3, 0)\n        \n    return ways_to_step[10]\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = '1998'\n    n = len(number)\n    while int(number * (n // 4)) % 33 != 0:\n        n += 4\n    return n\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # This is a system of linear equations problem where we need to find values of a, b, c, d\n    # that satisfy the conditions for the combination lock.\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a, b, c, d = symbols('a b c d', integer=True)\n\n    # Define the range for the digits (0-9)\n    condition = (a >= 0) & (a <= 9) & (b >= 0) & (b <= 9) & (c >= 0) & (c <= 9) & (d >= 0) & (d <= 9)\n\n    # Define the original number and the new number after switching digits\n    original_number = 1000*a + 100*b + 10*c + d\n    new_number = 1000*d + 100*b + 10*c + a\n\n    # Define the equation that relates the original number and new number\n    equation = Eq(new_number - original_number, 5877)\n\n    # Solve the equation with the given condition for the value of digits\n    solutions = solve((equation, condition), (a, b, c, d))\n\n    # Calculate the original combination number from the solution\n    combination_number = 1000*solutions[a][0] + 100*solutions[b][0] + 10*solutions[c][0] + solutions[d][0]\n\n    return combination_number\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_number = group_number\n    second_number = first_number ** 2\n    third_number = second_number * group_number\n    \n    return first_number + second_number + third_number\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_run = 1/4\n    total_distance = 3.75\n\n    number_of_runs = total_distance / distance_per_run\n\n    return number_of_runs\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = total_boys / boys_to_girls_ratio\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):  # Check for three-digit integers\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num  # Return the first number which satisfies all conditions\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # From the proportion 10:x = 14:21, we can cross-multiply to find x\n    # 10 * 21 = 14 * x\n    # x = (10 * 21) / 14\n    x = (10 * 21) // 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100, 6):  # Starts at 10, ends before 100, step by multiple of 6\n        if number % 9 == 0 and str(number).endswith('0'):  # Check if multiple of 9 and ends with 0\n            return number\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    initial_number = 5832\n    tens_to_add = 7 * 10\n    correct_answer = initial_number + tens_to_add\n    johnny_answer = 5839\n    return johnny_answer == correct_answer, correct_answer\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    return math.factorial(3)\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    sum_target = 27\n    max_number = 1\n    while sum(range(1, max_number + 1)) <= sum_target:\n        max_number += 1\n    return max_number - 1\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # 3m converted to cm\n    lengths_cm = [147, 32.5, 67]  # given lengths in cm\n    sum_of_known_lengths = sum(lengths_cm)\n    fourth_length_cm = total_length_cm - sum_of_known_lengths\n    return fourth_length_cm\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    num_papers = 18\n    interval = 3\n    num_leaves = num_papers // interval\n    return num_leaves\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    # Applying the distributive property\n    # (a + b + c)(b + c + d) - (a + b + c + d)(b + c)\n    # = (a + b + c)(b + c) + (a + b + c)d - (a + b + c + d)(b + c)\n    # = (a + b + c)d - (a + b + c + d)\n    \n    a, b, c, d = 101, 234, 567, 89\n    \n    part1 = (a + b + c) * (b + c)\n    part2 = (a + b + c) * d\n    part3 = (a + b + c + d) * (b + c)\n    \n    ans = part2 - d\n    \n    return ans\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Calculate the probability for each possible outcome\n    prob_0_pass = (1 - 0.5) * (1 - 0.4) * (1 - 0.2)  # Probability that no one passes\n    prob_1_pass = 0.5 * (1 - 0.4) * (1 - 0.2) + (1 - 0.5) * 0.4 * (1 - 0.2) + (1 - 0.5) * (1 - 0.4) * 0.2  # Probability that one person passes\n    prob_2_pass = 0.5 * 0.4 * (1 - 0.2) + 0.5 * (1 - 0.4) * 0.2 + (1 - 0.5) * 0.4 * 0.2  # Probability that two people pass\n    prob_3_pass = 0.5 * 0.4 * 0.2  # Probability that all three pass\n\n    # Find the maximum probability outcome\n    probabilities = {0: prob_0_pass, 1: prob_1_pass, 2: prob_2_pass, 3: prob_3_pass}\n    most_likely_pass = max(probabilities, key=probabilities.get)\n\n    return most_likely_pass\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1\n    for i in range(2, 11):\n        ans += (i-1) * (1/i)\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    # Let w be the number of watches and c be the number of caps originally.\n    # From the given problem we have the following system of equations:\n    # w/c = 8/11 -> Equation (1), which implies that 11w = 8c\n    # (w/(c - 88)) = 12/11 -> Equation (2), which implies that 11w = 12(c - 88)\n\n    # We can solve this system of equations using sympy's solve function.\n    from sympy import symbols, Eq, solve\n    w, c = symbols('w c')\n\n    equation1 = Eq(11*w, 8*c)\n    equation2 = Eq(11*w, 12*(c - 88))\n\n    # Use sympy's solve function to find the values of w and c\n    solutions = solve((equation1, equation2), (w, c))\n\n    # The number of watches at the stall is the value of w\n    return solutions[w]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time taken to travel past 5 intervals (from first house to sixth house)\n    time_for_5_intervals = 30\n    \n    # Total intervals for 10 houses is 9 intervals (10 houses will have 9 spaces between them)\n    total_intervals = 9\n    \n    # Time for 9 intervals (all 10 houses) will be (9/5) times the time for 5 intervals\n    total_time = (time_for_5_intervals * total_intervals) / 5\n    \n    return total_time\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10, 4):  # D must be a multiple of 4\n            if A == D / 4:\n                for B in range(0, 10):\n                    if B == A - 1:\n                        for C in range(0, 10):\n                            if C != A and C != B and C != D:\n                                ABCD = 1000 * A + 100 * B + 10 * C + D\n                                DCBA = 1000 * D + 100 * C + 10 * B + A\n                                if ABCD * 4 == DCBA:\n                                    return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05\n    total_length_cm = total_length_m * 100  # Convert meters to centimeters\n    longer_piece_cm = (2/3) * total_length_cm\n\n    return longer_piece_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n    \n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n    \n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    for jack_first_turn in range(1, 12):\n        # After Jack's first turn, the number of coins left should be in a state where\n        # no matter how Ken plays, Jack can always leave a multiple of 12 for Ken.\n        # This is because with 12 possible moves, Jack can always play to adjust\n        # the remaining coins to a multiple of 12 after Ken's turn.\n        # The total coins after Jack's turn should be 2015 - jack_first_turn.\n        # We need to find a number where (2015 - jack_first_turn) % (11 + 1) == 0\n\n        if (2015 - jack_first_turn) % 12 == 0:\n            return jack_first_turn\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin (0,0), b = 0.\n    # Now we use the other point (4, 8) to find the slope m.\n    # m = delta_y / delta_x = (y2 - y1) / (x2 - x1)\n    x1, y1 = 0, 0\n    x2, y2 = 4, 8\n\n    # Calculate the slope m\n    m = (y2 - y1) / (x2 - x1)\n\n    # Since b = 0, the equation of the line is simply y = mx\n    # We return a string representation of the equation\n    return f'y={m}x'\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    black, white = 1, 2  # number of black and white balls in the smallest repeating pattern '●○○'\n    pattern_total = black + white  # total number of balls in the smallest repeating pattern\n    white_balls = 92  # given number of white balls\n    patterns = white_balls // white  # number of complete patterns\n    total_balls = patterns * pattern_total  # total number of balls in complete patterns\n\n    # If there are remaining white balls not fitting in a complete pattern\n    remaining_white_balls = white_balls % white\n    if remaining_white_balls > 0:\n        total_balls += remaining_white_balls + (1 if remaining_white_balls == 1 else 0)\n\n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    # Count occurrences when '4' is in the hour\n    for hour in range(24):\n        if '4' in str(hour):\n            count += 60  # For each instance, 60 minutes of occurrences\n        else:\n            # Count occurrences when '4' is in the minutes\n            for minute in range(60):\n                if '4' in str(minute):\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    def transform_number(num):\n        transformation = 0\n        while num > 9:\n            num = sum_of_digits(num)\n            transformation += 1\n        return transformation\n    \n    ans = transform_number(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Since the youngest three add up to 42 years and are born in consecutive years,\n    # their ages form an arithmetic sequence with a common difference of 1 year.\n    # Let the age of the middle one of the youngest three be x.\n    # Then the ages are (x-1), x, (x+1) and sum to 42.\n    # Hence 3x = 42\n    x = 42 // 3  # Age of the middle dwarf of the youngest three\n\n    # Since the dwarfs are born in consecutive years, the oldest one is 6 years older than the middle dwarf of the youngest three.\n    age_oldest = x + 6\n    return age_oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    return 78 + 263 - 174\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    import math\n    ans = math.gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_second_stop = 22\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shortened_length_mm = 4\n\n    shortened_length_cm = shortened_length_mm / 10\n\n    new_length_cm = original_length_cm - shortened_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    # Assigning symbols to unknown variables\n    from sympy import symbols, Eq, solve\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(sam, peter * (7/5))                  # Ratio of Sam's to Peter's stickers\n    equation2 = Eq(john_final, john_initial * 1.8)      # John's stickers increased by 80%\n    equation3 = Eq(john_final, sam - 20 + sam * 0.2)    # Sam's final stickers + what he gave to John\n    equation4 = Eq(john_final, john_initial + peter * 0.2) # John's final stickers with what Peter gave\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_initial, john_final))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Distance covered in each part of the race\n    distance_first_part = 420\n    distance_middle_part = 620\n    distance_last_part = 1200 - (distance_first_part + distance_middle_part)\n\n    # Speed in meters per second for each part of the race\n    speed_first_part = 7\n    speed_middle_part = 5\n    speed_last_part = 8\n\n    # Time spent on each part of the race in seconds\n    time_first_part = distance_first_part / speed_first_part\n    time_middle_part = distance_middle_part / speed_middle_part\n    time_last_part = distance_last_part / speed_last_part\n\n    # Total time spent on the race\n    total_time = time_first_part + time_middle_part + time_last_part\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Define symbols for the unknown number of tests (n) and their total score (total)\n    n, total = symbols('n total')\n    \n    # Equation for Paul's current total score from 4 tests with an average of 89\n    current_total = 4 * 89\n    \n    # Equation for the desired average score of 95 after taking more tests\n    desired_avg_eq = Eq((current_total + total) / (4 + n), 95)\n    \n    # Equation for the full score for each additional test\n    full_score_eq = Eq(total, 100 * n)\n    \n    # Solve the system of equations\n    solutions = solve((desired_avg_eq, full_score_eq), (n, total))\n\n    # Extract the minimum number of tests needed from the solutions, as a ceiling value\n    min_tests = solutions[n].evalf()\n    if int(min_tests) != min_tests: # If not an integer, round up\n        min_tests = int(min_tests) + 1\n    else:\n        min_tests = int(min_tests)\n\n    return min_tests\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of $10 notes and y as the number of $2 notes.\n    x, y = symbols('x y')\n\n    # Total notes equation\n    total_notes_eq = Eq(x + y, 72)\n\n    # After spending 90% of the $10 notes and 75% of the $2 notes\n    spent_10_eq = Eq(x - 0.9*x, 2*(y - 0.75*y))\n    spent_2_eq = Eq(y - 0.75*y, (x - 0.9*x)/2)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_10_eq), (x, y))\n\n    # Calculate the number of notes left\n    x_left = solutions[x] * 0.1\n    y_left = solutions[y] * 0.25\n\n    # Calculate the amount spent for the gift\n    spent_for_gift = (solutions[x] * 10 * 0.9) + (solutions[y] * 2 * 0.75)\n    \n    return spent_for_gift\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A, B, and C be the rates of filling the pool per hour for hoses A, B, and C respectively\n    A, B, C = symbols('A B C')\n\n    # Equations based on given problem statements\n    equation1 = Eq(1/A + 1/B, 1/9)\n    equation2 = Eq(1/A + 1/C, 1/12)\n    equation3 = Eq(1/B + 1/C, 1/18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Use either solution (A, B, or C) to find the combined rate when all hoses are on\n    # Here, choosing the solution for rate B\n    combined_rate = 1/solutions[B][0] + 1/solutions[C][0] + 1/solutions[A][0]\n\n    # Time taken if all three hoses are turned on\n    time_taken = 1 / combined_rate\n    return time_taken\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Pigeonhole principle: To be sure of having at least 2 markers of the same color,\n    # we must take out one more marker than the number of different colors.\n    num_colors = 3  # red, yellow, blue\n    markers_needed = num_colors + 1  # one more than the number of colors\n\n    return markers_needed\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Define the total number of notes and total amount.\n    total_notes = 58\n    total_amount = 164\n    \n    # Let x be the number of $5 notes and (total_notes - x) be the number of $2 notes.\n    # We have the equation: 5x + 2(total_notes - x) = total_amount\n    \n    # Loop through possible values of x to find a solution.\n    for x in range(total_notes + 1):\n        if 5*x + 2*(total_notes - x) == total_amount:\n            return x\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    nth_term = 7\n    first_known = 105\n    common_difference = 120 - 105\n\n    nth_value = first_known + (100 - nth_term) * common_difference \n\n    return nth_value\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from fractions import Fraction\n\n    # Total amount spent on all cupcakes\n    total_cupcakes = 187.50\n    \n    # Fraction of money spent on first purchase\n    first_purchase_fraction = Fraction(5, 9)\n    \n    # Fraction of money spent on second purchase of cupcakes\n    second_purchase_fraction = Fraction(1, 6)\n    \n    # Calculate the amount spent on the second purchase (all went to cupcakes)\n    second_purchase_cupcakes = total_cupcakes * second_purchase_fraction / (first_purchase_fraction + second_purchase_fraction)\n    \n    # Deduct the second purchase amount from the total amount to get the amount spent in the first purchase\n    first_purchase = total_cupcakes - second_purchase_cupcakes\n    \n    # Given: The price of one cupcake is thrice as much as the price of one muffin.\n    # Let the price of one muffin be x, then the price of one cupcake is 3x.\n    # She bought 36 cupcakes and 32 muffins.\n    # Equation: 36 * 3x + 32 * x = first_purchase\n    # Solve for x to find out the price of one muffin.\n    x = first_purchase / (36 * 3 + 32)\n\n    # Calculate the total amount spent on muffins\n    muffins_cost = 32 * x\n\n    return round(muffins_cost, 2)\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # To find the smallest number of marbles Celeste can have, we need to use the\n    # smallest even numbers, but ensure that two boxes have the same number of marbles.\n\n    # Since each box has at least 2 marbles and there are 10 boxes, start with the first 9 even numbers.\n    marbles = list(range(2, 2*9+1, 2))  # 2, 4, 6, ..., 18\n\n    # Two boxes must contain the same number of marbles, so we use the smallest possible number again (which is 2).\n    marbles.append(2)  # Add another box with 2 marbles\n\n    # Calculate the sum of marbles which is the answer to the number of marbles Celeste can have.\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    # Calculate using the pigeonhole principle\n    pigeons_in_most_crowded_cage = (total_pigeons + total_cages - 1) // total_cages\n\n    return pigeons_in_most_crowded_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # As we need a sprinkler between each pair of parterres,\n    # the total number of sprinklers required is one less than\n    # the number of parterres.\n    num_parterres = 1007\n    # Since each sprinkler is shared by two parterres (except for the first and last),\n    # the number of sprinklers needed is the number of parterres minus 1.\n    num_sprinklers = num_parterres - 1\n\n    return num_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    mass_papaya = 2 + 1/4\n    mass_jackfruit = 3 * mass_papaya\n\n    total_mass = mass_papaya + mass_jackfruit\n    correct_answer = total_mass\n\n    james_error = False if total_mass == 3 else True\n\n    return correct_answer, james_error\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            return current_steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    halfway = (387 + 729) / 2\n\n    return int(halfway)\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n\n    # Equation representing the initial relationship between Marry's and Alexis's stickers\n    equation1 = Eq(marry, (7/5) * alexis)\n\n    # Marry and Alexis gave 20% of their stickers to Charlotte, Charlotte's stickers increased by 80%\n    equation2 = Eq(charlotte_final, charlotte_initial + (0.2 * marry) + (0.2 * alexis))\n\n    # Equation representing Charlotte's sticker increase by 80%\n    equation3 = Eq(charlotte_final, 1.8 * charlotte_initial)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    equation4 = Eq(marry - 0.2 * marry, charlotte_final + 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_initial, charlotte_final))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n    first_day = 8\n    second_day = total_length / 6 + 4\n\n    equation = Eq(first_day + second_day, total_length * 5 / 12)\n\n    total_length_solution = solve(equation, total_length)\n\n    return total_length_solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Total length of the sides of the field without the corners\n    total_length = (2 * 144) + (2 * 204) - 4 # subtract 4 for the corners\n    \n    # Number of intervals between the wheats is total wheats minus 1,\n    # But since each corner is also counted as one wheat, we subtract 4 from the\n    # total number of wheats to avoid counting corners twice.\n    num_intervals = 116 - 4 - 1\n    \n    # Distance between two wheat plants\n    distance = total_length / num_intervals\n    \n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        if sum(map(int, str(num))) == 35 and str(num).endswith('35'):\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Given that after giving away 440 bottle caps, Justin had 5/9 of his collection left\n    # Let's denote the original number of bottle caps as x.\n    # When 440 bottle caps are given away, the remaining bottle caps are x - 440.\n    # According to the problem, the remaining bottle caps (x - 440) are (5/9) of the original bottle caps (x).\n    # So, we have the equation (x - 440) = (5/9) * x\n    # We can now solve for x.\n\n    # We have x - (5/9)x = 440\n    # which simplifies to (4/9)x = 440\n    # finally, x = 440 * (9/4)\n    x = 440 * (9/4)\n    return int(x)\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    for rainy_days in range(total_days + 1):\n        sunny_days = total_days - rainy_days\n        nuts_harvested = sunny_days * sunny_nuts + rainy_days * rainy_nuts\n        if nuts_harvested == total_nuts:\n            return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence for easier calculations\n    single_bottle_price = 15\n    double_bottle_price = 28\n    five_bottle_pack_price = 60\n\n    # Number of bottles Ben wants to buy\n    bottles_wanted = 17\n    \n    # Initialize minimum cost to a large number\n    min_cost = float('inf')\n\n    # Check all possible combinations of single, double, and pack purchases\n    for five_packs in range(bottles_wanted//5 + 1):\n        for double_packs in range((bottles_wanted - five_packs*5)//2 + 1):\n            single_bottles = bottles_wanted - five_packs*5 - double_packs*2\n            # Calculate total cost for the current combination\n            total_cost = (five_packs * five_bottle_pack_price +\n                          double_packs * double_bottle_price +\n                          single_bottles * single_bottle_price)\n            # Update the minimum cost found so far\n            if total_cost < min_cost:\n                min_cost = total_cost\n\n    # Convert the minimum cost to pounds from pence\n    min_cost_pounds = min_cost / 100\n\n    return min_cost_pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # For four people, we will need to determine the number of rounds as follows:\n    # In a knockout tournament, each round halves the number of players until one is left.\n    # Initially there are 4 players, so we can start counting the rounds required.\n    \n    players = 4\n    rounds = 0\n    \n    # Since each round a game is played between two players and one is knocked out,\n    # we continue until there is only one player left.\n    while players > 1:\n        rounds += 1\n        players /= 2  # Each round halves the number of players.\n    \n    return rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    only_first_question = 10 - 7\n    only_second_question = 15 - 7\n    one_question_correctly = only_first_question + only_second_question\n    return one_question_correctly\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    \n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 pieces, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # They both eat 8 candies, Rachel has 3 times more than Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total amount of candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42 # m/s\n    time = 5 # seconds\n\n    # Since Distance = Speed * Time\n    train_length = speed * time\n\n    return train_length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    for _ in range(7):\n        a, b = b, a + b\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = [\n        '285+(15/5)-2', '(285+15)/5-2', '(285+15/5)-2', '285+15/(5-2)',\n        '(285+15)/(5-2)', '285+(15/(5-2))', '(285)+(15/5)-2'\n    ]\n    \n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n        \n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    for brushes in range(1, 10 // 3):\n        towels = (59 - (brushes * 3)) / 10\n        if towels.is_integer():\n            return brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_bears = 35\n    days = 5\n    # Let the number of bears made on the first day be x\n    # Then the total number of bears over 5 days is:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8)\n    # 5x + 20 = total_bears\n    # Solve for x:\n    x = (total_bears - 20) / days\n\n    # The number of teddy bears made on the fifth day is:\n    fifth_day_bears = x + 8\n    \n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    # Let's define the number Verity thinks of as x\n    # According to the problem x * 7 + 8 = 71\n    # We need to perform inverse operations to solve for x\n    # First, we subtract 8 from both sides of the equation\n    result_after_subtraction = 71 - 8\n    # Then, we divide by 7 to get x\n    x = result_after_subtraction / 7\n    return x\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    count = 0\n    # Loop through each position\n    for hundreds in [1, 8]:  # The hundreds place can't be 0\n        for tens in [0, 1, 8]:\n            for ones in [0, 1, 8]:\n                # If all digits are unique\n                if hundreds != tens and hundreds != ones and tens != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n    # Draw all pink and grey marbles, then one more to ensure we get a blue\n    return pink + grey + 1\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n    original_price = sales_tax_paid / sales_tax_rate\n\n    return original_price\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3 / 10) / (6 / 7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the initial number of boys and girls\n    initial_condition = Eq(boys + 30, girls)\n\n    # Equation representing that after some left, the number of boys equals the number of girls\n    recess_condition = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, recess_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let f represent the number of frogs at the beginning\n    # Let d represent the number of dragonflies at the beginning\n    f, d = symbols('f d')\n    \n    # The amount of frogs is 9 more than that of dragonflies at the beginning\n    equation1 = Eq(f, d + 9)\n    \n    # He turns some frogs (x) into dragonflies\n    # And turns some dragonflies (y) into frogs\n    # After the show, there are 11 frogs and 10 dragonflies\n    x, y = symbols('x y')\n    equation2 = Eq(f - x + y, 11)\n    equation3 = Eq(d + x - y, 10)\n    \n    # We solve for x and y using the given equations\n    solutions_xy = solve((equation2, equation3), (x, y))\n    \n    # Now we can substitute the x, y values into equation1\n    # And solve for f\n    solutions_f = solve(equation1.subs(solutions_xy), f)\n\n    return solutions_f[f]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers_to_subtract = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers_to_subtract)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(100):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # The original expression\n    expression = \"285+15/5-2\"\n    \n    # Calculate the initial expression without brackets\n    initial = eval(expression)\n\n    # Possible positions to insert opening and closing brackets\n    ops = [(0, 0), (4, 4), (8, 8)]\n    \n    # Set to store unique results\n    unique_results = set([initial])\n\n    # Insert one pair of brackets\n    for i in range(len(ops)):\n        for j in range(i+1, len(ops)):\n            exp_one_bracket = expression[:ops[i][0]] + '(' + expression[ops[i][1]:ops[j][0]] + ')' + expression[ops[j][1]:]\n            unique_results.add(eval(exp_one_bracket))\n\n    # Insert two pairs of brackets\n    for i in range(len(ops)):\n        for j in range(i+1, len(ops)):\n            for k in range(j+1, len(ops)):\n                for l in range(k+1, len(ops)):\n                    exp_two_brackets = (expression[:ops[i][0]] + '(' + expression[ops[i][1]:ops[j][0]] +\n                                       ')' + expression[ops[j][1]:ops[k][0]] + '(' + expression[ops[k][1]:ops[l][0]] + \n                                       ')' + expression[ops[l][1]:])\n                    unique_results.add(eval(exp_two_brackets))\n\n    # Compute the number of unique results\n    num_different_results = len(unique_results)\n\n    return num_different_results\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Let the work rate of worker A be a jobs/hour, worker B be b jobs/hour, and worker C be c jobs/hour.\n    # The amount of work done is the same, let's call it 1 job.\n\n    # The combined work rate of worker A and worker B is 1 job/3 hours\n    # The combined work rate of worker B and worker C is 1 job/4 hours\n    # The combined work rate of worker A and worker C is 1 job/8 hours\n\n    # Using the work rates, we can write the following equations:\n    # a + b = 1/3\n    # b + c = 1/4\n    # a + c = 1/8\n\n    # Solving for a, b, and c\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a + b, 1/3)\n    equation2 = Eq(b + c, 1/4)\n    equation3 = Eq(a + c, 1/8)\n\n    # Solve the equations for a, b, and c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Now find the combined work rate of A, B and C working together\n    combined_work_rate = solutions[a] + solutions[b] + solutions[c]\n    \n    # The time it takes for all three to complete the job together is 1 job divided by their combined work rate.\n    time_for_all_three = 1 / combined_work_rate\n\n    return time_for_all_three\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef is_coprime_adjacent(perm):\n    return all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1))\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if is_coprime_adjacent(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # The amount of 15% sugar water needed\n\n    # Equation representing the total mass of sugar\n    equation = Eq(2 * 0.45 + x * 0.15, (2 + x) * 0.25)\n\n    # Solving for x\n    required_amount = solve(equation, x)\n\n    return required_amount[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    \n    total_coins = Eq(johnson + vicky, 48)\n    vicky_coins_after = Eq(vicky + 8, johnson - 2)\n    \n    solutions = solve((total_coins, vicky_coins_after), (johnson, vicky))\n    \n    return solutions[johnson]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    mod = 10**5\n    last_five_digits_sum = 0\n    cur_num = 0\n    \n    for i in range(1, 2018):\n        cur_num = cur_num * 10 + 2\n        last_five_digits_sum = (last_five_digits_sum + cur_num) % mod\n    \n    return last_five_digits_sum\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "网络故障，请重试"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result_after_addition = (77 / 7)\n    original_number = result_after_addition - 6\n    return original_number\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    # Let the number of cupcakes Eugene has be e. Then David has 3e cupcakes.\n    # According to the problem, David has 14 more cupcakes than Eugene, so:\n    # 3e = e + 14\n    # Solve for e:\n    e = 14 / 2\n\n    # Now calculate the total number of cupcakes:\n    total_cupcakes = e + (3 * e)\n\n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(sam + tim, 1170) # Together they had 1170 cookies\n    equation2 = Eq(sam - sam/4 + (tim + tim/5), tim - 663) # After eating and buying\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # How many cookies did Sam eat\n    cookies_eaten_by_sam = solutions[sam] / 4\n\n    return cookies_eaten_by_sam\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n\n    return james_cards\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    amount_in_six_days = 24\n    amount_per_day = amount_in_six_days / 6\n    amount_in_eight_days = amount_per_day * 8\n    return amount_in_eight_days\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (1, 2),  # Remainder 1 when divided by 2\n        (1, 3),  # Remainder 1 when divided by 3\n        (1, 4),  # Remainder 1 when divided by 4\n        (1, 6),  # Remainder 1 when divided by 6\n    ]\n    lcm_2_3_4_6 = 2 * 3 * 4 * 6 // 2  # LCM of 2, 3, 4, 6 without double-counting shared factors\n    # Using Chinese Remainder Theorem to find a number that fits the above criteria\n    remainder, mod = solve_congruence(*congruences)\n    \n    # Looking for the number in the range 200 - 300, we'll add multiples of lcm until we get it\n    ans = remainder\n    while ans < 200 or ans % 7 != 0:\n        ans += lcm_2_3_4_6\n    \n    return ans\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Sally starts with 40 stamps\n    sally_stamps = 40\n\n    # Ting starts with 32 stamps\n    ting_stamps = 32\n\n    # After giving away some stamps, the ratio is 1:2 (Sally:Ting)\n    # Let x be the number of stamps Sally gives to Ting\n    # Sally will have 40 - x stamps, and Ting will have 32 + x stamps\n\n    # We set up the equation for the ratio 1:2\n    # (40 - x) / (32 + x) = 1 / 2\n\n    # Cross multiply to solve for x\n    # 2 * (40 - x) = 1 * (32 + x)\n    # 80 - 2x = 32 + x\n    # 80 - 32 = 2x + x\n    # 48 = 3x\n    # x = 48 / 3\n    x = 48 / 3\n\n    # Calculate how many stamps Ting has in the end\n    ting_final = ting_stamps + x\n\n    return ting_final\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate of working\n    jerry_rate = 1 / 18\n    \n    # Combined rate of working when Tom helps Jerry\n    combined_rate = 1 / 6\n    \n    # Tom's rate of working\n    tom_rate = combined_rate - jerry_rate\n    \n    # Time for Tom to complete the job by himself\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    total_money = 20\n    packet_cost = 4\n    sweets_per_packet = 8\n    free_sweet_every_n_packets = 2\n\n    packets_bought = total_money // packet_cost\n    free_sweets = packets_bought // free_sweet_every_n_packets\n\n    total_sweets = (packets_bought * sweets_per_packet) + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    total_candy = 88\n    children = 8\n    \n    # To minimize the number of candies for the child with max candies,\n    # we need to distribute the candies as evenly as possible\n    # We start by giving each child one candy which is the minimum they can get\n    candies_given = [1] * children\n    total_candy -= sum(candies_given)\n    \n    # Now distribute the remaining candies one by one to the children\n    # with the least candies to ensure no two children have the same amount.\n    i = 0\n    while total_candy > 0:\n        candies_given[i] += 1\n        total_candy -= 1\n        i = (i + 1) % children\n    \n    # The child who gets the max is the last in the distribution\n    # Since we distribute candies starting from the first child\n    max_candies = max(candies_given)\n    \n    return max_candies\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time spent walking at 200 m/min\n    t = symbols('t')\n    \n    # First 10 minutes at 150 m/min\n    distance_at_first_speed = 10 * 150\n    \n    # Remaining time at 200 m/min\n    distance_at_second_speed = t * 200\n    \n    # Total distance\n    total_distance = distance_at_first_speed + distance_at_second_speed\n    \n    # Equation representing the total distance walked\n    equation = Eq(total_distance, 3700)\n    \n    # Solving for t\n    time_at_second_speed = solve(equation, t)[0]\n    \n    # Total time spent walking is the sum of time spent at both speeds\n    total_time = 10 + time_at_second_speed\n\n    return total_time\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    # Let g be the number of girls at the gathering at first.\n    # Then the number of boys at the gathering at first would be g + 0.4 * g = 1.4g.\n    # After 24 boys and 24 girls left, there were (g - 24) girls and (1.4g - 24) boys.\n    # The equation representing 50% more boys than girls is:\n    # 1.4g - 24 = 1.5 * (g - 24)\n    # Solve for g and then find the initial number of boys (1.4g).\n    \n    from sympy import symbols, Eq, solve\n    \n    g = symbols('g')\n    equation = Eq(1.4 * g - 24, 1.5 * (g - 24))\n    num_girls = solve(equation, g)[0]\n    num_boys = 1.4 * num_girls\n    \n    return int(num_boys)\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    n = 16\n    zeros = 0\n    while n > 0:\n        n //= 5\n        zeros += n\n    return zeros\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    pink = 5\n    purple = 7\n    orange = 8\n    total_counters = pink + purple + orange\n\n    # The chance of choosing a pink counter, P(pink) = pink / total_counters\n    # Gill wants to double her chances of picking a pink counter.\n    # Let x be the number of extra counters to add\n    # The new total counters will be (total_counters + x), and pink counters would be (pink + x)\n    # P(new pink) = (pink + x) / (total_counters + x)\n    # To double the chance: P(new pink) = 2 * P(pink)\n    # (pink + x) / (total_counters + x) = 2 * (pink / total_counters)\n    # (pink + x) / (total_counters + x) = 2 * pink / total_counters\n    # Solving for x gives us:\n    # pink + x = 2 * pink * (total_counters + x) / total_counters\n    # total_counters * (pink + x) = 2 * pink * (total_counters + x)\n    # total_counters * pink + total_counters * x = 2 * pink * total_counters + 2 * pink * x\n    # total_counters * x - 2 * pink * x = pink * total_counters - pink * total_counters\n\n    # Simplify the equation\n    # x * (total_counters - 2 * pink) = pink * total_counters - pink * total_counters\n    # Since the right-hand side is 0, we can simplify further:\n    # x = 0 / (total_counters - 2 * pink)\n\n    # However, since we cannot add 0 counters (that wouldn't change the probability), we missed something.\n    # We actually need to solve for (total_counters + x) in the equation where the probabilities are doubled.\n    # Let's actually solve for x:\n\n    # pink + x = (2 * pink * (total_counters + x)) / total_counters\n    # pink * total_counters + x * total_counters = 2 * pink * total_counters + 2 * pink * x\n    # x * total_counters - 2 * pink * x = pink * total_counters\n    # x * (total_counters - 2 * pink) = total_counters * pink\n    # x = (total_counters * pink) / (total_counters - 2 * pink)\n\n    # Calculate the value of x\n    x = (total_counters * pink) / (total_counters - 2 * pink)\n    return x\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote cupcakes as c and muffins as m\n    c, m = symbols('c m')\n\n    # initial condition: equal number of cupcakes and muffins\n    equation1 = Eq(c, m)\n    \n    # after selling cupcakes and muffins condition\n    # muffins left is twice the cupcakes left\n    equation2 = Eq(m - 12, 2 * (c - 60))\n\n    # solve the equations\n    solutions = solve((equation1, equation2), (c, m))\n\n    # since c = m, we can return double the value of c or m\n    total = solutions[c] * 2\n\n    return total\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(5 * number + 7, 47)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Since Cindy needs to ensure she has 2 pairs of the same color,\n    # consider the worst-case scenario using the Pigeonhole Principle.\n    \n    # She could take 1 of each color (3 socks) and not have a pair.\n    # For each additional sock she takes, she might get a sock of a new color.\n    # So, after taking one more sock of each color, she would have 2 of each color (6 socks) but still no guarantee of a pair.\n    # The next sock she takes guarantees at least one pair (7 socks).\n    # However, the worst-case scenario to have 2 pairs of the same color is:\n    # Having one pair and two single socks of different colors (for instance, 2 black, 1 red, 1 grey).\n    # The next sock she takes could complete a pair of a different color (8 socks), so that's still not enough.\n    # To ensure 2 pairs, she must take one more sock (9 socks).\n\n    # This 9th sock will guarantee that she has 2 pairs of at least one color\n    # because even if it is of a color that she has only 1 sock of, she will have\n    # 2 of that color and already have another pair from the other two colors.\n    \n    return 9\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = 12.25 + 1.5  # 90 minutes is equivalent to 1.5 hours\n    round_trip = shanghai_to_la + la_to_shanghai\n    return round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for George's and Helen's daily pocket money\n    george, helen = symbols('george helen')\n\n    # George gets $3 more than Helen every day\n    eq1 = Eq(george, helen + 3)\n    \n    # Both spend $5 each day\n    george_saves = george - 5\n    helen_saves = helen - 5\n\n    # When Helen has saved $60, George has saved $90 more\n    eq2 = Eq(george_saves * ((60 / helen_saves) + (90 / george_saves)), 60 + 90)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (george, helen))\n\n    # Return Helen's daily pocket money\n    return solutions[helen]\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    equation1 = Eq(eddi/wiya, 3/2)\n    equation2 = Eq((eddi + 4)/wiya, 8/5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # 'a' is the first term and 'd' is the common difference\n\n    # 9th term: a + 8d\n    # 15th term: a + 14d\n    # Equation: the 9th term is 18 larger than the 15th term\n    equation1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # 20th term: a + 19d\n    # 12th term: a + 11d\n    # Equation: the sum of the 20th term and the 12th term is 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # 32nd term is a + 31d\n    term_32 = solutions[a] + 31*solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of the sequence 1 to 30\n    sum_1_to_30 = sum(range(1, 31))\n    \n    # Since 29 to 1 is just 1 to 29, we can calculate the sum of the sequence 1 to 29\n    sum_1_to_29 = sum(range(1, 30))\n    \n    # The final result is the sum of both sequences\n    ans = sum_1_to_30 + sum_1_to_29\n    \n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n    \n    # Using the inclusion-exclusion principle\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance Linda drove at 40 km/h\n    distance_first_part = 2 * 40  # speed * time\n\n    # Remaining distance\n    distance_second_part = 280\n\n    # Total distance of the whole trip\n    total_distance = distance_first_part + distance_second_part\n\n    # Time taken to drive the remaining distance at 70 km/h\n    time_second_part = distance_second_part / 70  # distance / speed\n\n    # Total time taken for the whole trip\n    total_time = 2 + time_second_part  # time_first_part is 2 hours\n\n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Excluding leading zeros for the first digit\n    \n    # Cases without any sevens\n    no_sevens = 8 * 9 * 9  # 8 choices for first digit, 9 for second and third each\n    \n    # Cases with exactly one seven\n    one_seven_first = 1 * 9 * 9  # first digit is seven\n    one_seven_second = 8 * 1 * 9  # second digit is seven\n    one_seven_third = 8 * 9 * 1  # third digit is seven\n    one_seven_total = one_seven_first + one_seven_second + one_seven_third\n    \n    # At least two sevens\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven_total\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n  \n    # Try to find out the possible number of 3-page letters sent using hypothetical method\n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        total_pages = 4 * four_page_penpals + 3 * three_page_penpals\n        \n        # If the total pages match the condition, then we have found the answer.\n        if total_pages == 38:\n            return three_page_penpals\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    return 8 * (10 ** (len(str(768354)) - str(768354).index('8') - 1))\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "from math import lcm\n\ndef solution():\n    days_in_packets = lcm(25, 20)\n    \n    # Assuming March has 31 days and ignoring leap years as the question doesn't specify\n    days_in_march = 31\n    days_after_march = days_in_packets - days_in_march\n    \n    # Assuming April has 30 days, and May has 31 days, etc. to find the month and day\n    days_in_month = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    current_month = 3  # April\n    while days_after_march > days_in_month[current_month - 1]:\n        days_after_march -= days_in_month[current_month - 1]\n        current_month += 1\n        if current_month > 12:  # Reset to January after December\n            current_month = 1\n    \n    next_start_day = days_after_march\n\n    return (current_month, next_start_day)\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # Given A = sum of ai for i=0 to 6\n    # Given A = 1\n    # A Δ ai = A - ai for i=1 to 6\n    # Calculate A Δ ai for each i and solve for ai\n \n    # Initialize A\n    A = 1\n    \n    # Calculate each ai using the defined Δ operation\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n    \n    # Since A = a0 + a1 + a2 + a3 + a4 + a5 + a6 and A = 1\n    # We can find the value of a0\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    # Simplify the fraction to its simplest form using fractions.Fraction\n    from fractions import Fraction\n    \n    # Convert a0 to a simplified fraction\n    a0_fraction = Fraction(a0).limit_denominator()\n    m = a0_fraction.numerator\n    n = a0_fraction.denominator\n    \n    # Return sum of m and n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    from itertools import permutations\n    \n    # Possible digits based on the clues given, considering clue from guess '5430'\n    possible_digits = set([str(i) for i in range(10)]) - set('5430')\n\n    # All possible permutations of the remaining digits\n    possible_combinations = [''.join(p) for p in permutations(possible_digits, 4)]\n\n    # Filtering based on other clues\n    valid_combinations = []\n    for combo in possible_combinations:\n        if all((combo[0] != '8', combo[1] != '7', combo[2] != '6', combo[3] != '5')) and \\\n                len(set('8765') & set(combo)) == 2 and \\\n                len(set('1023') & set(combo)) == 2 and \\\n                len(set('8642') & set(combo)) == 4:\n            valid_combinations.append(combo)\n\n    ans = valid_combinations[0]  # Since the conditions lead to a unique solution\n    return ans\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Aiden's mistaken calculation\n    mistaken_eq = Eq((x / 4) - 25, 2021)\n    # Solve for the original number x\n    mistaken_solution = solve(mistaken_eq, x)[0]\n\n    # The correct calculation\n    correct_ans = (mistaken_solution * 4) + 25\n\n    return correct_ans\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():\n    from math import factorial\n\n    def comb(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # There can be at most three groups of two consecutive dancing performances.\n    # We treat each group of two consecutive dancing performances as a unit. \n    # The number of singing performances between these groups should be at least 3 - 1 = 2 (one between each group).\n    # This leaves at least 6 - 2 = 4 singing performances to be freely distributed.\n    # The remaining 4 singing performances and the 3 \"dual dancing\" units can be arranged in 7! ways.\n    # Within each \"dual dancing\" unit, the 2 dances can be arranged in 2! ways.\n    # Therefore, this part of the calculation is 7! * (2!)^3.\n\n    # However, there might not be 3 \"dual dancing\" units if there are singular dancing performances.\n    # Thus, we must consider all cases where there are fewer \"dual dancing\" units.\n    # For each possible number of \"dual dancing\" units (0 to 3), we arrange the units and the remaining singular performances,\n    # considering that for k \"dual dancing\" units, there will be 4 - k \"singular dancing\" performances.\n    # In all cases, we also arrange the singing performances around these units.\n    \n    total_ways = 0\n    # i ranges from 0 to 3 denoting the number of \"dual dancing\" units\n    for i in range(4):\n        group_of_two_dances = i\n        single_dances = 4 - group_of_two_dances\n        # The singing performances must be spread out over group_of_two_dances + single_dances + 1 regions.\n        # We have 6 singing performances to distribute.\n        # Each region must get at least one singing performance, so we distribute the remaining 6 - (group_of_two_dances + single_dances + 1)\n        regions = group_of_two_dances + single_dances + 1\n        sings_to_place = 6 - regions\n        # The number of ways to place the remaining singing performances in the regions\n        sings_placements = comb(sings_to_place + regions - 1, sings_to_place)\n        # Calculate permutations for \"dual dancing\" units, single dances, and the regions they form with singing performances\n        arrangements = factorial(regions)\n        # Multiply by the number of internal arrangements of the \"dual dancing\" units\n        arrangements *= (2 ** group_of_two_dances)\n        # Add to the total considering the current number of \"dual dancing\" units\n        total_ways += sings_placements * arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from math import factorial\n\n    def count_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    product = 75 * 56 * 12 * 105\n    return count_zeros(product)\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be x\n    # Chloe has 4 times as many books as Donna, so Chloe has 4x books\n    # We are given that Chloe has 816 fewer books than if she had 4 times as many\n    # Thus, the equation is: 4x - x = 816\n    # This simplifies to 3x = 816\n    # Solving for x gives us the number of books Donna has\n    x = 816 // 3\n    return x\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    tilde = ~4\n    ans = (tilde + 4) / 8\n    return ans\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    children, adults, boys, girls = symbols('children adults boys girls')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(adults, 3 * children)  # three times as many adults as children\n    equation2 = Eq(boys, 2 * girls)       # twice as many boys as girls\n    equation3 = Eq(adults - girls, 176)   # there were 176 more adults than girls\n    \n    # Total number of children equals number of boys plus number of girls\n    equation4 = Eq(children, boys + girls)\n    \n    # Combine boys and girls into children in the equation3\n    # adults = 176 + girls, thus 3 * children = 176 + girls\n    # Since children = boys + girls, we can substitute boys as 2 * girls to find the number of girls\n    # Then find adults and children respectively, and finally calculate the total number of people\n    solutions = solve((equation1, equation2, equation3, equation4), (children, adults, boys, girls))\n    \n    total_people = solutions[adults] + solutions[children]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # Since we want the ones digit of 999^99, we only care about the ones digit of 9's powers\n    # The pattern for the powers of 9's ones digit is 9, 1, 9, 1, ...\n    # Since 99 is an odd number, the ones digit will be the same as 9^1, which is 9\n\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3*a + 11*b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # Since a is the tens digit, it can't be 0\n        for b in range(10):  # b is the ones digit, it can range from 0 to 9\n            ab = 10 * a + b  # Constructing the number ab\n            if ab * 7 == 100 * a + b:  # The condition given in the problem\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'b' represent the price of one banana and 'a' represent the price of one apple\n    b, a = symbols('b a')\n    \n    # Setting up the system of equations based on the problem\n    equation1 = Eq(2*b + 3*a, 1.50)\n    equation2 = Eq(3*b + 2*a, 1.45)\n    \n    # Solving the equations for 'b' and 'a'\n    solutions = solve((equation1, equation2), (b, a))\n    \n    # Annabella pays for 1 banana and 1 apple\n    annabella_cost = solutions[b] + solutions[a]\n    \n    return annabella_cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # Number of houses 3 construction workers can build in 1 day\n    houses_per_day_per_3_workers = 14 / 4\n    \n    # Number of houses 1 construction worker can build in 1 day\n    houses_per_day_per_worker = houses_per_day_per_3_workers / 3\n    \n    # Number of houses 9 construction workers can build in 1 day\n    houses_per_day_per_9_workers = houses_per_day_per_worker * 9\n    \n    # Number of houses 9 construction workers can build in 2 days\n    houses_9_workers_2_days = houses_per_day_per_9_workers * 2\n    \n    return houses_9_workers_2_days\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "def solution():\n    from math import gcd\n\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = float('inf')\n    ages = [i for i in range(1, 28)] # Fido must be at least 1, and Bob at most 27 if they differ by 10 years.\n\n    for bob_age in ages:\n        for rex_age in ages:\n            fido_age = bob_age - 10\n            if fido_age > 0 and fido_age != bob_age and fido_age != rex_age and \\\n               bob_age + rex_age + fido_age == 28:\n                product = bob_age * rex_age * fido_age\n                if 0 < product < min_product:\n                    min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    children = 2 / 5 * total_people\n    women = 1 / 4 * total_people\n    men = total_people - children - women\n\n    # Equation: children = men + 20\n    equation = Eq(children, men + 20)\n\n    # Solve for the total number of people\n    solved_total_people = solve(equation.subs(children, 2 / 5 * total_people).subs(men, total_people - 2 / 5 * total_people - 1 / 4 * total_people), total_people)\n\n    return solved_total_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    price_per_ball = symbols('price_per_ball')\n    total_money = symbols('total_money')\n\n    equation1 = Eq(total_money - 5 * price_per_ball, 15)\n    equation2 = Eq(total_money - 8 * price_per_ball, -12)\n\n    solutions = solve((equation1, equation2), (price_per_ball, total_money))\n\n    return solutions[price_per_ball]\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # cm\n    rebound_ratio = 1/3\n    \n    # Calculate the height after the first bounce\n    height_after_first_bounce = height_after_second_bounce / rebound_ratio\n    \n    # Calculate the initial height\n    initial_height = height_after_first_bounce / rebound_ratio\n    \n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculation for the first complex fraction part\n    numerator_1 = (1/30) + (1/6)\n    denominator_1 = (2/25)\n    fraction_1 = numerator_1 / denominator_1\n    \n    # Calculation for the second complex fraction part\n    numerator_2 = 2 - (2/3)\n    denominator_2 = (8/3)\n    fraction_2 = numerator_2 / denominator_2\n    \n    # Sum of the two complex fraction parts\n    ans = fraction_1 + fraction_2\n    \n    return ans\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    largest_sum = 0\n    \n    for digit in range(1, 10):\n        for repeating_digit in range(0, 10):\n            if digit == repeating_digit:\n                continue\n            # Construct the two numbers with two equal digits but different positions\n            numbers = set([\n                int(f\"{digit}{repeating_digit}{repeating_digit}\"),\n                int(f\"{repeating_digit}{digit}{repeating_digit}\"),\n                int(f\"{repeating_digit}{repeating_digit}{digit}\")\n            ])\n            \n            for A in numbers:\n                for B in numbers:\n                    if A == B:\n                        continue\n                    # Check if the highest common factor is 75\n                    if gcd(A, B) == 75:\n                        # Update the largest sum if the found sum is greater\n                        largest_sum = max(largest_sum, A + B)\n    \n    return largest_sum\n\nfrom math import gcd\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n\n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n\n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    # total pupils in both classes\n    total_pupils = 40 + 30  \n    \n    # total marks for both classes \n    total_marks = total_pupils * 90 \n    \n    # let average marks of class A be x\n    # then, average marks of class B will be x + 7\n    \n    # total marks for class A = average of class A * number of pupils in class A\n    # total marks for class B = average of class B * number of pupils in class B\n    # equation: (average of class A * number of pupils in class A) + \n    #           (average of class B * number of pupils in class B) = total marks\n    \n    # substituting the average of class B with (x + 7),\n    # we get the equation: (x * 40) + ((x + 7) * 30) = total_marks\n    # solving for x\n    \n    # We can use sympy to solve the equation but it's a simple algebra problem\n    # we can solve without sympy just as easily.\n\n    # (x * 40) + ((x + 7) * 30) = total_marks\n    # 40x + 30x + 210 = total_marks\n    # 70x + 210 = total_marks\n    # 70x = total_marks - 210\n    # x = (total_marks - 210) / 70\n    average_A = (total_marks - 210) / 70\n    \n    # average score for class B will be x + 7, so let's calculate it\n    average_B = average_A + 7\n    \n    return average_B\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculating the denominators separately\n    denom1 = 2007 * 2008\n    denom2 = 2008 * 2009\n    denom3 = 2009\n\n    # Adding the fractions by calculating a common denominator\n    common_denom = denom1 * denom2 * denom3\n    num = (common_denom // denom1) + (common_denom // denom2) + (common_denom // denom3)\n\n    # Calculating the inverse of the sum\n    ans = common_denom / num\n\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for ten_pences in range(6):  # He has 5 ten-pence coins, so he can use 0 to 5 of them\n        for twenty_pences in range(4):  # He has 3 twenty-pence coins, so he can use 0 to 3 of them\n            for fifty_pences in range(2):  # He has 1 fifty-pence coin, so he can use 0 or 1 of them\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    if students % boat_capacity == 0:\n        num_boats = students // boat_capacity\n    else:\n        num_boats = (students // boat_capacity) + 1\n\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - (-2) + 7 - (-4) + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    term1 = 250250 ** 2\n    term2 = 250249 * 250251\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    \n    # Aaron's age is aaron, Becky's age is becky, Chris's age is chris\n    # The difference in age between Aaron and Becky is the same as the difference in age between Becky and Chris\n    equation1 = Eq(aaron - becky, becky - chris)\n    # The sum of their ages is 60\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    # There might be multiple solutions, we need to take the one that makes Becky older than Chris and Aaron older than Becky\n    # In all solutions becky will be the middle age so we need to find the solution where becky is positive and less than 60 / 2\n    for sol in solutions:\n        if sol[becky] > 0 and sol[becky] < 60 / 2:\n            return sol[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    total_people = 30\n    people_behind_mark = 16\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtracting Mark himself\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    num_digits = 0\n    for i in range(1, 201):\n        num_digits += len(str(i))\n    return num_digits\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the Lee's work rate (i.e., work done per hour) \n    # and n be Nancy's work rate (i.e., work done per hour)\n    l, n = symbols('l n')\n\n    # If they work together, they finish the job in 10 hours\n    # Hence l + n = 1/10 (since 1 job gets done in 10 hours)\n    equation1 = Eq(l + n, 1/10)\n\n    # Lee types for 6 hours and Nancy types for 20 hours to finish the job\n    # Hence 6l + 20n = 1 (since 1 job gets done by their combined work)\n    equation2 = Eq(6*l + 20*n, 1)\n\n    # Solve the system of equations for l and n\n    solutions = solve((equation1, equation2), (l, n))\n\n    # Time taken by Nancy to finish the job by herself is the reciprocal of her work rate\n    time_taken_by_nancy = 1 / solutions[n]\n\n    return time_taken_by_nancy\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f\"9{a}8{a}\")\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # Since a number is divisible by 4 if its last two digits form a number divisible by 4,\n    # We only need to check the last two digits of the number 5J6.\n    for J in range(0, 10):\n        if int(str(5) + str(J) + str(6)) % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_cost = symbols('chair_cost')\n    table_cost = chair_cost + 25\n    total_cost = 5 * table_cost + 12 * chair_cost\n\n    equation = Eq(total_cost, 720)\n    solutions = solve(equation, chair_cost)\n\n    table_cost_value = solutions[0] + 25\n    return table_cost_value\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n    \n    # Solving the equations\n    solution = solve((equation1, equation2), (apple, peach))\n\n    return solution[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    equation = Eq((original_number + 7) * 6, 66)\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    a = 9\n    b = x\n    result = 33\n\n    equation = Eq(5 * a - 2 * b, result)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    n = 24\n    square_sum = n * (n + 1) * (2 * n + 1) // 6\n    cube_sum = (n * (n + 1) // 2) ** 2\n    total = 0\n    for i in range(n):\n        total += i * (i + 1) ** 2\n        \n    return total\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    # As the question is $$11$$ and no actual question is provided, \n    # the resulting answer will simply be 11 as per the given question.\n\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    # After 6 years, Alice will be 24 years old.\n    # That means currently Alice is 24 - 6 = 18 years old.\n    \n    current_age = 24 - 6\n    # 9 years ago, Alice was 18 - 9 = 9 years old.\n    \n    age_nine_years_ago = current_age - 9\n    return age_nine_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    # Periods for tablets\n    packet_A = 25\n    packet_B = 20\n\n    # Least common multiple of the packet sizes\n    packets_lcm = lcm(packet_A, packet_B)\n\n    # March 1st is Day 1, so next start date will be on the lcm-th day.\n    # Number of days in each month (assuming it is not a leap year)\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Finding the next starting month and day\n    days_passed = 0\n    month = 0\n    while days_passed + days_in_months[month] < packets_lcm:\n        days_passed += days_in_months[month]\n        month += 1\n    next_start_day = packets_lcm - days_passed\n    \n    return (month + 1, next_start_day)  # +1 because January is month 0\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # The ratio of the time spent is 5:4, meaning 5 parts up and 4 parts down\n    total_parts = 5 + 4\n    total_time = 360  # total time in minutes\n\n    # Calculate time spent going up and down\n    time_up = (5 / total_parts) * total_time\n    time_down = (4 / total_parts) * total_time\n\n    # Since speed going up is 10 m/min slower than going down, let speed_down be x m/min\n    # Then, speed_up will be x - 10 m/min\n    # We know that speed = distance / time\n    # Let's put that in the distance equation: distance_up = (x - 10) * time_up\n    # distance_down = x * time_down\n    # We know that distance_up + distance_down is what we need\n\n    # Rearrange the equation to solve for x\n    # Since distance_up + distance_down is what we need, we can calculate it directly\n    # Multiply both distances by their respective times and solve for x in terms of other known values, then calculate the total distance\n    # Since we don't have a fixed value for x, we assume any positive value and calculate the total distance accordingly, \n    # because the total distance will be the same regardless of what x is.\n    # Let's assume speed_down (x) is 10 m/min (minimum value for a valid speed_up)\n    speed_down = 10  # arbitrary positive value for demonstration purpose\n    speed_up = speed_down - 10\n\n    # Calculate the distances\n    distance_up = speed_up * time_up\n    distance_down = speed_down * time_down\n\n    # Calculate the total distance\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    # Each friend sends a card to every other friend\n    # Since each card is counted twice (sending and receiving), we divide by 2\n    cards_sent = (friends * (friends - 1)) // 2\n    return cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_current_age, jerry_current_age = symbols('tom_current_age jerry_current_age')\n\n    # Tom will be twice his age in 4 years from now\n    equation1 = Eq(tom_current_age * 2, tom_current_age + 4)\n    \n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom_current_age - 3) + (jerry_current_age - 3), 10)\n\n    # Solve both equations to find Tom's and Jerry's current ages\n    ages = solve((equation1, equation2), (tom_current_age, jerry_current_age))\n    tom_age, jerry_age = ages[tom_current_age], ages[jerry_current_age]\n\n    # Define variable for the number of years from now when Jerry's age will be doubled\n    years_from_now = symbols('years_from_now')\n    \n    # Equation for when Jerry's age will be doubled\n    equation3 = Eq(jerry_current_age + years_from_now, 2 * jerry_current_age)\n\n    # Solve for the number of years from now\n    result_years_from_now = solve(equation3.subs(jerry_current_age, jerry_age), years_from_now)\n\n    return result_years_from_now[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    bus_interval = 35\n    aiden_arrival_time = (9 * 60) + 22  # Convert 9:22 to minutes past midnight\n    bus_time = (9 * 60) + 15           # Convert 9:15 to minutes past midnight\n\n    # Calculate minutes passed since last bus\n    minutes_passed_since_last_bus = aiden_arrival_time - bus_time\n    \n    # Calculate how many full intervals have passed since the 9:15 bus\n    intervals_passed = minutes_passed_since_last_bus // bus_interval\n    \n    # Calculate time for the next bus after Aiden has arrived\n    next_bus_time = bus_time + ((intervals_passed + 1) * bus_interval)\n    \n    # Calculate the waiting time for the next bus\n    wait_time = next_bus_time - aiden_arrival_time\n    \n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_in_week = 7\n    num_weeks = total_days // days_in_week\n\n    return num_weeks\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    # Eddie's walking speed towards the mall.\n    eddie_speed = 62  # in metres per minute\n\n    # Eddie's brother's return speed.\n    brother_speed = 70  # in metres per minute\n\n    # The time it takes for them to meet.\n    meet_time = 5  # in minutes\n\n    # Calculate the distance Eddie walked until the meeting point.\n    distance_eddie_walked = eddie_speed * meet_time\n\n    # Calculate the distance Eddie's brother walked until the meeting point.\n    distance_brother_walked = brother_speed * meet_time\n\n    # Total distance from the house to the mall is the sum of the distances both walked.\n    total_distance = distance_eddie_walked + distance_brother_walked\n\n    return total_distance\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    return (5/9) * 243\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    pineapples = 138\n    watermelons = 94\n    daily_use = 9\n    for days in range(1, max(watermelons, pineapples)):\n        if (pineapples - days * daily_use) == 3 * (watermelons - days * daily_use):\n            return days\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n    \n    def all_prime(ages):\n        return all(isprime(age) for age in ages)\n\n    my_age = 7\n    brother_age = 5\n    mother_age = 29\n    father_age = 31\n\n    while True:\n        # Advance the ages by one year\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n        # Check if all ages are prime\n        if all_prime([my_age, brother_age, mother_age, father_age]):\n            return father_age\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n\n    discounted_price = original_price * (1 - discount)\n    final_price = discounted_price * (1 + increase)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    sum_squares = sum(((-1)**(n+1)) * (n**2) for n in range(3, 52))\n    \n    return sum_squares\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_lamps = 3\n    \n    # Using the fact that Jamie planted 3 flowers between every 2 lamp posts,\n    # The number of intervals between lamp posts is total_flowers divided by flowers_between_lamps.\n    intervals = total_flowers // flowers_between_lamps\n\n    # The distance between every two lamp posts (including the end points) can be found by\n    # adding one more interval to the number of intervals\n    total_lamp_posts = intervals + 1\n\n    # The total distance is 50m, the distance between every 2 lamp posts is\n    # the total distance divided by the number of intervals.\n    distance_between_lamps = 50 / intervals\n\n    return distance_between_lamps\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # This is a classic combinatorial problem.\n    # The maximum number of regions R in a plane that can be divided by n circles is given by\n    # R = n^2 - n + 2\n    # This formula can be derived by induction and reasoning on the incremental addition of each circle.\n    n = 7\n    ans = n**2 - n + 2\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_remaining = total_books - books_given_away\n    return books_remaining\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Lora and her mother's ages\n    lora, mother = symbols('lora mother')\n\n    # Equation 1: Lora's age plus her mother's age is 44\n    equation1 = Eq(lora + mother, 44)\n\n    # Equation 2: Her mother's age is 3 times Lora's age\n    equation2 = Eq(mother, 3 * lora)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    # Return Lora's age\n    return solutions[lora]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n\n    # Calculate the unit digit of 4^1, 4^2, 4^3, 4^4. After that, the pattern repeats every 4 powers.\n    unit_digit_cycle = [base_unit_digit]\n    for _ in range(1, 4):\n        unit_digit_cycle.append((unit_digit_cycle[-1] * base_unit_digit) % 10)\n\n    # As the cycle repeats every 4 numbers and the exponent is 2008, we need to find the remainder of 2008 divided by 4\n    remainder = 2008 % 4\n\n    # If remainder is 0, we should take the last element of unit_digit_cycle (since the pattern repeats)\n    unit_digit = unit_digit_cycle[remainder - 1] if remainder > 0 else unit_digit_cycle[-1]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and nine\", \"90009\"))\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3/5\n\n    num_males = total_adults * fraction_male\n\n    return int(num_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to each shop/chapel\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n\n    # Number of paths from each shop/chapel to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    # Total paths using the multiplication principle = number of paths from home to a location * number of paths from that location to school\n    total_paths = (paths_to_audio * paths_audio_to_school) + (paths_to_book * paths_book_to_school) + (paths_to_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    ab = 102  # Adam and Ben's weight\n    bc = 97   # Ben and Carl's weight\n    ac = 93   # Adam and Carl's weight\n\n    # Adding all pairs gives us twice the total weight\n    total_double = ab + bc + ac\n\n    # Divide by 2 to get the total weight\n    total_weight = total_double / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins / 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = (one_pound_coins * 1) + (fifty_pence_coins * 0.5) + (twenty_pence_coins * 0.2)\n\n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    total_money = 705\n    calculator_price = 34\n    racket_price = 63\n\n    # Benson and Clive's money after the purchases\n    benson_after = benson - calculator_price\n    clive_after = clive - racket_price\n\n    # They have the same amount of money left\n    equation1 = Eq(benson_after, clive_after)\n\n    # The sum of their money before the purchases\n    equation2 = Eq(benson + clive, total_money)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle, eddie = symbols('belle eddie')\n    belle_sticks = 49\n    eddie_gives = 11\n\n    # Equation: After giving 11 sticks, Eddie has the same number as Belle\n    equation = Eq(belle_sticks + eddie_gives, eddie - eddie_gives)\n\n    # Solve the equation\n    solution = solve(equation, eddie)\n\n    # Eddie's initial number of sticks\n    return solution[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_posts = 2\n    # Since there is a lamp post at each end, we subtract one from the total number\n    length_of_road = (num_lamp_posts - 1) * distance_between_posts\n    return length_of_road\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    # Simple addition\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    warmer_by = 12\n\n    exeter_temp = glasgow_temp + warmer_by\n\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    result = (5/11 + 2/27) * 11 + 5/27\n    return result\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of coins John has as \"john\" and the number Kofi has as \"kofi\".\n    john, kofi = symbols('john kofi')\n\n    # The total number of coins they have is 25.\n    # John gives Kofi 4 coins.\n    # Kofi will have 3 fewer coins than John after the exchange.\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    # Solving the equations will give us the number of coins each of them has.\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea / 2\n    tea_to_give = tea_each - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    # Since we can form numbers with 1, 2, or 3 digits, we need to calculate all possible permutations\n    # for each of these cases and add them up.\n\n    # Digits given:\n    digits = ['2', '4', '6']\n\n    # Calculating permutations for 1-digit numbers\n    one_digit_numbers = len(list(permutations(digits, 1)))\n\n    # Calculating permutations for 2-digit numbers\n    two_digit_numbers = len(list(permutations(digits, 2)))\n\n    # Calculating permutations for 3-digit numbers\n    three_digit_numbers = len(list(permutations(digits, 3)))\n\n    # Total number of different natural numbers that can be formed\n    total_numbers = one_digit_numbers + two_digit_numbers + three_digit_numbers\n\n    return total_numbers\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the number of normal rabbits and 's' be the number of special rabbits\n    r, s = symbols('r s')\n\n    # Normal rabbits have 1 head each, special rabbits have 3 heads each, and together there are 53 heads\n    equation1 = Eq(r + 3*s, 53)\n\n    # Normal rabbits have 4 feet each, special rabbits have 2 feet each, and together there are 102 feet\n    equation2 = Eq(4*r + 2*s, 102)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, s))\n\n    return solutions\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = (10 * 100) - total_cost\n    return change\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = (18 + 2) + 16\n    return ans\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    getcontext().prec = 501  # Set precision to 501 to ensure we get 500 digits after the decimal\n    fraction = Decimal(1) / Decimal(70)\n    fraction_str = str(fraction)[2:]  # Remove the \"0.\" at the beginning\n\n    ans = int(fraction_str[499])  # Get the 500th digit after the decimal point (index 499)\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    sweets_to_neelesh = 4 + 1  # Neelesh eats one sweet, so we add it back\n    total_sweets = sweets_to_neelesh * 6  # Since Neelesh got 1/6th of the sweets\n    sweets_left_with_ayesha = total_sweets - sweets_to_neelesh\n\n    return sweets_left_with_ayesha\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper_weight, iron_weight = symbols('copper_weight iron_weight')\n\n    equation1 = Eq(8 * copper_weight + 9 * iron_weight, 135)\n    equation2 = Eq(6 * copper_weight + 3 * iron_weight, 75)\n\n    solutions = solve((equation1, equation2), (copper_weight, iron_weight))\n\n    return solutions[copper_weight]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum([1 / (i * (i + 1)) for i in range(1, 20, 2)])\n    denominator = sum([1 / (i * (20 + 11 - i)) for i in range(11, 16)])\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of gummy bears and y be the number of lollipops\n    x, y = symbols('x y')\n\n    # Initial ratios\n    equation1 = Eq(x / y, 5 / 7)\n\n    # After adding 120 pieces to each pile\n    equation2 = Eq((x + 120) / (y + 120), 4 / 5)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total number of pieces after adding 120 to each pile\n    total_pieces_now = solutions[x] + solutions[y] + 240\n\n    return total_pieces_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if gcd(a, b) == 1 and a < b:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    total_marbles = 560\n    marbles_in_A = 80\n    remaining_marbles_for_B_and_C = total_marbles - marbles_in_A\n    \n    # Let marbles_in_C be x, then marbles_in_B is 2x\n    # Therefore, x + 2x = remaining_marbles_for_B_and_C\n    # Solve for x\n    marbles_in_C = remaining_marbles_for_B_and_C / 3\n\n    return marbles_in_C\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    # Given last number and its position in sequence\n    last_term = 31\n    term_position = 10\n    common_difference = 3\n    \n    # Calculate first term\n    first_term = last_term - (term_position - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    # Define the repeating numbers\n    numbers = [5, 15, 17, 23]\n    \n    # Calculate the sum multiplied by the number of repetitions\n    ans = sum(numbers) * 3\n    \n    return ans\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    terms = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to base 10 to perform the subtraction\n    num1 = int(\"12101\", 3)\n    num2 = int(\"2210\", 3)\n    \n    # Perform the subtraction in base 10\n    result_base10 = num1 - num2\n    \n    # Convert the result back to base 3\n    ans = ''\n    while result_base10:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n    \n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize variables\n    max_numbers = range(1, 21) # List of the first 20 positive integers\n    largest_n = 0\n    best_combination = []\n\n    # Iterate through all combinations to find the largest n\n    for n in range(1, 21):\n        found = False\n        # Check all combinations of size n\n        for i in range(1 << 20):\n            if bin(i).count('1') == n:\n                combination = [j+1 for j in range(20) if (i >> j) & 1]\n                valid = True\n                for k in range(n):\n                    for l in range(k+1, n):\n                        if abs(combination[k] - combination[l]) == 5:\n                            valid = False\n                            break\n                    if not valid:\n                        break\n                if valid:\n                    found = True\n                    if n > largest_n:\n                        largest_n = n\n                        best_combination = combination\n                    break\n        if not found:\n            # If no valid combination is found, we have the answer\n            break\n    \n    return largest_n\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    equation1 = Eq(cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John's current age and his mother's current age\n    john, mother = symbols('john mother')\n\n    # The first condition, John's age in 8 years is the same as his mother's age 20 years ago\n    eq1 = Eq(john + 8, mother - 20)\n\n    # Since we are looking for the difference in age when mother was 5 times John's age,\n    # we establish their ages at that point in time\n    # Let the difference in their ages be \"diff\"\n    diff = john - (mother - 5*john)\n\n    # Solve the system of equations\n    # diff is the answer we are looking for\n    solution = solve((eq1, diff), (john, mother))\n\n    # The age difference remains constant so we can return the age difference\n    return solution[diff]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    result = ((2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)) / ((2017 + 1/3) - 2016.875) * (17) * (3 + 23/32)\n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for B in range(1, 10):\n        for one in range(10):\n            pencils_total = int(f\"{B}{one}{B}\")\n            if pencils_total % 44 == 0:\n                return pencils_total // 44\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of letters each person wrote\n    kevin, sara, james = symbols('kevin sara james')\n\n    # Kevin wrote 30 more letters than Sara\n    equation1 = Eq(kevin, sara + 30)\n\n    # James wrote 40 more letters than Sara\n    equation2 = Eq(james, sara + 40)\n\n    # Altogether, they wrote 160 letters\n    equation3 = Eq(kevin + sara + james, 160)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    # Number of letters Kevin wrote\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(4, 6, 7)\n    return ans\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    import math\n    \n    tom_time_per_lap = 24\n    william_time_per_lap = 8\n    \n    lcm_time = (tom_time_per_lap * william_time_per_lap) // math.gcd(tom_time_per_lap, william_time_per_lap)\n    \n    return lcm_time\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n    solutions = solve(equation, reema)\n\n    return solutions[reema]\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "from sympy import symbols, lcm\n\ndef solution():\n    M = symbols('M')\n    \n    # Since there are 9 divisors and 9 different non-zero remainders are required,\n    # the remainders will be the numbers from 1 to 9 in some order.\n    # To find the smallest M, we consider the following conditions:\n    # M % 2 = 1 (as 1 is the smallest non-zero remainder we can have for mod 2)\n    # M % 3 = 2 (as 1 is already used for mod 2, use the next smallest remainder)\n    # M % 4 = 3 (following the same logic)\n    # ...\n    # M % 10 = 9 (using the largest remainder possible)\n    # To satisfy all these conditions, M must be one less than a number that is a common multiple of 2 to 10\n    # This is because (common multiple - 1) % divisor = divisor - 1, which gives us our sequence of remainders 1 to 9.\n    \n    least_common_multiple = lcm(list(range(2, 11)))\n    M = least_common_multiple - 1\n\n    return M\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 into its prime factors and get the factor exponents\n    factors = factorint(28)\n    \n    # To make a perfect square, each prime factor's exponent must be even.\n    # We therefore multiply by each prime factor raised to the power to make it even, if it's not already even.\n    smallest_multiple = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            smallest_multiple *= prime\n    \n    return smallest_multiple\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    fence_length = 480\n    post_interval = 4\n    # We add one more post because there is a post at each end of the fence\n    posts_needed = (fence_length // post_interval) + 1\n    \n    return posts_needed\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):  # a cannot be zero as it is a two-digit number\n        for b in range(10):  # b can be zero\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    result = (612 // 34) * 25\n    return result\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = sum([10, 20, 30, 50, 60, 70])\n    negative_sum = sum([6, 16, 26, 46, 56, 66])\n    \n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Lunch finished at 2:50 pm\n    lunch_finished_at = datetime.strptime(\"14:50\", \"%H:%M\")\n\n    # Benson spent 10 minutes playing after reaching home\n    # He watched TV for another 20 minutes, and had lunch for 20 minutes\n    total_minutes_before_lunch = 10 + 20 + 20\n\n    # Calculate the time when Benson reached home\n    time_reached_home = lunch_finished_at - timedelta(minutes=total_minutes_before_lunch)\n\n    # Convert time to the required string format\n    return time_reached_home.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Consider A and B as one entity since they have to be together,\n    # so there are (6 - 1) entities to arrange\n    entities_to_arrange = factorial(5)\n\n    # Now A and B can swap positions within their entity, which is 2! ways\n    ab_arrangements = factorial(2)\n\n    # Total arrangements are the product of arranging entities and AB arrangements\n    total_arrangements = entities_to_arrange * ab_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_population = 64\n    for year in range(5):\n        initial_population = (5 * initial_population) / 2\n    return int(initial_population)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution # Assign the function to the variable, without calling it"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    # Start with the largest two-digit number and move downwards.\n    for number in range(99, 9, -1):  # The range of two-digit numbers is 10 to 99.\n        if (number % 4 == 3) and (number % 5 == 3):  # The number should give a remainder of 3 when divided by 4 and 5.\n            return number  # The largest such number is the answer.\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the number of steps the escalator has\n    # If Peter walks at 1 step per second, and he takes 10 steps:\n    # 10 + 10s = x, where s is the speed of the escalator in steps per second\n    # If Peter walks at 2 steps per second, and he takes 16 steps:\n    # 16 + 16s = x\n\n    # Now we have two equations:\n    # 10 + 10s = x\n    # 16 + 16s = x\n    # we can equate the right side of the equations and solve:\n    # 10 + 10s = 16 + 16s\n\n    # Now we solve for s\n    s = symbols('s')\n    equation = Eq(10 + 10*s, 16 + 16*s)\n    solution = solve(equation, s)\n\n    # Calculate the number of steps the escalator has using one of the given situations:\n    # x = 10 + 10s\n    escalator_steps = 10 + 10 * solution[s]\n\n    return int(escalator_steps)\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 * purple / 5)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    class_size = total_sweets // min_sweets_per_student\n\n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    return (246 * 135) + (2 * 135)\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval_length = 5\n\n    number_of_trees = (road_length // interval_length) + 1\n\n    return number_of_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n    sum_of_values = tens + hundredths + thousandths\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25 / 100\n    total = 1200\n    result = percentage * total\n    return result\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    height_difference = 30\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n    children = (total_stickers - remaining_stickers) // stickers_per_child\n    return children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel * 1.3)\n    total_sum = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation, total_sum), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_to_sally = total_blocks / 4\n    remaining_blocks = total_blocks - given_to_sally\n    return int(remaining_blocks)\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # Hundreds digit can only be 2 or 4 (even and <5 to have a larger tens digit)\n        for tens in range(hundreds + 1, 10, 2):  # Tens digit must be larger than hundreds and even\n            ones = 2 * hundreds  # Ones digit is twice the hundreds digit\n            if ones > 9 or tens % 2 != 0 or ones % 2 != 0:  # Check if ones digit is valid and all are even\n                continue\n            number = hundreds * 100 + tens * 10 + ones\n            if number % 2 == 0 and number % 9 == 0:  # Check divisibility by 2 and 9\n                return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, ken = symbols('sally ken')\n    \n    # Original ratio equation: sally / ken = 5 / 7\n    equation1 = Eq(sally / ken, 5 / 7)\n    \n    # After Ken gives 24 chocolates to Sally, Sally has twice as much as Ken\n    equation2 = Eq(sally + 24, 2 * (ken - 24))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, ken))\n    \n    return solutions[ken]\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one color pencil and y be the cost of one notebook\n    x, y = symbols('x y')\n\n    # 5 color pencils and 6 notebooks cost $17\n    equation1 = Eq(5 * x + 6 * y, 17)\n\n    # 8 color pencils and 6 notebooks cost $20\n    equation2 = Eq(8 * x + 6 * y, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total cost of 1 color pencil and 1 notebook\n    total_cost = solutions[x] + solutions[y]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    # Bill beyond the initial 40 free hours\n    extra_bill = 82\n    \n    # Prices for different segments\n    price_40_to_50 = 5\n    price_50_to_60 = 8\n    price_above_60 = 15\n    \n    # Calculate the extra hours if the bill was for 40-50 hours segment\n    if extra_bill <= (50 - 40) * price_40_to_50:\n        extra_hours = extra_bill / price_40_to_50\n    # Calculate the extra hours if the bill was for 50-60 hours segment\n    elif extra_bill <= (50 - 40) * price_40_to_50 + (60 - 50) * price_50_to_60:\n        extra_hours = 10 + (extra_bill - (50 - 40) * price_40_to_50) / price_50_to_60\n    # Calculate the extra hours if the bill was above 60 hours\n    else:\n        extra_hours = 20 + (extra_bill - (50 - 40) * price_40_to_50 - (60 - 50) * price_50_to_60) / price_above_60\n    \n    # Total hours parked is the free hours plus extra hours\n    total_hours_parked = 40 + extra_hours\n    \n    return int(total_hours_parked)\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n\n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_triangle = 3\n    sides_in_square = 4\n    \n    number_thought = (2 * sides_in_square) - sides_in_triangle\n    \n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_hourly_rate = 7.50\n    increase_percentage = 12\n\n    new_hourly_rate = original_hourly_rate * (1 + increase_percentage / 100)\n    \n    return new_hourly_rate\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    total_pages = 0\n    current_digit_count = 0\n    digit_len = 1\n\n    while current_digit_count < digits:\n        num_pages_this_digit_len = (10 ** digit_len - 10 ** (digit_len - 1))\n        if current_digit_count + num_pages_this_digit_len * digit_len <= digits:\n            current_digit_count += num_pages_this_digit_len * digit_len\n            total_pages += num_pages_this_digit_len\n        else:\n            remaining_digits = digits - current_digit_count\n            total_pages += remaining_digits // digit_len\n            break\n        digit_len += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent_weekly = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_total = (amy_weekly - amy_spent_weekly) * weeks\n\n    return joanna_total - amy_total\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic = symbols('magic')\n\n    first_num = 57 + magic\n    second_num = 9 + magic\n\n    equation = Eq(first_num, 4 * second_num)\n\n    magic_number = solve(equation, magic)\n\n    return magic_number[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    # Choose 1 teacher in 2 ways\n    teacher_ways = 2  \n    # Choose 4 students with at least 1 female\n    for i in range(1, 5):\n        # i is the number of female students, so 4-i is the number of male students\n        female_ways = comb(6, i)\n        male_ways = comb(7, 4 - i)\n        total_ways += teacher_ways * female_ways * male_ways\n    return total_ways\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(3 * number + 6, number + 16)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n\n    months_to_pay_debt = debt / monthly_salary\n\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = 0\n    for i in range(1, 8):\n        ans += (10 * i) - (6 + (i - 1) * 10)\n    ans += 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    positions_difference = 15 - 10\n\n    common_difference = term_difference / positions_difference\n    \n    twelfth_term = tenth_term + (2 * common_difference)\n    \n    return int(twelfth_term)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    degree_x = 3\n    # The degree of the monomial -x^3y^(2n) is the sum of the exponents of x and y\n    # Since the degree is 5, then 3 + 2n = 5 --> 2n = 5 - 3 -> 2n = 2\n    degree_y = 5 - degree_x\n    n = degree_y // 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "from fractions import Fraction\n\ndef solution():\n    milk_per_cup = Fraction(2, 3)\n    tea_per_cup = Fraction(3, 5)\n    cups = 45\n\n    total_milk = milk_per_cup * cups\n    total_tea = tea_per_cup * cups\n\n    total_amount = total_milk + total_tea\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    score = 17\n    total_marks = 20\n    percentage = (score / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    book_price = symbols('book_price')\n    \n    # Define the equation: 8*book_price + 3*0.40 = 3*book_price + 8*0.40 + 1.00\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1.00)\n    \n    # Solve the equation\n    book_price_value = solve(equation, book_price)[0]\n    \n    return book_price_value\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given the median of a list of numbers in increasing order is 20\n    # n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19 is the list\n    # There are 10 numbers in the list, so the median is the average of the 5th and 6th numbers\n    # The 5th number is n+7 and the 6th number is n+8\n    # Hence, the median is (n+7 + n+8) / 2 = 20\n    # 2n + 15 = 40\n    # n = 12.5\n\n    n = 12.5\n\n    # The mean is the sum of all numbers divided by the count of the numbers\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    # Formula for sum of first n natural numbers is n * (n + 1) / 2\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of gummies bought by each girl\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Each gummy bear costs 6 pence, which is 0.06 pounds\n    cost_per_gummy = 0.06\n    \n    # The total cost they spent is 3.42 pounds\n    total_cost = 3.42\n    \n    # Equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)  # Angela buys two more gummy bears than Bernice\n    equation2 = Eq(bernice, candice + 8)  # Bernice buys eight more gummy bears than Candice\n    equation3 = Eq(angela*cost_per_gummy + bernice*cost_per_gummy + candice*cost_per_gummy, total_cost)  # Together they spend 3.42 pounds\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    # Extract the solution for the number of gummy bears Angela buys\n    angela_gummies = solutions[angela]\n    \n    return angela_gummies\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n    containers_needed = total_juice / per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n    non_shaking_handshakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n\n    all_handshakes = total_members * (total_members - 1) // 2\n    handshakes_that_happened = all_handshakes - non_shaking_handshakes\n\n    return handshakes_that_happened\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the smallest of the three numbers be n.\n    # Then the next two consecutive numbers are n+1 and n+2.\n    # Their sum is 3n + 3. The equation is then: 3n + 3 = 60.\n    # Solving for n we have:\n\n    n = (60 - 3) // 3\n\n    # The largest number is then n+2:\n    largest_number = n + 2\n\n    return largest_number\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let the weights of the three apples be a, b, and c, with a being the heaviest and c being the lightest.\n    # The sum of the weights of the three apples is a + b + c.\n    # If Tim eats the largest apple, the mean weight of the remaining two apples (b and c) is 70 grams.\n    # So, (b + c)/2 = 70 -> b + c = 140.\n    # If Tim eats the lightest apple, the mean weight of the remaining two apples (a and b) is 105 grams.\n    # So, (a + b)/2 = 105 -> a + b = 210.\n\n    # We have two linear equations:\n    # b + c = 140 (1)\n    # a + b = 210 (2)\n\n    # Subtracting (1) from (2), we get a - c = 70.\n    # Which is the weight difference between the heaviest apple and the lightest apple.\n\n    weight_difference = 70\n    return weight_difference\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Since we do not have information about what A represents,\n    # it's impossible to provide a definitive answer to this question.\n    # The value of A is unknown without further context or information.\n    A = None\n    return A\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for x in range(1, 10):  # single digit number cannot be 0, and must be less than 10\n        if int(str(x) + '0') - x == 27:\n            return x\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11\n    \n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # As Bob is always the 3rd in line, the array must be 3x3.\n    # In a 3x3 array, he can be the 3rd from any direction.\n    \n    num_animals = 3 * 3\n    return num_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # Equations based on the height of the coins\n    equation1 = Eq(6 * one_cent, 5 * two_cent)\n    equation2 = Eq(4 * one_cent, 3 * five_cent)\n\n    # Total number of coins\n    equation3 = Eq(one_cent + two_cent + five_cent, 124)\n\n    # All three stacks must have the same height\n    # This gives us a common multiple of the height of each type of coin\n    equation4 = Eq(one_cent / 6, two_cent / 5)\n    equation5 = Eq(one_cent / 6, five_cent / 4)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (one_cent, two_cent, five_cent))\n\n    # Calculating the total value of all these coins\n    total_value = solutions[one_cent] + 2 * solutions[two_cent] + 5 * solutions[five_cent]\n\n    return total_value\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # There are 41 plum trees, so there are 40 intervals of 4m each\n    # Total distance covered by plum trees = number of intervals * distance between trees\n    plum_tree_distance = (41 - 1) * 4\n    \n    # Pine trees are planted at 5m intervals, including both ends of the road\n    # To find out how many pine trees there are, we divide the total distance by the interval and add 1\n    pine_trees = (plum_tree_distance // 5) + 1\n    \n    return pine_trees\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    # Smallest multiple of 11 greater than 100\n    smallest_multiple = (100 // 11 + 1) * 11\n\n    # Largest multiple of 11 less than 300\n    largest_multiple = (300 // 11) * 11 - 11\n    \n    # Sum of smallest and largest multiples\n    sum_multiples = smallest_multiple + largest_multiple\n\n    return sum_multiples\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    difference_in_salary = 3040 - 2800\n    correct_total_salary = incorrect_total_salary + difference_in_salary\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water in Container B\n    x = symbols('x')\n\n    # Container A has 350 mL more water than Container B\n    # After spilling 500 mL, Container B has twice as much water as Container A\n    # Equation: x = 2 * (x + 350 - 500)\n    equation = Eq(x, 2 * (x + 350 - 500))\n\n    # Solve the equation\n    amount_in_B = solve(equation, x)[0]\n\n    # Calculate amount in Container A before spill\n    amount_in_A = amount_in_B + 350\n\n    return amount_in_A\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # Initialize the maximum number of red pens we found so far\n    max_red_pens = 0\n    \n    # Let's define g as the number of green pens\n    # We iterate through possible values of green pens\n    for g in range(1, 100):\n        # Calculate the number of blue and red pens using the given ratios\n        b = (2/5) * g  # ratio of blue pens to green pens is 2:5\n        r = (1/4) * g  # ratio of green pens to red pens is 4:1\n        \n        # The total number of pens should be an integer, so we check that\n        # And also check that the total is less than 100\n        if b.is_integer() and r.is_integer() and (b+g+r) < 100:\n            if r > max_red_pens:  # We're looking for the greatest possible number of red pens\n                max_red_pens = int(r)\n    \n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    total_money = 200\n    books_cost = total_money * 0.25\n    money_after_books = total_money - books_cost\n    dvd_cost = money_after_books * 0.20\n    money_left = money_after_books - dvd_cost\n    return money_left\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    # Since there are 12 months in a year, the algebraic expression for the monthly produced components would be:\n    monthly_components = m / 12\n    return monthly_components\n\n# Given m as an example, replace it with the actual amount of components to call the function.\n# m = <number_of_components_produced_last_year>\n# ans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # Start with the largest six-digit palindrome\n    for i in range(999, 99, -1):\n        palindrome = int(str(i) + str(i)[::-1])\n\n        # Check if the palindrome is a multiple of 6\n        if palindrome % 6 == 0:\n            return palindrome\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_an_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83\n    too_short_cm = 10\n    too_short_m = too_short_cm / 100\n\n    garage_piece_length_m = desired_length_m - too_short_m\n\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_marbles = symbols('initial_marbles')\n\n    # Wei Yan gave 3/8 of his marbles to his friends\n    remaining_after_friends = initial_marbles * (5/8)\n    \n    # Wei Yan gave 5/7 of the remaining marbles to his brother\n    remaining_after_brother = remaining_after_friends * (2/7)\n    \n    # His cousin gave him 408 marbles\n    final_marbles = remaining_after_brother + 408\n\n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_marbles, 2 * initial_marbles)\n\n    # Solve the equation\n    solution = solve(equation, initial_marbles)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for pins and needles\n    pins, needles = symbols('pins needles')\n\n    # Grace had a total of 2540 pins and needles at first\n    total_pins_needles = pins + needles\n    \n    # After she sold 1820 pins\n    pins_left = pins - 1820\n    \n    # and 4/5 of the needles\n    needles_left = needles - 4/5 * needles\n    \n    # she had an equal number of pins and needles left\n    equal_pins_needles = Eq(pins_left, needles_left)\n    \n    # Form the equation considering the total pins and needles\n    total_equation = Eq(total_pins_needles, 2540)\n    \n    # Solve the equations\n    solutions = solve((total_equation, equal_pins_needles), (pins, needles))\n    \n    return solutions[needles]\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    sequence = [8, 8, 3, 3, 2, 5]  # This is the repeating pattern\n    total_numbers = 41\n    sum_pattern = sum(sequence)  # Sum of one repetition of the pattern\n    pattern_length = len(sequence)\n\n    # Calculate how many full patterns are within 41 numbers\n    full_patterns = total_numbers // pattern_length\n\n    # Calculate the sum of those full patterns\n    sum_full_patterns = sum_pattern * full_patterns\n\n    # Calculate the remaining numbers after full patterns\n    remaining_numbers = total_numbers % pattern_length\n\n    # Calculate the sum of the remaining numbers\n    sum_remaining_numbers = sum(sequence[:remaining_numbers])\n\n    # Total sum is the sum of full patterns and remaining numbers\n    sum_total = sum_full_patterns + sum_remaining_numbers\n    \n    return sum_total\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2 / 7) * 315\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for num_2p in range(0, 47 // 2 + 1):\n        for num_5p in range(0, 47 // 5 + 1):\n            if (num_2p * 2) + (num_5p * 5) == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = ((9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11)\n    denominator = (1 / 8 - 1 / 9 + 1 / 10 - 1 / 11)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # The difference in their ages remains constant.\n    age_difference = 41 - 14\n\n    # Searching for the next age reversing moment after Brian turned 14.\n    # The father's age will be a multiple of 10 plus Brian's age.\n    for brian_age in range(15, 100):\n        fathers_age = brian_age + age_difference\n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age) == str(fathers_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "from sympy import symbols, solve\n\ndef solution():\n    x = symbols('x')\n    equation = 52 - (4*x - 3) - 47\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    # This is a case of distributing n identical items into r distinct groups.\n    count = 0\n    # Iterate through the possible number of apples in the first pile.\n    for x1 in range(1, 11):\n        # Iterate through the possible number of apples in the second pile.\n        for x2 in range(1, 11 - x1):\n            # The third pile will consist of the remaining apples.\n            x3 = 11 - (x1 + x2)\n            # Ensure the third pile has at least one apple for distinct piles.\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    first_number_rounded = round(654876, -2)\n    second_number_rounded = round(279745, -2)\n    estimated_difference = first_number_rounded - second_number_rounded\n    return estimated_difference\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time to pass a tree in seconds\n    distance = 480  # length of the train in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    sequence = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    return 49 + 83\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 + x2 == 8 and x1 != x2:\n                count += 1\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 8 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n                for x4 in range(1, 8):\n                    if x1 + x2 + x3 + x4 == 8 and len(set([x1, x2, x3, x4])) == 4:\n                        count += 1\n                    for x5 in range(1, 8):\n                        if x1 + x2 + x3 + x4 + x5 == 8 and len(set([x1, x2, x3, x4, x5])) == 5:\n                            count += 1\n                        for x6 in range(1, 8):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8 and len(set([x1, x2, x3, x4, x5, x6])) == 6:\n                                count += 1\n                            for x7 in range(1, 8):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 8 and len(set([x1, x2, x3, x4, x5, x6, x7])) == 7:\n                                    count += 1\n    # Subtracting combinations where all numbers are equal (since we need sum of two or more \"different\" numbers)\n    if 8 % 2 == 0: count -= 1 # excluding (4, 4)\n    if 8 % 4 == 0: count -= 1 # excluding (2, 2, 2, 2)\n    if 8 % 3 == 0: count -= 1 # excluding (2, 2, 2, 2) repeated for (8 / 3) rounded down\n    if 8 % 5 == 0: count -= 1 # excluding (1, 1, 1, 1, 1, 1, 1, 1) repeated for (8 / 5) rounded down\n    if 8 % 6 == 0: count -= 1 # excluding (1, 1, 1, 1, 1, 1, 1, 1) repeated for (8 / 6) rounded down\n    if 8 % 7 == 0: count -= 1 # excluding (1, 1, 1, 1, 1, 1, 1, 1) repeated for (8 / 7) rounded down\n\n    # Divide by 2 because each pair is counted twice, e.g. (1,7) and (7,1)\n    return count // 2\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    return 20.6 + 5.2 + 1.4 + 4.8\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    result = (2/5) * 30\n    return result\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    fraction = 5 / 8\n    total = 4000\n\n    return fraction * total\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    total_lampposts = 113\n    distance_between_lampposts = 8\n\n    length_of_road = (total_lampposts - 1) * distance_between_lampposts\n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) // (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n\n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    sum_erased = 0\n    \n    for number in range(1, 51):\n        if '3' in str(number):\n            sum_erased += number\n\n    return sum_erased\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pasta_choices = 4\n    sauce_choices = 3\n    topping_choices = 3\n    \n    ans = pasta_choices * sauce_choices * topping_choices\n    \n    return ans\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # The worst case scenario would involve the warden trying each key for each classroom\n    # and always reaching the correct key last. Hence, for the first classroom he would\n    # try all 10 keys, for the second 9 keys, and so on until the last classroom where\n    # he would only need to try the last remaining key.\n    # This is a sum of the first 10 natural numbers minus 1 (because the last classroom\n    # will have only 1 key left to try and it's not really a 'try').\n    \n    num_classrooms = 10\n    total_tries = sum(range(1, num_classrooms + 1))\n    \n    return total_tries - 1\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    guests = 153\n    per_bag = 12\n\n    poppers_needed, last_bag = divmod(guests, per_bag)\n\n    return per_bag - last_bag\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    ones_digit = pow(7, 2023, 10)  # Using modular exponentiation to find the last digit\n    return ones_digit\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import Rational, sqrt\n\n    numerator = (Rational(-40, 3)**Rational(1, 3)) * (Rational(409, 99)**2)\n    denominator = Rational(5924, 100) - sqrt(Rational(111, 9))\n    ans = float(numerator / denominator)\n    \n    return round(ans, 3)\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    number_str = ''.join(str(i) for i in range(1, 31))\n    number_str_sans_46 = number_str[46:]\n    \n    if number_str_sans_46[0] == '0':\n        zero_index = 0\n        while number_str_sans_46[zero_index] == '0':\n            zero_index += 1\n        smallest_number = '1' + number_str_sans_46[zero_index:]\n    else:\n        smallest_number = '1' + number_str_sans_46\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 5 == 3 and number % 6 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the smallest 5-digit number where first and last digits are the same)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999 (all digits are 9)\n    greatest_6_digit_palindrome = 999999\n    \n    # Difference between the greatest 6-digit palindrome and the least 5-digit palindrome\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_to_pick = 2\n\n    ans = comb(total_children, children_to_pick)\n    \n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4\n    girls = total_members * (3 / 4)\n\n    return girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    return solutions[banana] + solutions[apple]\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age_now = 8\n    lucy_age_now = 36\n    target_sum_age = 60\n\n    years_later = (target_sum_age - (sara_age_now + lucy_age_now)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    total_seating = (two_seater_benches * 2) + (three_seater_benches * 3)\n    \n    return total_seating\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16  # 1 pound coins, hence we need at least 16 pounds to cover the cost\n    change = payment - book_cost\n    return round(change, 2)  # rounding to 2 decimal places to get the exact change in pounds\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    ans = (99 - 101) + (103 - 105) + (107 - 109) + (111 - 113) + (115 - 117) + 119\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    mixed_number = 201 + 1/7\n    division_result = mixed_number / 8\n    A = division_result - 1/7\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Initial condition equation\n    initial_condition = Eq(footballs, (2/5) * basketballs)\n    \n    # After selling 16 basketballs\n    after_selling = Eq(footballs, (2/3) * (basketballs - 16))\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, after_selling), (footballs, basketballs))\n    \n    # Sum of footballs and basketballs before selling\n    total = solutions[footballs] + solutions[basketballs]\n    \n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother and y be the current age of the younger brother.\n    x, y = symbols('x y')\n\n    # When the age of the older brother was y, the younger brother was 12.\n    past_age_condition = Eq(x - (y - 12), y)\n\n    # When the younger brother becomes x, the older brother will be 27.\n    future_age_condition = Eq(y + (x - y), 27)\n\n    # Solve the system of equations.\n    solutions = solve((past_age_condition, future_age_condition), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona must take out at least one glove of each color to ensure she has all colors.\n    # This would be 4 colors * 1 glove = 4 gloves.\n    # Then, she must take out one more glove to ensure she has a matching pair.\n    # Since there are 5 colors, the worst case scenario is that she takes one of each of the first 4 colors,\n    # and the next one she takes (the 5th glove) must match at least one of the previously taken.\n    \n    return 4 + 1  # (one for each color, and one more for the pair)\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    start = 30\n    end = 82\n    multiple_of = 8\n\n    first_multiple = (start // multiple_of) + (1 if start % multiple_of != 0 else 0)\n    last_multiple = end // multiple_of\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    \n    initial_sam = peter + 40\n    sam_gave = 0.20 * initial_sam\n    peter_after_sam_gave = peter + sam_gave\n    peter_gave = 0.25 * peter_after_sam_gave\n    final_sam = initial_sam - sam_gave + peter_gave\n    final_peter = peter_after_sam_gave - peter_gave\n\n    equation = Eq(final_sam - final_peter, 96)\n\n    result = solve((equation), (peter))\n\n    return result[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    # Every two lines can form a junction unless they are parallel.\n    # So, we need to find combinations of 2 lines from 13 lines\n    # which is basically 13 choose 2.\n\n    from math import comb\n    ans = comb(13, 2)\n\n    return ans\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increase_rate = 0.10\n    decrease_rate = 0.10\n\n    # Increase the price by 10%\n    increased_price = original_price * (1 + increase_rate)\n    \n    # Decrease the price by 10%\n    final_price = increased_price * (1 - decrease_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert time spent to hours from minutes\n    total_time_in_hours = 7.2 / 60\n\n    # Relative speed of the teacher when going towards the head of the line\n    relative_speed_front = 12 + 8  # km/h\n\n    # Relative speed of the teacher when returning to the end\n    relative_speed_back = 12 - 8  # km/h\n\n    # Let the length of the line be x\n    # Time spent going to the front is x/relative_speed_front\n    # Time spent going back is x/relative_speed_back\n    # Total time spent is the sum of times spent in both directions\n    # x/relative_speed_front + x/relative_speed_back = total_time_in_hours\n\n    # Solve for x\n    x = (total_time_in_hours) / (1/relative_speed_front + 1/relative_speed_back)\n\n    return x\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # In a single round-robin tournament with n players, each player plays against each other once.\n    # Number of games in a round-robin tournament = n * (n-1) / 2\n    # There are 4 groups, each group having 16/4 = 4 members\n    n = 16 // 4\n    group_games_per_group = n * (n - 1) // 2\n    total_group_games = group_games_per_group * 4  # Since there are 4 groups\n    \n    # In knockout stage, the number of games is always one less than number of players\n    knockout_games = 8 - 1  # Since top 8\n\n    # Total number of games played throughout the contest is sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Let Flora's current age be F\n    # Let her father's current age be D\n    # We know that Flora is 5 years old now. (F = 5)\n    # We also know that two years ago, her father's age was 9 times her age two years ago.\n    # That is, D - 2 = 9 * (F - 2)\n    # Substituting F with 5, we get:\n    # D - 2 = 9 * (5 - 2)\n\n    # Calculate D (father's age)\n    father_age_two_years_ago = 9 * (5 - 2)\n    father_current_age = father_age_two_years_ago + 2\n\n    return father_current_age\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    # Start at 31 as she has more than 30 sweets and stop before 40\n    for sweets in range(31, 40):\n        # Check if the number of sweets can be evenly distributed\n        # among 4 and 6 children\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n    \n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n    \n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n    \n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count_3 = 0\n    for i in range(8, 86):\n        count_3 += str(i).count('3')\n        \n    return count_3\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Let d be the distance from his home to office\n    # Let t be the time it would take to reach the office on time at 4 km/h\n\n    # Speed = Distance / Time\n    # Therefore, Time = Distance / Speed\n\n    # When travelling at 4 km/h he is 20 minutes late\n    # t + 20/60 = d / 4\n\n    # When travelling at 6 km/h he is 10 minutes early\n    # t - 10/60 = d / 6\n\n    # Convert the two equations into a system of linear equations\n    # t + 1/3 = d / 4        (1)\n    # t - 1/6 = d / 6        (2)\n\n    # Solve the system of equations by multiplying (1) by 6 and (2) by 4 and then subtracting them\n    # 6t + 2 = 3/2d          (3)\n    # 4t - 2/3 = 2/3d        (4)\n\n    # Subtract (4) from (3) to find d\n    # 2t + 14/3 = 5/6d\n    # d = (2t + 14/3) / (5/6)\n    # d = (2t + 14/3) * (6/5)\n    # d = (12t + 28) / 5\n\n    # Now we put equation (4) into equation (3)\n    # 6t + 2 = 3/2 * (4t - 2/3)\n    # 6t + 2 = 6t - 1\n    # 3 = 1\n\n    # Since this is impossible, we made a mistake.\n    # Let's try again, simplifying (1) and (2) first:\n    # (1) 4t + 4/3 = d\n    # (2) 6t - 1 = d\n\n    # Set them equal to each other to solve for t:\n    # 4t + 4/3 = 6t - 1\n    # 2t = 4/3 + 1\n    # 2t = 7/3\n    # t = 7/6 hours\n\n    # Now use (1) to solve for d:\n    # 4t + 4/3 = d\n    # 4 * (7/6) + 4/3 = d\n    # 7/3 + 4/3 = d\n    # d = 11/3 km\n\n    # Convert 11/3 km to km\n    d = 11 / 3\n\n    return d\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):  # Iterate through the first 25 even numbers\n        even_number = i * 2  # Calculate the even number\n        count += str(even_number).count('3')  # Count occurrences of '3' in the even number\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    conversion_rate = 1.25  # 1 pound to dollars\n    pence_per_pound = 100   # 100 pence in 1 pound\n\n    value_in_pence = conversion_rate * pence_per_pound\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = 6 * ramen_price\n\n    total_spent = ramen_price + pineapple_juice_price + roasted_duck_price\n\n    return total_spent\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candy = 3\n    # Reverse Ken's action\n    ken_candy = (remaining_candy + 1) * 2\n    remaining_candy += ken_candy\n    # Reverse Nini's action\n    nini_candy = (remaining_candy - 3) * 2\n    remaining_candy += nini_candy\n    # Reverse Ivy's action\n    ivy_candy = (remaining_candy + 2) * 2\n    remaining_candy += ivy_candy\n    # Reverse Eddie's action\n    eddie_candy = (remaining_candy - 1) * 2\n    beginning_candy = eddie_candy\n\n    return beginning_candy\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    distinct_arrangements = set(permutations('CYZZ'))\n    return len(distinct_arrangements)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # Assuming the snail slides the same distance every night,\n    # let's denote the slide distance as 'slide' metres.\n\n    # On the first 5 days, the snail climbs up 7 metres but slides down 'slide' metres each night.\n    # On the 6th day, the snail climbs up only 3 metres (and will climb out without sliding back that night).\n\n    # We set an equation where the total climbing distance minus the total sliding distance\n    # over 5 nights equals 18 - 3 (the height it climbs on the 6th day):\n    # 5 * 7 - 5 * slide = 18 - 3\n    # 35 - 5 * slide = 15\n    # 5 * slide = 35 - 15\n    # slide = 20 / 5\n    slide = (35 - 15) / 5\n\n    return slide\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    eq1 = Eq(girls, 3 * boys)\n    eq2 = Eq(girls * 2 + boys * 3, 99)\n\n    solutions = solve((eq1, eq2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    # Calculate the greatest common divisor of the three class sizes\n    group_size = gcd(12, gcd(16, 20))\n\n    return group_size\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Unit conversion constants\n    cm_per_meter = 100\n    mm_per_meter = 1000\n    feet_per_meter = 3.28084\n\n    # Heights converted to meters\n    height_m = 5                       # already in meters\n    height_cm = 120 / cm_per_meter     # convert from cm to meters\n    height_mm = 50 / mm_per_meter      # convert from mm to meters\n    height_feet = 8 / feet_per_meter   # convert from feet to meters\n\n    # Typical range of human heights in meters (let's consider roughly from 1m to 2.5m)\n    min_height = 1\n    max_height = 2.5\n\n    # Check which heights fall within the typical range\n    correct_estimates = [\n        height for height in [height_m, height_cm, height_mm, height_feet]\n        if min_height <= height <= max_height\n    ]\n\n    # Assuming that there will be only one correct estimate\n    if len(correct_estimates) == 1:\n        correct_height = correct_estimates[0]\n    else:\n        correct_height = None\n\n    # Convert the correct height back to meters for consistency (if needed)\n    ans = None\n    if correct_height == height_cm:\n        ans = '120 cm'\n    elif correct_height == height_mm:\n        ans = '50 mm'\n    elif correct_height == height_feet:\n        ans = '8 feet'\n\n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    average_boys = 74\n    total_participants = 18 + 12\n    average_total = 82\n\n    total_score_boys = total_boys * average_boys\n    total_score_all = total_participants * average_total\n\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / 12\n\n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method to estimate the population size\n    marked = 100\n    caught_in_second = 200\n    marked_in_second = 25\n\n    # The ratio of marked fish in the second catch should be approximately equal\n    # to the ratio of marked fish (100) to the total population.\n    # marked / total_population ≈ marked_in_second / caught_in_second\n    # Solving for total_population gives us the total population estimate.\n    total_population = (marked * caught_in_second) / marked_in_second\n\n    return int(total_population)\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    days_final = (rabbits_initial * days_initial) / rabbits_final\n\n    return int(days_final)\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts each person has\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    # Create equations based on the given information\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    # Calculate the total amount of sweets\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_gave = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_gave\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 39):\n        for three_gram_weights in range(0, 26):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Abigail gets up at 07:40\n    get_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    \n    # 25 minutes later she starts her breakfast\n    breakfast_start_time = get_up_time + timedelta(minutes=25)\n    \n    # Breakfast takes 10 minutes to finish\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    \n    # Her journey takes 35 minutes\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    \n    # She arrives 5 minutes late for registration\n    # So, to find the registration time, we subtract 5 minutes from her arrival time\n    registration_time = arrival_time - timedelta(minutes=5)\n    \n    # Formatting the time to get the answer in HH:MM format\n    ans = registration_time.strftime(\"%H:%M\")\n    \n    return ans\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    def sum_of_cubes(n):\n        return ((n * (n + 1)) // 2) ** 2\n\n    ans = sum_of_cubes(20) - sum_of_cubes(9)\n    \n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    num_quarters = total_amount * quarters_in_one_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_5_assignments = 90 * 5\n    scores_for_4_assignments = 96 + 85 + 89 + 92\n    score_for_5th_assignment = total_score_for_5_assignments - scores_for_4_assignments\n    \n    return score_for_5th_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    num_cards = 0\n    while True:\n        num_cards += 1\n        if num_cards % 4 == 3 and num_cards % 5 == 4 and num_cards % 7 == 6:\n            return num_cards\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    # Number of pupils\n    total_pupils = 1690\n\n    # Let the number of girls be G, then boys = G + 90\n    # G + (G + 90) = total_pupils\n    total_girls = (total_pupils - 90) / 2\n    total_boys = total_girls + 90\n\n    # The ratio of swimming girls to non-swimming girls = 31:49\n    # Let's say 31x girls can swim and 49x girls cannot swim\n    # 31x + 49x = total_girls\n    # 80x = total_girls\n    x = total_girls / 80\n    non_swimming_girls = 49 * x\n\n    # The number of boys who can swim is 120 less than the ones that cannot \n    # Let's say y boys cannot swim and y - 120 can swim\n    # (y - 120) + y = total_boys\n    # 2y - 120 = total_boys\n    # 2y = total_boys + 120\n    y = (total_boys + 120) / 2\n    non_swimming_boys = y\n\n    non_swimming_pupils = non_swimming_girls + non_swimming_boys\n\n    return int(non_swimming_pupils)\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # Since we want to ensure that there are at least 5 different colors with at least 10 pencils for each color,\n    # we can first try to avoid getting 10 pencils of any color by drawing the maximum possible amount from\n    # each of the remaining 4 colors without reaching 10 for any single one.\n\n    # We can draw up to 9 pencils from each of the 4 colors (since we want to avoid having 10 of the same color)\n    max_draws_without_10 = 4 * 9\n    \n    # To ensure the 5 different colors, we draw the next 10 pencils which must be of a different color.\n    # (as the worst case scenario before this would be having all pencils from only 4 different colors)\n    min_draws_for_5th_color = 10\n\n    # Total minimum draws required:\n    total_minimum_draws = max_draws_without_10 + min_draws_for_5th_color\n\n    return total_minimum_draws\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    pupils = 200\n    coach_capacity = 34\n    num_coaches = (pupils + coach_capacity - 1) // coach_capacity\n    return num_coaches\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Pip had 4x sweets and Bud had 7x sweets\n    pip, bud = symbols('pip bud')\n\n    # Equation1 represents the initial ratio of sweets between Pip and Bud\n    equation1 = Eq(pip / bud, 4/7)\n\n    # Equation2 represents the ratio after Santa gave Bud 5 more sweets\n    equation2 = Eq((pip) / (bud + 5), 8/15)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    # Pip's number of sweets\n    return solutions[pip]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    # Total perimeter length (both lengths and widths counted twice)\n    perimeter = 2 * (144 + 204)\n\n    # Wheat plants at the corners are planted once, but counted twice in perimeter\n    # So remove the 4 corner wheat plants from the total to compensate\n    effective_wheat_count = 116 - 4\n\n    # Distance between each wheat plant is the perimeter\n    # divided by the effective number of gaps between wheat plants\n    distance = perimeter / effective_wheat_count\n\n    return distance\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_of_5_powered_20 = 5\n    last_digit_of_7_powered_30 = 7 ** 30 % 10\n\n    ans = (last_digit_of_5_powered_20 * last_digit_of_7_powered_30) % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n    length1 = 39\n    length2 = 52\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(4*A + 4*B, 36)\n    equation2 = Eq(2*A + 3*B, 22)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Assume Joe divides the chocolate bar equally with his friend.\n    num_squares = 16\n    num_people = 2  # Joe and his friend\n    \n    # Joe's share will be half of the total number of squares.\n    joe_share = num_squares / num_people\n    \n    return int(joe_share)\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import isprime\n\n    # We are given primes less than 45 and should be unique\n    primes = [p for p in range(2, 46) if isprime(p)]\n    \n    # First let's use the information provided by B.\n    # B's number minus 1 yields a prime number when 7 is subtracted from B's number.\n    possible_B = [b for b in primes if isprime(b - 8)]\n    \n    # A says that their numbers don't form a correct addition equation.\n    # So we need to check that for any two primes their sum is not a prime.\n    # Since the sum of two primes (except 2) is even, and even numbers greater than 2 are not prime.\n    # The only prime that is even is 2. So A's number cannot be 2.\n    possible_A = [a for a in primes if a != 2]\n    \n    # Now we need to check C:\n    # C, when multiplied by 2 and added to A and B, gives a prime number.\n    # So, C's number must be an odd prime to result in an even number when multiplied by 2.\n    possible_C = [c for c in primes if isprime(c * 2)]\n\n    for A in possible_A:\n        for B in possible_B:\n            for C in possible_C:\n                # We know that 2*C should form a correct addition equation with\n                # A and B. Thus A + B should be equal to 2*C.\n                # We also need to check that all three primes are different.\n                if A != B and B != C and A != C and A + B == 2 * C:\n                    return A + B + C\n\n    return None\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    half_of_999 = 999 / 2\n    return half_of_999\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    children_between = 2\n\n    total_children = (laura_position - 1) + (children_between + 1) + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # Smallest prime number\n    B = 4  # Smallest composite number\n    C = 1  # Neither prime number nor composite number or zero\n    D = 0  # 2 less than the smallest prime number (2 - 2)\n    E = 9  # Largest composite number up to 10\n    F = 5  # Only has factors 1 and 5\n    G = 4  # Greatest factor of 8\n    H = 6  # Lowest multiple of 6\n    \n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    return phone_number\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Charlotte originally had\n    # Reconstruct equations from the given ratios and percentages\n    mary, alexis, x = symbols('mary alexis x')\n    equation1 = Eq(mary, 7/5 * alexis)\n    equation2 = Eq(mary - 0.20 * mary + alexis - 0.20 * alexis, x + 0.80 * x)\n    equation3 = Eq(mary - 0.20 * mary, x + 20)\n\n    solutions = solve((equation1, equation2, equation3), (mary, alexis, x))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    return int(seconds_in_a_day * fraction_of_day)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    import math\n    # Eddie and his mom and dad can be considered as a single unit\n    # Plus the other family members, assuming they are n\n    family_outside_unit = 1 + n\n    \n    # Ways to arrange the family outside the unit\n    arrange_family_outside = math.factorial(family_outside_unit)\n    \n    # Ways to arrange Eddie and his mom and dad within the unit\n    arrange_inside_unit = math.factorial(3)\n    \n    # Total ways is the product of both arrangments\n    total_ways = arrange_family_outside * arrange_inside_unit\n    \n    return total_ways\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5\n    digit_2_count = 3\n    digit_3_count = 2\n\n    # Calculate the total permutations of the digits\n    total_permutations = factorial(total_digits)\n    \n    # Calculate the permutations of the digit 2 and 3 within the number\n    perm_2 = factorial(digit_2_count)\n    perm_3 = factorial(digit_3_count)\n    \n    # Use the formula to get the number of distinct permutations \n    # Divide the total permutations by the repeated permutations of digit 2 and digit 3\n    distinct_numbers = total_permutations // (perm_2 * perm_3)\n    \n    # Remove the permutations that result in numbers with less than four digits\n    # by subtracting permutations where one of the 2s is in front\n    less_than_four_digit_numbers = factorial(total_digits - 1) // (factorial(digit_2_count - 1) * perm_3)\n    ans = distinct_numbers - less_than_four_digit_numbers\n\n    return ans\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for thousands in range(1, 10):  # Thousands digit must be non-zero\n        for tens in range(0, 10):\n            for hundreds in range(0, 10):\n                pips_number = thousands * 1000 + hundreds * 100 + tens * 10 + thousands\n                buds_number = thousands * 1000 + tens * 100 + hundreds * 10 + tens\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    got_off = 42\n    got_on = 60\n    after_station = 322\n\n    before_station = after_station - got_on + got_off\n\n    return before_station\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Using the concept of the Newton's Problem of Cows and Fields\n    # Total amount of grass in the pasture = number of cows * days of feeding\n    \n    grass_for_25_cows_10_days = 25 * 10  # This is a constant amount representing the pasture\n    grass_for_15_cows_20_days = 15 * 20  # This is the same constant amount representing the pasture\n    \n    # Since both products represent the total grass in the pasture, they are equal.\n    \n    total_grass = grass_for_25_cows_10_days  # which is equal to grass_for_15_cows_20_days\n    \n    # Now, find out how many cows can be fed for 50 days using the total amount of grass.\n    # cows_for_50_days * 50 = total_grass\n    cows_for_50_days = total_grass / 50\n    \n    return int(cows_for_50_days)\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    n = 1\n    while n*(n+1)/2 <= 95:\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Initial ratio equation: 3/5 = oranges/lemons\n    equation1 = Eq(3 * lemons, 5 * oranges)\n\n    # New ratio after selling 48 oranges: 1/2 = (oranges - 48)/lemons\n    equation2 = Eq(2 * (oranges - 48), lemons)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    correct_minuend = 166\n    incorrect_difference = 81\n\n    subtrahend = incorrect_minuend - incorrect_difference\n    correct_difference = correct_minuend - subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    # Let x be the number of watermelons sold on the second day.\n    # On the first day, she sold 1/3 of the second day's amount.\n    first_day = 20\n    second_day = 3 * first_day\n    third_day = (5/3) * second_day\n\n    total_sold = first_day + second_day + third_day\n\n    return total_sold\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the 3 maths books as one unit and the 2 English books as one unit.\n    # Now we have 3 (other books) + 1 (maths unit) + 1 (English unit) = 5 units to arrange.\n    units_arrangement = factorial(5)\n    \n    # The 3 maths books can be arranged in 3! ways and the 2 English books in 2! ways.\n    math_books_arrangements = factorial(3)\n    english_books_arrangements = factorial(2)\n    \n    # The total number of arrangements is the product of the arrangements of the units\n    # and the arrangements of books within each unit.\n    total_arrangements = units_arrangement * math_books_arrangements * english_books_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    additional_discount = 100\n    sales_tax = 0.10\n\n    discounted_price = original_price * (1 - discount)\n    member_price = discounted_price - additional_discount\n    final_price = member_price * (1 + sales_tax)\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    num_cakes = 250 / flour_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days Kevin takes off\n    x = symbols('x')\n\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n\n    # Total work done by both\n    # Ivy works for the whole 12 days, Kevin works for (12 - x) days\n    total_work_done = (ivy_rate * 12) + (kevin_rate * (12 - x))\n\n    # Equation representing the total work done to be 1 job\n    equation = Eq(total_work_done, 1)\n\n    # Solve for the unknown x\n    days_off = solve(equation, x)[0]\n\n    return days_off\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ophelia, penelope = symbols('ophelia penelope')\n\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_participants = 30\n    art_participants = 26\n\n    # Applying the Inclusion-Exclusion Principle\n    both_participants = maths_participants + art_participants - total_students\n\n    return both_participants\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    ans = 379 % 6\n    return ans\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count_1s = 0\n    for page_number in range(1, 201):\n        count_1s += str(page_number).count('1')\n    return count_1s\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Worst case: Cindy gets all socks of one color and the first sock of the other color\n    # Total number of socks = all black socks + 1 red sock OR all red socks + 1 black sock\n    # Since both are the same, we choose one scenario, 4 + 1 = 5\n    return 4 + 1\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of different statues\n    r = 4  # number of statues to arrange in a row\n\n    # Calculate the permutation: P(n, r) = n! / (n - r)!\n    ways = factorial(n) // factorial(n - r)\n\n    return ways\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 0.10  # original price in pounds\n    new_price = 1.00       # new price in pounds\n    increase = new_price - original_price  # price increase in pounds\n    percentage_increase = (increase / original_price) * 100  # percentage increase\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_percentage = 8\n\n    total_cost = bracelet_cost * (1 + gst_percentage / 100)\n\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    # Let's denote the number of tricycles as t and bicycles as b.\n    # We know that each tricycle has 3 wheels and each bicycle has 2 wheels.\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    t, b = symbols('t b')\n    \n    # Equation 1: The total number of tricycles and bicycles is 300.\n    eq1 = Eq(t + b, 300)\n    \n    # Equation 2: The total number of tricycle wheels is 180 more than the total number of bicycle wheels.\n    eq2 = Eq(3*t, 2*b + 180)\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (t, b))\n    \n    # We need to find the number of bicycles, which is b\n    return solutions[b]\n\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbits = 14\n    pattern_grey = 2\n\n    # Since 2 grey rabbits are always followed by 1 black and 2 white rabbits in the repeating pattern,\n    # we can find the number of complete patterns by dividing the number of grey rabbits by the grey in one pattern.\n    complete_patterns = grey_rabbits // pattern_grey\n\n    # Each complete pattern consists of 1 black, 2 white, and 2 grey rabbits, so 5 rabbits in total.\n    total_rabbits = complete_patterns * 5\n\n    # Check if there are any remaining grey rabbits that don't form a complete pattern.\n    remaining_greys = grey_rabbits % pattern_grey\n\n    # If there is 1 remaining grey, it means there is also 1 more black and 2 more whites before it.\n    if remaining_greys == 1:\n        total_rabbits += (1 + 2 + remaining_greys)\n\n    return total_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return value_after_years\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # The minimum possible divisor when remainder is non-zero\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    number_minus_6 = 9\n    result_number = number_minus_6 + 6\n    return result_number\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return 2015 * 2015 - 2016 * 2014\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_foil_wrappers = 15\n    neither_chocolate_nor_foil = 9\n\n    chocolate_biscuits = chocolate_foil_wrappers + neither_chocolate_nor_foil - (foil_wrappers - chocolate_foil_wrappers)\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    original_speed, increased_speed, original_time, decreased_time, distance = symbols('original_speed increased_speed original_time decreased_time distance')\n\n    # Equations based on the problem\n    equation1 = Eq(increased_speed, original_speed * 1.25)  # speed increased by 25%\n    equation2 = Eq(decreased_time, original_time - 20/60)  # time decreased by 20 minutes (converted to hours)\n    equation3 = Eq(increased_speed * decreased_time, distance)  # distance is same for increased speed and decreased time\n    equation4 = Eq(original_speed - 45, original_speed * 0.55)  # speed decreased by 45 m/min (45% of original speed)\n    equation5 = Eq(original_time * 1.75, (original_speed - 45) * original_time / original_speed)  # time increased by 75%\n    equation6 = Eq(original_speed * original_time, distance)  # distance is same for original speed and time\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (original_speed, increased_speed, original_time, decreased_time, distance))\n\n    # Return the distance\n    return solutions[distance]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    tongtong_is_correct = (rounded_number == 9764.0)\n    \n    return rounded_number if not tongtong_is_correct else \"Tongtong is correct\"\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    # Let's assume the number of crystals Jason had at first is x.\n    \n    # He sold (x/2 + 10) crystals to Yvonne.\n    # Then he mined 20 more, so now he has (x - (x/2 + 10) + 20).\n    # He sold 14 crystals to Cherlyn, so he has (x - (x/2 + 10) + 20 - 14) crystals left.\n    # Finally, he has 35 crystals left.\n    # Therefore, we can set up the equation: x - (x/2 + 10) + 20 - 14 = 35\n    \n    # Solving for x:\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x - (x/2 + 10) + 20 - 14, 35)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # The number of zeros at the end of a product is determined by the number of 10s we can factor out\n    # Since 10 = 2 * 5, we need to count the number of 2s and 5s in the prime factorization of A\n    # A contains 5 raised to the power of 15 (15 fives) and 2 raised to the power of 10 (10 twos)\n    # The number of zeros will be the minimum of the count of 2s and 5s\n    num_twos = 10\n    num_fives = 15\n\n    return min(num_twos, num_fives)\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    num_permutations = len(list(permutations(digits)))  # All permutations of the digits\n    ans = num_permutations * 4  # Every permutation can have the decimal point in 4 positions\n    return ans\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_and_Bala = 2\n\n    total_people = people_in_front_of_Ali + people_behind_Bala + Ali_and_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    price_per_plant_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100\n    \n    num_plants = budget_pence // price_per_plant_pence\n    \n    return num_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Total dodges (considering all cars are either Ford or Dodge)\n    dodges = total_cars - fords\n\n    # Black cars (considering cars are either black or blue)\n    black_cars = total_cars - blue_cars\n\n    # Blue dodges (total dodges - black dodges)\n    blue_dodges = dodges - black_dodges\n\n    # Blue fords (total blue - blue dodges)\n    blue_fords = blue_cars - blue_dodges\n\n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_balls = 1 + 8 + 10 # Picking one of each colour plus all balls of the other two colours.\n    return total_balls\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    ans = 7.73 - 7.53\n    return ans\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 11*7):  # The number must be less than the LCM of 11 and 7\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Start checking from the smallest composite number, which is 4.\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if B, C, and D are composite numbers\n        if not all(is_composite(number) for number in [A, B, C, D]):\n            A += 1\n        else:\n            break\n    return A + B + C + D\n\ndef is_composite(number):\n    if number < 4:  # The first composite number is 4\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return True\n    return False\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    number_of_working_days = 5  # Monday to Friday\n    \n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n    \n    return total_weekly_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    # Total number of apples\n    total_apples = 50\n    # Total number of children\n    children = 8\n    # Each child gets at least one apple, reserve 7 apples for other 7 children\n    apples_reserved = children - 1\n    # The most apples one child can get is the total minus the reserved apples\n    max_apples = total_apples - apples_reserved\n    \n    return max_apples\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_mark = 3\n    wrong_mark = -2\n    total_score = 125\n    \n    # Assume all answers are correct, then calculate the excess score\n    max_score = total_questions * correct_mark\n    excess_score = max_score - total_score\n    \n    # Calculate the number of wrong answers using the excess score\n    # and the difference between marks for wrong and right answers\n    wrong_answers = excess_score // (correct_mark - abs(wrong_mark))\n    \n    # The number of correct answers is the total minus the number of wrong answers\n    correct_answers = total_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3 / 8) * 960\n    return int(ans)\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)  # Number of ways to choose 2 teams from 6\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n\n    a = 60\n    b = 72\n    c = 84\n\n    ans = gcd(gcd(a, b), c)\n\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    total_counts = 30\n    stopping_number = 10\n    clock_numbers = 12\n\n    start_number = (stopping_number - (total_counts % clock_numbers)) % clock_numbers\n    if start_number == 0:\n        start_number = 12\n    \n    return start_number\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    a, b = 2, 2\n    for i in range(3, 2012):\n        a, b = b, (a + b) % 10\n    return b\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    number = (two_thirds * 3) / 2\n    three_quarters = (number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31  # start from 31 as per the condition that k > 30\n    while True:\n        sum_of_odds = sum(range(23, 2 * k, 2))\n        m = int(sum_of_odds**0.5)\n        if m ** 2 == sum_of_odds:\n            return m\n        k += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # distance traveled in the first 2 hours\n    distance_first_part = 2 * 40\n    \n    # total distance traveled\n    total_distance = distance_first_part + 280\n    \n    # time taken for the remaining 280 kilometers\n    time_second_part = 280 / 70\n    \n    # total time taken\n    total_time = 2 + time_second_part\n    \n    # average speed\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alan's and Bob's original number of cards\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has 15 more cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Equation 2: After getting 25 more cards, Bob has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4 \n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    initial_money = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n    \n    total_money = (initial_money + (saved_per_day * days_saved)) - (lent_to_brother + spent_on_snacks)\n    \n    return total_money\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    parts_per_cow_per_day = 1\n\n    total_parts = cows * days * parts_per_cow_per_day\n\n    return total_parts\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((89 - x), 12 * (45 - x))\n    sold_oil = solve(equation, x)\n\n    return sold_oil[0]\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Percentage of visitors that are men\n    men_percentage = 37\n\n    # Since men_percentage is 37, the percentage of women and children combined is 100 - 37\n    women_children_percentage = 100 - men_percentage\n\n    # The ratio of women to children is 4:5, which means there are 9 parts altogether\n    total_parts = 4 + 5\n\n    # Find the number of parts corresponding to children\n    children_parts = 5\n\n    # If 12 more men than children, we can set up an equation: 37/children_parts = (100-37)/(total_parts - children_parts)\n    # And since men = children + 12, we find men = 37/(37*total_parts) * (100 - 37) + 12\n    men = (37 / (100 - 37)) * (children_parts / (total_parts - children_parts)) + 12\n    \n    # Calculate the number of women using the total percentage for women and children and the ratio\n    women = ((100 - men_percentage) / total_parts) * 4 - ((100 - men_percentage) / children_parts) * men / (4 + 5)\n    \n    return int(women)\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    probability_train_to_work_late = 0.7\n    probability_train_home_late = 0.4\n\n    # Probability that both trains are on time\n    probability_both_trains_on_time = (1 - probability_train_to_work_late) * (1 - probability_train_home_late)\n\n    # Probability that at least one train is late is the complement of both being on time\n    probability_at_least_one_late = 1 - probability_both_trains_on_time\n\n    return probability_at_least_one_late\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's equation: 2 bananas + 3 apples = 3 dollars\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n\n    # Beth's equation: 3 bananas + 2 apples = 4 dollars\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n\n    # Solve the system of equations for the price of a banana and an apple\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the total cost for Annabella: 10 bananas + 10 apples\n    total_cost = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return total_cost\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_initial = 86\n    lena_after_giving = lena_initial - 29\n    lena_final = 100\n\n    strawberries_received = lena_final - lena_after_giving\n\n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # From 10 to 99 inclusive\n    numbers_without_six = 0\n\n    for i in range(10, 100):\n        if '6' not in str(i):\n            numbers_without_six += 1\n\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n    \n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_sq = (2023 ** 2) % 10\n    last_digit_2_2023 = (2 ** 2023) % 10\n\n    last_digit_sum = (last_digit_2023_sq + last_digit_2_2023) % 10\n    last_digit_answer = (last_digit_sum ** 3) % 10\n\n    return last_digit_answer\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance_between_cars = 360\n    speed_car_A = 48\n    speed_car_B = 72\n    relative_speed = speed_car_A + speed_car_B\n\n    time_to_meet = distance_between_cars / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    # Any two distinct lines can intersect in exactly one point.\n    # To get the maximum number of intersection points, all lines must be in a general position,\n    # which means no two lines are parallel and no three lines pass through the same point.\n    # Therefore, the maximum number of intersection points is given by\n    # the number of ways to choose 2 different lines from the 13 lines to intersect, which is \"13 choose 2\".\n    from math import comb\n    ans = comb(13, 2)\n    return ans\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = (5 ** 20) % 10\n    last_digit_7s = (7 ** 20) % 10\n    ans = (last_digit_5s * last_digit_7s) % 10\n    return ans\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "from math import gcd\n\ndef solution():\n    pencils = 28\n    pens = 63\n\n    students = gcd(pencils, pens)\n\n    return students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    total_watermelons = remaining_after_first_day / (2/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Perimeter is the sum of the lengths of all the sides and curved edges\n    # Since AB = CD = 14 cm, the radius of the semicircles is 7 cm\n    # Also the radius of the quadrants would be 7 cm\n    # Perimeter of a quadrant is half the perimeter of a circle plus the two radii\n    # Perimeter of a semicircle is half the perimeter of a circle plus the diameter\n    \n    # Given π = 22/7\n    pi = 22 / 7\n    radius = 14 / 2\n    \n    # Perimeter of the two quadrants\n    perimeter_quadrants = 2 * ((1/2)*2*pi*radius + 2*radius)\n    \n    # Perimeter of the two semicircles\n    perimeter_semicircles = 2 * ((1/2)*2*pi*radius + radius*2)\n    \n    # Total perimeter\n    total_perimeter = perimeter_quadrants + perimeter_semicircles\n    \n    return total_perimeter\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_price = 95 # price per packet in pence\n    total_spent = 1170 # total spent in pence\n    \n    rice_packet = symbols('rice_packet')\n    \n    equation = Eq(6 * pasta_price + 5 * rice_packet, total_spent)\n    \n    solutions = solve(equation, rice_packet)\n\n    return solutions[rice_packet]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Calculate the Least Common Multiple (LCM) of 3, 5, and 7\n    for i in range(lcm, 1000, lcm):  # Increment by LCM to find multiples that are three-digits\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    choose_cup_noodles = 6\n    ways = comb(total_cup_noodles, choose_cup_noodles)\n    return ways\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    total_cost = number_of_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Given that: 13/10 = 1 + 1/(a + 1/(b + 1/c))\n    # Re-write the given fraction in the form of nested fractions\n    # 13/10 = 1 + (3/10) = 1 + 1/((10/3)) = 1 + 1/(3 + 1/(1/3))\n    # 13/10 = 1 + 1/(3 + 1/(3))\n\n    # From the equation, it can be inferred that a = 3.\n    a = 3\n    \n    # Now, since 3/10 of the remaining fraction can be written as 1/(3 + 1/3),\n    # that suggests that b should be equal to 3 as well, because 1/3 is the reciprocal of 3.\n    b = 3\n\n    # Thus c, being the reciprocal of the fraction 1/3, is equal to 3.\n    c = 3\n\n    # Calculate the final expression.\n    ans = a + 2*b + 3*c\n    return ans\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    percentage = 30 / 100\n    fraction = 2 / 3\n    number = 45\n\n    result = percentage * fraction * number\n\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    # Total work is represented by the energetic decorator's work\n    total_work = 20\n    combined_rate = total_work / 12  # Combined rate of both decorators\n\n    # The energetic decorator's rate of work per day\n    energetic_rate = 1 / total_work\n\n    # The lazy decorator's rate of work per day\n    lazy_rate = combined_rate - energetic_rate\n\n    # Convert the lazy decorator's rate into days needed to paint the house\n    lazy_days_to_paint = 1 / lazy_rate\n\n    return int(lazy_days_to_paint)\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while True:\n        if pies % 4 == 0 and pies % 6 == 0:\n            return pies\n        pies += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n    ratio = boys_in_line / girls_in_line\n    total_girls = total_boys / ratio\n    \n    return int(total_girls)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # If the sum of 15 consecutive numbers is 1650\n    # Then the average of these numbers is 1650 / 15\n    average = 1650 / 15\n    \n    # The middle number in a sequence of 15 consecutive numbers is the average\n    middle_number = average\n    \n    # The smallest number is 7 less than the middle number (because there are 7 numbers below the middle number)\n    smallest_number = middle_number - 7\n    \n    # The largest number is 7 more than the middle number (because there are 7 numbers above the middle number)\n    largest_number = middle_number + 7\n    \n    # The sum of the smallest and largest number\n    sum_smallest_largest = smallest_number + largest_number\n    \n    return sum_smallest_largest\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n    for number in range(1, 1000):\n        if all(digit in '13579' for digit in str(number)):\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Since a divided by 8 has a remainder of 6, it must be of the form 8k + 6\n    # Similarly, b divided by 8 has a remainder of 7, it must be of the form 8m + 7\n    # Adding a and b together gives us (8k + 6) + (8m + 7) = 8(k+m) + 13\n    # Dividing this sum by 8, we can split it as 8(k+m+1) + 5, since the 8(k+m+1) part has no remainder\n    # So the remainder when (a+b) is divided by 8 is the remainder of 13 divided by 8, which is 5\n    remainder = (6 + 7) % 8\n\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_for_skirts = 2.83 * 8\n    cloth_remaining = total_cloth - cloth_for_skirts\n    cloth_per_blouse = round(cloth_remaining / 2, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # The worst case scenario under the pigeonhole principle is that each subsequent key tried is not the correct one for each room.\n    # So for the first room, a maximum of 11 attempts are needed to find the correct key.\n    # For the second room, since one key is now known, a maximum of 10 attempts are needed.\n    # This pattern continues until the last room, where only 1 attempt is needed as there is only one key left.\n    ans = sum(range(1, 12))  # This is the sum of attempts from 1 to 11, inclusively.\n    return ans\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    # set up the equations\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Each tuple (remainder, modulo)\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    # Solve the system of congruences\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    current_number = 1\n    total_digits = 0\n    \n    # Continue until the total number of digits exceeds or equals 2019\n    while total_digits < 2019:\n        current_number_str = str(current_number)\n        total_digits += len(current_number_str)\n        \n        # If the total number of digits is at least 2019, break out of the loop\n        if total_digits >= 2019:\n            break\n        \n        # Move to the next number\n        current_number += 1\n    \n    # Calculate the index position of the 2019th digit within the final number\n    index_position = 2019 - (total_digits - len(current_number_str))\n    \n    # Get the 2019th digit by indexing the string representation of the final number\n    return int(current_number_str[index_position - 1])\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = \"22233\"\n    unique_numbers = set(permutations(digits, 4))\n    ans = len(unique_numbers)\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    greater_number = 1722\n    sum_of_numbers = 3009\n\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    decimal_number = 412 / 1000\n    return decimal_number\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    old_price = 4\n    increase_percentage = 20 / 100\n    new_price = old_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # Total mass in kilograms\n    basket_mass_kg = 500 / 1000  # Convert grams to kilograms\n    kitten_mass_kg = 0.6  # Mass of each kitten in kilograms\n    num_kittens = 4  # Number of kittens\n\n    # Calculate the mass of the cat\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + num_kittens * kitten_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # Mary's three brothers and four sisters\n    total_people = siblings + 1  # Including Mary\n    eggs_bought = total_people * siblings  # Each person buys an egg for each sibling\n\n    return eggs_bought\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    time_left_home = datetime.strptime('7:50', '%H:%M')\n    time_arrived_work = datetime.strptime('8:40', '%H:%M')\n\n    travel_duration = time_arrived_work - time_left_home\n    minutes_taken = travel_duration.seconds // 60\n\n    return minutes_taken\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the prices of the apple and banana\n    apple, banana = symbols('apple banana')\n\n    # Create equations based on the problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # Since this sequence is a two-grade arithmetic sequence, we can notice that the differences between terms are increasing by 1 each time.\n    # Differences: 6-3=3, 10-6=4, 15-10=5. So the next difference should be 6.\n    \n    last_term = 15  # Last term given in the sequence\n    next_difference = 6  # The next difference in the sequence\n\n    # Calculate the next term in the sequence by adding the next difference to the last term\n    next_term = last_term + next_difference\n\n    return next_term\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_handbag = 80 / (1 - 3/5)\n    initial_money = remaining_money_after_handbag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n    \n    # Samuel spent 1/6 of his money and an additional $5 on a DVD.\n    # Money left after buying the DVD:\n    money_after_dvd = initial_money - (initial_money / 6) - 5\n    \n    # Samuel then spent 2/5 of his remaining money and an additional $12 on magazines.\n    # Money left after buying the magazines:\n    money_after_magazines = money_after_dvd - (2 / 5) * money_after_dvd - 12\n    \n    # He had $24 left.\n    equation = Eq(money_after_magazines, 24)\n    \n    # Solve the equation for initial_money\n    solution = solve(equation, initial_money)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    poured_oil = 5\n    remaining_oil = total_oil - poured_oil\n    tanks = 6\n\n    oil_per_tank = remaining_oil / tanks\n\n    return oil_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    grandpa_current_age = 72\n    johnny_current_age = 8\n    \n    # Let x be the number of years after which the grandpa's age is 5 times Johnny's age\n    # After x years, Grandpa's age will be (grandpa_current_age + x)\n    # After x years, Johnny's age will be (johnny_current_age + x)\n    # According to the question, (grandpa_current_age + x) = 5 * (johnny_current_age + x)\n    # We solve for x\n\n    x = symbols('x')\n    equation = Eq(grandpa_current_age + x, 5 * (johnny_current_age + x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip is 8th from the front, Bud is 10th from the end\n    # There are 4 children between Pip and Bud\n    distance_between = 4\n\n    # Total children in queue will be Pip's position from front + distance between + Bud's position from end\n    total_children = 8 + distance_between + 10\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'alan' be the number of cards Alan originally has, and 'bob' be the number of cards Bob originally has.\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has 15 more Match Dfex cards than Alan.\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: After Colin gives Bob 25 cards, Bob now has 3 times as many cards as Alan.\n    # bob + 25 = 3 * alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations for 'alan'\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n\n    # Using the formula A = P(1 + r)^n where A is the amount, P is the principal, r is the rate, n is the number of years\n    # We need to find r: rate of interest\n    rate = ((amount/principal) ** (1/years)) - 1\n\n    # Convert to percentage and round to the nearest tenth\n    rate_percent = round(rate * 100, 1)\n\n    return rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    even_sum = sum(range(2, 51, 2))\n    odd_sum = sum(range(1, 51, 2))\n    ans = even_sum - odd_sum\n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m, n = symbols('m n')\n    x = symbols('x')\n\n    equation1 = Eq(5*m + 3*n, m*n)\n    equation2 = Eq(5*x + 3*9, 37)\n\n    # Since the second equation's right side is a given value, \n    # we can simply solve for x without worrying much about the equation formation itself.\n    x_value = solve(equation2, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Sheila must take the most unfavorable scenario into account:\n    # She takes all balls of the other two colors before getting 4 of the same color.\n    # Therefore, she needs to take out:\n    # - all orange balls (4) and\n    # - all yellow balls (2) and\n    # - 3 blue balls, after which the next ball she takes, no matter which, will be the 4th of the same color.\n    balls_needed = 4 + 2 + 3 + 1  # The extra +1 is for the 4th ball of the same color\n    return balls_needed\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Calculate total oranges when giving 20 per elderly\n    # 10 elderly do not receive any, hence we subtract 10 from the divisor\n    # Set up the equation: total_oranges = 20 * (x - 10)\n    # where x is the number of elderly\n    \n    # Calculate total oranges when giving 16 per elderly\n    # She can fill 25 boxes with 2 dozen oranges each\n    # Set up the equation: total_oranges = 16 * x = 25 * 24\n    # where x is the number of elderly\n    \n    # Now we solve these two equations:\n    # 20 * (x - 10) = 16 * x = 25 * 24\n    total_oranges = 25 * 24\n    \n    # Solve for x when giving 20 per elderly\n    # 20 * (x - 10) = 25 * 24\n    x = (total_oranges + 20 * 10) // 20\n    \n    # Now that we know the number of elderly, we can distribute the oranges evenly\n    oranges_per_elderly = total_oranges // x\n    \n    return oranges_per_elderly\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    after_removal_weight = 27\n    removed_soil_fraction = 1 / 5\n\n    removed_soil_weight = full_weight * removed_soil_fraction\n    empty_wheel_barrow_weight = full_weight - removed_soil_weight - (full_weight - after_removal_weight)\n\n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tim, tyler = symbols('tim tyler')\n    equation1 = Eq((1/6)*tim, (3/8)*tyler)\n    equation2 = Eq(tim, 9*(tyler - 96))\n\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    total_cookies = solutions[tim] + solutions[tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)        # Chocolate is more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)        # Blueberry is lesser than vanilla\n    equation3 = Eq(chocolate / 6 + 2 * vanilla / 3 + 7 * blueberry / 9, 427)  # Cupcakes left after selling\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Get the number of chocolate cupcakes before selling\n    chocolate_cupcakes_before = solutions[chocolate]\n    \n    # Calculate the number of chocolate cupcakes Sally sold\n    chocolate_cupcakes_sold = chocolate_cupcakes_before * (1 - 1/6)\n\n    return chocolate_cupcakes_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    interval_platform1 = 24\n    interval_platform2 = 30\n\n    least_common_multiple = lcm(interval_platform1, interval_platform2)\n\n    minutes_past_9am = least_common_multiple\n\n    hours, minutes = divmod(minutes_past_9am, 60)\n    next_train_time = (9 + hours) % 24\n    ans = f\"{next_train_time}:{minutes:02d}\"\n\n    return ans\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the ages of Anu, Benu, Chris, and Dave\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n    \n    # Sum of all ages is 20\n    equation1 = Eq(anu + benu + chris + dave, 20)\n    \n    # Dave is 5 years older than Chris\n    equation2 = Eq(dave, chris + 5)\n    \n    # Dave is 3 years older than Benu\n    equation3 = Eq(dave, benu + 3)\n    \n    # Anu is 3 years younger than Chris\n    equation4 = Eq(anu, chris - 3)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n    \n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Initial number of red and white marbles in the box\n    r, w = symbols('r w')\n    \n    # Number of red marbles added by Pip and white marbles added by Bud\n    pr, pw = symbols('pr pw')\n\n    # Ratio of initial red to white marbles is 3:2\n    equation1 = Eq(r / w, 3/2)\n\n    # Ratio after Pip adds red marbles is 5:3\n    equation2 = Eq((r + pr) / w, 5/3)\n\n    # Ratio after Bud adds white marbles is 5:4\n    equation3 = Eq((r + pr) / (w + pw), 5/4)\n\n    # Bud adds 100 more white marbles than Pip adds red marbles\n    equation4 = Eq(pw - pr, 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, pr, pw))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # The remainders of a and b when divided by 8 are 6 and 7, respectively\n    remainder_a = 6\n    remainder_b = 7\n    \n    # When we add a and b, the sum will have a remainder of (remainder_a + remainder_b) mod 8\n    remainder_sum = (remainder_a + remainder_b) % 8\n    \n    return remainder_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n    \n    solutions = solve((equation1, equation2), (mark, david))\n    \n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Number of desks in front of Jessica\n    desks_in_front_of_Jessica = 5\n    # Number of desks behind Judy\n    desks_behind_Judy = 7\n    # Jessica sits in front of Judy, so there is one desk (Jessica's) between the desks in front of Jessica and the desks behind Judy\n    desks_between = 1\n\n    # Total number of desks in the column\n    total_desks = desks_in_front_of_Jessica + desks_behind_Judy + desks_between\n    \n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total weight of the group before Aaron joined\n    # Let n be the number of people in the group before Aaron joined\n    \n    x, n = symbols('x n')\n\n    # First condition: After Aaron joined\n    equation1 = Eq((x + 45) / (n + 1), 61)\n\n    # Second condition: After Ben joined\n    equation2 = Eq((x + 45 + 71) / (n + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, n))\n\n    # Extract total weight and number of people before Aaron joined\n    total_weight_before_aaron = solutions[x]\n    number_of_people_before_aaron = solutions[n]\n\n    # Calculate the average weight before Aaron joined\n    average_weight_before_aaron = total_weight_before_aaron / number_of_people_before_aaron\n\n    return average_weight_before_aaron.evalf()\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    agnes, george, jack = symbols('agnes george jack')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    total_white = 1991\n    total_black = 1000\n    total_taken = 2989\n\n    while total_taken > 0:\n        # Ming takes 2 balls from Bag A\n        total_taken -= 2\n\n        if total_white > 0 and total_black > 0:\n            # Different colors taken, put back one white to Bag A\n            total_white -= 1\n        else:\n            # Same color taken, put back one black to Bag A if possible\n            if total_black > 0:\n                total_black -= 1\n            else:\n                total_white -= 2  # If no black balls left, take two whites\n\n    # The color of the remaining balls in Bag A\n    if total_white > 0:\n        color = \"white\"\n    else:\n        color = \"black\"\n\n    return (total_white + total_black, color)\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    for i in range(10000, 100000):  # The product must be a five-digit number\n        str_i = str(i)\n        if \"0\" in str_i or len(set(str_i)) != len(str_i):  # Digits must be non-zero and unique\n            continue\n        for x in range(10, 100):  # Since we want two digits, start from 10\n            if i % x == 0:  # x must be a factor of the product\n                y = i // x\n                if y >= 100 and y <= 999:  # y must be three digits\n                    str_x, str_y = str(x), str(y)\n                    all_digits = str_x + str_y + str_i\n                    if len(all_digits) == len(set(all_digits)) == 9 and '0' not in all_digits:\n                        return i  # This is the product meeting all conditions\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    initial_work = initial_people * initial_hours\n    people_needed = initial_work / target_hours\n\n    return people_needed\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n    \n    total_cost = number_of_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert from meters to centimeters\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    total_money = 30\n    expenses_list = [3.99, 2.50, 0.70, 10.99, 4 * 1.50]\n    total_expenses = sum(expenses_list)\n    change_left = total_money - total_expenses\n    return change_left\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    total = 5\n    count = 0\n    # Iterate from 2 to total (since we need at least two numbers to sum up to total)\n    for num in range(2, total):\n        # Generate all combinations of 'num' numbers that can add up to 'total'\n        for comb in combinations_with_replacement(range(1, total), num):\n            if sum(comb) == total:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # 3-digit number cannot start with 0\n        for units in range(1, 10):  # units digit also cannot be 0\n            if units == hundreds + 2:\n                for tens in range(0, 10):  # tens digit can be 0-9\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han, daughter = symbols('han daughter')\n    equation = Eq(han, 3 * daughter)\n    equation_total = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation, equation_total), (han, daughter))\n\n    return solutions[han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    total_chocolates = remaining_after_students / (1 - 0.80)\n    return int(total_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((n+1)**2 - n**2 for n in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    possible_totals = set()\n    \n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                total = coin1 + coin2 + coin3\n                possible_totals.add(total)\n\n    ans = len(possible_totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # To find the minimum number of votes Samantha could have and still have more votes\n    # than anyone else, we need to ensure that the other two have as many votes as\n    # possible without exceeding Samantha's votes.\n    # Since there are 25 votes in total, if Samantha has the fewest votes to still\n    # have more than the others, the remaining votes must be split between the\n    # other two candidates as evenly as possible.\n    \n    # We use the Pigeonhole Principle to divide the votes among the three candidates,\n    # ensuring that Samantha has at least one more vote than each of the others.\n\n    # If the other two candidates have an equal number of votes that is as close\n    # as possible to Samantha's count, we can say that each of them has n votes\n    # and Samantha has n + 1 votes.\n\n    # The total votes cast is 25, so we have: 2n + (n + 1) = 25\n    # Therefore: 3n + 1 = 25, which simplifies to: 3n = 24, and n = 8\n\n    # Now we know the other two candidates have 8 votes each, and this is the maximum they\n    # can have without exceeding Samantha's count.\n\n    # Thus, Samantha must have at least 8 + 1 votes to have more than the others.\n    samantha_votes = 8 + 1\n\n    return samantha_votes\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    total_digits = 291\n    pages = 0\n    digits_per_page = 1\n    \n    while total_digits > digits_per_page * 9 * (10 ** (digits_per_page - 1)):\n        total_digits -= digits_per_page * 9 * (10 ** (digits_per_page - 1))\n        pages += 9 * (10 ** (digits_per_page - 1))\n        digits_per_page += 1\n    \n    pages += total_digits // digits_per_page\n    \n    return pages\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    ans = 2.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    principal = 6000\n    amount = 8029.35\n    time = 5\n\n    # Compound interest formula: A = P (1 + r/n)^(nt)\n    # Since the interest is compounded yearly, n = 1. Thus the formula becomes: A = P (1 + r)^t\n    equation = Eq(principal * (1 + x/100)**time, amount)\n\n    # solve for x\n    solution = solve(equation, x)\n\n    # Return the first (and should be only) solution in decimal form\n    return solution[0].evalf()\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # total_pages : total number of pages in the magazine\n    # read_pages : number of pages Clarice has read\n    read_pages, total_pages = symbols('read_pages total_pages', integer=True)\n\n    # Initial condition: the ratio of read to unread pages is 1:5\n    equation1 = Eq(read_pages, total_pages / 6)\n\n    # After reading 80 more pages, she has read 70% of the total number of pages\n    equation2 = Eq(read_pages + 80, 0.7 * total_pages)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (read_pages, total_pages))\n    \n    return solutions[total_pages]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Total points for both together\n    total_points = 95\n    # Points difference between Vivi and CC\n    points_difference = 15\n\n    # Using the hypothesis method, we assume CC got x correct answers and (10 - x) wrong or skipped answers\n    for x in range(11):\n        # Hence, Vivi must have gotten (x + points_difference//10) correct answers because each correct answer is worth 10 points\n        vivi_correct_answers = x + (points_difference // 10)\n        # Points earned by CC\n        cc_points = x * 10 - (10 - x) * 5\n        # Points earned by Vivi\n        vivi_points = vivi_correct_answers * 10 - (10 - vivi_correct_answers) * 5\n        # Check if the total points add up to 95\n        if cc_points + vivi_points == total_points:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n    \n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    girls_per_room = 5\n    teachers = 6\n    teachers_per_room = 3\n\n    rooms_for_girls = girls // girls_per_room\n    rooms_for_teachers = teachers // teachers_per_room\n\n    total_rooms = rooms_for_girls + rooms_for_teachers\n\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_for_18_people = flour_per_person * 18\n    return flour_for_18_people\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = '2581953752'\n    min_sum = float('inf')\n\n    # Cutting the strip into three numbers can be viewed as placing two dividers\n    # into ten slots (since the number has ten digits), creating 9 + 8 = 17 choices.\n    # We iterate through the possible places to cut.\n    for i in range(1, len(number)):\n        for j in range(i+1, len(number)):\n            # Generate the three numbers based on the cut positions\n            num1 = int(number[:i])\n            num2 = int(number[i:j])\n            num3 = int(number[j:])\n\n            # Sum the three numbers and check if it is the smallest sum found so far.\n            current_sum = num1 + num2 + num3\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the two original numbers as x and y\n    x, y = symbols('x y')\n    \n    # The sum of the two numbers is 11.63\n    equation1 = Eq(x + y, 11.63)\n    \n    # Oliver shifted the decimal point of one number (y) one position to the left\n    # and the resulting sum was 5.87\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solve the system of equations to find the original numbers x and y\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate one hundred times the difference between the two original numbers\n    difference = solutions[x] - solutions[y]\n    ans = 100 * abs(difference)\n    \n    return ans\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    millimeters = 7000000\n    meters = millimeters / 1000\n    return meters\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the common ratio multiplier for the clubs be 'x'\n    science, literature, math = symbols('science literature math')\n    total_members = 99\n    \n    # Equations based on the given ratios and total number of members\n    equation1 = Eq(science / literature, 9 / 10)\n    equation2 = Eq(literature / math, 5 / 7)\n    equation3 = Eq(science + literature + math, total_members)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n\n    # Members difference between Math and Literature clubs\n    members_difference = solutions[math] - solutions[literature]\n\n    return members_difference\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n\n    minimum_dividend = minimum_divisor * quotient + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # The worst-case scenario using Pigeonhole Principle to get 3 marbles of the same color\n    # Take all blue marbles: 4 (but still no guarantee of 3 of the same color)\n    # Then take all yellow marbles: 4 + 3 = 7 (but still, we might have at most 2 blue, 2 yellow, and 1 red)\n    # Taking one more will ensure we have 3 of at least one color: 7 + 1 = 8 \n    return 8  # Taking out 8 marbles will guarantee 3 of the same color.\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n    \n    melissa_then = 8\n    mother_then = 32\n    time_passed = melissa_now - melissa_then\n\n    equation1 = Eq(mother_then + time_passed, 3 * melissa_now)\n    equation2 = Eq(mother_then + time_passed, mother_now)\n\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    # Since a corner flower is counted for two sides, we subtract the corners\n    # and add them back once to avoid counting them twice.\n    total_flowers = (flowers_per_side * 4) - corners + 1\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    return len(even_factors)\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut_length_1 = 4.8\n    cut_length_2 = 2.73\n\n    remaining_length = original_length - (cut_length_1 + cut_length_2)\n\n    lengths = sorted([cut_length_1, cut_length_2, remaining_length])\n\n    longest = lengths[-1]\n    shortest = lengths[0]\n    difference = longest - shortest\n\n    return difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n    eq1 = Eq(5 * basketball + 6 * volleyball, 325)\n    eq2 = Eq(basketball, volleyball + 10)\n\n    solutions = solve((eq1, eq2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    repeats = 47 // len(pattern)\n    remaining_digits = 47 % len(pattern)\n    \n    sum_repeated = sum(map(int, pattern)) * repeats\n    sum_remaining = sum(map(int, pattern[:remaining_digits]))\n    \n    return sum_repeated + sum_remaining\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_of_6_bottles = 2.52\n    cost_of_1_bottle = cost_of_6_bottles / 6\n    cost_of_9_bottles = cost_of_1_bottle * 9\n    \n    return round(cost_of_9_bottles, 2)\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n    \n    # Equation representing the total number of pencils in terms of boys and girls\n    equation = Eq((20 * boys + 60 * girls) / 40, 35)\n\n    # Solve the equation for the number of boys\n    num_boys = solve(equation, boys)\n    \n    return num_boys[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct in range(26):\n        incorrect = 25 - correct\n        score = correct * 4 - incorrect\n        if score == 61:\n            return incorrect\n    \nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Total cost of book and bag is $132\n    total_cost = 132\n    \n    # Thomas's solution suggests 5 units equal to the total cost\n    # Let's find the value of 1 unit\n    one_unit = total_cost / 5\n    \n    # However, Thomas's calculation is incorrect as he considered that Li Yan spent 5/6 altogether,\n    # but it's not the sum of the fractions of the total and the remainder.\n    # We need to consider the cost of the book and bag separately\n    \n    # If x is the total money Li Yan had originally,\n    # then she spent x/3 on the book and then (x - x/3) / 2 on the bag.\n    \n    # So the equation is: x/3 + (x - x/3) / 2 = 132\n    # To find the correct total, we solve this equation for x.\n    \n    # Simplify (x - x/3) which is (2x/3) divide by 2 to get x/3\n    # The total spent is then x/3 (book) + x/3 (bag)\n    # It means she spent 2/3 of her money, which makes the total cost of book and bag\n    # 2 units in Thomas’s terms.\n    \n    # Therefore, we recalculate the value of 1 unit\n    one_unit_corrected = total_cost / 2  # Now we divide by 2 since she spent 2/3 of her money\n    \n    # Recalculate the total money Li Yan had originally\n    total_money = one_unit_corrected * 3  # She had 3 units in total\n    \n    return total_money\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Initialize the variables\n    base_price = 4.50\n    discount_rate = 0.20\n    shipping_cost = 12\n    total_bill = 120\n    \n    # Calculate cost for 20 cupcakes with shipping\n    base_cost_first_20 = 20 * base_price + shipping_cost\n\n    # Check if she ordered 20 or fewer cupcakes\n    if base_cost_first_20 > total_bill: \n        num_cupcakes = (total_bill - shipping_cost) / base_price\n        return int(num_cupcakes) # Important to return an integer number of cupcakes\n    \n    # Since she ordered more than 20, calculate the additional cupcakes\n    additional_cupcake_price = base_price * (1 - discount_rate) \n    # Subtract the cost of the first 20 cupcakes and shipping, then divide by discounted price\n    additional_cupcakes = (total_bill - base_cost_first_20) / additional_cupcake_price\n    \n    # Add the additional cupcakes to the first 20\n    total_cupcakes = 20 + additional_cupcakes\n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds_to_pence = 1.28 * 100\n    pence = 57\n    total_pence = pounds_to_pence + pence\n    ans = total_pence / 100  # Convert back to pounds\n    return ans\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    fraction_value = 1 / 3\n    ans = 15 / fraction_value\n    return int(ans)\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int('1' + str(i)) * 3 == int(str(i) + '1'):\n            return i\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    place_from_back = 12\n    # Since Rose is 12th from back, there's 11 people behind her\n    people_behind = place_from_back - 1\n    total_people = people_in_front + 1 + people_behind # Adding Rose\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # Let x be the time it would take the lazy decorator to paint the house on his own\n    # The energetic one paints 1/10 of the house in one day\n    # Together they paint 1/6 of the house in one day\n    # So, the lazy one paints (1/6 - 1/10) of the house in one day\n\n    energetic_rate = 1/10\n    together_rate = 1/6\n\n    lazy_rate = together_rate - energetic_rate\n\n    # The time it takes for the lazy one to paint the house is the inverse of his daily rate\n\n    time_lazy = 1 / lazy_rate\n\n    return time_lazy\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_number = symbols('john_number')\n\n    equation = Eq((john_number + 45) / 3, 2 * john_number)\n\n    solutions = solve(equation, john_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_of_sequence = (n * (n + 1)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    # Let's denote the number Dini thought of as x\n    # According to the problem, we have 2x + 10 = 52\n    # To find x, we perform inverse operations on the equation\n    result = (52 - 10) / 2\n    return result\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Each brother should get at least two books.\n    # The remaining books to distribute are 10 - 2*3 = 4 books\n    for brother1 in range(2, 8): # Brother1 can have between 2 to 7 books (since at least 2 for each brother)\n        for brother2 in range(2, 8): # Brother2 can have between 2 to 7 books\n            brother3 = 10 - brother1 - brother2 # Remaining books for Brother3\n            if brother3 >= 2: # Brother3 must have at least 2 books as well\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    return -2 + 9\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Drawing 3 red marbles, we could still have only reds.\n    # Drawing one of each of the other colors (blue, yellow) adds 2 more.\n    # At this point, we have 3 reds, 1 blue, 1 yellow, so no certainty of 4 different colors.\n    # Drawing one more marble will ensure that we have either a second blue or a second yellow,\n    # or a green, thus ensuring 4 different colors in the worst case.\n    # So we must draw 3 (reds) + 2 (one blue and one yellow) + 1 more = 6 marbles.\n    ans = 3 + 2 + 1\n    return ans\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Start with the given pattern excluding the unknown digit\n    num_str = '5' * 19 + '9' * 19\n    # Convert to integer\n    num = int(num_str)\n    # Iterate over possible digits from 0 to 9\n    for i in range(10):\n        # Insert the digit in the middle of the pattern\n        test_num = int(num_str[:19] + str(i) + num_str[19:])\n        # Check if divisible by 7\n        if test_num % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    total_pages = pages_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # The height of the tallest child is 131 cm\n    tallest_child_height = 131\n    \n    # Tom stands at the 10th place, so there are 9 children shorter than him\n    # To find the maximum height for Tom, we assume the 9 children shorter than him\n    # have minimum possible heights starting from 1 cm with a difference of 1 cm \n    # between each consecutive child\n    # Thus, starting from 1 cm, the 9th child has to be 9 cm tall.\n    # Tom's height then would be one more than the 9th child's height at minimum\n    tom_minimum_height = 9 + 1\n    \n    # The maximum height of Tom would be just one less than the next taller child\n    # in the 11th place. As there are 20 children taller than Tom, starting from\n    # the tallest (131 cm), we can count down to find the 11th taller child.\n    # The 11th taller child would have height 131 cm - 20 cm = 111 cm\n    # Thus, Tom's maximum height is 111 cm - 1 cm = 110 cm\n    tom_maximum_height = tallest_child_height - 20 - 1\n    \n    return tom_maximum_height\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == 1 + ones):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    return 9  # from 16 to 96 there are 9 numbers (16, 26, ..., 96)\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    ans = 73 * 42\n    return ans\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2023 - 2):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # Only interested in the remainder when divided by 3\n    return b\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 208 - magic_number\n    second_number = 136 - magic_number\n\n    equation = Eq(first_number, 9 * second_number)\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let x be the number of students and y be the number of gifts.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # According to the problem, if each student is given 5, \n    # there will be 3 left. So, total gifts is x*5 + 3.\n    equation1 = Eq(y, x*5 + 3)\n    # If each student is given 4, there will be 9 left. \n    # So, total gifts is x*4 + 9.\n    equation2 = Eq(y, x*4 + 9)\n    # Now solve these two equations to find the value of x (number of students).\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from math import sqrt\n\n    number = 840\n    factors = 0\n    \n    for i in range(1, int(sqrt(number)) + 1):\n        if number % i == 0:\n            factors += 2 if number // i != i else 1\n            \n    return factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible 2-digit numbers from 1 to 8 with no repetition\n    all_numbers = [''.join(p) for p in permutations('12345678', 2)]\n    \n    # Filter based on the given conditions\n    smallest = [int(x) for x in all_numbers if int(x[1]) == 2 * int(x[0])]\n    largest = [int(x) for x in all_numbers if int(x[0]) + int(x[1]) == 9]\n    second_largest = [int(x) for x in all_numbers if int(x[0]) - int(x[1]) == 5]\n    odd_numbers = [int(x) for x in all_numbers if int(x) % 2 == 1]\n    \n    # Find the numbers that match all the hints\n    possible_numbers = set(smallest) | set(largest) | set(second_largest) | set(odd_numbers)\n    \n    # Sort these numbers to find the second smallest\n    sorted_numbers = sorted(list(possible_numbers))\n    \n    # The second smallest number will be the answer\n    ans = sorted_numbers[1]\n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan - chloe, 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    total_cost = 7.85 + (2 * 1.83)\n    paid = 20\n    change = paid - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    # Lily can only stand on the left end, and her mother on the right end.\n    # This leaves 3 places for the other family members to stand between Lily and her mother.\n    # Those 3 family members can be arranged in 3! ways (Factorial of 3).\n    from math import factorial\n    ans = factorial(3)\n    return ans\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n\n    # Number of terms in the sequence can be found by using the formula of an arithmetic sequence:\n    # last_term = first_term + (num_terms - 1) * difference\n    num_terms = ((last_term - first_term) // difference) + 1\n  \n    # Sum of an arithmetic sequence can be found by the formula:\n    # sum = (num_terms / 2) * (first_term + last_term)\n    total_seats = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let the number of storybooks Anthea has be x.\n    # Jason has 30 storybooks, so after giving away 4, he has 30 - 4 = 26.\n    # Jason will have the same number as Anthea after giving the 4 storybooks,\n    # so Anthea will then have x + 4 storybooks.\n    # We set our equation: 26 = x + 4.\n    # Solving for x, we get x = 26 - 4.\n    x = 26 - 4\n    # The difference at first is how many more Jason had compared to Anthea's x.\n    difference = 30 - x\n\n    return difference\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    children_fraction = 3/5\n    men_fraction = 1/2\n\n    children = children_fraction * visitors\n    remaining = visitors - children\n    men = men_fraction * remaining\n\n    equation = Eq(children, men + 140)\n\n    total_visitors = solve(equation, visitors)\n    \n    return total_visitors[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    original_condition = Eq(sam, peter + 40)\n    after_sam_gives = sam - 0.20 * sam\n    after_peter_gives = peter - 0.25 * (peter + 0.20 * sam)\n    final_condition = Eq(after_sam_gives + 0.25 * (peter + 0.20 * sam), after_peter_gives + 96)\n\n    solutions = solve((original_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Original total for the three numbers\n    original_total = 3 * 120\n    \n    # New total including the fourth number for four numbers\n    new_total = 4 * 150\n    \n    # The fourth number is the difference\n    fourth_number = new_total - original_total\n    \n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    start = 5\n    correct_sum = (n * (n + 1) * (2 * n + 1)) // 6 - ((start - 1) * start * (2 * (start - 1) + 1)) // 6\n    is_kimmy_correct = (correct_sum == 1240)\n    \n    return (is_kimmy_correct, correct_sum)\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the variable: amount of money Amy had at first.\n    initial_amount = symbols('initial_amount')\n    \n    # Calculate the amount Amy had after spending 6/11 of her money and additional $5.\n    first_spending = (6/11) * initial_amount + 5\n    \n    # Calculate the amount she had left after the first spending.\n    first_remainder = initial_amount - first_spending\n    \n    # Calculate the amount Amy spent on fountain pens.\n    second_spending = (3/10) * first_remainder + 12\n    \n    # Calculate the amount she had left after the second spending.\n    second_remainder = first_remainder - second_spending\n    \n    # Set up the equation where the remainder is equal to $30.\n    equation = Eq(second_remainder, 30)\n    \n    # Solve the equation to find the initial amount of money Amy had.\n    solution = solve(equation, initial_amount)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, gillian = symbols('sally gillian')\n    \n    # Current age ratio condition\n    equation1 = Eq(sally * 7, gillian * 2)\n    # Age ratio condition in 15 years\n    equation2 = Eq((sally + 15) * 2, (gillian + 15) * 1)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (sally, gillian))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    actual_subtrahend = 75\n    minuend = incorrect_result + incorrect_subtrahend\n    correct_result = minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = (3 * 4) // math.gcd(3, 4)  # Least common multiple of 3 and 4\n    count = 40 // lcm  # Count how many customers are there within 40 that are at both 3rd and 4th positions\n    return count\n\nimport math\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    kg_per_apple = 1 / 9  # mass of one apple in kg\n    apples_per_cake = 4   # apples used for one cake\n    total_kg_used = 8     # total mass of apples used in kg\n    total_apples_used = total_kg_used / kg_per_apple  # total number of apples used\n    num_cakes = total_apples_used // apples_per_cake  # cakes that can be baked\n\n    return int(num_cakes)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = (35 * 9) // 45\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n    total_distance = distance_between_seeds * number_of_seeds\n    circumference = total_distance\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    for x in range(11):\n        if (10 - x) + (x * 3) == 16:\n            return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    avg_boys = 10\n    avg_participants = 14\n\n    # Calculate total score of participants (12 boys + 8 girls)\n    total_score = avg_participants * (total_boys + total_girls)\n    \n    # Calculate total score of boys\n    total_score_boys = avg_boys * total_boys\n    \n    # Calculate total score of girls\n    total_score_girls = total_score - total_score_boys\n    \n    # Calculate average score of girls\n    avg_girls = total_score_girls / total_girls\n    \n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    num_students = 0\n    while True:\n        if ((num_students + 9)**0.5 % 1 == 0) and (((num_students + 9) + 1 + 2*((num_students + 9)**0.5)) + 16 == (num_students + 25)**0.5 % 1 == 0):\n            break\n        num_students += 1\n    return num_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # initial quantity of postcards\n    initial_postcards = 50\n    # envelopes used initially\n    initial_envelopes = 5\n    # postcards per envelope after Lily's friends gave her more postcards\n    postcards_per_envelope_later = initial_postcards / initial_envelopes\n    # additional envelopes used later\n    additional_envelopes = 2\n    \n    # The total postcards now is the number of postcards per envelope times the total number\n    # of envelopes (initial + additional)\n    total_postcards = postcards_per_envelope_later * (initial_envelopes + additional_envelopes)\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # List of possible coin values in pounds\n    coin_values = [1.00, 0.50, 0.20, 0.10, 0.05, 0.02, 0.01]\n    \n    # Iterate over the possible coin values from smallest to largest\n    for smallest_coin in coin_values[::-1]:  \n        remaining_change = 2.50\n        # Reset the count for each coin value\n        coin_count = {}\n        for coin in coin_values:\n            coin_count[coin] = 0\n\n        # Attempt to use the smallest possible coins up to the remaining change\n        while remaining_change >= smallest_coin:\n            for coin in coin_values:\n                if remaining_change >= coin:\n                    num_coins = int(remaining_change // coin)\n                    # If we would add an odd number of coins, subtract one to keep it even\n                    if num_coins % 2 == 1:\n                        num_coins -= 1\n                    coin_count[coin] += num_coins\n                    remaining_change -= num_coins * coin\n                    break\n\n        # Check if each coin has a pair and if we have successfully used all the change\n        correct = all(c % 2 == 0 for c in coin_count.values()) and remaining_change == 0\n        # If correct, return the value of the smallest coin\n        if correct:\n            return smallest_coin\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol for the number of cookies baked at first\n    total = symbols('total')\n\n    # total * (3/5) represents the burnt cookies\n    # total * (2/5) represents the cookies left after burning\n    # total * (2/5) * (3/4) represents sold cookies (75% of the remaining)\n    # total * (3/5) - total * (2/5) * (3/4) gives the difference (42 cookies)\n\n    equation = Eq(total * (3 / 5) - total * (2 / 5) * (3 / 4), 42)\n    # solve for the total number of cookies baked initially\n    solution = solve(equation, total)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80  # Cost in pounds for 100 grams\n    grams_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * grams_needed\n    return total_cost\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    apples = 27\n    capacity = 4\n    containers = -(-apples // capacity)  # Ceiling division\n\n    return containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10**6):  # Limiting the iteration to 1 million for practical reasons.\n        if int(str(9) + str(i // 10)) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        if (1070 + Y) % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n    \n    # Laura stands in the front, fixed position.\n    # Rita has 5 options (2nd to 6th position) since she can't be in the end.\n    # The rest of the students (4 students) can stand in any order.\n    # The ways to arrange the 4 other students is 4! (factorial of 4).\n    \n    rita_options = 5\n    other_students_arrangements = factorial(4)\n    \n    total_ways = rita_options * other_students_arrangements\n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    def new_operation(a, b):\n        return (a + b) * a\n\n    ans = new_operation(4, 7)\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    jerry_fraction = 3/7\n    kevin_speed = 80\n    \n    # Jerry travels 2/5 of the road length per hour, and 3/7 of the road is Kevin's remaining distance.\n    # Since they meet there, Jerry also travels at 2/5 road/hour.\n    # Let's denote the road length as L.\n    # Kevin's time to meet Jerry = time for Jerry to travel 3/7 of road\n    # Kevin's speed * time = 4/7 * L; Jerry's speed * time = 3/7 * L\n    # Kevin's speed * time = Jerry's speed / (3/7 road/hour) * (3/7 * L)\n    # 80 = (2/5 * L) / (3/7) * (3/7)\n    # 80 = 14/15 * L\n    road_length = (80 * 15) / 14\n\n    return road_length\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    items_bought = 8\n    base_discount = 0.50\n    additional_discount = 0.20\n    \n    # Calculate the price after the first 50% discount\n    discounted_price = regular_price * (1 - base_discount)\n    \n    # If at least 5 items are bought, apply the additional 20% discount on the discounted price\n    if items_bought >= 5:\n        final_price = discounted_price * (1 - additional_discount)\n    else:\n        final_price = discounted_price\n    \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    # Number of apples sold today\n    apples_sold = 88\n    # Fraction of apples sold\n    fraction_sold = 4/7\n\n    # Total number of apples brought today\n    apples_brought = apples_sold / fraction_sold\n\n    return int(apples_brought)\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pencils = 35 * 40  # total average * total pupils\n    # b: number of boys, g: number of girls\n    # 20b + 60g = total_pencils and b + g = 40\n    # g = 40 - b; 20b + 60(40 - b) = total_pencils\n    # Solve for b:\n    b = (60 * 40 - total_pencils) / (60 - 20)\n    return int(b)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Plane took off from Singapore at 05:00 (24th August), which is 7 hours ahead.\n    # It means that when it's 05:00 in Singapore, it's 22:00 (previous day) in London\n\n    # Singapore Departure Time in Singapore Timezone\n    sg_departure_time_str = \"24/08 05:00\"\n    sg_departure_time = datetime.strptime(sg_departure_time_str, \"%d/%m %H:%M\")\n\n    # Convert Singapore Departure Time to London Timezone\n    london_time_when_plane_took_off = sg_departure_time - timedelta(hours=7)\n    \n    # London Arrival Time in London Timezone\n    london_arrival_time_str = \"24/08 11:00\"\n    london_arrival_time = datetime.strptime(london_arrival_time_str, \"%d/%m %H:%M\")\n\n    # Calculate the duration of the flight\n    flight_duration = london_arrival_time - london_time_when_plane_took_off\n    \n    # Convert the duration to total hours\n    total_hours = flight_duration.total_seconds() / 3600\n\n    return total_hours\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 1000):  # Assuming he does not have an unrealistic number of lollipops\n        if lollipops % 4 == 32 and lollipops % 7 == 3:\n            return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    a = 2010\n    b = 2377\n    c = 3111\n\n    # Find the pair-wise differences which should be multiples of D\n    diff1 = b - a\n    diff2 = c - b\n    diff3 = c - a\n\n    # The greatest common divisor of the differences is D\n    from math import gcd\n    d = gcd(gcd(diff1, diff2), diff3)\n\n    # R can be found by taking the remainder of dividing any of the numbers by D\n    r = a % d\n\n    return d + r\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probability of Sally winning a game.\n    p_win = 0.3\n    # Probability of Sally drawing a game.\n    p_draw = 0.1\n    # Probability of Sally losing a game.\n    p_lose = 1 - p_win - p_draw  # Since the sum of probabilities of all possible outcomes must be 1.\n\n    # Probability that Sally will win exactly one game:\n    # This can happen in two ways:\n    # 1. Sally wins the first game and doesn't win the second (draws or loses),\n    # 2. Sally doesn't win the first game (draws or loses) and wins the second.\n\n    # Using the Law of Addition and Multiplication for probability:\n    prob_exactly_one_win = (p_win * (p_draw + p_lose)) + ((p_draw + p_lose) * p_win)\n\n    return prob_exactly_one_win\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Calculate the decimal representation of 1/13\n    decimal_repr = str(format(1 / 13, '.3000f'))\n    \n    # Remove the '0.' prefix to focus on the repeating part\n    decimal_repr = decimal_repr[2:]\n    \n    # Since 1/13 has a repeating cycle every 6 digits, find the corresponding digit in the cycle\n    cycle_length = 6\n    position_in_cycle = (2012 - 1) % cycle_length\n\n    # Find the digit at the 2012th place\n    ans = decimal_repr[position_in_cycle]\n\n    return int(ans)\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi_initial, wiya_initial = symbols('eddi_initial wiya_initial')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(eddi_initial/wiya_initial, 8/7)\n    equation2 = Eq((eddi_initial - 4)/(wiya_initial + 4), 18/17)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (eddi_initial, wiya_initial))\n\n    # Extracting the number of cards Eddi had initially\n    eddi_cards_initial = solutions[eddi_initial]\n    return eddi_cards_initial\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*(2*x - 2), 30 - 3*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue = 72\n    red_to_blue_ratio = 5 / 6\n    red = blue * red_to_blue_ratio\n    green = red / 2\n    total_marbles = blue + red + green\n    return int(total_marbles)\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = ((2017 + 1/3) - 2016.875) * 17\n    fraction = numerator / denominator * (3 + 23/32)\n    return fraction\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330\n    turtle_speed = 30\n    race_distance = 6990\n    rabbit_sleep_time = 215\n    start_delay_time = 10\n    \n    # Calculate the distance covered by the rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * start_delay_time\n    \n    # Find the time when the rabbit starts sleeping (turtle is still running)\n    time_when_rabbit_sleeps = rabbit_distance_before_sleep / turtle_speed \n    \n    # Find out how much distance turtle covers during rabbit's sleep\n    turtle_distance_during_rabbit_sleep = turtle_speed * (time_when_rabbit_sleeps + rabbit_sleep_time)\n    \n    # Compute distance covered by rabbit until it reaches the finish line after the sleep\n    rabbit_distance_after_sleep = rabbit_speed * (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n    \n    # Total time taken by rabbit to finish the race\n    rabbit_total_time = time_when_rabbit_sleeps + rabbit_sleep_time + rabbit_distance_after_sleep / rabbit_speed\n    \n    # Total time taken by turtle to finish the race\n    turtle_total_time = race_distance / turtle_speed\n    \n    # Compare the total time taken by both animals to determine the winner\n    if rabbit_total_time < turtle_total_time:\n        # Rabbit wins, calculate the distance between them when rabbit finishes\n        turtle_distance_when_rabbit_finishes = turtle_speed * rabbit_total_time\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n        winner = 'rabbit'\n    else:\n        # Turtle wins, calculate the distance between them when turtle finishes\n        rabbit_distance_when_turtle_finishes = rabbit_distance_before_sleep + rabbit_speed * (turtle_total_time - time_when_rabbit_sleeps - rabbit_sleep_time)\n        distance_between = race_distance - rabbit_distance_when_turtle_finishes\n        winner = 'turtle'\n    \n    return winner, int(distance_between)\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define two symbols for the number of students in class A and B\n    A, B = symbols('A B', integer=True)\n\n    # The first equation represents that class A has 47 more students than class B.\n    equation1 = Eq(A, B + 47)\n\n    # Define a symbol for the number of students moved from class A to class B.\n    x = symbols('x')\n\n    # After moving x students from A to B, A should have 9 more students than B.\n    equation2 = Eq(A - x, B + x + 9)\n\n    # Now we have two equations and we need to solve them for A, B, and x\n    solutions = solve((equation1, equation2), (A, B, x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece_one = 5.3\n    piece_two = 3.8\n    \n    piece_three = total_length - (piece_one + piece_two)\n    \n    return piece_three\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 30):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            max_product = max(max_product, product)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    total_footballs = footballs_per_basket * number_of_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * (120 / 100)\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let the smaller number be x\n    # Let the larger number be y\n    \n    # From the problem statement, we have two equations:\n    # y - x = 57 (Difference between the two numbers)\n    # x + y = 77 (Sum of the two numbers)\n    \n    # We can solve for x by adding these two equations\n    # (y - x) + (x + y) = 57 + 77\n    # This simplifies to:\n    # 2y = 134\n    \n    # Solving for y gives us y = 134 / 2\n    y = 134 / 2\n    \n    # Now we can find x by substituting y back into one of the original equations:\n    # x + y = 77\n    # x = 77 - y\n    x = 77 - y\n    \n    # Since x represents the smaller number, we will return x as the answer\n    return x\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, adults, girls = symbols('boys adults girls')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n    \n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 10, 2):  # 100's place (odd numbers only: 1, 3, 5, 7, 9)\n        for digit2 in range(0, 10):  # 10's place\n            for digit3 in range(0, 10):  # 1's place\n                if digit1 + digit2 + digit3 == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_avocados = total_pairs * 2  # Each pair has 2 avocados\n    cost_per_avocado_pounds = total_cost_pounds / total_avocados\n    cost_per_avocado_pence = cost_per_avocado_pounds * 100  # Convert pounds to pence\n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "from collections import Counter\n\ndef solution():\n    possible_rolls = [i + j for i in range(1, 7) for j in range(1, 7)]\n    roll_counts = Counter(possible_rolls)\n    most_common = roll_counts.most_common(1)\n    return most_common[0][0]\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g = symbols('g')\n    \n    # Since there are 36 students in total, the number of boys is 36 - g\n    b = 36 - g\n\n    # The total score of the class is the average score times the number of students\n    total_score_class = 89 * 36\n    # The total score of girls is the average score of girls times the number of girls\n    total_score_girls = 88 * g\n    # The total score of boys is the average score of boys times the number of boys\n    total_score_boys = 91 * b\n\n    # The equation is derived from (total_score_girls + total_score_boys = total_score_class)\n    equation = Eq(total_score_girls + total_score_boys, total_score_class)\n    \n    # Solve the equation for the number of girls\n    sol = solve(equation, g)\n\n    return sol[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Let the number of rhinos (and the number of deer) be r\n    # Let the number of ostriches be o\n    # Each rhino and deer has 4 legs, each ostrich has 2 legs\n    # We have two equations:\n    # 1) The total number of animals (heads) is 28: r + r + o = 28 \n    # 2) The total number of legs is 88: 4r + 4r + 2o = 88\n    # Simplify the second equation by dividing by 2: 4r + o = 44\n    # From the first equation, we can express o in terms of r: o = 28 - 2r\n    # Substituting o from the first equation into the second equation:\n    # 4r + (28 - 2r) = 44 => 4r + 28 - 2r = 44 => 2r = 44 - 28 => 2r = 16\n    # Now solve for r: r = 16 / 2 => r = 8\n\n    r = (44 - 28) // 2\n\n    return r\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table has 4 sides, and 3 people can sit on one side.\n    # Since the tables are put together in a row, the people on the short sides\n    # will not change, but people on the long sides will be reduced by 2 (to avoid double counting).\n    # So each inner table will contribute 2 sides (instead of 4) for the total number of seating spots.\n\n    # Number of people that can sit around one square table\n    people_per_table = 12\n\n    # Number of tables\n    num_tables = 8\n\n    # For one table, people can sit on all 4 sides, but when we put tables together,\n    # we will lose two seating spots for every pair of tables that are joined on one side.\n    # So there are 8 - 1 = 7 joints, losing 2 spots at each joint.\n    total_people = people_per_table * num_tables - 2 * (num_tables - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marbles each person has\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n\n    # Define the equations based on the problem statement\n    # Andrew has 30 marbles less than the average of Boris, Jeffery, and Xavier\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(xavier, 3 * andrew)\n\n    # Solve the system of equations for the given variables\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # Since we need only the sum of Jeffery and Boris' marbles, we calculate that\n    jeffery_and_boris_marbles = solutions[boris] + solutions[jeffery]\n\n    return jeffery_and_boris_marbles\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits = 339\n    page = 0\n    digits_count = 0\n\n    while digits_count < digits:\n        page += 1\n        if page < 10:\n            digits_count += 1\n        elif page < 100:\n            digits_count += 2\n        else:\n            digits_count += 3\n\n    return page\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    # Prime factorize the number 15\n    prime_factors = {3: 1, 5: 1}  # 15 = 3^1 * 5^1\n    num_factors_wanted = 15\n\n    # A number n = p1^a1 * p2^a2 * ... * pk^ak has (a1+1)*(a2+1)*...*(ak+1) factors.\n    # We need to find the exponents ai that satisfy this property and are such that the number is a multiple of 15.\n\n    # Initialize counter for numbers with 15 factors.\n    count = 0\n\n    # Loop over possible exponents for prime factors of the multiple of 15.\n    # We start from 1 (not 0) for both exponents because 0 would imply that the prime factor is not present,\n    # contradicting the condition that it is a multiple of 15.\n\n    # Additionally, the maximum exponent for any prime factor would be such that it still generates only 15 factors.\n    # Since we have two prime factors, and the final count of factors will be (e3+1)*(e5+1) = 15,\n    # the only possiblities for (e3+1)*(e5+1) are (1, 15) or (3, 5), given that both e3 and e5 are at least 1.\n    # Thus, e3 can be at most 14 and e5 can be at most 4.\n    \n    # We find suitable exponents for the primes in the prime factorization of 15.\n    for e3 in range(1, 15):  # Exponent for 3\n        for e5 in range(1, 5):  # Exponent for 5\n            if (e3 + 1) * (e5 + 1) == num_factors_wanted:  # (exponent+1 for 3) * (exponent+1 for 5) should be 15\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # Ones digits repeat every 4 powers for base 32\n    ones_digit_32_powered = pow(32, 33 % 4, 10)\n    \n    # Ones digits repeat every 4 powers for base 22\n    ones_digit_22_powered = pow(22, 29 % 4, 10)\n    \n    # Find the difference and get the ones digit\n    result = (ones_digit_32_powered - ones_digit_22_powered) % 10\n    return result\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Start with initial condition where difference between students and teachers is 52\n    difference = 52\n\n    # Iterate starting from a minimum 3x3 square and increase the size\n    for n in range(3, 1000, 2): # Increment by 2 for alternating layers of students and teachers\n        # Calculate the total number of students (outer layer plus every second layer after that)\n        students = n**2 - (n - 2)**2\n        # Calculate the total number of teachers (every second layer excluding the outer)\n        teachers = (n - 2)**2 - (n - 4)**2\n        # Calculate the current difference\n        current_difference = students - teachers\n        # If the current difference matches the target difference, we calculate total people\n        if current_difference == difference:\n            total_people = n**2  # Total people is n^2 for a square with side length n\n            return total_people\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n\n    # Loop through all 2-digit values for A (10 to 99)\n    for A in range(10, 100):\n        # Loop through all 4-digit values for B (1000 to 9999)\n        for B in range(1000, 10000):\n            # Check if both A+B and A^2 + B^2 are multiples of 7\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                # Calculate the difference B-A\n                difference = B - A\n                # Update max_difference if the current difference is greater\n                if difference > max_difference:\n                    max_difference = difference\n\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    num_ways = comb(total_players, players_needed)\n    return num_ways\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    # Original condition\n    original_condition = Eq(apples, (5/7) * oranges)\n    \n    # Condition after buying 12 more oranges\n    condition_after = Eq(apples, (2/3) * (oranges + 12))\n    \n    # Solve the system of equations\n    solutions = solve((original_condition, condition_after), (apples, oranges))\n    \n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    return 10**2\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # The fraction can be written in the form of a continued fraction: 54 + 1/(x + 1/(y + 1/z))\n    # First, subtract 54 from the fraction\n    fraction = 2014 / 37 - 54\n    # Now, the fraction is of the form 1/(x + 1/(y + 1/z))\n    # We need to find the continued fraction representation of the number\n\n    # Start by taking the reciprocal to find 'x'\n    x = 1 / fraction\n    x_int = int(x)\n    \n    # Subtract x_int from x and take the reciprocal to find 'y'\n    fraction = 1 / (x - x_int)\n    y = fraction\n    y_int = int(y)\n    \n    # Subtract y_int from y and take the reciprocal to find 'z'\n    fraction = 1 / (y - y_int)\n    z = fraction\n    z_int = int(z)\n\n    return x_int + y_int + z_int\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    stop_number = 10\n    total_counts = 30\n    clock_numbers = 12\n\n    start_number = (stop_number - (total_counts % clock_numbers)) % clock_numbers\n    if start_number == 0:\n        start_number = clock_numbers\n\n    return start_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200 + 198 + 196 + 194 + 24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # After selling x kilograms, the big one has (89 - x) kg left\n    # After selling x kilograms, the small one has (45 - x) kg left\n    # According to the problem, the big one is left with 12 times as much as the small one\n    equation = Eq((89 - x), 12 * (45 - x))\n\n    # Solve for x\n    solved_amount = solve(equation, x)\n\n    return solved_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    \n    return jackpot // winners\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    num = 100\n    while not (num % 5 == 1 and num % 6 == 1 and num % 7 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import isprime\n\n    # Since a, b, c are prime numbers, we have to find them based on the equations given:\n    # 31 + a = 26 + b = 20 + c => a = b - 5 = c - 11\n    results = []\n    for c in range(2, 100):  # Start from 2 because 2 is the smallest prime number\n        b = c + 11 - 5\n        a = c + 11\n        if isprime(a) and isprime(b) and isprime(c):\n            if 31 + a == 26 + b == 20 + c:\n                results.extend([a, b, c])\n                break  # Since we only need one solution\n    \n    ans = results[0] * results[1] * results[2]\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # Convert total time to hours\n    speed1 = 5  # Speed from home to park\n    speed2 = 4  # Speed from park to home\n\n    # Let the distance between her home and the park be d km.\n    # Total time = time for trip1 + time for trip2\n    # Total time = d/speed1 + d/speed2\n    # Total time (in hours) = d/5 + d/4\n    # We solve for d using the above condition with the total time.\n\n    # The equation is total_time_hours = (d/speed1) + (d/speed2)\n    # Rearrange the equation: total_time_hours = d * (1/speed1 + 1/speed2)\n    \n    # Calculate 1/speed1 + 1/speed2\n    reciprocal_speeds_sum = 1/speed1 + 1/speed2\n\n    # Solve for d\n    distance = total_time_hours / reciprocal_speeds_sum\n\n    return distance\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    n = 30\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joleen, rennie = symbols('joleen rennie')\n    \n    equation1 = Eq(joleen, rennie + 5)\n    equation2 = Eq(3/4 * rennie, 2/3 * joleen)\n    \n    solutions = solve((equation1, equation2), (joleen, rennie))\n    \n    total_pies = solutions[joleen] + solutions[rennie]\n    \n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x\n    # Then the number of girls would be x + 8\n    # total_pupils = number of boys + number of girls\n    # 26 = x + (x + 8)\n    # 26 = 2x + 8\n    # 26 - 8 = 2x\n    # 18 = 2x\n    # x = 9 (number of boys)\n    # number of girls = x + 8 = 9 + 8\n    girls = 9 + 8 \n\n    return girls\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both fruits.\n    x = symbols('x')\n\n    # Number of students who like apples is 3 times those who like both\n    apples = 3 * x\n\n    # Number of students who like bananas is 5 times those who like both\n    bananas = 5 * x\n\n    # Using the Inclusion-Exclusion Principle: Total = Apples + Bananas - Both\n    equation = Eq(apples + bananas - x, 35)\n\n    # Solve the equation for x\n    students_both = solve(equation, x)\n\n    return students_both[0]\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n represent the time it takes Nancy to finish the job by herself.\n    n = symbols('n')\n    \n    # The work done by Nancy and Lee together in 1 hour is 1/10 of the job.\n    # The work done by Nancy in 1 hour is 1/n of the job.\n    # The work done by Lee in 1 hour is the remaining work rate, which is 1/10 - 1/n.\n    \n    # If working together for 6 hours, they complete 6/10 of the job.\n    # In the remaining time, Nancy completes the job by working for 20 hours. That is 20/n of the job.\n    # The total work done by Nancy is 20/n + 6/10 of the job.\n    \n    # Since the total job is equal to 1, we can equate the total work done by Nancy to 1: \n    # (6/10 of the job done together) + (20/n of the job done by Nancy) = 1 job\n    \n    equation = Eq(6/10 + 20/n, 1)\n\n    # Solve the equation for n\n    solution = solve(equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    initial_weight_kg = 3.5\n    pie_weight_kg = 550 / 1000\n    juice_weight_kg = 1050 / 1000\n\n    remaining_weight_kg = initial_weight_kg - (pie_weight_kg + juice_weight_kg)\n\n    return remaining_weight_kg\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    price_per_shoe = 78\n    price_per_pair_of_socks = 12\n    aliens = 1 + 5  # himself and his 5 brothers\n\n    # Each alien has 5 legs and thus needs 5 shoes and 5 socks (2.5 pairs of socks)\n    total_shoes_cost = price_per_shoe * 5 * aliens\n    total_socks_cost = price_per_pair_of_socks * 2.5 * aliens\n\n    total_cost = total_shoes_cost + total_socks_cost\n    return total_cost\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # Starting point based on the equation given in the problem\n    B = 25 + 6 * A\n    # A = 10*x + y\n\n    # Let's solve the problem step by step, just like the given equation\n    # Turn the equations into Python conditions\n    # 200*x + 20*y = 60*x + 6*y + 25\n    \n    for x in range(1, 10):  # x cannot be zero since it's the tens digit\n        for y in range(10):  # y is the ones digit and can be from 0 to 9\n            A = 10 * x + y\n            B = 25 + 6 * A\n            # Check if B indeed has 2 as hundreds digit and equals 2xy\n            if B == 200 + 10 * x + y:\n                return A\n\n    return \"No solution found\"\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    num_days = 5\n\n    total_chairs = sum(first_day_chairs + difference * (day - 1) for day in range(num_days))\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    ans = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    return ans\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Since the worst case is taking 2 blue and 2 yellow without getting 3 of the same colour,\n    # the next marble we take will certainly be either the 3rd blue, the 3rd yellow or the 1 red,\n    # which will make us reach 3 of the same colour.\n    # So the answer is 2 (blue) + 2 (yellow) + 1 (any colour) = 5\n    ans = 2 + 2 + 1\n    return ans\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The children grouping scenario can be modeled using congruences:\n    # x ≡ -3 (mod 4) because three children had to sit out in groups of 4\n    # x ≡ -1 (mod 13) because one child had to sit out in groups of 13\n    # We solve for x such that 100 <= x <= 190\n    congruences = [(-3, 4), (-1, 13)]\n    lcm_product = 4 * 13\n    _, ans = solve_congruence(*congruences)\n\n    # Make sure the solution is in range [100, 190]\n    while ans < 100:\n        ans += lcm_product\n    while ans > 190:\n        ans -= lcm_product\n\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spend = book_price + tshirt_price + pen_price\n\n    return total_spend\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    terms = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    return 312 // 6\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Current sum of Mary and her son's age\n    current_sum = 45\n    # After 5 years, they will both be 5 years older\n    future_sum = current_sum + 5 + 5  # Mary's 5 years + Son's 5 years\n    return future_sum\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    cost_per_sharpener = 14  # 14p per sharpener\n    total_sharpeners = 7\n    total_cost_pence = cost_per_sharpener * total_sharpeners  # calculate the cost in pence\n    \n    pounds_to_pence = 100  # 1 pound is 100 pence\n    paid_amount_pence = 1 * pounds_to_pence  # Convert £1 to pence\n    \n    change_pence = paid_amount_pence - total_cost_pence\n    change_pounds = change_pence / pounds_to_pence  # Convert change back to pounds\n\n    return change_pounds\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n\n    original_price = sales_tax_paid / sales_tax_rate\n\n    return original_price\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = people * travel_cost_per_person\n    total_hotel_cost = people * hotel_cost_per_day_per_person * days\n    total_spending_money = people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Sebastian's and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n    \n    # Sebastian is 24 years younger than Garrett\n    equation1 = Eq(sebastian, garrett - 24)\n    \n    # In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n    \n    # Return Garrett's current age\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    # Assuming the number of boys is b and the number of girls is g\n    # Based on the given information, we have the following equations:\n    # g - b = 65 (since there are 65 fewer boys than girls)\n    # (3/7)g - (2/5)b = 0 (because after some boys and girls left, remaining boys and girls are equal)\n    \n    # We can solve for b and g using these equations\n    # Multiplying both sides of the second equation by 35 (to clear the denominators) gives:\n    # 15g - 14b = 0\n    # We can create a system of linear equations:\n    # g - b = 65\n    # 15g - 14b = 0\n    \n    # We can solve this using substitution or elimination. I'll use substitution here.\n    # g = b + 65  (from the first equation)\n    # Substituting g in the second equation gives:\n    # 15(b + 65) - 14b = 0\n    # 15b + 975 - 14b = 0\n    # b = 975\n    \n    # Now substitute b back into either original equation to find g\n    g = 975 + 65\n    \n    # Calculate the number of students that remained in the hall\n    remained_boys = (3/5) * 975  # After 2/5 of the boys left\n    remained_girls = (4/7) * (975 + 65)  # After 3/7 of the girls left\n    \n    # The total number of students that remained\n    total_students_remained = remained_boys + remained_girls\n    \n    return int(total_students_remained)\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges = symbols('oranges')\n    apples = oranges + 150\n    bananas = oranges + 50\n\n    equation = Eq(apples + bananas + oranges, 1400)\n\n    solutions = solve(equation, oranges)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    math_books = 4\n    chem_books = 3\n    phys_books = 2\n    bio_books = 1\n    \n    # Calculate the factorial of the books of each type\n    math_factorial = factorial(math_books)\n    chem_factorial = factorial(chem_books)\n    phys_factorial = factorial(phys_books)\n    \n    # Treating all same subject books as one block, we have 4 blocks - (M),(C),(P),(B)\n    blocks = 4 \n    \n    # Now calculate the factorial of the blocks, since each block can be arranged in that many ways\n    blocks_factorial = factorial(blocks)\n    \n    # The total number of ways is the product of the factorial of each block type's arrangement\n    # and the arrangement of the blocks themselves.\n    total_ways = math_factorial * chem_factorial * phys_factorial * blocks_factorial\n    \n    return total_ways\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('ORANGES')\n    total_ways = factorial(total_letters)\n    \n    vowels = 'AEO'\n    vowels_count = len(vowels)\n    ways_vowels_together = factorial(vowels_count) * factorial(total_letters - vowels_count + 1)\n    \n    ways_not_all_vowels_together = total_ways - ways_vowels_together\n    \n    return ways_not_all_vowels_together\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_in_metres = 8850\n    height_in_kilometres = height_in_metres / 1000\n    return height_in_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n    ways = category1 * category2 * category3\n    return ways\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2):\n        for b in range(a, 12 // 2):\n            c = 12 - a - b\n            if c >= b and a + b > c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import symbols, Eq, solve, isprime\n\n    a, b, c = symbols('a b c', integer=True)\n    eq1 = Eq(31 + a, 26 + b)\n    eq2 = Eq(26 + b, 20 + c)\n\n    sol = solve((eq1, eq2), (a, b, c))\n\n    # Extract the solutions for a, b, and c and verify if they are prime\n    a = sol[a]\n    b = sol[b]\n    c = sol[c]\n\n    if isprime(a) and isprime(b) and isprime(c):\n        return a * b * c\n    else:\n        return None  # Return None if either a, b, or c is not prime\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    # Let's denote the number of stickers Eugene, Melvin and David had at first as E, M, and D respectively.\n    # Since we don't have a direct formula, we should write the system of equations based on the description\n\n    from sympy import symbols, Eq, solve\n\n    E, M, D = symbols('E M D')\n    equation1 = Eq(E - 2*M + D, 46)\n    equation2 = Eq(M + 2*M - (D+M), 12)\n    equation3 = Eq(D + (D+M) - (E - 2*M), 7)\n    equation4 = Eq(E + M + D, 260)\n\n    # Author note: Instead of the sum 46, 12, and 7, we should use the ratio 46:12:7.\n    # Thus we should find the LCM (Least Common Multiple) or any common multiple of the ratios\n    # and equate them as 46x, 12x, and 7x where x is the common multiple.\n    # The LCM of 46, 12, and 7 is 276 (the total stickers would be 46+12+7 parts of x).\n    # Thus, we should use 260 / 65 for value of x.\n    \n    x = symbols('x')\n    x_value = solve(Eq(46*x + 12*x + 7*x, 260), x)\n    \n    # Substitute the x value into the equation\n    equation1 = equation1.subs(x, x_value[0])\n    equation2 = equation2.subs(x, x_value[0])\n    equation3 = equation3.subs(x, x_value[0])\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (E, M, D))\n\n    return solutions[E]\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # The game is a variant of the game of Nim.\n    # For any two non-empty piles, the player with the first turn has a winning\n    # strategy if the XOR of the number of matches in the piles is non-zero.\n    # If the XOR is zero, the player with the second turn has a winning strategy.\n\n    pile_A = 35\n    pile_B = 24\n    nim_sum = pile_A ^ pile_B\n\n    if nim_sum != 0:\n        # Eddie has the winning strategy.\n        return \"Eddie\"\n    else:\n        # Wei'er has the winning strategy.\n        return \"Wei'er\"\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    # Since rotations are considered the same, fix one person's position to break symmetry.\n    # The remaining 5 people can be arranged in 5! ways around the table.\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # We can set the original number of boys and girls as x\n    # After changes, the number of boys will be x + 12\n    # The number of girls will be x - 8\n    # Also, we know that the new number of boys is twice the new number of girls.\n    # So we have the equation x + 12 = 2 * (x - 8)\n    # Solving for x:\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 12, 2 * (x - 8))\n    solution = solve(equation, x)\n\n    # The number of students at first would be twice the amount of boys or girls, so 2x\n    original_students = 2 * solution[0]\n\n    return original_students\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum_result = 0\n    for i in range(80, 55, -2):\n        sum_result += i - (i - 2)\n    return sum_result\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2 / 7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    # Each of the three digits can be chosen in 3 ways since repetition is allowed.\n    # The first digit can be 3, 5, or 7.\n    # The second digit can be 3, 5, or 7.\n    # The third digit can be 3, 5, or 7. \n\n    # Therefore, the total number of different three-digit numbers is 3 * 3 * 3.\n\n    ans = 3 * 3 * 3\n    return ans\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(1, 25))\n    for p1 in primes:\n        p2 = 25 - p1\n        if p2 in primes:\n            return p1 * p2\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Jack's speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances covered in each segment in meters\n    distance1 = 280\n    distance2 = 400\n    # The total distance of the race is 800 meters, so we subtract distances 1 & 2 from 800 to get distance3\n    distance3 = 800 - distance1 - distance2\n\n    # Time spent on each segment\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    \n    length_ribbon1 = 15\n    length_ribbon2 = 45\n    \n    ans = gcd(length_ribbon1, length_ribbon2)\n    \n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n    \n    start_time_total_minutes = start_time_hour * 60 + start_time_minute\n    end_time_total_minutes = end_time_hour * 60 + end_time_minute\n    \n    time_spent = end_time_total_minutes - start_time_total_minutes\n    return time_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    choco, vanilla, blueberry = symbols('choco vanilla blueberry')\n\n    # Set up the equations\n    eq1 = Eq(choco, vanilla + 72)\n    eq2 = Eq(blueberry, vanilla - 36)\n\n    # Total cupcakes after selling\n    eq3 = Eq(choco - choco/6 + vanilla - 2*vanilla/3 + blueberry - 7*blueberry/9, 427)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (choco, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    choco_sold = solutions[choco] / 6\n\n    return choco_sold\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lamp_posts = 50\n    distance_between_lamps = 2\n\n    length_of_road = (number_of_lamp_posts - 1) * distance_between_lamps\n\n    return length_of_road\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    return 48 + 84\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    ans = (18 + 52) / 2\n    return ans\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n\n    # Since we need to find the maximum number of peaches one student can get,\n    # we can apply the Pigeonhole Principle.\n    # The Pigeonhole Principle states that if you distribute n items into m containers,\n    # with n > m, then at least one container must hold more than ⌊n/m⌋ items.\n    # Thus, we distribute the peaches evenly to all students and then add one to the maximum\n    # to get the least number of peaches the student with the most peaches can get.\n\n    peaches_per_student = total_peaches // total_students\n    max_peaches = peaches_per_student + (total_peaches % total_students > 0)\n\n    return max_peaches\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # The mean of seven consecutive whole numbers is 140/7\n    mean = 140 / 7\n    # The smallest number is three numbers before the mean (middle number)\n    smallest = mean - 3\n    return int(smallest)\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    start_page = 15\n    end_page = 40\n\n    return end_page - start_page + 1\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(3, 4), (6, 7), (6, 9)]  # (remainder, modulus)\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    _, ans = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcards_cost = 10 * 45  # The total cost of postcards in pence\n    stamps_cost = 10 * 27     # The total cost of stamps in pence\n\n    total_cost_pence = postcards_cost + stamps_cost\n    total_cost_pounds = total_cost_pence / 100 # Convert the total cost to pounds\n\n    change = 10 - total_cost_pounds  # Calculate the change from a £10 note\n\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # Total ways without restrictions for Chantel, Tony, Cale\n    restricted_ways = 2 * 1  # Ways in which Tony sits in front of Claire\n    ans = total_ways - restricted_ways\n    return ans\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day.\n    frank_rate = 180 / 10\n\n    # Ryan's rate of making tables per day.\n    ryan_rate = 180 / 15\n\n    # The difference in the number of tables made by Frank and Ryan per day.\n    table_difference = frank_rate - ryan_rate\n\n    return table_difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let's denote q as the total number of questions and t as the time it should take\n    q, t = symbols('q t', real=True, positive=True)\n\n    # 4 questions per minute imply (q/4) minutes to finish all marking\n    # This results in her being 5 minutes late so actual time is t + 5\n    late_eq = (q/4) - t - 5\n\n    # 6 questions per minute imply (q/6) minutes to finish all marking\n    # This results in her being 5 minutes early so actual time is t - 5\n    early_eq = (q/6) - t + 5\n\n    # Solve the linear equations to find the actual number of questions\n    solutions = solve((late_eq, early_eq), (q, t))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    mass_rounded = 7.4\n    smallest_mass = mass_rounded - 0.05\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for num in range(10, 100):\n        # Create consecutive numbers\n        nums = [num, num + 1, num + 2, num + 3, num + 4]\n        \n        # Check sum of every possible combination of three consecutive numbers\n        for i in range(3):\n            if sum(nums[i:i+3]) % 37 == 0 and sum(nums[i+1:i+4]) % 60 == 0:\n                # Return largest number of the sequence\n                return nums[-1]\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_for_correct = 5\n    marks_deducted = 2\n    kathy_score = 79\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * marks_for_correct) - (wrong_answers * marks_deducted)\n        if score == kathy_score:\n            return correct_answers\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75     # in pounds, 75 pence\n\n    num_cakes_sold = total_money_raised / price_per_cake\n\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3 / 7) * total_money\n    remainder = total_money - spent_at_restaurant\n    spent_on_fees = (2 / 9) * remainder\n    left_money = remainder - spent_on_fees\n    return left_money\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    # Calculate total amount of candies\n    total_candies = 24 + 10\n    # Find how many candies each should have eventually\n    each_should_have = total_candies // 2\n    # Calculate how many candies Amy should give to Emma\n    candies_to_give = 24 - each_should_have\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution_symbolic = '5x + y'"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Time taken for one chime at 3 PM\n    time_one_chime_3pm = 6 / (3 - 1)  # The first chime doesn't count in the 6 seconds\n    \n    # Time taken for six chimes at 6 PM\n    time_six_chimes_6pm = time_one_chime_3pm * (6 - 1)  # The first chime doesn't count\n    \n    return time_six_chimes_6pm\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Work done by P in 1 hour\n    work_per_hour_p = 1 / (12 * 8)\n    # Work done by Q in 1 hour\n    work_per_hour_q = 1 / (8 * 10)\n\n    # Work done by P and Q in 1 hour when working together\n    work_per_hour_pq = work_per_hour_p + work_per_hour_q\n\n    # Total time needed to complete the job when working together\n    total_time_hours = 1 / work_per_hour_pq\n\n    # Since they work 8 hours a day, calculate the days needed\n    total_days = total_time_hours / 8\n\n    # They have to work for at least an integer number of days\n    ans = int(total_days) if total_days.is_integer() else int(total_days) + 1\n\n    return ans\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert meters to centimetres\n    meters_in_cm = 3.2 * 100\n    \n    # Calculate the difference in centimetres\n    difference = meters_in_cm - 30\n    \n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    answer = 3 * 10 * (10 + 1) * (2 * 10 + 1) // 6\n    return answer\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits_count = 0\n    for i in range(1, 41):\n        digits_count += len(str(i))\n    return digits_count\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 # in pence\n    total_kg = 5\n    total_cost_pence = cost_per_kg * total_kg\n    total_cost_pounds = total_cost_pence / 100 # converting pence to pounds\n    \n    money_given = 10 # in pounds\n    change = money_given - total_cost_pounds\n    \n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(120)\n    count = 1\n    for power in factors.values():\n        count *= (power + 1)\n    return count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    n = 180\n    factors = [(i, n // i) for i in range(1, int(n**0.5) + 1) if n % i == 0]\n    min_diff = min(abs(pair[0] - pair[1]) for pair in factors)\n    return min_diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    temp_midnight_thursday = -8  # Temperature at midnight on Thursday\n    temp_midday_friday = 13      # Temperature at midday on Friday\n    overall_change = temp_midday_friday - temp_midnight_thursday  # Overall temperature change\n\n    return abs(overall_change)  # Return the absolute value of the change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for number in range(6, 16): # The number is between 5 and 15.\n        if number % 3 == 0 and 27 % number == 0:\n            return number\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    attendees = 85\n    ticket_price = 1.30\n\n    total_money_collected = attendees * ticket_price\n\n    return total_money_collected\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let's say Max takes x minutes to cover the distance.\n    # Since Luca takes 10 more minutes, Luca takes x + 10 minutes.\n    # The ratio of their speeds is 2:3, meaning if Luca walks 2 units of distance in a certain time,\n    # Max walks 3 units of distance in the same time.\n\n    # Therefore, if Max's speed is 3u and Luca's speed is 2u (where u is a unit speed),\n    # and Max takes x minutes, then the distance covered is given by Max's speed * time = 3u * x.\n\n    # The same distance is covered by Luca at speed 2u in time x + 10 minutes (Luca's time):\n    # Distance = 2u * (x + 10)\n\n    # Since both distances are the same, we can set them equal to each other:\n    # 3u * x = 2u * (x + 10)\n\n    # We can simplify this equation by dividing both sides by u (unit speed), giving us:\n    # 3x = 2x + 20\n\n    # Solving for x:\n    x = 20  # minutes, this is how long Max takes to cover the distance.\n\n    # Now, if Luca had walked at double his usual speed, his speed would be 4u.\n    # Since the distance hasn't changed, we can find out how long it would take Luca:\n    # Using the relation time = distance / speed, we already know distance is 2u * (x + 10)\n    # So, time for Luca at double speed = (2u * (x + 10)) / (4u)\n\n    # Simplifying the time calculation for Luca:\n    # time = (2 * (x + 10)) / 4\n\n    # Plugging x = 20 into the formula:\n    luca_double_speed_time = (2 * (20 + 10)) / 4\n\n    return luca_double_speed_time\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    num_fruits = 3 + 5\n    average_weight = total_weight / num_fruits\n    return average_weight\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Assume x = number of correct answers\n    # Total score = 2*x - (40 - x) (since 1 mark is deducted for every wrong answer)\n    # Total score = 71\n    # Therefore, we can write the equation: 2x - (40 - x) = 71\n    # Simplify the equation: 2x - 40 + x = 71 => 3x - 40 = 71 => 3x = 111 => x = 37\n\n    correct_answers = (71 + 40) / 3\n    wrong_answers = 40 - correct_answers\n\n    return int(wrong_answers)\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pens = pencils = 5\n    while (pens / (pencils - 5)) != 2:\n        pens += 1\n        pencils += 1\n    pens += 18\n    return pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Star starts jogging at 6:30 AM at 6.5 mph\n    jogging_speed = 6.5\n    jogging_time = 1  # from 6:30 AM to 7:30 AM, i.e., 1 hour\n    \n    # Calculate distance jogged\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Star starts walking at 7:30 AM at 4.5 mph until 9:30 AM\n    walking_speed = 4.5\n    walking_time = 2  # from 7:30 AM to 9:30 AM, i.e., 2 hours\n    \n    # Calculate distance walked\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # Since there are 13 cards for each pattern (A, 2, 3, ... K) and 4 patterns total,\n    # to ensure getting at least one 'A', we must consider the worst case scenario.\n    # In the worst case, we could draw all thirteen cards of the other patterns without an 'A'.\n    # We have 4 patterns: A, 2, 3, ..., K, which means we can draw 13 cards of pattern '2',\n    # then '3', then '4', without getting an 'A'.\n    # After that, the next card we draw must be an 'A', because there are no other patterns left.\n\n    # Calculate the number of cards we must draw to ensure at least one 'A'\n    cards_to_draw = (13 * 3) + 1  # 13 cards for each of the 3 other patterns + 1 to ensure 'A'\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 7\n    distance = 320\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_length = 45 * 2\n    remaining_length = initial_length - cut_length\n    length_per_piece = 40\n    \n    num_pieces = remaining_length // length_per_piece\n    \n    return num_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_of_left_handed_who_play_tennis = 1 / 10\n    proportion_of_girls_who_are_left_handed = 25 / 100\n\n    # Calculate the number of left-handed students\n    left_handed_students = left_handed_tennis_players / proportion_of_left_handed_who_play_tennis\n\n    # Calculate the total number of students\n    total_students = left_handed_students / proportion_of_girls_who_are_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20\n    grams_needed_for_100_cookies = 100 / cookies_per_gram\n    return grams_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('10:35 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime('%I:%M %p').lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # The number of different three-digit numbers, where each digit can be 6, 7, or 8\n    # and each digit can be used more than once\n    num_digits = 3  # Number of digits in the number\n    choices_per_digit = 3  # Digits 6, 7, and 8 are 3 choices for each digit\n    \n    # Since each digit can be chosen independently, the total number of\n    # combinations is simply the number of choices for each digit raised to\n    # the power of the number of digits\n    total_numbers = choices_per_digit ** num_digits\n    \n    return total_numbers\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    total_zeros = 0\n    i = 1\n    while total_zeros < 100:\n        # Count the number of zeros in the current number converted to string\n        total_zeros += str(i).count('0')\n        if total_zeros < 100:\n            i += 1\n    return i\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drank = 9  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_initial = 180  # Speed in meters per minute for the first part\n    time_initial = 6     # Time in minutes for the first part\n\n    speed_tired = 120    # Speed in meters per minute for the second part\n    time_tired = 8       # Time in minutes for the second part\n\n    distance_initial = speed_initial * time_initial\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # For an arithmetic sequence of 8 consecutive whole numbers, the average is the middle value.\n    # Since there are 8 numbers, the average will fall exactly between the 4th and 5th numbers.\n    # The sum of the sequence is given by the average times the number of terms.\n    # avg * 8 = 2012 -> avg = 2012 / 8\n    avg = 2012 / 8\n    \n    # The largest number is the 4th number after the average (because the average is between the 4th and 5th numbers).\n    # Since these are consecutive numbers, each number is one more than the previous.\n    # So, the largest number is avg + 3.\n    largest_number = avg + 3\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    \n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    \n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    return 42 / 35 * 100\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a = symbols('a')\n    equation = Eq(3*a + 8, 14)\n    \n    solutions = solve(equation, a)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let the initial number of bottles Faye has be x.\n    # According to the question, after 5 swaps, she should get 4 bottles.\n    # But she got 1 more bottle than expected, which means she got 5 bottles after 5 swaps.\n    # Each swap is exchanging 3 bottles for 1, so 5 swaps mean she exchanged 15 bottles.\n    \n    # Set up the equation: 3 swaps (9 bottles) get 3 bottles,\n    # plus there will be 2 bottles left from the 5th swap and 1 bottle more than expected.\n    # Therefore, 3 * 3 + 2 (leftover) + 1 (additional) = initial bottles.\n    # Solve for x.\n    \n    x = 3 * 3 + 2 + 1 \n    \n    return x\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for number of students in class A and B\n    A, B = symbols('A B')\n    \n    # The given conditions provide two equations:\n    # A = (5/7)*B - originally\n    equation1 = Eq(A, (5/7)*B)\n    \n    # After transferring 3 students, A + 3 = (4/5)*(B - 3)\n    equation2 = Eq(A + 3, (4/5)*(B - 3))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Return the number of students in class A before transfer\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let's suppose the side of the initial square array formed by the boys is n\n    # We know that when 17 girls line up outside the square array, they add up to a larger square which has side (n+1)\n    # The equation for total number of boys before the girls join is n^2\n    # The equation for total number of boys and girls after the girls join is (n+1)^2\n    # We know that the difference between these two squares is equal to the number of girls that joined, which is 17\n    # So, (n+1)^2 - n^2 = 17\n    # Expanding the left side we get: n^2 + 2n + 1 - n^2 = 17\n    # Simplifying, we get: 2n + 1 = 17\n    # Then n = (17 - 1) / 2\n    # Finally, n = 8\n    # The total number of boys is n^2, so we square 8\n    n = 8\n    num_boys = n**2\n\n    return num_boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance as d and the original speed as s.\n    d, s = symbols('d s')\n\n    # Ivy originally travels from 1 pm to 7 pm, hence for 6 hours\n    original_time = 6  # hours\n\n    # If she wants to arrive an hour earlier, she will travel for 5 hours\n    reduced_time = 5  # hours\n\n    # As per the problem statement, the new speed would be s + 2\n    increased_speed = s + 2\n\n    # Now we set up our equations:\n    # Original travel time equation: d = s * original_time\n    original_travel_eq = Eq(d, s * original_time)\n\n    # Increased speed travel time equation: d = (s + 2) * reduced_time\n    increased_speed_eq = Eq(d, increased_speed * reduced_time)\n\n    # Solving the equations simultaneously for distance d and speed s\n    solution = solve((original_travel_eq, increased_speed_eq), (d, s))\n\n    return solution[d]\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_millilitres_per_second = 125\n    total_millilitres = total_litres * 1000\n    total_seconds = total_millilitres / flow_rate_millilitres_per_second\n\n    return total_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n    \n    # Calculate digits for pages 1-9\n    while digits + 9 < 237:\n        pages += 1\n        digits += len(str(pages))\n    \n    # Calculate digits for pages 10-99\n    while digits + 90*2 < 237:\n        pages += 1\n        digits += len(str(pages))\n    \n    # Calculate digits for pages 100 and beyond\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    \n    return pages - 1  # Subtract one because we add one extra page in the last loop iteration\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    a, d = symbols('a d')\n    \n    # 9th term is a + 8*d, 15th term is a + 14*d\n    equation1 = Eq(a + 8*d, (a + 14*d) + 18)\n    \n    # 20th term is a + 19*d, 12th term is a + 11*d\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n    \n    # Solve the equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Find 32nd term which is a + 31*d\n    a_value = solutions[a]\n    d_value = solutions[d]\n    term_32 = a_value + 31*d_value\n\n    return term_32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_sum = 1468\n    correct_sum = 1462\n    incorrect_day_savings = 1268\n    correct_day_savings = 1082\n    \n    difference_in_daily_savings = incorrect_day_savings - correct_day_savings\n    difference_in_sums = incorrect_sum - correct_sum\n    \n    days = difference_in_daily_savings / difference_in_sums\n    \n    return int(days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr. Tung can cut a rope into 4 pieces, which means 3 cuts, in 12 minutes.\n    # So, each cut takes 12 / 3 = 4 minutes.\n    cut_time_per_cut = 12 / 3\n    \n    # To cut a rope into 12 pieces, he needs to make 11 cuts.\n    # Therefore, the total time taken for 11 cuts is 11 * cut_time_per_cut.\n    total_time_for_12_pieces = 11 * cut_time_per_cut\n    \n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    last_term = 31\n    position_last_term = 10\n    common_difference = 28 - 25\n    \n    # Calculate the first term using the formula: last_term = first_term + (position_last_term - 1) * common_difference\n    first_term = last_term - (position_last_term - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    # Carol = x + 3 (where x is Lily's age and, therefore, Marry's age is x + 1)\n    # Product of their ages: x * (x + 1) * (x + 3)\n    # 4 times the product of their ages: 4 * x * (x + 1) * (x + 3) = 2240\n\n    # We will use prime factorization to find the factors\n    # that could potentially be the ages of the children\n\n    # Prime factorization of 2240: 2^6 * 5 * 7\n    # Divide by 4 to simplify the equation: (2^4 * 5 * 7)\n\n    target = 2240 // 4\n\n    # now we have x * (x + 1) * (x + 3) = 2^4 * 5 * 7\n    # we iterate through the possible ages for Lily starting from 1\n    x = 1\n    while True:\n        if x * (x + 1) * (x + 3) == target:\n            return x + 3  # Returning Carol's age\n        x += 1\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    x = symbols('x')\n    expression = (8 * x + 8) / 2 - 3 * (x + 6)\n    correct_expression = simplify(expression)\n\n    return correct_expression\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2*x), 8 + 10*x)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n    \n    return red_flowers, purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    num = 38942\n    remainder = num % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # When splitting into 2 piles, the number of ways is the number of ways to choose a number of marbles for the first pile.\n    # The second pile will have the remaining marbles by default.\n    # Since the marbles are identical, choosing 0 for the first pile is the same as choosing 10 for the first pile,\n    # 1 is the same as 9, etc. So we only need to calculate half the possibilities plus one for the middle case.\n    num_ways = (10 // 2) + 1\n    return num_ways\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # 1 liter is approximately 1.05669 quarts\n    liters_to_quarts = 2.5 * 1.05669\n    cups_capacity = 0.5\n\n    # Calculate how many cups of Coke\n    number_of_cups = liters_to_quarts / cups_capacity\n\n    # Round to the nearest integer\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # worst case scenario without getting 3 toy cars of the same colour:\n    # pick 2 red, then 2 blue, then 2 white (2 of each colour, still no 3 of same colour)\n    # next pick guarantees 3 of the same colour\n    cars_needed = 2 + 2 + 2 + 1\n    \n    return cars_needed\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # Convert lengths to metres\n    length1 = 85 / 100        # 85 cm to metres\n    length2 = 2               # 2 m is already in metres\n    length3 = 147 / 100       # 147 cm to metres\n    \n    # Calculate the total length in metres\n    total_length = length1 + length2 + length3\n    \n    # Return the total length\n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    ans = whole_number + fractional_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    max_ants = 0\n    for spiders in range(total_legs // 8 + 1):  # Calculate the number of spiders\n        ants = (total_legs - spiders * 8) // 6  # Calculate the number of ants based on the remaining legs\n        if spiders * 8 + ants * 6 == total_legs:\n            max_ants = max(max_ants, ants)\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    vivian = 5 * justin + 8\n    equation = Eq(vivian, justin + 48)\n    \n    solution = solve(equation, justin)\n    vivian_coins = solution[justin] * 5 + 8\n    \n    return vivian_coins\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_bought = 11\n    stamps_used = 2\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_used + stamps_given - stamps_bought\n\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    litres = 7.5\n    millilitres = litres * litres_to_millilitres\n    return millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    solved_value = solve(equation, x)\n\n    return solved_value[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let's denote the initial height as h.\n    # After the first bounce, the ball reaches a height of 3h.\n    # After the second bounce, the height is 3 * 3h = 9h.\n    # After the third bounce, the height is 1/2 * 9h = 9h/2.\n    # After the fourth bounce, the height is 1/2 * (9h/2) = 9h/4.\n    # We know the fourth bounce height is 36 m, so 9h/4 = 36.\n    # From this equation, we can solve for h.\n\n    h = (36 * 4) / 9\n    return h\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the two original numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of two numbers\n    eq1 = Eq(x + y, 11.63)\n\n    # Equation 2: The sum when one of the numbers had its decimal point shifted\n    eq2 = Eq(x + y / 10, 5.87)\n\n    # Solving the two equations to find the original numbers\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculating the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # Multiplying the difference by 100\n    return int(difference * 100)\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = (2 * 9) + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent_amount = initial_amount / 2\n    remaining_amount = initial_amount - spent_amount\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('012345679', 5):\n        num_str = '8' + ''.join(perm)\n        num = int(num_str)\n        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n            return num\n    return None\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # in pence\n    cost_whole_cd = 899  # in pence\n\n    # total cost if purchased separately\n    total_separate_cost = 12 * cost_per_song\n\n    # amount saved\n    savings = total_separate_cost - cost_whole_cd\n\n    # convert savings to pounds\n    savings_in_pounds = savings / 100\n\n    return savings_in_pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    trays_bought = 40\n    \n    total_eggs = eggs_per_tray * trays_bought\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        larger = int(str(i)[::-1]) if int(str(i)[::-1]) > i else i\n        smaller = i if int(str(i)[::-1]) > i else int(str(i)[::-1])\n        diff = larger - smaller\n        results.add(diff)\n    return len(results), results\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    for tens in digits:\n        for ones in digits:\n            if tens != ones:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = [str(i) for i in range(10)]\n    min_diff = float('inf')\n    for perm in permutations(all_digits):\n        num1 = int(''.join(perm[:5]))\n        num2 = int(''.join(perm[5:]))\n        diff = abs(num1 - num2)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of stickers Peter had initially\n    peter_initial = symbols('peter_initial')\n\n    # Sam had 40 more stickers than Peter initially\n    sam_initial = peter_initial + 40\n\n    # Sam gives 20% of his stickers to Peter\n    peter_after_sam_gives = peter_initial + (0.20 * sam_initial)\n\n    # In return, Peter gives 25% of his stickers to Sam\n    sam_final = (sam_initial - (0.20 * sam_initial)) + (0.25 * peter_after_sam_gives)\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final, peter_after_sam_gives + 96)\n\n    # Solve the equation\n    solution = solve((equation), (peter_initial))\n\n    # Return Peter's initial number of stickers\n    return solution[0]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    # The divisibility rule for 9 is that the sum of the digits must be divisible by 9.\n    # If 3N3 when divided by 9 leaves a remainder of 1,\n    # then 3 + N + 3 must be one less than a multiple of 9 (since if it were a multiple, the remainder would be 0).\n    # Let's find N within the range of 0 to 9 which is the range of a single digit.\n\n    for N in range(10):\n        if (3 + N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    return 19 + 27 - 9 - 7 + 8\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time_to_pass = 15  # time in seconds\n    length_of_train = 450  # length in meters\n\n    speed = length_of_train / time_to_pass  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    factorial_10 = 1\n    for i in range(1, 11):\n        factorial_10 *= i\n    return factorial_10\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3*13 + 5*13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt_weight = 8\n    water_weight = 32\n    total_weight = salt_weight + water_weight\n    concentration = (salt_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    # Cost of one pencil\n    pencil_cost = 2\n    # Cost of one pen\n    pen_cost = 4\n    # Owen needs to give Oscar pencils that are worth 1 pen\n    # Calculate the number of pencils worth the cost of 1 pen\n    pencils_for_pen = pen_cost // pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    # Number of friends\n    friends = 4\n    # Each friend sends a card to the other friends minus himself/herself\n    cards_per_friend = friends - 1\n    # All cards sent\n    total_cards_sent = friends * cards_per_friend\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    # According to the Knowledge Point Routes, we can group the terms\n    # in pairs where addition and subtraction will cancel some terms out for quick calculation.\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Baba = 10\n    Ali_Baba = 1  # Since Bala is directly behind Ali, we count them as 1\n\n    total_people = people_in_front_of_Ali + Ali_Baba + people_behind_Baba\n\n    return total_people\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    \n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    total = sum(i * (i+1) for i in range(1, 102))\n    return total\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_water = 7\n    num_jugs = 4\n\n    total_water = initial_water + jug_water * num_jugs\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts collected by each friend\n    chloe, david, emily = symbols('chloe david emily')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    # Return the amount collected by Chloe\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_days = 3 + 2 + 2\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    average_cookies = total_cookies / total_days\n    return average_cookies\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days David takes off\n    x = symbols('x')\n\n    # The fraction of the work done by Candy in 12 days\n    candy_work = 12 / 20\n\n    # The fraction of the work done by David when he works (12 - x) days\n    david_work = (12 - x) / 25\n\n    # The equation representing that together they finish the job in 12 days\n    equation = Eq(candy_work + david_work, 1)\n\n    # Solve for x\n    days_off = solve(equation, x)\n\n    return days_off[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal in magnitude and opposite in direction to the force exerted by the book on the table due to Newton's third law.\n    mass_of_book = 20  # in Newtons, which is already the unit of force\n    force_exerted_by_table = mass_of_book  # The force exerted by the table is the normal force, which balances the weight of the book.\n    \n    return force_exerted_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    first_50k_tax = 0.05 * 50000\n    remaining_income = income - 50000\n    remaining_tax = 0.01 * remaining_income * (8 + T)\n    total_tax_paid = first_50k_tax + remaining_tax\n\n    equation = Eq(total_tax_paid, 15100)\n    solution_T = solve(equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guy_age = y - 3\n    return guy_age\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n\n    # 4/5 of the fruits are apples\n    total_apples = 4 * total_fruits / 5\n\n    # 1/5 of the fruits are pears\n    total_pears = total_fruits / 5\n\n    # 3/4 of the fruits are removed\n    remaining_fruits = total_fruits / 4\n\n    # After removing 3/4 of the fruits, we have 1/8 of the apples and 30 pears left\n    remaining_apples = total_apples / 8\n    remaining_pears = 30\n\n    # We know that the remaining fruits are the sum of the remaining apples and pears\n    equation = Eq(remaining_fruits, remaining_apples + remaining_pears)\n\n    solutions = solve(equation, total_fruits)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # In the worst case, Lily takes out all footballs and volleyballs first before getting 6 basketballs\n    num_footballs = 6\n    num_volleyballs = 3\n\n    # She takes one less than the required number of each of the two other types of balls\n    # She needs to ensure taking out 6 balls of the same type, so she should take 5 of each other type\n    max_footballs = num_footballs - 1\n    max_volleyballs = num_volleyballs - 1\n\n    # After taking out 5 footballs and 3 volleyballs, any next ball Lily takes out will guarantee 6 of a kind.\n    # This is because she either takes out one more football, making 6, or she starts on the basketballs.\n    balls_needed = max_footballs + max_volleyballs + 1\n    \n    ans = balls_needed\n    return ans\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols\n    v = symbols('v')\n\n    # Given values\n    m = 2  # mass in kg\n    h = 5.0  # height in meters\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Potential energy at the top equals kinetic energy at the bottom\n    # m * g * h = 1/2 * m * v^2\n    # Simplify the equation: 2 * g * h = v^2\n    # Solve for v: v = sqrt(2 * g * h)\n    \n    # Kinetic energy equation, with mass canceled out\n    equation = v**2 - 2 * g * h\n\n    # Use sympy to solve for v\n    solutions = solve(equation, v)\n\n    # Get the positive value for speed\n    final_speed = max(solutions)\n\n    return final_speed\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes = 6\n    \n    # Find the time she spends on one cake (unit rate)\n    time_per_cake = time_for_6_cakes / cakes\n    \n    # Calculate the time for 10 cakes\n    time_for_10_cakes = time_per_cake * 10\n    \n    return time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for number of stickers Mr. Ya has\n    stickers = symbols('stickers')\n\n    # Create equations based on the problem statement\n    # When giving 13 stickers per pupil, he has 190 stickers left\n    equation1 = Eq(stickers % 13, 190)\n    # When giving 17 stickers per pupil, he has 50 stickers left\n    equation2 = Eq(stickers % 17, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers))\n\n    # Return the solution that is a positive number (and the only number)\n    return solutions[0]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    initial_velocity = 5  # m/s\n    angle = 45  # degrees\n    g = 9.81  # m/s^2 (acceleration due to gravity)\n    height = 30  # meters\n\n    # Convert angle to radians for calculation\n    angle_radians = math.radians(angle)\n\n    # Initial vertical velocity\n    initial_vertical_velocity = initial_velocity * math.sin(angle_radians)\n\n    # Using the third equation of motion: v^2 = u^2 + 2as\n    # Here, v is the final vertical velocity which we need to find,\n    # u is the initial vertical velocity,\n    # a is the acceleration due to gravity, and\n    # s is the displacement (height of the building in this case).\n\n    # We are considering the downward direction as positive, therefore 'a' is positive.\n    final_vertical_velocity_squared = initial_vertical_velocity**2 + 2 * g * height\n\n    # Since the final velocity can be in both directions (upward or downward), we consider only the positive square root for downward direction.\n    final_vertical_velocity = math.sqrt(final_vertical_velocity_squared)\n\n    # The horizontal velocity remains constant as there is no acceleration in the horizontal direction.\n    horizontal_velocity = initial_velocity * math.cos(angle_radians)\n\n    # The final velocity is the vector sum of the final vertical and constant horizontal velocities.\n    final_velocity = math.sqrt(horizontal_velocity**2 + final_vertical_velocity**2)\n\n    return final_velocity\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # We have to distribute 13 oranges to 3 kids\n    # Each kid must get at least one orange, so we first give one\n    # orange to each kid, leaving us with 13 - 3 = 10 oranges to distribute.\n\n    # We have to find the number of solutions to x + y + z = 10,\n    # where x, y, z are non-negative integers representing the\n    # number of additional oranges given to each kid.\n\n    # This problem can be solved using the formula for combinations with\n    # repetitions: C(n + r - 1, r), where n is the number of items to choose \n    # from (in this case the 10 oranges) and r is the number of items to \n    # choose (in this case 3 - 1, because we have already given one orange \n    # to each kid).\n\n    return comb(10 + 3 - 1, 3 - 1)\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for number in range(10, 100000):  # Start looking for the number from 10\n        if sum(map(int, str(number))) == 20:  # Check if the digit sum of the number is 20\n            if (number % 11) == 0:  # Check if it is divisible by 11\n                return number  # Return the smallest number satisfying both conditions\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    for S in range(1, 10):\n        for A in range(0, 10):\n            if A != S:\n                for M in range(0, 10):\n                    if M != A and M != S:\n                        for O in range(0, 10):\n                            if O != M and O != A and O != S:\n                                for G in range(1, 10):\n                                    if G != O and G != M and G != A and G != S:\n                                        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n                                        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n                                        if SASMO * 4 == OGAMS:\n                                            return SASMO\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    # Number of choices for each category\n    food_choices = 2  # sandwiches or burgers\n    drink_choices = 3  # coffee, milk, or tea\n    dessert_choices = 4  # cake, pudding, ice-cream, or pie\n\n    # Applying the principle of multiplication to find the total combinations\n    total_ways = food_choices * drink_choices * dessert_choices\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_amount = equal_volume - 28\n\n    return transfer_amount\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elephants, cows, horses, pigs = symbols('elephants cows horses pigs')\n\n    equation1 = Eq(2*elephants, 5*cows)\n    equation2 = Eq(4*cows, 3*horses)\n    equation3 = Eq(3*horses, 5*pigs)\n\n    solutions = solve((equation1, equation2, equation3), (elephants, cows, horses, pigs))\n    weight_of_one_elephant = solutions[elephants]\n\n    weight_of_eight_elephants = 8 * weight_of_one_elephant\n\n    equation4 = Eq(weight_of_eight_elephants, pigs)\n    num_pigs = solve(equation4, pigs)[pigs]\n\n    return num_pigs\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 2000  # initial amount borrowed\n    amount_after_3_years = 2519.42  # Amount owed after 3 years\n    rate = symbols('r')  # Define the symbol for the rate\n\n    # Compounded interest formula: A = P * (1 + r)^n,\n    # where P is principal, r is annual interest rate, n is number of years,\n    # and A is the amount after n years.\n    # We will set up the equation based on this formula and solve for r.\n    equation = Eq(principal * (1 + rate) ** 3, amount_after_3_years)\n\n    # Solve for the interest rate r\n    solution = solve(equation, rate)\n\n    # Extract the rate and convert it to a percentage by multiplying by 100\n    interest_rate = solution[0] * 100\n\n    return interest_rate\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.50)\n    total_change = 0.40\n    total_cost = total_paid - total_change\n    cost_per_cup = total_cost / 4\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n\n    eq1 = Eq(24 * mango_price + 20 * lychee_price, 1160)\n    eq2 = Eq(lychee_price, 2 * mango_price - 6)\n\n    prices = solve((eq1, eq2), (mango_price, lychee_price))\n\n    return prices[lychee_price]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percentage = 0.60\n    fraction = 2 / 5\n    number = 75\n    \n    result = percentage * fraction * number\n    \n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 18 / 100\n    tax_percent = 10 / 100\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # Singing performances can be considered as dividers between dancing performances\n    # There needs to be at least 1 singing performance between every 2 dancing performances.\n    # The minimum configuration will be D-S-D-S-D-S-D, where D stands for dancing and S for singing\n    # There are 3 slots created between 4 dancing, and we have 5 more singing performances to distribute.\n\n    # We can treat this as a stars and bars problem where we have 5 stars (singing performances)\n    # and need to place them into 3 bins (slots between the dancing performances)\n    # Number of ways = (n + k - 1) choose (k - 1), where n is the number of stars and k is the number of bins.\n    # Here, n = 5 (the additional singing performances), k = 4 (the spots created including ends).\n    ways_to_place_singing = nCr(5 + 4 - 1, 4 - 1)\n\n    # Now, we treat each group of singing performances as a single entity.\n    # The number of ways to arrange these entities with the 4 dancing performances is the number of permutations.\n    # Since each entity (group of singing performances) is indistinguishable, it's just (total entities)!\n    # But we have to consider the permutation of dancing performances among themselves, which is 4!\n    total_ways_to_arrange = ways_to_place_singing * factorial(4)\n\n    return total_ways_to_arrange\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    weight_per_box = total_weight_for_5_boxes / 5\n    total_weight_for_3_boxes = weight_per_box * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "import math\n\ndef solution():\n    # Since the comics must stay together, we can consider them as one unit.\n    # Likewise for the fictions, we consider them as another single unit.\n    # Hence, we have 2 units to arrange.\n    \n    # Number of ways to arrange the 2 units is 2! (since there are 2 units)\n    units_arrangement = math.factorial(2)\n    \n    # Now, within each unit, the books can be arranged in any order.\n    # Number of ways to arrange 4 comics among themselves is 4!\n    comics_arrangement = math.factorial(4)\n    \n    # Number of ways to arrange 6 fictions among themselves is 6!\n    fictions_arrangement = math.factorial(6)\n    \n    # The total number of arrangements is the product of all possible arrangements.\n    total_arrangements = units_arrangement * comics_arrangement * fictions_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    result = 2.4 * 7 - (6.8 - 7 / 10)\n    return result\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    total_points = 155\n    point_difference = 15\n    correct_points = 10\n    incorrect_points = -5\n    num_questions = 10\n\n    # Let's assume Dora's correct answers are x.\n    # Then Justin's correct answers are x + (point_difference / (correct_points - incorrect_points)).\n    # Incorrect answers for Dora are (num_questions - x).\n    # Incorrect answers for Justin are (num_questions - (x + point_difference / (correct_points - incorrect_points))).\n\n    # Number of points Dora got: correct_points * x + incorrect_points * (num_questions - x).\n    # Number of points Justin got: correct_points * (x + point_difference / (correct_points - incorrect_points)) + \n    #                             incorrect_points * (num_questions - (x + point_difference / (correct_points - incorrect_points))).\n\n    # Adding Dora's and Justin's points should be equal to total_points:\n    # correct_points * x + incorrect_points * (num_questions - x) +\n    # correct_points * (x + point_difference / (correct_points - incorrect_points)) + \n    # incorrect_points * (num_questions - (x + point_difference / (correct_points - incorrect_points))) = total_points.\n\n    # Solve for x:\n    for x in range(num_questions + 1):\n        dora_points = correct_points * x + incorrect_points * (num_questions - x)\n        justin_points = correct_points * (x + point_difference // (correct_points - incorrect_points)) + \\\n                        incorrect_points * (num_questions - (x + point_difference // (correct_points - incorrect_points)))\n        if (dora_points + justin_points) == total_points:\n            return x\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B.\n    # Total groups in Class A is 3, and total groups in Class B is 4,\n    # so the total groups combined is (3 + 4) = 7.\n    # The total candies sold by groups in Class A is 3 groups * 12 candies = 36 candies.\n    # The total candies sold on average by all 7 groups is 8 candies per group,\n    # which makes it a total of 7 * 8 = 56 candies.\n    # We need to find out how many candies the 4 groups of Class B sold in total,\n    # which we can find by subtracting Class A's total from the combined total:\n    # Total candies sold by Class B = Total candies sold by all - Total candies sold by Class A\n    total_candies_B = (7 * 8) - 36\n    # Now we want to find the average for Class B groups, which means dividing by the number of groups in Class B:\n    average_candies_B = total_candies_B / 4\n    return average_candies_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the time it takes Nancy to type the document by herself.\n    # Let l be the time it takes Lee to type the document by herself.\n    n, l = symbols('n l')\n\n    # We have two equations representing their rates of work\n    # 1/l + 1/n = 1/10  because they finish the job together in 10 hours\n    equation1 = Eq(1/l + 1/n, 1/10)\n\n    # If Lee works for 6 hours, they together finish a part of the job, so\n    # Lee's completed part is 6/l and Nancy's completed part is 20/n\n    # And together they complete the job, so 6/l + 20/n = 1\n    equation2 = Eq(6/l + 20/n, 1)\n\n    # Solving the system of equations for n\n    solutions = solve((equation1, equation2), (n, l))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    total_ratio = coffee_ratio + milk_ratio\n    coffee_amount = 6\n\n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n\n    return latte_amount\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    remaining_length = total_length - used_length\n    num_pieces = 10\n\n    length_per_piece = remaining_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    # Let x be the total number of passengers at the start\n    # After the first stop, (2/5)x passengers got off, leaving (3/5)x on the bus\n    # After the next stop, (1/3) of the remaining (3/5)x passengers got off, leaving 22 passengers\n    # The equation for the number of passengers left is (2/3)*(3/5)x = 22\n    # We solve for x\n    \n    remaining_after_first_stop = 3/5 # Fraction remaining after first stop\n    getting_off_second_stop = 1/3 # Fraction of passengers getting off at second stop\n    remaining_after_second_stop = 1 - getting_off_second_stop # Fraction remaining after second stop\n    \n    # After both stops, the fraction of passengers remaining is the product of fractions after each stop\n    total_remaining_fraction = remaining_after_first_stop * remaining_after_second_stop\n    \n    # Initial passengers are hence:\n    initial_passengers = 22 / total_remaining_fraction\n    \n    return initial_passengers\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences (remainder, modulus)\n    congruences = [(3, 4), (4, 5)]\n\n    # Use the Chinese Remainder Theorem to find the solution\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    result = 45 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    return comb(7, 2)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 9\n    c = 18\n\n    ans = gcd(gcd(a, b), c)\n    return ans\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white, milk, dark = symbols('white milk dark')\n    ratio_eq = Eq(white / milk, 3 / 7)\n    ratio_eq2 = Eq(milk / dark, 7 / 5)\n    diff_eq = Eq(dark - white, 8)\n    \n    solutions = solve((ratio_eq, ratio_eq2, diff_eq), (white, milk, dark))\n    \n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = symbols('total_students')\n    \n    badminton_boys = total_students / 4 + 3\n    table_tennis_fans = (total_students - badminton_boys) / 3 - 3\n    football_fans = 25\n    \n    equation = Eq(total_students, badminton_boys + table_tennis_fans + football_fans)\n    \n    students_in_class = solve(equation, total_students)\n    \n    return students_in_class[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to add\n    # P(getting a green ball) = number of green balls / total number of balls\n    # We want P(getting a green ball) = 1/3\n    # So, the equation will be:\n    # 10 / (5 + x + 10) = 1/3\n    # Solving the equation for x:\n    x = (10 * 3) - 5 - 10\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    # Calculate how many squares of 3cm can fit along the side of the 6cm square\n    side_ratio = 6 // 3\n    \n    # Since the area is side_ratio by side_ratio, we just square the side_ratio to find\n    # how many smaller squares fit in the larger square.\n    ans = side_ratio ** 2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction_of_total = 1 / 4\n\n    total_money = spent / fraction_of_total\n\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for Peter's initial number of stickers\n    peter_initial = symbols('peter_initial')\n    \n    # Sam initially had 40 more stickers than Peter\n    sam_initial = peter_initial + 40\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam_initial\n    peter_after_sam_gives = peter_initial + sam_gives\n    \n    # In return, Peter gives 25% of his stickers to Sam\n    peter_gives = 0.25 * peter_after_sam_gives\n    sam_final = sam_initial - sam_gives + peter_gives\n    peter_final = peter_after_sam_gives - peter_gives\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam_final - peter_final, 96)\n    \n    solutions = solve((equation), (peter_initial))\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the ones digit of each term.\n    ones_digit_32_pow_33 = (32 ** 33) % 10\n    ones_digit_22_pow_29 = (22 ** 29) % 10\n    \n    # Subtract them to get the ones digit of the result.\n    ones_digit_result = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    \n    return ones_digit_result\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    def count_sixes(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('6')\n        return count\n    \n    # Use binary search since the count of sixes increases with number of pages\n    low, high = 1, 1000  # Start with a range\n    while low < high:\n        mid = (low + high) // 2\n        if count_sixes(mid) >= 18:\n            high = mid\n        else:\n            low = mid + 1\n\n    # Verify if this page count doesn't exceed 18 sixes\n    if count_sixes(low) == 18:\n        return low\n    else:\n        return low - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given ratio        \n    ratio1 = 4 / 9\n    ratio2 = 81\n\n    # Find the cross-multiply and find the missing number\n    missing_number = ratio1 * ratio2 \n\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height_to_climb = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n\n    # As the monkey slides down 3m after every 2 jumps, we should calculate\n    # the net gain in height every 2 jumps.\n    net_gain_every_two_jumps = (2 * jump_up) - slide_down\n\n    # The monkey will reach or surpass the target height just before the last\n    # slide down, so we need to find the height reached before the last slide.\n    while height_to_climb > jump_up:\n        jumps += 2  # The monkey makes two jumps\n        height_to_climb -= net_gain_every_two_jumps\n    \n    # Add the final jump to reach or surpass the top of the tree.\n    jumps += 1\n\n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    # Initialize the sum variable\n    sum_series = 0\n    \n    # Loop from 1 to 2012, iterate through the terms of the sequence\n    for i in range(1, 2013):\n        # Calculate the term and add it to the sum\n        term = (i ** 3) / (i * (i + 1) * (i + 2))\n        sum_series += term\n    \n    # Add the last term to the sum\n    sum_series += 1 / 4026\n    \n    # Return the result\n    return sum_series\n\n# Call the function to get the answer\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i**0.5 == int(i**0.5) and (i + 1) % 5 == 0 and i % 16 == 0:\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    # The difference between each term is 6 (21 - 15, 27 - 21, etc.)\n    difference = 6\n    last_term = 39\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    score_per_correct = 4\n    score_per_wrong_or_unanswered = -2\n    total_score = 152\n\n    # Let's assume all questions are answered correctly\n    all_correct_score = total_questions * score_per_correct\n\n    # Let's find the difference between all correct scores and actual score\n    score_diff = all_correct_score - total_score\n\n    # Each wrong or unanswered question causes a swing of 6 marks (because it's a loss of 2 instead of a gain of 4)\n    swing_per_question = score_per_correct - score_per_wrong_or_unanswered\n\n    # The number of wrong or unanswered questions\n    wrong_or_unanswered_questions = score_diff / swing_per_question\n\n    # Number of correct questions\n    correct_questions = total_questions - wrong_or_unanswered_questions\n\n    return int(correct_questions)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To divide 16 sausages among 24 people equally,\n    # each person should get 16 / 24 = 2 / 3 of a sausage.\n    # One straight cut on a sausage can be shared by at most 2 people (half each).\n    # So, for 24 people, at least 12 sausages have to be cut in half (12 cuts).\n    # The remaining 4 sausages need to be cut into thirds.\n    # Each sausage needs 2 straight cuts to be divided into thirds, for a total of 8 cuts.\n    # Adding them gives us the minimum number of cuts required.\n    min_cuts = 12 + 8\n    return min_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")  # Total number of letters\n    total_vowels = len(\"AI\")  # Number of vowels in the word\n    total_consonants = total_letters - total_vowels  # Number of consonants\n\n    # Calculate the total permutations of the consonants and the vowels\n    # as separate groups (treating each group as a unit)\n    total_permutations = factorial(total_letters)\n\n    # Calculate permutations of vowels considered together\n    vowels_together = factorial(total_vowels) * (total_consonants + 1)\n\n    # Subtract ways where vowels are together from all possible permutations\n    permutations_with_vowels_not_together = total_permutations - vowels_together\n\n    return permutations_with_vowels_not_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let B be the amount of water in container B\n    B = symbols('B')\n\n    # Given that A had 350 mL more than B\n    A = B + 350\n\n    # After spilling, container A had this much water\n    A_after_spill = A - 500\n\n    # Container B had twice as much as container A after the spill\n    equation = Eq(B, 2 * A_after_spill)\n\n    # Solve for B\n    solution_B = solve(equation, B)[0]\n\n    # Calculate A based on the value of B\n    solution_A = solution_B + 350\n\n    return solution_A\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from sympy import gcd\n    \n    diff1 = abs(39 - 51)\n    diff2 = abs(51 - 147)\n    diff3 = abs(39 - 147)\n    \n    gcd_diff = gcd(diff1, diff2)\n    ans = gcd(gcd_diff, diff3)\n\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    lovelle_conversations = 5 * 3  # Lovelle said 3 sentences to each of the 5 other members she spoke with\n    others_conversations = 12 * 0  # 12 members did not speak to Lovelle\n    total_conversations = lovelle_conversations + others_conversations  # Total conversations that included Lovelle\n    \n    # Each conversation Lovelle had was with a unique person, so we count those plus Lovelle and the 12 others\n    total_team_members = 5 + 1 + 12  # The 5 she talked to, Lovelle herself, and the 12 she didn't talk to\n    return total_team_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3 / 8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Initialize count of digits\n    digit_count = 0\n    \n    # Count the digits for pages 1-9\n    digit_count += 1 * 9\n    \n    # Count the digits for pages 10-99\n    digit_count += 2 * (99 - 10 + 1)\n    \n    # Count the digits for pages 100-325\n    digit_count += 3 * (325 - 100 + 1)\n    \n    return digit_count\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    \n    total_tickets_sold = first_week_tickets + second_week_tickets + third_week_tickets\n    \n    return total_tickets_sold\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    total_length = len(word)\n    \n    # Total permutations without restriction\n    total_permutations = factorial(total_length) // (factorial(word.count('S')) * factorial(word.count('T')) * factorial(word.count('A')) * factorial(word.count('I')) * factorial(word.count('C')))\n    \n    # Permutations where T's are together\n    word_with_t_together = \"TT\" + word.replace(\"T\", \"\")\n    total_length_with_t_together = len(word_with_t_together)\n    \n    permutations_with_t_together = factorial(total_length_with_t_together) // (factorial(word_with_t_together.count('S')) * factorial(2) * factorial(word_with_t_together.count('A')) * factorial(word_with_t_together.count('I')) * factorial(word_with_t_together.count('C')))\n    \n    # Subtract permutations where Ts are together from the total permutations\n    valid_permutations = total_permutations - permutations_with_t_together\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 1000):  # Let's try different packet sizes\n        # After eating 2 in music lesson\n        remaining_after_music = gums - 2\n\n        # Shared one third with friends\n        shared = remaining_after_music // 3\n        if remaining_after_music % 3 == 0:  # Must be a whole number\n            remaining_after_sharing = remaining_after_music - shared \n\n            # Eating an equal amount in each of the next four lessons\n            if remaining_after_sharing % 4 == 0:\n                return gums  # The smallest number of gums in the packet\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # Since there are 9 keys and 4 chests, the first chest could be opened by any of 9 keys.\n    # After the first chest is opened, the second one can be opened by any of the remaining 8 keys.\n    # The third chest can be opened with any of the 7 remaining keys,\n    # and the fourth chest can be opened with any of the remaining 6 keys.\n    attempts = 9 + 8 + 7 + 6\n    \n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    ans = 2.98 * 23\n    return ans\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Looking at the pattern, it appears that the number increases by 500, then decreases by 200 repeatedly.\n    # Starting with the first increase of 500 from 2945 to 3445:\n    increase = 500\n    decrease = 200\n\n    # Next number after 3445 would be 3445 - 200 = 3245 (which matches the sequence).\n    # Next number after 3245 would be 3245 + 500 = 3745 (which matches the sequence).\n    # Therefore, the next number after 3745 should be 3745 - 200 = 3545 (which is the missing number).\n\n    missing_number = 3745 - decrease\n    return missing_number\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    result = 15 / (1/7)\n    return result\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n\n    car_value_after_6_years = initial_value * (depreciation_rate ** 6)\n    \n    return car_value_after_6_years\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    difference = 26\n\n    # Let x be the number of mushrooms gathered in the first hour\n    # Then x + 26 will be the number of mushrooms gathered in the second hour\n    # According to the problem, x + (x + 26) = total_mushrooms\n\n    # Solving for x gives us the mushrooms gathered in the first hour\n    x = (total_mushrooms - difference) / 2\n\n    # The mushrooms gathered in the second hour would be x + 26\n    second_hour_mushrooms = x + difference\n\n    return second_hour_mushrooms\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    num_coins = 11\n    diameter_of_coin = 1.85\n    total_length = (num_coins - 1) * diameter_of_coin\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    # First term of the arithmetic sequence\n    a1 = 5\n    # Common difference of the arithmetic sequence\n    d = 8 - 5\n    # Number of terms in the arithmetic sequence\n    n = 14\n\n    # n-th term of the arithmetic sequence\n    an = a1 + (n - 1) * d\n\n    # Sum of the arithmetic sequence\n    sum_seq = (n * (a1 + an)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    ans = round(number / 100) * 100\n    return ans\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    ans = (3/12) * 20\n    return ans\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "import math\n\ndef solution():\n    num_people = 8\n    # Subtracting 1 because in circular permutations, (n-1)! is used.\n    ans = math.factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n    \n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)  # Last digit of 2^2017\n    last_digit_3 = pow(3, 2017, 10)  # Last digit of 3^2017\n    \n    # The last digit of the product\n    last_digit = (last_digit_2 * last_digit_3) % 10  \n    \n    return last_digit\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    remaining_after_sweep = 1 - 3/4  # Remaining fraction after sweeping 3/4\n    remaining_after_run = 1 - 2/5    # Remaining fraction after 2/5 ran away\n    ants_came = 185                  # Number of ants that came\n\n    # Let x be the original number of ants in the kitchen\n    # Equation based on the problem statement:\n    # x * remaining_after_sweep * remaining_after_run + ants_came = 2 * x\n    # Simplifying the equation to solve for x:\n    x = ants_came / ((2 - remaining_after_sweep * remaining_after_run))\n\n    return int(x)\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    # Define the current ages of Sandra and her mother\n    sandra_age = 8\n    mother_age = sandra_age + 33\n\n    # Calculate their ages 2 years ago\n    sandra_age_2_years_ago = sandra_age - 2\n    mother_age_2_years_ago = mother_age - 2\n\n    # Calculate the difference in age 2 years ago\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_spent = book_price * (books_day1 + books_day2)\n\n    return total_spent\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    current_term = 7\n    next_term = (current_term + 1) ** 2\n    return next_term\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    num_friends = 42\n    pens_per_friend = 23\n    total_pens = num_friends * pens_per_friend\n    return total_pens\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term and d be the common difference\n    a, d = symbols('a d')\n\n    # The first term of the series is a\n    # The fifth term, which is the first term of the last four terms, is a + 4*d\n    # Sum of the first four terms is 4*a + 6*d (Sum of an A.P. is n/2*(2*a + (n-1)*d))\n    # Sum of the last four terms is (4*a + 12*d) + (4-1)*d = 4*a + 18*d\n    # The problem states that the sum of the last four terms is 32 more than the sum of the first four terms\n\n    equation = Eq(4*a + 6*d + 32, 4*a + 18*d)\n    solution = solve(equation, d)\n    \n    return solution[d]\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(n):\n        return (2 * n + 4) % 100  # Only keeping tens and ones digits\n\n    current_number = 1\n    for _ in range(2021):  # Since we are starting at 1, we iterate 2021 times\n        current_number = next_number(current_number)\n    return current_number\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 42))\n    for a in primes:\n        for b in primes:\n            if 3 * a + 7 * b == 41:\n                return a + b\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    lcm = (4 * 6) // math.gcd(4, 6)  # Calculate the least common multiple of 4 and 6\n    flashes_per_hour = 60 // lcm  # Calculate how many times they flash together in an hour\n    return flashes_per_hour + 1  # Include the first time\n\nimport math\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + profit_percent / 100)\n    desired_profit = 5000\n    new_selling_price = cost_price + desired_profit\n    new_profit_percent = (desired_profit / cost_price) * 100\n    return new_profit_percent\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n    solutions = solve(equation, n)\n    \n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_ml_per_bottle = (120 / (1 - (3/5)))\n    water_ml_per_bottle = total_ml_per_bottle * (3/5)\n    water_ml_for_6_bottles = water_ml_per_bottle * 6\n    return water_ml_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kilograms = 8.2\n    grams_per_kilogram = 1000\n    n = kilograms * grams_per_kilogram\n    return int(n)\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    num_letters = factorial(len(\"EARTH\"))\n    return num_letters\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    time_walked = 10\n    \n    # Calculate the distance each person has walked after 10 minutes\n    distance_simon = simon_speed * time_walked\n    distance_friend = friend_speed * time_walked\n    \n    # Simon runs back to school at twice his walking speed\n    simon_run_speed = 2 * simon_speed\n    time_to_return = distance_simon / simon_run_speed  # Time taken to return to school\n    \n    # Calculate the additional distance friend has walked in the time Simon takes to run back to school\n    additional_distance_friend = friend_speed * time_to_return\n    \n    # Calculate the final distance between Simon and his friend\n    final_distance = distance_friend + additional_distance_friend\n\n    return final_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(\"0123456789\", 5):\n        s, e, n, d, m = perm\n        send = int(s + e + n + d)\n        more = int(m + o + r + e)\n        money = int(m + o + n + e + y)\n        if send + more == money and s != '0' and m != '0':\n            return send * more\n    return None\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_balls = 2 + 2 + 2 + 1  # Total number of decorations\n    bells = 2\n    stars = 2\n    red_balls = 2\n    green_ball = 1\n    \n    # Use multinomial theorem for permutations of identical items\n    ways = factorial(total_balls) // (factorial(bells) * factorial(stars) * factorial(red_balls) * factorial(green_ball))\n    \n    return ways\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # litres\n    other_container = initial_volume * 0.25\n    cup_volume = 0.150  # 150 ml in litres\n    number_of_cups = 14\n    cups_total_volume = number_of_cups * cup_volume\n    \n    water_left = initial_volume - other_container - cups_total_volume\n    \n    return water_left\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for d1 in range(10):\n        for d2 in range(10):\n            num = int(f\"2{d1}{d2}335\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # We start by recognizing the bottleneck: Mary with 10 minutes to cross.\n    # She should cross the bridge with the fastest person (Eddie), to minimize wait time.\n    # The strategy:\n    # 1. Eddie (1 min) and Jack (2 min) cross first: spent = 2 (Jack's time)\n    # 2. Eddie (1 min) returns with the flashlight: spent = 2 + 1 = 3\n    # 3. Eddie (1 min) can't take Mary (10 min) now or they will waste time,\n    #    so take the second bottleneck, Rose (5 min) with Mary (10 min): spent = 3 + 10 = 13\n    # 4. Jack (2 min), being faster than Eddie (1 min) now, returns: spent = 13 + 2 = 15\n    # 5. Eddie (1 min) and Jack (2 min) cross again: spent = 15 + 2 = 17\n    # This is the shortest time for all of them to get across.\n    return 17\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100 - (100 % 7)\n    return n - 7\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    # This problem requires solving for the number of derangements (also known as subfactorials)\n    # for 7 items, which is often denoted as !7.\n    \n    # A simple way to compute the number of derangements is by using the formula:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n / n!)\n    # where n! is the factorial of n and !n is the number of derangements.\n    \n    # We can use the factorial function from the math library\n    from math import factorial\n    \n    n = 7  # Number of friends\n    derangements = 0\n    \n    # Calculate derangements using the formula above\n    for i in range(n + 1):\n        derangements += int((-1) ** i / factorial(i))\n    \n    derangements *= factorial(n)\n    \n    return derangements\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    harry_time = 24  # in minutes\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1 / 4)\n    return ans\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip bakes 5 loaves in 20 minutes, so in 40 minutes she will bake double\n    pip_loaves_40_min = (5 / 20) * 40\n\n    # Bud bakes 3 loaves in 15 minutes, so in 40 minutes he will bake\n    bud_loaves_40_min = (3 / 15) * 40\n\n    # Total loaves baked by Pip and Bud in 40 minutes\n    total_loaves_40_min = pip_loaves_40_min + bud_loaves_40_min\n\n    return total_loaves_40_min\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let p be the number of pages Anny needs to finish in total\n    p = Symbol('p')\n\n    # Let r be the original rate (pages per day)\n    r = p / 8\n\n    # If she writes 2 more pages per day, her rate would be r + 2\n    # And she would finish 2 days earlier, therefore in 6 days\n    new_rate = r + 2\n\n    # Now we set up the equation\n    # p = original rate * original time\n    # p = new rate * new time (6 days)\n    # original rate (r) = p / 8\n    # new rate (new_rate) = r + 2 = (p / 8) + 2\n    # p = ((p / 8) + 2) * 6\n    equation = p - ((p / 8) + 2) * 6\n\n    # Solve the equation for p\n    pages = solve(equation, p)\n\n    return pages[0]\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Assuming the increased value after first year is £11,000 (10% increase)\n    # initial_price * 1.10 = 11000\n    # initial_price = 11000 / 1.10\n    initial_price = 11000 / 1.10\n    \n    # The house loses 10% of its value in the second year\n    # new_value = initial_price * 0.90\n    new_value = initial_price * 0.90\n\n    # Calculating profit or loss\n    # profit_loss = new_value - initial_price\n    profit_loss = new_value - initial_price\n\n    return profit_loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # To ensure getting a pair of white socks,\n    # he might pick one sock of each color at first.\n    # After that, he may pick 10 more non-white socks (worst case scenario)\n    # before he starts picking out white socks.\n    # Finally, he will need to pick at most 2 white socks to get a pair of white socks.\n    max_socks = 1 + 1 + 10 + 1 + 1\n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # It doesn't matter which value we choose for 'a' since we want a generic form\n    expression = (12 * a) / 4 + (2 * a) * 5\n    simplified_expression = expression\n\n    return simplified_expression\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Assign a value to d for substitution\n    ans = (6 * d) + (5 * d) - d  # Simplify the algebraic expression using arithmetic\n    return ans / d  # Divide by d to get the coefficient of d in its simplest form\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    # Let x be the total number of cookies Richard had at first.\n    # He ate 3/8 of the cookies in the morning and 1/6 of them in the afternoon.\n    # He had 33 cookies left.\n    # So, the equation is: x - 3/8 * x - 1/6 * x = 33\n    # We can solve this equation for x to find the total number of cookies at first.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - (3/8) * x - (1/6) * x, 33)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n\n    sequence.sort()  # This step is not strictly necessary as the sequence is already sorted by construction\n    mid = len(sequence) // 2\n\n    if len(sequence) % 2 == 0:\n        median = (sequence[mid - 1] + sequence[mid]) / 2\n    else:\n        median = sequence[mid]\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jemma_number = symbols('jemma_number')\n    \n    equation = Eq((jemma_number + 3) * 5, 35)\n    \n    solution = solve(equation, jemma_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    # Starting from 5th May which is a Monday, count the days until 7th June\n    may_days = 31 - 5  # Number of days in May from 5th onwards\n    june_days = 7      # Number of days in June up to 7th\n    total_days = may_days + june_days  # Total number of days between the two dates\n\n    # Number of Sundays can be found by dividing the total number of days by 7\n    # and adding 1 if there is a remainder (since we start counting from a Monday)\n    num_sundays = total_days // 7 + (1 if total_days % 7 > 0 else 0)\n\n    return num_sundays\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    red_initial, white_initial, red_pip, white_bud = symbols('red_initial white_initial red_pip white_bud')\n    \n    # Initial ratio of red to white marsmbl2 - 5r == 100\n    equation2 = Eq(red_initial + red_pip, 5 * (white_initial + 100 + red_pip) / 4)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (red_initial, white_initial, red_pip))\n    \n    # Get the number of white balls at first\n    white_at_first = solutions[white_initial]\n    \n    return white_at_first\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    num_buckets = barrel_capacity // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    flour_per_packet = total_flour / num_packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for k in range(10):\n        number = int(f'5{k}27{k}')\n        if number % 3 == 0 and number % 4 == 0:\n            return k\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, brownies = symbols('cookies brownies')\n    initial_ratio = Eq(cookies / brownies, 4/3)\n    after_giving_away = Eq((cookies) / (brownies - 6), 12/7)\n\n    solutions = solve((initial_ratio, after_giving_away), (cookies, brownies))\n    \n    total = solutions[cookies] + solutions[brownies]\n    return total\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Calculate how many meters of expressway one company builds per day\n    meters_per_company_per_day = 900 / (4 * 5)\n    \n    # Calculate the total number of company-days required to build 5400m of expressway\n    total_company_days_needed = 5400 / meters_per_company_per_day\n    \n    # Calculate the number of days it takes for 6 companies to build the 5400m expressway\n    days_needed = total_company_days_needed / 6\n    \n    return days_needed\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Cost when buying back the horse\n    buy_back = 10 + 30\n\n    # Earnings when selling the horse\n    selling = 20 + 40\n\n    # Profit is the difference between selling and buying\n    profit = selling - buy_back\n\n    return profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Given that Adam spends £93 for 6 tickets\n    adam_spent = 93\n    adam_tickets = 6\n    \n    # We find the cost per ticket\n    cost_per_ticket = adam_spent / adam_tickets\n    \n    # Claire spends £124\n    claire_spent = 124\n    \n    # We find how many tickets Claire buys\n    claire_tickets = claire_spent // cost_per_ticket\n    \n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_position = 10\n    term_value = 31\n    common_difference = 28 - 25\n\n    first_term = term_value - (term_position - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, each pair has 2 shoes\n    time_per_shoe = 2  # time in minutes to clean one shoe\n    cobblers = 2  # number of cobblers\n\n    # Total time if one cobbler cleans all the shoes\n    total_time = total_shoes * time_per_shoe\n    \n    # Shortest time if they work together (divide by number of cobblers)\n    shortest_time = total_time / cobblers\n\n    return shortest_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    def square_sum(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    ans = sum(square_sum(i) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    \n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n    \n    return packets_needed\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    max_value_player_two = 0\n\n    for card1 in range(1, 9):\n        for card2 in range(card1 + 1, 9):\n            for card3 in range(card2 + 1, 9):\n                for card4 in range(card3 + 1, 9):\n                    if card1 + card2 + card3 + card4 == 23:\n                        remaining_cards = set(range(1, 9)) - {card1, card2, card3, card4}\n                        max_card = max(remaining_cards)\n                        max_value_player_two = max(max_value_player_two, max_card)\n    \n    return max_value_player_two\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + (2018 * 2020)\n    denominator = (2019 * 2020) - 1\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n\n    dumplings_to_give = (luna_dumplings - lucy_dumplings) // 2\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    whole_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (whole_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        CBCD = C * 1000 + B * 100 + C * 10 + D\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        if CBCD + CDBC == BDEC and C != 0:\n            return BDEC\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    # Let x be the number of questions Amna answered correctly\n    # Let y be the number of questions Amna answered incorrectly\n    # There are 50 questions in total\n    # Amna doesn't attempt 3 questions, so she attempts 50 - 3 = 47 questions\n    # She scores 4 marks for each correct answer and loses 1 mark for each incorrect answer\n    # Amna's total score is 168\n\n    # The system of equations is:\n    # x + y = 47 (the total number of attempted questions)\n    # 4x - y = 168 (the score from correct and incorrect answers)\n\n    # We will solve the system of equations to find x, the number of questions answered correctly\n    \n    # Number of attempted questions\n    attempted_questions = 47\n    # Amna's total score\n    total_score = 168\n    # Marks for correct answer\n    correct_marks = 4\n    # Marks taken off for incorrect answer\n    incorrect_marks = -1\n\n    # We can express y in terms of x from the first equation: y = attempted_questions - x\n    # Substituting the value of y in the total_score equation gives us:\n    # 4x - (attempted_questions - x) = total_score\n    # Simplifying, we get:\n    # 4x - attempted_questions + x = total_score\n    # 5x - attempted_questions = total_score\n    # 5x = total_score + attempted_questions\n    # x = (total_score + attempted_questions) / 5\n\n    x = int((total_score + attempted_questions) / (correct_marks - incorrect_marks))\n\n    return x\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    \n    # Least common multiple of the pack sizes will give the smallest number of markers\n    # that he can buy in equal amounts of each pack size\n    packs = [6, 8, 9, 15]\n    least_common_multiple = lcm(*packs)\n\n    # Find the smallest multiple of the lcm that is greater than or equal to 1000\n    min_markers = least_common_multiple\n    while min_markers < 1000:\n        min_markers += least_common_multiple\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_tailor * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    word = \"CHALLENGE\"\n    num_vowels = 3\n    num_consonants = len(word) - num_vowels\n    \n    # All vowels are treated as a single entity first.\n    num_entities = num_consonants + 1\n    \n    # Calculate factorial for the number of entities.\n    num_ways_entities = factorial(num_entities)\n    \n    # Calculate factorial for consonants to accommodate for their permutations.\n    consonants_factorial = factorial(num_consonants)\n    \n    # 'EE' has two permutations which are the same, so we divide by 2! to correct over-counting.\n    vowels_permutations = factorial(num_vowels) / factorial(2)\n    \n    # Multiply to get the total number of ways.\n    total_ways = num_ways_entities * vowels_permutations / consonants_factorial\n    \n    return int(total_ways)\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    avg_Jan_to_Mar = 450\n    months_Jan_to_Mar = 3\n    total_Jan_to_Mar = avg_Jan_to_Mar * months_Jan_to_Mar\n\n    avg_Apr_to_Jul = 350\n    months_Apr_to_Jul = 4\n    total_Apr_to_Jul = avg_Apr_to_Jul * months_Apr_to_Jul\n\n    total_Aug_to_Oct = 1250\n\n    avg_Nov_to_Dec = 400\n    months_Nov_to_Dec = 2\n    total_Nov_to_Dec = avg_Nov_to_Dec * months_Nov_to_Dec\n\n    total_spent = total_Jan_to_Mar + total_Apr_to_Jul + total_Aug_to_Oct + total_Nov_to_Dec\n    average_spent = total_spent / 12\n\n    return average_spent\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    carrot_cake_count = 4\n    cheesecake_count = 1\n    chocolate_cake_count = 5\n\n    carrot_cake_price = 5\n    cheesecake_price = 10\n    chocolate_cake_price = 12\n\n    total_cakes = carrot_cake_count + cheesecake_count + chocolate_cake_count\n    total_revenue = (carrot_cake_count * carrot_cake_price) + (cheesecake_count * cheesecake_price) + (chocolate_cake_count * chocolate_cake_price)\n\n    average_price = total_revenue / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    divisor_quotient = 1  # starting from 1 to find the smallest possible divisor equal to quotient\n\n    while True:\n        dividend = divisor_quotient ** 2 + remainder\n        if dividend % divisor_quotient == remainder:\n            return dividend\n        divisor_quotient += 1\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    return 2 * 25 * 123\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    eq1 = Eq(cars, 4/3 * bikes)\n    eq2 = Eq(bikes, lorries + lorries / 4)\n    solutions = []\n\n    for total in range(2, 100, 2):\n        eq3 = Eq(cars + bikes + lorries, total)\n        sol = solve((eq1, eq2, eq3), (cars, bikes, lorries))\n        if all(value.is_integer and value > 0 for value in sol.values()):\n            solutions.append(sol)\n\n    if len(solutions) == 1:  # Assuming the problem has a unique solution\n        return solutions[0]\n    else:\n        return solutions  # If multiple solutions exist, return all of them.\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    nth_term = first_term + (12 - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_rate_single = 25\n    time_with_one_entrance = 16\n    \n    # Calculate the total number of visitors arrived in 16 minutes with one entrance\n    total_visitors = visitors_per_minute * time_with_one_entrance\n    \n    # Calculate check-in rate with two entrances\n    check_in_rate_double = 2 * check_in_rate_single\n    \n    # Calculate time with two entrances to clear the line\n    time_with_two_entrances = total_visitors / check_in_rate_double\n    \n    return int(time_with_two_entrances)\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while True:\n        cube_root = round((245 * p) ** (1/3))\n        if cube_root ** 3 == 245 * p:\n            return p\n        p += 1\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days = total_pages / pages_per_day\n\n    return int(days)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return 6**2 - 4**2\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    book_cost = initial_money * 0.10\n    money_after_book = initial_money - book_cost\n    dvd_cost = money_after_book * 0.20\n    money_left = money_after_book - dvd_cost\n    return money_left\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1 divided by 3 is 0.333... recurring\n    sum_digits = sum(int(digit) for digit in decimal_part)\n    return sum_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    climb_up = 5\n    slide_down = 3\n    net_distance_per_day = climb_up - slide_down\n\n    # Counting all full days except the last day\n    days = (total_distance - climb_up) // net_distance_per_day \n    distance_climbed = days * net_distance_per_day\n\n    # Adding the last day when the snail climbs out\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_up\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_down\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    original_number = (final_number - added_number) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(scores)\n    num_games = len(scores)\n    mean_goals = total_goals / num_games\n    return mean_goals\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original number of oranges be 3x and lemons be 5x\n    x = symbols('x')\n    \n    # Set up the equations based on the ratio information given\n    original_oranges = 3 * x\n    original_lemons = 5 * x\n    sold_oranges = original_oranges - 48\n    \n    # New ratio after selling 48 oranges is 1:2\n    new_ratio_eq = Eq(sold_oranges / original_lemons, 1/2)\n    \n    # Solve for x\n    solutions = solve(new_ratio_eq, x)\n    lemons_at_first = original_lemons.subs(x, solutions[0])\n\n    return lemons_at_first\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percent = 10\n    discount_amount = original_price * (discount_percent / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10\n    fraction_spent = 1/4\n    initial_amount = spent / fraction_spent\n    return initial_amount\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits, and each student can choose 1, 2 or 3 types.\n    # Therefore, there are C(3,1) + C(3,2) + C(3,3) combinations for choosing fruits.\n    \n    # Using the formula C(n,k) = n! / (k!(n-k)!)\n    from math import factorial as fact\n    \n    # Compute combinations for each case\n    C_3_1 = fact(3) / (fact(1) * fact(3-1))\n    C_3_2 = fact(3) / (fact(2) * fact(3-2))\n    C_3_3 = fact(3) / (fact(3) * fact(3-3))\n\n    # Sum the combinations \n    total_combinations = C_3_1 + C_3_2 + C_3_3\n    \n    # According to the Pigeonhole Principle, the number of students required is the number of combinations plus 1\n    ans = total_combinations + 1\n    \n    return int(ans)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    students_A = 45\n    students_B = 75\n    students_C = 210\n\n    # Calculate the gcd of A and B\n    gcd_ab = gcd(students_A, students_B)\n\n    # Calculate the gcd of gcd of A and B with C\n    gcd_abc = gcd(gcd_ab, students_C)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n\n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(father_age + judy_age, 63)\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n\n    solutions = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    ducks_legs = 3 * 2  # Ducks have 2 legs each\n    parrots_legs = 2 * 2  # Parrots have 2 legs each\n    rabbit_legs = 1 * 4  # Rabbit has 4 legs\n    # Total number of legs already accounted for without cats\n    total_legs_without_cats = ducks_legs + parrots_legs + rabbit_legs\n    # Total legs that should belong to cats\n    legs_for_cats = 32 - total_legs_without_cats\n    # Number of legs per cat\n    cat_legs = 4\n    # Number of cats\n    number_of_cats = legs_for_cats // cat_legs\n    return number_of_cats\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "from math import comb\n\ndef solution():\n    num_teams = 11\n    matches = comb(num_teams, 2)\n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def operation_phi(a, b):\n    if a < 7:\n        return a + b * b\n    else:\n        return a - b\n\ndef solution():\n    inner_result = operation_phi(8, 3)\n    final_result = operation_phi(4, inner_result)\n    return final_result\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the older brother and y be the current age of the younger brother.\n    x, y = symbols('x y')\n\n    # Create equations based on the problem statement.\n    # When the older brother was y years old (the younger brother's current age), the younger brother was 12.\n    equation1 = Eq(x - y, 12)\n    \n    # When the younger brother becomes x years old (the older brother's current age), the older brother will be 27.\n    equation2 = Eq(y + (x - y), 27)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the current age of the older brother.\n    return solutions[x]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    # LCM (Least Common Multiple) of 6, 8, 9, and 15 is needed\n    from math import gcd\n\n    # Function to find Least Common Multiple\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Find LCM of the four numbers\n    lcm_value = lcm(lcm(6, 8), lcm(9, 15))\n\n    # Find the minimum number of markers greater or equal to 1000\n    count = lcm_value\n    while count < 1000:\n        count += lcm_value\n\n    return count\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    rooms, students = symbols('rooms students')\n\n    # If there are 4 people in each room, 40 students don't have dormitories\n    equation1 = Eq(4 * rooms, students - 40)\n    # If there are 6 people in each room, 24 beds will be vacated\n    equation2 = Eq(6 * rooms, students + 24)\n    \n    # Solving the system of equations for rooms and students\n    solutions = solve((equation1, equation2), (rooms, students))\n\n    # Number of rooms in the dormitory\n    return solutions[rooms]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values\n    tenth_number = 23\n    fifteenth_number = 38\n\n    # Calculate the common difference\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    \n    # Calculate the first term\n    first_term = tenth_number - common_difference * (10 - 1)\n    \n    # Calculate the 102nd number\n    nd_number = first_term + common_difference * (102 - 1)\n    \n    return nd_number\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3 / 5\n    eaten_sweets = 18\n\n    total_sweets = eaten_sweets / eaten_fraction\n    remaining_sweets = total_sweets - eaten_sweets\n\n    return int(remaining_sweets)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_current_age = 9\n    john_current_age = 5\n    jane_future_age = 15\n\n    age_difference = jane_current_age - john_current_age\n    john_future_age = jane_future_age - age_difference\n\n    return john_future_age\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    for x in range(0, 50):  # It's safe to assume our solution falls in here since it's a simple equation.\n        if (13 - x) ** 2 == 25:\n            return x\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.80\n    loss = marked_price - selling_price - cost_price\n    \n    equation = Eq(loss, 40)\n\n    result = solve(equation, cost_price)\n    \n    return result[0]\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    result = (7 + 3) * 11 - (7 + (3 * 11))\n    return result\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Total work is equivalent to 1 tank\n    total_work = 1\n    \n    # Rate of Tap X is 1 tank per 10 minutes\n    rate_x = 1 / 10\n    \n    # Rate of Taps X and Y together is 1 tank per 6 minutes\n    rate_x_and_y = 1 / 6\n    \n    # Rate of Tap Y can be found by subtracting X's rate from the combined rate\n    rate_y = rate_x_and_y - rate_x\n    \n    # Time taken for Tap Y alone to fill the tank is the inverse of its rate\n    time_y = 1 / rate_y\n\n    return time_y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    only_apples = 20 - 10  # Students who like only apples\n    only_strawberries = 30 - 10  # Students who like only strawberries\n    both = 10  # Students who like both apples and strawberries\n    neither = 5  # Students who like neither\n\n    total_students = only_apples + only_strawberries + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount = 0.12\n    final_price = usual_price * (1 - discount)\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    return 62 + 48 + 18 + 32\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y represent the number of markers Xuanrui and Yaokuan had originally.\n    x, y = symbols('x y')\n    \n    # Xuanrui and Yaokuan had 708 markers altogether.\n    equation1 = Eq(x + y, 708)\n    \n    # Xuanrui gave away 532 markers.\n    x_new = x - 532\n    \n    # Yaokuan sold 3/7 of his markers, so he had 4/7 left.\n    y_new = y * (4/7)\n    \n    # After the transactions, they had an equal number of markers left.\n    equation2 = Eq(x_new, y_new)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    # We only need the last two digits, and we know that 10! and onwards will end\n    # with at least two zeroes because they include both 5 and 2 in their factors.\n    # Therefore, we only need to sum up to 9! to find the last two digits.\n    factorial_sum = sum(math.factorial(i) for i in range(1, 9))\n    \n    # Now we get the last two digits\n    ans = factorial_sum % 100\n    \n    return ans\n\nimport math\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # The total volume of the mixture\n    total_volume = 300 + 300  # mL\n    \n    # The amount of sugar in Cup A\n    sugar_A = 300 * 0.20\n    \n    # The amount of sugar in Cup B\n    sugar_B = 300 * 0.30\n    \n    # The total amount of sugar in the mixture\n    total_sugar = sugar_A + sugar_B\n    \n    # The concentration of sugar in the mixture\n    concentration = (total_sugar / total_volume) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    rate = 2.50\n    pounds = dollars / rate\n    return pounds\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of marbles Ahmad and Ryan have\n    Ahmad, Ryan = symbols('Ahmad Ryan')\n    \n    # Equation for the total number of marbles\n    total_marbles_eq = Eq(Ahmad + Ryan, 1442)\n    # Equation representing Ahmad has 6 times as many marbles as Ryan\n    Ahmad_marbles_eq = Eq(Ahmad, 6 * Ryan)\n    \n    # Solve the equations for Ahmad and Ryan\n    solutions = solve((total_marbles_eq, Ahmad_marbles_eq), (Ahmad, Ryan))\n    \n    # Calculate how many marbles Ahmad must give to Ryan to make them equal\n    marbles_to_give = (solutions[Ahmad] - solutions[Ryan]) / 2\n    \n    return marbles_to_give\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    total_after_exchange = 175\n\n    # Let x be the number of $2-notes originally, and y be the number of $10-notes.\n    # We have two equations:\n    # x + y = total_notes (1)\n    # (x + 5y) = total_after_exchange since each $10-note is exchanged for five $2-notes (2)\n    \n    # Using equations, we can solve for x and y:\n    # From (1) y = total_notes - x\n    # Substitute y in (2):\n    # (x + 5(total_notes - x)) = total_after_exchange\n    # Solve the equation for x:\n    \n    x = (5*total_notes - total_after_exchange) / 4\n    \n    return int(x)  # Return the number of $2-notes originally as an integer\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    spacing = 1\n\n    # calculate the remaining length after including the head of the train\n    remaining_length = total_length - head_length  - spacing\n\n    # calculate the number of carriages by dividing the remaining length by carriage length plus spacing\n    number_of_carriages = remaining_length // (carriage_length + spacing)\n\n    # add 1 for the head of the train\n    return number_of_carriages + 1\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = count_tens = count_hundreds = 0\n\n    # Counting appearances of 8 in the ones place between 1 and 288\n    for i in range(1, 289):\n        if i % 10 == 8:\n            count_ones += 1\n\n    # Counting appearances of 8 in the tens place between 1 and 288\n    for i in range(1, 289):\n        if (i // 10) % 10 == 8:\n            count_tens += 1\n\n    # Counting appearances of 8 in the hundreds place between 1 and 288\n    for i in range(1, 289):\n        if (i // 100) == 8:\n            count_hundreds += 1\n\n    # The total count is the sum of individual counts\n    total_count = count_ones + count_tens + count_hundreds\n\n    return total_count\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 1\n    while True:\n        if (24*x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(0, 10):\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 100 * 2 + 10 * x + y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    total_score = 82\n    \n    # Let correct be the number of questions she answered correctly\n    # Then total_questions - correct will be the questions she answered incorrectly\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * correct_points + incorrect * wrong_points\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price - (original_price * discount_rate)\n    final_price = discounted_price + (discounted_price * increase_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kilogram for each bag\n    price_per_kilo_bag1 = 5 / 2.5\n    price_per_kilo_bag2 = 7.70 / 4\n\n    # Compare the price per kilogram to determine the better value\n    if price_per_kilo_bag1 < price_per_kilo_bag2:\n        better_value = \"2.5kg bag\"\n    else:\n        better_value = \"4kg bag\"\n\n    return better_value\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    book_price = 4.50\n    num_books = 5\n    total_cost = book_price * num_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    # Calculate the harmonic sum in S\n    harmonic_sum = sum(1 / i for i in range(2001, 2011))\n    # Calculate the S value by taking the reciprocal of the harmonic sum\n    S = 1 / harmonic_sum\n    # Find the largest whole number smaller than S by flooring the value\n    return int(S)\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_one_fourth_full = 250\n    mass_three_fourths_full = 350\n    \n    mass_half_full = (mass_three_fourths_full - mass_one_fourth_full) / 2\n    empty_jar_mass = mass_one_fourth_full - mass_half_full\n    \n    return empty_jar_mass\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    \n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Calculate the number of trees per side using the interval\n    # Since trees are planted at both ends, add 1 to the result.\n    trees_per_side = (road_length // interval) + 1\n    \n    # Multiply by 2 for both sides of the road\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance_red = 5\n    distance_blue = 10\n    distance_green = 12\n\n    # Least common multiple to find the first common mark\n    first_common_mark = lcm(distance_red, distance_blue, distance_green)\n\n    return first_common_mark\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    gap_length = 2\n    num_buses = 7\n\n    total_length = (bus_length * num_buses) + (gap_length * (num_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    # Total height for 28 blocks\n    total_height_28 = 182\n    \n    # Calculate the height of one block\n    height_one_block = total_height_28 / 28\n    \n    # Calculate the height of 42 blocks\n    total_height_42 = height_one_block * 42\n    \n    return total_height_42\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Incorrect calculation:\n    incorrect_equation = Eq((x / 4) - 25, 2021)\n\n    # Find the original number:\n    original_number = solve(incorrect_equation, x)\n\n    # Do the correct calculation:\n    correct_answer = 4 * original_number[0] + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    total_terms = (last_term - first_term) // 1 + 1\n    \n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    ans = total_terms / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        number = 20302 + E * 1010  # Construct the number with E in the correct position\n        if number % 9 == 0:       # Check divisibility by 9\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    proportion = 5 / 3\n    y_when_x_is_5 = 5 * proportion\n    return y_when_x_is_5\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.5  # 50% above cost\n    discount_price = selling_price * 0.9  # 10% Christmas discount\n    \n    profit = discount_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        original_students = m ** 2 + 5\n        new_students = original_students + 18\n        sqrt_new_students = int(new_students**0.5)\n        if sqrt_new_students ** 2 == new_students:\n            break\n        m += 1\n    return original_students\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # We will denote the numbers in the sequence as a1, a2, a3, ..., a7\n    # We are given that a4 = 6 and a6 = 15 \n    # We know that each number from the third one onwards is the sum of the previous two numbers,\n    # so we have the following relationships:\n    # a3 + a4 = a5 and a4 + a5 = a6\n    # Thus, a5 = a6 - a4\n    a4 = 6\n    a6 = 15\n    a5 = a6 - a4      # 15 - 6 = 9\n    \n    # Now, using the same rule backwards, a3 + a4 = a5 implies a3 = a5 - a4\n    a3 = a5 - a4      # 9 - 6 = 3\n    \n    # Again, a2 + a3 = a4 implies a2 = a4 - a3\n    a2 = a4 - a3      # 6 - 3 = 3\n    \n    # Finally, a6 is the sum of a4 and a5\n    # So the next term in the sequence, a7, is the sum of a5 and a6\n    a7 = a5 + a6      # 9 + 15 = 24\n    return a7\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    # Start from the largest 2-digit number and go down to find\n    # the number that is divisible by both 3 and 5.\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    nums = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    a_students = 12\n    b_students = 15\n    c_students = 18\n\n    gcf_ab = gcd(a_students, b_students)\n    gcf_abc = gcd(gcf_ab, c_students)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    # Initial average calculation\n    initial_average = 25\n    # Total sum for the initial average\n    initial_total = initial_average * 3\n\n    # New average after altering a number to 16\n    new_average = 22\n    # New total after altering a number\n    new_total = new_average * 3\n\n    # Difference between the initial total and new total gives the change in the number\n    change = initial_total - new_total\n\n    # The original number before the change is the altered number (16) plus the change in the total \n    original_number = 16 + change\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    total_score = total_average * 36\n    girls_score = girls_average * girls\n    boys_score = boys_average * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4*5\n    return ans\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "from itertools import product\n\ndef solution():\n    vertices = list(product([0, 1], repeat=3))  # All vertices of the cube\n    edges = []\n    for v in vertices:\n        # Two vertices are connected if they are different in exactly one coordinate\n        edges.extend([(v, w) for w in vertices if sum(vi != wi for vi, wi in zip(v, w)) == 1])\n\n    # Number of distinct graphs assuming edges are undirected\n    # Each edge can either be in the graph or not, thus 2 options per edge\n    num_graphs = 2 ** len(edges) // 2  # dividing by 2 to consider undirected edges\n\n    return num_graphs\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    total_sugar = 800 * 0.05 + 200 * 0.30 + 300 * 0.10\n    total_solution = 800 + 200 + 300\n\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    correct, incorrect = symbols('correct incorrect')\n    total_questions = 25\n    not_attempted = total_questions - correct - incorrect\n    rex_score = 66\n    rex_answered = total_questions - 1  # Rex answered all but one question\n\n    # Equation for Rex's score based on correct and incorrect answers\n    equation = Eq(4 * correct - 2 * incorrect, rex_score)\n    # Equation for the total number of questions Rex answered\n    answered_questions_eq = Eq(correct + incorrect, rex_answered)\n\n    # Solving the system of equations\n    solutions = solve((equation, answered_questions_eq), (correct, incorrect))\n    \n    return solutions[correct]\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n\n    total_pens = black_pens + blue_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    total_pencils = 62\n    difference = 18\n\n    # Let x be the number of pencils Andrew has. Then Gill has x + difference.\n    # Together they have total_pencils.\n    # Form the equation: x + (x + difference) = total_pencils\n    # Solve for x: \n    x = (total_pencils - difference) // 2\n\n    # The number of pencils Gill has is x + difference.\n    gill_pencils = x + difference\n\n    return gill_pencils\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20  # litres\n    concentration1 = 35  # percent\n    volume2 = 30  # litres\n    concentration2 = 60  # percent\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1 / 100) + (volume2 * concentration2 / 100)\n\n    new_concentration = (total_juice / total_volume) * 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('5:00 PM', '%I:%M %p')\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n\n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    return 58 + 74\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of badges Wendy made for the event at the beginning\n    x = symbols('x')\n\n    # Sold 5/7 of the badges on the first day\n    badges_sold_first_day = (5/7) * x\n\n    # Remaining badges after first day\n    remaining_after_first_day = x - badges_sold_first_day\n\n    # Sold 1/3 of the remaining badges on the second day\n    badges_sold_second_day = (1/3) * remaining_after_first_day\n\n    # Remaining badges after second day before making additional badges\n    remaining_after_second_day = remaining_after_first_day - badges_sold_second_day\n\n    # Wendy made an additional 354 badges\n    additional_badges = 354\n\n    # Total badges Wendy had at the end\n    total_end_badges = remaining_after_second_day + additional_badges\n\n    # At the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_end_badges, 3 * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # We'll start with the assumption that the smallest digit is '3'\n    # and the largest possible digit difference is '4'. Therefore, the \n    # smallest digit has to be 3 and the largest 7 (3 + 4 = 7). Since\n    # one digit must be 7, if 7 is the first digit, the other two digits\n    # should be as small as possible.\n    \n    # Trying 7 as the first digit, then the smallest next digit can be 3\n    # (since the difference should be 4 or less), and then a 3 or a 4, to\n    # keep the number as small as possible (a second 3 would not work since\n    # the digits must be different).\n    # Therefore, the smallest such number is 734.\n\n    return 734\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"4005220912\"\n    \n    # Convert the strings to lists of integers for easier comparison\n    angel_nums = [int(x) for x in angel]\n    devil_nums = [int(x) for x in devil]\n\n    # Sort the lists to see if they have the same numbers in any order\n    angel_nums.sort()\n    devil_nums.sort()\n\n    # Compare the sorted lists\n    if angel_nums == devil_nums:\n        return True  # Andy can unlock the treasure chest\n    else:\n        correct_password = ''.join(str(x) for x in angel_nums)\n        return False, correct_password  # Andy cannot unlock the chest, return the correct password\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    players = 4\n    games_per_round = players // 2\n    rounds = 0\n    \n    while players > 1:\n        players = players // 2\n        rounds += 1\n        \n    return rounds\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    temp_drop = 10\n    midnight_temp = noon_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    # Since the number has remainder 3 when divided by both 6 and 7,\n    # and remainder 5 when divided by 11, we can use the Chinese Remainder Theorem\n    # to find such a number in the range [200, 300]. We can iterate to find this number.\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse = symbols('blouse')\n    skirt = 3 * (blouse + 14) + 2 * blouse - 317\n\n    cost_of_blouse = solve(skirt, blouse)\n\n    return cost_of_blouse[0]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    for A in range(2, 1000):  # Search in a reasonable range for prime A\n        if all(A % i != 0 for i in range(2, int(A ** 0.5) + 1)):  # Check if A is prime\n            for B in range(2, 1000):  # Search in a reasonable range for prime B\n                if all(B % i != 0 for i in range(2, int(B ** 0.5) + 1)):  # Check if B is prime\n                    if (8 * A - 3 * B) % 3 == 0:  # Check if 8A-3B is a multiple of 3\n                        return A  # Return the first prime A found\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    previous_value = 110000\n    loss_percentage = 0.1\n    current_value = previous_value * (1 - loss_percentage)\n    \n    original_value = previous_value / 1.1\n    profit_or_loss = current_value - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n    produced_only_by_A_or_B = total_exhibits - (not_produced_by_A + not_produced_by_B)\n    produced_by_both = total_exhibits - produced_only_by_A_or_B\n\n    return produced_by_both\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Calculate the arrangement for roses: 3! (since they have to be together)\n    rose_permutations = factorial(3)\n    # Calculate the arrangement for jasmines: 4! (since they have to be together)\n    jasmine_permutations = factorial(4)\n\n    # There are 3 types of flowers (roses, jasmines, daisy), so we calculate the permutations of these types\n    flower_type_permutations = factorial(3)\n    \n    # The total number of ways is the product of permutations of individual flowers and the types of flowers\n    total_ways = rose_permutations * jasmine_permutations * flower_type_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, the magician could pick all balls of one color,\n    # then all balls of another color, and then one of the third color.\n    # So at worst case, before picking a ball of the third color, the magician picks all of the first two colors.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # Worst case scenario is picking all red and blue balls first, then one green ball.\n    min_balls_needed = red_balls + blue_balls + 1  # +1 for the green ball\n\n    return min_balls_needed\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2  # Integer division since number of pupils must be whole\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial\n    multiple_of_6factorial = factorial(6)\n    factor_of_8factorial = factorial(8)\n    \n    ans = 0\n    for m in range(multiple_of_6factorial, factor_of_8factorial + 1, multiple_of_6factorial):\n        if factor_of_8factorial % m == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # To maximize the number of different positive integers that add up to 60,\n    # we would start with the series 1, 2, 3, ..., n that sums to 60 or just below it.\n    # The sum of the first n positive integers is given by the formula n*(n+1)/2.\n    # We are looking for the largest n such that n*(n+1)/2 <= 60.\n\n    n = 1\n    while n * (n + 1) // 2 <= 60:\n        n += 1\n    \n    # Subtract 1 because the loop goes one past the valid sum.\n    n -= 1\n\n    # The largest integer n for which the sum of first n positive integers is \n    # less than or equals to 60 is the number of different positive integers we can have.\n    return n\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    for pies in range(1, 1000):  # Consider a reasonable range for the number of pies\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 20 / 100\n    discount_amount = original_price * discount_rate\n    new_price = original_price - discount_amount\n\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_per_minute = 20  # ml/min\n    minutes_in_hour = 60  # minutes\n\n    leak_per_hour_ml = leak_per_minute * minutes_in_hour\n    leak_per_hour_liters = leak_per_hour_ml / 1000  # converting ml to liters\n\n    return leak_per_hour_liters\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        s, e, n, d = p\n        # Avoid leading zero and ensure SEE is a three-digit number\n        if s == 0:\n            continue\n        send = s*1000 + e*100 + n*10 + d\n        more = m*1000 + o*100 + r*10 + e\n        money = m*10000 + o*1000 + n*100 + e*10 + y\n        if send + more == money:\n            return e*100 + e*10 + e\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # cm\n    height_difference = 30  # cm\n    \n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Suppose we pick socks one by one, to ensure we get at least one pair of the same color,\n    # we consider the worst-case scenario using the pigeonhole principle.\n    # Since there are 3 different colors of socks, picking one of each color will not guarantee a pair.\n    # Therefore, we must pick 3 socks plus one more to guarantee at least one pair.\n    # This is because after 3 picks, we have one of each color, and one more pick must result in a pair.\n    num_colors = 3\n    socks_to_guarantee_pair = num_colors + 1\n\n    return socks_to_guarantee_pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    \n    # Each piece cut into three parts results in two additional pieces.\n    additional_pieces_from_cut = final_pieces - initial_pieces\n    \n    # To find out how many were cut into three parts:\n    pieces_cut_into_three = additional_pieces_from_cut // 2\n    \n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case: Take one apple of each color, so one red and one green,\n    # still without two apples of the same color.\n\n    # Next apple you take, regardless of the color, will have to match one of the\n    # apples already taken out because we have only two colors.\n\n    return 3  # Hence, 3 apples must be taken to ensure 2 of the same color.\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    return 20000 - 20\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    remaining_water = 7\n    original_volume = (volume_per_pail * number_of_pails) + remaining_water\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation = Eq(x**20 * y**15 * z**5, 243)\n\n    # 243 is 3^5\n    solutions = solve(equation, (x, y, z))\n\n    # We only need one of the solutions because we only care about the powers\n    possible_x = solutions[x][0]\n    possible_y = solutions[y][0]\n    possible_z = solutions[z][0]\n\n    # Calculate x^8 * y^6 * z^2\n    # We only consider the real solutions\n    value = possible_x**8 * possible_y**6 * possible_z**2\n\n    return value\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    total = 0\n    for n in range(1, 47, 2):\n        total += n\n    return total\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    # Expanding the left-hand side of the equation\n    expanded_left = 5 * 6 * c - 5 * 1\n    \n    # Moving all terms to one side to set the equation to equal zero\n    reconstructed_eq = expanded_left + 35  # equivalent to 30c - 5 + 35\n    \n    # Simplifying the equation\n    simplified_eq = 30 * c + 30  # combining like terms -5 + 35\n    \n    # Solving the equation for c\n    c = simplified_eq / 30  # dividing both sides by 30 to solve for c\n\n    # Now, c is equal to -1, because 30 / 30 = 1, and we have +30 (from the right hand side) divided by 30 \n    ans = -1\n\n    return ans\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represents the price of one book, and p represents the price of one pencil box.\n    b, p = symbols('b p')\n\n    # Two similar books and three identical pencil boxes cost $42\n    equation1 = Eq(2 * b + 3 * p, 42)\n\n    # Two similar books and six identical pencil boxes cost $60\n    equation2 = Eq(2 * b + 6 * p, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # Return the price of one pencil box\n    return solutions[p]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    non_zero_digit = 1\n    for i in range(1, 2011):\n        non_zero_digit *= i\n        while non_zero_digit % 10 == 0:\n            non_zero_digit //= 10\n        non_zero_digit %= 100000  # Keep only the last 5 digits to avoid overflow\n\n    non_zero_digit = str(non_zero_digit)\n    # The loop may still leave leading zeroes, find the first non-zero from the right\n    for digit in reversed(non_zero_digit):\n        if digit != '0':\n            return int(digit)\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    from statistics import median\n\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n    \n    ans = median(sequence)\n    \n    return ans\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    total_height_of_four_players = 4 * (150 - 2)\n    total_height_of_other_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_other_two_players = total_height_of_other_two_players / 2\n    \n    return average_height_of_other_two_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    paved_per_day = 50\n    days_needed = total_length / paved_per_day\n    return days_needed\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42  # Since 42 * x = 42^2, dividing both sides by 42 gives x = 42.\n    factors = 42 * 42\n\n    # To find y such that all factors' exponents equal to 1, we have to break down the factors of 42.\n    # 42 = 2 * 3 * 7. For y, we need a number that when multiplied by 42 gives a square number\n    # without any factor's exponent greater than 1. In this case, y should be 2 * 3 * 7 (or 42).\n    y = 2 * 3 * 7\n\n    # The sum of x and y is the answer.\n    ans = x + y\n    return ans\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    # Number of cattles\n    num_cattles = 8\n    # Number of days\n    days = 4\n    # Fodder eaten by one cattle per day\n    fodder_per_cattle_per_day = 10\n    \n    # Total fodder eaten by all cattles in given days\n    total_fodder = num_cattles * days * fodder_per_cattle_per_day\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    # Initial ratio condition\n    equation1 = Eq(jill, 6/5 * jess)\n    # After giving away sweets condition\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    sugar_concentration = 0.22\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total = 0\n    for number in range(1, 100):\n        total += sum(int(digit) for digit in str(number))\n    return total\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the number of marbles Larry had at first\n    # According to the problem:\n    # Larry gave 5/12 of his marbles to Mark, so he is left with 7/12 of his marbles\n    # He then gave 30 marbles to Nate and 26 marbles to Ollie, and was left with 35 marbles\n   \n    # The equation representing the situation is:\n    # (7/12)x - 30 - 26 = 35\n    # Solving for x gives us the initial number of marbles\n\n    # Move the constants to the right side of the equation:\n    remaining_marbles = 35 + 30 + 26  # Larry's marbles after giving away to Nate and Ollie\n\n    # Calculates the initial number of marbles Larry had (x)\n    initial_marbles = (remaining_marbles * 12) / 7\n\n    return initial_marbles\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p represent the price of a pie and c the price of a cake\n    p, c = symbols('p c')\n    cakes_sold = symbols('cakes_sold')\n\n    # The total money collected is given to be $1848\n    total_money_collected = 1848\n\n    # Given ratios of the money and number of pies and cakes\n    ratio_money_pies_cakes = 15 / 7\n    ratio_number_pies_cakes = 4 / 1\n\n    # Equations based on the ratios and total money\n    # For the money ratio: 15p = 7c\n    equation1 = Eq(15 * p, 7 * c)\n\n    # A cake cost $13 more than a pie: c = p + 13\n    equation2 = Eq(c, p + 13)\n\n    # Now, we can find the number of pies and cakes sold based on the money collected and the ratios\n    # Total money: 4 * number_of_pies * p + 1 * number_of_cakes * c = 1848\n    # Using the ratio of numbers, number_of_pies = 4 * number_of_cakes\n    # Replace number_of_pies with 4 * cakes_sold in the equation\n    equation3 = Eq(4 * cakes_sold * p + cakes_sold * c, total_money_collected)\n\n    # Solve the equation system\n    solutions = solve((equation1, equation2, equation3), (p, c, cakes_sold))\n\n    return solutions[cakes_sold]\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    quarter_share = total_money / 4\n    return quarter_share\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    today = datetime.now()\n    years_ago = 38\n    months_ago = 6\n    birth_date = today.replace(year=today.year - years_ago) - timedelta(days=months_ago * 30.436875) # average days in a month\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n\n    remaining_length = original_length - piece_cut\n\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    sum_of_powers = sum(i**4 for i in range(1, 20))\n    return sum_of_powers\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols\n    total_money = symbols('total_money')\n\n    # equations based on the problem statement\n    money_after_cds = (3/4) * total_money - 3\n    money_after_batteries = (2/5) * money_after_cds - 6\n    remaining_money = 24\n\n    # Setting up the equation for the remaining money after all spending\n    eq = Eq(money_after_batteries, remaining_money)\n\n    # Solve the equation\n    sol = solve(eq, total_money)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            return beads\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'd' be the distance between the library and the school\n    d = symbols('d')\n\n    # Qiqi walks at 60 m/min\n    speed_qiqi = 60  # in meters per minute\n\n    # Weiling walks at 72 m/min\n    speed_weiling = 72  # in meters per minute\n\n    # Weiling starts 2 minutes after Qiqi\n    # and arrives 4 minutes earlier than Qiqi\n    # Hence, Weiling takes 2 + 4 = 6 minutes less than Qiqi to cover the distance\n\n    # Equation for Qiqi: d = speed_qiqi * time_qiqi\n    # Equation for Weiling: d = speed_weiling * (time_qiqi - 6)\n\n    # Set up the equation based on the information provided\n    equation = Eq(speed_qiqi * (d / speed_qiqi), speed_weiling * ((d / speed_qiqi) - 6))\n\n    # Solve for the distance 'd'\n    solutions = solve(equation, d)\n\n    # Return the distance which is the solution to the equation\n    return solutions[0]\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Since we are only interested in the units digit of the result, \n    # we can look at the units digit of each term separately.\n\n    # The pattern of the units digits for powers of 9 are: 9, 1, 9, 1, ...\n    # This is because 9^1 ends in 9 and 9^2 ends in 1, and then the pattern repeats every 2 powers.\n\n    # We can find the units digit of each term by looking at the exponent modulo 2.\n    units_digit_2015 = 9 if 2015 % 2 == 1 else 1\n    units_digit_2016 = 9 if 2016 % 2 == 1 else 1\n\n    # Now, we can sum up the units digits of each term.\n    units_sum = units_digit_2015 + units_digit_2016\n\n    # However, we are only interested in the units digit of the total sum.\n    # If the sum of the units is equal to or greater than 10, we only take the units digit of that sum.\n    ans = units_sum % 10\n\n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # No two women stand next to one another, so we first arrange the men\n    # and then place women in the gaps between men (including the ends).\n    \n    men_ways = factorial(5)  # Ways to arrange 5 men\n    possible_gaps_between_men = 6  # 5 men create 6 possible gaps (including ends)\n    \n    # Choose 3 gaps out of the 6 to place the women, and then arrange the women in those gaps\n    women_ways = factorial(3) * (factorial(possible_gaps_between_men) // factorial(possible_gaps_between_men - 3))\n    \n    # Total number of ways is the product of the two\n    total_ways = men_ways * women_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "from math import gcd\n\ndef solution():\n    rope1_length = 45\n    rope2_length = 30\n    longest_piece = gcd(rope1_length, rope2_length)\n    return longest_piece\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    # Convert Marc's current time to minutes past midnight\n    marcs_current_time_minutes = (11 * 60) + 50\n    \n    # Marc's watch is 15 minutes slow, so we correct it\n    correct_current_time_minutes = marcs_current_time_minutes + 15\n    \n    # George's watch is 7 minutes fast, so we adjust the correct time\n    georges_current_time = correct_current_time_minutes - 7\n    \n    # In half an hour's (30 minutes) time,\n    half_hour_later = georges_current_time + 30\n    \n    # Calculate the hours and minutes for George's watch\n    georges_hours = half_hour_later // 60\n    georges_minutes = half_hour_later % 60\n    \n    return f\"{georges_hours}:{str(georges_minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 30000 + (T / (T + 3))\n    \n    tax_equation = Eq((30000 * T/100) + ((income - 30000) * (T + 3)/100), income * (T + 1)/100)\n    \n    solutions = solve((tax_equation), (T))\n\n    for solution in solutions:\n        if solution > 0:\n            T_value = solution\n            break\n\n    annual_income = 30000 + (100 / (T_value + 3))\n    \n    return annual_income\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percent = 45\n    total_amount = 540\n    ans = (percent / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[h]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - fall_down\n    jumps_count = 0\n    current_position = 0\n\n    # As it falls down after every 3 jumps, we adjust the total distance for the last effective jump.\n    while current_position < total_distance - jump_up:  # Subtract jump_up because in the last jump it reaches the top\n        current_position += effective_jump\n        jumps_count += 3\n\n    # Add the last jumps needed to reach or surpass the tree height without falling back\n    jumps_count += ((total_distance - current_position) + (jump_up - 1)) // jump_up\n\n    return jumps_count\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    rate_A = 1 / 10\n    rate_B = 1 / 15\n    combined_rate = rate_A + rate_B\n\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    return 20.14 * 4.4\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    # Let x be the number of questions Liam answered correctly\n    # Let y be the number of questions Liam answered incorrectly\n    \n    # Given that Liam answered 30 questions in total, we have:\n    # x + y = 30\n    \n    # For each correct answer, Liam gets 5 marks, and for each wrong answer, Liam loses 1 mark.\n    # Liam's total score is 90, so we have:\n    # 5x - y = 90\n    \n    # We can now solve these equations for x and y.\n    \n    # From the first equation, we can express y in terms of x:\n    # y = 30 - x\n    \n    # Substituting y in the second equation, we get:\n    # 5x - (30 - x) = 90\n    # 5x - 30 + x = 90\n    # 6x - 30 = 90\n    # 6x = 90 + 30\n    # 6x = 120\n    # x = 120 / 6\n    x = 120 // 6  # Use integer division since the number of questions must be an integer\n    \n    # Return the number of correct answers\n    return x\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(100):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate Gigi's birth year\n    gigi_birth_year = 2002 - 45\n    \n    # Calculate Jenny's birth year\n    jenny_birth_year = 1995 - 22\n\n    # Calculate the year when Gigi was 22\n    year_when_gigi_22 = gigi_birth_year + 22\n\n    # Calculate Jenny's age when Gigi was 22\n    jenny_age_when_gigi_22 = year_when_gigi_22 - jenny_birth_year\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Draw all marbles of the most abundant color plus one marble each from the other colors\n    # to ensure we have 4 marbles of different colors.\n    \n    # Reds are the most abundant, so we draw all 12 red marbles.\n    # We then need to draw one blue, one yellow, and one green marble.\n    # In the worst case scenario, we draw all 9 blue marbles, all 8 yellow marbles,\n    # and only then draw one green marble.\n    \n    # The total count, in the worst case, is:\n    # All reds (12) + All blues (9) + All yellows (8) + One green (1)\n    ans = 12 + 9 + 8 + 1\n    return ans\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # negative because the sequence is decreasing\n\n    # Find the last positive term\n    # an = a1 + (n - 1)d\n    # Let an = 0 (the last positive term will be just before the sequence becomes negative)\n    # 0 = 50 + (n - 1)*(-4)\n    # (n - 1)*(-4) = -50\n    # n - 1 = -50 / -4\n    # n - 1 = 12.5, since n must be an integer, the last positive term is at n = 12\n    # So the number of positive terms in the arithmetic sequence is 12\n\n    num_terms = 12\n\n    return num_terms\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum(int(digit) for digit in '20190406')\n    remainder = digits_sum % 9\n    if remainder == 0:\n        A = 0\n    else:\n        A = 9 - remainder\n    return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = 0\n    while True:\n        num += 8 # Increase by the LCM of 3 and 8 until a number ending in 2 is found\n        if num % 3 == 0 and str(num)[-1] == '2':\n            break\n    return num\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(\"451\" + str(last_digit))\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from sympy import root, sqrt\n    numerator = -6.94 - root(9.604, 3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_ship = 25\n    speed_current = 3\n    distance = 140\n    speed_downstream = speed_ship + speed_current\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelet_price = 0.99\n    bracelet_quantity = 5\n    card_price = 1.98\n    card_quantity = 2\n\n    total_cost = (bracelet_price * bracelet_quantity) + (card_price * card_quantity)\n    \n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_paid = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    total_drink_cost = total_paid - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        if correct * 5 - wrong * 2 == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for lcm function\n    first_light = 30  # 0.5 minutes * 60 seconds/minute = 30 seconds\n    second_light = 45 # 0.75 minutes * 60 seconds/minute = 45 seconds\n    # All three lights change at the same time every 9 minutes -> 9*60 seconds\n    all_lights_interval = 9 * 60\n\n    # Find the smallest common multiple for the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n\n    # The third light's change interval has to be a factor of the lcm that is also greater than or equal to 30\n    # and at the same time a factor of the interval for all lights to change (all_lights_interval)\n    for third_light in range(lcm_first_second, all_lights_interval + 1):\n        if all_lights_interval % third_light == 0 and third_light >= 30:\n            return third_light\n\n    return None\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let's assume total members in group A is a and in group B is b\n    # a % 36 = 11, so group A cannot fully fill the bus, and have 11 members left\n    # We have to find b % 36 such that (11 + (b % 36)) % 36 = 0, because these members take up all the seats in another bus\n    # We can loop through possible values of b which when combined with the extra 11 members of group A fill a bus completely\n\n    # Let us calculate the remainder for each group\n    people_in_last_bus = 11 # This is given in problem statement\n    # Since people in last bus form group A and B, we need group B people to fill remaining seats\n    remaining_seats = 36 - people_in_last_bus # Seats remaining in the last bus\n\n    # Loop through numbers till we find a number that leaves the same remainder when divided by 36\n    for b in range(36):\n        if b % 36 == remaining_seats:\n            break\n\n    # Now we have the number of people from group B in the bus with 11 members of group A\n    # We calculate total members in group B\n    b += 11 # As these members were in bus with 11 members of group A\n\n    # Now we will have a * b pictures taken in total\n    total_pictures = 11 * b\n\n    # Each roll can take 36 pictures, calculate how full the last roll will be\n    remaining_pictures_in_last_roll = total_pictures % 36\n\n    # Subtract from 36 to find how many more pictures can be taken\n    pictures_remaining = 36 - remaining_pictures_in_last_roll\n\n    return pictures_remaining\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    mean_value = 5\n    \n    total_sum = mean_value * total_numbers\n    current_sum = sum(numbers)\n    missing_number = total_sum - current_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 4 individuals including A.\n    # A can pass the ball to any of the other 3 individuals first.\n    # The first receiver then has to pass the ball to one of the 2 remaining individuals.\n    # The second receiver then has to pass the ball back to A.\n    # Since we know A cannot receive the ball until the last pass, there are no choices to be made for the last pass.\n\n    # The number of different arrangements can be found as follows:\n    # 3 options for the first pass (B, C or D)\n    # 2 options for the second pass (whoever didn't receive the first pass out of B, C, or D)\n    # There is only 1 option for the third pass (must be A).\n\n    count = 3 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n    \n    equation1 = Eq(daniel, 4 * ming)\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper = 25  # weight in grams\n    num_students = 250\n    total_weight_grams = weight_per_paper * num_students  # total weight in grams\n    grams_per_kilogram = 1000  # 1 kilogram = 1000 grams\n    total_weight_kilograms = total_weight_grams / grams_per_kilogram  # converting grams to kilograms\n    \n    return total_weight_kilograms\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "def solution():\n    from itertools import permutations\n\n    cards = [1, 2, 8, 9]\n    max_product = 0\n\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Total length of the people when line is straightened is 3 meters.\n    length_of_people = 3\n    \n    # Time taken to cross the first bridge is 8 seconds.\n    time_first_bridge = 8\n    \n    # Time taken to cross the second bridge is 10 seconds.\n    time_second_bridge = 10\n    \n    # The first bridge is 9 meters long.\n    length_first_bridge = 9\n    \n    # The speed of the line can be calculated by crossing the first bridge.\n    # Since the entire line has to cross, we consider the combined length of people and bridge.\n    speed = (length_of_people + length_first_bridge) / time_first_bridge\n    \n    # Using the same speed, calculate the length of the second bridge.\n    # Here we have to subtract the length of the people because we want the length of the bridge only.\n    length_second_bridge = (speed * time_second_bridge) - length_of_people\n    \n    return length_second_bridge\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    sum_squares = 0\n    sign = 1\n    for i in range(1000, 1, -4):\n        sum_squares += sign * (i ** 2 - (i - 2) ** 2)\n        sign *= -1\n    return sum_squares\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    product = 2688\n    for i in range(2, int(product ** (1/3)) + 1, 2):\n        if product % i == 0:\n            if (i + 2) * (i + 4) == product // i:\n                return i + 4\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time_hour = 11\n    start_time_minute = 55\n    end_time_hour = 13\n    end_time_minute = 40\n\n    total_minutes_start = start_time_hour * 60 + start_time_minute\n    total_minutes_end = end_time_hour * 60 + end_time_minute\n\n    time_played = total_minutes_end - total_minutes_start\n\n    return time_played\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    people_left = 11\n    people_right = 7\n    crystal = 1  # Crystal herself\n\n    total_people_in_row = people_left + crystal + people_right\n    total_people_in_class = 2 * total_people_in_row\n\n    return total_people_in_class\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    count = 0\n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    n = 224\n    factors_dict = factorint(n)\n    \n    factors_count = 1\n    for exp in factors_dict.values():\n        factors_count *= (exp + 1)\n    \n    return factors_count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period_duration = timedelta(minutes=5)\n\n    # Calculate the end time after the 3 lessons including moving periods\n    end_time = start_time + 3 * lesson_duration + 2 * moving_period_duration\n\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(a + 5, 10):\n            for c in range(0, b - 2):\n                if b == (a + b + c) / 2 and b == a + 5 and c == b - 2:\n                    return 100 * a + 10 * b + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    num1 = 28\n    num2 = 84\n    num3 = 126\n\n    gcd_12 = gcd(num1, num2)\n    ans = gcd(gcd_12, num3)\n\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    \n    full_boxes = total_eggs // eggs_per_box\n    \n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for $5 and $10 notes. \n    # Let x be the number of $5 notes and y be the number of $10 notes.\n    x, y = symbols('x y')\n\n    # Total number of notes is 57\n    total_notes_eq = Eq(x + y, 57)\n\n    # He spent 60% of the $10 notes and 25% of the $5 notes\n    # After spending, he has twice as many $10 notes as $5 notes\n    spent_notes_eq = Eq(y - 0.6*y, 2 * (x - 0.25*x))\n\n    # Solve the equations\n    solutions = solve((total_notes_eq, spent_notes_eq), (x, y))\n    number_of_5_notes = solutions[x]\n    number_of_10_notes = solutions[y]\n\n    # Calculate the cost of the bag.\n    # Cost is the amount spent from each type of note.\n    cost = (0.25 * number_of_5_notes * 5) + (0.6 * number_of_10_notes * 10)\n\n    return cost\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    troy, adam = symbols('troy adam')\n\n    # Equations based on the problem statement\n    equation1 = Eq(troy, 5 * adam)  # Troy had 5 times as much as Adam\n    equation2 = Eq(adam + 24, troy / 3)  # After Adam took 24 more, he had 1/3 of Troy's coins\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had altogether at first\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Hanson's initial amount of money.\n    initial_money = symbols('initial_money')\n\n    # Create an equation based on the problem statement.\n    # After spending 1/4 of his money and $3 on CDs, he has 3/4 of his money left minus $3.\n    money_after_cds = Eq((3/4)*initial_money - 3, (5/5)*(initial_money - ((1/4)*initial_money + 3)))\n    \n    # After spending 3/5 of the remaining money and $6 on batteries, Hanson has $24 left.\n    money_left = Eq((2/5)*((3/4)*initial_money - 3) - 6, 24)\n    \n    # Solve for Hanson's initial amount of money.\n    solutions = solve((money_after_cds, money_left), (initial_money))\n\n    return solutions[initial_money]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        product = 1\n        for digit in str(number):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    # Iterate through all possible hundreds, tens, and ones digits\n    for hundreds in range(1, 10):  # Hundreds place cannot be 0\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # Even number, so ones place has to be even\n                if hundreds + tens + ones == 8 and len({hundreds, tens, ones}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # In the worst case, Darrell may draw all the blue and white beads first.\n    max_other_beads = 5 + 6  # Total number of blue and white beads\n\n    # To then get 5 green beads for sure, he would need to draw 5 more beads.\n    green_beads_needed = 5\n\n    # Total beads Darrell must draw\n    total_beads = max_other_beads + green_beads_needed\n\n    return total_beads\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    missing_number = (1/4 * 16) / (1/2)\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Number of games in single round-robin for each group\n    group_games = 4 * (4 * (4 - 1) // 2)  # C(4, 2) for each group, 4 groups total\n\n    # Knockout round games (top 8, top 4, top 2, winner, runner-up, third place)\n    knockout_round_games = 8 - 1  # 7 games (single elimination for 8 contestants)\n\n    # Total number of games\n    total_games = group_games + knockout_round_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time taken by B to do the job alone be x days.\n    # A is twice as good a workman as B, so A can do the job in x/2 days.\n    # A takes 12 days less than B, so x/2 = x - 12.\n    x = symbols('x')\n    equation = Eq(x / 2, x - 12)\n\n    # Solve for x\n    days_B = solve(equation, x)[0]\n\n    # Time taken by A\n    days_A = days_B / 2\n\n    # A's work rate is 1/(days_A) and B's work rate is 1/(days_B).\n    # Together, their combined work rate is 1/(days_A) + 1/(days_B).\n    # The time it takes for them to complete the job together is the reciprocal of that.\n    total_rate = 1 / days_A + 1 / days_B\n    days_together = 1 / total_rate\n\n    return days_together\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 (mod 5), x ≡ 1 (mod 6), and x ≡ 0 (mod 11)\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    \n    # Solve the system of linear congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice's original amounts.\n    rachel, alice = symbols('rachel alice')\n\n    # Equation 1: Rachel gives Alice 10 pieces.\n    eq1 = Eq(rachel - 10, alice + 10)\n    # Equation 2: Alice gives Rachel 10 pieces.\n    eq2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (rachel, alice))\n\n    # The sum of their candies.\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of plants\n    r = 4  # number of plants to arrange in a row\n\n    # The number of ways to arrange 'r' plants out of 'n' in a row is given by\n    # P(n, r) = n! / (n-r)!\n    # where P(n, r) is the permutation of n objects taken r at a time.\n    permutations = factorial(n) // factorial(n - r)\n    return permutations\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using the Inclusion-Exclusion Principle to find the number of people who like both bananas and apples\n    like_both = like_bananas + like_apples - total_people\n    \n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given_away = 76\n    stickers_bought = 65\n\n    stickers_begin = stickers_end - stickers_bought + stickers_given_away\n    return stickers_begin\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n    \n    solutions = solve((equation1, equation2), (pineapple, apple))\n    \n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 0):\n            return num\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # Factors of 15 and 21 share a common factor of 3.\n    # To have exactly 8 factors, the number must be a cube of a prime (p^3) or a product of two distinct primes (p * q).\n    # Since 15 = 3*5 and 21 = 3*7, the number could be 3*5*7 = 105.\n    # But 105 only has divisors 1, 3, 5, 7, 15, 21, 35, 105 => It has exactly 8 factors.\n    # Let’s find the sum of all eight factors.\n    factors = [1, 3, 5, 7, 15, 21, 35, 105]\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    perms = permutations([0, 1, 2, 3, 4, 5, 6, 7, 9])  # 8 is fixed as first digit\n    for perm in perms:\n        number = '8' + ''.join(str(x) for x in perm)\n        \n        # Check the divisibility for each condition\n        if all(int(number[:i]) % i == 0 for i in range(2, 10)):\n            # Add the last digit (which should be 5 because it's the only one left)\n            number += '5'\n            return int(number)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    to_matthew = 7\n\n    matthew_tomatoes = belinda_tomatoes - to_matthew - (belinda_tomatoes - to_matthew)\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_output = 10\n    efficiency_increase = 0.50\n    new_output = original_output * (1 + efficiency_increase)\n    return new_output\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    x = 2012\n    y = 1274\n    \n    # The difference between the two numbers\n    diff = x - y\n    \n    # An empty list to collect factors of the difference\n    factors = []\n    \n    # Iterate over possible factors up to the difference itself\n    for i in range(1, diff + 1):\n        # Adding only odd factors and if they are truly factors of diff\n        if diff % i == 0 and i % 2 != 0:\n            factors.append(i)\n    \n    # The largest odd factor will be the last in the list\n    D = max(factors)\n    R = x % D  # x and y have the same remainder when divided by D\n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # let r equal the number of rabbits, and d equal the number of ducks\n    for r in range(8): # 0 to 7 rabbits\n        d = 7 - r # 7 - number of rabbits gives us the number of ducks\n        if (r * 4 + d * 2) == 20: # rabbits have 4 legs, ducks have 2, total should be 20\n            return r # return the number of rabbits when the leg count is satisfied\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create a list of tuples representing the congruences\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    \n    # Use solve_congruence from sympy to find the smallest number satisfying all congruences\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_juice = (5/7) * total_juice\n    remaining_juice = total_juice - grace_juice\n    evelyn_juice = (1/9) * remaining_juice\n    final_remaining_juice = remaining_juice - evelyn_juice\n\n    return final_remaining_juice\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    last_digit_4 = 4 ** (2009 % 4)\n    last_digit_6 = 6 ** (2010 % 4)\n    last_digit_sum = (last_digit_4 + last_digit_6) % 10\n    return last_digit_sum\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Given the rules, we want to find a stable state where no matter what the opponent writes, we can always revert back to a stable state.\n    # The winning strategy is to keep the number on the blackboard to a multiple of 7 after each turn.\n    \n    # All possible moves a player can make\n    moves = [1, 3, 4, 6]\n\n    # Calculate the winning positions: if the current state is not a winning position, then there exists a move to a winning position\n    winning_positions = [False] * 53\n    for i in range(1, 53):\n        for move in moves:\n            if i-move >= 0 and not winning_positions[i-move]:\n                winning_positions[i] = True\n                break\n    \n    # If the 52nd position is a winning position, Betty (the first player) will win by taking the first move\n    # to a multiple of 7. Betty's strategy will therefore be taking the game to the next lower multiple of 7.\n    first_player_wins = winning_positions[52]\n\n    if first_player_wins:\n        starting_move = [i for i in moves if winning_positions[52-i]]\n        strategy = (1, starting_move[0])\n    else:\n        strategy = (2, None)  # If second player wins, there's no specific first move for Betty\n\n    return strategy\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 32):\n        for five_gram_weights in range(0, 13):\n            if 2 * two_gram_weights + 5 * five_gram_weights == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    average_height_team = 150\n    average_less_four = average_height_team - 2\n\n    total_height_team = average_height_team * 6\n    total_height_four = average_less_four * 4\n\n    total_height_other_two = total_height_team - total_height_four\n    average_height_other_two = total_height_other_two / 2\n\n    return average_height_other_two\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    # Let x be the number of correct answers\n    # Total number of questions answered by Rex is 24 (25 - 1 not attempted)\n    # Correct answers give +4 points each; incorrect answers give -2 points each\n    # 4*x - 2*(24 - x) = 66\n    # Solve for x\n\n    x = (66 + 2 * (24)) // (4 + 2)\n    return x\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # The sum of an arithmetic sequence can be found using the formula:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # Where S_n is the sum of the first n terms, a is the first term and d is the common difference.\n\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    \n    # sum of the first 8 terms S_8 = 32\n    equation1 = Eq(8/2 * (2*a + (8-1)*d), 32)\n    # sum of the first 22 terms S_22 = 44\n    equation2 = Eq(22/2 * (2*a + (22-1)*d), 44)\n    \n    # solving the equations to find a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # substitute the values of a and d to find the sum of first 15 terms\n    S_15 = 15/2 * (2*solutions[a] + (15-1)*solutions[d])\n    \n    return S_15\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    # Calculate the sum of 1+2+3+...+20\n    sum_positive = sum(range(1, 21))\n\n    # Calculate the sum of 19+18+...+2+1\n    sum_reverse = sum(range(1, 20))\n\n    # The total sum is the sum of both parts\n    total_sum = sum_positive + sum_reverse\n\n    return total_sum\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the flow rate of pipe A, y the flow rate of pipe B, and z the flow rate of pipe C\n    \n    x, y, z = symbols('x y z')\n    # Given: y = 2x (flow rate of B is twice that of A)\n    equation1 = Eq(y, 2 * x)\n    \n    # If A and C are turned on, 18 tons are from A\n    # Total water = water from A + water from C = 18 + water from C\n    # And since pipe A's flow rate is x, it implies water from A is 18x tons\n    # Similarly, water from C would be 18z tons (as it fills at the same time as A)\n    # 18x + 18z = Total water filled by A and C\n    total_water_AC = 18 * (x + z)\n    \n    # If B and C are turned on, 27 tons are from B\n    # Similarly, as for pipe A, since the flow rate of pipe B is y: water from B is 27y tons\n    # And water from C would be 27z tons (as it fills at the same time as B)\n    # 27y + 27z = Total water filled by B and C\n    total_water_BC = 27 * (y + z)\n    \n    # The total amount of water filled by A and C must be the same as that filled by B and C.\n    equation2 = Eq(total_water_AC, total_water_BC)\n    \n    # Use solve to find the values of x and z based on the two equations\n    solutions = solve((equation1, equation2), (x, z))\n\n    # Calculate the total tonnage of water given x and z\n    # Once we have the flow rate of pipe A (x), we can calculate the total water capacity, \n    # which is the same regardless of which pipes are on, by evaluating the expression for total_water_AC or total_water_BC,\n    # since we've established that they are the same.\n    x_val = solutions[x]\n    z_val = solutions[z]\n    \n    # Calculate total water using A and C (or B and C, as they are equal)\n    total_water = total_water_AC.subs({x: x_val, z: z_val})\n\n    return total_water\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n    return factorial(5) // factorial(5-4)\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_first = 20\n    meatballs_left_second = 10\n    additional_meatballs = meatballs_left_first - meatballs_left_second\n    \n    # Since the addition of one student resulted in 10 fewer leftover meatballs,\n    # this implies that every student (including the new one) gets a number of meatballs\n    # equal to the difference in the number of leftover meatballs.\n    \n    return additional_meatballs\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    # Define the original amount and the fraction to increase by\n    original_amount = 9.32\n    increase_fraction = 1 / 10  # This is the fraction by which we need to increase the original amount\n\n    # Increase the original amount by the given fraction\n    ans = original_amount + original_amount * increase_fraction\n    return ans\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n    first_day = total_questions/2 + 7\n    second_day = (total_questions - first_day)/2 - 5\n    third_day = 23\n\n    equation = Eq(first_day + second_day + third_day, total_questions)\n\n    ans = solve(equation, total_questions)[0]\n\n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal = 0.17\n    ans = '4/25' if fraction > decimal else '0.17'\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    total_water_ml = 1000  # 1 litre is 1000 ml\n    water_used_ml = 200 * 3  # 200 ml used for each of 3 cups\n\n    remaining_water_ml = total_water_ml - water_used_ml\n\n    return remaining_water_ml\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of roses and y be the original number of daisies.\n    x, y, m = symbols('x y m')  # m is the number of months\n\n    # The total number of flowers initially is 300\n    equation1 = Eq(x + y, 300)\n\n    # In a few months, which we denote as 'm', there will be 280 roses and 180 daisies.\n    # The number of roses and daisies planted each month is the same, so we have:\n    # x + m = 280 roses\n    # y + m = 180 daisies\n    equation2 = Eq(x + m, 280)\n    equation3 = Eq(y + m, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, m))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # Given values in the question\n    tenth_number = 23\n    fifteenth_number = 38\n\n    # The difference between the positions\n    position_difference = 15 - 10\n\n    # Calculate the common difference by the difference between the numbers\n    # divided by the difference between their positions\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n\n    # Calculate the 12th number using the 10th number and the common difference\n    twelfth_number = tenth_number + common_difference * (12 - 10)\n\n    return int(twelfth_number)\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # We only need to count the number of perfect squares <= 250 \n    # because only perfect squares have an odd number of factors\n    # and therefore will end up in the on state.\n    count = 0\n    for i in range(1, 251):\n        if i**2 <= 250:\n            count += 1\n        else:\n            break\n\n    return count\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 60\n    correct_problems = (10 * 0.20) + (20 * 0.80) + (30 * 0.90)\n\n    overall_score_percentage = (correct_problems / total_problems) * 100\n\n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Calculate the area covered by one 6 decimeter (60 cm) side brick\n    area_per_large_brick = (60 ** 2)  # cm^2\n\n    # Total area to be covered by bricks\n    total_area = area_per_large_brick * 80  # cm^2\n\n    # Area of one 64 cm^2 brick\n    area_per_small_brick = 64  # cm^2\n\n    # Calculate the number of small bricks needed\n    num_small_bricks = total_area / area_per_small_brick\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bottle, bag = symbols('bottle bag')\n\n    # Equation 1: 2 bottles + 3 bags of fruit = £2.55 (255 pence)\n    # We convert £2.55 to pence by multiplying by 100\n    equation1 = Eq(2*bottle + 3*bag, 255)\n\n    # Equation 2: a bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(bottle, bag + 15)\n\n    solutions = solve((equation1, equation2), (bottle, bag))\n\n    return solutions[bag]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    # List of all permutations of the provided digits\n    perms = list(permutations([1, 3, 4, 5, 7, 8]))\n    \n    # Sort the permutations in descending order to start checking from the biggest number\n    sorted_perms = sorted(perms, reverse=True)\n    \n    for perm in sorted_perms:\n        # Convert the permutation tuple to an integer\n        num = int(''.join(map(str, perm)))\n        # Check if the number is divisible by 11 using the divisibility rule for 11\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    return 7 + 8 * 3\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls, boys = symbols('girls boys')\n    \n    equation1 = Eq(girls - boys, 30)\n    equation2 = Eq(girls + boys, 500)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, number):\n        if number % i == 0:\n            return False  # Not a prime number since it has a divisor other than 1 and itself\n    return True  # If no divisor found, it's a prime number (although 91 is not prime)\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    boys_more = 31\n    total_students = 0\n\n    for side_length in range(1, 100, 2):  # Start with an odd side length\n        boys = (side_length * 4) - 4  # Calculate the number of boys in the outermost layer\n        girls = ((side_length - 2) * 4) - 4 if side_length > 1 else 0  # Calculate the number of girls in the next layer\n        if boys - girls == boys_more:  # Check if the difference matches the given condition\n            total_students = side_length**2  # The total number of students is the square of the side length\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "from math import log10\n\ndef solution():\n    num_4s = 2018\n    num_25s = 2018\n    exponent_of_4 = num_4s\n    exponent_of_25 = num_25s * 2  # Since 25 is 5^2\n\n    # Using properties of logarithms to combine the exponents\n    log_A = exponent_of_4 * log10(4) + exponent_of_25 * log10(5)\n\n    # The number of digits is the integer part of log_A plus 1\n    num_digits = int(log_A) + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    num_teams = comb(total_players, team_size)\n\n    return num_teams\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    \n    # Calculate cost price based on the profit percentage\n    cost_price = selling_price / (1 + (profit_percent / 100))\n    \n    # Another scenario where profit is $5000\n    new_selling_price = cost_price + 5000\n    \n    # Calculate new profit percentage\n    new_profit_percent = ((new_selling_price - cost_price) / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of apples Mr. Aziz had initially.\n    x = symbols('x')\n    # On Monday he sold 1/5 of the apples, so he had 4/5 of x left.\n    # On Tuesday he sold 80 apples.\n    # In the end he was left with 30% of the apples he had at first.\n\n    # Therefore, we can write the equation as follows:\n    equation = Eq(4/5 * x - 80, 0.30 * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The number of apples he had in the end is 30% of the initial amount.\n    apples_in_the_end = int(solution[0] * 0.30)\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since each pile has at least one ball, start with one in each pile.\n    for x1 in range(1, 8): # One ball is already in each pile, hence the loop goes to 10 - 3 + 1 = 8.\n        for x2 in range(1, 8):\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n    \n    return total_people\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first even number be x\n    x = symbols('x')\n    \n    # Define the seven consecutive even numbers\n    even_numbers = [x + 2*i for i in range(7)]\n    \n    # Equation: The fourth number is larger than one-third of the sum of the first and seventh numbers by 6\n    equation = Eq(even_numbers[3], (even_numbers[0] + even_numbers[6])/3 + 6)\n    \n    # Solve the equation to find the value of x\n    x_value = solve(equation, x)[0]\n\n    # Calculate the sum of the seven even numbers\n    sum_even_numbers = sum([x_value + 2*i for i in range(7)])\n    \n    return sum_even_numbers\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    number_of_pieces = 2\n    length_per_piece = total_length / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    afternoon_cookies_sold = (total_cookies - morning_cookies) * (3/4)\n    \n    return int(afternoon_cookies_sold)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    distance_km = 1.5\n    distance_m = distance_km * 1000\n    return distance_m\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    new_total_sum = total_sum - 180\n    new_average = new_total_sum / 8\n    \n    return new_average\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    total_red_white = 38\n    total_red = 28\n\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, total_red_white)\n    equation4 = Eq(red, total_red)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Calculate total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n\n    trees_per_side = (length_of_highway // distance_between_trees) + 1\n    total_trees = trees_per_side * 2  # since trees are planted on both sides\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    n = 20\n    first_odd_number = 1\n    common_difference = 2\n    nth_odd_number = first_odd_number + (n - 1) * common_difference\n    return nth_odd_number\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place after overtaking 5 cars,\n    # it means there was one car he did not overtake (the one in the first place).\n    # Thus, the total number of cars he did not overtake (including the first one)\n    # plus the number of cars he did overtake gives us the total number of cars.\n\n    overtaken_cars = 5\n    not_overtaken_cars = 1  # The car in the first place\n\n    # Total number of cars is the sum of overtaken cars and not overtaken cars\n    total_cars = overtaken_cars + not_overtaken_cars + 1  # Adding the Ferrari driver's car\n\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    # Eddie's current age\n    eddie_age_now = 8\n    # Mike's current age\n    mike_age_now = 48\n    # Difference in years between the ages of Eddie now and when Eddie will be 18\n    years_difference = 18 - eddie_age_now\n    # Mike's age when Eddie is 18\n    mike_age_then = mike_age_now + years_difference\n    \n    return mike_age_then\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book = 15.99\n    amy_book = lily_book + 8.01\n    total_paid = lily_book + amy_book\n    return total_paid\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    num_sides = 9\n    total_angle_sum = (num_sides - 2) * 180\n    interior_angle = total_angle_sum / num_sides\n\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_last_four_digits = 0\n    for i in range(1, 21):\n        num = int('5' * i)\n        sum_last_four_digits += num\n        sum_last_four_digits %= 10000  # Keep only the last 4 digits after each addition\n    return sum_last_four_digits\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    men_for_one_wall = 2\n    days_for_one_wall = 3\n    walls_built_by_one_man_in_one_day = 1 / (men_for_one_wall * days_for_one_wall)\n\n    def time_for_x_walls_y_men(x, y):\n        total_walls = x\n        total_men = y\n        days_needed = total_walls / (walls_built_by_one_man_in_one_day * total_men)\n        return days_needed\n\n    return time_for_x_walls_y_men\n\nx = 1  # replace with the number of walls to build\ny = 1  # replace with the number of men building\n\nans = solution()(x, y)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men = total_people * 0.25\n    women = total_people * 1 / 5\n    children = total_people - men - women\n\n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let checked_shirts represent the number of checked shirts\n    # Let white_shirts represent the number of white shirts\n\n    # According to the problem, we have:\n    # white_shirts = 7 * checked_shirts\n    # white_shirts + checked_shirts = 72\n\n    # We can substitute the first equation into the second:\n    # 7 * checked_shirts + checked_shirts = 72\n    # 8 * checked_shirts = 72\n    # checked_shirts = 72 / 8\n\n    checked_shirts = 72 // 8\n    white_shirts = 7 * checked_shirts\n\n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for number in range(1, 100):\n        if (number % 3 == 2) and (number % 4 == 3) and (number % 5 == 4):\n            return number\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # The number is a 3-digit odd number, divisible by 9, with the tens digit divisible by 4\n    # We start with the largest possible 3-digit odd number and check each number down to the smallest 3-digit odd number\n    for number in range(999, 99, -2):  # Start from 999 and go down by 2 for odd numbers\n        tens_digit = (number // 10) % 10  # Extract the tens digit\n        if number % 9 == 0 and tens_digit % 4 == 0:  # Check divisibility by 9 and if tens digit is divisible by 4\n            return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    return 72 + 60 + 48 + 36 + 24 + 12\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    ans = \"pic\"  # Placeholder for the value which cannot be determined without the actual picture\n    # Since there is no picture provided, and the value of 'pic' cannot be inferred from the provided information,\n    # no computation can be performed.\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Since there are 3 colors and you need at least 2 balls of the same color,\n    # if you take just one ball from each color, you are still not guaranteed to have 2 of the same color.\n    # Therefore, after taking one ball from each color (total 3 balls), you need to take one more ball to ensure\n    # you have at least 2 balls of the same color (pigeonhole principle).\n    # So the minimum draws you need is the total colors (3) plus one.\n\n    min_draws = 3 + 1\n    \n    return min_draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    square_number = 42 // 6\n    return square_number\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    total_children = 390\n\n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(girls + boys, total_children)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Defining the congruences based on the problem statement\n    congruences = [(3, 4), (4, 5), (5, 6)]\n\n    # Applying the Chinese Remainder Theorem to solve the congruences\n    ans, _ = solve_congruence(*congruences)\n\n    # Ensuring the solution is less than 60\n    while ans >= 60:\n        ans -= 60\n\n    return ans\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m + 1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    jan_to_apr = 300 * 4\n    may_to_jul = 250 * 3\n    aug_to_sep = 750\n    oct_to_dec = 300 * 3\n    total = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    average_per_month = total / 12\n    return average_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    full_number = (three_quarters / 3) * 4\n    return full_number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 0.98  # Since each hour there is 2% less water, k is 100% - 2% = 98% or 0.98\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    top_temperature = -2\n    bottom_temperature = 17\n    temperature_drop = bottom_temperature - top_temperature\n    return temperature_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_ratio = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_ratio\n    women_count = total_passengers * women_percentage\n    children_count = total_passengers - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    total_votes = 400\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, total_votes)\n    \n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    \n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(200):\n        # Convert the number into base 4, 6, and 8 and calculate the sum of digits\n        sum_digits_base_4 = sum(int(digit) for digit in format(N, '4'))\n        sum_digits_base_6 = sum(int(digit) for digit in format(N, '6'))\n        sum_digits_base_8 = sum(int(digit) for digit in format(N, '8'))\n\n        # Check the conditions for sum of digits in each base\n        if sum_digits_base_4 == 5 and sum_digits_base_6 == 8 and sum_digits_base_8 == 9:\n            possible_values.append(N)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are two cases for forming a three-digit number:\n    # 1. The first digit is 2 or 3 (since a three-digit number cannot start with 0). This gives us 2 choices.\n    # 2. The second and third digits can be 0, 2, or 3. Each position has 3 choices.\n    \n    first_digit_choices = 2  # (2 or 3)\n    other_digit_choices = 3  # (0, 2, or 3)\n    \n    # Calculate the total number of possible combinations\n    total_combinations = first_digit_choices * (other_digit_choices ** 2)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_hotdogs = 12\n    cost_per_hotdog = cost_per_six_hotdogs / 6\n    total_cost = cost_per_hotdog * number_of_hotdogs\n    return total_cost\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag = 16  # in pence\n    total_money = 200   # in pence (because 1 pound = 100 pence)\n\n    num_bags = total_money // price_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chip, dale = symbols('chip dale')\n    \n    # Chip gives 14 acorns to Dale\n    equation1 = Eq(chip - 14, dale + 14)\n    \n    # Total number of acorns\n    equation2 = Eq(chip + dale, 124)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chip, dale))\n    \n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    ways = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    return ways\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(2, 100):\n        if num % 2 == 0 and num % 4 == 0 and num % 3 == 0 and (num ** 0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # prime numbers less than 51\n    primes_set = set(primes)  # using a set for O(1) lookups\n    prime_sums = [[0]*(len(primes)+1) for _ in range(52)]  # matrix to calculate\n    prime_sums[0][0] = 1  # base case \n\n    # Bottom-up dynamic programming approach\n    for i in range(1, 52):\n        for j in range(1, len(primes)+1):\n            prime_sums[i][j] = prime_sums[i][j-1]\n            if primes[j-1] <= i and (i-primes[j-1]) in primes_set:\n                prime_sums[i][j] += prime_sums[i-primes[j-1]][j-1]\n\n    # Find the minimum number of prime numbers that sum up to 51\n    for j in range(1, len(primes)+1):\n        if prime_sums[51][j]:\n            return j\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    dividend = 85\n    divisor = 5\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3 * x + 1), 1/6)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    novels, science_books = symbols('novels science_books')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (novels, science_books))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * (40 - i) for i in range(40))\n    return ans\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_weight_kg = 2.5\n    pie_weight_g = 750\n    juice_weight_g = 1025\n    \n    remaining_weight_kg = initial_weight_kg - (pie_weight_g + juice_weight_g) / 1000\n    \n    return remaining_weight_kg\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_for_3_page_letters = 3\n    pages_for_4_page_letters = 4\n    \n    # Let's assume all penpals received 3-page letters initially:\n    initial_3_page_letters = total_penpals * pages_for_3_page_letters\n    \n    # Calculate how many extra pages are needed to reach the total of 38 pages\n    extra_pages = total_pages - initial_3_page_letters\n    \n    # Since every switch from a 3-page to a 4-page letter adds 1 extra page\n    # we can find the number of 4-page letters by the number of extra pages\n    penpals_with_4_page_letters = extra_pages // (pages_for_4_page_letters - pages_for_3_page_letters)\n    \n    # Finally, we subtract the number of 4-page letters from total penpals to get the number of 3-page letters\n    penpals_with_3_page_letters = total_penpals - penpals_with_4_page_letters\n    \n    return penpals_with_3_page_letters\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n    amy_position = 1  # Amy herself is also counted\n    total_people = people_in_front + position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the length of the shorter piece be x. Then, the longer piece is 2x.\n    x = symbols('x')\n    \n    # Set up the equation based on the relationship given in the problem\n    equation = Eq(x + 2*x, 12.75)\n\n    # Solve the equation to find the length of the shorter piece\n    shorter_piece_length = solve(equation, x)[0]\n    \n    # Calculate the length of the longer piece, which is twice the shorter piece\n    longer_piece_length = 2 * shorter_piece_length\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    books_to_the_right = 6\n    position_from_left = 14\n\n    total_books = position_from_left + books_to_the_right\n\n    return total_books\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    new_volume = original_volume * (1/2)**3\n    return new_volume\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for coins they get in the class\n    coins_class = symbols('coins_class')\n    \n    # Equation for the amount Gigi has after the class\n    equation1 = Eq(120 + coins_class, 3 * (24 + coins_class))\n    \n    # Solve the equation\n    coins_got = solve(equation1, coins_class)\n    \n    # Return the solution\n    return coins_got[coins_class]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    non_prime_count = 0\n    for number in range(1, 21):\n        if not isprime(number):\n            non_prime_count += 1\n\n    return non_prime_count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    result = 8386 // 14\n    return result\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # We want 3 different coloured balls.\n    # In the worst case, we might end up picking all balls of the same colour before we pick a different colour.\n    # Hence we pick 5 red balls, then we might pick 5 white balls (worst case continuing).\n    # After this, the very next ball has to be yellow. Therefore, we need to pick at least 1 more to get 3 different coloured balls.\n    # That makes 5 (red) + 5 (white) + 1 (next ball to be different - yellow) = 11.\n    \n    return 11\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Loop through all possible 3-digit odd numbers\n    for i in range(100, 1000):\n        if i % 2 != 0: # Check if the number is odd\n            sum_digits = sum(int(digit) for digit in str(i)) # Calculate the sum of the digits\n            if sum_digits == 11: # Check if the sum of the digits is 11\n                count += 1 # Increase the count if the condition is met\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since it takes 5 minutes to boil an egg, and we are looking for the least amount of time\n    # to boil 3 eggs, we will assume that we can boil more than one egg at a time.\n    # Therefore, the least amount of time it would take to boil 3 eggs is still 5 minutes.\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    min_cabins_needed = (students + cabin_capacity - 1) // cabin_capacity\n    return min_cabins_needed\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n, d = symbols('n d')  # n is the total number of terms, d is the common difference\n    # Let the first term be a.\n\n    # Based on the sum of arithmetic sequence formula: Sum = (n/2) * (first_term + last_term)\n    # Sum of first 4 numbers: 4/2 * (2*a + (4-1)*d) = 124\n    equation1 = Eq(2*a + 3*d, 124)\n\n    # Sum of last 4 numbers: 4/2 * (2*(a + (n-1)*d) - 3*d) = 156\n    # Simplify it to: 2*a + (2*n - 1)*d = 156\n    equation2 = Eq(2*a + (2*n - 1)*d, 156)\n\n    # Total sum of the sequence: (n/2) * (2*a + (n-1)*d) = 210\n    equation3 = Eq(n*(a + (n-1)*d/2), 210)\n\n    solutions = solve((equation1, equation2, equation3), (n, d, a))\n\n    # Since we expect n to be positive, we filter out non-positive solutions\n    ans = next(sol[n] for sol in solutions if sol[n] > 0)\n\n    return ans\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough = 11160  # in grams; 1 kg = 1000g\n    cookie_dough = 45  # in grams\n    brownie_dough = 150  # in grams\n    total_cookies = 240\n    total_brownies = 2\n\n    dough_used = (cookie_dough * total_cookies) + (brownie_dough * total_brownies)\n    dough_left = initial_dough - dough_used\n    dough_left_in_kg = dough_left / 1000  # convert grams to kg\n\n    return dough_left_in_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    # Let's denote 'calories_today' as 'c' for today's calorie intake by Dan\n    # The inequality representing that Dan will take in less calories today than yesterday is:\n    # c < calories_yesterday\n    # Since we are not asked for a specific solution but to represent the inequality\n    # We will return inequality as a string in terms of c\n    return \"c < {}\".format(calories_yesterday)\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n\n    # Inverse operations of the second day\n    remaining_biscuits = (remaining_biscuits + 2) * 2\n\n    # Inverse operations of the first day\n    remaining_biscuits = (remaining_biscuits + 4) * 2\n\n    return remaining_biscuits\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit = 5\n    spend = 8\n    amount = initial_amount\n\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Deposit on odd days\n            amount += deposit\n        else:  # Spend on even days\n            amount -= spend\n\n    return amount\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    index = (1004 - 1) % len(pattern)\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums / children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    result = 1234 + 5678 - 4321 + 8765 - 6789 + 9876 - 5678 + 8765 - 1234 + 6789 - 8765 + 4321\n    return result\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the number of friends Natalia has\n    friends = symbols('friends')\n\n    # The excess chocolates when each friend gets 18 pieces\n    excess_chocolates = 41\n\n    # The short of chocolates when each friend gets 23 pieces\n    short_chocolates = 34\n\n    # Equation for the 18 pieces case\n    equation1 = Eq(friends * 18 + excess_chocolates, friends * 23 - short_chocolates)\n\n    # Solve for the number of friends\n    number_of_friends = solve(equation1, friends)[0]\n\n    # Calculate the total chocolates Natalia has\n    total_chocolates = number_of_friends * 23 - short_chocolates\n\n    # Calculate the chocolates left when she gives each friend 20 pieces\n    chocolates_left = total_chocolates - number_of_friends * 20\n\n    return chocolates_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "from itertools import combinations\n\ndef solution():\n    # Define a function that checks all given conditions\n    def check_conditions(number):\n        conditions = [\n            number % 27 == 0,           # Condition from Student A\n            number % 7 == 0,            # Condition from Student B\n            sum(map(int, str(number))) == 17,  # Condition from Student C (sum of digits is 17)\n            int(number**0.5) == number**0.5,   # Condition from Student D (number is a perfect square)\n            89100 % number == 0         # Condition from Student E\n        ]\n        return conditions\n    \n    # Generate all 3-digit numbers\n    for number in range(100, 1000):\n        conditions = check_conditions(number)\n        \n        # Find combinations of conditions where exactly three are True\n        for true_conditions in combinations(conditions, 3):\n            if all(true_conditions) and conditions.count(True) == 3:\n                return number\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    result = 84.8 / 400\n    return result\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    spent_on_book = total_money * 0.15\n    money_left_after_book = total_money - spent_on_book\n    spent_on_dvd = money_left_after_book * 0.30\n    money_left = money_left_after_book - spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Mulan can do more push-ups than the best boy soldier\n    # Let m represent the number of push-ups Mulan can do\n    # The inequality is: m > 50\n    best_boy_soldier = 50\n    # To represent this in Python, we just need to store the value\n    # and return it since inequalities don't have numerical solutions\n    m = best_boy_soldier + 1  # This is just a representation\n    \n    return m\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    remaining_balloons = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return remaining_balloons\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    total_games = teams - 1  # In a knockout tournament, the number of games is one less than the number of teams\n    games_played = 24\n    games_to_play = total_games - games_played\n    return games_to_play\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Since the pieces of candy must be distinct and each child must have at least one piece,\n    # we can start by giving each of the first 7 children one piece of candy. This leaves us with:\n    remaining_candies = 88 - 7\n    \n    # We then need to distribute the remaining candies among the children so that no two have the same amount.\n    # To minimize the amount the child with the most pieces gets, we use the minimum extra candies\n    # necessary for distinct amounts, which follows the pattern of natural numbers: 1, 2, 3, ...\n    # We give 1 extra to the first child, 2 extra to the second, ... until 6 extra to the 6th child.\n    # Subtract this from the remaining candies to get the minimum amount for the 8th child.\n    min_extra = sum(range(1, 7))\n    least_for_most = remaining_candies - min_extra\n\n    return least_for_most\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Since Tom took 4 stones from Stack B, we now have:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # Jerry must take stones in a way to ensure that both stacks have the same number of stones.\n    # This will ensure that Tom cannot win in the next round, and Jerry will always be able to mirror Tom's moves\n    # and ultimately take the last stone.\n\n    # The optimal move for Jerry is to take 4 stones from Stack A, making:\n    # Stack A: 16 stones\n    # Stack B: 16 stones\n    # Now, whatever Tom does in his next turn, Jerry can do the same on the other stack\n    # and maintain the balance until he finally takes the last stone.\n    \n    stones_to_take = 20 - 16\n    stack_name = \"A\"  # Jerry should take from Stack A\n    \n    return stones_to_take, stack_name\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    num1 = 15\n    num2 = 37\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4\n    water_left = 7\n    \n    original_volume = (pails_filled * water_per_pail) + water_left\n    \n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Ratio of girls to boys is 7:9\n    ratio_girls = 7\n    ratio_boys = 9\n    \n    # There are 16 more boys than girls\n    difference = 16\n    \n    # Let the number of girls be 7x and boys be 9x, then 9x - 7x = 16\n    x = difference / (ratio_boys - ratio_girls)\n    \n    # Total pupils is the sum of boys and girls\n    total_pupils = (ratio_girls * x) + (ratio_boys * x)\n    \n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(3 * i + 1 for i in range(37))\n    mistake_diff = correct_sum - 2011\n    \n    # Find out the position by dividing the difference by 6 (3 added and 3 subtracted)\n    mistake_position = mistake_diff // 6\n\n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    number_of_trees = circumference // interval\n\n    return number_of_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_for_12_shortcakes = 10\n    milk_used_by_liz = 25\n    shortcakes_made_by_liz = (12 / milk_for_12_shortcakes) * milk_used_by_liz\n    return shortcakes_made_by_liz\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Given five consecutive natural numbers with a sum of 160\n    # Let the middle number be x (since the average will also be x)\n    # The numbers will be (x-2), (x-1), x, (x+1), (x+2)\n    # The sum of these numbers is 5x\n    # Therefore, 5x = 160\n    x = 160 / 5\n    \n    # The largest number will be (x + 2)\n    largest_ball_count = x + 2\n\n    return int(largest_ball_count)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for units in range(10):\n            M = hundreds * 100 + units\n            S = hundreds + units\n            if M == 67 * S:\n                reversed_M = units * 100 + hundreds\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 2 * 100  # Convert 2 meters to centimeters\n    piece_length_cm = 6\n\n    num_complete_pieces = stick_length_cm // piece_length_cm\n\n    return num_complete_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n\n    ans = comb(total_balls, balls_to_select)\n\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Start from 13/10 and reverse the operation.\n    # Subtract 1 to get the fraction without the integer part.\n    fraction = 13/10 - 1  # This gives us the fraction corresponding to 1/(a + 1/(b + 1/c))\n\n    # Take the reciprocal to find 'a'\n    a = 1 / fraction\n    a_whole = int(a)  # The whole number part of 'a'\n    \n    # Subtract the whole part and take the reciprocal to find 'b'\n    b_fraction = a - a_whole\n    b = 1 / b_fraction\n    b_whole = int(b)\n\n    # Subtract the whole part and take the reciprocal to find 'c'\n    c_fraction = b - b_whole\n    c_whole = int(1 / c_fraction)\n\n    # Calculate the final result a + 2b + 3c\n    result = a_whole + 2 * b_whole + 3 * c_whole\n\n    return result\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # Since we're only interested in the ones digit of 8^30,\n    # we can look at the pattern of the ones digit as we raise\n    # 8 to successive powers\n    ones_digit = [8**i % 10 for i in range(1, 5)]  # Check 8^1, 8^2, 8^3, and 8^4\n    cycle_length = len(ones_digit)  # The cycle length for the ones digit of powers of 8\n    ones_digit_of_8_pow_30 = ones_digit[(30 % cycle_length) - 1]  # Use modulo to find the ones digit\n    return ones_digit_of_8_pow_30\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n\n    days_spent_reading = total_pages / average_pages_per_day\n\n    return int(days_spent_reading)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * 5 - incorrect * 3 == 52:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days = 0\n    total_peaches = 100\n    eaten_peaches = 0\n\n    while total_peaches > eaten_peaches:\n        days += 1\n        eaten_peaches += days\n\n    return days\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    common_difference = 5\n    number_of_terms = (last_term - first_term) // common_difference + 1\n\n    # Sum of arithmetic series formula: n/2 * (first_term + last_term)\n    sum_of_series = number_of_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    return (150 / (0.3 * 100))\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = sum(i for i in range(1, 21) if i % 6 == 1)\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution\n    sugar_concentration = 0.48  # Sugar concentration in the solution\n    sugar_weight = total_weight * sugar_concentration  # Weight of the sugar\n    water_weight = total_weight - sugar_weight  # Weight of the water\n    \n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    result = sum([5 for _ in range(9)])\n    return result\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the youngest dwarf's age be x\n    # Then the ages of the youngest three are x, x+1, x+2\n    # Their total age is 3x + 3\n    # It is given that 3x + 3 = 42\n    # Solve for x\n    x = (42 - 3) // 3  # Subtract and divide by 3 to find x\n    \n    # The age of the oldest three dwarfs will be x+4, x+5, x+6\n    # Calculate their total age\n    total_age_oldest_three = (x + 4) + (x + 5) + (x + 6)\n\n    return total_age_oldest_three\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    abcd = 1000*a + 100*b + 10*c + d\n    abc = 100*a + 10*b + c\n    ab = 10*a + b\n\n    equation = Eq(abcd + abc + ab + a, 1370)\n    solutions = solve(equation, (a, b, c, d))\n\n    # Find the value of abcd which is the four digit number representation\n    for sol in solutions:\n        if all(0 <= digit <= 9 for digit in sol):\n            value_abcd = 1000*sol[0] + 100*sol[1] + 10*sol[2] + sol[3]\n            return value_abcd\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_scores = sum(scores)\n    number_of_games = len(scores)\n\n    mean_score = total_scores / number_of_games\n\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Initialize the sum of the whole numbers\n    whole_sum = 19 + 199 + 1999 + 19999 + 199999\n    # Initialize the sum of the fractional parts: 4/5 times 5 is easy to compute\n    fraction_sum = 4/5 * 5\n    \n    # Add the sum of whole numbers and the sum of the fractional parts\n    ans = whole_sum + fraction_sum\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    return (5/8) * 408\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n\n    years_until_total_35 = (35 - current_total_age)\n\n    return years_until_total_35\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    average_marks = 75\n    total_tests = 3\n    total_marks_two_tests = 172\n\n    total_marks_all_tests = average_marks * total_tests\n    marks_remaining_test = total_marks_all_tests - total_marks_two_tests\n    \n    return marks_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 1  # This is the initial 1 in the sequence\n    for i in range(2, 9):\n        # Adding up the fractions from 1/i to i/i and then back down to 1/i\n        ans += 2 * (sum(1/i for i in range(1, i))) + 1/i\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for total number of sweets (total_sweets),\n    # number of fruit drops (fruit_drops), and number of milk chocolates (milk_chocolates)\n    total_sweets, milk_chocolates = symbols('total_sweets milk_chocolates')\n    \n    # Given:\n    # 6 fruit drops = 2/7 of milk chocolates\n    # fruit_drops is already known to be 6\n    fruit_drops = 6\n    \n    # milk chocolates = 3/4 of total sweets\n    # So we setup our two equations based on the problem statement.\n    equation1 = Eq(fruit_drops, 2/7 * milk_chocolates)\n    equation2 = Eq(milk_chocolates, 3/4 * total_sweets)\n    \n    # Solve the equations for total number of sweets\n    solutions = solve((equation1, equation2), (milk_chocolates, total_sweets))\n    \n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    # Let x be the cost of a football and y be the cost of a volleyball\n    # We have two equations based on the given information:\n    # 1 * x + 2 * y = 60  (Buying 1 football and 2 volleyballs for $60)\n    # 2 * x = 60 - 16     (After buying 2 footballs, she gets $16 back from $60)\n\n    # Solve the second equation to find the cost of a football\n    x = (60 - 16) / 2\n\n    # Now substitute the value of x in the first equation to find y\n    y = (60 - x) / 2\n\n    return y\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # We know the mode is 7, so there are at least two members who are 7 years old.\n    # The median is 8, so one member is 8 years old.\n    # The mean is 9 and there are 5 members, so the sum of their ages is 45.\n    # The range is 6, so if the youngest is 7, the oldest is 7 + 6 = 13.\n\n    # Start with the three ages we know for sure based on mode and median\n    ages = [7, 7, 8]\n\n    # We need to find two more ages that fit the criteria.\n    for age4 in range(7, 14):  # The second oldest can't be younger than 7 or older than 13\n        for age5 in range(age4, 14):  # The oldest must be the same or older than the second oldest\n            temp_ages = ages + [age4, age5]\n            if mean(temp_ages) == 9 and mode(temp_ages) == 7 and median(temp_ages) == 8 and max(temp_ages) - min(temp_ages) == 6:\n                return age4\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # Given clues:\n    # 1. 1703: two digits correct and in their correct positions.\n    # 2. 2745: two digits correct but in the wrong positions.\n    # 3. 3541: all digits correct but all in the wrong positions.\n    \n    # Based on clue 3, we know that the number contains digits 3, 5, 4, 1 but in a different order.\n    # Let's assemble potential answers based on different permutations of these digits\n    \n    from itertools import permutations\n\n    for perm in permutations('3541'):\n        number = ''.join(perm)\n        # Check if it fits the description from the other clues\n        if (number[0] == '1' and number[2] == '0') or \\\n           (number[0] == '1' and number[3] == '3') or \\\n           (number[1] == '7' and number[2] == '0') or \\\n           (number[1] == '7' and number[3] == '3'):\n            # Clue 1: 1703 (two correct spots). Check if this permutation fits this clue.\n            \n            # Clue 2: 2745 (two correct digits, zero correct spots)\n            all_wrong_positions = (number[0] != '2' and number[1] != '7' and number[2] != '4' and number[3] != '5')\n            has_two_correct = (('2' in number) + ('7' in number) + ('4' in number) + ('5' in number)) == 2\n            if all_wrong_positions and has_two_correct:\n                # Clue 3: 3541 (zero correct spots), guaranteed by permutation of \"3541\"\n                return int(number)\n    \n    return None\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    ans = 1000 - 630\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = sum(i for i in range(1, n + 1)) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    series_sum = num_terms * (first_term + last_term) // 2\n\n    return series_sum\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    num_books = 3\n    return math.factorial(num_books)\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from itertools import permutations\n\ndef solution():\n    people = ['A', 'B', 'C', 'D', 'E']\n    count = 0\n    for p in permutations(people):\n        if p[0] != 'A' and p[-1] != 'A':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    return math.ceil(math.log2(16))\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Define the number of pink flowers\n    pink = 3\n    \n    # Since the number of pink flowers is 7 fewer than the number of yellow flowers\n    yellow = pink + 7\n    \n    # The number of red flowers is 3 times that of yellow flowers\n    red = 3 * yellow\n    \n    # Calculate the total number of red and yellow flowers\n    total_flowers = red + yellow\n    \n    return total_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    # let b be the original number of boys and g be the number of girls\n    from sympy import symbols, Eq, solve\n    \n    b, g = symbols('b g')\n    # Morning: The number of boys was 50% more than the number of girls, so b = 1.5 * g\n    morning_eq = Eq(b, 1.5 * g)\n    \n    # Afternoon: 12 boys and 12 girls joined the group\n    b += 12\n    g += 12\n    \n    # Afternoon: The ratio of the number of boys to girls became 19:14\n    afternoon_eq = Eq(b/g, 19/14)\n    \n    # Solve the system of equations\n    solutions = solve((morning_eq, afternoon_eq), (b, g))\n    \n    # Calculate the total number of children in the Botanic Gardens that afternoon\n    total_children_afternoon = solutions[b] + solutions[g]\n    \n    return total_children_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    \n    ratio1 = Eq(apples / oranges, 3/8)\n    ratio2 = Eq((apples - 1) / oranges, 1/3)\n    \n    solutions = solve((ratio1, ratio2), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # Hundreds digit: 1-9\n        for tens in range(0, 10): # Tens digit: 0-9\n            for ones in range(0, 10): # Ones digit: 0-9\n                if hundreds > tens and ones > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    # This is a problem of calculating derangements, also known as subfactorials or !n\n    # where n is the number of items. We will use the formula:\n    # !n = (n - 1) * (!(n - 1) + !(n - 2))\n    n = 6\n    derangements = [1, 0]  # Base case for !0 and !1\n\n    for i in range(2, n+1):\n        derangement = (i - 1) * (derangements[-1] + derangements[-2])\n        derangements.append(derangement)\n\n    return derangements[n]\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_cost = 48\n    total_classmates = 10\n    notebook_cost = 3\n    colour_pencil_cost = 9\n    \n    max_colour_pencils = total_cost // colour_pencil_cost\n    for colour_pencils in range(max_colour_pencils + 1):\n        notebooks = total_classmates - colour_pencils\n        if notebooks * notebook_cost + colour_pencils * colour_pencil_cost == total_cost:\n            return colour_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n\n    students_first_floor = first_floor_rows * seats_per_row\n    students_second_floor = total_students - students_first_floor\n\n    return students_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    previous_term = 56\n    common_ratio = 2\n    next_term = previous_term * common_ratio\n\n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let's denote the first even number as x.\n    # Then the consecutive even numbers will be x, x+2, x+4, x+6, x+8, x+10\n    # Their sum is 6x + 30 = 510\n    total_sum = 510\n    n = 6\n    sum_of_consecutive_numbers = 30\n\n    # Now we solve for the first term x: 6x + 30 = 510\n    x = (total_sum - sum_of_consecutive_numbers) // n\n\n    # The difference between the mean and the median in this case can be solved via:\n    # Median of 6 consecutive even numbers is the average of the 3rd and 4th numbers: (x+4 + x+6)/2 = x+5\n    # Mean of 6 consecutive numbers is total sum / 6 = 510/6 = 85\n    # Difference = Mean - Median = (x+5) - 85\n    median = x + 5\n    mean = total_sum / n\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    # The number of consecutive zeros at the end of a number is equal to the number of times it can be divided by 10.\n    # Since 10 = 2 x 5, we need to find how many pairs of 2's and 5's are in the prime factorization of the factorial.\n    # Given that 2 is a more common factor than 5, we should count the number of 5's in the prime factorization.\n    \n    num_zeros = 0\n    for i in range(1, 51):\n        while i % 5 == 0:\n            num_zeros += 1\n            i //= 5\n            \n    return num_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cards Helen gained\n    x = symbols('x')\n    \n    # Final cards\n    helen_final = 18 + x # Helen started with 18 cards and gained x cards\n    oliver_final = 22 - x # Oliver started with 22 cards and lost x cards\n    \n    # Equation based on the condition that Helen has 10 more cards than Oliver\n    equation = Eq(helen_final, oliver_final + 10)\n    \n    # Solving the equation\n    sol = solve(equation, x)\n    helen_cards = 18 + sol[0]\n\n    return helen_cards\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    value_A = 40\n    value_B = value_A / 2\n    value_C = value_B / 2\n    total_value = value_A + value_B + value_C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n\n    sugar_weight = total_weight * sugar_concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    first_climb = 23\n    first_descent = 31\n    second_climb = 17\n\n    final_height = initial_height + first_climb - first_descent + second_climb\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    from math import log10\n    N = 5**100\n    num_digits = int(log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mangoes, strawberries = symbols('mangoes strawberries')\n    equation1 = Eq(mangoes - strawberries, 448)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n    \n    solutions = solve((equation1, equation2), (mangoes, strawberries))\n    \n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    for i in range(-100, 100):  # arbitrary range, since sums of 5 consecutive numbers vary widely\n        if sum(range(i, i+5)) == 40:\n            return i\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    number = solve(equation, x)\n\n    return number[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers\n    return composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(map(int, str(year))) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    common_factor = 2\n    other_factor1 = 13\n    other_factor2 = 3.5\n\n    ans = common_factor * other_factor1 * other_factor2\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]  # provided digits\n    valid_numbers = []\n\n    # generate all permutations of the 5 digits and check if they are multiples of 9\n    for number_tuple in permutations(digits, 5):\n        if number_tuple[0] != 0:  # check that the first digit is not zero\n            number = int(''.join(map(str, number_tuple)))\n            if number % 9 == 0:\n                valid_numbers.append(number)\n\n    max_difference = (max(valid_numbers) - min(valid_numbers)) // 9\n    return max_difference\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    sweets_given_away = 8\n\n    sweets_left = total_sweets - sweets_given_away\n\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    n4 = 39\n    n12 = 57\n    difference = (n12 - n4) / (12 - 4)\n    first_term = n4 - (4 - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = ['1', '3', '5', '2']  # Make a list of given digits\n    \n    # Using sorted function to sort the digits in descending order\n    # in order to get the largest number\n    largest_number = int(''.join(sorted(digits, reverse=True)))\n    \n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = \"four million four hundred and four\"\n    word_to_digit = {\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9',\n        'zero': '0',\n        'million': '000000',\n        'hundred': '00',\n        'thousand': '000'\n    }\n    \n    parts = number.split()\n    \n    ans = \"\"\n    for part in parts:\n        if part in word_to_digit:\n            ans += word_to_digit[part]\n        elif part == \"and\":\n            continue\n    ans = int(ans)\n    \n    return ans\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.30 + 20 * 0.20\n    final_concentration = 0.10\n    total_solution_without_water = 30 + 20\n    water_to_add = total_salt / final_concentration - total_solution_without_water\n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n\n    incorrect_other_addend = incorrect_sum - incorrect_addend\n    correct_sum = correct_addend + incorrect_other_addend\n    \n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # meters per minute\n    vicky_speed = 250    # meters per minute\n    race_distance = 3000 # meters\n\n    # Time taken by Johnson to finish the race\n    johnson_time = race_distance / johnson_speed\n    \n    # Time taken by Vicky to finish the race\n    vicky_time = race_distance / vicky_speed\n    \n    # The difference in time (Johnsons time earlier than Vicky)\n    time_difference = vicky_time - johnson_time\n    \n    return time_difference\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Based on the Pigeonhole Principle, in the worst case scenario, we will have to take out all balls \n    # of two colors before we can be sure that the remaining balls are all of the third color.\n    blue = 80\n    red = 40\n    white = 30\n\n    # To guarantee 29 balls of one color, 28 balls of another, and 10 of the last, in the worst case, we need to\n    # take out all balls except 29 of one, 28 of another, and 10 of the last one. Since we have 80 blue, 40 red,\n    # and 30 white, we want to take out 80 - 29 (51) blue balls and 40 - 28 (12) red balls to be sure that\n    # we are left with white balls. Then we take 10 more balls to get the specific amount we need.\n\n    # The 10 white balls must be taken out first to get to the 10-out-of-30 white balls left in the bag.\n    # We perform the largest removals last to ensure we meet the requirement.\n    balls_needed = (white - 10) + (red - 28) + (blue - 29)\n    return balls_needed\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Using the Pigeonhole Principle, there are 13 numbers and we want at least 3 cards with the same number.\n    # If we draw 3 cards each from a different number, that would be 3 * 12 = 36\n    # Drawing one more card guarantees we will have at least 3 cards with the same number.\n    return 36 + 1\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "from sympy import primerange\n\ndef solution():\n    prime_numbers = list(primerange(1, 21))\n    prime_count = len(prime_numbers)\n    total_numbers = 20\n    proportion = prime_count / total_numbers\n    return round(proportion, 2)\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    num1 = 3.2\n    num2 = 5.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_numbers = 8\n    mean_value = 8\n\n    total_sum_known_numbers = sum(known_numbers)\n    missing_number = mean_value * total_numbers - total_sum_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of lime solution transferred from each bottle\n    x = symbols('x')\n\n    # After transfer:\n    # Bottle A has (5 - x) Litres of solution and lime quantity = (5 - x) * 10%\n    # Bottle B has (3 + x) Litres of solution and lime quantity = (3 + x) * 20%\n\n    # After transfer, the concentration of lime in Bottle A is ((5 * 10%) - (x * 10%) + (x * 20%)) / (5 - x)\n    # After transfer, the concentration of lime in Bottle B is ((3 * 20%) - (x * 20%) + (x * 10%)) / (3 + x)\n\n    # Set the two concentrations equal to each other and solve for x\n    equation = Eq(((5 * 0.10) - (x * 0.10) + (x * 0.20)) / (5 - x),\n                  ((3 * 0.20) - (x * 0.20) + (x * 0.10)) / (3 + x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51  # Subtract the first term and add the last term to the series\n\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    # Check for the condition C in the middle of A and B\n    for i, student in enumerate(perm):\n        if student == 'C':\n            if not (('A' in perm[:i] and 'B' in perm[i+1:]) or ('B' in perm[:i] and 'A' in perm[i+1:])):\n                return False\n                \n    # Check for the condition D and E next to each other\n    DE_index = perm.index('D') \n    if not (DE_index > 0 and perm[DE_index - 1] == 'E') and not (DE_index < len(perm) - 1 and perm[DE_index + 1] == 'E'):\n        return False\n    \n    # Check for the condition F and G next to each other\n    FG_index = perm.index('F')\n    if not (FG_index > 0 and perm[FG_index - 1] == 'G') and not (FG_index < len(perm) - 1 and perm[FG_index + 1] == 'G'):\n        return False\n\n    return True\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n    count = 0\n    for perm in permutations(students):\n        if count_valid_permutations(perm):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            prices.add(notebook + calendar)\n    \n    ans = len(prices)\n    return ans\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    # Calculate the minimum number of rows needed to fit all students\n    rows_needed = -(-students // tables_per_row)\n\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # Initialize the total sum and the multiplier for each term.\n    total_sum = 0\n    multiplier = 1\n\n    # Add each term to the total sum.\n    for i in range(1, 124):\n        # The term structure switches from an integer to a string to ensure that the trailing '123's are accounted for.\n        term = int('123' * i)\n        total_sum += term\n        multiplier *= 10\n\n    # Find the hundreds digit by finding the remainder when dividing by 1000 (to get the last three digits)\n    # and then dividing by 100 (to isolate the hundreds digit).\n    hundreds_digit = (total_sum % 1000) // 100\n\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Original dimensions of the painting\n    original_length = 90\n    length_ratio = 5\n    breadth_ratio = 2\n\n    # New length of the lego\n    new_length = original_length - 70.5\n\n    # Calculate the breadth based on the proportion and the new length\n    new_breadth = (breadth_ratio / length_ratio) * new_length\n\n    # The breadth of the lego has to be an integer value (maximum size in whole lego units)\n    max_breadth = int(new_breadth)\n\n    return max_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]\n    brother_total = sum(zoey_coins) // 2\n\n    for coin in zoey_coins:\n        if sum(zoey_coins) - coin == 2 * brother_total:\n            return coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    both = (like_bananas + like_apples) - total_people\n\n    return both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan reached the finish line, so he ran 200m\n    jaan_speed = 8  # Jaan's speed in m/s\n    jaan_time = jaan_distance / jaan_speed  # Time taken by Jaan to finish the race\n\n    kane_distance = jaan_distance - 12.5  # Kane was 12.5m behind Jaan\n    kane_speed = kane_distance / jaan_time  # Kane's speed\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher_value = 1.10  # 110p is £1.10\n\n    total_price = cake_price + milk_price\n    actual_payment = total_price - voucher_value\n\n    return actual_payment\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1.25\n    overtime_rate = normal_rate * overtime_multiplier\n    normal_hours = 8\n    total_hours = 10\n    overtime_hours = total_hours - normal_hours\n    \n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n    \n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Convert time to minutes\n    time_john_raj = 72  # 1 hr 12 min in minutes\n    time_raj_peter = 90  # 1 hr 30 min in minutes\n    time_all = 60  # together in minutes\n\n    # Define unknowns\n    j, r, p = symbols('j r p')\n    \n    # Equations based on work done\n    equation1 = Eq(1/j + 1/r, 1/time_john_raj)\n    equation2 = Eq(1/r + 1/p, 1/time_raj_peter)\n    equation3 = Eq(1/j + 1/r + 1/p, 1/time_all)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (j, r, p))\n\n    # Time Raj takes to finish the job by himself in minutes\n    return solutions[r]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    num_of_repeats = 99 // 9  # Each repeat contributes 9 digits\n    remainder_single = 928 % 9\n    total_remainder = num_of_repeats * remainder_single\n    ans = total_remainder % 9\n    return ans\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    expression = 1 / (1 + 1 / (2 + 1 / (3 + 1 / x)))\n    equation = Eq(expression, 30 / 43)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elder, younger = symbols('elder younger')\n    \n    # current ages sum up to 42\n    equation1 = Eq(elder + younger, 42)\n    \n    # \"a few years ago\" translates to subtracting the same unknown amount from both ages,\n    # let's call this unknown number \"diff\" and create our equations based on the description.\n    diff = symbols('diff')\n\n    # when the elder brother was at the current age of the younger brother\n    # the younger brother was exactly half the elder brother's current age\n    # elder - diff = younger\n    # younger - diff = elder / 2\n    equation2 = Eq(elder - diff, younger)\n    equation3 = Eq(younger - diff, elder/2)\n\n    # use solve to get the solution of the equations\n    solutions = solve((equation1, equation2, equation3), (elder, younger, diff))\n\n    # return elder brother's age\n    return solutions[elder]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure getting at least 3 balls of the same color, prepare for the worst scenario:\n    # taking 2 balls of each color without getting the third of the same color.\n    # After that, the next ball you take will definitely be the third ball of some color.\n    \n    # 2 balls from each color and 1 more to make sure we have 3 of the same color\n    max_balls_without_third_of_a_kind = (2 * 4) + 1\n\n    return max_balls_without_third_of_a_kind\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 mod 5, x ≡ 1 mod 6, and x ≡ 1 mod 7\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    return remainder\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for original_number in range(10, 100):\n        swapped_number = int(str(original_number)[1] + str(original_number)[0])\n        if swapped_number == (original_number // 3) + 3:\n            return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams in the league\n    n = symbols('n', integer=True)\n\n    # Each team plays each other twice, so there are n choose 2 matches doubled\n    # The total number of matches is given as 30\n    equation = Eq(n * (n - 1), 60)\n\n    # Solve for n\n    num_teams = solve(equation, n)\n    # Since the number of teams cannot be negative, we choose the positive solution\n    return [team for team in num_teams if team > 0][0]\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    apples_per_box = 14 / boxes_for_14kg\n    total_kg = 66.5\n    required_boxes = total_kg / apples_per_box\n\n    return int(required_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later for their ages to sum up to 40.\n    # Currently, the sum of their ages is 34.\n    # After x years, George's age will be (George's current age + x)\n    # After x years, Sister's age will be (Sister's current age + x)\n    # The sum of their ages after x years will be 40.\n    \n    # We have the equation:\n    # (George's current age + x) + (Sister's current age + x) = 40\n    \n    # Since we know that George's current age + Sister's current age = 34,\n    # we can substitute this value into the equation:\n    # 34 + 2x = 40\n    \n    # Solving for x:\n    x = (40 - 34) / 2\n    \n    return int(x)\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbol for the unknown\n    length_of_rope = symbols('length_of_rope')\n\n    # Equation for the situation where 10 turns leave 3 meters\n    equation1 = Eq(10 * length_of_rope + 3, 0)\n    \n    # Equation for the situation where 12 turns lack 3 meters\n    equation2 = Eq(12 * length_of_rope - 3, 0)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (length_of_rope))\n\n    # Calculating how many meters of rope are left after 8 turns\n    length_left_after_8_turns = 8 * solutions[length_of_rope] + 3\n\n    return length_left_after_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # Using the Pigeonhole Principle,\n    # If we have (number_of_countries - 1) * 4 participants,\n    # then it's possible that each country could have 4 participants and no country has 5.\n    # So we add one more participant to ensure that at least one country has 5 participants.\n    \n    number_of_countries = 11\n    participants_per_country_before_ensuring_5 = 4\n    \n    # Minimum participants to ensure no country has more than 4\n    min_participants = (number_of_countries - 1) * participants_per_country_before_ensuring_5\n    \n    # Add one more participant to ensure at least one country has 5\n    min_participants += 1\n    \n    return min_participants\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    total = solutions[x] + solutions[y] + solutions[z]\n\n    return total\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    full_rows = students // tables_per_row\n    if students % tables_per_row != 0:\n        full_rows += 1\n    return full_rows\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A == 0:  # leading 0 in a number is not allowed\n            continue\n        if (A*1000 + B*100 + C*10 + D) + (A*100 + B*10 + C) == (D*1000 + C*100 + B*10 + A):\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n    \n    solutions = solve((equation1, equation2), (kitty, nora))\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    spent = (3/7) * total_money\n    not_spent = total_money - spent\n    difference_eq = Eq(spent - not_spent, 12)\n    \n    total_money_value = solve(difference_eq, total_money)[0]\n    spent_on_bag = (3/7) * total_money_value\n    \n    return spent_on_bag\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    original_number = symbols('original_number')\n\n    equation = Eq(2 * original_number + 6, 28)\n\n    solutions = solve(equation, original_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    num = 111\n    dots = 7\n    result = num - sum(range(1, dots))\n    return result\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    sum_squares = (1/6) * n * (n + 1) * (2*n + 1) * (5**2)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Given that the ages of the youngest three add up to 42 years,\n    # and the dwarfs were born in seven consecutive years, we can\n    # denote the ages of the dwarfs as x, x+1, x+2, ..., x+6\n    \n    # Sum of the ages of the youngest three would be:\n    # x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (age of the youngest dwarf)\n    \n    # Now we calculate the sum of the ages of the oldest three dwarfs:\n    # (x+4) + (x+5) + (x+6)\n    sum_oldest_three = (13+4) + (13+5) + (13+6)\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A + B + C, 659)\n    equation2 = Eq(A + B, 447)\n    equation3 = Eq(B + C, 335)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = stickers - 13 * pupils - 190\n    equation2 = stickers - 17 * pupils - 50\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    # Let x be the number of boys, so the number of girls will be x + 30\n    # According to the problem, x + (x + 30) = total_pupils\n    # Now we solve this equation for x\n    x = (total_pupils - 30) / 2\n    # Number of girls\n    girls = x + 30\n    return girls\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    original_trays = 7\n    original_mean = 13\n    additional_sausages = 21\n\n    total_original_sausages = original_trays * original_mean\n    total_sausages = total_original_sausages + additional_sausages\n    total_trays = original_trays + 1\n\n    new_mean = total_sausages / total_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(0, 10):\n            for units_digit in range(0, 10):\n                if hundreds_digit > tens_digit < units_digit and hundreds_digit != units_digit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of files and storybooks\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    # Create equations based on the given information\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    # Solve the system of equations for file_cost and storybook_cost\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    # Calculate the total cost of 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    train_length = 137\n    first_bridge_length = 263\n    first_bridge_cross_time = 20\n    second_bridge_cross_time = 27\n\n    # Calculate the speed of the train (speed is the same for both bridges)\n    speed = (first_bridge_length + train_length) / first_bridge_cross_time\n    \n    # Calculate the second bridge length\n    second_bridge_length = speed * second_bridge_cross_time - train_length\n    \n    return second_bridge_length\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    \n    average_money = (rani_money + brenda_money) / 2\n    money_to_give = brenda_money - average_money\n    \n    return money_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n    total_balls = 125\n    equation1 = Eq(blue + red, total_balls)\n    equation2 = Eq((2/5) * blue, (3/5) * red)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    more_blue = solutions[blue] - solutions[red]\n\n    return more_blue\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Factorial function for permutations\n    def perm(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Total ways without restriction\n    total_ways = perm(7, 3)\n    \n    # Since order matters as books and students are distinct, there are 3! ways to distribute the 3 books among 3 students\n    total_ways *= factorial(3)\n    \n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define x for the cost of one watch and y for the cost of one handbag\n    x, y = symbols('x y')\n\n    # Now we set up our equations based on the given information\n    equation1 = Eq(3*x + 5*y, 915)\n    equation2 = Eq(4*x + 2*y, 632)\n\n    # Let's solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # 2 such watches and 2 such handbags total cost\n    total_cost = 2 * solutions[x] + 2 * solutions[y]\n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    percent_discount = (discount / original_price) * 100\n\n    return percent_discount\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    mother_age_in_1996 = 40\n    age_difference = 2008 - 1996  # years between 1996 and 2008\n    mother_birth_year = 1996 - mother_age_in_1996\n\n    grandmother_age_when_mother_born = grandmother_age_in_2008 - (age_difference + mother_age_in_1996)\n    return grandmother_age_when_mother_born\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # We want to maximize the number of candies for the child who gets the most,\n    # while ensuring each child gets a different amount and at least one piece.\n    \n    # One efficient way to distribute is to start with giving each child one piece\n    # and then distribute the remaining candies starting from the child who has the least.\n\n    candies = 88\n    children = 8\n    \n    # give one candy to each child\n    candies -= children\n    \n    # minimum candies each child will receive, in increasing order\n    candy_distribution = [1] * children\n    \n    # next candy will be given to the 1st child (with least candies)\n    child_idx = 0\n    \n    # now distribute the remaining candies\n    while candies > 0:\n        # give one candy to the child with the current least amount,\n        # ensuring everyone gets a different amount\n        candy_distribution[child_idx] += 1\n        candies -= 1\n        # update the next child index in a round-robin fashion\n        child_idx = (child_idx + 1) % (children - 1)\n    \n    # sort the distribution to identify the maximum in the last position\n    candy_distribution.sort()\n    # return the value pertaining to the child with the most candies\n    return candy_distribution[-1]\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Let's denote the individuals as A, B, C, and D.\n\n    # A starts with the ball (first pass).\n    # There are 3 remaining individuals whom A can pass the ball (second pass).\n    # After the second pass, the individual who has the ball can pass it to 2 remaining individuals (third pass).\n    # Lastly, the only way for A to get the ball back is for the third holder to pass it back to A.\n\n    # The number of second-pass options is 3 (either B, C, or D)\n    # The number of third-pass options is 2 (either of the remaining two who didn't receive the second pass)\n\n    # Since the passing is done immediately, the passes must be distinct,\n    # so we don't count scenarios in which the ball is passed back to the previous holder.\n\n    # Total number of passing methods is the product of the options for the second and third passes:\n    \n    return 3 * 2\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of tokens Nicole and Eddy have\n    nicole, eddy = symbols('nicole eddy')\n\n    # Write down the system of equations according to the problem\n    equation1 = Eq(nicole, 3 * eddy)  # Nicole had thrice as many tokens as Eddy\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)  # After spending, they had 24 tokens left altogether\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    # Return the number of tokens Nicole had at first\n    return solutions[nicole]\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n\n    # Total number of people\n    total_people = 8\n\n    # Treat A and B as a single unit as they want to stand together.\n    # There are (total_people - 1) units now.\n    units = total_people - 1\n\n    # Each unit (including the A&B unit) can be arranged in factorial of units ways.\n    unit_arrangements = math.factorial(units)\n\n    # A and B can be arranged in 2! ways within their unit.\n    AB_arrangements = math.factorial(2)\n\n    # Now we need to subtract the cases where C and D are next to each other\n    # When considering C and D, treat them as a single unit. So now we have (units - 1) units.\n    units_with_CD = units - 1\n\n    # These (units - 1) units can be arranged in factorial of (units - 1) ways.\n    units_with_CD_arrangements = math.factorial(units_with_CD)\n\n    # C and D can be arranged in 2! ways within their unit.\n    CD_arrangements = math.factorial(2)\n\n    # Now calculate the total arrangements\n    total_arrangements = unit_arrangements * AB_arrangements\n\n    # Calculate arrangements where C and D are together\n    together_arrangements = units_with_CD_arrangements * AB_arrangements * CD_arrangements\n    \n    # Subtract the cases where C and D are together from the total arrangements\n    final_arrangements = total_arrangements - together_arrangements\n\n    return final_arrangements\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    # Amount of salt in Leroy's solution (in grams)\n    salt_in_leroy_solution = 200 * 0.35\n    # Amount of salt in Lenny's solution (in grams)\n    salt_in_lenny_solution = 300 * 0.50\n    # Total amount of salt in the mixed solution (in grams)\n    total_salt = salt_in_leroy_solution + salt_in_lenny_solution\n    # Total weight of the mixed solution (in grams)\n    total_solution = 200 + 300\n    # Concentration of the resulting solution\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    # Let's denote the candy Mike eats as 'm' and the candy Valeria eats as 'v'.\n    # According to Valeria, if both eat the same amount of candy, Mike and Valeria will have 6 and 22 pieces left respectively.\n    # So, before eating, Mike had (m + 6) candies, and Valeria had (v + 22) candies.\n    # The total number of candies they have is 36, so we have the equation: (m + 6) + (v + 22) = 36.\n\n    # Now, since they eat the same amount of candy, we can say that m = v.\n    # We then have two equations with two variables:\n    # 1) m + v = 36 - 6 - 22\n    # 2) m = v\n\n    # From equation 1, we get:\n    total_candies_minus_eaten = 36 - 6 - 22\n\n    # From equation 2 and with the result of equation 1, we get:\n    # 2 * m = total_candies_minus_eaten\n    # m = total_candies_minus_eaten / 2\n    mike_candies = total_candies_minus_eaten / 2\n\n    # Knowing that Valeria has 22 candies more than what she eats,\n    # we can determine how many candies Valeria has now:\n    valeria_candies = mike_candies + 22\n\n    return int(valeria_candies)\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    # Since the concentration of the sugar solution is 35%,\n    # it means that 35% of the total solution is sugar.\n    total_solution_weight = 300  # in grams\n    sugar_weight = 0.35 * total_solution_weight  # in grams\n\n    # Since the weight of the sugar solution is the sum of the sugar and water weights,\n    # the weight of the water is the difference between the total weight and the sugar weight.\n    water_weight = total_solution_weight - sugar_weight  # in grams\n\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    power_12 = 12**50\n    k = power_12**(1/75)\n    ans = int(k) - 1  # Subtract 1 to ensure k is a whole number and the inequality holds\n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    return 133 + 34 - 25\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def Psi(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    return Psi(Psi(14, 13), 12)\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 20))\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    total_avg = 89\n    girls_avg = 88\n    boys_avg = 91\n\n    # Let's denote the number of girls as 'g' and the number of boys as 'b'.\n    # We have two equations:\n    # 1) g + b = total_students (which is 36)\n    # 2) girls_avg * g + boys_avg * b = total_avg * total_students\n\n    # From the first equation, we have:\n    # b = total_students - g\n\n    # Substitute 'b' in the second equation:\n    # girls_avg * g + boys_avg * (total_students - g) = total_avg * total_students\n    # Expand and isolate 'g':\n    g = ((boys_avg - total_avg) * total_students) / (boys_avg - girls_avg)\n\n    return int(g)\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each type of animal\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Total number of legs for cats, dogs and rabbit\n    total_legs = (2 * legs_per_cat) + (2 * legs_per_dog) + (1 * legs_per_rabbit)\n\n    # Remaining legs for birds\n    remaining_legs = 28 - total_legs\n\n    # Number of birds\n    num_birds = remaining_legs // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_per_floor = 12 / 4  # time to walk between each floor (first to fifth is 4 flights)\n    flights_in_30_min = 30 / time_per_floor\n    return int(flights_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Number of hours it takes for 5 people to paint one fence\n    hours_per_fence = 6\n\n    # Desired time to paint the longer fence, which is twice as long\n    desired_time = 5\n\n    # Since the neighbour's fence is twice as long, it would take the same 5 people,\n    # 12 hours (twice the time) to paint it.\n    time_for_double_fence = hours_per_fence * 2\n\n    # We need to find the number of people required to do that work in less than 5 hours.\n    # Using the unitary method, if 5 people take 12 hours, then to reduce the time taken,\n    # we proportionally increase the number of people.\n    \n    # people * hours = constant (as the work done is the same)\n    # 5 people * 12 hours = people_needed * 5 hours\n    # people_needed = (5 * 12) / 5\n\n    people_needed = (5 * time_for_double_fence) // desired_time\n\n    # Because we need to complete the work in less than 5 hours, we need to check\n    # if rounding down requires us to add an additional person.\n    if (5 * time_for_double_fence) % desired_time != 0:\n        people_needed += 1\n\n    return people_needed\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_for_50_cookies = 8\n    cookies_made = 50\n    butter_available = 21.6\n\n    cookies_can_make = (butter_available * cookies_made) / butter_for_50_cookies\n\n    return int(cookies_can_make)\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    N = int(\"12345654321\", 8)\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    handbag, wallet, belt = symbols('handbag wallet belt')\n    \n    # Handbag costs $300 more than the wallet\n    equation1 = Eq(handbag, wallet + 300)\n    # Wallet costs $54 more than the belt\n    equation2 = Eq(wallet, belt + 54)\n    # The sum of the prices of handbag, wallet, and belt is $840\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    # Solving the equations for belt\n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    return 96 // 3\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Combined age of the two cats three years ago\n    combined_age_three_years_ago = 7\n\n    # Each year, each of the two cats ages by one year\n    # Therefore, in three years, the combined age would increase by 3 years * 2 cats\n    combined_age_now = combined_age_three_years_ago + (3 * 2)\n\n    # In four more years, the combined age would again increase by 4 years * 2 cats\n    combined_age_in_four_years = combined_age_now + (4 * 2)\n\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = n * (n + 1) * (2*n + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    import math\n\n    num = 2016\n    factors = set()\n\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n\n    perfect_squares = [f for f in factors if math.isqrt(f) ** 2 == f]\n\n    return len(perfect_squares)\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    n1 = (60 // 3) + 1  # smallest number\n    return n1 + 1  # largest number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A == 0 or C == 0:\n            continue\n        if (100 * A + 10 * B + A) + (100 * C + 10 * D + C) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Annabella can take out all shirts of other colors before getting a yellow one for sure.\n    # Number of orange, pink, and brown shirts\n    non_yellow = 6 + 4 + 12\n    \n    # To guarantee she gets at least 1 yellow shirt, she must take out all non-yellow shirts\n    # plus one more shirt which will then surely be yellow.\n    ans = non_yellow + 1\n\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs = -(-total_pens_needed // 8)  # Using ceiling division to get the whole number of packs\n\n    return packs\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    numbers = [9.8, 99.8, 199.8, 2999.8, 39999.8, 1]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(6 * x, 2 - (3 * x - 16))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    sequence = [94, 80, 73, 66]\n    differences = [sequence[i] - sequence[i + 1] for i in range(len(sequence) - 1)]\n    next_difference = differences[-1] - (differences[-2] - differences[-1])\n    missing_number = sequence[0] - next_difference\n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    # 3 big pails + 4 small pails = 68 litres\n    equation1 = Eq(3 * big + 4 * small, 68)\n\n    # 4 big pails + 2 small pails = 64 litres\n    equation2 = Eq(4 * big + 2 * small, 64)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[big]\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The problem can be formalized using the Chinese Remainder Theorem as follows:\n    # x = 1 mod 2\n    # x = 1 mod 3\n    # x = 1 mod 4\n    # x = 1 mod 6\n    # x = 0 mod 7\n    # We are looking for the smallest x that satisfies all these congruences.\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n\n    total_wine_glass_ml = 25 * wine_glass_ml\n    total_tumbler_ml = 12 * tumbler_ml\n\n    total_ml = total_wine_glass_ml + total_tumbler_ml\n    ml_per_carton = 1000\n\n    cartons_needed = total_ml / ml_per_carton\n\n    return int(cartons_needed) if cartons_needed == int(cartons_needed) else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the initial quantities of avocados, peaches, and lemons\n    a, p, l = symbols('a p l')\n    \n    # Given the initial ratios\n    initial_ratio_avocado_to_peaches = Eq(a / p, 2 / 9)\n    initial_ratio_peaches_to_lemons = Eq(p / l, 9 / 8)\n\n    # After selling some fruits, the new ratio of peaches to lemons\n    new_ratio_peaches_to_lemons = Eq((p - 12) / (l - 60), 6 / 5)\n\n    # System of equations derived from the problem\n    equations = (\n        initial_ratio_avocado_to_peaches,\n        initial_ratio_peaches_to_lemons,\n        new_ratio_peaches_to_lemons\n    )\n\n    # Solve the system of equations\n    solutions = solve(equations, (a, p, l))\n\n    # Calculate the total number of avocados, peaches, and lemons left\n    total_left = solutions[a] - 52 + solutions[p] - 12 + solutions[l] - 60\n\n    return total_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_front = 9\n\n    position_end = total_people - position_front + 1\n\n    return position_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # We can find the last digit of a large power by looking at the pattern of the last digits of lower powers.\n    # For the base 2, the pattern of last digits for powers is: 2, 4, 8, 6 and repeats every 4.\n    # Since 859433 is 1 more than a multiple of 4 (859432 % 4 == 0), the last digit is the first in the repeat cycle.\n\n    last_digit = 2 ** (859433 % 4)\n    return last_digit % 10\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count_facing = 0\n    for i in range(1, 61):\n        if i % 3 != 0 and i % 5 != 0:\n            count_facing += 1\n        elif i % 3 == 0 and i % 5 == 0:\n            count_facing += 1\n    return count_facing\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm, symbols, solve\n    from sympy.core.numbers import One\n\n    peter = symbols('peter')\n    lcm_2_4_6 = lcm(2, 4, 6)\n    equation = (peter % lcm_2_4_6 == 1) & (peter % 7 == 5)\n    solution = solve(equation)\n\n    for sol in solution:\n        if isinstance(sol, One):\n            return int(sol)\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    digits = '7654321'  # Start with the largest possible digits\n    for length in range(len(digits), 0, -1):  # Try different lengths, starting from the max\n        for perm in permutations(digits, length):\n            num = int(''.join(perm))\n            divisors = [int(d) for d in perm]\n            if all(num % d == 0 for d in divisors):\n                return num\n    return None  # In case there is no such number, but there should be\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    max_length = 0\n    for i in range(1, 900, 2):\n        sum_seq = 0\n        length = 0\n        while sum_seq < 900:\n            sum_seq += i + length * 2\n            length += 1\n        if sum_seq == 900:\n            max_length = max(max_length, length)\n            \n    return max_length\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n\n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of sweets Jess and Jill have originally as x and y respectively.\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # After the trade, Jill gives eight sweets to Jess.\n    # Now Jill has y - 8 sweets, and Jess has x + 8 sweets.\n    # Jill has four sweets for every seven sweets Jess has after giving Jess eight sweets.\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Total sweets is the sum of Jess and Jill's sweets.\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    smallest_number = 120 + 1\n\n    while smallest_number % divisor != remainder:\n        smallest_number += 1\n        \n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let a, b, c represent the weights of Adam, Ben, Carl respectively.\n    # According to the given information:\n    # Adam and Ben weigh 102kg: a + b = 102\n    # Ben and Carl weigh 97kg: b + c = 97\n    # Adam and Carl weigh 93kg: a + c = 93\n    \n    # We can add all these equations together:\n    # (a + b) + (b + c) + (a + c) = 102 + 97 + 93\n    # 2*(a + b + c) = 292\n    # a + b + c = 292 / 2\n    \n    total_weight = (102 + 97 + 93) / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm = 2\n    height_total = height_m + (height_cm / 100)\n    return height_total\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * (1 + 25/100)\n    third_test = second_test * (1 - 20/100)\n    \n    total_score = first_test + second_test + third_test\n    \n    return total_score\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n    \n    mean_savings = (jan_savings + feb_savings + mar_savings) / 3\n    \n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Loop over every hour and minute of the day (24 hours, 60 minutes each)\n    for hour in range(24):\n        for minute in range(60):\n            # Count appearances of the digit '4'\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 2 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum((7 * i) ** 2 for i in range(1, 105 // 7 + 1))\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return sum_of_money\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(130, 151))  # 151 is exclusive\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Calculate the first multiple of 4 greater than or equal to 56\n    first_multiple = (56 + 3) // 4 * 4\n    # Calculate the last multiple of 4 less than or equal to 92\n    last_multiple = 92 // 4 * 4\n    # Calculate the count of multiples of 4 within the range\n    count = (last_multiple - first_multiple) // 4 + 1\n    \n    # Sam's mistakes:\n    # - He incorrectly states the number of multiples of 4 from 1 to 56 (14, not 4).\n    # - He incorrectly states the number of multiples of 4 from 1 to 92 (23, not 4).\n    # - His method of subtraction (23 - 14) to calculate the count is incorrect. It does not consider the inclusive range.\n    # Correcting the mistakes and providing the right count:\n    \n    return count\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    still_water_speed = 15\n    time_downstream = 8\n    speed_downstream = distance / time_downstream\n    stream_speed = speed_downstream - still_water_speed\n    speed_upstream = still_water_speed - stream_speed\n    time_upstream = distance / speed_upstream\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    num_select = 2\n    ans = comb(num_students, num_select)\n    return ans\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hippo, kangaroo = symbols('hippo kangaroo')\n    difference_in_daily_consumption = Eq(hippo - kangaroo, 45)\n    total_consumption_over_20_days = Eq(20 * hippo, 10 * 20 * kangaroo)\n\n    solutions = solve((difference_in_daily_consumption, total_consumption_over_20_days), (hippo, kangaroo))\n\n    total_hippo_consumption = solutions[hippo] * 20\n    return total_hippo_consumption\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    # Time when John waited for Tom is 3.15 PM\n    # Convert 3.15 PM to minutes since midnight\n    initial_time_minutes = 3 * 60 + 15\n    \n    # Time Tom took to arrive is 1 h 25 min\n    # Convert 1 h 25 min to minutes\n    time_taken_minutes = 1 * 60 + 25\n    \n    # Calculate the meeting time in minutes since midnight\n    meet_time_minutes = initial_time_minutes + time_taken_minutes\n    \n    # Convert minutes since midnight to hours and minutes\n    meet_hour = meet_time_minutes // 60\n    meet_minute = meet_time_minutes % 60\n    \n    # Adjust for the time being in PM\n    meet_hour_pm = 'PM' if meet_hour >= 12 else 'AM'\n    \n    # If the time is greater than 12, subtract 12 to convert to 12-hour format\n    meet_hour = meet_hour if meet_hour <= 12 else meet_hour - 12\n    \n    ans = f\"{meet_hour}:{meet_minute:02d} {meet_hour_pm}\"\n    return ans\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(x - 1, x) for x in range(2, 7)]\n    pencils, _ = solve_congruence(*congruences)\n    return pencils\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1 / i for j in range(1, 20) for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rate of A and B respectively\n    work_rate_a = 1 / 15\n    work_rate_b = 1 / 20\n\n    # Combined work for 2 days\n    work_done_2_days = (work_rate_a + work_rate_b) * 2\n\n    # Remaining work to be done\n    remaining_work = 1 - work_done_2_days\n\n    # A's days to finish the remaining work\n    remaining_days_a = remaining_work / work_rate_a\n\n    return remaining_days_a\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To ensure getting at least two balls of the same color, consider the worst-case scenario:\n    # Taking one green ball and one blue ball first - thus ensuring that the next ball will\n    # match either of the ones you already have.\n\n    # 1 green + 1 blue, next ball must match either green or blue\n    balls_needed = 1 + 1 + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    # To guarantee at least 11 students share the same zodiac sign,\n    # we use the pigeonhole principle: (n-1)*k + 1\n    # where n is the number of pigeonholes (zodiac signs) and k is the number of students we want to share.\n    num_students = (num_zodiac_signs - 1) * (11 - 1) + 1\n    return num_students\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(perm):\n    for i in range(len(perm)):\n        if perm[i] == \"D\" and \"E\" not in [perm[i-1], perm[(i+1)%7]]:\n            return False\n        if perm[i] == \"E\" and \"D\" not in [perm[i-1], perm[(i+1)%7]]:\n            return False\n        if perm[i] == \"F\" and \"G\" in [perm[i-1], perm[(i+1)%7]]:\n            return False\n        if perm[i] == \"G\" and \"F\" in [perm[i-1], perm[(i+1)%7]]:\n            return False\n    return True\n\ndef valid_A_between_B_and_C(perm):\n    index_A = perm.index(\"A\")\n    index_B = perm.index(\"B\")\n    index_C = perm.index(\"C\")\n    return index_B < index_A < index_C or index_C < index_A < index_B\n\ndef solution():\n    students = 'ABCDEFG'\n    total_count = 0\n    for perm in permutations(students):\n        if valid_A_between_B_and_C(perm) and count_valid_permutations(perm):\n            total_count += 1\n    return total_count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # take all yellow balls out, which are 5\n    yellow_balls = 5\n    # take 9 white balls out, because taking 10 would ensure 10 white balls\n    white_balls = 9\n    # we still need to take 1 more ball to make sure we have 10 balls of the same color\n    # so take one black ball, ensuring we have either:\n    # a) 10 white balls, if we took a white ball\n    # b) 10 black balls, if we took a black ball\n    # since we have 20 black balls, taking 1 guarantees one of the scenarios above\n    black_balls = 1\n    \n    # Sum the balls taken\n    ans = yellow_balls + white_balls + black_balls\n    return ans\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % total_children\n\n    # If the result is 0, it means the last child is the 9th child\n    return last_child if last_child != 0 else total_children\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # Using the formula for the sum of an arithmetic series: n/2 * (2a + (n - 1)d)\n    sum_series = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n    \n    return int(sum_series)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    # Florence eats spaghetti every 7 days and apple pie every 3 days\n    days_spaghetti = 7\n    days_apple_pie = 3\n\n    # Least common multiple will give us the number of days after which she will eat both on the same day\n    days_until_same_day = lcm(days_spaghetti, days_apple_pie)\n    \n    return days_until_same_day\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # Applying the Inclusion-Exclusion Principle\n    both_cats_and_dogs = (children_with_dogs + children_with_cats) - total_children\n\n    return both_cats_and_dogs\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # This seems to be the sum of an arithmetic progression.\n    # An arithmetic progression (AP) is defined by an initial term (a) and a common difference (d).\n    # The sum of the first n terms (S_n) of an AP is given by:\n    # S_n = n/2 * (2*a + (n - 1)*d)\n    # However, the question does not provide the necessary details directly (initial term, common difference, and the number of terms).\n    # Assuming the question refers to the sum of the first 240 natural numbers, we can calculate:\n    initial_term = 1   # The first term in the series of natural numbers\n    number_of_terms = 240 # The sequence ends at 240, so this is the number of terms\n    common_difference = 1 # The common difference for natural numbers is 1\n\n    # Apply the formula:\n    sum_of_numbers = (number_of_terms / 2) * (2 * initial_term + (number_of_terms - 1) * common_difference)\n    return int(sum_of_numbers)\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    ans = max(data) - min(data)\n    return ans\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of skirts be s and the number of shirts be s - 36\n    shirts, skirts = symbols('shirts skirts')\n\n    # After selling, Natalie had (1/3) of the shirts left\n    # And (1 - 5/6) = (1/6) of the skirts left\n    # The total that was left was 72\n    equation = Eq((2/3)*shirts + (5/6)*skirts, 72)\n\n    # The number of shirts was 36 less than the number of skirts\n    shirt_skirt_relation = Eq(shirts, skirts - 36)\n\n    # Solve the system of equations\n    solutions = solve((equation, shirt_skirt_relation), (shirts, skirts))\n\n    # Return the number of skirts\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    num_months = 3\n    total_saving = monthly_saving * num_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = total_length // cloak_length\n    cloaks_from_width = total_width // cloak_width\n\n    total_cloaks = cloaks_from_length * cloaks_from_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Calculate the time taken to travel to the place at 20 mph\n    distance = 120\n    speed_to_place = 20\n    time_to_place = distance / speed_to_place\n\n    # Calculate the total time for the round trip at an average speed of 30 mph\n    average_speed = 30\n    total_distance = 2 * distance\n    total_time = total_distance / average_speed\n\n    # Calculate the remaining time for the return trip\n    time_for_return_trip = total_time - time_to_place\n\n    # Calculate the speed necessary to return in the remaining time\n    speed_return_trip = distance / time_for_return_trip\n\n    return speed_return_trip\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    for biscuits in range(400, 801):\n        if biscuits % 5 == 1 and biscuits % 6 == 2 and biscuits % 11 == 7:\n            return biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    \n    for i in range(1, 35):\n        total_digits += len(str(i))\n    \n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut.\n    # To cut a rod into 5 pieces, we need to make 4 cuts.\n    # So, it would take 4 times as long to make 4 cuts.\n    # 4 cuts * 2 minutes per cut = 8 minutes\n    return 4 * 2\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    ans = 46 * 37\n    return ans\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    average_initial = 120\n    average_final = 110\n    total_numbers_initial = 3\n\n    sum_initial = average_initial * total_numbers_initial\n    total_numbers_final = total_numbers_initial + 1\n\n    sum_final = average_final * total_numbers_final\n    number_to_add = sum_final - sum_initial\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each person\n    sean, jovan, herman = symbols('sean jovan herman')\n\n    # Creating equation from the problem statement\n    # Jovan has twice as many marbles as Sean\n    equation1 = Eq(jovan, 2 * sean)\n    # Heman has 3 times as many marbles as Jovan\n    equation2 = Eq(herman, 3 * jovan)\n    # Jovan has 240 fewer marbles than Herman\n    equation3 = Eq(jovan, herman - 240)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, herman))\n\n    # Sum up the number of marbles they have altogether\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[herman]\n\n    # Return the result\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    # Given that:\n    # \\overline{14m}=8\\times \\overline{1m}-3\n    \n    # We can translate the above equation into a more conventional form:\n    # 140 + m = 8 * (10 + m) - 3\n    \n    # Now, we just solve for m:\n    m = (8 * 10 + 3 - 140) / (8 - 1)\n    \n    return int(m)\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_hay_for_1_horse_for_1_day = 12 * 15\n    total_days_for_20_horses = total_hay_for_1_horse_for_1_day / 20\n    return total_days_for_20_horses\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    last_term = 65\n\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    result = 301 + 303 + 305 - 9\n    return result\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    common_factor = gcd(gcd(6, 9), 12)\n    return common_factor\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    companies = 4\n    days = 5\n\n    length_per_company_day = total_length / (companies * days)\n\n    return length_per_company_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoes_per_set = 5\n    shoe_set_price = 78\n    sock_price = 12\n    aliens = 1 + 5\n    legs_per_alien = 5\n    total_legs = aliens * legs_per_alien\n\n    total_shoe_sets = total_legs // shoes_per_set\n    if total_legs % shoes_per_set != 0:\n        total_shoe_sets += 1\n\n    total_shoe_cost = total_shoe_sets * shoe_set_price\n    total_sock_cost = total_legs * sock_price\n\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from sympy.functions.combinatorial.numbers import nT\n    # There are 3 kids and 13 oranges. Using the stars and bars method (n+k-1 choose k-1):\n    # \"n\" is the number of oranges\n    # \"k\" is the number of kids\n    n = 13\n    k = 3\n    return nT(n + k - 1, k - 1)\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Let the original number be ABCD (where A, B, C, and D are digits)\n    # The new number, with the last digit moved to the first place is DABC\n    # Given DABC - ABCD = 5877\n    # We can write the equation as:\n    # 1000*D + 100*A + 10*B + C - (1000*A + 100*B + 10*C + D) = 5877\n    # 999*D - 999*A + 90*B - 9*C = 5877\n    # 111*(9*D - 9*A) + 10*(9*B - C) = 5877\n    # 111*(D - A) + 10*(9*B - C) = 5877\n    \n    # We can see that 111*(D-A) must be less than 5877 and also it must be a multiple of 111.\n    # We can start checking multiples of 111 until it crosses 5877, remaining part (modulo 10), must be equal to (9*B - C)\n\n    for i in range(0, 5877, 111):\n        if (5877 - i) % 10 == 0:\n            # 111*(D - A) part is found\n            DA_part = i\n            # 10*(9*B - C) part is then\n            BC_part = 5877 - DA_part\n            # Since (9*B - C) is a single digit (B and C are single digits),\n            # 10*(9*B - C) should be less than 1000\n            if 0 <= BC_part < 1000:\n                # We find A and D\n                A = DA_part // 111\n                D = A + (DA_part // 111)\n                # We need to check if A and D are valid digits (0-9)\n                if 0 <= A < 10 and 0 <= D < 10:\n                    # Now we solve for B and C from 10*(9*B - C)\n                    for B in range(10):\n                        for C in range(10):\n                            if (9 * B - C) == BC_part // 10:\n                                # We found valid B and C, let's return the original number ABCD\n                                return A * 1000 + B * 100 + C * 10 + D\n    # If no solution found\n    return None\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the number of $0.50 cookies that David has\n    # Let jf be the number of $0.50 cookies that Jeremy has\n    # Let jt be the number of $0.10 cookies that Jeremy has\n    d, jf, jt = symbols('d jf jt')\n    \n    # Create the equations based on the information given\n    equation1 = Eq(d, 0.50)  # David's cookies cost\n    equation2 = Eq(jf, 3/5 * jt)  # Relation between $0.50 and $0.10 cookies of Jeremy\n    equation3 = Eq(jt, jf + 60)  # There are 60 fewer $0.10 cookies than $0.50 cookies\n\n    # The cost of David's $0.50 cookies is three times the cost of Jeremy's cookies\n    # Since David only has one $0.50 cookie, the cost of Jeremy's $0.50 cookies ($jf) must be one-third the value of David's cookie\n    equation4 = Eq(0.5/3, 0.5 * jf)  # The value of Jeremy's $0.50 cookies\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (d, jf, jt))\n    \n    # Calculate the amount that Jeremy's cookies are worth\n    worth_of_jeremy_cookies = solutions[jf] * 0.50 + solutions[jt] * 0.10\n\n    return worth_of_jeremy_cookies\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    cards = [6, 12, 35, 175, 245, 300]\n    card_products = {tuple(sorted(combo)): card1 * card2 for combo in combinations(cards, 2)}\n    for combo_candice in combinations(cards, 3):\n        product_candice = combo_candice[0] * combo_candice[1] * combo_candice[2]\n        for combo_candy, product_candy in card_products.items():\n            if product_candy == product_candice and not set(combo_candy).intersection(combo_candice):\n                all_picked_cards = set(combo_candy + combo_candice)\n                return next(card for card in cards if card not in all_picked_cards)\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [x for x in possible_totals if (x - 4) % 7 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_first_fifth = 20  # The distance between the first and fifth tree\n\n    # The distance between the trees is the distance between the first and fifth trees divided by 4 (because there are 4 intervals between 5 trees)\n    distance_between_trees = distance_first_fifth / 4\n\n    # The total number of intervals is the road length divided by the distance between trees\n    num_intervals = 200 / distance_between_trees\n\n    # The number of trees is the number of intervals plus 1 (because there is a tree at both ends of each interval)\n    num_trees = num_intervals + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12\n    rate_B = 1 / 8\n    combined_rate = rate_A + rate_B\n    time_half_full = (1 / 2) / combined_rate\n    return time_half_full\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Original expression\n    # mistake circled = 36 ÷ 6 × 21 × 7\n    original_answer = (36 * 21) / (6 * 7)\n    \n    # Correct working after spotting the mistake - applying parentheses to maintain the correct order of operations\n    correct_working = (36 / 6) * (21 / 7) * 21 * 7\n    \n    # Return the correct answer\n    ans = correct_working\n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Let n be the number of boys on each side of the initial square array\n    # Then n^2 is the total number of boys in the initial square array\n    # After 17 girls join, the square array has (n+1) on each side\n    # So the total number in the larger square array is (n+1)^2\n    # The difference between the larger and initial square is 17 (the number of girls)\n    # Therefore, (n+1)^2 - n^2 = 17\n\n    # We need to solve for the value of n such that the difference equals 17\n    # Expanding (n+1)^2 gives us n^2 + 2n + 1\n    # The equation becomes n^2 + 2n + 1 - n^2 = 17\n    # Simplifying, we get 2n + 1 = 17\n    # Thus, 2n = 16 and n = 8 \n\n    # Once we find n, we can calculate the total number of boys = n^2\n    n = 8\n    total_boys = n**2\n\n    return total_boys\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_now = jane_age * 2\n    cousin_age_future = cousin_age_now + 8\n    return cousin_age_future\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n\n    total_people = ann_position + people_between + david_position_from_end\n\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    pages = 0\n    while count < 22:\n        pages += 1\n        for digit in str(pages):\n            if digit == '8':\n                count += 1\n    return pages\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n    third_number = sum_of_numbers - (first_number + second_number)\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Given the proportional equation n:8 = 9:12\n    # We can write this as a fraction n/8 = 9/12\n\n    # Cross-multiplication gives us n*12 = 8*9\n    n = (8 * 9) / 12\n\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    return 3280 / 1000\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To guarantee picking the desired numbers, we must consider the worst case scenario\n    # Worst case would be picking all but one of the other two colors before getting 29 of one color\n    max_blue = 80\n    max_red = 40\n    max_white = 30\n    \n    # Picking all but one of the red and white balls\n    pick_red_and_white = (max_red - 1) + (max_white - 1)\n    \n    # Then picking one more ball guarantees we have 29 of either blue, red or white\n    # This one more ball may be blue or may force a 29th ball of red or white\n    at_least_picks = pick_red_and_white + 1\n\n    return at_least_picks\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    day_progress = 3\n    night_regress = -1\n    total_distance = 9\n    net_progress_per_day = day_progress + night_regress\n    days = (total_distance - day_progress) // net_progress_per_day + 1\n    remaining_distance_after_last_day = (total_distance - day_progress) % net_progress_per_day\n    if remaining_distance_after_last_day > 0:\n        days += 1\n    return days\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # By inclusion-exclusion principle, math AND art = math + art - total\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.50 + 4 * x, 19)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_mountain_england = 978\n    height_mountain_world = 8848\n    difference = height_mountain_world - height_mountain_england\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import primerange\n    \n    for num in primerange(1, 50):\n        if num < 50 and num % 3 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts each person had initially\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Equations based on the problem statement\n    equation1 = Eq(alicia + beth + casey, 900)\n    equation2 = Eq(alicia - alicia / 2, beth - 60)\n    equation3 = Eq(beth - 60, casey - 3 * (alicia / 2))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n    \n    return solutions[alicia]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 2014! is a very large number, we do not need to compute the entire factorial.\n    # We only need to find the last digit. The last digit of the factorial will be zero\n    # as soon as we have factors 2 and 5, which together create a 10. Since there are\n    # many numbers between 1 and 2014 that are multiples of 2 and 5, the last digit of\n    # 2014! will definitely be 0.\n    \n    # The lowest number that will ensure the last digit is 0 is 5 because 5! will already\n    # have one 5 and one 2 (from 4) in the product, resulting in the last digit being 0.\n    # Thus, any factorial higher than 4! will end with a 0.\n    \n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*(x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    n = 2*2*3*8*5*5*5\n    count_zeros = 0\n    while n % 10 == 0:\n        count_zeros += 1\n        n //= 10\n    return count_zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    # Base fraction\n    numerator = 6\n    denominator = 20\n    \n    # Multiply the numerator by 5 to make it 30\n    multiplier = 30 // numerator\n    \n    # The new denominator to complete the calculation\n    ans = denominator * multiplier\n    \n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number we want to find\n    number = symbols('number')\n\n    # Define the equation based on the problem description\n    equation = Eq((((number + 6) * 3) / 8) - 8, 1)\n\n    # Solve the equation\n    sol = solve(equation, number)\n\n    # Since there's only one solution, return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    total_cookies = 100\n    days = 5\n    common_difference = 6\n    \n    # Using formula for sum of arithmetic series: n/2 * (2a + (n-1)d) = S\n    # where n is number of terms, a is the first term, d is the common difference, S is the sum.\n    # Here, S = total_cookies, n = days, d = common_difference.\n    # We have to find a (cookies on the first day).\n    # Solving the equation for a gives us a = (S/n - (n-1)d/2)\n    \n    first_day_cookies = (total_cookies/days) - (days-1)*common_difference/2\n    \n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    gave_to_sister = 35\n    gave_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - gave_to_sister - gave_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for n in range(1, 90):\n        if all([n % 5 == 1, n % 9 == 0, n + 1 in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89}]):\n            return n\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    total_questions = sum(solutions.values())\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    percentage = 18\n    total_amount = 250\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    letters = \"HAPPY\"\n    freq = {char: letters.count(char) for char in set(letters)}\n    numerator = factorial(len(letters))\n    denominator = 1\n    for key, value in freq.items():\n        denominator *= factorial(value)\n    return numerator // denominator\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = 2 * cost_per_roll_ali\n    cost_for_three_rolls_mya = 3 * cost_per_roll_mya\n\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            factors += 1\n        i += 1\n    return factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Peter and John are also in the line\n    total_people = people_in_front_of_peter + people_behind_john + 2\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    ans = 0.60 * 0.10 * 900\n    return ans\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # Noon, represented in 24-hour clock format\n    flight_duration = 4\n    st_petersburg_time_difference = 3  # Assuming St. Petersburg is 3 hours ahead of England\n\n    # Calculate the arrival time in England's time zone\n    arrival_time_england = (departure_time + flight_duration) % 24\n    \n    # Adjust for the time difference in St. Petersburg\n    arrival_time_st_petersburg = (arrival_time_england + st_petersburg_time_difference) % 24\n\n    return arrival_time_st_petersburg\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "from math import factorial\n\ndef solution():\n    num_women = 4\n    num_men = 4\n    \n    women_permutations = factorial(num_women)\n    men_permutations = factorial(num_men)\n    \n    # Since men and women want to stand alternatively, we can place all women and then men or all men and then women.\n    ans = women_permutations * men_permutations * 2\n    \n    return ans\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, crystal, ashley = symbols('justin crystal ashley')\n    equation1 = Eq(justin, crystal + 72)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n    total_pages_read = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages_read\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    boys_fraction = 2 / 5\n    total_children = girls / (1 - boys_fraction)\n    boys = total_children * boys_fraction\n    return int(boys)\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(50, 31, -2):\n        ans += i\n        ans -= i - 2\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors\n    # To ensure we have at least one pair of the same color\n    # We use the Pigeonhole Principle\n    max_single_socks = 3  # One of each color\n    socks_needed_for_a_pair = 1  # One more to ensure a pair\n    \n    # Total socks needed would be one more than one sock of each color\n    total_socks_needed = max_single_socks + socks_needed_for_a_pair\n    return total_socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    kg = 2.5\n    grams = kg * kg_to_g\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    boy_ratio = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n\n    # Let the total number of children be x\n    # Then the number of boys is (3/8)*x and number of girls is x - (3/8)*x = (5/8)*x\n    # Total sweets given out is the sum of sweets taken by boys and girls\n    # which is (3/8)*x*4 + (5/8)*x*12 = 360\n    \n    # Let's solve for x\n    x = (total_sweets) / (boy_ratio * sweets_per_boy + (1 - boy_ratio) * sweets_per_girl)\n    \n    # Then calculate the number of girls\n    num_girls = (1 - boy_ratio) * x\n    \n    return int(num_girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km / 5 cm\n    distance_on_map_cm = 12  # cm\n    distance_on_ground_km = distance_on_map_cm * scale_ratio  # km\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for N, O in permutations(range(10), 2):\n        if N != 0: \n            return N * 10 + O\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(100-i+1))\n    return product\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_km_per_hr = 7.2\n    time_seconds = 24\n\n    # Convert speed to meters per second (1 km = 1000 m, 1 hr = 3600 s)\n    speed_meters_per_sec = (speed_km_per_hr * 1000) / 3600\n\n    # Calculate distance in meters for the given time\n    distance_meters = speed_meters_per_sec * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n    \n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n    \n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # According to number theory, a composite number is a positive integer\n    # greater than 1 that is not a prime number. This means that a composite\n    # number must have factors other than 1 and itself.\n    # However, the number 1 itself is neither a prime nor a composite number.\n    # Hence, the statement made by Pip is not fully correct since it doesn't\n    # exclude the number 1, which is neither prime nor composite.\n    \n    # To verify the concept programmatically we will check if number 1 is\n    # considered a composite number as per the definition.\n    num = 1\n    # A composite number has at least one divisor other than 1 and itself.\n    # We try to find such a divisor, if we can't, it's not composite.\n    for i in range(2, num):\n        if num % i == 0:\n            # Found a divisor, hence must be a composite.\n            return False\n    # If no divisors were found and the number is greater than 1, it's prime.\n    # If the number is 1, it's neither prime nor composite.\n    if num > 1:\n        return False\n    else:\n        # This condition will confirm that 1 is neither prime nor composite.\n        return True\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let n be the number we want to find\n    n = symbols('n')\n\n    # Since the number gives a remainder of 5 when divided by 7, it can be\n    # represented as: n = 7q1 + 5\n    # Likewise for the other two conditions:\n    # n = 8q2 + 6\n    # n = 10q3 + 6\n    # where q1, q2, and q3 are the respective quotients of n divided by 7,\n    # 8, and 10.\n\n    # Let's define our quotients as symbols\n    q1, q2, q3 = symbols('q1 q2 q3')\n\n    # Define our equations based on the problem statement\n    eq1 = Eq(n, 7*q1 + 5)\n    eq2 = Eq(n, 8*q2 + 6)\n    eq3 = Eq(n, 10*q3 + 6)\n\n    # We also know that the sum of the quotients when dividing by 6, 7, and 8 is 265\n    eq4 = Eq(q1 + q2 + q3, 265)\n\n    # We will solve these equations for the quotients\n    solutions = solve((eq1, eq2, eq3, eq4), (n, q1, q2, q3))\n\n    # Return the solution for 'n'\n    return solutions[n]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    foreign_language_students = 54\n\n    both_classes = math_students + foreign_language_students - total_students\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(3, 2)\n    for i in range(3, 10):\n        result *= Fraction(i, i - 1)\n    \n    ans = result\n    return ans\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from fractions import Fraction\n\n    x = symbols('x')\n    equation = Eq((Fraction(1, 3) - Fraction(25, 100)) * x, 36)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    # Loop through all possible combinations where each group has different number\n    # of balloons and the total number of balloons is 12\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            if x2 != x1:\n                for x3 in range(1, 12):\n                    if x3 != x1 and x3 != x2:\n                        # Calculate the number of balloons in the last group\n                        x4 = 12 - (x1 + x2 + x3)\n                        # Check if x4 is different from the rest and greater than 0\n                        if x4 > 0 and x4 != x1 and x4 != x2 and x4 != x3:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    start = 40309\n    adder = 0\n    while not is_palindrome(start + adder):\n        adder += 1\n    return adder\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_keeps = 13\n    sweets_to_share = 42 - kasia_keeps\n    lucie_gets = sweets_to_share / 2\n    lucie_gives_to_joan = (2 / 7) * lucie_gets\n    lucie_keeps = lucie_gets - lucie_gives_to_joan\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    total_difference = 52\n    total_students = 0\n    for boys_edge in range(1, 100, 2):  # Given description, boys must occupy the even rows, starting with 1\n        girls_edge = boys_edge - 1  # Girls get the next internal square, hence boys_edge - 1\n        boys = boys_edge ** 2 if boys_edge > 0 else 0  # Total boys in the boys' layer\n        girls = girls_edge ** 2 if girls_edge > 0 else 0  # Total girls in the girls' layer\n        if boys - girls == total_difference:\n            total_students = boys + girls\n            break\n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Original amount is considered as 1 (whole pension for simplicity)\n    friday_expense = 1/4\n    left_after_friday = 1 - friday_expense\n    saturday_expense = left_after_friday / 3\n    left_after_saturday = left_after_friday - saturday_expense\n\n    return left_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the total litres of water needed to fill the fish tank\n    # According to the problem, we have two conditions:\n    # 1. x - 5 = 4 (if he uses a 5-litre pail, 4 litres will overflow, meaning the tank needs x-5 litres)\n    # 2. x + 3 = 4 * 3 (if he uses a 3-litre pail, he needs 4 more pails to fill the tank, \n    # meaning the tank needs x+3 litres using one 3-litre pail plus four more pails each of 3 litres)\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation1 = Eq(x - 5, 4)\n    equation2 = Eq(x + 3, 4 * 3)\n\n    # Calculate the solution using the equations\n    solution1 = solve(equation1, x)\n    solution2 = solve(equation2, x)\n\n    # Since the tank's capacity should be the same in both cases, we take the common solution\n    ans = solution1[0] if solution1[0] == solution2[0] else None\n\n    return ans\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n\n    adults = (total_people * ratio_adults) / ratio_sum\n\n    return adults\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    num_combinations = num_school_bags * num_pencil_boxes\n    return num_combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of apples as 'a' and the number of pears as 'p'.\n    a, p = symbols('a p')\n\n    # Original ratio of apples to pears is 3:4.\n    equation1 = Eq(a/p, 3/4)\n\n    # After replacing 36 pears by 36 apples, the number of apples becomes 1.5 times number of pears.\n    equation2 = Eq((a + 36)/(p - 36), 1.5)\n\n    # Solving the system of equations for a and p.\n    solutions = solve((equation1, equation2), (a, p))\n\n    # The solution for 'a' will give us the number of apples at first.\n    return solutions[a]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    repeated_seq = [6, 1, 2, 9, 0, 4, 3]\n    seq_length = len(repeated_seq)\n    full_repeats = 212 // seq_length\n    remaining_digits = 212 % seq_length\n\n    sum_full_repeats = sum(repeated_seq) * full_repeats\n    sum_remaining_digits = sum(repeated_seq[:remaining_digits])\n    ans = sum_full_repeats + sum_remaining_digits\n\n    return ans\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for i in range(1, 31):\n        if i * i + (i + 1) * 2 + 1 == 31:\n            ans = (i + 1) * (i + 1)\n            return ans\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    ans = (36 / 100) * 50\n    return ans\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    zero_count = 0\n    n = 1\n    while zero_count < 28:\n        factors_of_5 = 0\n        i = n\n        while i % 5 == 0:\n            factors_of_5 += 1\n            i /= 5\n        zero_count += factors_of_5\n        if zero_count < 28:\n            n += 1\n    return n\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    total_amount = 729\n    fraction = 2 / 3\n\n    result = total_amount * fraction\n\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    n_people = 12\n    handshakes = (n_people * (n_people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam_age = symbols('sam_age')\n\n    equation = Eq(sam_age + 4, 2 * (sam_age - 4))\n\n    sam_current_age = solve(equation, sam_age)\n\n    return sam_current_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # To use the pigeonhole principle, we need to find the worst case scenario.\n    # Daniel starts by picking one sock of each color, which does not give him any pair.\n    # There are 5 colors, so initially he can have 5 single socks without any pair.\n\n    # Next, at each turn, Daniel will pick one more sock.\n    # He needs to have two pairs of matching socks with the same color.\n\n    # Assuming the worst case, he might get single socks of each color first.\n    # He has already picked 5 socks initially and as the worst case, none of these make a pair.\n    # Since the green and white socks are identical, we do not have to consider additional picks of these colors for a new pair.\n    \n    # When the 6th sock is picked, because it has to be one of the existing colors, he gets one pair.\n    # But this pair could be of any of the 5 colors (which doesn't give us two pairs with the same color).\n\n    # So he might need to go through all the colors to get pairs, and finally pick an additional one to be sure to get 2 pairs of same color. \n    # Therefore, he will first pick 10 socks (5 + 5) and then one more to be sure he has two pairs of matching socks with the same colour. \n\n    # In the worst case scenario, Daniel can pick 9 yellow, 1 red, and then pick one red (to form a pair of reds),\n    # then 1 black, 1 green, 1 white, and finally one more of any of these colors to form the second pair of that color.\n\n    return 5 + 5 + 1  # first_five_single + next_four_single + one_for_pair\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09  # price per bottle of lemonade in pounds\n    chocolate_bar_price = 0.55  # price per chocolate bar in pounds\n    total_lemonade_cost = lemonade_price * 5\n    total_chocolate_bar_cost = chocolate_bar_price * 6\n    total_cost = total_lemonade_cost + total_chocolate_bar_cost\n    ten_pound_note = 10  # amount Lucy has in pounds\n    change = ten_pound_note - total_cost\n    return round(change, 2)  # rounding to 2 decimal places to denote pounds and pence\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    # Creating all permutations of the digits and converting them to integer numbers\n    permuted_numbers = [int(''.join(p)) for p in permutations(digits)]\n    # Filtering only the odd numbers from the permutations\n    odd_numbers = filter(lambda x: x % 2 != 0, permuted_numbers)\n    # Finding the smallest odd number from the filtered list\n    smallest_odd_number = min(odd_numbers)\n    return smallest_odd_number\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    consonants = \"RNBW\"  # Consonants in the word RAINBOW\n    vowels = \"AIO\"       # Vowels in the word RAINBOW\n    \n    # Number of ways to arrange 4 consonants (R, N, B, W)\n    consonant_arrangements = factorial(len(consonants))\n\n    # There are 5 possible positions for the 3 vowels when consonants are fixed as in _R_N_B_W_ (5 spots)\n    possible_vowel_positions = factorial(5) // factorial(5 - len(vowels))\n    \n    # Number of ways to arrange 3 vowels (A, I, O)\n    vowel_arrangements = factorial(len(vowels))\n    \n    # Total arrangement without vowel constraint (7 letters)\n    total_arrangements = factorial(len(consonants) + len(vowels))\n    \n    # Number of ways vowels can be together (treat vowels as a single unit)\n    vowels_together = possible_vowel_positions * vowel_arrangements\n    \n    # Answer is total arrangements minus the arrangements where vowels are together\n    ans = total_arrangements - consonant_arrangements * vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let the first term be 'a' and the common difference be 'd'\n    # The sum of the first n terms of an arithmetic progression is given by\n    # S_n = n/2 * (2a + (n - 1)d)\n    # According to the question:\n    # S_10 = 10/2 * (2a + 9d) = 20\n    # S_30 = 30/2 * (2a + 29d) = 90\n    \n    # Form equations based on the sums provided\n    # 5 * (2a + 9d) = 20  => 10a + 45d = 20 (1)\n    # 15 * (2a + 29d) = 90 => 30a + 435d = 90 (2)\n    \n    # Solve the linear equations for 'd'\n    # We can multiply equation (1) by 3 and subtract from equation (2)\n    # 30a + 45d * 3 = 60\n    # So, 30a + 435d - (30a + 135d) = 90 - 60\n    # => 300d = 30\n    # => d = 1\n    \n    # The common difference 'd' is 1\n    return 1\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(15 * x / 100 - 25 * (1000 - x) / 100, -50)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define our symbols, one for each animal.\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    # We have three equations based on the information given:\n    # 1. 40 chickens and goats combined\n    # 2. 3 times the number of chickens is 5 times the number of cows\n    # 3. 2 times the number of goats is 10 times the number of cows\n    equation1 = Eq(chickens + goats, 40)\n    equation2 = Eq(3 * chickens, 5 * cows)\n    equation3 = Eq(2 * goats, 10 * cows)\n\n    # Solving the equations for chickens, goats, and cows\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # Calculate total number of feet:\n    # Chickens have 2 feet, cows and goats have 4 feet\n    total_feet = 2 * solutions[chickens] + 4 * solutions[goats] + 4 * solutions[cows]\n\n    return total_feet\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    total_ratio = ratio_amy + ratio_penny\n\n    stickers_penny = (ratio_penny * total_stickers) / total_ratio\n\n    return int(stickers_penny)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmph = 3.6  # speed in kilometers per hour\n    time_seconds = 300  # time in seconds\n    \n    speed_mps = speed_kmph * (1000 / 3600)  # convert speed to meters per second\n    distance = speed_mps * time_seconds  # distance = speed * time\n    \n    return distance\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    nums = list(permutations([9, 0, 2, 3]))\n    min_diff = float('inf')\n    closest_num = None\n    \n    for num in nums:\n        current_num = int(''.join(map(str, num)))\n        current_diff = abs(2978 - current_num)\n        \n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_num = current_num\n    \n    return closest_num\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let's denote the total number of apples Jack has as 'total_apples'.\n    # According to the question:\n    # Jack sold 40 apples, which make up 4/7 of the apples he brought yesterday.\n    # This means he brought 7/4 * 40 apples yesterday.\n    apples_brought_yesterday = (7/4) * 40\n    \n    # According to the question:\n    # Yesterday he brought 1/2 of all apples he has.\n    # This means total_apples / 2 equals to apples_brought_yesterday.\n    total_apples = 2 * apples_brought_yesterday\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let's denote the four numbers as a, b, c, d\n    # From the question, we have the following equations based on average calculations:\n    # (a + b)/2 = 10\n    # (c + d)/2 = 22\n    # (a + d)/2 = 14\n    \n    # The average of the two middle numbers (b + c)/2 can be found by:\n    # (b + c)/2 = ((a + b) + (c + d) - (a + d))/2 = (10 * 2 + 22 * 2 - 14 * 2)/2\n    # Simplifying the above, we get:\n    # (b + c)/2 = (20 + 44 - 28)/2 = 36 / 2 = 18\n    \n    # So the average of the two middle numbers is 18\n    return 18\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # The maximum number of regions created by n lines can be found using\n    # the recursive formula: R(n) = R(n-1) + n\n    # where R(n) is the maximum number of regions created by n lines\n    # and R(0) = 1, R(1) = 2.\n    \n    # We can solve this iteratively instead of recursively for efficiency.\n    n = 10\n    regions = 1 # R(0)\n    \n    # Iterative computation of R(n)\n    for i in range(1, n + 1):\n        regions += i\n        \n    return regions\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors.append(i)\n            if len(factors) == 2:\n                break\n    return sum(factors)\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    initial_number = (result + 10) / 2\n    return initial_number\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_rows = ((last_term - first_term) // difference) + 1  # floor division to ensure integer result\n\n    # Sum of arithmetic series formula: (n/2)*(first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    A_and_B_average = 22\n    C = 19\n\n    # Total sum of A and B is average * 2\n    A_and_B_sum = A_and_B_average * 2\n  \n    # Adding C to the sum\n    total_sum = A_and_B_sum + C \n\n    # The average of A, B and C is the total sum divided by 3\n    average_ABC = total_sum / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    avg_chinese_english = 34\n    avg_english_math = 36\n    avg_chinese_math = 44\n    \n    sum_two_teachers = 34 + 36 + 44  # Sum of pairs of teachers' average ages\n    sum_three_teachers = sum_two_teachers - (2 * min(avg_chinese_english, avg_english_math, avg_chinese_math))\n    \n    ans = sum_three_teachers / 2  # Average age of 3 teachers\n    return ans\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n\n    remainder = total_coins % children\n\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    max_cakes_in_layer = (total_cakes + layers - 1) // layers\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    import math\n    \n    side_length = math.isqrt(23)\n    square_area = side_length ** 2\n    rope_cut_length = 23 - square_area\n\n    return rope_cut_length\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = ((21 + 1) * 7) - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        total += fractional_part\n    return total\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Arithmetic progression formula: sum = n/2 * (2a + (n-1)d)\n    # where n = number of terms, a = first term, d = common difference, sum = total sum\n    n = 10\n    a = 11\n    total_sum = 425\n    \n    # The sum of an arithmetic progression can be written as:\n    # sum = n/2 * (2a + (n-1)d)\n    # Which simplifies to:\n    # 2 * sum = n * (2a + (n-1)d)\n    # Hence, we can solve for d as follows:\n    # 2 * sum = n * (2a + (n-1)d)\n    # 2 * 425 = 10 * (2*11 + (10-1)d)\n    # 850 = 10 * (22 + 9d)\n    # 850 = 220 + 90d\n    # 850 - 220 = 90d\n    # 630 = 90d\n    d = 630 // 90\n\n    return d\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia, benson - 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Since the numbers are consecutive odd numbers,\n    # they form an arithmetic sequence with a common difference of 2.\n    # Let the first term be x, then the terms are x, x+2, x+4, ..., x+12 (7 terms)\n    # The sum of an arithmetic sequence is given by: sum = n/2 * (first_term + last_term)\n    # Here, n = 7 (since there are seven terms), sum = 357\n    # We have 7/2 * (x + (x+12)) = 357\n    # Simplify to find x (smallest of the seven numbers)\n    # 7x + 42 = 357\n    # 7x = 357 - 42\n    # x = (357 - 42) / 7\n    \n    x = (357 - 42) // 7\n    return x\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_numbers = factorial(5) # Total permutations for 5 items\n    repeat_1_permutations = factorial(2) # Permutations to arrange the two 1s\n    ans = total_numbers // repeat_1_permutations\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    denominator = sum(1 / i for i in range(1995, 2009))\n    A = 1 / denominator\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of a table and a chair\n    table, chair = symbols('table chair')\n\n    # Given that 5 tables and 12 chairs cost $720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    # Each table costs $25 more than each chair\n    equation2 = Eq(table, chair + 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    # We are interested in the cost of one table\n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(201, 401):\n        if (number % 3 == 2 and\n            number % 4 == 2 and\n            number % 5 == 2 and\n            number % 7 == 5):\n            return number\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n    martins_time = 9\n    carters_time = 13\n    \n    # The ratio of speeds is inverse of the ratio of times taken\n    equation = Eq(martin_speed / carter_speed, carters_time / martins_time)\n    \n    # Martin's speed is 20 meters per minute faster than Carter's speed\n    martin_speed_faster = Eq(martin_speed, carter_speed + 20)\n    \n    # Solve the equations\n    solutions = solve((equation, martin_speed_faster), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 > 0 and x3 <= 12 and x3 not in [x1, x2]:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the same combination\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number x such that:\n    # x % 5 == 1, x % 6 == 1, and x % 7 == 1.\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    ans = 2\n    return ans\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Let x be the time George takes to paint the room on his own.\n    # 1/9 is Fred's work rate, and 1/x is George's work rate.\n    # Their combined work rate is then 1/9 + 1/x.\n    # Since Fred and George together can paint a room in 6 hours,\n    # their combined work rate is 1/6.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/9 + 1/x, 1/6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    cloth_used = symbols('x')\n    cloth_left = total_cloth - cloth_used\n\n    return cloth_left\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    num_legs_cats = 2 * 4\n    num_legs_dogs = 2 * 4\n    num_legs_rabbit = 1 * 4\n    num_legs_birds = 2  # Assuming birds have 2 legs each\n\n    total_legs_cats_dogs_rabbits = num_legs_cats + num_legs_dogs + num_legs_rabbit\n    remaining_legs_for_birds = 28 - total_legs_cats_dogs_rabbits\n    \n    num_birds = remaining_legs_for_birds // num_legs_birds\n    return num_birds\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # Using the Pigeonhole Principle, we need to take out enough apples such that\n    # even if we try to avoid getting two of the same color, we are forced to at the next draw.\n    \n    # If we take out 14 red apples, there might still be no yellow apples taken.\n    # If we then proceed to take out 20 yellow apples, there might still be no red apples taken.\n    # So after 14 red and 20 yellow, we must take out one more to ensure we have at least two of the same color.\n    \n    min_apples = 14 + 20 + 1  # 14 red, 20 yellow, and 1 more to ensure the same color\n\n    return min_apples\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of red pens sold, and y be the initial number of red pens\n    x, y = symbols('x y')\n\n    # Initial ratio equation: y / (7y/3) = 3/7\n    # After selling equation: (y - x) / ((7y/3) - x) = 5/13\n    # We know (y - x) = 20\n    equation1 = Eq(y - x, 20)\n    equation2 = Eq((y - x) * 13, (7 * y / 3 - x) * 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    # Number of people entering the zoo\n    people_count = 4\n    # Number of entrances\n    entrances_count = 5\n\n    # Each person has the option to choose from all 5 entrances independently\n    # So, the ways for one person to enter is 5, and there's 4 people\n    ans = entrances_count ** people_count\n\n    return ans\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    increased_value = 10500\n    original_value = increased_value / 1.05\n    decreased_value = original_value * (1 - 0.05)\n    profit_or_loss = decreased_value - original_value\n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_35 = 200 // (5 * 7)\n\n    ans = count_5 + count_7 - count_35\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    number = 42\n    for i in range(11, 20):\n        if number % i == 0:\n            return i\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    target_average = 6\n    total_numbers = len(numbers) + 1  # including the missing number\n    sum_of_numbers = sum(numbers)\n    missing_number = target_average * total_numbers - sum_of_numbers\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for pen price and ruler price\n    pen_price, ruler_price = symbols('pen_price ruler_price')\n    \n    # Given conditions: Chuck bought 2 rulers and 9 pens for $21.60\n    eq1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    # A ruler costs $0.90 more than a pen\n    eq2 = Eq(ruler_price - pen_price, 0.90)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (ruler_price, pen_price))\n\n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = total_weight / bag_weight\n    return int(-(-num_bags // 1))  # Using ceiling division to ensure enough bags\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse operation 8: Add 50 to the result\n    result += 50\n    # Reverse operation 7: Subtract the day of birth (unknown yet)\n    # Reverse operation 6: Divide by 5\n    result /= 5\n    # Reverse operation 5: Add 20 to the result\n    result += 20\n    # Reverse operation 4: Divide by 5\n    result /= 5\n    # Reverse operation 3: Subtract 6 from the result\n    result -= 6\n    # Reverse operation 2: Divide by 4 to get the month\n    month = result // 4\n    # Find the day by inserting the month back into the formula\n    day = (1126 + 50) - ((month * 4 + 6) * 5 - 20) * 5\n    # Form birthday as MMDD\n    birthday = int(f\"{int(month):02d}{int(day):02d}\")\n    return birthday\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "from sympy import primerange\n\ndef solution():\n    # primes less than 50\n    primes = list(primerange(1, 50))\n    \n    for prime in primes:\n        # Check if the number meets the given clues\n        if prime % 3 == 2 and prime % 5 == 2:\n            ans = prime\n            return ans\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '6', '7', '8', '9']\n    for p in permutations(digits):\n        first_number = int(\"\".join(p[0:3]))\n        second_number = int(\"\".join(p[3:5]))  # Second number must have 2 digits because it's twice the first\n        third_number = int(\"\".join(p[5:7]))  # Third number must have 2 digits because it's four times the first\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    common_difference = 4\n    last_term = 400\n\n    # Calculate the number of terms in the first half of the sequence\n    n = int((last_term - first_term) / common_difference + 1)\n\n    # Sum of the first half of the arithmetic sequence\n    sum_first_half = (n / 2) * (first_term + last_term)\n\n    # Sum of the entire sequence (equal to twice the sum of the first half, minus the last term)\n    total_sum = 2 * sum_first_half - last_term\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    richards_money = 10\n\n    # Richard buys the initial cup\n    richards_money = richards_money - initial_cup_price\n    # Count the number of refills he can afford\n    number_of_refills = richards_money // refill_price\n\n    # Total cups of coke Richard can afford is the initial cup plus refills\n    total_cups = 1 + number_of_refills\n\n    return total_cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Calculate the total peaches eaten by one monkey in one day\n    daily_peach_per_monkey = 96 / (3 * 2)\n    \n    # Calculate the total peaches eaten by 5 monkeys in 4 days\n    total_peaches = daily_peach_per_monkey * 5 * 4\n\n    return int(total_peaches)\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n    \n    # We arrange groups first\n    group_arrangements = factorial(3)\n    \n    # Now, arrange the books within each group\n    story_arrangements = factorial(story_books)\n    comic_arrangements = factorial(comic_books)\n    science_arrangements = factorial(science_books)\n    \n    # Multiply the arrangements of the groups and the books within each group\n    total_arrangements = group_arrangements * story_arrangements * comic_arrangements * science_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_50k_tax = 0.06 * 50000\n\n    additional_income = 120000 - 50000\n    additional_tax = additional_income * (0.06 + T / 100)\n\n    total_tax = first_50k_tax + additional_tax\n\n    tax_equation = Eq(total_tax, 10000)\n\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    # Since each friend must get at least one ice-cream, we start by giving each one ice-cream.\n    # Then we need to distribute the remaining 2 ice-creams to any of the three friends.\n    # This is a problem of distributing identical items to distinct bins, which we can frame as a stars-and-bars problem.\n\n    # Number of remaining ice-creams to distribute\n    remaining_ice_creams = 2\n\n    # Number of friends (bins)\n    friends = 3\n\n    # Using the formula for combinations with repetitions: (n + k - 1) choose (k)\n    # where n is the number of items to distribute and k is the number of bins\n    from math import comb\n    ans = comb(remaining_ice_creams + friends - 1, remaining_ice_creams)\n\n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Calculating the total expenditure from January to March\n    jan_to_mar = 450 * 3\n    # Calculating the total expenditure from April to July\n    apr_to_jul = 350 * 4\n    # Given the total expenditure from August to October\n    aug_to_oct = 1250\n    # Calculating the total expenditure from November to December\n    nov_to_dec = 400 * 2\n\n    # Summing the total expenditures\n    total_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Calculating the average per month from January to December\n    average_per_month = total_spend / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    speed_walk = 40\n    speed_cycle = 60\n\n    # Assuming Sam travels some distance d to the library\n\n    # Time taken to walk to library = distance/speed_walk\n    # Time taken to cycle back = distance/speed_cycle\n\n    # Average speed = total distance / total time\n    # Here the total distance is 2 * distance (to library and back)\n    # Total time is the sum of time to go to library and time to return\n\n    # As the distance to the library is not given, we assume it to be 'd' and will cancel out in average speed\n\n    # Average speed = 2d / (d/speed_walk + d/speed_cycle)\n    # Average speed = 2 / (1/speed_walk + 1/speed_cycle)\n\n    average_speed = 2 / (1/speed_walk + 1/speed_cycle)\n\n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the amount of money Sophie's mother gave her.\n    # Each serving of ice cream costs (x - 0.30) / 3 (since she bought 3 servings and had 30 cents left).\n    # She is short of $2.30 for 5 servings, meaning she would need x + 2.30 to buy 5 servings, which costs (x + 2.30) / 5 each.\n    # So, we set up the equation (x - 0.30) / 3 = (x + 2.30) / 5 and solve for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x - 0.30) / 3, (x + 2.30) / 5)\n    solution = solve(equation, x)\n    return float(solution[0])\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n    solution = solve(equation, x)\n    return solution\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    total_bags = 25\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % total_bags == 0:\n            sweets_per_bag = total_sweets // total_bags\n            return sweets_per_bag\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n\n    # Solve for y when x = 3\n    solutions = solve(equation.subs(x, 3), y)\n\n    return \"inverse\", solutions[0]\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    odd_numbers = [int(''.join(p)) for p in permutations(digits) if int(p[-1]) % 2 != 0]\n    n = min(odd_numbers)\n    return n\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    quotient = 391 // 17\n    return quotient\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # You need to take out 7 green balls to ensure that you have at least one green ball\n    # (since all other 8 could be blue, and the 9th could be green)\n    # Then you'd need to take one more to ensure you have a second ball of the same color\n    return 7 + 1\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we start with is x\n    x = 1  # It can be any number, but for solving this we can just assume 1\n\n    # Follow the instructions step by step\n    x += 3  # Add 3\n    x *= 2  # Multiply by 2\n    x -= 2  # Take away 2\n    x += 10 # Add 10\n    x /= 2  # Divide by 2\n\n    # The final instruction:\n    # Take away the number you started with (which was 1)\n    # Since the procedure will lead to the same result irrespective of the number we chose initially\n    # We can generalize by subtracting x itself instead of the specific number 1\n    result = x - 1\n\n    return result\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let f represent the original number of Felicia's bracelets\n    f, j = symbols('f j')\n\n    # Janice had 96 bracelets at first\n    j = 96\n\n    # Felicia sells 3/5 of her bracelets, and Janice buys 2/5 of those.\n    felicia_sold = 3 * f / 5\n    janice_bought = 2 * felicia_sold / 5\n\n    # After selling, Felicia has 2/5 of her original bracelets left\n    felicia_left = f - felicia_sold\n\n    # Janice now has her original bracelets plus what she bought\n    janice_new_total = j + janice_bought\n\n    # The ratio of Felicia's bracelets to Janice's bracelets became 5:7\n    equation = Eq(felicia_left / janice_new_total, 5 / 7)\n\n    # Solve the equation\n    solutions = solve((equation), (f))\n\n    # Calculate number of bracelets Janice bought from Felicia\n    bracelets_bought = janice_bought.subs(f, solutions[0])\n\n    return bracelets_bought\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n    \n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * (5 / 3))\n    \n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(51, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # In the worst case, Annabella could take out all the shirts except for the yellow ones.\n    max_shirts_without_yellow = 6 + 4 + 12  # orange + pink + brown\n\n    # She has to take out one more shirt to be sure of getting a yellow one.\n    return max_shirts_without_yellow + 1\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "from math import lcm\n\ndef solution():\n    # Finding the least common multiple of 9, 10, and 15\n    students = lcm(9, 10, 15)\n    return students\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_packet_cost = 0.35\n    individual_total_cost = individual_packet_cost * 15\n\n    savings = individual_total_cost - multipack_cost\n\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    initial_deposit = 20000\n    interest_rate = 0.05\n    years = 11\n\n    total_amount = initial_deposit * (1 + interest_rate * years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4 + 3/4 + 3/4) - 1\n    missing_number = total * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    n = 20\n    d = 2\n    S = 560\n\n    # Formula for the sum of an arithmetic progression: S = n/2 * (2a + (n - 1) * d)\n    # where S is the sum, n is the number of terms, a is the first term, and d is the common difference.\n    # Rearrange the formula to solve for a, the first term:\n    # a = (S/n - (n - 1) * d) / 2\n\n    a = (S / n - (n - 1) * d) / 2\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    climb_distance = 3\n    slip_distance = 2\n    net_distance = climb_distance - slip_distance\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slip_distance\n\n    return days\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    first_four_days = 25 * 4\n    following_six_days = 40 * 6\n    last_five_days = 80\n    total_days = 4 + 6 + 5\n    total_pages = first_four_days + following_six_days + last_five_days\n    average_pages_per_day = total_pages / total_days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x be the original number of toys her brother had.\n    # After giving away some toys, Penny still has 14 toys and her brother has 12 toys.\n    # Before giving away toys, Penny had x + 10 toys.\n    # The number of toys given away by Penny to her brother is (x + 10) - 14.\n    # After receiving toys, the brother has x + ((x + 10) - 14) = 12 toys.\n    \n    # Setting up the equation based on the problem statement:\n    # x + ((x + 10) - 14) = 12\n    # Simplifying the equation:\n    # 2x - 4 = 12\n    # 2x = 12 + 4\n    # x = (12 + 4) / 2\n    # x = 16 / 2\n    # x = 8\n    \n    # So, the brother originally had 8 toys.\n    return 8\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_A = 14\n    birds_B = birds_A + 7\n    total_birds = birds_A + birds_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_age = 10 * tens + ones\n            interchanged_age = 10 * ones + tens + 1\n            if interchanged_age == original_age // 2:\n                return original_age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50  # number of terms\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # To be sure he has 4 cards of the same suit,\n    # Tom must draw at least 4 cards of each suit plus 1 extra card.\n    # Since there are 4 suits and we are guaranteed to have 4 cards of one suit\n    # after drawing 4 cards for each suit and 1 more, the answer is:\n    ans = (4 - 1) * 4 + 1\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    unsold_tickets_percentage = 100 - 60\n    total_tickets = 28 * 100 / unsold_tickets_percentage\n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hayden_original = 1420\n    mitchell_original = 505\n    spent = symbols('spent')\n\n    hayden_left = hayden_original - spent\n    mitchell_left = mitchell_original - spent\n\n    equation = Eq(hayden_left, 4 * mitchell_left)\n\n    spent_amount = solve(equation, spent)\n\n    return spent_amount[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    children_fraction = 1 - 3/7\n    boys_fraction = 3/8\n    girls_count = 45\n\n    # Calculate the total number of children using the number of girls and the fraction of girls.\n    children_equation = Eq((1 - boys_fraction) * children_fraction * total_people, girls_count)\n\n    total_people_solution = solve(children_equation, total_people)\n\n    return int(total_people_solution[0])\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Calculate total amount from two-dollar notes and fifty-cent coins\n    two_dollar_notes = 5 * 2\n    fifty_cents_coins = 7 * 0.50\n    total_amount = two_dollar_notes + fifty_cents_coins\n\n    # Subtract the price of the file\n    file_price = 11.95\n    money_left = total_amount - file_price\n\n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    total_sum = (n * (n + 1)) // 2\n    return total_sum\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n\n    total_sales = saturday_sales + sunday_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    daily_climb = 3\n    nightly_slide = 1\n    total_distance = 11\n    distance_covered = 0\n    day_count = 0\n\n    while distance_covered < total_distance:\n        day_count += 1\n        distance_covered += daily_climb\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= nightly_slide\n    \n    return day_count\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "from math import factorial\n\ndef solution():\n    total_pupils = 18\n    seats = 3\n    permutations = factorial(total_pupils) // factorial(total_pupils - seats)\n    return permutations\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = 2\n\n    # -1 because willow trees will be between the ginkgo trees, not after the last one\n    total_willow_trees = willow_trees_between * (ginkgo_trees - 1) \n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28  # Speed of the ship in still water\n    speed_of_current = 3       # Speed of the current\n    distance_upstream = 150    # Distance to travel upstream\n\n    # Effective speed upstream is the speed in still water minus the speed of the current\n    effective_speed_upstream = speed_in_still_water - speed_of_current\n\n    # Time required to travel upstream is distance divided by the effective speed\n    time_upstream = distance_upstream / effective_speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the amount of money each person has\n    andrew, brian, christopher = symbols('andrew brian christopher')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n    \n    # Calculate the total amount of money the boys have altogether\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n    \n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let A be the weight of Adam, B for Ben, and C for Carl\n    # We have the following equations based on the problem statement:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # To find the total weight (A + B + C), we can add all the equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n\n    # However, this counts each person's weight twice, so to get the correct total, we divide by 2:\n    total_weight = (102 + 97 + 93) // 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = ramen_cost * 6\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight_kg = 500 / 1000\n    cheese_cost_per_kg = 7.48\n    apple_cost_each = 0.12\n    yogurt_cost_each = 0.46\n    \n    total_cheese_cost = cheese_weight_kg * cheese_cost_per_kg\n    total_apple_cost = 8 * apple_cost_each\n    total_yogurt_cost = 2 * yogurt_cost_each\n    total_cost = total_cheese_cost + total_apple_cost + total_yogurt_cost\n    \n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the rates\n    andy_rate, zack_rate = symbols('andy_rate zack_rate')\n\n    # Zack can sell 150 aircrafts per hour\n    equation1 = Eq(zack_rate, 150)\n\n    # Together, Andy and Zack can sell all the aircrafts in 6 hours\n    # Total aircrafts / (Andy's rate + Zack's rate) = 6 hours\n    equation2 = Eq(1200 / (andy_rate + zack_rate), 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andy_rate, zack_rate))\n\n    # Calculate the time it would take for Andy to sell all the aircrafts by himself\n    # Time = Total aircrafts / Andy's rate\n    andy_time = 1200 / solutions[andy_rate]\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    n = 1\n    while True:\n        students = (n * 2 + 1) ** 2 - n ** 2 \n        teachers = n ** 2\n        if students - teachers == 80:\n            total_people = students + teachers\n            return total_people\n        n += 1\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    total = 400\n    alan_amount = 74\n    bilal_amount = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, total)\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_ratio = 2 + 7 + 6  # Total parts of the ratio\n    total_volume = 300       # Total volume of the drink in ml\n\n    # Calculate the volume of orange juice\n    orange_ratio = 7\n    orange_volume = (orange_ratio / total_ratio) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    initial_money = 20\n    saved_money = 1 * 7  # $1 everyday for one week\n    lent_money = 5\n    spent_money = 3\n\n    remaining_money = initial_money + saved_money - lent_money - spent_money\n\n    return remaining_money\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Using symbols to represent the amounts of money Steve, Mark, and Ryan have originally\n    S, M, R, meal = symbols('S M R meal')\n\n    # Equations based on the given conditions\n    eq1 = Eq(S, M + 40)  # Steve had $40 more than Mark\n    eq2 = Eq(S - meal, 3*(M - meal)/8)  # Ratio when Steve pays\n    eq3 = Eq(R - meal, 9*(M - meal)/8)  # Ratio when Steve pays\n    eq4 = Eq(S - meal, 5*(R - meal))  # Ratio when Ryan pays\n    eq5 = Eq(M - meal, 4*(R - meal))  # Ratio when Ryan pays\n    eq6 = Eq(S - meal, 10*(M - meal))  # Ratio when Mark pays\n    eq7 = Eq(R - meal, 9*(M - meal))  # Ratio when Mark pays\n\n    # Solving the equations for the meal cost\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (S, M, R, meal))\n\n    # Accessing the meal cost from the solutions dictionary\n    meal_cost = solutions[meal]\n\n    return meal_cost\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_to_mum = 10.50\n    remaining_after_repayment = total_money - money_to_mum\n    remaining_after_spending = remaining_after_repayment / 2\n    return remaining_after_spending\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors and their powers\n    factors = factorint(44000)\n    \n    # Initialize q as 1 (since multiplying by 1 has no effect)\n    q = 1\n\n    # Check each prime factor and its power to ensure the result is a cube\n    for prime, power in factors.items():\n        # Find how many more primes are needed to make the power a multiple of 3\n        # because a number is a cube if all prime factors have powers that are multiples of 3\n        q *= prime ** (3 - power % 3 if power % 3 != 0 else 0)\n\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')\n    equation1 = Eq(l, 2 * w)\n    equation2 = Eq(2 * l + 2 * w, 72)\n\n    solutions = solve((equation1, equation2), (l, w))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    ans = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    g = 9.81  # acceleration due to gravity in m/s^2\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # applied force in N\n\n    # The maximum possible force of static friction\n    max_friction_force = mass * g * coefficient_of_static_friction \n\n    # The force of static friction equals the applied force until it reaches the maximum possible value\n    static_friction_force = min(applied_force, max_friction_force)\n\n    return static_friction_force\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration * 100  # To get percentage\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    term_distance = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / term_distance\n\n    return common_difference\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the bigger number, y is the smaller number\n\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # Initialize the square and cube variables\n    square, cube = 1, 1\n    \n    # Search for the square and cube numbers\n    while True:\n        square += 1\n        sq = square ** 2\n        cube_root = round(sq**(1/3))\n        \n        if cube_root ** 3 == sq - 1:\n            return sq\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    for nina_buttons in range(13, 25):  # Nina has more than half of 24 buttons\n        james_buttons = 24 - nina_buttons\n        if nina_buttons - 6 == james_buttons + 6:\n            return nina_buttons\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30 - 9/20 + 7/12 - 1/3) * 6 * 7/13 * 9.1)\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_workers * total_hours)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    net_distance_per_day = climb_per_day - slide_per_night\n    current_distance = 0\n    day = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # According to the situation described in the question,\n    # there is a linear relationship between the number of bags used (x)\n    # and the tax charged (y). Such a relationship can be described by a\n    # linear equation of the form y = mx + c, where m is the slope and c\n    # is the y-intercept.\n    # Unfortunately, the actual situation and specific numbers were not\n    # provided in your description, and thus we cannot give specific values\n    # for m and c. However, the form of the equation will be as follows:\n    \n    # In the simplest form of a linear equation with one variable, \n    # we can say that y = mx + b, where m is the coefficient (slope) attached to x,\n    # and b is the constant term (y-intercept).\n    # Since we do not have the specific values, we can define m and b as symbols\n    # and represent the equation in symbolic form.\n    \n    from sympy import symbols, Eq\n    \n    x, y, m, b = symbols('x y m b')\n    equation = Eq(y, m*x + b)\n\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    cong = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*cong)\n\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    # Convert the fraction into a decimal\n    fraction_decimal = 8 / 100\n    number = 0.7\n\n    # Compare the decimal value of the fraction with the number\n    if fraction_decimal > number:\n        ans = \"8/100\"\n    else:\n        ans = \"0.7\"\n    \n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_paid = 275\n    flat_fee = 30\n    daily_fee_short_term = 25\n    daily_fee_long_term = 20\n    threshold_days = 5\n    long_term_total_cost = total_paid - flat_fee\n\n    if long_term_total_cost > threshold_days * daily_fee_short_term:\n        additional_days_cost = long_term_total_cost - (daily_fee_short_term * threshold_days)\n        additional_days = additional_days_cost // daily_fee_long_term\n        total_days = threshold_days + additional_days\n    else:\n        total_days = long_term_total_cost // daily_fee_short_term\n\n    return total_days\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n    return 8 * 2\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i) - (1/(51-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.1\n    total_distance = initial_height  # Initial drop\n\n    while initial_height > 0:\n        rebound_height = initial_height * rebound_ratio\n        total_distance += 2 * rebound_height  # upward and downward journey on each bounce\n        initial_height = rebound_height\n    \n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    for sheets in range(1, 58):\n        # Calculate total number of pages in the booklet as 4 times the number of sheets.\n        total_pages = sheets * 4\n\n        # We know the middle two pages are consecutive integers\n        # The sum of numbers on an individual sheet will be twice the number of the left middle page plus 2 (1 for left + right side, 1 for upper + lower side)\n        # left_middle_page + left_middle_page + 1 + left_middle_page + 1 + left_middle_page\n        left_middle_page = (58 - 2) // 4\n\n        # Calculate middle two pages\n        middle_page_sum = left_middle_page * 2 + 1\n\n        # Check if the sum of middle pages gives us a possible total_pages count\n        if middle_page_sum == total_pages - 1:\n            return sheets\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initial condition, equal number of green and yellow toy cars\n    equation1 = Eq(green, yellow)\n\n    # After giving away cars, there are thrice as many yellow as green cars\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    return solutions[green] - 60  # Green toy cars left after giving away\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    distance = 3000\n    buck_speed = 600\n    elephant_speed = 250\n\n    buck_time = distance / buck_speed\n    elephant_time = distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n    # Calculate number of terms in one direction (either ascending or descending)\n    num_terms = ((last_term - first_term) / difference) + 1\n    # Calculate the sum of the arithmetic sequence in one direction\n    sum_one_way = (num_terms * (first_term + last_term)) / 2\n    # Double it to include both ascending and descending parts, \n    # but subtract one instance of the first and last terms since they were counted twice\n    total_sum = (sum_one_way * 2) - (first_term + last_term)\n    return int(total_sum)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    percentage_bad = 15 / 100\n    bad_apples = total_apples * percentage_bad\n\n    return int(bad_apples)\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    simon_speed = 80  # Simon's speed in km/h\n    wife_speed = 60   # Wife's speed in km/h\n    distance_diff = 15  # Distance between Simon's and wife's offices in km\n    \n    # Relative speed at which Simon approaches his wife in km/h\n    relative_speed = simon_speed - wife_speed\n    \n    # Time required for Simon to cover the 15 km difference (time = distance / speed)\n    time_to_cover_diff = distance_diff / relative_speed\n    \n    # Convert hours to minutes for the time to cover the distance\n    time_in_minutes = time_to_cover_diff * 60\n    \n    # Start time at 6:10 pm\n    start_time = datetime.strptime('18:10', '%H:%M')\n    \n    # Time at which Simon overtakes his wife is start_time + time_in_minutes\n    overtaking_time = start_time + timedelta(minutes=time_in_minutes)\n    \n    # Format the overtaking_time to HH:MM format\n    overtaking_time_str = overtaking_time.strftime('%H:%M')\n    \n    return overtaking_time_str\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    cost_per_pencil = 1.80 / 12\n    ratio_pen_to_pencil = 7 / 3\n    cost_per_pen = cost_per_pencil * ratio_pen_to_pencil\n\n    cost_of_five_pens = 5 * cost_per_pen\n\n    return cost_of_five_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    common_difference = 2\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    ans = (num_terms * (first_term + last_term)) // 2\n\n    return ans\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    drinks = 2 # coffee and milk\n    food_items = 3 # hamburgers, burritos and bagels\n\n    combinations = drinks * food_items\n\n    return combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    unlocked_lockers = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                continue\n            else:\n                unlocked_lockers += 1\n        elif i % 5 == 0:\n            unlocked_lockers += 1\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def ways_to_step(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_step(n-1) + ways_to_step(n-2)\n    \n    # Number of ways to reach the 5th step\n    ways_to_5th_step = ways_to_step(5)\n    \n    # Number of ways to reach the 10th step from the 5th step\n    ways_from_5th_to_10th = ways_to_step(10-5)\n    \n    # Total ways is the product of the two possibilities\n    total_ways = ways_to_5th_step * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    minutes_cooking = 12\n    total_pancakes = pancakes_per_minute * minutes_cooking\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    def time_to_cross(people_times, cross_side, return_side):\n        if len(people_times) == 1:\n            cross_time = people_times[0]\n            return cross_time, cross_side + [people_times[0]], return_side\n        elif len(people_times) == 2:\n            cross_time = max(people_times)\n            return cross_time, cross_side + people_times, return_side\n        \n        # Try all possible combinations of two people crossing \n        # and one person returning, then pick the minimum time.\n        best_time = float('inf')\n        best_combo = None\n        for i in range(len(people_times)):\n            for j in range(i+1, len(people_times)):\n                cross_pair = [people_times[i], people_times[j]]\n                remaining = people_times[:i] + people_times[i+1:j] + people_times[j+1:]\n                for k in range(len(cross_pair)):\n                    returner = cross_pair[k]\n                    temp_remaining = remaining + [returner]\n                    cross_time, new_cross_side, new_return_side = time_to_cross(temp_remaining, cross_side + cross_pair, return_side + [returner])\n                    total_time = max(cross_pair) + returner + cross_time\n                    if total_time < best_time:\n                        best_time = total_time\n                        best_combo = new_cross_side, new_return_side\n        return best_time, best_combo[0], best_combo[1]\n    \n    # Initialize the people times\n    people_times = [5, 5, 7, 9]\n    \n    # Compute the best time\n    min_time, cross_side, return_side = time_to_cross(people_times, [], [])\n    \n    return min_time\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1 / 5\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500\n    total_days = 5\n\n    meters_per_day = total_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # Applying the Pigeonhole Principle: Total number of participants (pigeons)\n    # divided by number of countries (pigeonholes) to determine how many participants\n    # per country would ensure 9 participants from at least one country\n    num_countries = 18\n    participants_for_8_people_per_country = 8 * num_countries  # maximum number of participants for 8 people from the same country\n    # Add one more participant to ensure that at least one country has 9 participants\n    return participants_for_8_people_per_country + 1\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Total sum of 53 consecutive numbers is 2014\n    total_sum = 2014\n    # The sum of consecutive numbers can be calculated as the average times the number of terms\n    # Since they are consecutive, the average is simply (first term + last term) / 2\n    # We also know the sum of 4 consecutive numbers 21, 22, 23, 24 is 90, average is 90 / 4 = 22.5\n    # Since the numbers are consecutive and integer, the average of our 53 consecutive numbers will be an integer\n    # The number of terms n = 53, hence the average = total_sum / n\n    n = 53\n    average = total_sum / n\n    # So the largest number (last term) would be (average * 2 - 1) because it's 53 terms, even number of which on each side of average\n    last_term = average * 2 - 1\n    \n    return int(last_term)\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Sandra wrote 88 instead of 98 by mistake and got 22\n    # 88 / A = 22\n    # So A = 88 / 22\n    A = 88 / 22\n    \n    # Now we need the correct answer which is 98 divided by A\n    correct_answer = 98 / A\n    \n    return A, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost = cost_per_calculator * 12\n    return total_cost\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed is 5 laps / 6 minutes\n    lucas_speed = 5 / 6\n    # Miller's speed is 5 laps / 10 minutes\n    miller_speed = 5 / 10\n    \n    # relative speed at which Lucas overtakes Miller \n    relative_speed = lucas_speed - miller_speed\n    \n    # time taken for Lucas to overtake Miller the first time \n    # this happens when Lucas has completed one lap more than Miller\n    # hence, find the time taken for Lucas to complete one lap relative to Miller\n    time_to_overtake = 1 / relative_speed\n    \n    return time_to_overtake\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    max_possible_amount = rounded_amount + 4  # Since 5 or above would round up\n    return max_possible_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    minutes = hours * minutes_per_hour\n    return int(minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/4) * remaining\n    equation = Eq(children - men, 120)\n\n    sol = solve(equation, total_visitors)[0]\n\n    return sol\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    # Price in cents for clarity\n    base_cost = 80\n    additional_cost_per_minute = 5\n    total_cost_in_cents = 140\n\n    # If the call costs exactly $1.40, and the first 15 minutes cost $0.80,\n    # subtract the base cost from the total cost to find additional minutes' cost\n    additional_minutes_cost = total_cost_in_cents - base_cost\n\n    # Calculate the number of additional minutes using the additional cost per minute\n    additional_minutes = additional_minutes_cost / additional_cost_per_minute\n\n    # The total duration is the base 15 minutes plus the additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    # let's denote:\n    # t = Tim's current age\n    # m = Mother's current age\n    t = 8\n    # we have the equation:\n    # m + (m - t) = 54\n    # where (m - t) is the number of years it will take for Tim to reach his mother's current age.\n\n    # Rearrange the equation to solve for m (Mother's current age):\n    # m + m - t = 54\n    # 2*m - t = 54\n    # 2*m = 54 + t\n    # m = (54 + t) / 2\n    m = (54 + t) / 2\n\n    return int(m)\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # Length of the orange string in meters\n    orange_length_cm = orange_length_m * 100  # Convert orange string length to centimeters\n\n    purple_length_cm = orange_length_cm / 9.2  # Calculate purple string length in centimeters (from orange)\n    \n    green_length_cm = purple_length_cm + 24.9  # Calculate green string length in centimeters\n    green_length_m = green_length_cm / 100  # Convert green string length to meters\n    \n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Import required module\n    from sympy import symbols, Eq, solve\n\n    # Define the variable A as a symbol\n    A = symbols('A')\n\n    # Define the equation based on the Number Puzzle conditions\n    # which are typically linear equations for the digits A, B, C, etc.\n    # Due to the lack of puzzle context, I'll assume a simple equation of the form A + A = B\n    # Replace the line below with the actual puzzle equation(s).\n    equation = Eq(A + A, 10)\n\n    # Solve the equation(s)\n    solution = solve(equation, A)\n\n    # Return the value of A\n    ans = solution[0] if solution else None\n\n    return ans\n\n# Call the solution function and store the result in the variable 'ans'\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_off = symbols('days_off')\n\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n    \n    # Total work done\n    total_work = 1\n\n    # Kevin works full rate till he takes days off\n    kevin_working_days = 18 - days_off\n    \n    # Equation for total work done\n    equation = Eq(ivy_rate * 18 + kevin_rate * kevin_working_days, total_work)\n\n    # Solve the equation\n    days_off_solution = solve(equation, days_off)\n\n    return days_off_solution[0]\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    # Let x be the length of the shorter piece\n    # Then the longer piece would be 5x\n    # The sum of them would be x + 5x = 49.5\n\n    total_length = 49.5\n    # The shorter and longer pieces add up to 49.5\n    # x + 5x = 49.5 => 6x = 49.5 => x = 49.5 / 6\n\n    x = total_length / 6\n    longer_piece = 5 * x\n\n    # Return the length of the longer piece, rounded to 1 decimal place\n    return round(longer_piece, 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum = 60  # 60p from mum per day\n    money_from_dad = 40  # 40p from dad per day\n\n    total_money_per_day = money_from_mum + money_from_dad\n    total_days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = total_money_per_day * total_days\n    \n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n    \n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    total_pupils_with_year7_absent = 400\n    year7_percentage_with_absent = 10 / 100\n    year7_pupils_with_absent = year7_percentage_with_absent * total_pupils_with_year7_absent\n    \n    year7_percentage_normal = 20 / 100\n    total_pupils = year7_pupils_with_absent / year7_percentage_normal\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    climbed = 0\n    day = 0\n    while climbed < 25:\n        day += 1\n        climbed += 4\n        if climbed >= 25:\n            break\n        climbed -= 1\n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy can complete the book in 6 days, so her work rate is 1/6 of the book per day\n    nancy_rate = 1 / 6\n    # Together, Nancy and Tim can complete the book in 4 days, so their combined work rate is 1/4 of the book per day\n    combined_rate = 1 / 4\n    # Tim's work rate is the combined rate minus Nancy's rate\n    tim_rate = combined_rate - nancy_rate\n    # The time it takes for Tim to complete the book by himself is the reciprocal of his work rate\n    tim_time = 1 / tim_rate\n\n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    pocket_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:\n            pocket_money += 5\n        else:\n            pocket_money -= 8\n    return pocket_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - fall_down\n\n    # After every 3 jumps, taking into account the fall down\n    jumps_per_period = 3\n    effective_period_distance = (jumps_per_period * jump_up) - fall_down\n\n    # Remaining distance to cover to reach the top without the last fall\n    remaining_distance = total_height - jump_up\n\n    # Number of full periods required to cover remaining distance\n    full_periods = remaining_distance // effective_period_distance\n\n    # Jumps made in full periods\n    jumps_made = full_periods * jumps_per_period\n\n    # Distance covered in full periods\n    distance_covered = full_periods * effective_period_distance\n\n    # Subtract the covered distance from total to find out the remaining\n    remaining_distance_to_jump = total_height - distance_covered\n\n    # Count remaining jumps\n    # The squirrel doesn't fall after reaching the top\n    while remaining_distance_to_jump > 0:\n        remaining_distance_to_jump -= jump_up\n        jumps_made += 1\n        if remaining_distance_to_jump > 0:\n            remaining_distance_to_jump += fall_down\n\n    return jumps_made\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    terms = [1/(1*2), 2/(2*4), 3/(4*7), 4/(7*11), 5/(11*16), 6/(16*22), 1/22]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from sympy import factorial\n    from sympy.ntheory import factorint\n\n    # Calculate factorial of 999 and 300\n    f_999 = factorial(999)\n    f_300 = factorial(300)\n\n    # Divide 999! by 300! and get the integer result\n    division = f_999 // f_300\n\n    # Factorize the result\n    factors = factorint(division)\n\n    # The number of zeros at the end of a number corresponds to the minimum of the\n    # exponents of the prime factors 2 and 5 in its prime factorization.\n    # In decimal numbers, every zero in the end is a result of 10 as a factor,\n    # which is 2 multiplied by 5.\n    count_2 = factors.get(2, 0)\n    count_5 = factors.get(5, 0)\n\n    # The number of terminal zeros is the minimum of the count of 2's and 5's\n    ans = min(count_2, count_5)\n\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4*a + 0.6*b\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    # Helen has £40 left after spending three-fifths of what is left after buying the dress.\n    # Let's call the amount she had after buying the dress as x.\n    # So, (2/5) * x = £40 (since she spent 3/5 of x on shoes)\n    # We need to find the initial amount she had, which we'll call initial_amount.\n\n    # From the above explanation, we can create an equation:\n    # (2/5) * x = 40\n    # x = (40 * 5) / 2\n    x = (40 * 5) / 2\n\n    # Now we know she spent one-third of her initial amount on a dress:\n    # initial_amount - (1/3) * initial_amount = x\n    # (2/3) * initial_amount = x\n    # We can now find the initial amount by rearranging the equation:\n    # initial_amount = x / (2/3)\n    # initial_amount = x * (3/2)\n    initial_amount = x * (3/2)\n\n    return initial_amount\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Each side of the square has 60 students\n    side_length = 60\n\n    # Initial number of students is the outermost layer\n    total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = (5/4) * lorries\n        cars = bikes + (1/3) * bikes\n        total = cars + bikes + lorries\n        if total % 2 == 0 and total < 100:\n            if bikes.is_integer() and cars.is_integer():\n                return int(cars), int(bikes), lorries\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of buttons in box B be b.\n    # Initial number of buttons in box A will be b + 64.\n    # Let x be the number of buttons added to box A.\n    # 2x buttons are removed from box B.\n    # After the changes, box B has b - 2*x buttons, which is 28 fewer than before, so the new number of buttons in B is b - 28\n    # Ratio of total buttons to box B is 4:1, so 4*(b - 28) = (b + 64 + x) + (b - 2*x)\n    \n    b, x = symbols('b x')\n    eq1 = Eq(b - 2*x, b - 28)\n    eq2 = Eq(4*(b - 28), (b + 64 + x) + (b - 2*x))\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (b, x))\n\n    # Number of buttons in box A at first\n    buttons_in_A = solutions[b] + 64\n\n    return buttons_in_A\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    n = 1 # side length of the smallest square (1x1)\n    total_tiles = 0\n    red_tiles, green_tiles = 0, 0\n\n    # Continue increasing the side length until the total number of tiles exceeds 400\n    while total_tiles < 400:\n        layer_tiles = (n * 4) - 4 + 1 if n > 1 else 1 # number of tiles in the current layer (square)\n        total_tiles += layer_tiles\n        \n        # Alternating the colors of layers\n        if n % 2 == 1: # odd layers are red\n            red_tiles += layer_tiles\n        else: # even layers are green\n            green_tiles += layer_tiles\n\n        n += 1 # move to the next layer (inward)\n    \n    # We add an extra layer which causes total_tiles to exceed 400, so remove the last added layer\n    n -= 1 \n    layer_tiles = (n * 4) - 4 + 1 if n > 1 else 1\n    total_tiles -= layer_tiles\n    if n % 2 == 1: \n        red_tiles -= layer_tiles\n    else:\n        green_tiles -= layer_tiles\n\n    # Check if 400 tiles complete the last layer or we need to add the required amount\n    remaining_tiles = 400 - total_tiles\n    if n % 2 == 1:\n        red_tiles += remaining_tiles\n    else:\n        green_tiles += remaining_tiles\n\n    # Finding the tile color used most and the difference between the two colors\n    if red_tiles > green_tiles:\n        more_used_color = 'red'\n        difference = red_tiles - green_tiles\n    else:\n        more_used_color = 'green'\n        difference = green_tiles - red_tiles\n\n    ans = (more_used_color, difference)\n    return ans\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = (18 * 20132013) - (2013 * 180018)\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    length_of_boulevard = 300\n    interval_distance = 10\n    # One bin at the beginning and one at the end, plus every interval in between\n    num_bins = 2 + (length_of_boulevard - interval_distance) // interval_distance\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        number = int('26' + '2011' * n + '7')\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n    total_flour_needed = flour_per_cake * number_of_cakes\n    return total_flour_needed\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards_gained = 24\n    cards_gained_per_win = 4\n    cards_lost_per_loss = 2\n    total_rounds = 12\n\n    # Let the number of wins be x, and the number of losses be y.\n    # We can form the following system of equations based on the problem statement:\n    #   4x - 2y = 24 (total cards gained after 12 rounds)\n    #   x + y = 12 (total rounds played)\n\n    # Rearrange the second equation to express y in terms of x:\n    #   y = 12 - x\n\n    # Substitute y in the first equation:\n    #   4x - 2(12 - x) = 24\n    #   4x - 24 + 2x = 24\n    #   6x = 48\n    #   x = 8\n\n    # Now we can find the number of losses (y):  \n    #   y = 12 - x\n    #   y = 12 - 8\n    #   y = 4\n\n    wins = total_cards_gained / cards_gained_per_win\n    losses = total_rounds - wins\n\n    return int(losses)\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z, rounds = 20, 19, 18, 0\n    while min(x, y, z) > 0:\n        if x >= y and x >= z:\n            x -= 2\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 2\n            x += 1\n            z += 1\n        else:\n            z -= 2\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If it takes Bob 3 minutes to cut a log into 4 pieces, then he made 3 cuts. \n    # Each cut takes 3 / 3 = 1 minute.\n    time_per_cut = 3 / 3\n\n    # To cut a log into 8 pieces, Bob needs 7 cuts.\n    # Total time needed for 7 cuts is 7 times the time per cut.\n    total_time = 7 * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Given there are 7 identical lollipops and 3 identical plates,\n    # this is a problem of partitioning a number into a maximum of 3 parts.\n    # The order of the parts does not matter since the plates are identical.\n\n    # We can calculate this using the stars and bars method.\n\n    # We have 7 stars (lollipops) that need to be divided into 3 sections (plates).\n    # We use 2 bars to create these 3 sections.\n\n    # Since the plates can be empty, we have to count the scenarios:\n    # - All lollipops on one plate\n    # - Lollipops split between two plates\n    # - Lollipops split between all three plates\n\n    # We effectively need to place 2 bars in any of the 8 spaces (7 stars and 1 hypothetical space\n    # after the last star to accommodate empty plates)\n    # This translates to C(8, 2), which is the number of ways to choose 2 places for the bars from 8.\n\n    from math import comb\n    total_ways = comb(7 + 3 - 1, 3 - 1)\n    \n    return total_ways\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    total_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    ans = (total_cards - duplicates) + new_cards\n    return ans\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # treat Amy and Judy as one unit plus the other 6 people\n    # we have 7 units to arrange in a circle, which is (7-1)! = 6!\n    units = factorial(7 - 1)\n    \n    # Amy and Judy can switch places within their unit, which gives us 2! arrangements\n    amy_judy_arrangements = factorial(2)\n\n    # Multiply the two counts together\n    ans = units * amy_judy_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    # Chai Seng spent 6/7 of his money\n    rasidah_left = rasidah - (3/5)*rasidah\n    chai_seng_left = chai_seng - (6/7)*chai_seng\n\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, 1/2 * rasidah_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    return solutions[rasidah]\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # declare the variables for Andy's and Ben's cookies\n    andy, ben = symbols('andy ben')\n\n    # set the equations based on the problem\n    equation1 = Eq(andy, ben - 84)  # Andy had 84 fewer cookies than Ben at first\n    equation2 = Eq(andy + andy/3, ben + ben/5)  # After buying more cookies\n    equation3 = Eq(andy + andy/3, 1/3 * (ben + ben/5)) # Andy had 1/3 as many cookies as Ben in the end\n\n    # solve the equations\n    solutions = solve((equation1, equation2, equation3), (andy, ben))\n\n    # Andy's cookies at the end after buying more\n    andy_end = solutions[andy] + solutions[andy]/3\n\n    return andy_end.evalf()\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    result = sum(1/i for i in range(1, 8))\n    return int(result)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n\n    pencils = 56\n    pens = 60\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 0.015  # 1.5%\n\n    # Assume Bella is correct and she saved the money for 5 years.\n    bella_years = 5\n    calculated_amount = initial_amount * ((1 + interest_rate) ** bella_years)\n\n    if calculated_amount == final_amount:\n        return bella_years  # She is correct\n    else:\n        # If she is wrong, solve for the actual number of years\n        # Using the formula A = P(1 + r)^t to find t, where\n        # A - final amount\n        # P - principal amount\n        # r - interest rate\n        # t - number of years\n        from math import log\n        actual_years = log(final_amount / initial_amount) / log(1 + interest_rate)\n        return round(actual_years)\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    numerator_original = 6\n    denominator_original = 20\n    numerator_new = 12\n    \n    # Calculate the factor by which the numerator increases\n    increase_factor = numerator_new / numerator_original\n    \n    # Multiply the original denominator by the increase factor to get the new denominator\n    denominator_new = denominator_original * increase_factor\n    \n    return int(denominator_new)\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Analyze the pattern:\n    # The sequence alternates between positive and negative numbers,\n    # starting with a positive number.\n    # The positive numbers start at 18 and increase by 1 each time.\n    # The negative numbers start at -16 and decrease by 1 each time.\n    \n    # Find the term number for n:\n    # The sequence has 2 patterns so for finding the nth term we divide by 2.\n    # To decide whether the nth term is positive or negative, we check the parity of the term number.\n\n    # Calculate the next number 'n' in the sequence:\n    term_number = 5  # Since we already have 5 terms in the sequence: 18, -16, 19, -15, 20\n    if term_number % 2 == 1:  # Odd term number -> positive\n        n = 18 + (term_number // 2)\n    else:  # Even term number -> negative\n        n = -16 - ((term_number // 2) - 1)\n    \n    return n\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the 4 numbers be a, b, c, d with a > b > c > d\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n    # Add constraint for distinct positive whole numbers\n    constraints = [a > b, b > c, c > d]\n\n    # Given that d + (a + b + c) / 3 = 39\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n    # Given that a + (b + c + d) / 3 = 51\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (a, b, c, d), domain='ZZ')\n\n    # Extracting all valid tuples that satisfy conditions a > b > c > d\n    valid_solutions = [s for s in solutions if all(constraint.subs(s) for constraint in constraints)]\n    \n    # Find the largest 'a' value since we want the largest possible value of the largest number\n    max_a = max(solution[a] for solution in valid_solutions)\n    \n    return max_a\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since the students are smart and would not lie, they can only raise their hands\n    # when they are certain of divisibility or non-divisibility.\n    #\n    # We need to work out the possibilities for the slip of paper number and the 24\n    # to figure out what numbers are necessarily visible to Tom.\n    \n    # First, we establish the range of two-digit numbers.\n    two_digit_numbers = set(range(10, 100))\n    \n    # Next, we determine which two-digit numbers are divisible by 24.\n    divisible_by_24 = set(num for num in two_digit_numbers if num % 24 == 0)\n    \n    # Then we identify all possible numbers that could be on the slip of paper\n    # by checking which numbers would result in exactly four students raising their hands.\n    possible_paper_numbers = []\n    for num in range(2, 100):  # The number on the paper must be a factor of at least one two-digit number.\n        divisible_by_num = set(n for n in two_digit_numbers if n % num == 0)\n        not_divisible_by_num = two_digit_numbers - divisible_by_num\n        if len(divisible_by_num) + len(not_divisible_by_num) == 9 and len(divisible_by_num) == 4:\n            possible_paper_numbers.append(num)\n    \n    # Now we find the intersection of numbers divisible by the possible paper numbers and 24.\n    # We know Tom raised his hand on both occasions, so his number must meet both criteria.\n    tom_number_candidates = set.intersection(*[set(n for n in two_digit_numbers if n % pn == 0 or n % pn != 0)\n                                               for pn in possible_paper_numbers])\n    tom_number_candidates.intersection_update(divisible_by_24)\n    \n    # We can safely assume that the indivisible numbers should be the most since 4 students raised their hands\n    # the first time and 6 students raised their hand the second time. So Tom's number is indivisible by 24.\n    tom_number_candidates -= divisible_by_24\n    \n    # Since four students raised their hands the first time and six the second time, at least two of the students\n    # who did not raise their hands the first time must have had a slip number that was not a factor of their number.\n    # Therefore, the slip number must be a factor only of the numbers corresponding to students who raised their hand\n    # both times, including Tom, and must be a factor greater than 1 and less than or equal to 49.\n    possible_paper_numbers = [num for num in possible_paper_numbers if all(not (n % num) for n in tom_number_candidates)]\n    \n    # Now we find out all possible numbers for Tom's friends based on the remaining possible paper numbers.\n    friends_numbers = two_digit_numbers - tom_number_candidates\n    for paper_number in possible_paper_numbers:\n        divisible_by_paper_number = set(friend for friend in friends_numbers if friend % paper_number == 0)\n        if len(divisible_by_paper_number) == 4:\n            friends_numbers -= divisible_by_paper_number\n        \n    # Finally, we need to find the sum of all the two-digit numbers Tom could have seen,\n    # knowing Tom's number is in tom_number_candidates (which does not count in the sum).\n    return sum(friends_numbers)\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total = 43  # pupils who passed at least one test\n    math = 30\n    science = 28\n    english = 25\n    \n    # Maximum number of pupils that can pass all three tests is at least\n    # the sum of all individual passed subtracted by twice the number of\n    # students (all passed minus total).\n    max_all_three = math + science + english - 2 * total\n    \n    # The number cannot be less than zero\n    ans = max(max_all_three, 0)\n    \n    return ans\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the distance between the school and their home be 'd' meters\n    d = symbols('d')\n    \n    # Ahmad's speed is 80 m/min, his brother's speed is 50 m/min\n    ahmad_speed = 80\n    brother_speed = 50\n    \n    # Ahmad meets his brother at a distance of 210 meters from school\n    meet_distance = 210\n    \n    # Ahmad would have traveled 'd + d - meet_distance' to meet his brother\n    # His brother would have traveled 'd - meet_distance'\n    # Since they walked for the same amount of time, we get the equation\n    equation = Eq((d + d - meet_distance) / ahmad_speed, (d - meet_distance) / brother_speed)\n    \n    # Solving for 'd' gives us the distance between the school and their home\n    distance = solve(equation, d)\n    \n    return distance[0]\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    # This can be implemented with simple arithmetic operations and Python's fractions module\n    from fractions import Fraction\n\n    # Calculate the numerator of the first complex fraction\n    numerator1 = Fraction(1, 30) + Fraction(1, 6)\n    # Calculate the denominator of the first complex fraction\n    denominator1 = Fraction(2, 25)\n    # Calculate the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n\n    # Calculate the numerator of the second complex fraction\n    numerator2 = 2 - Fraction(2, 3)\n    # Calculate the denominator of the second complex fraction\n    denominator2 = Fraction(8, 3)\n    # Calculate the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n\n    # Add the two complex fractions\n    result = complex_fraction1 + complex_fraction2\n\n    # Return the resulting fraction as a floating point number\n    return float(result)\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    value_of_first_8 = 8 * 1000  # The place value of the first 8 in the thousands place\n    value_of_second_8 = 8 * 10    # The place value of the second 8 in the tens place\n    difference = value_of_first_8 - value_of_second_8\n    return difference\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Given variables\n    pens = 6\n    pencil_cases = 3\n    \n    # Each pencil case must have at least one pen. Initially, we distribute\n    # one pen to each case, leaving us with pens - pencil_cases pens to distribute.\n    remaining_pens = pens - pencil_cases\n    \n    # Now we want to distribute the remaining pens into the pencil cases such that\n    # order does not matter. Since the pens and pencil cases are indistinguishable,\n    # we are essentially looking to partition the remaining pens. We can map this to\n    # a problem of distributing identical objects (remaining pens) into distinct boxes\n    # which is a classic stars and bars problem. The formula to calculate this is:\n    # (n + k - 1) choose (k - 1), where n is the number of items to distribute and\n    # k is the number of distributions or boxes.\n    \n    # We will use the combinations function from the math library to calculate this.\n    from math import comb\n    \n    # Calculate the number of ways to distribute the remaining pens\n    ways = comb(remaining_pens + pencil_cases - 1, pencil_cases - 1)\n\n    return ways\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # A four-digit number is divisible by 5 if its last digit is either 0 or 5.\n    # Since the number must also be divisible by 4, the last two digits must form a number that is divisible by 4.\n    # If we choose A to be 5, 5725 is not divisible by 4.\n    # If we choose A to be 0, 5720 is divisible by 4, since 20 is divisible by 4.\n    A = 0\n    return A\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    num = 40309\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 16\n    length_ribbon2 = 24\n    longest_piece_length = gcd(length_ribbon1, length_ribbon2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement\n    # The remainders are 1, 2, and 7 for divisors 5, 6, and 11 respectively\n\n    # Step 2: Find the LCM of all the divisors\n    # The LCM of 5, 6, and 11 is calculated below (since they are all prime to each other, it's just their product)\n    lcm = 5 * 6 * 11\n\n    # Step 3: The unknown = the common multiple of all the divisors minus the common remainder\n    # Apply Chinese Remainder Theorem\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    solution_crt = solve_congruence(*congruences)\n    biscuits = solution_crt[0]\n\n    return biscuits\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # The smallest five-digit number is 10000 and the largest is 99999.\n    # Since the palindromic number is a multiple of 45, it must also be\n    # a multiple of 9 and 5. Since it's a multiple of 5, its last digit\n    # must be 0 or 5. If the last digit is 0, the first digit must also be 0,\n    # but that is not a five-digit number. So, the last digit must be 5,\n    # which makes the first digit 5.\n\n    # Starting from the largest 5-digit palindromic number with first and last digits 5:\n    largest_palindrome = 0\n    for i in range(9, -1, -1):\n        for j in range(9, -1, -1):\n            palin = int(f\"5{i}{j}{i}5\")\n            if palin % 45 == 0:\n                largest_palindrome = palin\n                break\n        if largest_palindrome != 0:\n            break\n    \n    # Starting from the smallest 5-digit palindromic number with first and last digits 5:\n    smallest_palindrome = 0\n    for i in range(0, 10):\n        for j in range(0, 10):\n            palin = int(f\"5{i}{j}{i}5\")\n            if palin % 45 == 0:\n                smallest_palindrome = palin\n                break\n        if smallest_palindrome != 0:\n            break\n\n    # The difference between the largest and smallest palindromic numbers\n    # that are multiples of 45.\n    return largest_palindrome - smallest_palindrome\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_rate\n\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    mean_top_3 = 92\n    mean_all = symbols('mean_all')\n\n    # Create the equations based on the problem statement\n    equation = Eq(mean_all * 10, mean_top_3 * 3 + (mean_all - 6) * 7)\n\n    # Solve the equation for the mean score of all 10 students\n    mean_all_value = solve(equation, mean_all)[0]\n\n    return mean_all_value\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for i in range(1000, 2023):\n        # Get unique digits of the year\n        year_digits = set(str(i))\n        # Check if the year has 4 unique consecutive digits\n        if len(year_digits) == 4:\n            sorted_digits = sorted(year_digits)\n            if all(abs(int(sorted_digits[j]) - int(sorted_digits[j + 1])) == 1 for j in range(len(sorted_digits) - 1)):\n                count += len(set(permutations(year_digits)))\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "def solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        x_bags = [x for x in bags if x != red_marbles]\n        for i in range(len(x_bags)):\n            for j in range(i+1, len(x_bags)):\n                for k in range(j+1, len(x_bags)):\n                    jaslin_bags = x_bags[i] + x_bags[j] + x_bags[k]\n                    george_bags = sum(x_bags) - jaslin_bags\n                    if jaslin_bags == 2 * george_bags:\n                        return red_marbles\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550\n    time_initial = 5\n    time_target = 3\n\n    speed = distance / time_initial\n    travel_distance = speed * time_target\n\n    return travel_distance\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let a be the number of sweets Andre had originally and b be the number of sweets Beth had originally.\n    # According to the problem after the teacher gave them 4 sweets each,\n    # Andre has (a + 4) sweets and Beth has (b + 4) sweets.\n    # We also know that:\n    # a + b = 24 (total sweets they originally had)\n    # (a + 4) = (b + 4) + 6 (Andre now has 6 sweets more than Beth)\n    \n    # From the first equation: a = 24 - b\n    # Substituting a in the second equation gives us:\n    # (24 - b + 4) = (b + 4) + 6\n    # 28 - b = b + 10\n    # 28 - 10 = b + b\n    # 18 = 2b\n    # b = 9\n    \n    # Now that we know Beth originally had 9 sweets, we add 4 sweets given by the teacher\n    beth_now = 9 + 4\n    \n    return beth_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Consider the five consecutive even numbers as:\n    # x, x+2, x+4, x+6, x+8\n    # Their sum is 5x + 20, and it is equal to 100\n    # So, we solve for x:\n    # 5x + 20 = 100\n    # 5x = 100 - 20\n    # 5x = 80\n    # x = 80 / 5\n    # x = 16\n    # Therefore, the smallest of these five even numbers is 16.\n\n    return 16\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    # Let x be the total number of apples Will had at the start.\n    # According to the problem, after selling 2/5 of the apples, he has 150 left.\n    # This means that 3/5 of the apples correspond to the 150 apples he has left.\n    # So we can write the equation: (3/5) * x = 150\n    # To find the initial number of apples (x), we divide 150 by (3/5).\n\n    remaining_fraction = 3/5\n    apples_left = 150\n\n    # Calculate the initial number of apples.\n    initial_apples = apples_left / remaining_fraction\n\n    return int(initial_apples)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from math import factorial\n    from fractions import Fraction\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Total arrangements without restriction: 12! / (2!^6)\n    total_arrangements = factorial(12) // factorial(2)**6\n\n    # The sequence of blocks can be regarded as a permutation of AABBCCDDEEFF,\n    # where ABCDEF are distinct elements, then we only need to count the valid\n    # permutations under this vision.\n    \n    # Even arrangements: 6! * C(6,2) * C(4,2) * 2 -> 6 positions for pairs,\n    # where each pair must be in positions (1,2), (3,4), (5,6), etc.\n    # We choose 2 positions out of 6 for A (C(6,2)), then 2 out of the remaining 4\n    # for B (C(4,2)), and so on. Then we multiply by 2 for each color\n    # to account for the order within each pair (AB or BA).\n    even_arrangements = factorial(6) * factorial(6) // (factorial(2)**6) * 2**6\n\n    probability = Fraction(even_arrangements, total_arrangements)\n    \n    # Simplify the probability fraction to lowest terms\n    common_denom = gcd(probability.numerator, probability.denominator)\n    m = probability.numerator // common_denom\n    n = probability.denominator // common_denom\n\n    # Return the result m + n\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    num_jumps = 14  # Between 1st to 15th post, there are 14 jumps\n    jump_length = 3  # Each jump is 3 inches long\n\n    total_distance = num_jumps * jump_length\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    return 342 - (85 - 78) * 15\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    apples = 36\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries + apples\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates for inlets A and B\n    rate_A = 1 / 36\n    rate_B = 1 / 48\n\n    # Time taken to follow one complete cycle of 6 minutes\n    time_cycle = 1 + 2 + 2 + 1\n    # Amount of pool filled in one cycle\n    filled_cycle = (1 * rate_A) + (2 * rate_B) + (2 * rate_A) + (1 * rate_B)\n\n    # Find the number of complete cycles\n    complete_cycles = 1 // filled_cycle\n    time_taken = complete_cycles * time_cycle\n\n    # Remaining pool to be filled after complete cycles\n    remaining_pool = 1 - (complete_cycles * filled_cycle)\n\n    # Time and pool filled tracking variables\n    time = 0\n    filled = 0\n\n    # Filling order and durations\n    fill_order = [1, 2, 2, 1]\n    rates = [rate_A, rate_B, rate_A, rate_B]\n\n    # Fill the remaining pool\n    for i in range(len(fill_order)):\n        # Calculate potential pool fill for this step\n        added_fill = rates[i] * fill_order[i]\n\n        # Check if we will overfill the pool\n        if filled + added_fill >= remaining_pool:\n            # Calculate required time to finish\n            time += (remaining_pool - filled) / rates[i]\n            break\n        else:\n            # Update time and filled amount\n            time += fill_order[i]\n            filled += added_fill\n\n    # Return total time rounded to the nearest minute\n    ans = round(time_taken + time)\n    return ans\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    \n    # Rate at which Alan and Bob can paint the room together\n    together_rate = 1 / 4\n    # Rate at which Bob can paint the room alone\n    bob_alone_rate = 1 / 6\n    # Rate at which Alan can paint the room alone, which we want to find\n    alan_alone_rate = 1 / alan\n    \n    # Equation for the rates together to paint the room\n    equation = Eq(together_rate, alan_alone_rate + bob_alone_rate)\n    \n    # Solve the equation for Alan's rate\n    alan_alone_time = solve(equation, alan)[0]\n    \n    return alan_alone_time\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    # Probability it will rain on Saturday\n    p_saturday = 0.7\n    # Probability it will rain on Sunday\n    p_sunday = 0.5\n    # Probability it will rain on both Saturday and Sunday\n    p_both = p_saturday * p_sunday\n    # Probability it will rain on at least one day\n    p_at_least_one = p_saturday + p_sunday - p_both\n    \n    return p_at_least_one\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7*3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    # Total score obtained by Eddie\n    total_score = 48\n    # Points for each correct answer\n    correct_points = 10\n    # Points deducted for each wrong answer\n    wrong_points = -3\n    # Total number of questions\n    total_questions = 10\n\n    # Let x be the number of questions answered incorrectly\n    # Hence, the number of questions answered correctly would be (total_questions - x)\n    # Formulate the equation based on the scoring system\n    # (correct_points * (total_questions - x)) + (wrong_points * x) = total_score\n\n    # Now, solve for x:\n    for x in range(total_questions + 1):\n        if (correct_points * (total_questions - x)) + (wrong_points * x) == total_score:\n            return x\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros_required = 28\n    power_of_2 = 0\n    power_of_5 = 0\n\n    n = 1\n    while True:\n        current = n\n        while current % 2 == 0:\n            power_of_2 += 1\n            current //= 2\n        while current % 5 == 0:\n            power_of_5 += 1\n            current //= 5\n        \n        zeros = min(power_of_2, power_of_5)\n        if zeros == zeros_required:\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bought_bottles = 10\n    loaned_bottles = 1\n    total_bottles = bought_bottles + loaned_bottles\n    empty_bottles = 0\n    \n    while total_bottles > 1:\n        drink = total_bottles // 2\n        empty_bottles = total_bottles % 2\n        total_bottles = drink + empty_bottles\n        bought_bottles += drink\n    \n    return bought_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let's consider the rate of draining the pools. \n    # Pool A drains in 10 minutes, so its rate is 1/10 of the pool per minute.\n    # Pool B drains in 6 minutes, so its rate is 1/6 of the pool per minute.\n    \n    # Let x be the number of minutes after which the waterline of pool A is 3 times that of pool B.\n    # We are looking for a time x such that (1 - 1/10*x) / (1 - 1/6*x) = 3\n    # This equation represents the ratio of the remaining water in pool A to the remaining water in pool B.\n    \n    # Solve for x\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    equation = Eq((1 - x/10) / (1 - x/6), 3)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n    children_between = total_children - (vanessa_position_from_front + andrea_position_from_end)\n    \n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    initial_sweets = 320\n    sweets_bought_weekly = 30\n    total_weeks = 7\n    final_sweets = 348\n\n    total_sweets_bought = sweets_bought_weekly * total_weeks\n    sweets_eaten_weekly = (initial_sweets + total_sweets_bought - final_sweets) / total_weeks\n\n    return int(sweets_eaten_weekly)\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"281{digit}\")\n        if num % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_path_length = 2/3\n    unfenced_path_length = total_path_length - fenced_path_length\n    return unfenced_path_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the original number of sweets Yue Ying has.\n    # Then, Chenxi has x + 5 sweets.\n    # After giving away 10 sweets, Chenxi has x + 5 - 10 = x - 5 sweets.\n    # Yue Ying now has x + 10 sweets.\n    # The difference after the exchange is: (x + 10) - (x - 5) = 15\n    # The difference in number of sweets they will have after the exchange is 15.\n    return 15\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    result = 0.35 * 200\n    return result\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    for prime1 in range(2, 69//2 + 1): \n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime2 - prime1\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # In a time problem where the digits can't be repeated and we're looking for the number\n    # of combinations for a digital clock, we need to consider the constraints for each position.\n    # \n    # The digital clock has the format HH:MM, where H is the hour and M is the minute\n    # For the hour (H), it can range from 00 to 23.\n    # For the minute (M), it can range from 00 to 59.\n    #\n    # Since the digits can't be repeated, we can't use a digit more than once.\n    # Hence, we need to calculate the number of valid combinations for the hour and minute\n    # considering this condition.\n\n    # Calculate the valid combination for hours\n    valid_hours = 0\n    for hour in range(24):\n        # Convert hour to a string and check if all characters are unique\n        if len(set(str(hour).zfill(2))) == len(str(hour).zfill(2)):\n            valid_hours += 1\n    \n    # Calculate the valid combination for minutes\n    valid_minutes = 0\n    for minute in range(60):\n        # Convert minute to a string and check if all characters are unique\n        if len(set(str(minute).zfill(2))) == len(str(minute).zfill(2)):\n            valid_minutes += 1\n    \n    # Now we need to multiply valid_hours with valid_minutes to get the total combinations\n    # But we must remove the combinations that have repeating digits\n    total_combinations = 0\n    for hour in range(24):\n        for minute in range(60):\n            # Convert both to strings and concatenate\n            time = str(hour).zfill(2) + str(minute).zfill(2)\n            # Check if all characters are unique\n            if len(set(time)) == len(time):\n                total_combinations += 1\n\n    return total_combinations\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in school A originally.\n    x = symbols('x')\n    \n    # After moving, school A has x - 20 students, and school B has 1050 - x + 20.\n    # We are given that after moving, school A has 10 more students than school B.\n    equation = Eq((x - 20) - (1050 - x + 20), 10)\n\n    # Solve the equation for x.\n    original_students_in_a = solve(equation, x)[0]\n\n    return original_students_in_a\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if correct * 10 - incorrect * 5 == 70:\n            return correct\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from sympy import *\n\ndef solution():\n    expr = \"15+5*5+15-6+7\"\n    max_value = -float('inf')\n    max_expr = None\n    \n    # Test all bracket combinations\n    for i in range(len(expr)):\n        for j in range(i+2, len(expr)):\n            for m in range(j+2, len(expr)):\n                for n in range(m+2, len(expr)):\n                    # Insert brackets into the expression\n                    test_expr = expr[:i] + \"(\" + expr[i:j] + \")\" + expr[j:m] + \"(\" + expr[m:n] + \")\" + expr[n:]\n                    # Evaluate the expression safely\n                    test_value = eval(test_expr)\n\n                    # Update the maximum value and expression\n                    if test_value > max_value:\n                        max_value = test_value\n                        max_expr = test_expr\n    return max_value\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours for uniformity\n    late_time = 12 / 60\n    early_time = 8 / 60\n\n    # Let the actual time taken at correct speed be t hours\n    # Then, the time taken at 3 km/h is (t + 12/60) hours\n    # And the time taken at 7 km/h is (t - 8/60) hours\n    \n    # Let the distance be d km\n    # Using the formula distance = speed * time\n    # d = 3*(t + 12/60) = 7*(t - 8/60)\n    \n    # Solving for d using the two equations\n    # 3*(t + 12/60) = 7*(t - 8/60)\n    # 3*t + 3*(12/60) = 7*t - 7*(8/60)\n    # 3*(12/60) + 7*(8/60) = 7*t - 3*t\n    # 3*12 + 7*8 = 60*(7t - 3t)\n    # 36 + 56 = 60*(4t)\n    # 92 = 240*t\n    # t = 92 / 240\n    # Distance = speed * time\n    # Distance using the first scenario (3 km/h speed)\n    # Distance = 3 * (t + 12/60)\n    # Distance = 3 * ((92/240) + 12/60)\n    \n    t = 92 / 240\n    distance = 3 * (t + 12/60)\n    \n    return distance\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    students_taking_math = 20\n    students_taking_both = 11\n    students_taking_neither = 10\n\n    students_taking_writing = total_students - students_taking_neither\n    students_taking_writing_only = students_taking_writing - students_taking_both\n\n    return students_taking_writing_only\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = ['0', '8', '0', '7', '2', '0', '0', '3']\n    primes = []\n\n    # Generate all possible numbers from the given digits\n    for digit in range(1, 50):\n        if isprime(digit) and all(str(digit).count(d) <= digits.count(d) for d in str(digit)):\n            primes.append(digit)\n            \n    return max(primes)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_sum = total_average * 5\n    first_two_sum = first_two_average * 2\n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / 3\n    return last_three_average\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy, father = symbols('teddy father')\n\n    # at some point: father = 7 * teddy\n    equation1 = Eq(father, 7 * teddy)\n\n    # When father is 40, we assume some years have passed: passed_years = father - 5\n    # at this point: teddy + passed_years = teddy's age when father is 40\n    equation2 = Eq(teddy + (40 - 7 * 5), 40)\n\n    solutions = solve((equation1, equation2), (teddy, father))\n\n    return solutions[teddy]\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18+1, 2))\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from fractions import Fraction\n    \n    # Define the fractions as per the problem\n    fraction_adults = Fraction(2, 7)\n    fraction_boys = Fraction(4, 5)\n    \n    # Calculate fraction of the girls with respect to the remaining audience (after adults)\n    fraction_girls_remaining = Fraction(1, 1) - fraction_boys\n    # Since the remaining audience is 5/7 of the total, fraction of the girls with respect to total\n    fraction_girls_total = fraction_girls_remaining * (Fraction(1, 1) - fraction_adults)\n\n    # Calculate the ratio of adults to girls based on Adriana's mistake\n    fraction_difference_adriana = fraction_adults - (Fraction(1, 5) * fraction_adults)\n\n    # The correct fraction difference between adults and girls as per the corrected ratio\n    fraction_difference_correct = fraction_adults - fraction_girls_total\n    \n    # Number of people represented by the fraction difference (since it's equal to 80 people)\n    number_people_difference = 80 / fraction_difference_correct\n\n    # Calculate the total number of people by dividing the number of people difference by the fraction difference\n    total_people = number_people_difference * Fraction(1, 1)\n\n    return int(total_people)\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Andrea thinks cutting along the diameter 4 times will result in 10 slices\n    # Each cut can intersect previous cuts at most once because we are cutting along the diameter\n    # Thus, each cut will increase the number of slices by the number of times it can intersect the previous cuts plus one\n    # First cut gives 2 slices, second cut can intersect it once, creating 2 more slices (4 in total)\n    # Third cut can intersect the previous two cuts twice, creating 3 more slices (7 in total)\n    # Fourth cut can intersect all three previous cuts thrice, creating 4 more slices (11 in total)\n\n    # Initialize the number of slices\n    slices = 1  # Before any cuts are made, there is only 1 slice (the whole pizza)\n\n    # Loop through the number of cuts\n    for i in range(4):  # We are making 4 cuts\n        slices += i + 1  # Add the current cut's intersecting slices plus the slice from the cut itself\n\n    return slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between = 5\n\n    # Calculate rabbit's position from left\n    rabbit_position_from_left = elephant_position_from_left + toys_between + 1\n    \n    # Calculate rabbit's position from right\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 110): # go through each page number from 1 to 109\n        for digit in str(page): # convert the page number to string and iterate over each digit\n            total_sum += int(digit) # convert the digit back to int and add it to the total sum\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink_dolphins = symbols('pink_dolphins')\n    equation = Eq(11 * pink_dolphins + pink_dolphins, 48)\n    pink_dolphins_number = solve(equation, pink_dolphins)\n    return pink_dolphins_number[0]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54\n    base = 9\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    total = 0\n    for i in range(2, 33, 3):\n        total += i ** 2\n    return total\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of chairs (and tables)\n    x = symbols('x')\n    \n    # Original number of chairs = original number of tables = x\n    # After selling and buying: (x - 42) tables, (x + 24) chairs\n    # The number of chairs will be 4 times the number of tables: 4 * (x - 42) = (x + 24)\n    \n    equation = Eq(4 * (x - 42), x + 24)\n    answer = solve(equation, x)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 0.35 * 700\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's cabinet itself\n\n    total_cabinets = left_of_candy + candy_cabinet + right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    first_day_books = 455\n    second_day_books = 198\n    total_books = first_day_books + second_day_books\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplifying the given expression within the modulo 5 system\n    # Using the properties of exponents and modulo arithmetic:\n    # Any number to the power of 4 modulo 5 is 1, so 4^982 is 1 (mod 5)\n    # 2^1963 is equivalent to (2^4)^490 * 2^3 modulo 5, which simplifies to 1^490 * 8 = 8 = 3 (mod 5)\n    # Hence the denominator simplifies to 1 - 3 = -2 modulo 5\n    # Now consider the numerator 2^2019\n    # This is equivalent to (2^4)^504 * 2^7 modulo 5, which simplifies to 1^504 * 128 = 128 = 3 (mod 5)\n    \n    # Calculate the remainder of numerator and denominator with respect to modulo 5\n    numerator_mod = pow(2, 2019, 5)\n    denominator_mod = (pow(4, 982, 5) - pow(2, 1963, 5)) % 5\n\n    # Calculate the modular inverse of the denominator modulo 5\n    # Since 5 is a prime number, the modular inverse exists for all numbers not divisible by 5\n    denominator_inverse_mod = pow(-2 % 5, -1, 5)\n    \n    # Multiply the numerator by the modular inverse of the denominator to get the remainder divided by 5\n    remainder_mod_5 = (numerator_mod * denominator_inverse_mod) % 5\n\n    return remainder_mod_5\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        if (1000 + 60 + y) % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    divisible_by_2 = lambda x: x % 2 == 0\n    divisible_by_3 = lambda x: sum(int(digit) for digit in str(x)) % 3 == 0\n    divisible_by_5 = lambda x: x % 5 == 0\n\n    for num in range(4999, 4900, -1):\n        if divisible_by_2(num) and divisible_by_3(num) and divisible_by_5(num):\n            return num\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n    equation2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    equation3 = Eq(cars, lorries)\n\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # Sum of first n natural numbers\n    n = 100\n    sum_n = n * (n + 1) // 2\n    \n    # Sum of cubes of first n natural numbers = (Sum of first n natural numbers)^2\n    sum_cubes = sum_n ** 2\n    \n    # Calculate the required fraction\n    answer = sum_cubes / sum_n\n\n    return answer\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let j be the mass of the empty jar, and c be the mass of one chocolate.\n    \n    # From the given, we have two equations:\n    # j + 5c = 185 (Equation for jar with 5 chocolates)\n    # j + 17c = 317 (Equation for jar with 17 chocolates)\n\n    # We can solve these equations to find j and c.\n    # Subtracting the first equation from the second gives us:\n\n    c = (317 - 185) / (17 - 5)  # (Equation for the mass of one chocolate)\n    \n    # Now we can use c to find j from the first equation:\n    j = 185 - 5 * c\n    \n    # Now, we find the mass of the jar with 10 chocolates:\n    mass_with_10_chocolates = j + 10 * c\n    \n    return int(mass_with_10_chocolates)\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150  # Ana's height in cm\n    olaf_height = ana_height - 116  # Olaf's height based on the information given\n\n    kristoff_height = 5.5 * olaf_height  # Kristoff's height based on the information given\n    height_diff_kristoff_ana = kristoff_height - ana_height  # The difference between Kristoff's and Ana's height\n\n    return height_diff_kristoff_ana\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    for x in range(100, 1000):\n        num = int(\"1992\" + str(x))\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n\n    # Define the symbols for the number of each fruit\n    apples, pears, mangoes = symbols('apples pears mangoes', integer=True)\n\n    # Given ratios and cost per apple\n    cost_per_apple = 0.60\n    total_cost = 150\n\n    # From the problem, we have the following relationships:\n    # Cost ratios\n    cost_ratio_apples_pears = Rational(3, 2)\n    cost_ratio_pears_mangoes = Rational(1, 5)\n\n    # Quantity ratios\n    quantity_ratio_pears_apples = Rational(4, 5)\n    quantity_ratio_mangoes_apples = Rational(2, 5)\n\n    # Equations based on the ratios and total cost\n    equation1 = Eq(pears, apples * quantity_ratio_pears_apples)\n    equation2 = Eq(mangoes, apples * quantity_ratio_mangoes_apples)\n    equation3 = Eq(cost_per_apple * apples * 3, cost_per_apple * pears * 2)\n    equation4 = Eq(cost_per_apple * pears * 1, cost_per_apple * mangoes * 5)\n    equation5 = Eq(cost_per_apple * apples + cost_per_apple * pears / cost_ratio_apples_pears + cost_per_apple * pears / cost_ratio_pears_mangoes, total_cost)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (apples, pears, mangoes))\n\n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 0.1\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_distance = 800\n    trees = 21\n    intervals = trees - 1\n\n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n\n    jessica_age_difference = 3\n    jessica_current_age = hazel_current_age - jessica_age_difference\n\n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n\n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half_year_kwh = 366\n    second_half_year_kwh = 65 * 6  # 6 months in the second half of the year\n    total_kwh = first_half_year_kwh + second_half_year_kwh\n    total_months = 12\n\n    average_per_month = total_kwh / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = \"ELEMENT\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    return numerator // denominator\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n        \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_for_six = 6 * 92\n    total_for_five = 5 * 94\n    score_sixth = total_for_six - total_for_five\n    return score_sixth\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    # Variables for the price, selling price, and the profit\n    cost_price_per_pair = 65\n    selling_price_per_pair = 74\n    total_profit = 440\n    remaining_pairs = 5\n\n    # Calculate the number of sold pairs when the profit is 440\n    sold_pairs = total_profit / (selling_price_per_pair - cost_price_per_pair)\n\n    # The total number of pairs initially is the sum of the sold pairs and the remaining pairs\n    total_pairs = sold_pairs + remaining_pairs\n\n    return int(total_pairs)\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # 5:30 PM is halfway through, so that's the midpoint time.\n    midpoint_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    \n    # The musical ended at 7:15 PM.\n    end_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    \n    # Duration of the second half is the difference between the end time and midpoint time.\n    second_half_duration = end_time - midpoint_time\n    \n    # The first half duration is the same as the second half.\n    first_half_duration = second_half_duration\n    \n    # The start time is the midpoint time minus the duration of the first half.\n    start_time = midpoint_time - first_half_duration\n    \n    # Format the start time into the format \"H:M\" AM/PM\n    ans = start_time.strftime(\"%I:%M %p\")\n    \n    return ans\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    final_cars = 30\n    cars_exit = 10\n    cars_enter = 8\n\n    initial_cars = final_cars - cars_enter + cars_exit\n\n    return initial_cars\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(((x * 2) / 4)**2 - 4, 6 * 10)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    water_per_day = 10\n    leak_per_night = 3\n    days_passed = 0\n    current_water = 3  # Today, the pipe fills up 3 liters of water into the pool\n\n    while current_water < total_water_needed:\n        days_passed += 1\n        current_water += water_per_day - leak_per_night\n    \n    return days_passed\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n    \n    amy_visit = 24\n    ginny_visit = 36\n    \n    lcm = (amy_visit * ginny_visit) // gcd(amy_visit, ginny_visit)\n    \n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    seconds_in_half_hour = 30 * 60  # 30 minutes * 60 seconds\n    digits_written = 0\n    current_number = 0\n    \n    while digits_written + len(str(current_number + 1)) <= seconds_in_half_hour:\n        current_number += 1\n        digits_written += len(str(current_number))\n    \n    return current_number\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    fractions = [(1/2) * 30, (1/3) * 36, (1/4) * 40, (1/5) * 60, (1/6) * 96]\n    min_fraction = min(fractions)\n    max_fraction = max(fractions)\n    difference = max_fraction - min_fraction\n    return difference\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%M %p\")\n    gameplay_duration = timedelta(minutes=225)\n    start_time = end_time - gameplay_duration\n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    num_teams = 20\n    matches = comb(num_teams, 2)\n    return matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_in_1_minute = toys_in_3_minutes / 3\n    return toys_in_1_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance_climbed = 6 * 6 + 2  # 6 days * 6 meters per day + 2 meters on the 7th day\n    remaining_distance_to_climb = 20 - total_distance_climbed  # Total Well Depth - distance already climbed\n    nightly_slide = 6 - remaining_distance_to_climb  # Daily climb - remaining distance gives the nightly slide\n    return nightly_slide\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # In the worst case, Darrell must draw all marbles that are not green before getting the first green one\n    blue = 5\n    white = 9\n    black = 2\n    # No need to consider green marbles as we are looking for the first green one\n\n    # Total number of non-green marbles\n    non_green = blue + white + black\n\n    # Darrell must draw all non-green marbles + 1 to ensure the first green marble\n    return non_green + 1\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    \n    for year in range(1, years + 1):\n        initial_rabbits = (initial_rabbits * 3) / 2\n    \n    ans = int(initial_rabbits)\n    return ans\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Hence, the total number of games is the combination of 8 taken 2 at a time.\n    # Since the players record different number of wins, the maximum number of wins\n    # is one less than the total number of players because the champion cannot win against themselves.\n    total_players = 8\n\n    # The champion wins against all other players\n    max_wins = total_players - 1 \n\n    return max_wins\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2  # Calculate how many puffs Minah can make in one hour\n    hours_for_120 = 120 / puffs_per_hour  # Calculate how many hours it takes to make 120 puffs\n\n    return hours_for_120\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight1 = 6  # mg\n    nickel_pct1 = 45 / 100  # converting percentage to a decimal\n    weight2 = 14  # mg\n    nickel_pct2 = 60 / 100  # converting percentage to a decimal\n\n    nickel_weight1 = weight1 * nickel_pct1\n    nickel_weight2 = weight2 * nickel_pct2\n\n    total_nickel = nickel_weight1 + nickel_weight2\n    total_weight = weight1 + weight2\n\n    concentration = (total_nickel / total_weight) * 100  # converting back to percentage\n\n    return concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for a in range(1, 13):\n        for b in range(1, 13 - a):\n            for c in range(1, 13 - a - b):\n                d = 13 - a - b - c\n                product = a * b * c * d\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    equation = Eq(32 + years, 3 * (8 + years))\n\n    ans = solve(equation, years)[0]\n    return ans\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1cm represents 6m\n    plan_length_cm = 5  # Length of the playground on the plan in cm\n    \n    real_length_m = plan_length_cm * scale_ratio  # Real length in meters\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    total_money = 250\n    cost_per_box = 6\n    \n    number_of_boxes = total_money // cost_per_box\n    \n    return number_of_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n = 1\n    while True:\n        # The total number of students in the initial square array is (n^2 + 11).\n        # After adding one row and one column, the total becomes ((n+1)^2).\n        # The difference in the number of students needed is ((n+1)^2) - (n^2 + 11) = 12.\n        if ((n + 1) ** 2) - (n ** 2 + 11) == 12:\n            return n ** 2 + 11\n        n += 1\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = 15\n    boys_apples = 30\n    girls_apples = 20\n    total_average = 26\n\n    girls = symbols('girls')\n    total_apples = boys * boys_apples + girls * girls_apples\n    total_people = boys + girls\n    average_equation = Eq(total_apples / total_people, total_average)\n\n    num_girls = solve(average_equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_tank_A = 673\n    oil_tank_B = oil_tank_A + 56\n    return oil_tank_B\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let the walking speed of Candy be x meters per minute\n    # Then the walking speed of Ivy is x + 20 meters per minute\n    \n    # Since they meet each other after 12 minutes and Candy started 6 minutes later,\n    # Ivy has been walking for 18 minutes.\n    # So, Ivy's distance is (x + 20) * 18\n    # Candy's distance is x * 12\n    \n    # The total distance they covered is the distance between their houses\n    # (x + 20) * 18 + x * 12 = 1200\n    \n    # Now we solve this equation for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 20) * 18 + x * 12, 1200)\n    speed_of_candy = solve(equation, x)\n    \n    return speed_of_candy[0]\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    basketball_cost = 30\n    volleyball_cost = 25\n    \n    # Hypothesis: all are volleyballs initially\n    all_volleyball_cost = total_items * volleyball_cost\n    \n    # Calculate the difference between all volleyballs cost and total cost\n    cost_difference = total_cost - all_volleyball_cost\n    \n    # Price difference between a basketball and a volleyball\n    price_difference = basketball_cost - volleyball_cost\n    \n    # Number of basketballs is the cost difference divided by price difference\n    num_basketballs = cost_difference // price_difference\n    \n    return num_basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15e6  # Total wealth in pounds\n    richie_share = total_wealth * (1/3)  # Richie's share\n\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)  # Thrifty's share\n\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)  # Bounty's share\n\n    remaining_after_bounty = remaining_after_thrifty - bounty_share\n    archie_share = remaining_after_bounty  # Archie's share\n\n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    candy_given_to_lily = total_candy * (3/4)\n    remaining_candy = total_candy - candy_given_to_lily\n    candy_given_to_brother = remaining_candy * (1/3)\n    candy_left = remaining_candy - candy_given_to_brother\n    \n    return int(candy_left)\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/i for i in range(1, n)) for n in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roy, dennis = symbols('roy dennis')\n\n    # total money\n    equation1 = Eq(roy + dennis, 340)\n\n    # money after spending\n    equation2 = Eq(dennis - (dennis / 4), 2 * (roy - (2 * roy / 3)))\n\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Dennis's money after spending\n    dennis_money_after_spending = solutions[dennis] - (solutions[dennis] / 4)\n\n    return dennis_money_after_spending\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    # Let x be the total mass of mint candies in each container\n    # Since the fraction of mint candies to chocolate candies is the same,\n    # the mass of chocolate candies is also x in each container\n    # Let y1, y2, y3 be the total mass of the three different sized containers\n    # Then, strawberry candies mass in each container will be (2/5)*y1, (2/7)*y2, (2/9)*y3\n\n    # According to the problem, we have three equations:\n    # y1 = 2/5*y1 + 2*x (container 1)\n    # y2 = 2/7*y2 + 2*x (container 2)\n    # y3 = 2/9*y3 + 2*x (container 3)\n    \n    # Total mass of all containers: y1 + y2 + y3 = 1371\n    # Now we solve the system of equations to find the values of y1, y2, y3 and x\n    \n    # Rearrange equations to express y1, y2, y3 in terms of x\n    # y1 = (2*x) / (1 - 2/5)\n    # y2 = (2*x) / (1 - 2/7)\n    # y3 = (2*x) / (1 - 2/9)\n    \n    # Calculate the multipliers for x\n    m1 = 1 / (1 - 2/5)\n    m2 = 1 / (1 - 2/7)\n    m3 = 1 / (1 - 2/9)\n    \n    # Now the total mass equation is m1*x + m2*x + m3*x = 1371\n    # Solve for x\n    x = 1371 / (m1 + m2 + m3)\n    \n    # Now we can calculate the mass of strawberry candies in all containers\n    strawberry_mass = (2/5) * (m1 * x) + (2/7) * (m2 * x) + (2/9) * (m3 * x)\n    return strawberry_mass\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n\n    saturday = friday + 27\n    sunday = friday - 14\n    total = friday + saturday + sunday\n\n    equation = Eq(total, 475)\n    sold_friday = solve(equation, friday)\n\n    return sold_friday[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    pages, digits = 0, 0\n\n    while True:\n        pages += 1\n        digits += len(str(pages))\n        \n        if digits == 300:\n            return pages\n        elif digits > 300:\n            return pages - 1\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    num_balls = 8\n    num_hula_hoops = 6\n    cost_per_ball = 20.45\n\n    total_cost_balls = num_balls * cost_per_ball\n    total_cost_hula_hoops = total_cost - total_cost_balls\n    cost_per_hula_hoop = total_cost_hula_hoops / num_hula_hoops\n\n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import factorint, sqrt\n\ndef solution():\n    num = 693\n    # Factor the number to get the prime factors and their exponents\n    factors = factorint(num)\n    # Determine the exponents that need to be doubled to make the number a perfect square\n    perfect_square_multipliers = {factor: (2 - (exponent % 2)) % 2 for factor, exponent in factors.items()}\n    # Compute the smallest whole number which when multiplied makes the product a perfect square\n    smallest_multiplier = 1\n    for factor, exponent in perfect_square_multipliers.items():\n        if exponent > 0:\n            smallest_multiplier *= factor ** exponent\n    return smallest_multiplier\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Find the unit digit of each of the terms individually.\n\n    # For 13^242, since 13 ends with 3 and powers of 3 have a cycle of 4 in their unit digits (3, 9, 7, 1), we take 242 % 4 to find the position in the cycle.\n    unit_digit_13_242 = (3**(242 % 4)) % 10\n    \n    # For 17^379, the unit digit cycle for 7 is also 4 (7, 9, 3, 1), so 379 % 4 to find the position in the cycle.\n    unit_digit_17_379 = (7**(379 % 4)) % 10\n    \n    # For 4^2012, the unit digit cycle for 4 is 2 (4, 6), so 2012 % 2 to find the position in the cycle.\n    unit_digit_4_2012 = (4**(2012 % 2)) % 10\n\n    # Finally, add and multiply the unit digits.\n    ans = (unit_digit_13_242 + unit_digit_17_379 * unit_digit_4_2012) % 10\n\n    return ans\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_drunk = 9\n    container_volume = 5\n    \n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drunk\n    \n    containers_needed = remaining_juice / container_volume\n    containers_needed = -(-containers_needed // 1)  # Ceiling division for number of containers\n\n    return int(containers_needed)\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable A\n    A = symbols('A')\n\n    # Define the equation based on the nested fractions\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64 / 27)\n\n    # Solve the equation for A\n    solution = solve(equation, A)\n\n    # There may be multiple solutions, we return the first one\n    return solution[0]\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers each person originally had\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Given conditions\n    equation1 = Eq(marry, (7/5) * alexis)  # Marry had 7/5 times as many stickers as Alexis\n    equation2 = Eq(charlotte, (1 + 80/100) * (charlotte + (1/5) * (marry + alexis)))  # Charlotte's stickers increased by 80%\n    equation3 = Eq(marry - (1/5) * marry, charlotte + 20)  # Marry had 20 more stickers than Charlotte after giving away 20%\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marry, alexis, charlotte))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    cost_per_kg = 7.50\n    steak_weight = 3.5  # 3 and 1/2 kg\n    total_cost = cost_per_kg * steak_weight\n    money_given = 20\n    additional_money_needed = total_cost - money_given\n    return additional_money_needed if additional_money_needed > 0 else 0\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_start = 12\n    position_from_end = total_people - position_from_start + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mass_light = symbols('mass_light')\n    equation = Eq(6 * mass_light + 6 * (2 * mass_light), 65.7)\n    \n    mass_light_sol = solve(equation, mass_light)\n    \n    return round(mass_light_sol[0])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    total_money = 705\n    calc_price = 34\n    racket_price = 63\n\n    equation1 = Eq(benson + clive, total_money)\n    equation2 = Eq(benson - calc_price, clive - racket_price)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    ans = 6.5 + 2.55\n    return ans\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    # The first digit cannot be 0, so it ranges from 1 to 9.\n    # The second digit can be anything from 0 to 9.\n    # The last two digits are determined by the first two to make it a palindrome.\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # Each combination of i and j gives one palindromic number.\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n\n    return sweets_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let's denote Denise's number of pens as D and Jay's as J.\n    # According to the problem, Jay has 6 times as many pens as Denise:\n    # J = 6 * D\n    # They have altogether 126 pens:\n    # J + D = 126\n\n    # Substituting J from the first equation into the second, we get:\n    # 6 * D + D = 126\n    # 7 * D = 126\n    # D = 126 / 7\n    # D = 18\n\n    denise_pens = 126 / 7\n    return int(denise_pens)\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 / 7\n    return ans\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    cost_of_chocolates = 5 * 1.26\n    cost_per_cookie = cost_of_chocolates / 6\n    total_cost_of_cookies = 4 * cost_per_cookie\n    money_left = 9.05 - total_cost_of_cookies\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_balls = 250\n    total_children = 650\n\n    # 3 boys share 1 ball, 2 girls share 1 ball\n    equation1 = Eq(boys / 3 + girls / 2, total_balls)\n    equation2 = Eq(boys + girls, total_children)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for girls (g) and boys (b) before any of them left the classroom\n    g, b = symbols('g b')\n\n    # Equation 1: After 25 girls leave, the number of girls becomes 2/3 of the number of boys\n    equation1 = Eq(g - 25, 2/3 * b)\n\n    # Equation 2: After 15 boys leave, the number of girls is equal to the number of boys\n    equation2 = Eq(g - 25, b - 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students initially (sum of girls and boys before anyone left)\n    initial_students = solutions[g] + solutions[b]\n\n    return initial_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(10):\n            for one in range(10):\n                if (hundred + ten + one) == 8 and (hundred * 100 + ten * 10 + one) % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1, 1000):  # Iterating through a reasonable range of numbers\n        if 8*11 == i*9 + 34:\n            return i\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n\n    midnight_temp = midday_temp - decrease\n\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let x be the number of $0.10 coins and y be the number of $0.50 coins.\n    # According to the ratio 8:3, we have x / y = 8 / 3\n    # The value of the $0.10 coins is 0.10 * x, and the value of the $0.50 coins is 0.50 * y.\n    # The total value of the coins is $75.90.\n    # So, 0.10 * x + 0.50 * y = 75.90\n    # We also know from the ratio that x = (8/3) * y.\n    # Substituting into the total value equation: 0.10 * (8/3) * y + 0.50 * y = 75.90\n\n    from sympy import symbols, Eq, solve\n\n    # Symbolic variables for the number of coins\n    y = symbols('y')\n\n    # Equation derived from the problem\n    equation = Eq(0.10 * (8/3) * y + 0.50 * y, 75.90)\n\n    # Solve the equation for y\n    solutions = solve(equation, y)\n\n    # The total value of $0.50 coins\n    value_of_50_cent_coins = 0.50 * solutions[0]\n\n    return value_of_50_cent_coins\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_side_length = 7\n    hole_side_length = 3\n    volume = 320\n\n    # Calculate the area of the base with the hole\n    base_area = base_side_length**2 - hole_side_length**2\n\n    # Calculate the height of the prism using the volume formula\n    height = volume / base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Considering Amy and Judy as one unit, we have 7 units to arrange in a circle.\n    # The number of arrangements for n units in a circle is (n-1)!\n    # For 7 units, the number of arrangements is 6!\n    arrangements_units = factorial(6)\n    \n    # Amy and Judy can switch places with each other, which is 2! ways\n    arrangements_amy_judy = factorial(2)\n    \n    # The total number of different orders is the product of the two possibilities\n    total_arrangements = arrangements_units * arrangements_amy_judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # At each cut, we can increase the number of pieces by at most the number of cuts made so far plus 1.\n    # Let's find the least number of cuts such that the number of pieces is at least 46.\n    cuts = 0\n    pieces = 1  # Start with a single piece of paper\n    while pieces < 46:\n        cuts += 1\n        pieces += cuts\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    i = 0\n    total = 0\n    while total < 2008:\n        i += 1\n        total += i\n    overshoot = total - 2008\n    ans = i - overshoot\n    return ans\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    weight_of_x = 1.5  # weight of one x in grams\n    # Since 3 xs balance with 10 ys, the total weight of 3 xs is equal to the weight of 10 ys\n    total_weight_of_xs = 3 * weight_of_x  # total weight of 3 xs\n    weight_of_y = total_weight_of_xs / 10  # weight of one y\n    \n    return weight_of_y\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    # Arithmetic sequence: a, a+d, a+2d, ..., a+(n-1)d\n    a = 6  # First term\n    d = 4  # Common difference (10-6)\n    # Calculate the number of terms n using the difference between consequent terms\n    n = (26 - 6) / d + 1  # Last term is 26\n\n    # Sum of arithmetic sequence: n/2 * (2a + (n - 1)d)\n    sum_seq = n / 2 * (2 * a + (n - 1) * d)\n    return int(sum_seq)\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) / 3\n    return int(cucumbers)\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    three_digit_numbers = list(permutations(digits, 3))\n    count = len(three_digit_numbers)\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    # Since we need three-digit numbers, the first digit (hundreds place) can't be 0.\n    for x in range(1, 6):  # x represents the first digit\n        for y in range(0, 6):  # y represents the second digit\n            z = 5 - x - y  # z represents the third digit\n            if 0 <= z <= 9:  # the third digit must also be a single digit number\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_numbers = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            sum_numbers += i\n    return sum_numbers\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Arithmetic sequence: a_n = a_1 + (n - 1)d\n    # Given a_16 = 100, d = 6, find the sum of first 31 terms\n\n    # To find a_1, subtract (16 - 1) * 6 from the 16th term\n    a_16 = 100\n    d = 6\n    a_1 = a_16 - (16 - 1) * d\n\n    # Sum of n terms of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    n = 31\n    a_n = a_1 + (n - 1) * d\n    S_n = n / 2 * (a_1 + a_n)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_to_avril = total_bags // 3\n    remaining_for_pip = total_bags - given_to_avril\n    return remaining_for_pip\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # Since there are 7 matches and Chris has the opportunity to \n    # ensure his victory in the first move, he should aim to leave \n    # Dylan in a position where Dylan's optimal move will ultimately\n    # lead to Chris's win. To get to the nature of that position,\n    # let's consider that leaving exactly 5 matches (3 less than 7)\n    # after the first move gives Chris the upper hand.\n    # With 5 matches remaining, no matter if Dylan takes 1 or 2 matches,\n    # Chris can then take 2 or 1 matches respectively, leaving 2 matches.\n    # Then, Dylan is forced to leave at least one match for Chris.\n    # So, Chris must take away 7 - 5 = 2 matches in the first turn\n    # to ensure his victory following the strategy.\n\n    return 2\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "def solution():\n    for A in range(1,10):\n        for B in range(0,10):\n            for C in range(0,10):\n                if A != B and B != C and A != C:\n                    ABC = 100 * A + 10 * B + C\n                    return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('0123456789', 5):\n        A, B, C, D, E = p\n        ABAC = int(A + B + A + C)\n        DBEC = int(D + B + E + C)\n        ACEDC = int(A + C + E + D + C)\n        if ABAC + DBEC == ACEDC and A != '0' and D != '0':\n            return int(DBEC)\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time_hours = 9\n    start_time_minutes = 23\n    \n    end_time_hours = 13  # 1:06 PM is the same as 13:06 in 24-hour format\n    end_time_minutes = 6\n    \n    start_total_minutes = (start_time_hours * 60) + start_time_minutes\n    end_total_minutes = (end_time_hours * 60) + end_time_minutes\n    \n    minutes_between = end_total_minutes - start_total_minutes\n    \n    return minutes_between\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    return (64 + 36) * (64 - 36)\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    ans = 7 * 5 * 2  # assuming there are 7 Italian, 5 Chinese, and 2 Indian restaurants\n    return ans\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    numbers = list(range(1, 10)) + list(range(8, 0, -1))\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = (53-50) + (47-44) + (41-38) + (35-32) + (29-26) + 23\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48  # in meters\n    walking_speed = 8  # meters per minute\n    time_taken = distance_to_market / walking_speed  # in minutes\n    return int(time_taken)  # convert to integer in case it's a float\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    for A in range(1, 10):\n        for E in range(10):\n            if A != E:\n                AEEA = int(f\"{A}{E}{E}{A}\")\n                return AEEA\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    # Number of people in the family\n    num_people = 4\n    \n    # The average age of the family\n    avg_age = 25\n    \n    # The sum of ages in the family\n    total_age = avg_age * num_people\n    \n    # The ages of the family members that we know\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    \n    # Calculate Harry's dad's age\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    \n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    measurements = [8300, 200, 8, 50]  # Convert all measurements to centimeters\n    door_height_cm = 200  # Classroom door height in cm (approx)\n\n    closest_measurement = min(measurements, key=lambda x: abs(x - door_height_cm))\n    \n    return closest_measurement\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_used = 0\n    page_number = 0\n\n    while digits_used < 450:\n        page_number += 1\n        digits_used += len(str(page_number))\n\n    # At this point, the page_number has exceeded the limit, so we return the previous page\n    return page_number - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    # Let x be the total amount of money Leonard had initially\n    # After spending 5/12 of his money on lunch, he had (1 - 5/12)x = 7/12x left\n    # He then spends 2/7 of the remaining amount on dinner, leaving (1 - 2/7)(7/12)x = (5/7)(7/12)x\n    # The amount left after purchasing dinner is (5/7)(7/12)x, which is given as $45\n    # Therefore, (5/7)(7/12)x = 45\n    # Solving for x gives us the initial amount of money\n\n    x = 45 / ((5/7) * (7/12))\n    return x\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits = 1524\n    pages = 0\n    current_digit_count = 0\n    page_digit_length = 1\n\n    while current_digit_count < digits:\n        pages += 1\n        current_digit_count += page_digit_length\n\n        if pages == 10 ** page_digit_length:\n            page_digit_length += 1\n    \n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games_played = 5 * (5 - 1) // 2  # total combinations of games, since each plays every other once\n    total_wins = 2 + 1 + 4 + 3  # total wins by the mentioned players\n    gina_wins = total_games_played - total_wins  # total games minus known wins gives Gina's wins\n\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    difference = largest_number - smallest_number\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "import math\n\ndef solution():\n    # Constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    d = 400  # distance along the slope in m\n    theta = 20  # angle of the incline in degrees\n    mu_k = 0.2  # coefficient of kinetic friction\n    \n    # Convert angle to radians for calculations\n    theta_rad = math.radians(theta)\n    \n    # Forces acting on the skier:\n    # Gravity parallel to slope: m * g * sin(theta)\n    # Friction force: mu_k * m * g * cos(theta)\n    # Acceleration a = net force / mass = g(sin(theta) - mu_k * cos(theta))\n    a = g * (math.sin(theta_rad) - mu_k * math.cos(theta_rad))\n    \n    # Using kinematic equation v^2 = u^2 + 2ad, where u(initial velocity) = 0\n    v = math.sqrt(2 * a * d)\n    \n    return v\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let's denote the number of correct answers by Eddie as e_c and Avril as a_c\n    # Also, let the number of incorrect answers by Eddie as e_w and Avril as a_w\n    # Since there are 10 questions in total for each person, we have:\n    # e_c + e_w = 10 (Total questions for Eddie)\n    # a_c + a_w = 10 (Total questions for Avril)\n    \n    # We also know that Eddie got 15 more points than Avril, so:\n    # 10 * e_c - 5 * e_w = 10 * a_c - 5 * a_w + 15\n    \n    # Together, Eddie and Avril got 155 points, so:\n    # 10 * e_c - 5 * e_w + 10 * a_c - 5 * a_w = 155\n    \n    # Now we have two equations:\n    # 10 * (e_c + e_w) - 15 * e_w = 10 * (a_c + a_w) - 15 * a_w + 15\n    # 10 * (e_c + a_c) - 5 * (e_w + a_w) = 155\n    \n    # Substitute e_c + e_w and a_c + a_w with 10:\n    # 100 - 15 * e_w = 100 - 15 * a_w + 15\n    # 10 * (e_c + a_c) - 5 * (20 - (e_c + a_c)) = 155\n\n    # Solve the equations to find the number of correct answers Avril got (a_c)\n    for a_c in range(11):\n        a_w = 10 - a_c\n        e_c = a_c + 3  # because Eddie got 15 more points, equals 3 more correct answers\n        e_w = 10 - e_c\n        if 10 * e_c - 5 * e_w + 10 * a_c - 5 * a_w == 155:\n            return a_c\n\n    return -1  # In case no solution is found, which should not happen\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n    group_price = (4 * shirt_price) + bag_price\n\n    number_of_groups = total_spent // group_price\n    shirts_bought = number_of_groups * 4\n    \n    # Marcus' solution is not correct as he miscalculated the number of shirts bought per group.\n    \n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 6 men take 5 days to complete the job, so 1 man takes 6*5 days to complete the job\n    man_days = 6 * 5\n    # 5 women take 6 days to complete the job, so 1 woman takes 5*6 days to complete the job\n    woman_days = 5 * 6\n    \n    # 1 man's work per day\n    work_per_man_per_day = 1 / man_days\n    # 1 woman's work per day\n    work_per_woman_per_day = 1 / woman_days\n    \n    # Combined work per day of 10 men and 5 women\n    total_work_per_day = (10 * work_per_man_per_day) + (5 * work_per_woman_per_day)\n\n    # total days needed for 10 men and 5 women to complete the job\n    total_days = 1 / total_work_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: 3 times as many boys as girls\n    equation1 = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined, boys = girls\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n    \n    type_A = 56\n    type_B = 96\n    type_C = 120\n\n    # Find the greatest common divisor (gcd) of the three weights\n    greatest_mass = gcd(type_A, gcd(type_B, type_C))\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    min_apples_most = (apples - (children - 1)) // children + 1\n    return min_apples_most\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    for apples in range(24):\n        bananas = 2 * apples\n        oranges = 3 * apples\n        if apples + bananas + oranges == 24:\n            return bananas\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    anna_age = 8 + years\n    mother_age = 44 + years\n\n    equation = Eq(mother_age, 3 * anna_age)\n\n    solution = solve(equation, years)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Assuming May has x pieces of long ribbon and y pieces of short ribbon to total her pieces of ribbon\n    # Nancy has 18 pieces of long ribbon and (x + y - 18) pieces of short ribbon to total her pieces of ribbon\n\n    # Short ribbon length in cm\n    short_ribbon = 40\n    # Long ribbon length in cm\n    long_ribbon = 70\n\n    # May's total ribbon length in cm (7 short pieces + x long pieces)\n    may_total_ribbon = 7 * short_ribbon + long_ribbon * (18 - 7)\n    # Difference in their length (2.4 m = 240 cm)\n    length_diff = 240\n\n    # Nancy's total ribbon length in cm (18 long pieces)\n    nancy_total_ribbon = 18 * long_ribbon\n\n    # The length of May's ribbons was 2.4 m longer than the total length of Nancy's ribbons\n    # may_total_ribbon = nancy_total_ribbon + length_diff\n\n    # Solving for x in terms of the length difference\n    total_may_pieces = 7 + 18\n\n    return total_may_pieces\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for rabbits in range(0, 13):\n        chickens = 12 - rabbits\n        if (rabbits * 4 + chickens * 2) == 34:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = 2.4 * 52 / 100 + 7.6 * 52 / 100\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):  # Start from the largest 2-digit number\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_paint = 1\n    ratio_sum = 3 + 1\n    red_paint = (3 / ratio_sum) * total_paint\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(B - 40, (A + 40) / 3)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    total_numbers = 8\n    mean_of_numbers = 6\n\n    sum_of_given_numbers = sum(numbers)\n    sum_needed_for_mean = mean_of_numbers * total_numbers\n    missing_number = sum_needed_for_mean - sum_of_given_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    quarter_money = total_money / 4\n    money_left = total_money - quarter_money\n    return money_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Given that the pasture can feed 8 cows for 10 days\n    cows_1 = 8\n    days_1 = 10\n    # This means the total amount of grass (resource) is equivalent to 8 * 10 cow-days\n\n    # Given that the pasture can also feed 4 cows for 15 days\n    cows_2 = 4\n    days_2 = 15\n    # This means the total amount of grass (resource) is equivalent to 4 * 15 cow-days\n\n    # Since the amount of grass has to be the same in both scenarios\n    total_grass = cows_1 * days_1  # This equals cows_2 * days_2\n\n    # Want to find out how many cows it can feed for 5 days\n    target_days = 5\n\n    # Total grass is constant, so total grass / number of days = number of cows it can feed\n    cows_for_target_days = total_grass / target_days\n\n    return cows_for_target_days\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    mass_per_packet = 1.02 / 12\n    total_mass = 4 * mass_per_packet\n    return total_mass\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    tapes_total_cost = 3 * tape_cost\n    cds_total_cost = total_cost - tapes_total_cost\n    cost_per_cd = cds_total_cost / 4\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    wrong_divisor = 122  # The divisor Will used without the decimal point\n    wrong_result = 99.396  # The result is less by this amount than the true result\n\n    # wrong_dividend / wrong_divisor = true_result\n    # wrong_dividend / 1.22 = true_result + 99.396\n    # Solving for wrong_dividend we get:\n    wrong_dividend = 1.22 * (wrong_result + 99.396)\n\n    # Now we find the true result by using the correct divisor\n    true_result = wrong_dividend / wrong_divisor\n\n    return true_result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham has\n    # Melissa has twice as many cards, so she has 2x cards\n    # Together they have 876 cards, so x + 2x = 876\n    # Solving for x gives us the number of cards Hisham has\n    x = total_cards // 3  # Hisham's cards\n\n    # Melissa's cards\n    melissa_cards = total_cards - x\n\n    # If Melissa gives y cards to Hisham, they'll have the same number of cards\n    # x + y = melissa_cards - y\n    # Solving for y gives us the number of cards Melissa should give Hisham\n    y = (melissa_cards - x) // 2\n\n    return y\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    final_number = 35\n    initial_number = (final_number - 8) / 3\n    return initial_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n    boys = 28\n    girls = 32\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Let's use variables a, b, c, d, e, f, g to represent the numbers in the sequence\n    # such that a and b are the first two numbers, and g is the seventh number we want to find out\n    # We have the following relations from the problem description:\n    # c = a + b\n    # d = b + c\n    # e = c + d\n    # f = d + e\n    # g = e + f\n    \n    # Given values in the problem\n    d = 6  # fourth number\n    f = 15 # sixth number\n    \n    # Using the relations, we can express e and c in terms of d and f \n    e = f - d # from f = d + e, thus e = f - d\n    c = d - e # from d = c + e, thus c = d - e\n    \n    # Now, we can find b by using c = a + b and the fact that a = c - b\n    # Since d = b + c, we can also express b in terms of c and d\n    b = d - c\n    \n    # Finally, we can find the seventh number g\n    g = e + f\n    \n    return g\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    litres = 1.7\n    millilitres_in_a_litre = 1000\n    n = litres * millilitres_in_a_litre\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    sum_series = 0\n    for i in range(7):\n        numerator = 1\n        denominator = (1 + i * 5) * (6 + i * 5)\n        term = numerator / denominator\n        sum_series += term\n    \n    ans = 36 * sum_series\n    return ans\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # For the child who gets the most apples, let's call the number of apples he gets 'k'.\n    # We want to find the minimum value of 'k' such that the remaining apples can be distributed\n    # among the 7 other children with each getting a different number of apples and at least 1 apple.\n    \n    # We can start with k being the maximum number of apples one child can get, \n    # which is when all other children get just 1 apple each.\n    k = 50 - 7\n    \n    # Then, we reduce k one by one and check whether it's possible\n    # to distribute the remaining apples until all children have a different number of apples.\n    while k > 0:\n        used_apples = sum(range(1, 8))  # 1+2+...+7, the least apples the other kids can get\n        remaining_apples = 50 - k\n        if remaining_apples >= used_apples and len(set(range(1, 8) + [remaining_apples])) == 8:\n            break\n        k -= 1\n    \n    return k\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    min_odd_number = float('inf')\n    \n    for perm in permutations(digits):\n        if perm[0] != 0:  # The first digit should not be 0\n            number = int(''.join(map(str, perm)))\n            if number % 2 != 0:  # Check if the number is odd\n                min_odd_number = min(min_odd_number, number)\n    \n    return min_odd_number\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men can complete the job in 16 days\n    # So, 1 man can complete the job in 24 * 16 days\n    man_days = 24 * 16\n    \n    # 16 women can complete the same job in 24 days\n    # So, 1 woman can complete the job in 16 * 24 days\n    woman_days = 16 * 24\n    \n    # Now, 1 man's 1 day's work is 1/man_days\n    # And 1 woman's 1 day's work is 1/woman_days\n    \n    # 10 men's 1 day's work is 10 / man_days\n    # 6 women's 1 day's work is 6 / woman_days\n    \n    # Both men and women's 1 day work is\n    one_day_work = 10 / man_days + 6 / woman_days\n    \n    # Number of days needed to complete the job by 10 men and 6 women\n    num_days = 1 / one_day_work\n    \n    return num_days\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # When n rectangles are added one by one, the maximum number of regions (Rn) formed can \n    # be found using the formula Rn = R(n-1) + n. For the first four rectangles, it's calculated as follows:\n    # R1 = 2 (1 rectangle divides the plane into 2 regions)\n    # R2 = R1 + 2 = 2 + 2 = 4 (2 rectangles can divide the plane into 4 regions at most)\n    # R3 = R2 + 3 = 4 + 3 = 7 (3 rectangles can divide the plane into 7 regions at most)\n    # R4 = R3 + 4 = 7 + 4 = 11 (4 rectangles can divide the plane into 11 regions at most)\n    \n    ans = 2 + 2 + 3 + 4  # This directly calculates R4 based on the above explanation\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    \n    equation = Eq(marion - ethan, -168)\n\n    solution_julie = solve(equation, julie)\n\n    julie_amount = solution_julie[julie]\n    marion_amount = 2 * julie_amount\n    ethan_amount = 5 * julie_amount\n\n    total_earnings = julie_amount + marion_amount + ethan_amount\n\n    return total_earnings\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    import math\n    # total number of people\n    total_people = 5\n    # number of positions Eddie can take (not the middle one)\n    eddie_positions = total_people - 1\n    # number of ways to arrange the remaining people\n    # after Eddie's position has been fixed\n    remaining_people_arrangements = math.factorial(total_people - 1)\n\n    # total number of ways they can line up\n    total_ways = eddie_positions * remaining_people_arrangements\n\n    return total_ways\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Since the sequence must be a geometric sequence, we need to find the common ratio.\n    # Divide 24 by 12 to find the common ratio.\n    ratio = 24 / 12\n    \n    # Now, we find n by dividing 96 by the common ratio.\n    n = 96 / ratio\n    \n    return int(n)\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total sum of money Hamid had initially.\n    x = symbols('x')\n\n    # After spending 1/3 of his money on a watch, he has 2/3 left.\n    # After spending $56 on a tie, he has (2/3)x - 56 left.\n    # According to the problem, he is left with 3/8 of the sum of money he had at first.\n    # Therefore, (2/3)x - 56 = (3/8)x.\n\n    equation = Eq((2/3)*x - 56, (3/8)*x)\n\n    # Solve for x\n    total_money = solve(equation, x)[0]\n\n    # Calculate how much he spent in total by subtracting what he had left ((3/8)*x) from the total.\n    spent_total = total_money - (3/8)*total_money\n\n    return spent_total\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = '123456789'\n    min_value = float('inf')\n    for perm in permutations(all_digits):\n        num = int(''.join(perm))\n        if num % 11 == 0 and num < min_value:\n            min_value = num\n    return min_value\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # Eddie's speed in m/s\n    train_speed = 57  # Train's speed in m/s\n    time_to_pass = 10  # Time to pass Eddie in seconds\n\n    # Relative speed is the speed of the train as seen by Eddie\n    relative_speed = train_speed + eddie_speed  # We add both speeds because they are in opposite directions\n\n    # Relative speed * Time = Length of the train\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    operations = ['+', '*']\n    for comb in product(operations, repeat=3):\n        expression = f\"1{comb[0]}2{comb[1]}3{comb[2]}4\"\n        max_value = max(max_value, eval(expression))\n    return max_value\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    for correct_answers in range(13):  # from 0 to 12 answers\n        incorrect_or_unanswered = 12 - correct_answers\n        score = correct_answers * 8 - incorrect_or_unanswered * 3\n        if score == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # in meters\n    bridge_length = 900  # in meters\n    speed = 400  # in meters per minute\n\n    total_distance = train_length + bridge_length  # total distance to cover\n    time = total_distance / speed  # total time required\n\n    return time\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Initialize variables for the given sums and number of terms\n    sum_first_5 = 10\n    sum_last_5 = 120\n    total_numbers = 60\n    \n    # Calculate the average of the first and last 5 numbers on the sequence\n    average_first_5 = sum_first_5 / 5\n    average_last_5 = sum_last_5 / 5\n    \n    # Calculate the first and last term using the properties of arithmetic sequences\n    first_term = average_first_5 - 2 * (average_last_5 - average_first_5) / (total_numbers - 5)\n    last_term = average_last_5 + 2 * (average_last_5 - average_first_5) / (total_numbers - 5)\n    \n    # Calculate the sum of the arithmetic sequence using the formula S = n/2 * (a1 + an)\n    sum_total = total_numbers / 2 * (first_term + last_term)\n    \n    return sum_total\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, a + b\n        a %= 3  # Only remainders are important for the final answer\n        b %= 3  # Only remainders are important for the final answer\n    return b % 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n    original_diff = 40\n\n    # Sam had 40 more stickers than Peter initially\n    equation1 = Eq(sam, peter + original_diff)\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam\n    # Peter gives 25% of his stickers to Sam\n    peter_gives = 0.25 * peter\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - sam_gives + peter_gives, peter + sam_gives - peter_gives + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel, mom = symbols('hazel mom')  # Define the variables for Hazel's and her mom's current ages.\n\n    # Hazel will be three times her current age in 12 years.\n    equation1 = Eq(hazel + 12, 3 * hazel)\n\n    # On Hazel's 18th birthday, her mom will be three times her age then.\n    equation2 = Eq(mom + 18, 3 * (hazel + 18))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (hazel, mom))\n    hazel_age_now = solutions[hazel]\n    mom_age_now = solutions[mom]\n\n    return mom_age_now\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    while True:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        if peter_age == pip_age + pit_age:\n            break\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_series = (n * (n + 1) // 2) ** 2\n    return sum_of_series\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # We need to think worst case scenario for the pigeonhole principle\n    # There are 13 possible consecutive groups without any guarantee (1-2, 2-3, ..., 12-13, 13-1)\n    # In the worst case, we can have one card from each non-consecutive group, which makes 13\n    # To ensure we have a consecutive pair, we need 1 more card beyond those 13\n    # Hence, we need to draw 14 cards to ensure at least two of them are consecutive numbers\n    \n    return 14\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    total_sheets = 36 // 4  # Total sheets as 36 is the back page number\n    sheet_number = (5 - 1)  # Because unfolded page is 5th sheet, and sheets start from 0\n\n    # Since each sheet contains 4 pages, and we treat the first page as 0th\n    first_page_of_fifth_sheet = sheet_number * 4\n\n    # Determine the numbers of pages on both sides of the 5th sheet\n    page_numbers = [\n        first_page_of_fifth_sheet + 1,\n        first_page_of_fifth_sheet + 2,\n        total_sheets * 4 - (first_page_of_fifth_sheet + 1),\n        total_sheets * 4 - (first_page_of_fifth_sheet)\n    ]\n    sum_of_pages = sum(page_numbers)\n    return sum_of_pages\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) // 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    for a in range(1, 29):  # Since M leaves a remainder when divided by 28, 'a' has to be less than 28\n        # Start from a value higher than 28, as we are looking for the smallest M\n        for M in range(29, 1000):  # Limit search to a reasonable range to find the smallest M\n            rem7 = M % 7\n            rem9 = M % 9\n            rema = M % a\n            rem28 = M % 28\n            # Check if M leaves remainders in an increasing arithmetic pattern for divisors 7, 9, a, 28\n            if (rem9 - rem7 == rema - rem9 == rem28 - rema) and (rem7 < rem9 < rema < rem28):\n                return M  # Return the smallest M found that satisfies the condition\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    original_cost = symbols('original_cost')\n    number_of_laptops = symbols('number_of_laptops')\n    \n    # Given values\n    selling_price = 2000  # given selling price for each laptop\n    original_profit = 60000  # original profit\n    profit_increase_percentage = 0.30  # 30% increase in profit\n    \n    # Equations based on the problem statement\n    # Profit = (Selling Price - Cost Price) * Number of Laptops\n    # Original Profit: (2000 - original_cost) * number_of_laptops = 60000\n    # New Cost Price is 1/5 less than the original: new_cost = original_cost - original_cost/5\n    # New Profit which is 30% more: (2000 - new_cost) * number_of_laptops = 60000 * (1 + profit_increase_percentage)\n    \n    # Equation for the original scenario\n    eq1 = Eq((selling_price - original_cost) * number_of_laptops, original_profit)\n    \n    # Equation for the scenario after the cost decrease and profit increase\n    eq2 = Eq((selling_price - (original_cost - original_cost/5)) * number_of_laptops, \n             original_profit * (1 + profit_increase_percentage))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (original_cost, number_of_laptops))\n    \n    return solutions[number_of_laptops]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seats = num_terms * (first_term + last_term) // 2\n\n    return sum_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    num_digits = sum(len(str(i)) for i in range(1, 130))\n    return num_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_students = 0\n    boys = girls = 0\n    # Since the square is filled layer by layer, start with the largest possible square of boys\n    # and work inwards, alternately adding squares of boys and girls.\n    layer = 0\n    while True:\n        side_length = layer * 2 + 1\n        students_in_layer = side_length ** 2\n        # Check if the current layer is boy or girl by using layer % 2.\n        if layer % 2 == 0:\n            boys += students_in_layer\n        else:\n            girls += students_in_layer\n        # Check if the difference is 36.\n        if boys - girls == 36:\n            total_students = boys + girls\n            break\n        # Prepare for the next layer\n        layer += 1\n        \n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of men initially\n    men_initial = 3\n    # Number of days it takes for initial men to dig the trench\n    days_initial = 2\n    # Length of the trench dug by initial men\n    length_initial = 120\n\n    # Number of men to dig the new trench\n    men_new = 4\n    # Length of the new trench to be dug\n    length_new = 880\n    \n    # Work done by initial men in one day\n    work_initial = men_initial * length_initial / days_initial\n\n    # Work to be done by new men (which is equal to work_initial as work done should be consistent)\n    work_new = work_initial\n\n    # Days taken by new men to dig the new trench\n    days_new = men_new * length_new / work_new\n\n    return days_new\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n\n    # Find combined weekly rate\n    combined_rate = total_people / combined_weeks\n\n    # Gloria's weekly rate\n    gloria_rate = combined_rate - ellie_rate\n\n    # Time for Gloria to finish interviewing alone\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    num = 2 * 15 // 5\n    return num\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let's denote the number of books moved from the first shelf to the second as 'x'.\n    # After moving 'x' books, the first shelf will have (18 - x) books,\n    # and the second shelf will have (24 + x) books.\n    # We want the second shelf to have twice as many books as the first shelf,\n    # so we set up the following equation: 24 + x = 2 * (18 - x)\n    # Solving for x will give us the answer.\n\n    # Rearrange the equation: x + 2x = 36 - 24\n    # Simplify: 3x = 12\n    # Solve for x: x = 12 / 3\n    x = (36 - 24) // 3\n\n    return x\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = (285 + 6/7) + (181 + 10/11) + (153 + 12/13)\n    denominator = 1/7 + 1/11 + 1/13\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pupils in the class\n    x = symbols('x')\n\n    # 5 pupils are in the band\n    band = 5\n\n    # (3/4) of the remaining pupils are in the choir\n    choir = (3/4) * (x - band)\n\n    # (2/9) of the class are neither in the band nor the choir\n    neither = (2/9) * x\n\n    # Formulating the equation based on above information\n    equation = Eq(band + choir + neither, x)\n\n    # Solving the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time taken in seconds\n    distance = 300  # distance of the bridge in meters\n\n    speed = distance / time  # speed = distance / time\n\n    return speed\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left_4 = 32\n    lollipops_last_box_7 = 3\n    \n    for i in range(1, 1000):  # We assume Jonathan doesn't have more than 1000 lollipops\n        total_lollipops = (i * 7) + lollipops_last_box_7\n        if (total_lollipops - lollipops_left_4) % 4 == 0:\n            return total_lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # Since a long tube can hold more balls than a short tube, we'll start by\n    # filling the long tubes first.\n    # We find the maximum number of long tubes we can use without exceeding the total number of balls.\n    max_long_tubes = total_balls // long_tube_capacity\n\n    for long_tubes in range(max_long_tubes + 1):\n        # Calculate remaining balls after using a certain number of long tubes.\n        remaining_balls = total_balls - (long_tube_capacity * long_tubes)\n        # Check if the remaining balls can be exactly filled by short tubes.\n        if remaining_balls % short_tube_capacity == 0:\n            return long_tubes\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    a3 = 8  # third term\n    a9 = 26  # ninth term\n    \n    n3 = 3  # position of the third term\n    n9 = 9  # position of the ninth term\n    n11 = 11  # position of the eleventh term we want to find\n\n    # The formula for the nth term of an arithmetic sequence is a_n = a_1 + (n-1)d\n    # where a_n is the nth term, a_1 is the first term, and d is the common difference.\n    # We can use this to find the common difference first\n\n    # a_3 = a_1 + (3-1)d = a_1 + 2d\n    # a_9 = a_1 + (9-1)d = a_1 + 8d\n    # => a_9 - a_3 = 8d - 2d = 6d\n    \n    d = (a9 - a3) / (n9 - n3)  # common difference\n\n    # Now, we can find the first term a_1\n    a1 = a3 - (n3 - 1) * d\n    \n    # With the common difference and first term, we can find the 11th term\n    a11 = a1 + (n11 - 1) * d\n\n    return a11\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Janice initially has 96 bracelets\n    janice_initial = 96\n    \n    # Let felicia_initial represent the initial amount of bracelets Felicia had\n    # Because Janice bought 2/5 of the bracelets that Felicia sold, which is 2/5 of 3/5 of Felicia's initial amount\n    # and this caused the ratio of Felicia's to Janice's bracelets to become 5:7,\n    # we can set up the following equation:\n    # (felicia_initial - 3/5 * felicia_initial) / (janice_initial + 2/5 * 3/5 * felicia_initial) = 5/7\n    \n    # Simplify the equation as follows:\n    # (2/5 * felicia_initial) / (janice_initial + 6/25 * felicia_initial) = 5/7\n    # Cross multiply to get:\n    # 7 * 2/5 * felicia_initial = 5 * (janice_initial + 6/25 * felicia_initial)\n    # Simplify further:\n    # 14/5 * felicia_initial = 5 * janice_initial + 30/25 * felicia_initial\n    # Calculate a common denominator for the felicia_initial terms and subtract them:\n    # (14/5 - 30/25) * felicia_initial = 5 * janice_initial\n    # (70/25 - 30/25) * felicia_initial = 5 * janice_initial\n    # 40/25 * felicia_initial = 5 * janice_initial\n    # felicia_initial = 5 * janice_initial * 25 / 40\n    # felicia_initial = (5 * 96 * 25) / 40\n    felicia_initial = (5 * janice_initial * 25) / 40\n    \n    # The number of bracelets Janice bought from Felicia is 2/5 of 3/5 of Felicia's initial amount\n    bracelets_bought = (2/5) * (3/5) * felicia_initial\n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    total_sum = 0\n    for i in [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]:\n        total_sum += i**3\n    return total_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n\n    return discounted_price\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    sum = 9 + 99 + 999 + 9999\n    return sum\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let's assume the number that 4.32 was multiplied by is 'n'.\n    # Without the decimal point, 4.32 is treated as 432.\n    # The incorrect result is 432 * n.\n    # The correct result is 4.32 * n.\n    # The incorrect result is 2138.4 greater than the true result.\n    # So, we have the equation: 432 * n = 4.32 * n + 2138.4.\n    # Now we solve for 'n'.\n    \n    # Simplify the equation by subtracting 4.32 * n from both sides:\n    # 432 * n - 4.32 * n = 2138.4\n    # Factor out n:\n    # n * (432 - 4.32) = 2138.4\n    # Solve for n:\n    n = 2138.4 / (432 - 4.32)\n    \n    # Now calculate the true result, which is 4.32 * n\n    true_result = 4.32 * n\n    return true_result\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The remainders when these numbers are divided by A are the same,\n    # which means that the numbers are congruent modulo A.\n    # Their differences, therefore, must be a multiple of A.\n    differences = [2758-2017, 3670-2017, 3670-2758]\n\n    # The greatest common divisor of the differences will give us one such A,\n    # as will any divisor of this GCD.\n    from math import gcd\n    potential_A = gcd(differences[0], gcd(differences[1], differences[2]))\n\n    # Now we find the sum of all divisors of the GCD, these are the valid values for A\n    sum_of_A = sum(i for i in range(1, potential_A+1) if potential_A % i == 0)\n\n    return sum_of_A\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 8)  # There were 8 more girls than boys\n    equation2 = Eq(5*boys + 3*girls, 448)  # Total number of candies shared\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the initial number of milk candies and f be the number of fruit candies.\n    m, f = symbols('m f')\n\n    # The initial ratio of milk candy to fruit candy is 7:9.\n    initial_ratio = Eq(m / f, 7 / 9)\n    # After eating eight pieces of milk candy, the new ratio is 2:3.\n    new_ratio = Eq((m - 8) / f, 2 / 3)\n\n    # Solve the system of equations.\n    solutions = solve((initial_ratio, new_ratio), (m, f))\n    \n    # Return the initial number of milk candies.\n    return solutions[m]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 0\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    grandmother_age_2008 = 80\n    mum_age_1996 = 40\n\n    # Calculate the year when the mum was born\n    mum_birth_year = 1996 - mum_age_1996\n\n    # Calculate the grandmother's age in the year the mum was born\n    grandmother_age_when_mum_born = grandmother_age_2008 - (2008 - mum_birth_year)\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for n in range(4, 52):\n        count += str(n).count('3')\n        if '3' in str(n):\n            if n == 23:\n                return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lemonade, plus = symbols('lemonade plus')\n\n    # equations based on the problem statement\n    equation1 = Eq(4*lemonade + 7*plus, 2012)  # total income\n    equation2 = Eq(lemonade + plus, 350)       # total bottles\n\n    # solve for the number of lemonade and plus\n    solutions = solve((equation1, equation2), (lemonade, plus))\n\n    # get the minimum number of bottles of \"1000 Plus\" that Ronald could have sold\n    min_plus = solutions[plus]\n\n    return min_plus\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initially = 60\n    apples_per_friend_initially = 4\n    friends_count = apples_initially // apples_per_friend_initially\n    apples_per_friend_after = apples_per_friend_initially + 1\n    total_apples_needed = friends_count * apples_per_friend_after\n    return total_apples_needed\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # To ensure getting a pair of white socks in the worst case scenario,\n    # Yohan could pick all red and black socks before getting any white socks.\n    # That would be 10 red socks and 10 black socks.\n    # After that, Yohan would need to pick 2 white socks to make a pair.\n    # So the total number of socks would be: 10 (red) + 10 (black) + 2 (white)\n\n    max_socks = 10 + 10 + 2  # Maximum number of socks Yohan has to pick\n    return max_socks\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers is 60\n    average_of_three = 60\n    sum_of_three = average_of_three * 3\n    \n    # Average of four numbers, including the new one, is 90\n    average_of_four = 90\n    sum_of_four = average_of_four * 4\n    \n    # The fourth number is the difference between the sum of four and the sum of three\n    fourth_number = sum_of_four - sum_of_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    \n    ans = meters * centimeters_per_meter\n    return ans\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A == 0:  # Skip if A is 0 because we want a 3-digit number\n            continue\n        ABC = A*100 + B*10 + C\n        BCA = B*100 + C*10 + A\n        CAB = C*100 + A*10 + B\n        if ABC + BCA + CAB == A*111 + B*111 + C*111:\n            return ABC\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return change\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups with 4 pupils\n    # Let y be the number of groups with 6 pupils\n    # We have the following system of equations:\n    # x + y = 24 (total number of groups)\n    # 4x + 6y = 112 (total number of students)\n    # We can solve this system of equations using substitution or elimination\n\n    # Using the elimination method\n    # Multiply the first equation by 4 so that we can eliminate x\n    # 4x + 4y = 96\n    # Now we subtract this from the second equation\n    # (4x + 6y = 112) - (4x + 4y = 96) to get:\n    # 2y = 16\n    # y = 8\n\n    # We have found y (number of groups with 6 pupils)\n    y = 8\n\n    return y\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Owen traded 3 fish for 2 rabbits: 3/2 fish per rabbit\n    fish_per_rabbit = 3 / 2\n    # Oscar traded 3 rabbits for 4 packs of wheat: 4/3 packs of wheat per rabbit\n    wheat_per_rabbit = 4 / 3\n    # Calculate how many fish per pack of wheat by multiplying the ratios\n    fish_per_wheat = fish_per_rabbit * wheat_per_rabbit\n    # Owen needs to give 'fish_per_wheat' fish for 1 pack of wheat, \n    # so for 8 packs, he needs to give 'fish_per_wheat' times 8 fish\n    fish_for_eight_wheat = fish_per_wheat * 8\n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    ans = 65 + 88\n    return ans\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count_of_zeros = 0\n    divisor = 5\n    \n    while n >= divisor:\n        count_of_zeros += n // divisor\n        divisor *= 5\n    \n    return count_of_zeros\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Original price of handbag\n    handbag_original = symbols('handbag_original')\n    # Given that Alicia bought the handbag for $428 after a 20% discount\n    handbag_discount_eq = Eq(handbag_original - (handbag_original * 0.20), 428)\n\n    # Solve for the original price of the handbag\n    handbag_original_price = solve(handbag_discount_eq, handbag_original)[0]\n\n    # Original price of the purse\n    purse_original = symbols('purse_original')\n    # Total discount for the handbag and the purse\n    total_discount_eq = Eq((handbag_original_price * 0.20) + (purse_original * 0.28), 121)\n\n    # Solve for the original price of the purse\n    purse_original_price = solve(total_discount_eq, purse_original)[0]\n\n    return purse_original_price\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    climbed_distance = 0\n    day = 0\n    while climbed_distance < 25:\n        day += 1\n        climbed_distance += 4  # climb during the day\n        if climbed_distance >= 25:\n            break\n        climbed_distance -= 1  # slide during the night\n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n    total_dances = dances_per_week * weeks\n    return total_dances\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The recurring decimal 0.A22... (where A is repeated as well) every two digits adds up to A+2\n    # Since there are 20 digits and it repeats every 2, we have 10 pairs of these digits.\n    # Total sum of 20 digits is the sum of 10 pairs, which equals 80.\n    \n    # Let's denote the sum of one pair as S = A + 2\n    # Then the total sum is 10 * S = 80\n    # We can solve for A now.\n    \n    pair_sum = 80 / 10  # Sum of A and 2 in one pair\n    A = pair_sum - 2  # Subtract 2 to find A\n\n    return int(A)\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(6, 10)\n    \n    return ans\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Star jogs from 6:30 a.m. to 7:00 a.m. which is half an hour\n    jogging_time_hours = 0.5\n    jogging_speed_mph = 6\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Star walks from 7:00 a.m. to 8:00 a.m. which is one hour\n    walking_time_hours = 1\n    walking_speed_mph = 5\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n    \n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the original amount of money\n    x = symbols('x')\n    \n    # Elvin spent $120 on a chair, so he has 'x - 120' left\n    chair_cost = 120\n    \n    # He then spent 40% of the remainder on a jacket, so '0.4 * (x - 120)' is spent\n    jacket_percentage = 0.4\n    jacket_cost = jacket_percentage * (x - chair_cost)\n    \n    # Elvin had 30% of his original amount left after shopping\n    remaining_percentage = 0.3\n    \n    # We know that after buying the chair and the jacket, he has 30% left\n    equation = Eq(x - chair_cost - jacket_cost, remaining_percentage * x)\n    \n    # Solve for 'x'\n    original_amount = solve(equation, x)[0]\n\n    return original_amount\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    books = 35\n    layers = 4\n    \n    # Apply Pigeonhole Principle to find the least number of books in the layer with the most books\n    books_in_max_layer = (books + layers - 1) // layers\n\n    return books_in_max_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    \n    for hundred in range(1, 4):  # hundreds place can only be 1, 2, or 3\n        for ten in range(0, 4):  # tens place can be 0, 1, 2, or 3\n            for one in range(0, 4):  # ones place can be 0, 1, 2, or 3\n                # Ensure that all digits are unique\n                if len(set([hundred, ten, one])) == 3:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    # The nth term formula for an arithmetic sequence: a_n = a_1 + (n - 1)d\n    # We need to find n such that a_n < 0, so we solve for n:\n    # 0 > 50 + (n - 1)(-4)\n    # -50 > (n - 1)(-4)\n    # -50 / -4 < n - 1\n    # 12.5 < n - 1\n    # 13.5 < n\n    # n > 13.5, so n = 14 (since n must be an integer)\n    n = 14\n    return n\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    \n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    \n    return max_product\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books bought initially\n    x = symbols('x')\n\n    # Equation for the total cost of the initial books\n    total_cost_initial = 3.50 * x\n\n    # Cost of the additional 2 books\n    total_cost_additional_books = 2 * 6\n\n    # Equation for the new average cost after buying 2 more books\n    new_average_eq = Eq((total_cost_initial + total_cost_additional_books) / (x + 2), 4)\n\n    # Solve for x\n    number_of_initial_books = solve(new_average_eq, x)\n\n    # Add the 2 additional books to the initial books\n    total_books = number_of_initial_books[0] + 2  # Convert result from list to number and add 2 books\n\n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    ans = 129.35 - 0.47\n    return ans\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_in_kg = 1.2\n    weight_per_piece_in_g = 30\n    total_pieces = (weight_in_kg * 1000) / weight_per_piece_in_g\n    return int(total_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05668821  # Conversion factor from liters to quarts\n    cups_per_quart = 2  # There are 2 cups in a quart\n    \n    total_cups = liters_to_quarts * cups_per_quart\n    return round(total_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define two symbols for Rachel and Alice's original amounts of candy\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces, then Rachel has rachel - 10 and Alice has alice + 10\n    # After giving 10 pieces away, they would have the same amount.\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # If they both eat 8 pieces, Rachel has rachel - 8 and Alice has alice - 8\n    # After eating 8 pieces, Rachel would have 3 times as many as Alice.\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Use sympy's solve function to solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    rachel_candies = solutions[rachel]\n    alice_candies = solutions[alice]\n    \n    # Calculate the total number of pieces they had originally\n    total_candies = rachel_candies + alice_candies\n    \n    return total_candies\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Given B = 2 and D = 0, we know AB = 2A and EF0 = E0\n    for A in range(1, 10):\n        for C in range(10):\n            for E in range(1, 10):\n                for F in range(10):\n                    ABCDEF = int(f\"{A}{2}{C}{0}{E}{F}\")\n                    EFABCD = int(f\"{E}{F}{A}{2}{C}{0}\")\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Jogging time from 6:30 am to 7:30 am is 1 hour\n    jogging_time = 1  # in hours\n    jogging_speed = 6  # in miles per hour\n    jogging_distance = jogging_speed * jogging_time  # in miles\n\n    # Walking time from 7:30 am to 9:30 am is 2 hours\n    walking_time = 2  # in hours\n    walking_speed = 5  # in miles per hour\n    walking_distance = walking_speed * walking_time  # in miles\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    # Initial relationship\n    equation1 = Eq(angel, 5/6 * belle)\n    # Relationship after throwing away sweet wrappers\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares / 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return int(total_shapes)\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    dad_past = dad_current - 6\n    son_past = son_current - 6\n\n    equation1 = Eq(dad_past, 5 * son_past)\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 0.20\n    bank_charge_percentage = 0.005\n    \n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n    \n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 to account for permutations of the vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    current_balance = -76.20\n    payment = 120.75\n    new_balance = current_balance + payment\n    return new_balance\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    amount, children = symbols('amount children')\n\n    # Two conditions to form equations\n    # If there was 20p (£0.20) more than this amount (amount), then there would be enough for each child to receive 70p (£0.70).\n    equation1 = Eq(amount + 0.20, 0.70 * children)\n    # If each child was to receive 60p (£0.60), then £2.10 would be left over.\n    equation2 = Eq(amount - children * 0.60, 2.10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (amount, children))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime(\"2nd March 2023\", \"%d %B %Y\")\n    end_date = datetime.strptime(\"15th April 2023\", \"%d %B %Y\")\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10**6):  # let's assume the special number has less than 6 digits\n        original_number = i\n        new_number = int(str(9) + str(i)[:-1]) # removing the 9 from the units and adding it in the beginning\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n    \n    # Eddie is fixed at the left end, hence there are no choices for his position\n    # Avril has to stand next to Eddie, so there's only 1 choice for her as well.\n    # For the remaining 5 students, any permutation is allowed, which is 5 factorial.\n    \n    num_ways = factorial(5)  # 5 factorial for the 5 remaining students\n    \n    return num_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # We need to ensure Dilly has at least one matching pair of gloves.\n    # Without distinguishing between left-hand and right-hand,\n    # she only needs to make sure that she has either two blue gloves or two green gloves.\n    \n    # To find the worst case where she still doesn't have a matching pair, we can use the pigeonhole principle.\n    # For blue gloves, the worst case is picking all three right-hand blue gloves, which still don't make a pair.\n    # Similarly, for green gloves, she could pick both left-hand greens and still not have a pair.\n    \n    # Now she has to take one more glove to guarantee a matching pair.\n    # 3 blue gloves + 2 green gloves + 1 more glove = 6 gloves needed to ensure a matching pair.\n    \n    return 6\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    percentage_increase = 45 / 100\n    price_increase = original_price * percentage_increase\n    new_price = original_price + price_increase\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]\n    mean = 6\n    total_numbers = 8\n    current_sum = sum(numbers)\n    total_sum = mean * total_numbers\n    missing_number = total_sum - current_sum\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    initial_interval = 3\n    new_interval = 5\n\n    # Number of holes already dug\n    holes_dug = 30\n    \n    # Remaining length after 30 holes\n    length_dug = holes_dug * initial_interval\n    remaining_length = circumference - length_dug\n    \n    # How many new holes needed\n    new_holes = remaining_length // new_interval\n    if remaining_length % new_interval != 0:\n        new_holes += 1  # Add one if there's a remainder to dig the last hole\n\n    return new_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    from math import factorial\n\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # ways to reach 5th step (1-1-1-1-1, 1-1-1-2, 1-1-2-1, 1-2-1-1, 2-1-1-1, 2-2-1, 2-1-2, 1-2-2)\n    ways_to_5th = combinations(4, 0) + combinations(3, 1) + combinations(3, 1) + combinations(3, 1) \\\n                   + combinations(3, 1) + combinations(2, 2) + combinations(2, 1) + combinations(2, 1)\n                   \n    # ways from 5th step to 10th step (1-1-1-1-1, 1-1-1-2, 1-1-2-1, 1-2-1-1, 2-1-1-1, 2-2-1, 2-1-2, 1-2-2)\n    ways_from_5th_to_10th = combinations(4, 0) + combinations(3, 1) + combinations(3, 1) + combinations(3, 1) \\\n                            + combinations(3, 1) + combinations(2, 2) + combinations(2, 1) + combinations(2, 1)\n    \n    return ways_to_5th * ways_from_5th_to_10th\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n\n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the starting number\n    x = symbols('x')\n    # setting up the equation x/4 + 3 = 12\n    equation = Eq(x/4 + 3, 12)\n    # solving the equation\n    solved = solve(equation, x)\n\n    return solved[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = 0\n    for i in range(1, 16):\n        ans += i * (16 - i)\n    return ans\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for num in range(1, 51):\n        if '3' in str(num):\n            erased_sum += num\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_per_page = 1\n    used_digits = 0\n    pages = 0\n    while used_digits < 792:\n        pages += 1\n        if pages >= 100:\n            digits_per_page = 3\n        elif pages >= 10:\n            digits_per_page = 2\n        used_digits += digits_per_page\n    return pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    billy_fifth_score = (ivan_total - (billy_total - 10)) / 5 + 10\n    \n    return billy_fifth_score\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # Initialize the maximum result value and its corresponding bracket pair\n    max_result = float('-inf')\n    max_brackets = ()\n\n    # The equation without brackets\n    numbers = [15, 5, 5, 15, -6, 7]\n    operations = ['+', '*', '+', '-', '+']\n    \n    # Iterate all possible positions for the first pair of brackets\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            # Iterate all possible positions for the second pair of brackets\n            for k in range(len(numbers) - 1):\n                for l in range(k + 1, len(numbers)):\n                    if j < k or i > l:  # Ensuring brackets do not overlap\n                        # Construct the equation string with current pairs of brackets\n                        equation = \"\"\n                        for m in range(len(numbers)):\n                            # Add a bracket before this number if it's the start of a bracket pair\n                            if m == i or m == k:\n                                equation += \"(\"\n                            equation += str(numbers[m])\n                            if m < len(operations):\n                                equation += operations[m]\n                            # Add a closing bracket after this number if it's the end of a bracket pair\n                            if m == j or m == l:\n                                equation += \")\"\n                        # Calculate the result using the `eval` function\n                        result = eval(equation)\n                        # Update maximum result and its corresponding bracket pair\n                        if result > max_result:\n                            max_result = result\n                            max_brackets = (i, j, k, l)\n\n    return max_result\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    sum_required = 1000\n    # As for any given number i, there is a corresponding number sum_required - i that pairs with it to create the sum.\n    # This creates a pair, and there will be sum_required - 1 such pairs.\n    # However, since the number can pair with itself as well, we must add 1 to account for single number pair (500 + 500).\n    ways = (sum_required - 1) + 1\n    \n    return ways\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    a_n = 39  # 7th term\n    n = 7\n    d = 44 - 39  # Common difference\n    n_100 = 100\n    \n    # Calculate the 100th term using the formula: a_n = a_1 + (n-1)*d\n    # We first need to find a_1 using the provided 7th term\n    a_1 = a_n - (n-1)*d\n    # Now we can find the 100th term using the value of a_1\n    ans = a_1 + (n_100-1)*d\n    return ans\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from math import sqrt\n\n    m = 1\n    while True:\n        if sqrt(1260 * m) == int(sqrt(1260 * m)):\n            break\n        m += 1\n    \n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for n in range(1, 28):\n        if (n % 4 == 3) and (n % 7 == 3):\n            return n\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 88  # lcm(8, 11) = 88\n    num = 6   # remainder\n\n    # Since the number is two-digits, it's between 10 and 99\n    for i in range(10, 100):\n        if i % lcm == num:\n            return i\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # To find the ones digit of 999^99, we only need to consider the ones digit of 9^99.\n    # The pattern of the ones digit of 9^n is 9, 1, 9, 1, ... (since 9^2 = 81, 9^3 = 729, etc.)\n    # The pattern repeats every 2 powers.\n\n    # 99 is odd, so the ones digit of 9^99 is the same as the ones digit of 9^1, which is 9.\n    return 9\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_cost = 151.25\n    chair_cost = 24.15\n    total_cost = table_cost + chair_cost\n    return total_cost\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the 5 other ponies\n    x = symbols('x')\n\n    # Small stable average increase: (x + 250000 - ReinBeau) / 2 = ReinBeau / 3 + 10000\n    equation1 = Eq(((x + 250000) / 3) - (250000 / 3), 10000)\n    \n    # Solve for x\n    total_value = solve(equation1, x)[0] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    \n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes) if total_length % pipe_length == 0 else int(num_pipes) + 1\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    remaining_stickers = total_stickers - 9\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015, 3)\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    result += 50  # Reverse of subtracting 50\n    \n    # Since the day of the birth is added twice, we can find the day by taking the result modulo 100\n    day = result % 100\n    result //= 100  # This reverses the \"Add the number of the day of his birth to the result twice\"\n    \n    # Reverse of \"Multiply the result by 50\"\n    result //= 50\n    \n    # Reverse of \"Add 1 to the result\"\n    result -= 1\n    \n    # Reverse of \"Multiply the number of the month of his birth by 4\"\n    month = result // 4\n    \n    # Convert month and day to integers and return them in a tuple (month, day)\n    return int(month), int(day)\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    percent_concentration = (sugar / total_mixture) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Treat the group of 4 who insist on standing together as one unit.\n    # We then have 5 units to arrange (4 individual pupils + 1 group of 4).\n    units_to_arrange = factorial(5)\n    \n    # The group of 4 can themselves be arranged in 4! ways.\n    group_arrangement = factorial(4)\n\n    # Multiply the number of ways of arranging the units and the group\n    ans = units_to_arrange * group_arrangement\n    \n    return ans\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the middle number be n, then the numbers are (n - 1), n, (n + 1)\n    # Their sum is (n - 1) + n + (n + 1) = 3n\n    total_sum = 60\n    # Hence, we find n by dividing the total sum by 3\n    n = total_sum // 3\n    # The largest number is then (n + 1)\n    largest_number = n + 1\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let 'g' be the number of gold medals and 's' be the number of silver medals.\n    # 5 points are awarded for each gold medal and 4 points for each silver medal.\n    # The total points awarded is 331 and the total number of medals is 80.\n    \n    # Hence, we have the following system of equations:\n    # 5g + 4s = 331 (total points)\n    # g + s = 80 (total medals)\n    \n    # We can solve for 'g' (number of gold medals) by expressing 's' in terms of 'g':\n    # s = 80 - g\n    \n    # Substituting 's' from the second equation into the first:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    # g = 11\n    \n    g = 331 - 320\n    return g\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb_per_kg = 8.70\n    cost_beef_per_kg = 9.40\n    total_lamb_cost = cost_lamb_per_kg * 7\n    total_beef_cost = cost_beef_per_kg * 30\n    total_cost = total_lamb_cost + total_beef_cost\n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work done by one master in a day\n    # Let a be the work done by one apprentice in a day\n    m, a = symbols('m a')\n\n    # 1 master and 3 apprentices complete the work in 4 days\n    equation1 = Eq(4 * (m + 3 * a), 1)\n\n    # 2 masters and 1 apprentice complete the work in 3 days\n    equation2 = Eq(3 * (2 * m + a), 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Calculate the time taken by 1 apprentice to complete the work\n    time_for_apprentice = 1 / solutions[a]\n\n    return time_for_apprentice\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def new_operation(a, b):\n        if a < b:\n            return a\n        else:\n            return a + b\n    \n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    return 0.4 * (11 / 52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Let the total number of spectators be x\n    # According to the question:\n    # (2/3)x * (5/8) = x - (1/3)x - 80\n    # Solving the equation for x will give us the total number of spectators\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*x * (5/8), x - (1/3)*x - 80)\n    total_spectators = solve(equation, x)[0]\n\n    return total_spectators\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    # Start with the Boys' layer assumption as 1, and increase layer by layer\n    boys_layer = 1\n    while True:\n        # Total boys = (1st boys layer + 2nd boys layer + ...) squared\n        boys = ((boys_layer * 2 - 1) ** 2)\n        # Total girls = (1st girls layer + 2nd girls layer + ...) squared\n        girls = ((boys_layer - 1) ** 2)\n\n        # Check if the difference between boys and girls equals 32\n        if boys - girls == 32:\n            # Total students = Total boys + Total girls\n            total_students = boys + girls\n            return total_students\n        boys_layer += 1\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    # Position of the elephant doll from the left\n    elephant_pos = 10\n    # Position of the rabbit doll from the right\n    rabbit_pos = 9\n    # Number of dolls between the elephant and the rabbit\n    dolls_between = 5\n\n    # Total number of dolls is the position of the elephant \n    # plus the position of the rabbit, plus the dolls in between.\n    total_dolls = elephant_pos + rabbit_pos + dolls_between\n\n    return total_dolls\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of roses originally, d be the number of daisies originally,\n    # and m be the number of months\n    r, d, m = symbols('r d m', integer=True)\n\n    # Total flowers originally = roses + daisies = 300\n    equation1 = Eq(r + d, 300)\n\n    # After m months, there are 280 roses and 180 daisies\n    equation2 = Eq(r + m, 280)\n    equation3 = Eq(d + m, 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, d, m))\n\n    return solutions[r]  # The number of roses originally\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(50, 61))\n    sum_primes = sum(primes)\n\n    return sum_primes\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n    term_to_find = 102\n    first_term = tenth_number - (10 - 1) * common_difference\n\n    # Using the formula nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (term_to_find - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n\n    chinese_and_comics = total_books - english_books\n\n    # Let comics be x, then Chinese books would be 2x\n    # x + 2x = chinese_and_comics\n    x = chinese_and_comics / 3\n\n    return int(x)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_accurate_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_accurate_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    for max_apples in range(1, 50):\n        # This variable will keep track of the remaining apples after giving the maximum\n        remaining_apples = 50 - max_apples\n        \n        # This will keep track of the number of children left to distribute apples to\n        remaining_children = 7\n        \n        # This will check if we are able to distribute apples uniquely to the remaining children\n        can_allocate = True \n        \n        # Start giving out apples in decreasing order from max_apples - 1\n        for i in range(max_apples - 1, 0, -1):\n            if remaining_apples >= i:\n                remaining_apples -= i\n                remaining_children -= 1\n            else:\n                can_allocate = False\n                break\n        \n        # If there no more children left to allocate and we have successfully allocated apples, break the loop\n        if remaining_children == 0 and can_allocate:\n            break\n        \n        # If we were not able to allocate apples uniquely, we need to try with the next number of maximum apples\n        else:\n            continue\n            \n    return max_apples\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for num_parts in range(2, 9):  # Number of parts can vary from 2 to 8\n        for i in range(1, 8):\n            for j in range(i, 8):  # Ensuring the second number is not less than the first\n                if num_parts == 2:  # When splitting into 2 parts\n                    if i + j == 8:\n                        count += 1\n                elif num_parts == 3:  # When splitting into 3 parts\n                    for k in range(j, 8):\n                        if i + j + k == 8:\n                            count += 1\n                elif num_parts == 4:  # When splitting into 4 parts\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            if i + j + k + l == 8:\n                                count += 1\n                elif num_parts == 5:  # When splitting into 5 parts\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                if i + j + k + l + m == 8:\n                                    count += 1\n                elif num_parts == 6:  # When splitting into 6 parts\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                for n in range(m, 8):\n                                    if i + j + k + l + m + n == 8:\n                                        count += 1\n                elif num_parts == 7:  # When splitting into 7 parts\n                    for k in range(j, 8):\n                        for l in range(k, 8):\n                            for m in range(l, 8):\n                                for n in range(m, 8):\n                                    for o in range(n, 8):\n                                        if i + j + k + l + m + n + o == 8:\n                                            count += 1\n                elif num_parts == 8:  # When splitting into 8 parts (which has only one way, 1+1+1+1+1+1+1+1)\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    cost_per_kilogram = 11.4 / 0.6\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    eggs = 158\n    box_capacity = 12\n\n    boxes_needed = (eggs + box_capacity - 1) // box_capacity\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    # The time it takes for the entire train to pass through the tunnel\n    total_distance = train_length + tunnel_length\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # Using the principle of inclusion-exclusion\n    # max_non_wearers = total_men - (men with bow ties or spectacles)\n    # men with bow ties or spectacles must be at least the sum minus total\n    # to account for the possible overlap\n    max_non_wearers = total_men - max(bow_ties + spectacles - total_men, 0)\n\n    return max_non_wearers\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.50 * 0.20 * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n    equation = Eq(blue + red + green, 112)\n\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    whole_number = 414\n    fraction = 1 / 3\n    ans = whole_number * fraction\n    return ans\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # To maximize the apples for the child who gets the most,\n    # we need to distribute the least number of apples to others.\n    # Since no two children can get the same number of apples and\n    # each of them needs to get at least one apple,\n    # we can give 1, 2, 3, and 4 apples to four of the children.\n    # The sum of apples given out will be 1+2+3+4 = 10.\n    # Now we calculate the remaining apples for the last child.\n    total_apples = 19\n    apples_distributed = 1 + 2 + 3 + 4\n    max_apples_for_last_child = total_apples - apples_distributed\n\n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Considering Ali and Bala as one entity, there are effectively 4 entities to arrange\n    # Dan (D), Ali&Bala (AB), Charles (C), and Ella (E)\n    base_arrangements = factorial(4)\n    \n    # Since Ali and Bala can switch places, there are 2 ways to arrange within this entity\n    ali_bala_arrangements = 2\n    \n    # Multiplying the arrangements since they are independent events\n    arrangements = base_arrangements * ali_bala_arrangements\n    \n    # Dan is fixed at the furthest left, thus we do not multiply by any factor for Dan's position\n    # Total arrangements = arrangements\n    return arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits, so the ratio of fish to rabbit is 3:2\n    fish_to_rabbit = 3 / 2\n\n    # Oscar trades 3 rabbits for 4 packs of wheat, so the ratio of rabbit to wheat is 3:4\n    rabbit_to_wheat = 3 / 4\n\n    # We need to determine the equivalent fish to wheat ratio, which is fish_to_rabbit * rabbit_to_wheat\n    fish_to_wheat = fish_to_rabbit * rabbit_to_wheat\n\n    # Now we need to find out how many fishes Owen should give Dennis for 8 packs of wheat\n    # Since we want to find the amount of fish equivalent to 8 packs of wheat, we use fish_to_wheat ratio\n    fishes_for_8_wheat = fish_to_wheat * 8\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    # 1-9: 9 pages using 1 digit each\n    total_digits += 9 \n    # 10-99: 90 pages using 2 digits each\n    total_digits += 2 * (99 - 10 + 1)\n    # 100-140: 41 pages using 3 digits each\n    total_digits += 3 * (140 - 100 + 1)\n    \n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Assume that the two digit number Serene has is xy (where x and y are the tens and the ones digits respectively)\n    # The number is then 10*x + y\n    # The incorrect subtrahend she used is 53 instead of 32\n    incorrect_difference = 36\n    incorrect_subtrahend = 53\n\n    # The incorrect minuend is then incorrect_difference + incorrect_subtrahend\n    incorrect_minuend = incorrect_difference + incorrect_subtrahend\n\n    # Now correct the subtrahend to be 32\n    correct_subtrahend = 32\n\n    # The correct difference will then be the incorrect minuend - correct subtrahend\n    correct_difference = incorrect_minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    max_single_color_balls = max(15, 9, 6)\n    # In the worst case scenario, all balls drawn are of the most abundant color.\n    # After this, we draw 1 ball of each of the other two colors to ensure 3 different colors.\n    ans = max_single_color_balls + 2\n    return ans\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 3,\n    # starting from 2 and ending at 35.\n    # We'll first calculate the number of terms in the sequence.\n    first_term = 2\n    last_term = 35\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # The sum of an arithmetic sequence can be found using the formula:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    sum_of_sequence = num_terms / 2 * (first_term + last_term)\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n\n    average_students = total_students / num_classes\n\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fences = 3.2\n    used_woods = 6.5\n\n    left_over = total_length - (used_fences + used_woods)\n\n    return left_over\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    T = Symbol('T')\n    income = 120000\n\n    tax_first_50k = 0.06 * 50000\n    tax_remaining = (0.06 + T / 100) * (income - 50000)\n\n    total_tax = Eq(tax_first_50k + tax_remaining, 10000)\n\n    T_value = solve(total_tax, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    smallest_difference = float('inf')\n\n    for perm in permutations(digits):\n        if perm[0] != 0 and perm[5] != 0:  # Ensure no leading zeros\n            num1 = int(''.join(map(str, perm[:5])))\n            num2 = int(''.join(map(str, perm[5:])))\n            difference = abs(num1 - num2)\n            if difference < smallest_difference:\n                smallest_difference = difference\n\n    return smallest_difference\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "def solution():\n    from math import factorial as fact\n\n    def nCr(n, r):\n        return fact(n) // (fact(r) * fact(n - r))\n    \n    total_ways = nCr(7, 5)\n    \n    # Case 1: Richard gets toy car or puzzle, and Kevin doesn't get any of his choices.\n    # This means there are 5 presents (excluding toy car and puzzle) to give to 5 children.\n    case_1 = nCr(5, 5)\n    \n    # Case 2: Kevin gets toy car or calculator, and Richard doesn't get any of his choices.\n    # This means there are 5 presents (excluding toy car and calculator) to give to 5 children.\n    case_2 = nCr(5, 5)\n    \n    # Case 3: Both Richard and Kevin get one from their choices, which leaves 5 presents for the other 3 children.\n    # Richard and Kevin get either of 2 presents each (car vs. puzzle or car vs. calculator).\n    case_3 = nCr(5, 3) * 2 * 2\n    \n    # Subtract the cases where they don't get their gifts from the total ways.\n    ans = total_ways - case_1 - case_2 + case_3\n    return ans\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    train_speed = 10     # meters per second\n    \n    # the entire train is in the tunnel when its front reaches the end\n    # of the tunnel and until its end exits the tunnel\n    total_distance = train_length + tunnel_length\n    duration = total_distance / train_speed\n    \n    return duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost_pence = cost_per_pound * pounds_bought\n    money_given_pence = 100  # £1 is 100 pence\n    change_pence = money_given_pence - total_cost_pence\n    \n    return change_pence\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime\n\ndef solution():\n    n = 1\n    while True:\n        # Check if all numbers in the sequence are prime\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            # Return n if all numbers are prime\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of each rabbit\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(second_rabbit, first_rabbit + 2)  # The second rabbit costs £2 more than the first\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8)  # The third rabbit costs 80p less than the second\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.70)  # The total cost of the three rabbits\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # g of solution\n    concentration = 0.15  # 15% sugar solution\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # time until they meet in hours\n    \n    # Relative speed at which Jack is approaching Rose\n    relative_speed = jack_speed - rose_speed\n    \n    # Distance between them is the relative speed times the meeting time\n    distance = relative_speed * meeting_time\n    \n    return distance\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2*i + 2)**2 - (2*i)**2 for i in range(1, 1010))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n    \nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 35/100, 0.57)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    count_7 = 5000 // 7\n    count_13 = 5000 // 13\n    count_7_and_13 = 5000 // (7 * 13)\n\n    ans = count_7 + count_13 - count_7_and_13\n\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    num = 48739\n    remainder = num % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_permutations = factorial(len(\"SUCCESS\")) // (factorial(3) * factorial(2) * factorial(2))\n    not_allowed_permutations = factorial(4) * factorial(3) // factorial(2)\n    \n    ans = total_permutations - not_allowed_permutations\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked alone\n    # Then (14 - x) is the number of days Emma worked alone\n    \n    # David's work per day is 1/10\n    # Emma's work per day is 1/18\n    \n    # David's work + Emma's work = 1 (Complete work)\n    # x/10 + (14 - x)/18 = 1\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x/10 + (14 - x)/18, 1)\n    \n    days_david_worked = solve(equation, x)[0]\n    days_emma_worked = 14 - days_david_worked\n    \n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    # Number of T-shirts she could buy initially\n    total_tshirts = 145\n    # Number of T-shirts she actually bought\n    bought_tshirts = 138\n    # Money left after buying the T-shirts\n    money_left = 56\n    # Each T-shirt's price (unit rate) can be found by the money left for the T-shirts not bought\n    tshirt_price = money_left / (total_tshirts - bought_tshirts)\n    # Total money she had at first is the money for bought T-shirts plus money left\n    total_money = (bought_tshirts * tshirt_price) + money_left\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = (n * (n + 1) // 2)\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    total_numbers = 14\n    avg = 119\n    sum_of_numbers = total_numbers * avg\n    \n    # In a sequence of consecutive even numbers, the middle two numbers are the average.\n    # Since there are 14 numbers (even), the 7th and 8th numbers are the average.\n    # The smallest number is 6 steps before the 7th number.\n    step = 2  # step is 2 because the numbers are even\n    smallest_number = avg - 6 * step\n    \n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # The difference in height is 132cm - 124cm = 8cm\n    height_diff = 132 - 124\n    \n    # If at least 4 students are of the same height, and heights are in whole numbers,\n    # the class size should be at least one more than 4 times the number of different heights.\n    class_size = (height_diff + 1) * 4 - 1\n\n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12\n    new_pay = original_pay + (original_pay * increase_percentage / 100)\n    return new_pay\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    time_to_cut_one_section = 12 / (5 - 1)  # subtract 1 because 5 sections create 4 cuts\n    time_to_cut_five_times = time_to_cut_one_section * 5\n    return time_to_cut_five_times\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_pence = 126  # Total pence in the bag\n\n    # Let the number of each coin be x\n    # 2p coin is worth 2 pence, 5p coin is worth 5 pence\n    # The total value is given by 2x + 5x\n    # Set up the equation: 2x + 5x = total_pence\n\n    # Combine terms to form a single variable equation: 7x = total_pence\n    # Solve for x: x = total_pence / 7\n\n    x = total_pence // 7  # Using integer division to get the number of coins\n\n    # Since there is an equal number of 2p and 5p coins, the total number of coins is 2 * x\n    total_coins = 2 * x\n\n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Finding the ones digit of a power of 3 can be done by looking at the pattern of ones digits\n    # that 3 to consecutive powers has.\n    # The pattern repeats every 4: 3^1 = 3, 3^2 = 9, 3^3 = 27, 3^4 = 81, and then 3^5 = 243 has the\n    # same ones digit as 3^1, which is 3.\n\n    # To find the ones digit of 3^2009, we find the remainder of 2009 divided by 4\n    remainder = 2009 % 4\n\n    # Now we can find the ones digit from the pattern based on the remainder\n    if remainder == 0:\n        ones_digit = 1  # Because 3^4 ends with 1 and the pattern repeats every 4 powers\n    elif remainder == 1:\n        ones_digit = 3\n    elif remainder == 2:\n        ones_digit = 9\n    else:\n        ones_digit = 7\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    # Let total_people be x\n    # Then (1 - 2/5)x is the number of non-adults (children)\n    # Among them, (5/9)(1 - 2/5)x are boys\n    # Hence (1 - 5/9)(1 - 2/5)x = 36 are girls\n    # (4/9)(1 - 2/5)x = 36\n\n    # Solve for x\n    x = girls * (9/4) * (5/3)\n\n    return int(x)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    ans = 0\n    num = 2\n    while True:\n        square = num * num\n        if square % 2 == 0 and square % 5 == 0:\n            ans = square\n            break\n        num += 1\n    return ans\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount_rate = 0.25\n    adult_ticket_cost = 30 / (1 - child_discount_rate)\n    senior_discount_rate = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount_rate)\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_initial = 3\n    days_initial = 30\n    men_final = 2\n\n    work_per_day_per_man = 1 / (men_initial * days_initial)\n    days_final = 1 / (work_per_day_per_man * men_final)\n\n    return days_final\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Will's current age\n    will_age = symbols('will_age')\n\n    # Equation based on the problem statement\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    # Solve for Will's age\n    age_solution = solve(equation, will_age)\n\n    return age_solution[0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference + 1)\n    sum_of_series = num_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # There are 3 ways to take a train, 4 ways to take a car, and 2 ways to take a boat.\n    # Since you can choose one from each category independently, \n    # you can use the Law of Multiplication for independent events. \n\n    ways_by_train = 3\n    ways_by_car = 4\n    ways_by_boat = 2\n\n    # Different ways to go from A to B in one day\n    total_ways = ways_by_train + ways_by_car + ways_by_boat\n\n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    days_needed = total_pages / pages_per_day\n    return int(days_needed)\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of books each kid gets as a, b, c, and d.\n    a, b, c, d = symbols('a b c d')\n\n    # Since someone might not get any book, we don't limit the lower bound to 1 as in the example.\n    count = 0\n    for a in range(0, 21):\n        for b in range(0, 21):\n            for c in range(0, 21):\n                for d in range(0, 21):\n                    if a + b + c + d == 20:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child gets at least two books, so we distribute those first.\n    # This means we have distributed 2 * 5 = 10 books already.\n    remaining_books = 30 - 10\n    \n    # Now we have 20 books left to be distributed in any manner to 5 kids.\n    # This is equivalent to putting 20 indistinguishable items into 5 distinguishable bins.\n    # The number of ways to do that is given by the stars and bars method C(n+k-1, k-1)\n    # where n is the remaining items and k is the bins.\n    k = 5\n    n = remaining_books\n    \n    ways_to_divide = comb(n + k - 1, k - 1)\n    \n    return ways_to_divide\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    result = 6846 * 8\n    return result\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's portion\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    # Given: Mason's portion is 2/3 that of Chewy's\n    equation1 = Eq(mason, (2/3) * chewy)\n\n    # Given: Chewy's portion is 40% that of Mike's\n    equation2 = Eq(chewy, 0.40 * mike)\n\n    # Given: Mason's portion was 550ml less than Mike's\n    equation3 = Eq(mason, mike - 550)\n\n    # Solve the equations to find Mike's portion\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    # The total amount of soup is the sum of all portions\n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n\n    # We return the total amount of soup in litres (1000 ml = 1 litre)\n    return total_soup / 1000\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_balance = 1000\n    interest_rate = 0.06\n    years = 2\n    \n    final_balance = initial_balance * ((1 + interest_rate) ** years)\n    return final_balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    fractions = [(1, 2), (1, 9), (1, 3), (1, 8), (1, 4), (1, 7), (1, 5), (1, 6)]\n    \n    max_sum = 0\n    second_largest_term = Fraction(0)\n    \n    for perm in permutations(operations, 4):\n        expr1 = eval(\"Fraction{0}{1}Fraction{2}{3}\".format(fractions[0], perm[0], fractions[1]))\n        expr2 = eval(\"Fraction{0}{1}Fraction{2}{3}\".format(fractions[2], perm[1], fractions[3]))\n        expr3 = eval(\"Fraction{0}{1}Fraction{2}{3}\".format(fractions[4], perm[2], fractions[5]))\n        expr4 = eval(\"Fraction{0}{1}Fraction{2}{3}\".format(fractions[6], perm[3], fractions[7]))\n        \n        current_sum = expr1 + expr2 + expr3 + expr4\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            terms = [expr1, expr2, expr3, expr4]\n            terms.sort(reverse=True)\n            second_largest_term = terms[1]\n    \n    A = second_largest_term.numerator\n    B = second_largest_term.denominator\n    \n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    # Add 1 because trees are planted at both ends of the road\n    num_trees = (road_length // interval) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # UK coin values in pence\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    fare = 44\n    # start with a larger value than the fare to cover the fare\n    given = min([coin for coin in coin_values if coin > fare])  \n    \n    # calculate change needed\n    change = given - fare\n    \n    # count coins given and change\n    num_coins = 1  # Susan gives one coin to the driver\n    \n    for coin in coin_values:\n        num_coins += change // coin  # number of coins of this denomination\n        change %= coin  # remaining change to be given\n\n    return num_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    num_classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = num_classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Rational\n\n    x = symbols('x')\n    inequality = (x + 3)/(2*x + 5) > Rational(101, 200)  # 0.505 as a fraction\n    x_solution = solve(inequality, x)\n    \n    # We need the largest integer value of x that is less than 47.5\n    ans = int(x_solution[0].evalf()) - 1  # Because x < 47.5, we subtract 1\n    \n    return ans\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room_after_transfer = total_pupils // 2  # Divide by 2 and use floor division to get an integer number\n    \n    return pupils_each_room_after_transfer\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent = 89.65\n    remaining = 20.35\n\n    initial_amount = spent + remaining\n\n    return initial_amount\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    right_angle_combinations = total_points       # the right angle is at the center\n    right_angle_combinations += total_points * 4  # the right angle is away from the center\n\n    return right_angle_combinations\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    sequence_position_difference = 15 - 10\n    common_difference = (fifteenth_term - tenth_term) / sequence_position_difference\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    total = 0\n    numerator = 1\n    denominator = 1\n    for i in range(8):\n        if i > 0:\n            numerator += 1\n            denominator += (3 + 4 * (i - 1))\n        if i < 7:\n            next_denominator = denominator + (3 + 4 * i)\n            total += numerator / (denominator * next_denominator)\n        else:\n            total += 1 / denominator\n    return total\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    A_students = 24\n    B_students = 36\n    C_students = 42\n\n    gcd_AB = gcd(A_students, B_students)\n    gcd_ABC = gcd(gcd_AB, C_students)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum(4 * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    num_children = 200\n    cost_per_day = 4.36\n    num_days = 5\n    \n    total_cost = num_children * cost_per_day * num_days\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 76\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    return (3/8) * 16\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    \n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.90\n    profit = selling_price - cost_price\n    \n    equation = Eq(profit, 120)\n    \n    solution = solve(equation, cost_price)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = 5/8 * total_sheep\n    white_sheep = 1/4 * total_sheep\n    brown_sheep = total_sheep - (black_sheep + white_sheep)\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    people = 38\n    total_cost = cost_per_person * people\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 / 5\n    total_balls_in_six_boxes = balls_per_box * 6\n    return int(total_balls_in_six_boxes)\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    \n    # split the equation into two cases since absolute value equation means that x+1 could be either positive or negative\n    solutions = solve((equation.rewrite(Abs, piecewise=True)), (x))\n\n    return [s.evalf() for s in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks in a row\n    ways_with_four_different = factorial(4)\n    \n    # For two different colored pairs of socks in a row\n    ways_with_two_pairs = factorial(4) // factorial(2) ** 2\n    \n    return ways_with_four_different, ways_with_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    number1 = 13.8\n    number2 = 18.6\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 because $\\overline{aab}$ wouldn't be a three-digit number\n        for b in range(10):  # 'b' can be 0\n            if 11 * a + 10*b + b == 100 * a + 10 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a represent the number of sweets that Andre has.\n    # Let b represent the number of sweets that Beth has.\n    a, b = symbols('a b')\n    \n    # We can set up two equations based on the problem:\n    # 1. The total amount of sweets between them before the teacher gave them more is 24.\n    # 2. Andre has 6 more sweets than Beth after receiving 4 more sweets each.\n    equation1 = Eq(a + b, 24)\n    equation2 = Eq(a + 4, b + 10)\n    \n    # Solve the system of equations for a and b.\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # We want to find how many sweets Beth has now, which is b + 4.\n    return solutions[b] + 4 \n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # Total apples\n    apples = 18\n    \n    # If Anthea takes 1, 2 or 3 apples, then the possible remaining apples will be 17, 16 or 15\n    # We need to ensure that Ben gets a number which, after his turn, Anthea can force the game into\n    # a state where Ben always receives a number of apples that is 1 more than a multiple of 4 (5, 9, 13, 17).\n    # This way, Anthea can always reduce the number of apples to a multiple of 4 on her turn, eventually forcing\n    # Ben to take the last apple.\n\n    # Anthea should take 1 apple to leave 17 for Ben\n    # No matter if Ben takes 1, 2 or 3 apples on his turn,\n    # Anthea can always bring the total to a multiple of 4 on her next turn (16, 15 or 14 to 12)\n    \n    ans = 1  # Anthea should take 1 apple in the first turn\n    return ans\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the mass of a table and chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n    \n    # Based on the problem we have two equations:\n    # 1. The total mass of 3 tables is the same as the total mass of 4 chairs => 3*table_mass = 4*chair_mass\n    # 2. The mass of a table is 2kg heavier than a chair => table_mass = chair_mass + 2\n    \n    # Create the equations using sympy\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    equation2 = Eq(table_mass, chair_mass + 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n    \n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand at either end of the line, so there are 2 choices for Judy.\n    judy_options = 2\n\n    # The remaining 5 friends can be arranged in any order, which is 5! (factorial of 5) ways.\n    friends_permutations = factorial(5)\n\n    # By the multiplication principle, the total number of ways is the product of the two.\n    total_ways = judy_options * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre - beth, 6)\n    \n    # after receiving 4 sweets each\n    equation1 = Eq(andre + 4 + beth + 4, 24 + 4 + 4)\n    solutions = solve((equation1, equation2), (andre, beth))\n    beth_sweets_now = solutions[beth] + 4\n    \n    return beth_sweets_now\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # The Ferrari driver finished in second place.\n    finished_position = 2\n    \n    # The Ferrari driver overtook 5 other cars.\n    overtakes = 5\n    \n    # The number of cars the driver was behind before the overtakes.\n    cars_behind_before_overtakes = finished_position + overtakes\n    \n    # The total number of cars in the race.\n    total_cars = cars_behind_before_overtakes + 1  # Adding 1 for the Ferrari itself\n    \n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    return (2 * 12) + 6\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    younger_math, younger_english = symbols('younger_math younger_english')\n\n    # Equations based on the problem statement\n    elder_math = younger_math + 10\n    elder_english = younger_english - 4\n    elder_total = elder_math + elder_english\n    younger_diff = younger_english - younger_math\n\n    # Equations\n    equation1 = Eq(elder_total, 88)\n    equation2 = Eq(younger_diff, 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (younger_math, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 130 * 4  # the total sum of four numbers\n    new_sum = 110 * 3  # the total sum of remaining three numbers after removing one number\n    removed_number = total_sum - new_sum  # the number removed\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert all times to seconds\n    light1_interval = 1 * 60  # 1 minute\n    light2_interval = 1.5 * 60  # 1.5 minutes\n    \n    # Calculate the least common multiple of the first two lights\n    # This is the interval at which both lights turn green at the same time\n    common_interval = lcm(light1_interval, int(light2_interval))\n    \n    # The lights need to turn green every 9 minutes (540 seconds)\n    # Calculate the greatest common divisor with the 9 minutes interval\n    # This will be the required interval for the third light\n    # In order to make sure it is at least 30 seconds\n    # We keep increasing the interval by 30 seconds (to stay above the requirement)\n    # until we find a common interval that divides evenly into 540 seconds\n    total_interval = 9 * 60  # 9 minutes\n    third_light_interval = 30  # Start at 30 seconds\n    while total_interval % third_light_interval != 0 or common_interval % third_light_interval != 0:\n        third_light_interval += 30\n\n    return third_light_interval\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # To ensure victory, Leo must force Mia into a position where\n    # she will have to take apples to leave a winning position for Leo\n    # Leo can take 1 or 2 apples on his first turn.\n    # To ensure victory, Leo wants to leave 13 or 12 apples.\n    # Since the winning position for the second player is when the number of apples is 3n + 1,\n    # Leo should aim to reduce the pile to 10 apples so when it's 3n + 1 where n = 3.\n    # Therefore, Leo should take 2 apples.\n\n    apples_to_take = 2\n\n    return apples_to_take\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let's denote the value of each silver spoon as 's' and the value of each gold ring as 'g'\n    # According to the problem, 12 silver spoons (12s) have three quarters the value of 6 gold rings (6g):\n    # 12s = 3/4 * 6g\n    # Simplify the equation: 12s = 9/2 * g\n    # We want to find out how many silver spoons are equal to the value of 3 gold rings.\n    # Let's denote the unknown number of silver spoons as 'x', so we want to find an 'x' that satisfies:\n    # xs = 3g\n    # Divide both sides of the first equation by 12 to solve for 's' in terms of 'g':\n    # s = 9/2 * g / 12\n    s = (9 / 2) * (1 / 12)\n    # Then substitute 's' in the second equation to solve for 'x':\n    # x * (9/2 * 1/12) * g = 3g\n    # Simplify and solve for 'x':\n    x = (3 / (9/2 * 1/12))\n    return int(x)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    total_students = 0\n    boys_over_girls = 55\n    for girls in range(1000):  # arbitrary upper limit to search for girls\n        total_boys = girls + boys_over_girls\n        side_length = (girls**0.5 + 2)  # Total side including both boys and girls\n        if side_length.is_integer():  # Checks if the side_length is indeed an integer\n            boys_layer_count = (side_length / 2) if (side_length % 2 == 0) else ((side_length + 1) / 2)\n            girls_layer_count = side_length / 2\n\n            calculated_total_boys = 4 * ((boys_layer_count-1) * boys_layer_count)\n            calculated_total_girls = 4 * (girls_layer_count * (girls_layer_count - 1))\n\n            if calculated_total_boys == total_boys and calculated_total_girls == girls:\n                total_students = calculated_total_boys + calculated_total_girls\n                break\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28\n    total_items = 12\n    marker_cost = 3\n    paintbrush_cost = 1\n\n    # Assume all items are paintbrushes\n    all_paintbrush_cost = total_items * paintbrush_cost\n    # Calculate the cost difference when replacing a paintbrush with a whiteboard marker\n    cost_difference = marker_cost - paintbrush_cost\n    \n    # Calculate the number of replacements needed to reach the total cost\n    num_markers = (total_cost - all_paintbrush_cost) // cost_difference\n\n    return num_markers\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of female teachers\n    x = symbols('x')\n    \n    # The total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # The total weight of female teachers\n    total_female_weight = x * 60\n    \n    # The average weight of all teachers is 65\n    # (total weight of males + total weight of females) / (number of males + number of females) = 65\n    equation = Eq((total_male_weight + total_female_weight) / (3 + x), 65)\n    \n    # Solve the equation for x\n    num_female_teachers = solve(equation, x)[0]\n    \n    return num_female_teachers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    ans = 527 - 382\n    return ans\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Cora is 5th from front and 7th from the back, so there are 4 students in front of her and 6 students behind her.\n    rows = 5 + 6  # assuming Cora is not counted twice\n    \n    # Cora is 2nd from left and 4th from right, so there is 1 student to her left and 3 students to her right.\n    columns = 2 + 3  # assuming Cora is not counted twice\n    \n    # Calculate the number of students\n    total_students = rows * columns\n    return total_students\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 33 and 55\n    prime_factors_33 = factorint(33)\n    prime_factors_55 = factorint(55)\n\n    # Merge the dictionaries containing prime factors\n    all_factors = {**prime_factors_33, **prime_factors_55}\n\n    # To form a perfect square, all primes in the factorization must have even powers.\n    # Therefore, we adjust the prime powers to the nearest even number if they are odd.\n    m = 1\n    for prime, power in all_factors.items():\n        if power % 2 != 0:  # If power is odd\n            m *= prime\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    from math import comb\n    # Each plate has at least 2 pieces, which means 6 pieces are already allocated.\n    # Remaining 2 pieces can be distributed in (n+k-1)C(k-1) ways, where\n    # n is the number of remaining items to distribute, and k is the number of partitions.\n    # We have n=2 pieces and k=3 plates.\n    ans = comb(2+3-1, 3-1)\n    return ans\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n    \n    # Since Star is always the first runner, there are 4 positions left\n    # to be filled by the remaining 4 teammates.\n    # The number of ways to arrange these 4 teammates is 4 factorial (4!).\n    num_ways = factorial(4)\n    \n    return num_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Since we are looking for three 4-digit integers with digits either in increasing or decreasing order\n    # or in a different order, and their sum is 26352, we can start by checking all 4-digit integers \n    # that meet the criteria of having increasing digits from left to right.\n    for i in range(1000, 10000):\n        digits = str(i)\n        if digits[0] < digits[1] < digits[2] < digits[3]:\n            # Create the reverse integer with digits in decreasing order\n            reverse_i = int(digits[::-1])\n            # Iterate through all possible combinations of the same digits to find the third integer\n            for x in range(1000, 10000):\n                x_digits = str(x)\n                if set(digits) == set(x_digits) and x != i and x != reverse_i:\n                    # Check if the sum of the three integers is 26352\n                    if i + reverse_i + x == 26352:\n                        # The smallest integer is the original integer i in increasing order\n                        return i\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Based on the provided outcomes,\n    # we will infer the operation. \n    # Looking at the patterns: \n    # 2 otimes 4 = 44 seems like (2*4)*2 + (2+4)*2 = 44\n    # 5 otimes 7 = 104 seems like (5*7)*2 + (5+7)*2 = 104\n    # 1 otimes 5 = 28 seems like (1*5)*2 + (1+5)*2 = 28\n    # 7 otimes 10 = 146 seems like (7*10)*2 + (7+10)*2 = 146\n    # From this we deduce that a otimes b = (a*b)*2 + (a+b)*2\n    # Now we can compute 6 otimes 12\n\n    a = 6\n    b = 12\n    result = (a * b) * 2 + (a + b) * 2\n    return result\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Number of cuts needed for 31 segments is 30 cuts\n    cuts_for_31 = 31 - 1\n    # Time taken for 30 cuts is 60 minutes\n    time_for_30_cuts = 60\n    # Number of cuts needed for 50 segments is 49 cuts\n    cuts_for_50 = 50 - 1\n    \n    # Time taken per cut is the same for cutting into any number of segments\n    time_per_cut = time_for_30_cuts / cuts_for_31\n    \n    # Calculate the time to cut into 50 segments\n    time_for_49_cuts = time_per_cut * cuts_for_50\n    \n    return time_for_49_cuts\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        ans += 3 * 5 * 7\n    return ans\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    ans = 123 - 41\n    return ans\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    number = 210 / (1 - 0.30)\n    return number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            break\n    return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of flowers Candy gave to Nancy\n    x = symbols('x')\n\n    # Original number of flowers\n    candy_original = 11\n    nancy_original = 9\n\n    # After giving x flowers\n    candy_now = candy_original - x\n    nancy_now = nancy_original + x\n\n    # Equation based on the condition: Nancy has 8 more flowers than Candy now\n    equation = Eq(nancy_now, candy_now + 8)\n\n    # Solve the equation\n    flowers_given = solve(equation, x)\n\n    # Calculate how many flowers Candy has now\n    candy_current = candy_original - flowers_given[0]\n\n    return candy_current\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"ARRANGE\")\n    freq_a = 2\n    freq_r = 2\n    freq_n = 1\n    freq_g = 1\n    freq_e = 1\n\n    ways = factorial(total_letters) // (factorial(freq_a) * factorial(freq_r) * factorial(freq_n) * factorial(freq_g) * factorial(freq_e))\n\n    return ways\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    monday_money = 60 + 40  # total money from Mum and Dad on Monday\n    total_money = monday_money * 3  # total money for 3 days (Monday, Tuesday, Wednesday)\n    \n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 0.45\n    final_cost = initial_cost * (1 + increase_percentage)\n\n    return final_cost\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temp = -5\n    midday_temp = 17\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    diff = 1\n    while term <= 50:\n        diff += 1\n        term += diff\n    return term\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_price_p = 43  # price of one pen in pence\n    booklet_price_p = 185  # price of one booklet in pence, converted from pounds to pence\n    total_spent_p = (3 * pen_price_p) + (4 * booklet_price_p)  # total spent in pence\n    total_money_p = 1000  # £10 converted to pence\n\n    change_p = total_money_p - total_spent_p  # change in pence\n    change_pounds = change_p / 100  # converting change back to pounds\n\n    return round(change_pounds, 2)\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # According to the knowledge cutoff in 2023, the population of St. Petersburg, Russia, is about 5.4 million\n    # Since we are to write the population in figures (numerals), we don't need to perform any actual computation.\n    # Instead, we just return the population in numerals as an integer.\n    ans = 5400000\n    return ans\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    # Loop through all possible 3-digit numbers\n    for i in range(100, 1000):\n        str_num = str(i)\n        # Check if adjacent digits differ by at least 7\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousand_digit in range(5, 10):\n        for hundred_digit in range(0, 10):\n            for ten_digit in range(0, 10):\n                for unit_digit in range(1, 10):\n                    if thousand_digit % hundred_digit == 0 and \\\n                       thousand_digit % ten_digit == 0 and \\\n                       thousand_digit % unit_digit == 0:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "from itertools import product\n\ndef solution():\n    # Generate all possible 4-digit combinations from 0 to 9\n    for comb in product(range(10), repeat=4):\n        # Convert tuple to string for comparison\n        comb_str = ''.join(map(str, comb))\n        # Applying the given conditions\n        if sum(a!=b for a,b in zip(comb_str, '5648')) != 2: continue\n        if sum(a!=b for a,b in zip(comb_str, '3628')) != 2: continue\n        if sum(a!=b for a,b in zip(comb_str, '3147')) != 2: continue\n        if sum(a!=b for a,b in zip(comb_str, '5629')) != 2: continue\n        if all(a!=b for a,b in zip(comb_str, '1258')): \n            return comb_str\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the tilde representation\n    tilde = symbols('tilde')\n\n    # Create the equation based on the provided expression\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve the equation for the tilde variable\n    solution = solve(equation, tilde)\n\n    # Return the solution for the tilde variable\n    return solution[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    return (22 - 4) * 2\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    num_weeks = 10\n\n    # Using the formula for the sum of an arithmetic sequence\n    # S_n = n/2 * (2a + (n - 1)d)\n    total_coins = num_weeks / 2 * (2 * first_term + (num_weeks - 1) * common_difference)\n    \n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marks of each student\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given equations based on the problem statement\n    eq1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B, and C\n    eq2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C, and D\n    eq3 = Eq(E, 96)                # E's mark is 96\n    eq4 = Eq(A, E + 1)             # A has the highest mark, which is one more than E's mark of 96\n    eq5 = Eq(B, D)                 # B and D have the same score\n    \n    # Additional constraints based on the scores being greater than 91\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91)\n\n    # Solve the system of equations with the constraints\n    solutions = solve((eq1, eq2, eq3, eq4, eq5) + constraints, (A, B, C, D, E))\n\n    # Extract the score of D from the solutions\n    D_score = solutions[D]\n\n    return D_score\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    final_amount = 37100\n\n    # Using formula A = P(1 + r)^t\n    # Where A is the final amount, P is the principal, r is the rate, and t is the time in years\n    # We need to solve for t: t = (log(A/P)) / (log(1 + r))\n    from math import log\n    num_years = (log(final_amount/principal)) / (log(1 + rate))\n\n    if round(num_years) == 5:\n        return 'right'\n    else:\n        return round(num_years)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let f be the number of female teachers\n    # 3 male teachers * 75 kg/teacher + f female teachers * 60 kg/teacher = (3 + f) teachers * 65 kg/teacher\n    # Solving the equation for f gives us the number of female teachers\n    \n    f = symbols('f')\n    equation = Eq(3 * 75 + f * 60, (3 + f) * 65)\n    female_teachers = solve(equation, f)\n    \n    return female_teachers[0]\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarters_full_mass = 350\n    one_quarter_full_mass = 250\n    two_quarters_full_mass = three_quarters_full_mass - one_quarter_full_mass\n    empty_jar_mass = one_quarter_full_mass - two_quarters_full_mass\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda = 13.15  # in liters\n    bottle_fraction = 1/7\n    bottle_capacity = 9.1  # in liters\n    cup_capacity = 350 / 1000  # in liters (350 ml to 0.35 liters)\n\n    soda_for_bottle = bottle_capacity * bottle_fraction\n    soda_for_cups = 4 * cup_capacity\n\n    soda_left = total_soda - soda_for_bottle - soda_for_cups\n\n    return round(soda_left, 2)\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father_current, son_current = symbols('father_current son_current')\n\n    # father's age 6 years ago is 5 times son's age 6 years ago\n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n\n    # the sum of their current ages is 78\n    equation2 = Eq(father_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    return solutions[father_current]\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure victory, Rose must leave a number of marbles such that Kylie is forced to make\n    # a move that leaves a number of marbles that is a multiple of 3 (since Rose can always\n    # take 2 if Kylie takes 1, or 1 if Kylie takes 2, resulting in Rose taking the last marble).\n    # Therefore, Rose must take away 1 marble.\n    # After Rose's turn, there will be 13 marbles left, which is not a multiple of 3.\n    # From there on, Rose can always take 3 minus whatever Kylie takes to maintain the total at\n    # a non-multiple of 3 until eventually Kylie is forced to take the second-to-last marble,\n    # leaving Rose to take the last one.\n    rose_first_pick = 1\n\n    return rose_first_pick\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = 2023 ** 0.5\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters (converted from cm)\n    x = 0.04  # displacement from equilibrium in meters (converted from cm)\n\n    # Total energy (E) of an oscillator is given by E = (1/2) * k * A^2\n    total_energy = 0.5 * k * A ** 2\n\n    # Maximum speed (v_max) is given by v_max = A * sqrt(k/m)\n    # Speed at x (v_x) is given by:\n    # v_x = sqrt(v_max^2 - (x * sqrt(k/m))^2)\n    # but since v_max^2 = (A^2) * (k/m), we can rewrite v_x as:\n    # v_x = sqrt((A^2 * k/m) - (x^2 * k/m))\n    # thus, simplifying this, we get:\n    # v_x = sqrt(k/m) * sqrt(A^2 - x^2)\n    \n    v_x = sqrt(k/m) * sqrt(A**2 - x**2)\n\n    return {'total_energy': total_energy, 'speed_at_x': v_x}\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pounds = 45\n    coin_value_p = 5\n\n    number_of_coins = (total_pounds * 100) / coin_value_p\n\n    return number_of_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance run by Bud per minute as b metres.\n    # Then Pip runs b + 20 metres per minute.\n    # Over 3 minutes, Bud will have run 3*b and Pip will have run 3*(b + 20).\n    # Given that they have run 540 metres together in 3 minutes, we have:\n    # 3*b + 3*(b + 20) = 540\n\n    b = symbols('b')\n    equation = Eq(3*b + 3*(b + 20), 540)\n    solution_b = solve(equation, b)\n\n    # Now we find the total distance run by Pip in 3 minutes: 3*(b + 20)\n    distance_pip = 3 * (solution_b[0] + 20)\n    \n    return distance_pip\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of coins in Box B at the beginning\n    x = symbols('x')\n\n    # Box A contains four times as many coins as Box B, so Box A has 4x coins\n    # 6% of the coins in Box A (which is 0.06 * 4x) are removed to Box C\n    # 20% of the coins in Box B (which is 0.2 * x) are removed to Box C\n    # Therefore, Box C has initially (0.06 * 4x) + (0.2 * x) coins transferred\n\n    # After the transfer, Box C has 1220 coins, which is 22% more than the original\n    # This means Box C initially had (100 / 122) * 1220 coins\n    # We can set up the equation (0.06 * 4x) + (0.2 * x) = (100 / 122) * 1220\n\n    # Solving for x gives us the number of coins in Box B at the beginning,\n    # and then we can calculate the number of coins in Box A since Box A has 4 times this amount\n\n    equation = Eq((0.06 * 4 * x) + (0.2 * x), (100 / 122) * 1220)\n\n    solution_x = solve(equation, x)\n\n    # The number of coins in Box A at the beginning is 4 times the number of coins in Box B (x)\n    ans = 4 * solution_x[0]\n\n    return ans\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # initial percentage of coffee drinks\n    coffee_initial_percent = 60\n    # final percentage of coffee drinks\n    coffee_final_percent = 40\n    # initial percentage of tea drinks\n    tea_initial_percent = 100 - coffee_initial_percent\n    # final percentage of tea drinks\n    tea_final_percent = 100 - coffee_final_percent\n    # The ratio between initial and final percentage of tea\n    ratio = tea_initial_percent / coffee_final_percent\n\n    # percentage increase in bottles of tea\n    percent_increase = ((tea_final_percent / tea_initial_percent) - 1) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal numbers to decimal\n    num1 = int('2A3', 16)\n    num2 = int('17B', 16)\n    \n    # Perform addition in decimal\n    result_decimal = num1 + num2\n    \n    # Convert the result back to hexadecimal\n    ans = hex(result_decimal)[2:].upper()  # Remove the '0x' prefix and convert to upper case\n    \n    return ans\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = 0.25 * 0.30 * 0.40 * 300\n    return ans\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_revenue = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price_per_flower = total_revenue / total_flowers\n    return average_price_per_flower\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n    \n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n    \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # 60p is 60 pence\n    james_money_p = 110  # £1.10 is 110 pence\n    \n    total_money_p = lewis_money_p + james_money_p  # add the total in pence\n    \n    ans = total_money_p / 100  # convert pence to pounds\n    return ans\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"WINNING\")\n    w_occurrences = \"WINNING\".count('W')\n    i_occurrences = \"WINNING\".count('I')\n    n_occurrences = \"WINNING\".count('N')\n    g_occurrences = \"WINNING\".count('G')\n    \n    ans = factorial(total_letters) // (factorial(w_occurrences) * factorial(i_occurrences) * factorial(n_occurrences) * factorial(g_occurrences))\n    return ans\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Since each stack must have at least 3 books, we start from 3\n    for x1 in range(3, 14):\n        for x2 in range(3, 14):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    # Derangement formula, also known as !n (subfactorial n) for calculating\n    # the number of permutations of n elements where no element appears in its original position.\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    \n    def subfactorial(n):\n        return int(factorial(n) * sum((-1) ** i / factorial(i) for i in range(n + 1)))\n\n    ans = subfactorial(6)\n\n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # let x be the number of bottles of lemonade sold\n    # let y be the number of bottles of \"1000 Plus\" sold\n    # x + y <= 350 because not all were sold\n    # 4x + 7y = 2012 this is the total income\n    \n    # finding the minimum number of bottles of \"1000 Plus\" means maximizing the number of lemonade, so we start from maximum x\n    max_lemonade = 350  # assuming he could sell all as lemonade\n    \n    for x in range(max_lemonade, -1, -1):  # iterate backwards to find maximum number of x (lemonade)\n        y = (2012 - 4*x) / 7  # derive y from our total income equation\n        if y.is_integer() and y <= 350 - x and y >= 0:  # y must be an integer, within the limit and not negative\n            return int(y)  # y is the minimum number of \"1000 Plus\"\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kilograms\n    final_velocity = 8  # velocity in m/s\n    time = 4  # time in seconds\n    \n    # Using formula: Force = mass * acceleration\n    # First, calculate acceleration using formula: final_velocity = initial_velocity + (acceleration * time)\n    # Since initial velocity is 0 (starting from stationary), we can simplify this to:\n    # acceleration = final_velocity / time\n\n    acceleration = final_velocity / time\n    force = mass * acceleration\n    \n    return force\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial ratio of blue pens to red pens is 3:5\n    # Let's denote the original number of blue pens as 3x and red pens as 5x\n    # The total number of pens initially is 96, so we have 3x + 5x = 96\n    # Solving for x gives us x = 96 / 8 = 12\n    x = 96 / (3 + 5)\n\n    # Number of blue pens initially is 3x\n    initial_blue_pens = 3 * x\n\n    # Number of red pens initially is 5x\n    initial_red_pens = 5 * x\n\n    # 60 red pens are added\n    total_red_pens = initial_red_pens + 60\n\n    # Let's denote the number of blue pens added as y\n    # After the addition, 40% of the pens are blue. This means 60% are red.\n    # Hence, the ratio of blue pens to total pens is 40/100 = 2/5\n    # Therefore, (initial_blue_pens + y)/(initial_blue_pens + y + total_red_pens) = 2/5\n    # Solving for y gives us y = (2/5) * (initial_blue_pens + y + total_red_pens) - initial_blue_pens\n\n    # Let's calculate y with the known values\n    y = (2/5) * (initial_blue_pens + total_red_pens) - initial_blue_pens\n\n    # Return the number of blue pens added rounded down to the nearest whole number as pens can't be fractional\n    return int(y)\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    # Let x be the number of tricycles and y be the number of cars.\n    # x + y = 24 (The total number of tricycles and cars is 24)\n    # 3x + 4y = 86 (The total number of wheels is 86)\n    # To find the number of tricycles, we can solve the equations simultaneously.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 24)\n    equation2 = Eq(3*x + 4*y, 86)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    # Function to calculate the number of factors of a number\n    def num_factors(n):\n        factors = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Considering 9 numbers are chosen out of 13 (1 to 13)\n    combs = list(combinations(range(1, 14), 9))\n\n    # List to hold the products of 4 numbers not picked in each scenario\n    products = []\n\n    for comb in combs:\n        # Prepare a dictionary containing each number and its count of factors\n        number_factors = {number: num_factors(number) for number in comb}\n\n        # List of numbers for which factors count is unique among the 9 chosen\n        unique_factors = [number for number, count in number_factors.items() if list(number_factors.values()).count(count) == 1]\n\n        # Continue only if there are exactly two numbers with unique factors count\n        if len(unique_factors) == 2:\n            # Get the two numbers that are considered odd and even\n            odd_number = max(unique_factors)\n            even_number = min(unique_factors)\n            \n            # Based on May's information, find the candidates for May's number\n            may_options = [num for num in comb if num % 2 == 0 and odd_number - num == 2]\n            \n            # If there is only one candidate for May's number, we take that scenario\n            if len(may_options) == 1:\n                may_number = may_options[0]\n                \n                # Based on Mark's information, which is 1 less than May's, check if it is in the combo\n                if may_number - 1 in comb:\n                    # These are the picked numbers\n                    picked_numbers = set(comb)\n                    \n                    # Create a set of all numbers from 1 to 13\n                    all_numbers = set(range(1, 14))\n                    \n                    # The unpicked numbers\n                    not_picked = all_numbers - picked_numbers\n                    \n                    # Calculate the product of the 4 numbers not picked\n                    product = prod(not_picked)\n                    products.append(product)\n    \n    # If somehow we found more than one potential product, return the smallest one\n    return min(products) if products else None\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    correct_answers = symbols('correct_answers')\n    incorrect_answers = correct_answers/3 - 4\n    \n    equation = Eq(5 * correct_answers - 2 * incorrect_answers, 151)\n    \n    solutions = solve(equation, correct_answers)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    total_cost = 2.42 * 32\n    cost_per_person = total_cost / 11\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of 3-wing boxes and y be the number of 7-wing boxes.\n    x, y = symbols('x y', integer=True)\n\n    # We set up the chicken wing boxes equation: 3x + 7y = total_wings\n    # We are trying to find the Frobenius number, which is the largest number \n    # that cannot be expressed as a linear combination of 3 and 7, with non-negative coefficients.\n    \n    # Chicken McNugget Theorem for two coprime numbers a and b:\n    # largest number not obtainable = a * b - a - b\n    largest_unobtainable = 3 * 7 - 3 - 7\n\n    return largest_unobtainable\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert both numbers to base 10\n    num1_base7 = int('45', 7)\n    num2_base7 = int('66', 7)\n    \n    # Sum the numbers in base 10\n    sum_base10 = num1_base7 + num2_base7\n    \n    # Convert the result back to base 7\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    \n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # In a round-robin chess tournament, each player plays every other player once.\n    # Count the total number of matches played as half the sum of all the matches individual players have played.\n    # This works because each match involves two players, so adding one match adds one to the match counts of two players.\n    total_matches_individual = 4 + 6 + 2 + 1 + 3 + 5\n    total_matches = total_matches_individual // 2\n    # The number of matches F has played must balance the equation:\n    # total matches played by all = binomial_coefficient(number of players, 2)\n    # where binomial_coefficient(n, k) = n! / (k!(n - k)!).\n    # For 7 players, the total number of matches that can be played is binomial_coefficient(7, 2) = 7*6 / (2*1) = 21\n    matches_F_played = 21 - total_matches\n    return matches_F_played\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Since N is divided by 18 out of the first 20 natural numbers and the two that do not divide it are consecutive,\n    # the two numbers that do not divide N must be either both even or both odd.\n    # If both are even, one of them would have to be 2, which can't be since all integers are divisible by 2.\n    # Hence, both are odd, and since they are consecutive, their possible sets are (1, 3), (3, 5), ..., (17, 19).\n    # The least common multiple (LCM) of numbers 1-20 is N (it's divisible by all but the two consecutive numbers).\n    # We need to find two consecutive odd numbers that don't divide the LCM of the range 1-20.\n    # The LCM of the first 20 natural numbers will be the product of the highest powers of all primes within the range.\n    from math import gcd\n    from functools import reduce\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def lcm_multiple(*args):\n        return reduce(lcm, args)\n\n    # Calculate the LCM of the first 20 natural numbers.\n    N_lcm = lcm_multiple(*range(1, 21))\n\n    # Loop through the possible sets of two consecutive odd numbers,\n    # and find the one that does not divide the LCM to determine the two numbers that do not divide N.\n    for i in range(1, 20, 2):  # Start at 1 and increment by 2 to get odd numbers\n        if N_lcm % i != 0 and N_lcm % (i + 2) != 0:\n            return i + (i + 2)\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    # Let x be the age of Linda when Cici was born.\n    # Linda's age 4 years later = x + 4\n    # Cici's age 4 years later = 4 (since Cici was just born)\n\n    # The sum of their ages 4 years later will be 37.\n    # So, (x + 4) + 4 = 37\n    # Solving for x gives us Linda's age when Cici was born.\n    x = 37 - 8  # Simplifying the equation\n\n    # Linda's age 3 years later from now will be her age when Cici was born plus 11 (her age then) plus 3.\n    linda_age_3_years_later = x + 11 + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number_min = 5\n    second_number_min = 2\n    min_sum = first_number_min + second_number_min\n    return min_sum\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let n be the number of Natasha's stamps\n    # Jamie-Anne has 5/3 times the number of Natasha's stamps\n    # Jamie-Anne has 18 more stamps than Natasha\n    \n    # Let the number of Natasha's stamps be 3x, and Jamie-Anne's be 5x\n    # Since Jamie has 18 more stamps than Natasha, we have 5x - 3x = 18\n    \n    # Solving for x\n    x = 18 / 2  # Dividing both sides by 2\n    \n    # Now we calculate the total number of stamps they have together\n    total_stamps = 3*x + 5*x\n    \n    return total_stamps\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    # Start with an empty sum\n    total_sum = 0\n\n    # Since the quotient and remainder are equal, such a number must be of the form 15n + n,\n    # where n is an integer greater than 0. This simplifies to 16n.\n    # Therefore, the condition is that the number must be a multiple of 16 (16n) and greater than 160.\n    # Find the lowest multiple of 16 greater than 160.\n    n = (160 // 16) + 1\n    smallest_number = 16 * n\n\n    # Loop through the possible numbers, adding them to the sum if they satisfy the condition.\n    while smallest_number <= 16 * 15:  # 16 * 15 is the largest number that can fulfill the condition\n        total_sum += smallest_number\n        n += 1\n        smallest_number = 16 * n\n\n    return total_sum\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    # There are 5 choices of entrances for each of the 4 people\n    ways_for_each_person = 5\n    \n    # Since the order matters, it's a permutation problem, and each person makes an independent choice\n    total_ways = ways_for_each_person ** 4\n    \n    return total_ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300\n    distance_downhill = 300\n    speed_uphill = 10\n    speed_downhill = 30\n\n    time_uphill = distance_uphill / speed_uphill\n    time_downhill = distance_downhill / speed_downhill\n\n    total_time = time_uphill + time_downhill\n    total_distance = distance_uphill + distance_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n    \n    # Judy can be at the first place or the last place: 2 possibilities\n    judy_positions = 2\n    \n    # The other five friends can be arranged in any order: 5! (factorial of 5)\n    friends_arrangement = factorial(5)\n    \n    # Multiplying the number of ways Judy can stand with the arrangements of her friends\n    ways_to_form_line = judy_positions * friends_arrangement\n    \n    return ways_to_form_line\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n\n    for i in range(1, lcm + 1):\n        if (number * i) % lcm == 0 and (number * i) / number == i and i != number:\n            return i\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Remaining apples, pears, oranges when distributed\n    rem_apples = 10\n    rem_pears = 28\n    rem_oranges = 13\n\n    # Total apples, pears, oranges after removing the remainder\n    total_apples = 226 - rem_apples\n    total_pears = 352 - rem_pears\n    total_oranges = 157 - rem_oranges\n\n    # Calculate GCD to find the maximum possible number of students\n    ans = gcd(total_apples, gcd(total_pears, total_oranges))\n    \n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost = symbols('cost')\n    \n    price = cost + 40\n    discount_price = price * 0.8\n    profit = discount_price - cost\n    \n    equation = Eq(profit, 12)\n    \n    cost_value = solve(equation, cost)\n    \n    return cost_value[0]\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    position = 200\n    current_num = 1\n    total_digits_written = 0\n    \n    while True:\n        digits_in_current_num = len(str(current_num))\n        total_digits_written += digits_in_current_num\n        \n        if total_digits_written >= position:\n            return int(str(current_num)[position - total_digits_written + digits_in_current_num - 1])\n        \n        current_num += 1\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let x be the number of qualified products.\n    # Total televisions produced in 4 days are 4 * 500.\n    # Every unqualified product is like losing 5 points and then losing additional 18 points,\n    # thus a net loss of 23 points (5 + 18).\n    # If all products were qualified, the total points would be 4 * 500 * 5.\n\n    total_points_if_all_qualified = 4 * 500 * 5\n    total_unqualified_loss = total_points_if_all_qualified - 9931\n    number_of_unqualified_products = total_unqualified_loss // 23\n    total_products = 4 * 500\n    number_of_qualified_products = total_products - number_of_unqualified_products\n\n    return number_of_qualified_products\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    daniel, daughter = symbols('daniel daughter')\n    \n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n    \n    solutions = solve((equation1, equation2), (daniel, daughter))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    # Original relation between hens and roosters\n    equation1 = Eq(hens, 6 * roosters)\n\n    # New relation after the increase in numbers\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    # Total number of chickens before the increase\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    # Calculate the initial total sum of seven numbers with a mean of 12\n    total_initial = 7 * 12\n    \n    # Calculate the new total sum of eight numbers with a new mean of 11\n    total_new = 8 * 11\n    \n    # The eighth number is the difference between the new total and the initial total\n    eighth_number = total_new - total_initial\n    \n    return eighth_number\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Distance both met from Q\n    meet_distance_Q = 800\n\n    # Total distance between P and Q\n    total_distance_PQ = 1800\n\n    # When April met Baye, April covered total_distance_PQ + meet_distance_Q distance\n    # And April runs 4 times the speed of Baye\n    # Thus, Baye covered meet_distance_Q distance while April covered 4 * meet_distance_Q\n    # Now, April travels back to point P, covering total_distance_PQ - meet_distance_Q distance\n    \n    # Calculate the remaining distance for Baye when April meets Baye\n    baye_distance_covered_when_april_meets_baye = meet_distance_Q / 4\n\n    # Calculate the distance Baye covers while April returns to P\n    baye_distance_during_april_return = (total_distance_PQ - meet_distance_Q) / 4\n\n    # Total distance covered by Baye is the sum of the distance covered till the meeting point\n    # and during April's return to P\n    baye_total_distance = baye_distance_covered_when_april_meets_baye + baye_distance_during_april_return\n    \n    # Now we calculate how far Baye is away from Q when April arrives at P\n    distance_baye_from_Q = total_distance_PQ - baye_total_distance\n\n    return distance_baye_from_Q\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    periodic_part = \"538462\"\n    index = (2021 % len(periodic_part)) - 1  # Adjusting for zero-based indexing\n    if index == -1:  # If index is -1, it means we're at the last digit of the period\n        index = len(periodic_part) - 1\n    ans = periodic_part[index]\n    return int(ans)\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # The given sequence can be split into two parts: an increasing sequence from 1 to 8\n    # and a decreasing sequence from 7 to 1 followed by another increasing sequence from 1 to 2.\n    # We can calculate the sum of both parts separately and add them together.\n\n    # First part: 1+2+3+4+5+6+7+8\n    n1 = 8  # The number of terms in the first increasing sequence\n    sum1 = n1 * (1 + n1) // 2  # Sum of the first n natural numbers is n*(n+1)/2\n\n    # Second part: 7+6+5+4+3+2+1\n    n2 = 7  # The number of terms in the decreasing sequence\n    sum2 = n2 * (1 + n2) // 2  # Sum of the first n natural numbers is n*(n+1)/2\n\n    # Additional numbers in the sequence: 1+2\n    additional_numbers = 1 + 2 \n\n    # The final sum is the sum of both parts and additional numbers\n    ans = sum1 + sum2 + additional_numbers\n    return ans\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    nums = [375, 753, 537, 357, 573, 735]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 2/5\n    total_cost = 132\n\n    # Let x be the total money Bud had at first\n    # we know that (book_fraction + bag_fraction)*x = total_cost\n    # Therefore, we need to solve for the value of x\n\n    x = total_cost / (book_fraction + bag_fraction)\n\n    return x\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45) - (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(C, B - 75)\n    equation3 = Eq(A + B + C, 835)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Maximum number of beads that Darrell can draw without getting 5 green beads\n    # is when he draws all blue and white beads first\n    max_beads_without_5_green = 5 + 6 # all blue and white beads\n\n    # To make sure to get 5 green beads, he needs to draw one more after that\n    beads_to_get_5_green = max_beads_without_5_green + 5 # plus 5 green beads\n\n    return beads_to_get_5_green\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_5 = 105 // 5\n    count_7 = 105 // 7\n    count_5_and_7 = 105 // (5*7)\n\n    # Using the Inclusion-Exclusion Principle\n    ans = count_5 + count_7 - count_5_and_7\n\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    for page in range(1, 216):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for number in range(10000, 100000):\n        if int(\"1\" + str(number)) == (int(str(number) + \"1\") // 3):\n            return number\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 82):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # John takes 12 minutes to walk from the first floor to the fourth floor.\n    # This implies he covers 3 floors (from 1st to 4th floor) in 12 minutes.\n    \n    # Therefore, the time it takes to walk one floor is 12 minutes divided by 3 floors.\n    time_per_floor = 12 / 3\n    \n    # Now, to walk from the first floor to the eighth floor, he needs to cover 7 floors.\n    \n    # The time taken to cover 7 floors is time per floor multiplied by 7 floors.\n    total_time = time_per_floor * 7\n    \n    return total_time\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    # Since the baskets are identical, we only need to count the distinct distributions.\n    for x1 in range(7):\n        for x2 in range(x1, 7):\n            for x3 in range(x2, 7):\n                if x1 + x2 + x3 == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels\n    initial_ratio_birds = 8\n    initial_ratio_squirrels = 5\n    \n    # Initial total number, let x be the common factor\n    x = 1  # We can assume any common factor since we are looking for percentage\n    total_initial = (initial_ratio_birds + initial_ratio_squirrels) * x\n    \n    # Number of squirrels increase by 20%\n    new_squirrels = initial_ratio_squirrels * x * 1.20\n    \n    # Since total number remains the same, find the number of birds that flew away\n    birds_remaining = total_initial - new_squirrels\n    \n    # Calculate the percentage of birds that flew away\n    initial_birds = initial_ratio_birds * x\n    birds_flew_away = initial_birds - birds_remaining\n    percentage_flew_away = (birds_flew_away / initial_birds) * 100\n    \n    return percentage_flew_away\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    possible_values = set()\n    remainder = 3\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    total_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * total_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the number of days using the formula for the number of terms in an arithmetic sequence\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Define a custom operation based on given patterns\n    def custom_operation(a, b):\n        return a + b - (a % 10)\n\n    # Use the custom operation to find 9 ◈ 20\n    ans = custom_operation(9, 20)\n\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3  # in liters\n    juice_drank = 9  # in liters\n    container_volume = 5  # in liters\n\n    total_juice = total_cartons * volume_per_carton\n    remaining_juice = total_juice - juice_drank\n\n    containers_needed = -(-remaining_juice // container_volume)\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    position_of_next_term = 5  # since we already have 4 terms\n\n    next_term = first_term + (position_of_next_term - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "from itertools import permutations\n\ndef solution():\n    max_sum_art = 0\n    # Since each letter represents an integer from 1 to 9, generate all permutations\n    for perm in permutations(range(1, 10), 4):\n        d, a, r, t = perm\n        # Check if the equations hold true with the selected digits\n        if d + a + r + t == 11 and t + a + r + t == 12 and c + a + r + t == 13:\n            max_sum_art = max(max_sum_art, a + r + t)\n    return max_sum_art\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 1000):  # Assuming a reasonable upper limit for practical computation\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    total_loafs_needed = 35\n    total_cups_needed = total_loafs_needed / loafs_per_cup\n    return total_cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_by_each = friends - 1  # Each friend sends a card to all other friends\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    left_of_tanya = 3\n    right_of_tanya = 5\n    tanya = 1  # Count Tanya as one member\n\n    total_members = left_of_tanya + right_of_tanya + tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    largest_prime = 0\n    for prime in reversed(list(primerange(1, 10000))):\n        if 87878 % prime == 0:\n            largest_prime = prime\n            break\n\n    return largest_prime\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    # Equation 1: 1/4 of the boys is equal to 2/5 of the girls.\n    equation1 = Eq(boys / 4, girls * 2 / 5)\n\n    # Equation 2: Total number of boys and girls is 39.\n    equation2 = Eq(boys + girls, total_students)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Number of more boys than girls.\n    more_boys = solutions[boys] - solutions[girls]\n\n    return more_boys\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate time for each section\n    time1 = 280 / 7  # Time for the first 280 metres\n    time2 = 400 / 5  # Time for the middle 400 metres\n    time3 = (800 - 280 - 400) / 8  # Time for the final sprint stage\n\n    # Sum the time for all sections\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    total_crates = 24\n    van_capacity = 12\n\n    total_crate_weight = crate_weight * total_crates\n    vans_needed = -(-total_crate_weight // van_capacity)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n    \n    # Daniel gives away 24 stickers\n    daniel_final = daniel - 24\n\n    # Patrick buys 10 stickers\n    patrick_final = patrick + 10\n\n    # Patrick has twice as many stickers as Daniel at the end\n    equation = Eq(patrick_final, 2 * daniel_final)\n\n    # Initially, Daniel and Patrick had the same number of stickers\n    initial_condition = Eq(daniel, patrick)\n\n    # Solve the system of equations\n    solutions = solve((equation, initial_condition), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def count_partitions(n, max_part):\n        if n == 0:\n            return 1\n        elif n < 0 or max_part == 0:\n            return 0\n        else:\n            return count_partitions(n - max_part, max_part) + count_partitions(n, max_part - 1)\n\n    return count_partitions(5, 5)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n    vertical_distance = whale_depth + plane_height\n    \n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # For the minimum number of right-handed girls, we assume that\n    # all right-handed pupils except girls are right-handed.\n    # Then the remaining right-handed must be girls.\n    \n    # Maximum number of right-handed that can be boys\n    max_right_handed_boys = total_pupils - girls\n    # Minimum number of right-handed girls\n    min_right_handed_girls = right_handed - max_right_handed_boys\n    \n    # Ensuring we don't have a negative count\n    min_right_handed_girls = max(min_right_handed_girls, 0)\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_diff = float('inf')\n\n    # Generate all permutations of the digits 1 to 9\n    from itertools import permutations\n    all_combinations = permutations('123456789')\n\n    # Compare each unique pair of permutations to find the smallest difference\n    for combo1 in all_combinations:\n        for combo2 in all_combinations:\n            num1, num2 = int(''.join(combo1)), int(''.join(combo2))\n            if num1 != num2:\n                diff = abs(num1 - num2)\n                if diff < smallest_diff:\n                    smallest_diff = diff\n                    # early stopping condition\n                    if smallest_diff == 1:\n                        return smallest_diff\n\n    return smallest_diff\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day_per_worker = 6\n    total_skirts = 0\n    for day in range(1, 10):  # From day 1 to day 9\n        workers = day\n        skirts_made_today = workers * skirts_per_day_per_worker\n        total_skirts += skirts_made_today\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    fruits = symbols('fruits')\n\n    apples = 2 / 3 * fruits\n    bananas = 1 / 9 * fruits\n    lemons = fruits - apples - bananas\n\n    # equation: apples = lemons + 12\n    equation = Eq(apples, lemons + 12)\n\n    # solve for total number of fruits\n    total_fruits = solve(equation, fruits)[0]\n\n    # calculate the number of lemons\n    num_lemons = lemons.subs(fruits, total_fruits)\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Time taken by 5 taps to fill 1 litre\n    time_for_1_litre = 2  # in minutes\n\n    # Capacity filled by 5 taps in 1 minute\n    capacity_per_minute = 1 / time_for_1_litre  # litres per minute\n\n    # Capacity filled by 1 tap in 1 minute\n    capacity_per_tap = capacity_per_minute / 5  # litres per minute per tap\n\n    # Time for one tap to fill 500ml\n    time_for_500ml = 0.5 / capacity_per_tap  # in minutes\n\n    return time_for_500ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, brother = symbols('john brother')\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n    \n    return solutions[brother]\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    # Since a*a = (a*a) + (a+a), we can find a by solving the quadratic equation\n    # a^2 + a + a - 399 = 0 => a^2 + 2a - 399 = 0\n    from sympy import symbols, Eq, solve\n    a = symbols('a')\n    equation = Eq(a**2 + 2*a - 399, 0)\n    solutions = solve(equation, a)\n\n    # Filter out the potential negative solution, as we're looking for whole numbers\n    ans = [sol.evalf() for sol in solutions if sol.is_real and sol > 0]\n    return int(ans[0])\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben is 110cm tall\n    difference = 20   # Ben is 20cm shorter than Sally\n\n    sally_height = ben_height + difference  # Calculate Sally's height\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n    \n    # Let the total number of visitors be represented by the variable 'visitors'\n    children = (3/5) * visitors\n    remaining = visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children - men, 140)\n    \n    # Solve for the total number of visitors\n    total_visitors = solve(equation, visitors)\n    \n    # There could be a single solution or multiple, we pick the positive one (as visitor count cannot be negative)\n    answer = [sol for sol in total_visitors if sol > 0]\n\n    return answer[0]\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_amount = 2000  # millilitres in 2 litres\n    amount_drank = 350     # millilitres drank\n    \n    amount_left = initial_amount - amount_drank\n    \n    return amount_left\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    result = 3280 * 0.40\n    return result\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    digits.sort(reverse=True)\n    \n    # The greatest sum is achieved when the largest digits are in the hundreds place. \n    # Then, we should form two numbers with the next largest digits in the tens place, \n    # and the smallest digits in the ones place.\n    # Since we have 6 digits, we will split them into two groups of 3 for each number.\n    number1 = digits[0] * 100 + digits[2] * 10 + digits[4]\n    number2 = digits[1] * 100 + digits[3] * 10 + digits[5]\n\n    # The sum of the two numbers will be the answer.\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyze the given pattern and determine its rules:\n    # It appears that the pattern alternates between adding 7 and multiplying by 2.\n    # Therefore, starting from the first number (1), the pattern is as follows:\n    # 1 (start)\n    # 1 * 8 = 8 (multiply by 8)\n    # 8 + 8 = 16 (add 8)\n    # 16 * (1.4) = 23 (multiply by approximately 1.4, which is 23/16)\n    # 23 + 23 = 46 (add 23)\n    # 46 * (1.15) = 53 (multiply by approximately 1.15, which is 53/46)\n    \n    # The next step should be to add 53 to the last number since the last operation was multiplication.\n    next_number = 53 + 53\n    return next_number\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water A can fill in one unit of time\n    # Let y be the amount of water B can fill in one unit of time\n    # Let z be the amount of water C can fill in one unit of time\n    # Let T be the total amount of water the pool can hold\n\n    # Create symbols for solving equations\n    x, y, z, T = symbols('x y z T')\n\n    # Equation 1: Flow rate of B is twice that of A\n    equation1 = Eq(y, 2 * x)\n\n    # Equation 2: A and C together fill the pool, 18 tons from A\n    equation2 = Eq(18 + z * (18 / x), T)\n\n    # Equation 3: B and C together fill the pool, 27 tons from B\n    equation3 = Eq(27 + z * (27 / y), T)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z, T))\n\n    # We are interested in the total amount of water T\n    return solutions[T]\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches = 20\n    pay_per_match = 500\n    goals = 2\n    pay_per_goal = 100\n\n    total_pay = (matches * pay_per_match) + (goals * pay_per_goal * matches)\n    return total_pay\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kg = total_cost / total_weight\n    return cost_per_kg\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # leading digit cannot be zero in MATH or HTAM\n            continue\n        MATH = M*1000 + A*100 + T*10 + H\n        HTAM = H*1000 + T*100 + A*10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let the total amount of grass be G (constant)\n    # Let the daily consumption of grass by one horse be H\n    # Let the daily consumption of grass by one sheep be S\n    # According to the problem, we have the following relationships:\n    # 20H * 12 = G => H = G / (20 * 12)\n    # 60S * 24 = G => S = G / (60 * 24)\n    # H = 4S\n    \n    # We substitute H in terms of G and equate it to 4 times S in terms of G\n    # G / (20 * 12) = 4 * (G / (60 * 24))\n    # After simplifying we find that S = G / (20 * 24)\n\n    # Now, we know that 12 horses and 88 sheep will eat all the grass in some days (d)\n    # 12H + 88S * d = G\n    # Replacing H by G / (20 * 12) and S by G / (20 * 24), we have:\n    # (12 * G / (20 * 12) + 88 * G / (20 * 24)) * d = G\n    # Simplifying inside the brackets:\n    # (G / (20) + 11 * G / (60)) * d = G\n    # Simplifying further by taking G common:\n    # (1 / 20 + 11 / 60) * d = 1\n    # (3 / 60 + 11 / 60) * d = 1\n    # (14 / 60) * d = 1\n    # Finally, solving for d:\n    d = 1 / (14 / 60)\n\n    return int(d)\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    a = 1\n    b = 10\n    ans = sum(range(a, a + 2 * b, 2))\n    return ans\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    first_number = 5\n    last_number = 10\n    count = last_number - first_number + 1\n    return count\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count_at_least_two_sevens = 0\n\n    # Count number of three-digit numbers with exactly two sevens\n    # Positions for sevens can be in three ways: (77X, 7X7, X77),\n    # where X can be any digit from 0 to 9 except 7 to ensure at least two sevens\n    for position in range(3):\n        for digit in range(10):\n            if digit == 7:\n                continue\n            if position == 0:   # 77X\n                num = 770 + digit\n            elif position == 1: # 7X7\n                num = 700 + 10 * digit + 7\n            else:               # X77\n                num = 100 * digit + 77\n                \n            if num >= 100:      # Ensure it's a three-digit number\n                count_at_least_two_sevens += 1\n\n    # Count number of three-digit numbers with exactly three sevens\n    count_all_sevens = 1    # Only one number 777\n\n    # The total count is the sum of numbers with at least two sevens\n    total_count = count_at_least_two_sevens + count_all_sevens\n\n    return total_count\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "import math\n\ndef solution():\n    # Mr. Spencer can be seated in any of the four middle seats to be able to sit between his two children.\n    spencer_options = 4\n    \n    # Once Mr. Spencer is seated, his 2 children can sit on either side in 2! ways.\n    children_options = math.factorial(2)\n    \n    # The remaining 3 people can be seated in the remaining 3 seats in 3! ways.\n    others_options = math.factorial(3)\n    \n    # Total possible arrangements is the product of the individual possibilities.\n    total_arrangements = spencer_options * children_options * others_options\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_left_after_giving_away = sweets_left - sweets_given_away\n\n    return int(sweets_left_after_giving_away)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    num1 = 1.9\n    num2 = 1.99\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_marks = 23\n    correct_marks = 5\n    wrong_marks = -2\n    total_questions = 6\n\n    for correct_questions in range(total_questions + 1):\n        if correct_marks * correct_questions + wrong_marks * (total_questions - correct_questions) == total_marks:\n            return correct_questions\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    time = distance / speed  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # Since A * B = 24 and B * C = 52, we are looking for common factors of 24 and 52\n    # and the smallest possible value of A + C where A and C are whole numbers.\n\n    # Find the factors for both 24 and 52\n    factors_24 = {i for i in range(1, 25) if 24 % i == 0}\n    factors_52 = {i for i in range(1, 53) if 52 % i == 0}\n    \n    # Find the common factors of 24 and 52 by taking intersection\n    common_factors = factors_24.intersection(factors_52)\n\n    # The smallest common factor other than 1 is our desired B\n    B = min(common_factors - {1})\n\n    # Now we calculate A and C\n    A = 24 // B\n    C = 52 // B\n    \n    # Finally, we return the sum A + C\n    return A + C\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # Let the number thought initially be 'x'\n    # According to the problem, (x / 3) + 7 = 18\n    # We perform inverse operations to solve for 'x'\n    # First we subtract 7 from both sides of the equation\n    result_after_subtraction = 18 - 7\n    # Then we multiply by 3 to find 'x'\n    original_number = result_after_subtraction * 3\n    # We return the original number\n    return original_number\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    total_balls = 16\n    \n    cost_per_ball = total_cost / total_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $2 notes, and y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Cindy had a total of 55 notes\n    total_notes = Eq(x + y, 55)\n\n    # She spent 1/3 of the $2 notes, so she has 2/3 left\n    spent_two_dollar_notes = x * (2/3)\n    \n    # She received another 8 pieces of $5 notes\n    new_five_dollar_notes = y + 8\n    \n    # After that, the number of $5 notes she had was 3/7 of the remaining number of notes\n    remaining_notes = Eq(new_five_dollar_notes, (spent_two_dollar_notes + new_five_dollar_notes) * (3/7))\n\n    # Solve the equations\n    solutions = solve((total_notes, remaining_notes), (x, y))\n\n    # Calculate the amount of money Cindy had at first\n    amount = solutions[x] * 2 + solutions[y] * 5\n\n    return amount\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Since A, B, and C want to stand together, we can treat them as a single entity, ABCE, including E.\n    # The same applies to E and F, they can be considered as a single entity EF.\n    # Now we have the entities: ABCE, EF, D, G, and H to arrange, which is 5 entities in total.\n\n    entities_count = 5\n\n    # Number of ways to arrange these 5 entities\n    arrangement_ways = factorial(entities_count)\n\n    # However, within the entity ABCE, A, B, and C can be arranged in 3! ways.\n    # And within the entity EF, E and F can be arranged in 2! ways.\n    internal_arrangement_ABCE = factorial(3)\n    internal_arrangement_EF = factorial(2)\n\n    # The total number of arrangements will be arrangement of outside entities times arrangements of each group\n    total_arrangements = arrangement_ways * internal_arrangement_ABCE * internal_arrangement_EF\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    original_rate, increased_rate, total_scarfs = symbols('original_rate increased_rate total_scarfs')\n    \n    # Original plan: total scarfs = original daily rate * 6\n    original_plan = Eq(total_scarfs, original_rate * 6)\n    \n    # New plan: total scarfs = (original daily rate + 24) * (6 - 2)\n    new_plan = Eq(total_scarfs, (original_rate + 24) * 4)\n    \n    # Solve the system of equations\n    solutions = solve((original_plan, new_plan), (original_rate, total_scarfs))\n\n    return solutions[total_scarfs]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sweets_per_student_6, sweets_per_student_5, total_sweets = symbols('sweets_per_student_6 sweets_per_student_5 total_sweets')\n    \n    # If Mr. Lim gives each student 6 sweets, he will be short of 26 sweets\n    equation1 = Eq(sweets_per_student_6 * 6, total_sweets + 26)\n    \n    # If he gives each student 5 sweets, he will be short of 5 sweets\n    equation2 = Eq(sweets_per_student_5 * 5, total_sweets + 5)\n    \n    # The number of sweets should be the same in both scenarios,\n    # hence the students counts should be equal\n    equation3 = Eq(sweets_per_student_6, sweets_per_student_5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sweets_per_student_6, sweets_per_student_5, total_sweets))\n    \n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls', integer=True)\n    \n    original_ratio = Eq(boys/girls, 5/3)\n    new_ratio = Eq((boys - 15)/girls, 5/6)\n    \n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n    \n    total_pupils = solutions[boys] + solutions[girls]\n    \n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1+1, 15):\n            for x3 in range(x2+1, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    numbers = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 675 into its prime factors\n    factors = factorint(675)\n\n    # Multiply each factor by 2 and subtract 1 to make it a square\n    B = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            B *= prime\n\n    return B\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    return int(josh_current_age)\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost_pence = 695  # cost of multipack in pence\n    single_can_cost = 65  # cost of single can in pence\n    individual_cost_12 = 12 * single_can_cost  # cost of 12 cans individually in pence\n    savings = individual_cost_12 - multipack_cost_pence  # savings in pence\n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "from itertools import permutations\n\ndef solution():\n    valid_numbers = 0\n    \n    # Start with 4-digit combinations as 3267 is a 4-digit number\n    for number_tuple in permutations('123456', 4):\n        number = int(''.join(number_tuple))\n        if 3267 <= number <= 5120:\n            valid_numbers += 1\n    \n    return valid_numbers\n    \nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    apple, banana = symbols('apple banana')\n\n    # Set up equations\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Alan and Bob's combined rate\n    combined_rate = 1 / 4\n    # Bob's rate\n    bob_rate = 1 / 6\n    # Alan's rate is the combined rate minus Bob's rate\n    alan_rate = combined_rate - bob_rate\n    # Alan's time is the reciprocal of his rate\n    alan_time = 1 / alan_rate\n\n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    singapore_stamps = 172\n    total_stamps = 310\n    malaysia_stamps = total_stamps - singapore_stamps\n    more_singapore_stamps = singapore_stamps - malaysia_stamps\n    return more_singapore_stamps\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    # Compound interest formula: A = P (1 + r/n)^(nt)\n    # Since interest is compounded yearly, n = 1\n    account_balance = principal * (1 + rate)**time\n    return account_balance\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    total_weeks = 26\n    \n    total_food = weekly_food * total_weeks\n    \n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    score = symbols('score')\n    \n    equation = Eq(score - 30, (score / 2) + 10)\n    \n    ans = solve(equation, score)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    other_votes = total_votes - peter_votes\n\n    # To win without fail, Peter needs one more vote than half of the total votes\n    # Assuming all the rest of the votes go to a single opponent\n    votes_needed = (total_votes // 2) + 1\n\n    # How many more votes Peter needs\n    additional_votes = votes_needed - peter_votes\n\n    return additional_votes\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Adam and Ben weigh 102 kg\n    # Ben and Carl weigh 97 kg\n    # Adam and Carl weigh 93 kg\n    \n    # Add all combinations\n    sum_of_pairs = 102 + 97 + 93\n    \n    # Each person has been counted twice in the sum above\n    total_weight = sum_of_pairs // 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amount of money for each be x\n    x = symbols('x')\n\n    # After spending, Alex has x-58 and Nicholas has x-13\n    # According to the problem, Nicholas has 6 times the money Alex has after spending.\n    # x - 13 = 6 * (x - 58)\n\n    # Setting up the equation\n    equation = Eq(x - 13, 6 * (x - 58))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # The total amount they had at first is 2 * x\n    initial_total = 2 * solution[0]\n\n    return initial_total\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for i in range(1, 30):\n        if i % 3 == 0 and i % 2 == 1 and i % 4 == 1 and i % 5 == 1:\n            return i\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6*6) - (8*6)\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_later = 28\n    days_in_week = 7\n    remainder_days = days_later % days_in_week\n\n    # Since today is Monday, and 28 days is divisible by 7, it will be a Monday\n    # Encoding for Monday is 0001\n\n    ans = \"0001\"\n    return ans\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    remaining_flour = 21\n    used_flour = total_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    # a^(2/3) = 9\n    # Take both sides to the power of 3/2 to solve for a\n    a = 9 ** (3/2)\n    \n    return a\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    number1 = 10000 + 24\n    number2 = 3000 + 968\n    ans = number1 + number2\n    return ans\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    return 6 * 0.001\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    # Since no poles are placed at either end, the actual length for pole placement is 240 - 12 - 12\n    poles_length = road_length - 2 * interval\n\n    # Number of poles is equal to the length divided by the interval\n    num_poles = poles_length // interval\n\n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, rulers = symbols('pencils rulers')\n    equation1 = Eq(pencils, rulers + 10)\n    equation2 = Eq(pencils + rulers, 52)\n\n    solutions = solve((equation1, equation2), (pencils, rulers))\n\n    return solutions[rulers]\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_numbers = len(numbers) + 1  # including x\n    # sum of the numbers and x should be equal to mean_value times the total_numbers\n    sum_with_x = mean_value * total_numbers\n    sum_without_x = sum(numbers)\n    x = sum_with_x - sum_without_x\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    value_of_first_7 = 7 * 10**3  # 7 in the thousands place\n    value_of_second_7 = 7 * 10**1  # 7 in the tens place\n    difference = value_of_first_7 - value_of_second_7\n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # You can take at most 3 reds, 3 yellows, and 3 blues without getting 4 of the same color\n    # After that, the next marble you take out must be the 4th of the same color\n    max_without_fourth = 3 + 3 + 3\n    next_marble = 1\n    \n    # Calculate the minimum number of marbles needed to ensure 4 marbles of the same color\n    min_needed = max_without_fourth + next_marble\n    \n    return min_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n    boys_count = 200 \n\n    girls_count = (girls_ratio * boys_count) // boys_ratio\n\n    return girls_count\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since 1/3 in decimal form is 0.333... (repeating)\n    # each of the 1000 digits from the right of the decimal point is 3\n    return 3 * 1000\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15 / 100\n    amount = 29\n    ans = percentage * amount\n    return ans\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # Starting at 2, counting by twos to 100\n    start = 2\n    end = 100\n    step = 2\n\n    # Calculate how many multiples of twos are crossed out\n    multiples_of_two = list(range(start, end + 1, step))\n    ans = len(multiples_of_two)\n    \n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    # Given 4 * x - 13 = 55\n    # To find x, add 13 to both sides of the equation\n    # 4 * x = 55 + 13\n    # 4 * x = 68\n    # Now divide both sides by 4\n    # x = 68 / 4\n    x = 68 // 4\n    return x\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the concentration\n    concentration = symbols('concentration')\n    \n    # The amount of pure water (in grams) in container C after all transfers\n    total_water_in_C = 50 + 10 * (1 - 0.5 / 100)\n\n    # The total solution in C after all transfers (grams)\n    total_solution_in_C = 60\n    \n    # The pure water in A after adding 10 grams of the solution \n    water_in_A_after_adding = 30\n    \n    # The pure water in B after transferring from A\n    water_in_B_after_transferring = 40 + 10 * (1 - concentration / 100)\n    \n    # Total solution in B after transferring (grams)\n    total_solution_in_B = 50\n\n    # Now we transfer the solution from B to C.\n    # The amount of pure water coming from B to C.\n    water_coming_from_B_to_C = 10 * (water_in_B_after_transferring / total_solution_in_B)\n\n    # Calculate the equation that total water in C equal to the initial water plus\n    # water coming from container B\n    equation = Eq(total_water_in_C, 50 + water_coming_from_B_to_C)\n    \n    # Solve the equation for the concentration\n    solution_concentration = solve(equation, concentration)\n\n    # Return the concentration value\n    return solution_concentration[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction_value = 2 / 5\n    percent_value = 35 / 100  # 35% as a decimal\n    decimal_value = 0.604\n    \n    ans = fraction_value + percent_value + decimal_value\n    \n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    # Prime factorization of 2016: 2**5 * 3**2 * 7\n    # Prime factorization of 1377: 3**1 * 459 (which can further be factored as 3 * 7 * 11)\n    # From this we can see that two years ago, the cousin that is now 2 years older was 11 years old two years ago (because 11 is not a factor in 2016)\n    # The other two cousins' ages multiplied by 3 (from 459 to 2016), so their ages would be divided by 3, two years ago\n    \n    # Finding all factors of 1377 to identify the ages\n    factors_1377 = [x for x in range(1, 1378) if 1377 % x == 0]\n    \n    # Finding the combination of 3 factors from the prime factorization of 1377 that increased by a factor of three in 2016\n    for i in range(len(factors_1377)):\n        for j in range(i+1, len(factors_1377)):\n            for k in range(j+1, len(factors_1377)):\n                age1, age2, age3 = factors_1377[i], factors_1377[j], factors_1377[k]\n                if age1 * age2 * age3 == 1377 and (age1 * 3) * (age2 * 3) * age3 == 2016:\n                    # The ages are now age1+1, age2+1, age3+1, so two years ago they would be age1-1, age2-1, age3-1\n                    return (age1 - 1) * (age2 - 1) * (age3 - 1)\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # Consider the two people who want to stand next to each other as one unit.\n    # So we now have four units (3 single people + 1 combined unit of 2 people)\n    # These four units can be arranged in 4! ways.\n    units_arrangement = factorial(4)\n\n    # The two people in the combined unit can be arranged amongst themselves in 2 ways\n    people_in_unit_arrangement = factorial(2)\n\n    # The total arrangements are the product of the two scenarios\n    total_arrangements = units_arrangement * people_in_unit_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_3_days = 33\n    average_last_4_days = 18\n    total_last_4_days = average_last_4_days * 4\n    total_week = total_first_3_days + total_last_4_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight1 = 12  # weight of the first metal in mg\n    percent1 = 0.40  # nickel percentage in the first metal\n    weight2 = 13  # weight of the second metal in mg\n    percent2 = 0.60  # nickel percentage in the second metal\n\n    total_weight = weight1 + weight2\n    nickel_in_first_metal = weight1 * percent1\n    nickel_in_second_metal = weight2 * percent2\n    total_nickel = nickel_in_first_metal + nickel_in_second_metal\n    percent_concentration = (total_nickel / total_weight) * 100\n    \n    return percent_concentration\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    result = 15 / (1/7)\n    return result\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        correct_sum = n*(n+1)//2\n        if correct_sum > 3405:\n            break\n        if (3405 - correct_sum) <= n:\n            return 3405 - correct_sum\n        n += 1\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let x be the original number of chickens per pen,\n    # then the total number of chickens is 24 * x.\n    # After building 6 more pens, the number of chickens in each pen reduced by 6,\n    # so the new number of chickens per pen is x - 6,\n    # and the new total number of pens is 24 + 6 = 30.\n    # Therefore, the total number of chickens is the same: 30 * (x - 6) = 24 * x.\n    # We solve this equation to find x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(30 * (x - 6), 24 * x)\n    x_value = solve(equation, x)[0]\n    \n    # Once we have the number of chickens per pen (x_value),\n    # we can calculate the total number of chickens: total_chickens = 24 * x_value\n\n    total_chickens = 24 * x_value\n    return total_chickens\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    from sympy import divisors\n\n    remainder = 3\n    possible_values = set()\n    \n    # The sum of divisor, dividend, quotient, and remainder is 40\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, 40 - divisor - remainder):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    history_to_math_ratio = 7 / 8\n    total_history_club = total_math_club * history_to_math_ratio\n    return int(total_history_club)\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the digits for each number to represent Zog's system\n    num1 = int(str(729)[::-1])\n    num2 = int(str(26)[::-1])\n    \n    # Perform the subtraction in Zog's number system\n    result = num1 - num2\n\n    # Reverse the digits of the result to show the answer as we would write it\n    ans = int(str(result)[::-1])\n    \n    return ans\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # The sum of an arithmetic progression can be expressed using the formula S_n = n/2*(a1 + an)\n    # where S_n is the sum of the first n terms, a1 is the first term and an is the nth term.\n    # We know S_6 = 64 and S_12 = 156.\n    S_6 = 64\n    S_12 = 156\n\n    # Let's denote a as the first term and d as the common difference of the arithmetic progression.\n    # S_6 = 6/2 * (a + (a + 5d)) = 3 * (2a + 5d) = 64\n    # S_12 = 12/2 * (a + (a + 11d)) = 6 * (2a + 11d) = 156\n\n    # By solving the two equations we can find a and d:\n    # 2a + 5d = 64 / 3\n    # 2a + 11d = 156 / 6\n\n    # Let's find a and d using linear equations.\n    # From the first equation we can express a as a function of d:\n    # 2a = 64/3 - 5d\n    # a = (64/3 - 5d) / 2\n\n    # Substituting the expression for a into the second equation, we get:\n    # 2 * ((64/3 - 5d) / 2) + 11d = 156 / 6\n    # Simplifying it:\n    # (64/3 - 5d) + 11d = 156 / 6\n    # 11d - 5d = 156 / 6 - 64/3\n    d = (156 / 6 - 64 / 3) / 6\n\n    # Now that we have d, we can find a:\n    a = (64 / 3 - 5 * d) / 2\n\n    # Having a and d, we can now find the sum of the first 18 terms:\n    S_18 = 18 / 2 * (a + (a + 17 * d))\n\n    return int(S_18)\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n\n    num1 = 45\n    num2 = 60\n\n    largest_factor = gcd(num1, num2)\n\n    return largest_factor\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # Total number of games in a single round-robin tournament with 8 players\n    total_games = (8 * 7) // 2\n\n    # The champion wins against all other players\n    champ_wins = 7\n\n    return champ_wins\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    three_years_ago = ashley_age - 3\n    brother_age = three_years_ago - 2\n    return brother_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    train_speed = 20  # meters per second\n    time_to_pass = 30  # seconds\n\n    # Total distance covered by the train while completely passing the bridge\n    total_distance = train_speed * time_to_pass\n\n    # Length of the bridge\n    bridge_length = total_distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Speeds\n    jogging_speed = 9  # in km/h\n    walking_speed = 7.5  # in km/h\n\n    # Times\n    jogging_time = 0.5  # Time spent jogging in hours (30 minutes -> 0.5 hours)\n    walking_time = 1  # Time spent walking in hours (7:00 AM to 8:00 AM is 1 hour)\n\n    # Distances\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    # Total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    return 0.23 + 1.9 + 0.083\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n\n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, 63)\n\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    return (55 - 44) * common_factor\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial total number of animals be 'total' and the initial number of goats be 'goats'\n    total, goats = symbols('total goats')\n\n    # Initial number of cows is 65% of total\n    cows_initial = 0.65 * total\n\n    # Initial number of goats is 100% - 65% = 35% of total, so we set 0.35 * total = goats\n    equation1 = Eq(0.35 * total, goats)\n\n    # After 240 animals were added, total number of animals becomes total + 240\n    # Cows now make up 65% + 20% = 85% of the new total, so we set 0.85 * (total + 240) = cows_initial + 240\n    equation2 = Eq(0.85 * (total + 240), cows_initial + 240)\n\n    # Goats have doubled, so we set 2 * goats = goats + 240\n    equation3 = Eq(2 * goats, goats + 240)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (total, goats))\n\n    # Return the initial number of goats\n    return solutions[goats]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    return 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # The area of an equilateral triangle can be found by the formula:\n    # Area = (sqrt(3) / 4) * (side length)^2\n\n    from math import sqrt\n\n    # calculate area of Triangle X\n    side_x = 3\n    area_x = (sqrt(3) / 4) * side_x**2\n    \n    # calculate area of Triangle Y\n    side_y = 9\n    area_y = (sqrt(3) / 4) * side_y**2\n    \n    # Divide area of Triangle Y by area of Triangle X\n    ans = area_y / area_x\n\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for n in range(100, 1000):\n        if n % 7 == 4 and n % 8 == 4 and n % 9 == 4:\n            return n\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial\n\ndef solution():\n    girls_grouped = 1  # 3 girls are considered as a single unit\n    boys_and_teachers = 6  # 3 boys + 3 teachers\n\n    # First, we place the boys and the teachers. 4 slots for boys since they cannot be adjacent (_T_B_T_B_T_)\n    slots_for_boys = 4\n    boys_placements = factorial(slots_for_boys) // factorial(slots_for_boys - 3)\n\n    # Permutations of teachers\n    teachers_permutations = factorial(3)\n\n    # Now, treat the group of girls as one person, and we have 4 units: 1 girls group, 3 teachers\n    # We need to arrange these 4 units in the remaining 4 slots\n    girls_teachers_permutations = factorial(4)\n\n    # Finally, permute the girls among themselves\n    girls_permutations = factorial(3)\n\n    # Total arrangements is the product of all possible permutations\n    total_arrangements = boys_placements * teachers_permutations * girls_teachers_permutations * girls_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(5 * x * 12 + 3 * x * 5, 120)\n\n    x_value = solve(total_cost, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_to_choose = 2\n    return comb(num_students, num_to_choose)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_value = 8 * 9 * 10\n    smaller_value = 1 * 2 * 3\n    ans = larger_value - smaller_value\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # Three-digit number can't start with 0, so 2 choices for the first digit (3 or 4)\n    # But the next two digits can be 0, 3 or 4, so it's 3 choices for each of them\n    first_digit_choices = 2\n    second_digit_choices = 3\n    third_digit_choices = 3\n\n    total_combinations = first_digit_choices * second_digit_choices * third_digit_choices\n    return total_combinations\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    # Number of ways to pick 1 appetiser from 2\n    appetiser_ways = 2\n    # Number of ways to pick 1 main course from 3\n    main_course_ways = 3\n    # Number of ways to pick 0 or 1 soup (since it's optional)\n    soup_ways = 2  # (1 way to pick the soup, 1 way to not pick it)\n    # Number of ways to pick 0 or 1 dessert (since it's optional)\n    dessert_ways = 3  # (2 ways to pick a dessert, 1 way to not pick it)\n\n    # Total combinations based on the law of multiplication for independent events\n    total_combinations = appetiser_ways * main_course_ways * soup_ways * dessert_ways\n\n    return total_combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for child_count in range(100, 201):\n        if child_count % 8 == 3 and child_count % 9 == 1:\n            return child_count\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_balls = symbols('blue_balls', integer=True)\n\n    # Assume the total number of balls is 4 (red balls) + blue_balls\n    total_balls = 4 + blue_balls\n\n    # Probability of taking two red balls is the number of combinations of 2 out of 4 red balls\n    # divided by the number of combinations of taking 2 balls out of the total number of balls.\n\n    # Probability calculation with combinations:\n    # For red balls: C(4, 2) / C(total_balls, 2) = 2/7\n    # C(4, 2) is the combination of 2 out of 4 which is (4*3)/(2*1) = 6\n    # C(total_balls, 2) is the combination of 2 out of total_balls which is total_balls*(total_balls-1)/2\n\n    prob_eq = Eq((4*3)/((4 + blue_balls)*(3 + blue_balls)), 2/7)\n\n    solution = solve(prob_eq, blue_balls)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    common_difference = 5\n    n = 8  # There are 8 terms in total\n\n    sum_of_sequence = (n / 2) * (2 * first_term + (n - 1) * common_difference)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    \n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial\n\ndef solution():\n    # Prime factorization of 2^27: Only the digit 2 repeated 27 times.\n    # The placement of 2s in the 10 digit number can have repetitions.\n    # We are essentially distributing 27 indistinguishable items (2s) into 10 distinguishable boxes (digits).\n    # This is a problem of combinations with repetition.\n    # The formula for combinations with repetition is: C(n+k-1, k), where n is the number of boxes, and k is the number of items.\n    n = 10  # Number of digits.\n    k = 27  # Number of 2s to distribute.\n    # Use stars and bars theorem to calculate the combinations.\n    combinations = factorial(n+k-1) // (factorial(k) * factorial(n-1))\n    \n    return combinations\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices Terry had at first.\n    # Her family ate 3/5 of the cake, so they ate (3/5)*x slices.\n    # She gave 2 slices to her friends.\n    # She had 4 slices left.\n    # From the information, we have the equation (3/5)*x + 2 + 4 = x\n    # Simplifying the equation -> (3/5)*x + 6 = x -> (3/5)*x = x - 6 -> (3/5)*x = (2/5)*x = 6\n    # Solving for x: x = 6 / (2/5) -> x = 6 * (5/2) -> x = 15\n    ans = 15\n    return ans\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the time Mike takes to complete the job alone\n    # Let d be the time Danny takes to complete the job alone\n    m, d = symbols('m d')\n    \n    # If they work together, they finish in 10 hours\n    equation1 = Eq(1/m + 1/d, 1/10)\n    \n    # If Mike types for 8 hours, then Danny types for 13 hours and they finish the job\n    equation2 = Eq(8/m + 13/d, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, d))\n    \n    # We need the time Danny takes to finish the job alone\n    return solutions[d]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    difference = abs((3 * 10**4) - (3 * 10))\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    min_pencils_in_one_case = (total_pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_sum(a, b):\n        return sum(a + i for i in range(b+1))\n\n    for m in range(1, 67):  # Since the result is 66, m has to be less than 66\n        if custom_sum(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n\n    # Calculate the number of chess pieces per side (subtract 1 because the corner is shared)\n    chess_per_side = (side_length // interval) - 1 \n    \n    # Multiply by 4 because there are 4 sides, then add 4 for the corners\n    total_chess = (chess_per_side * 4) + 4  \n    \n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # Each digit has to be painted red if it appears 5 times or more.\n    # To minimize the number of red squares, we want as many digits as possible\n    # to appear exactly 4 times (since 4 is the maximum number of times a digit can\n    # appear without being painted red).\n    \n    # Since there are 10 possible digits (0-9), and we want to maximize the number of\n    # digits that appear 4 times, we can have at most 100 // 4 = 25 different digits\n    # that appear exactly 4 times each. \n    \n    # However, because we only have 10 different digits, we can only have 10 digits \n    # that appear exactly 4 times (for a total of 40 non-red squares).\n    # The remaining 100 - 40 = 60 squares will have to be red, since any digit appearing \n    # in these will be the 5th or higher occurrence of that digit, which gets painted red.\n\n    # Thus, the smallest possible number of red squares is 60.\n    return 60\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # negative value since the sequence is decreasing\n    \n    # The sequence becomes negative when its term is less than 0\n    # Using the formula for the nth term of an arithmetic sequence: an = a1 + (n - 1) * d\n    # where a1 is the first term, d is the common difference, and n is the number of terms\n    # We want to find the largest n such that an >= 0\n    # 0 = 50 + (n - 1) * -4\n    # (n - 1) * -4 = -50\n    # n - 1 = 50 / 4\n    # n = 12.5 + 1\n    # n = 13.5, but since n must be an integer, we take n = 13\n\n    n = 13  # This is the last positive term, so the first negative term is the next one\n    return n\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent = 2.89\n    additional_amount = 4/5\n    \n    remaining_amount = initial_amount - spent + additional_amount\n\n    return remaining_amount\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # 3162 is the square root of the smallest 4 digit number 1000\n        num = int(str(i)[0]*2 + str(i)[1]*2)  # creating the number with same first 2 and last 2 digits\n        if (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # We know that consecutive zeros in a factorial come from powers of 10\n    # since 10 = 2 * 5, we need to count the pairs of 2s and 5s in n!\n    # Factorials have more 2s than 5s, so we just need to count the number of 5s\n    n = 1\n    number_of_fives = 0\n    # 28 zeros mean we need 28 fives; however, some numbers contribute more than one 5, like 25, 50, etc.\n    while number_of_fives < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            number_of_fives += 1\n            temp //= 5\n\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    return 3*m - 1 + m\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Given data\n    initial_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # Calculate the distance they covered before the remaining distance was 130 km\n    covered_distance = initial_distance - remaining_distance\n\n    # Calculate the relative speed at which Tim and Bob are approaching each other\n    relative_speed = tim_speed + bob_speed\n\n    # Calculate the time taken to cover the covered distance with the relative speed\n    time_taken = covered_distance / relative_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    distance_climbed_per_day = 3\n    slide_down_at_night = 1\n    total_distance = 11\n    net_distance_per_day = distance_climbed_per_day - slide_down_at_night\n    day_count = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        day_count += 1\n        distance_covered += distance_climbed_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_down_at_night\n        \n    return day_count\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * 5\n    known_numbers_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_numbers_sum\n    \n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n\n    least_days = lcm(akon_cycle, ben_cycle, cris_cycle)\n    return least_days\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        # Convert year to string to check for consecutive digits\n        year_str = str(year)\n        digits = set(year_str)\n        # Check if year has 4 unique digits\n        if len(digits) == 4:\n            # Convert the unique digits back to an integer list\n            digits = [int(digit) for digit in digits]\n            # Generate all 3-digit variations from the unique digits\n            for perm in permutations(digits, 3):\n                # Check if the digits are consecutive\n                sorted_perm = sorted(perm)\n                if sorted_perm[1] - sorted_perm[0] == 1 and sorted_perm[2] - sorted_perm[1] == 1:\n                    lucky_years += 1\n                    break\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    digits = \"8354\"  # the repeating section of the decimal part\n    total_digits = 84  # the number of digits we want to sum up\n\n    sum_of_digits = sum(int(digits[i % len(digits)]) for i in range(total_digits))\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # The total duration from the first strike to the end of the last strike\n    # when it strikes 6 times is the sum of the intervals between strikes\n    # plus the 3 second duration of each strike itself.\n    \n    # Let the interval between strikes be x seconds.\n    # Then for 6 strikes, there are 5 intervals between the strikes.\n    # The equation representing the total time is:\n    # 6*3 + 5*x = 43 seconds (for 6 strikes)\n    \n    # From this equation, we can solve for x (the interval between strikes):\n    x = (43 - 6*3) // 5\n    \n    # Now, for 12 strikes, there are 11 intervals between the strikes.\n    # The total time for 12 strikes is:\n    # 12*3 + 11*x seconds\n    \n    total_time_for_12_strikes = 12*3 + 11*x\n    \n    return total_time_for_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Find m and n such that m^2 + 5 + 18 is a perfect square\n    student_count = 0\n    m = 0\n    while True:\n        # Try the next square number\n        m += 1\n        # Calculate the total students including the 5 left out\n        total_students = m**2 + 5\n        # Check if adding 18 students makes it a perfect square\n        if ((total_students + 18)**0.5).is_integer():\n            student_count = total_students\n            break\n    return student_count\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people = 6\n    hours_needed = 15\n\n    work_done = people * hours_needed\n    people_needed_for_2_hours = work_done / 2\n\n    ans = people_needed_for_2_hours\n    return ans\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial as fact\n\ndef solution():\n    # Number of pens\n    n = 20\n    # Number of kids\n    k = 6\n    # Since each kid should get at least one pen, let's first give one pen to each kid\n    # Now, we need to distribute the remaining pens (n - k)\n    remaining_pens = n - k\n    # This is a problem of distributing \"remaining_pens\" indistinguishable items into \"k\" distinguishable boxes\n    # The number of ways to do this corresponds to the number of combinations with repetition\n    # Which can be calculated using the formula: C((remaining_pens + k - 1), k - 1)\n    ans = fact(remaining_pens + k - 1) // (fact(remaining_pens) * fact(k - 1))\n    return ans\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    num_quizzes = 4\n    time_per_quiz_hours = time_per_quiz_minutes / 60\n\n    total_time_hours = time_per_quiz_hours * num_quizzes\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_zero_three_digit_numbers = 9 * 9 * 9\n    at_least_one_zero = total_three_digit_numbers - no_zero_three_digit_numbers\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass in kilograms\n    speed = 30  # speed in meter/second\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for num in range(100, 201):\n        if num % 3 == 1 and num % 4 == 1 and num % 5 == 1 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    \n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for number in range(100, 300):\n        if number % 5 == 2 and number % 6 == 2 and number % 7 == 2:\n            return number\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    for hundreds in range(1, 10):  # starting from 1 because it's a 4 digit number\n        for tens in range(0, 10):\n            if hundreds + tens == 13:\n                thousands = min(set(range(1, 10)) - {hundreds, tens, 9})  # smallest digit not used yet, excluding 9\n                ones = 9  # greatest odd number\n                return thousands * 1000 + hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let the speed of Jerry be x miles/hour\n    # Then the speed of Kevin will be 1.5x miles/hour\n    # The relative speed when they move towards each other is x + 1.5x = 2.5x miles/hour\n    # Let the time they meet be t hours, then they would cover 225 miles together\n    # Their combined distance covered will be t*(x + 1.5x) = 225\n    # Solving for t we get, t = 225 / (2.5x)\n    # The distance Jerry drives is Jerry_speed * t = x * t\n    # Replacing t with 225 / (2.5x), we get Jerry's distance as x * (225 / (2.5x)) = 225 / 2.5\n    \n    # As x cancels out, we don't need to actually know the speed of Jerry, just use the ratio\n    jerry_distance = 225 / 2.5\n    \n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # number of pieces is always number of cuts plus 1\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800  # width of the wall in mm\n    pic_width = 210  # width of each picture in mm\n    num_pics = 10  # total number of pictures to hang\n\n    space_between_pics = (wall_width - (num_pics * pic_width)) / (num_pics - 1)\n    distance_from_centre_of_wall = (wall_width / 2) - (1.5 * pic_width) - (space_between_pics)\n\n    return distance_from_centre_of_wall\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 1  # Assign arbitrary value for original height, percentage calculations remain consistent\n    bounce_height = original_height * 0.75\n    bounce_count = 0\n\n    while bounce_height >= original_height * 0.25:\n        bounce_height *= 0.75\n        bounce_count += 1\n\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n\n    uncle_current_age = uncle_future_age - (uncle_future_age - doris_age)\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, apple = symbols('banana apple')\n    \n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n    \n    ans = banana_price + apple_price\n    \n    return ans\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    annual_interest_rate = 2.25 / 100\n\n    principal = interest / annual_interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n        \n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # Given:\n    # The reasoning is 8 + _ = 15.\n    # The statement is that \"5 is smaller than 8, so regrouping must have taken place.\"\n    # Timothy concluded that the answer must be 7.\n    # However, let's verify it by simple calculation.\n\n    # The correct answer without considering regrouping would be:\n    correct_answer_without_regrouping = 15 - 8\n\n    # If regrouping takes place, we must add 10 to the number\n    # that needs to be added to 8 to get a result where the units\n    # digit is 5. Since the original number ends with 5, Timothy concluded\n    # regrouping took place, meaning 5 was added instead of 15 to get a digit ending in 5.\n    \n    # Let's find the correct number considering regrouping.\n    # We need to find a number such that when added to 8, the ones place is 5\n    for i in range(1, 10):\n        if (8 + i) % 10 == 5:\n            regrouping_number = i\n            break\n\n    # The correct answer with regrouping is:\n    correct_answer_with_regrouping = regrouping_number + 10  # +10 for regrouping\n\n    # The statement Timothy made based on regrouping is incorrect,\n    # because regrouping means we need to add more than 7 to get to a number ending with 5.\n\n    answer = correct_answer_without_regrouping if correct_answer_without_regrouping == 7 else correct_answer_with_regrouping\n    \n    return answer\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    ans = 20 - 5 - 1\n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n    money_after_watch = initial_money - 200\n    money_after_shirt = money_after_watch - (2/7) * money_after_watch\n    equation = Eq(money_after_shirt, initial_money / 3)\n\n    ans = solve(equation, initial_money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "import math\n\ndef solution():\n    # Tom and Harry can be treated as a single entity, so we have 6 entities to arrange.\n    total_arrangements = math.factorial(6)\n    \n    # Treat Tom and Harry as one unit but they can switch places within that unit\n    tom_harry_arrangements = math.factorial(2)\n\n    # Ronda must stand at the furthest right, so no arrangements required for Ronda\n    \n    # Multiply all possible arrangements\n    ans = total_arrangements * tom_harry_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    principal = 5000\n    rate_first_three_years = 1.15763\n    rate_last_two_years = 1.1664\n\n    final_amount = principal * rate_first_three_years * rate_last_two_years\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    rounding_unit = 100\n    \n    lowest_possible_price = (rounded_price - rounding_unit // 2) + 1\n    \n    is_ryna_correct = lowest_possible_price == 125001\n    \n    return (is_ryna_correct, lowest_possible_price)\n    \nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the usual speed as v (in km/h), and the usual time as t (in h).\n    # Distance between P and Q is d (in km).\n    # The distance traveled at the usual speed when the speed is increased by 25% is 200 km.\n    v, t, d = symbols('v t d')\n\n    # First equation comes from the fact that at 20% increased speed, the time taken is 1 hour less.\n    # (1 + 20/100)v * (t - 1) = d\n    equation1 = Eq((1 + 20/100) * v * (t - 1), d)\n\n    # Second equation comes from the fact that for 200 km usual speed is maintained and then 25% increased speed\n    # for the remaining distance (d - 200 km), the time taken is 12 minutes (0.2 h) less.\n    # 200/v + (d - 200)/(1 + 25/100)v = t - 12/60\n    equation2 = Eq(200/v + (d - 200)/(1 + 25/100) * v, t - 12/60)\n\n    # Third equation is just the definition of distance in terms of speed and time.\n    # v * t = d\n    equation3 = Eq(v * t, d)\n\n    # Solving the system of equations for d, v, and t\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total = 89 * 4\n    current_tests = 4\n    desired_avg = 95\n\n    # To find at least how many more tests should he take, we iterate until the condition is met.\n    additional_tests = 0\n    while True:\n        additional_tests += 1\n        new_avg = (current_total + 100 * additional_tests) / (current_tests + additional_tests)\n        if new_avg >= desired_avg:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    distance2 = 300\n    distance3 = 1000 - (distance1 + distance2)\n\n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age_now = 10\n    uncle_age_when_doris_is_uncle_age_now = 40\n    uncle_age_now = uncle_age_when_doris_is_uncle_age_now - (uncle_age_when_doris_is_uncle_age_now - doris_age_now)\n    return uncle_age_now\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    lia_performances = 1\n    liz_performances = 1\n\n    total_performances = total_classes + lia_performances + liz_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # meters per second\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create two symbols for number of sheep and cows at the beginning\n    sheep, cows = symbols('sheep cows')\n\n    # At the beginning, the number of sheep were 5/7 the number of cows.\n    equation1 = Eq(sheep, (5/7) * cows)\n    \n    # 21 new sheep were brought, and 7 cows were removed\n    # At the end, the number of cows (cows - 7) became 3/4 the number of sheep (sheep + 21)\n    equation2 = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    # Return the number of sheep at the beginning\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the cost of one book and p be the cost of one pencil box\n    b, p = symbols('b p')\n\n    # Equation based on the first given situation\n    eq1 = Eq(2*b + 3*p, 42)\n\n    # Equation based on the second given situation\n    eq2 = Eq(2*b + 6*p, 60)\n\n    # Solve the two equations for b and p\n    solutions = solve((eq1, eq2), (b, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    h_diff = 9 - 8  # Difference in hours\n    m_diff = 25 - 30  # Difference in minutes\n\n    # Since m_diff is negative, we need to adjust h_diff and m_diff\n    if m_diff < 0:\n        h_diff -= 1   # Subtract one hour\n        m_diff += 60  # Add 60 minutes to compensate for the negative minute difference\n\n    n = h_diff * 60 + m_diff  # Convert hour difference to minutes and add minute difference\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    a_efficiency = 1/6\n    b_efficiency = a_efficiency / 2\n    total_efficiency = a_efficiency + b_efficiency\n    time_to_complete_job = 1 / total_efficiency\n    return time_to_complete_job\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let's denote Geoff's current age as g and his sister's current age as s.\n    # According to the problem, the sum of their current ages is 22: g + s = 22\n\n    # We want to find out after how many years (let's call this number of years 'y') the sum of their ages will be 30.\n    # After y years, Geoff's age will be g+y and his sister's age will be s+y.\n    # The sum of their ages after y years will be: g + y + s + y = 30\n\n    # We can set up the equation: g + s + 2y = 30\n    # We know that g + s = 22, so we can substitute in the equation: 22 + 2y = 30\n\n    # Now, we can solve for y:\n    y = (30 - 22) / 2 # This is the number of years after which the sum of their ages will be 30\n\n    return int(y)\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    price_haribo = 0.50  # Price of Haribo in dollars\n    price_mamee = price_haribo - 0.30  # Price of Mamee is 30 cents less than Haribo\n    price_jelly = 6 * price_mamee  # Big packet of jelly costs 6 times as much as Mamee\n\n    return price_jelly\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    # Let's denote the total number of candies as 'total'\n    total = symbols('total')\n\n    # According to the question, we set up the equation as follows:\n    # Anna received 3/8 of the candies\n    # Belle received 1/4 of the candies\n    # Anna and Belle received 90 more candies than Cathy and Dawn together\n    equation = Eq((3/8 + 1/4) * total - (total - (3/8 + 1/4) * total), 90)\n\n    # Solve the equation to find the total number of candies\n    solution = solve(equation, total)\n\n    # Return the total number of candies (the solution of the equation)\n    return solution[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    return (18 / 36) * 32\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining = 4\n    joel_removed = 2 + remaining * 2\n    remaining += joel_removed\n    valerie_removed = (remaining // 2) - 3\n    remaining += valerie_removed\n    ethan_removed = (remaining // 2) + 1\n    original_plants = remaining + ethan_removed\n    return original_plants\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of fish balls he made at first as x\n    x = symbols('x')\n    \n    # He sold 3/4 in the morning, so he's left with 1/4\n    remaining_after_morning = (1 - 3/4) * x\n    \n    # He then sold 1/3 of the remaining in the afternoon, leaving 2/3 of the remaining\n    leftover = (2/3) * remaining_after_morning\n    \n    # He made another 506 fish balls, and now he has twice the number he made at first (2*x)\n    total = leftover + 506\n    \n    # We set up the equation and solve for x\n    equation = Eq(total, 2 * x)\n    \n    # Solve the equation and return the number of fish balls made initially\n    initial_fish_balls = solve(equation, x)[0]\n    \n    return initial_fish_balls\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((1 - 1/6) * chocolate + (1 - 2/3) * vanilla +\n                   (1 - 7/9) * blueberry, 427)\n\n    # Solve the equations for the number of each type of cupcake before selling\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boys_to_girls_ratio = 2 / 7\n    girls = boys / boys_to_girls_ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake = 3\n    marble_cake = strawberry_cake + 2\n    cheese_cake = 3 * marble_cake\n    two_cheese_cakes = 2 * cheese_cake\n    return two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    circle = symbols('circle')\n\n    equation = Eq(circle * 3 + 17, 6*6 + 2)\n\n    solution = solve(equation)\n\n    return solution[0]\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy import solve, Eq, symbols\n\ndef solution():\n    number = symbols('number')\n    equations = [\n        Eq(number % 3, 1),\n        Eq(number % 5, 3),\n        Eq(number % 7, 5)\n    ]\n    possible_values = [int(s) for s in solve(equations) if 400 < s < 500]\n    return possible_values[0]  # Since only one number is expected\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    total_green_apples = pigs * green_apples_per_pig\n    total_red_apples = pigs * red_apples_per_two_pigs\n\n    ans = total_green_apples + total_red_apples\n    return int(ans)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds * 1/4\n    sunflowers_grown = total_seeds - died_seeds\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    result = solve_congruence(*congruences)\n    return result[0]\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    return len(factors)\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_money = 100\n    deposit = 10\n    spend = 8\n    total_days = 15\n    \n    money = initial_money\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Deposit day\n            money += deposit\n        else:  # Spending day\n            money -= spend\n    \n    return money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n\n    return int(remaining_durians)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    michael_final_number = 54\n    original_number = michael_final_number * 4 - 178\n    return original_number // 2\n    \nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of stickers Charlotte has\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n    \n    # Mary had stickers in the ratio 7:5 with Alexis\n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    # Charlotte's stickers increased by 80%\n    equation1 = Eq(mary / alexis, 7 / 5)\n    equation2 = Eq(charlotte + 0.20 * mary + 0.20 * alexis, charlotte * 1.80)\n    equation3 = Eq(mary - 0.20 * mary, charlotte + 20)\n    \n    solutions = solve((equation1, equation2, equation3), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    # Let d be the distance between Nini's home and the countryside\n    # Let s be the original speed in km/h\n    # Travel time to destination at original speed is 8 hours\n    # Travel time to destination at increased speed is 8 - 1 = 7 hours\n    # Increased speed is s + 5 km/h\n    \n    # Using the formula distance = speed * time\n    # At original speed: d = s * 8\n    # At increased speed: d = (s + 5) * 7\n    \n    # Equate the two expressions for d\n    # s * 8 = (s + 5) * 7 \n    # 8s = 7s + 35\n    # 8s - 7s = 35\n    # s = 35\n    \n    # Now we can find d using the original speed\n    # d = s * 8\n    # d = 35 * 8\n    # d = 280\n    # So the distance between Nini's home and the countryside is 280 km\n    \n    return 280\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    # Total number of ways without any restriction is 4! (factorial of 4)\n    total_ways = 4 * 3 * 2 * 1\n    # The number of ways Claire and Tony can sit across each other is 2! * 2!\n    # because once we fix Claire's position, Tony has 1 choice,\n    # and the remaining two (Chantel and Cale) have 2! ways to arrange.\n    restricted_ways = 2 * 2\n    \n    # The number of valid ways is all ways minus the restricted ones.\n    valid_ways = total_ways - restricted_ways\n    \n    return valid_ways\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana (b) and one pear (p)\n    b, p = symbols('b p')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(b + 2*p, 94)\n    equation2 = Eq(b + p, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n    \n    # Get the cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_combinations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_combinations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    bottles = 1000\n    test_tubes = 1\n    while 2 ** test_tubes < bottles:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs_initial = 10\n    total_distance = 36\n    \n    # Since the chairs are evenly spaced, the number of spaces between chairs\n    # is total_chairs_initial - 1\n    num_spaces_initial = total_chairs_initial - 1\n    \n    # After removing 3 chairs\n    total_chairs_final = total_chairs_initial - 3\n    \n    # The number of spaces between chairs remains the same, which is\n    # still num_spaces_initial\n    num_spaces_final = num_spaces_initial\n    \n    # The distance between every 2 chairs after removing 3 chairs\n    distance_between_two_chairs = total_distance / num_spaces_final\n    \n    return distance_between_two_chairs\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    # The total number of books is 10.\n    # Each brother has at least two books, so we distribute these 2 books to each brother first.\n    # Now we have 10 - 2*3 = 4 books left to distribute.\n\n    # Let's define variables for the remaining books that each brother gets:\n    # a, b, and c represent the books the brothers get in addition to the two guaranteed.\n    # a + b + c = 4\n    # Since the books are identical, we are essentially looking for the number of solutions\n    # to the equation a + b + c = 4 where a, b, c are non-negative integers.\n\n    # The problem now is equivalent to finding the number of ways to put 4 indistinguishable items\n    # into 3 distinguishable bins (the brothers), which is a stars and bars problem.\n    # The formula to calculate this is: (n + k - 1) choose (k - 1)\n    # where n is the number of items and k is the number of bins.\n\n    # In this case, n = 4 (remaining books) and k = 3 (brothers).\n    # The solution will be (4 + 3 - 1) choose (3 - 1) = 6 choose 2.\n\n    from math import comb\n    ans = comb(4 + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the fourth angle (the smallest one)\n    # The third angle is 5 times larger than the fourth, so it's 5 * x\n    # The sum of angles in a quadrilateral is 360 degrees\n    # Two angles are right angles, so they are both 90 degrees\n\n    x = symbols('x')\n    equation = Eq(90 + 90 + 5 * x + x, 360)\n\n    # Solve the equation for x to find the fourth angle\n    fourth_angle = solve(equation, x)\n\n    # The largest angle is five times the fourth angle\n    largest_angle = 5 * fourth_angle[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100): # Range of 2-digit numbers\n        if i % 7 == 0 and 7007 % i == 0: # Check if `i` is a multiple of 7 and a factor of 7007\n            factors.append(i)\n    return sum(factors)\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Initialize the number of ways to climb each step\n    steps = [0] * 11\n    steps[0] = 1  # base case: one way to stand on the ground\n\n    # Compute the number of ways to reach the first four steps\n    for i in range(1, 5):\n        steps[i] = sum(steps[max(0, i-3):i])\n\n    # The fifth step is muddy and should be avoided, so set it to 0\n    steps[5] = 0\n\n    # Compute the number of ways for the rest of the steps,\n    # with the restriction that one cannot step on the fifth step\n    for i in range(6, 11):\n        # Use the sum of the last three steps without including the fifth\n        steps[i] = steps[i-1] + steps[i-2] + steps[i-3]\n\n        # Adjust for the fact that we are not allowed to step on the fifth step\n        # So we subtract the ways that include the fifth step\n        if i-4 >= 0:\n            steps[i] -= steps[i-4]\n        if i-5 >= 0:\n            steps[i] -= steps[i-5]\n\n    return steps[10]\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for number in range(1, 10):\n        sequence.extend([number] * number)\n    \n    median_index = len(sequence) // 2\n    ans = sequence[median_index] if len(sequence) % 2 != 0 else (sequence[median_index - 1] + sequence[median_index]) / 2\n    \n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')  # Initialize the minimum number of boxes to infinity\n\n    for small_boxes in range(54 // 5 + 1):  # Iterate from 0 up to the maximum number of small boxes\n        for medium_boxes in range(54 // 7 + 1):  # Iterate from 0 up to the maximum number of medium boxes\n            for large_boxes in range(54 // 10 + 1):  # Iterate from 0 up to the maximum number of large boxes\n                if 5 * small_boxes + 7 * medium_boxes + 10 * large_boxes == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n\n    return min_boxes\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    number_of_weeks = 30\n    total_carrots = carrots_per_week * number_of_weeks\n    return total_carrots\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    initial_frogs = 11 - 9\n\n    return initial_frogs\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    # Calculate the total number of visitors after 16 minutes with one entrance\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    time_one_entrance = 16\n\n    total_visitors = visitors_per_minute * time_one_entrance\n\n    # Find the time it takes for two entrances to check in all visitors\n    entrances = 2\n    time_two_entrances = total_visitors / (check_in_per_entrance * entrances)\n\n    return time_two_entrances\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n    miles_traveled = miles_per_hour * hours\n\n    miles_to_kilometers = 1.60934\n    kilometers_traveled = miles_traveled * miles_to_kilometers\n\n    return kilometers_traveled\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    progress_per_day = climb_per_day - slide_per_night\n    days = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += climb_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n        \n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - cookies_given_away\n    number_of_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for cookies (c) and muffins (m)\n    c, m = symbols('c m')\n\n    # The number of cookies baked is 24 more than muffins\n    equation1 = Eq(c, m + 24)\n\n    # After selling the fractions, she had 74 left\n    # m - (3/4) * m + c - (5/8) * c = 74\n    equation2 = Eq(m * (1 - 3/4) + c * (1 - 5/8), 74)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, m))\n\n    # Return the number of cookies baked at first\n    return solutions[c]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    max_three_digit_number = 999  # Greatest three-digit number\n    greatest_multiple_of_25 = (max_three_digit_number // 25) * 25  # Find the greatest multiple\n    return greatest_multiple_of_25\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f'123{A}456{A}789{A}0')  # The number must end with 0 to be even and not divisible by 5\n        if number % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Given ratio of speeds of driver to cyclist is 13:2\n    # This means the time taken will be in the ratio 2:13, since speed and time are inversely proportional\n    # Let the time taken by the driver be t minutes\n    # Then the time taken by the cyclist would be t + 143 minutes\n\n    # The ratio of the times taken is 2:13, so we can write this expression:\n    # t / (t + 143) = 2 / 13\n    # Solving for t gives us:\n    # 13t = 2(t + 143)\n    # 13t = 2t + 286\n    # 11t = 286\n    # t = 286 / 11\n\n    t = 286 / 11\n\n    return t\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assuming:\n    # ticket_price: price of a single ticket\n    # coffee_price: price of a cup of coffee\n    # metro_ride_price: price for the metro both ways\n\n    ticket_price = symbols('ticket_price')\n    coffee_price = symbols('coffee_price')\n    metro_ride_price = symbols('metro_ride_price')\n\n    # total_money: Richard's total amount of money\n    total_money = 40\n\n    # total_expense: total expense for Richard and his friends\n    # It includes the cost of metro both ways, a cup of coffee each, and the entry fee\n    # for each person including Richard\n    # num_friends: number of friends Richard can take with him\n    # The equation will be:\n    # (num_friends + 1) * (ticket_price + coffee_price + 2 * metro_ride_price) = total_money\n    # We solve the equation for num_friends\n\n    num_friends = symbols('num_friends', integer=True)\n\n    equation = Eq((num_friends + 1) * (ticket_price + coffee_price + 2 * metro_ride_price), total_money)\n\n    # We need extra information about the cost of each item to solve this equation\n    # For now, let's assume some prices and solve for num_friends\n    assumed_ticket_price = 10  # Assumed price for a ticket\n    assumed_coffee_price = 3   # Assumed price for a cup of coffee\n    assumed_metro_price = 2    # Assumed price for metro ride both ways\n\n    # Solving the equation\n    num_friends_sol = solve(equation.subs({\n        ticket_price: assumed_ticket_price,\n        coffee_price: assumed_coffee_price,\n        metro_ride_price: assumed_metro_price\n    }), num_friends)\n\n    return max(num_friends_sol)\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Using the formula for the sum of cubes: 1³ + 2³ + 3³ + ... + n³ = (1 + 2 + 3 + ... + n)²\n    # The sum of the first n natural numbers is (n * (n + 1)) / 2\n\n    n = 12  # We want the sum of cubes from 2 to 12\n    sum_of_natural_numbers = (n * (n + 1)) // 2  # Sum of numbers from 1 to 12\n    sum_of_cubes = sum_of_natural_numbers ** 2  # Square of the sum gives us the sum of cubes\n\n    # We must subtract the cubes of 1 from the sum since we want the sum from 2 to 12\n    sum_from_two_to_twelve = sum_of_cubes - 1**3\n\n    return sum_from_two_to_twelve\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_in_9_days = (cans_in_6_days / 6) * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    numbers = range(40, 49) # Since we start with 48 and end with 40\n    ans = sum((-1)**(i % 2) * num for i, num in enumerate(numbers[::-1]))\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Hypothesis: If statement 1 is true, all statements would be true, which would contradict statement 1.\n    # So statement 1 is false.\n    \n    # Hypothesis: If statement 2 is true, then both statement 1 and 2 would be true, leading to a contradiction.\n    # So statement 2 is false.\n    \n    # Hypothesis: If statement 3 is true, then only one of the statements 1 or 2 would be true.\n    # However, from above we already established both are false. So statement 3 is also false.\n    \n    # Hypothesis: If statement 4 is true, it means all the statements from 1 to 3 are true, which we've disproven.\n    # So statement 4 is false.\n    \n    # Hypothesis: If statement 5 is true, it would mean all the statements 1 to 4 are false, fulfilling its own requirement.\n    # Since all other hypotheses have led to contradictions, this leaves us with statement 5 as the only logical answer.\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the total number of coins on the table\n    x = symbols('x')\n    \n    # One quarter of them are showing heads => (1/4) * x\n    # If I turn over two more coins to show heads => (1/4) * x + 2\n    # Then one third of the coins now show heads => (1/3) * x\n    \n    # We set up the equation according to the problem statement:\n    equation = Eq((1/4) * x + 2, (1/3) * x)\n    \n    # Solve for x\n    num_coins = solve(equation, x)[0]\n\n    return num_coins\n  \nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3  # Total number of shows\n    # Calculate permutations for 5 singing shows and 3 comedy shows, using the formula for permutations: P(n, k) = n! / (n-k)!\n    perm_singing = factorial(5) \n    # There are 6 slots to place 3 comedy shows among 5 singing shows (before and after each singing show, excluding consecutive comedy shows)\n    slots_for_comedy = 6\n    perm_comedy = factorial(slots_for_comedy) // factorial(slots_for_comedy - 3)\n    # Use multiplication principle to get the total possibilities\n    total_ways = perm_singing * perm_comedy\n    return total_ways\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways = trains + cars + flights\n\n    return ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_numbers = sorted(numbers)\n    middle_index = len(sorted_numbers) // 2\n    return sorted_numbers[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    road_per_day = total_road / total_days\n    return road_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # The pattern of digits is 23456 repeated.\n    pattern = [2, 3, 4, 5, 6]\n    pattern_length = len(pattern)\n    \n    # The sum of the digits in the pattern 23456\n    pattern_sum = sum(pattern)\n    \n    # Number of complete patterns in 2100 digits\n    complete_patterns = 2100 // pattern_length\n    \n    # Sum for complete patterns\n    sum_complete_patterns = complete_patterns * pattern_sum\n    \n    # Remaining digits after complete patterns\n    remaining_digits = 2100 % pattern_length\n    \n    # Sum for remaining digits\n    sum_remaining_digits = sum(pattern[:remaining_digits])\n    \n    # Total sum\n    ans = sum_complete_patterns + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    # Let x be the original number\n    # Halving x then subtracting 9 gives us 12.\n    # So, the equation is (x / 2) - 9 = 12\n    # Solve for x.\n\n    # Rearrange the equation: (x / 2) = 12 + 9\n    # Multiply both sides by 2: x = (12 + 9) * 2\n    x = (12 + 9) * 2\n    \n    return x\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = '4759'\n    min_even_number = float('inf')\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 == 0 and num < min_even_number and num > 999:\n            min_even_number = num\n    \n    return min_even_number\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n\n    # There are 6 people and 8 seats, so first choose 6 out of 8 seats\n    # The number of ways to choose 6 seats is C(8,6) = 8! / (6! * (8-6)!) = 8! / (6! * 2!)\n    seat_choices = factorial(8) // (factorial(6) * factorial(8 - 6))\n\n    # After choosing seats, consider the number of ways to arrange 6 people\n    # Since the table is circular, fixing one person reduces the permutations by a factor of 6\n    # Therefore, the arrangement of people is P(6,6) / 6 = 6! / 6\n    people_arrangements = factorial(6) // 6\n\n    # The total number of different orders is the product of the two\n    total_orders = seat_choices * people_arrangements\n\n    return total_orders\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    steps = symbols('steps')\n    \n    # Peter's own effort moves him x steps in the time the escalator moves (10 - x) steps\n    equation1 = Eq(steps, 10 + (10 - steps))\n    \n    # Peter's double effort moves him 2x steps in the time the escalator moves (16 - 2x) steps\n    equation2 = Eq(steps, 16 + 2 * (16 - steps) / 2)\n    \n    # Solve for the number of steps\n    num_steps = solve((equation1, equation2), (steps))\n\n    return num_steps[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n\n    ans = total_dollars * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45 / 100\n    total_distance = 2000\n    distance = percentage * total_distance\n    return distance\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    kayaks_needed = -(-students // kayak_capacity)  # Use ceiling division to get the least number of kayaks\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar = 72\n    balloon_price = 20\n    total_paid = 1000  # £10 note in pence\n    change_received = 388  # £3.88 change in pence\n\n    amount_spent = total_paid - change_received\n    amount_spent_on_balloons = amount_spent - chocolate_bar\n\n    number_of_balloons = amount_spent_on_balloons // balloon_price\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n    equation = Eq(3 * a, sqrt(3 * x))\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    subtraction_result = (4 + 2) * 13 - (4 + (2 * 13))\n    return subtraction_result\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let x be the age of the youngest dwarf\n    # Then the ages of the youngest three are x, x+1, and x+2\n    # Their total age is 3x + 3\n    # According to the question, this sum is 42\n    # 3x + 3 = 42\n    # Solving for x gives us:\n    x = (42 - 3) // 3\n\n    # The ages of the oldest three will then be x+4, x+5, and x+6\n    # Their total age will be 3x + 15\n    total_age_oldest_three = 3*x + 15\n\n    return total_age_oldest_three\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    money_spent_on_cupcakes_and_pizza = total_money * spent_fraction\n    remaining_money = total_money - money_spent_on_cupcakes_and_pizza\n\n    # Let's denote the cost of 1 slice of pizza as p and the cost of 1 cupcake as c.\n    # According to the problem, 6 slices of pizza and 5 cupcakes cost the same amount of money spent.\n    # Also, 3 slices of pizza is equal to the cost of 2 cupcakes: 3p = 2c\n    # Hence, we can write: 6p + 5c = money_spent_on_cupcakes_and_pizza\n    # and 3p = 2c -> p = 2c/3\n    # Substituting p in the previous equation: 6*(2c/3) + 5c = money_spent_on_cupcakes_and_pizza\n    # Simplifying it: 4c + 5c = money_spent_on_cupcakes_and_pizza\n\n    # Therefore, we calculate the cost of one cupcake (c).\n    c = money_spent_on_cupcakes_and_pizza / 9\n\n    # Now, we can find the greatest number of cupcakes he could buy with the remaining money.\n    num_cupcakes = remaining_money // c\n\n    return int(num_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 3, 5]\n\n    # Uses permutations of size 3 since we're forming three-digit numbers\n    perms = permutations(digits, 3)\n    \n    # Count the number of unique permutations\n    count = len(list(perms))\n    \n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    from math import sqrt, floor\n\n    count = 0\n    number = 2\n    while number <= 25555:\n        root = sqrt(number)\n        if root == floor(root):\n            count += 1\n        number = number * 10 + 5\n    \n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts.\n    for x in range(1, 11):  # Loop from 1 to 10 because we can't cut more pieces than we have\n        # Every cut piece adds 2 more pieces to the total count (because one piece becomes three).\n        # Therefore, the equation to solve is: original pieces + 2 * cut pieces = total pieces\n        if 10 - x + 2 * x == 16:\n            return x\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Calculate the production rate per worker per minute\n    production_rate_per_worker_per_minute = (120 / 6) / 4\n    \n    # Calculate the number of parts 3 workers produce in 10 minutes based on the production rate\n    parts_produced_by_3_workers_in_10_minutes = 3 * production_rate_per_worker_per_minute * 10\n    \n    return parts_produced_by_3_workers_in_10_minutes\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "from sympy import divisors, is_square\n\ndef solution():\n    n_values = []\n    for div in divisors(2240):\n        if is_square(2240 // div):\n            n_values.append(div)\n    return n_values\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = int(0.70 * total_pupils)\n    \n    swimming_girls = 200\n    non_swimming_girls = total_pupils - swimming_pupils - int(0.40 * (total_pupils - swimming_girls))\n    \n    girls = swimming_girls + non_swimming_girls\n    \n    return girls\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_ratio = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_ratio\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    increase = final_value - initial_value\n    percentage_increase = (increase / initial_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice_sack, oatmeal_packet = symbols('rice_sack oatmeal_packet')\n\n    equation1 = Eq(3 * rice_sack + 3 * oatmeal_packet, 36)\n    equation2 = Eq(rice_sack, 2 * oatmeal_packet)\n\n    solutions = solve((equation1, equation2), (rice_sack, oatmeal_packet))\n\n    return solutions[rice_sack]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_n = (n * (n + 1)) // 2\n    ans = sum_of_n**2\n    return ans\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ten_percent_x = symbols('x')\n\n    eq = Eq(4 * 30 + ten_percent_x * 10, (4 + ten_percent_x) * 26)\n\n    amount_x = solve(eq, ten_percent_x)\n\n    return amount_x[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mass of the jar and the mass of one chocolate\n    jar, chocolate = symbols('jar chocolate')\n\n    # Create equations based on the given information\n    equation1 = Eq(jar + 5*chocolate, 185)\n    equation2 = Eq(jar + 17*chocolate, 317)\n\n    # Solve the equations to find the mass of the jar and one chocolate\n    solutions = solve((equation1, equation2), (jar, chocolate))\n\n    # Use the solutions to calculate the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = solutions[jar] + 10*solutions[chocolate]\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    def count_divisors(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    def count_ways(n):\n        # Subtracting 1 because n = n is not considered a sum of equal parts\n        return count_divisors(n) - 1\n    \n    ans = count_ways(200)\n    return ans\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_operation(custom_operation(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n    # Subtract the corners as they are already planted with wheat\n    wheat_on_sides = total_wheat - 4\n    # Divide the number of side wheats evenly between the length and the width\n    wheat_on_length = (wheat_on_sides // 2) - 1  # Minus the corner wheats from lengths\n    wheat_on_width = (wheat_on_sides // 2) - 1  # Minus the corner wheats from widths\n    # Calculate the distance between wheats on the sides\n    distance_length = length / (wheat_on_length + 1)  # Number of gaps is one more than number of wheats\n    distance_width = width / (wheat_on_width + 1)  # Number of gaps is one more than number of wheats\n    # Since it's evenly planted, distance should be the same along length and width\n    ans = distance_length if distance_length == distance_width else None\n    return ans\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n    \n    # Initial total sweets\n    total_sweets = 674\n    \n    # Equation based on the problem statement\n    equation1 = Eq(lana + mark, total_sweets)\n    equation2 = Eq(lana - lana / 3, mark - 34)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (lana, mark))\n\n    # Lana had more sweets initially\n    more_sweets = solutions[lana] - solutions[mark]\n\n    return more_sweets\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # The rate of catching fish does not change based on the number of cats\n    # since each cat is catching its own fish.\n    time_per_fish_per_cat = 10  # each cat takes 10 minutes to catch a fish\n\n    # Therefore, 5 cats catching 5 fish will still take 10 minutes\n    # because they are working simultaneously.\n    return time_per_fish_per_cat\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    wheat_on_sides = (total_wheat - 4) // 2\n\n    # Wheat is distributed along the length and width equally\n    wheat_on_length = length // (wheat_on_sides // 2)\n    wheat_on_width = width // (wheat_on_sides // 2)\n\n    # The distance between wheat should be the same, so we take the greater common divisor\n    distance = max(wheat_on_length, wheat_on_width)\n\n    return distance\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Let total_days be the total number of days of Robert's summer holiday\n    # According to the problem:\n    # total_days = (1/2) * total_days (working in a music store) \n    #              + (1/2) * (1/2) * total_days (reading and relaxing at home) \n    #              + 4 days (at friend's house) \n    #              + 2 weeks (summer camp)\n    # Since 1 week is 7 days, 2 weeks is 14 days\n    # Therefore, we have an equation:\n    # total_days = (1/2) * total_days + (1/4) * total_days + 4 + 14\n    # Simplifying the equation:\n    # total_days = (1/2 + 1/4) * total_days + 18\n    # total_days - 3/4 * total_days = 18\n    # 1/4 * total_days = 18\n    # total_days = 18 * 4\n    total_days = 18 * 4\n\n    return total_days\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    calc = (result / 9) * 4 - 3\n    return calc\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * 2 / 7\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = remainder_bracelets * 3 / 5\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    bracelets_needed = total_bracelets - bracelets_made\n\n    return int(bracelets_needed)\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_weeks = 4\n\n    combined_rate = total_people / combined_weeks\n    gloria_rate = combined_rate - ellie_rate\n\n    gloria_weeks = total_people / gloria_rate\n\n    return gloria_weeks\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    B, D = 2, 0\n    for p in permutations('123456789', 4):  # Remaining digits\n        A, C, E, F = p\n        ABCDEF = int(f\"{A}{B}{C}{D}{E}{F}\")\n        EFABCD = int(f\"{E}{F}{A}{B}{C}{D}\")\n        if 5 * ABCDEF == 6 * EFABCD:\n           FACE = int(f\"{F}{A}{C}{E}\")\n           return FACE\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3/8) * 48\n    return result\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # Set the variables according to the problem statement\n    total_mix_weight = 15 + 60  # Total weight of the mixture of dogfood A and B\n    percent_rice_in_A = 0.40  # Percentage rice in A\n    percent_rice_in_mix = 0.28  # Percentage rice in the mixture\n    weight_of_A = 15  # Weight of dogfood A\n    weight_of_B = 60  # Weight of dogfood B\n\n    # Calculate the total weight of rice in the mixture\n    total_rice_weight_in_mix = total_mix_weight * percent_rice_in_mix\n\n    # Calculate the weight of rice that comes from dogfood A\n    rice_weight_from_A = weight_of_A * percent_rice_in_A\n    \n    # Calculate the weight of rice that must come from dogfood B\n    rice_weight_from_B = total_rice_weight_in_mix - rice_weight_from_A\n    \n    # Calculate the percentage of rice in dogfood B\n    percent_rice_in_B = rice_weight_from_B / weight_of_B\n\n    # Convert the fraction to percentage\n    percent_rice_in_B *= 100\n\n    return percent_rice_in_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # mL/min\n    total_minutes = 2 * 60  # 2 hours converted to minutes\n    total_leakage_ml = leak_rate_per_minute * total_minutes\n    total_leakage_l = total_leakage_ml / 1000  # Convert mL to L\n    return total_leakage_l\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    \n    # Plus 1 because there's a tree at both the beginning and the end.\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let the distance to the shopping mall be 'd' metres.\n    # Barbara walked this distance at 60 metres per minute.\n    # Catherine walked (d - 60) metres at 45 metres per minute in the same time.\n    \n    # Since they both started walking at the same time and Barbara reached the shopping mall\n    # when Catherine had 60 metres to go we can set their travel times equal.\n    \n    # Time taken by Barbara = Distance / Speed\n    # Time taken by Catherine = Distance / Speed\n    # So, (d / 60) = ((d - 60) / 45)\n    \n    # Solving for 'd', we get the following quadratic equation\n    # 45d = 60(d - 60)\n    # 45d = 60d - 3600\n    # 15d = 3600\n    # d = 3600 / 15\n    d = 3600 / 15\n    \n    return d\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let a, b, c, d be the four distinct positive whole numbers, where a > b > c > d    \n    # Formula for average of three numbers, excluding one in each case:\n    # (a + b + c + d - d)/3 = 39 - d\n    # (a + b + c + d - a)/3 = 39 - a\n    # => a + b + c + d = 3 * (39 - d) + d = 117 - 2*d\n    # => a + b + c + d = 3 * (39 - a) + a = 117 + a - 3*a\n    # => a + b + c + d = 117 - 2*a\n    \n    # Equating the sum of the numbers in both cases gives us:\n    # 117 - 2*d = 117 - 2*a\n    # => a = d\n    # This contradicts the distinct positive whole numbers condition.\n    # Hence, our initial approach must consider that one equation involves the sum with the smallest number\n    # and the other with the largest number.\n    \n    # Given by problem statement:\n    # The sum of the smallest number and the average of the other three numbers is 39\n    # The sum of the largest number and the average of the other three numbers is 51\n    \n    # If x is the smallest and we arrange in descending order a (which is the largest), b, c and x. Then:\n    # (a + b + c + x - x) / 3 + x = 39 => a + b + c + 3x = 117\n    # a + (a + b + c + x - a) / 3 = 51 => 3a + b + c + x = 153\n    # Now we can solve for a + b + c and x:\n    # a + b + c = 117 - 3x\n    # a = (153 - b - c - x) / 3\n    \n    # Since a > b > c > x and x must be a positive whole number,\n    # x can be replaced with multiple values to maximize a.\n    # We will use a loop to try different values of x and maximize a.\n    largest_a = 0\n    for x in range(1, 30):  # start from 1 to ensure positive whole numbers and an upper limit\n        a_b_c = 117 - 3*x\n        a = (153 - a_b_c) / 3\n        if a.is_integer() and a > largest_a:\n            if a > x and a_b_c - a > x:  # ensure distinctness and descending order\n                largest_a = int(a)\n    return largest_a\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n    \n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solution = solve((equation1, equation2), (book, pen))\n\n    return solution[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2 * 10\n    five_dollar_notes = 5 * 5\n    twenty_cent_coins = 4 * 0.20\n    \n    total_change = ten_dollar_notes + five_dollar_notes + twenty_cent_coins\n    money_spent = 100 - total_change\n    \n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    total_amount = 200\n\n    ratio_A_to_B = Eq(A, 4/3 * B)\n    total_amount_eq = Eq(A + B + C, total_amount)\n    A_is_more_than_C_by_20 = Eq(A, C + 20)\n\n    solutions = solve((ratio_A_to_B, total_amount_eq, A_is_more_than_C_by_20), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_for_one_plate = 3  # minutes\n    total_time = 18  # minutes\n    num_plates = total_time // time_for_one_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    equation1 = Eq(dad_age, nini_age + 25)\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students_facing_teacher = 50\n    for i in range(1, 51):\n        if i % 4 == 0 or i % 6 == 0:\n            students_facing_teacher -= 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    result = dividend // divisor\n    return result\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2/5\n    remaining_pears = total_pears - sold_first_day\n    sold_second_day = remaining_pears * 7/9\n    \n    return int(sold_second_day)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    from math import ceil\n\n    total_apples = 29\n    min_apples = 3\n    \n    # Using the Pigeonhole Principle, divide total apples by min_apples per student, round up\n    class_size = ceil(total_apples / min_apples)\n\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick_1_boy = boys\n    ways_to_pick_1_girl = girls\n\n    total_ways = ways_to_pick_1_boy * ways_to_pick_1_girl\n    return total_ways\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for i in range(10, 100):\n        if isprime(i):\n            reversed_i = int(str(i)[::-1])\n            if i != reversed_i and isprime(reversed_i):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    g, b = symbols('g b')  # symbols for green and blue balls\n\n    # Total number of balls before removal\n    equation1 = Eq(g + b, 140)\n    \n    # Number of balls after removing 2/5 of the blue balls and 28 green balls\n    equation2 = Eq(g - 28, b - (2/5)*b)\n    \n    # Equating the number of green and blue balls after removal\n    equation3 = Eq(g - 28, (3/5)*b)\n    \n    # Solving the 3 equations\n    solutions = solve((equation1, equation2, equation3), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic chooses one of the three bars, the probability of being at a particular bar is 1/3.\n    # If he is found not to be at two bars, the probability that he is at the third bar is 1.\n    return 1/3\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot, cousin = symbols('eliot cousin')\n\n    equation1 = Eq(eliot, 2 * cousin)\n    equation2 = Eq(eliot + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot, cousin))\n\n    cousin_future_age = solutions[cousin] + 4\n\n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    marked_fish_first_catch = 100\n    sample_size = 100\n    marked_fish_second_catch = 16\n\n    estimated_total_fish = (marked_fish_first_catch * sample_size) / marked_fish_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Nancy walks x meters\n    # Randy walks x + 10 meters when they meet\n    # Nancy's distance is to Randy's distance as 2 is to 3\n    # 2/3 = x / (x + 10)\n    # 3x = 2(x + 10)\n    # 3x = 2x + 20\n    # x = 20 meters for Nancy\n    # x + 10 = 30 meters for Randy\n    \n    # Total distance is the sum of their walked distances when they meet\n    total_distance = 20 + 30\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    \n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    ans = 324 + 132\n    return ans\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # Calculate the numerator and the denominator\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n\n    # Calculate the answer\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Alice and her sister's current ages\n    alice, sister = symbols('alice sister')\n\n    # Create two equations based on the problem description\n    # 1st equation: Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    \n    # 2nd equation: In 10 years' time, their total age is 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    # Bronson has twice as many marbles as Ali\n    equation1 = Eq(bronson, 2 * ali)\n\n    # Ali has 5 less than the average of Bronson's and Charlie's\n    equation2 = Eq(ali, (bronson + charlie) / 2 - 5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    # Returning the number of marbles Charlie has\n    return solutions[charlie]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be 1-9\n        for tens in range(10):  # tens digit must be 0-9\n            for ones in range(10):  # ones digit must be 0-9 and even\n                if ones % 2 == 0:  # ensuring the number is even\n                    if hundreds + tens + ones == 8:\n                        if len({hundreds, tens, ones}) == 3:  # ensuring all digits are different\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    # Loop through all possible six-digit numbers ending with 2.\n    for number in range(100002, 1000000, 10):\n        # Check if the new number placing 2 at the beginning is one-third of the original number.\n        if ((2 * 100000) + (number // 10)) == number // 3:\n            return number\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let's represent the repeating decimal using a geometric series\n    # 0.2014141414... = 0.2 + 0.0014 + 0.0014 * 10^(-2) + 0.0014 * 10^(-4) + ...\n    # This can be seen as 2/10 + 14/10000 * (1 + 10^(-2) + 10^(-4) + ...)\n\n    # The sum of the geometric series a + ar + ar^2 + ... is a / (1 - r) where |r| < 1\n    # In this case, a = 14/10000 and r = 1/100 (10^(-2))\n\n    a = 14 / 10000\n    r = 1 / 100\n\n    # Now we calculate the sum of the geometric series\n    repeating_part_sum = a / (1 - r)\n\n    # Add the non-repeating part of the decimal\n    total_decimal = 0.2 + repeating_part_sum\n\n    # The value of x is the total decimal multiplied by 9900\n    x = total_decimal * 9900\n\n    # As we need the whole number x, return x as an integer\n    return int(x)\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    # Total number of students\n    total_students = 30\n    \n    # Students who passed the first exam\n    passed_first = 25\n    \n    # Students who failed the second exam\n    failed_second = 12\n    \n    # Students who passed the second exam but failed the first\n    passed_second_failed_first = 3\n    \n    # Students who passed both exams\n    passed_both = passed_first - passed_second_failed_first\n    \n    # Using the Inclusion-Exclusion Principle to calculate students who passed only the first exam\n    passed_only_first = passed_first - passed_both\n\n    return passed_only_first\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    remainder = total_bars % people\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_of_digits = a + b + c\n    # Each digit appears in each place (hundreds, tens, ones) twice\n    sum_of_numbers = sum_of_digits * 2 * (100 + 10 + 1)\n    return sum_of_numbers\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            number = a * 10 + b\n            reverse_number = b * 10 + a\n            product = number * reverse_number\n            if product % 100 == 0:\n                return number\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of potatoes in the small sack\n    s = symbols('s')\n    \n    # Equation: large sack has 20% more potatoes than the small sack and together they contain 77 potatoes\n    equation = Eq(s + s * 1.20, 77)\n\n    # Solving for s\n    small_sack = solve(equation, s)\n\n    # Finding the number of potatoes in the large sack\n    large_sack = small_sack[0] * 1.20\n\n    return large_sack\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n    total_fruits = Eq(oranges + apples, 125)\n    fruits_left = Eq(oranges - 35, apples / 2)\n\n    solutions = solve((total_fruits, fruits_left), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (the first 1 and the last 1 create the smallest possible palindrome).\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome is 999999.\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    total_students = 35\n    capacity_per_cabin = 6\n    min_cabins_needed = (total_students + capacity_per_cabin - 1) // capacity_per_cabin\n    return min_cabins_needed\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for i in range(1, 59):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(1/4 * x + 2, 1/3 * x)\n    num_coins = solve(equation, x)\n    \n    return num_coins[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    position_from_left = 14\n    books_on_right = 6\n\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    total_digits = 0\n    # Find the total number of digits from 1 to 1200\n    for i in range(1, 1201):\n        total_digits += len(str(i))\n        \n    # Start counting from the right (2011th from the right is 'total_digits - 2011 + 1' from the left)\n    position_from_left = total_digits - 2011 + 1\n    \n    # Count the number of digits again to find the 2011th from the right\n    current_count = 0\n    for i in range(1, 1201):\n        current_count += len(str(i))\n        if current_count >= position_from_left:\n            # Find the exact digit by locating its position in the number's string representation\n            str_number = str(i)\n            digit_position_in_number = position_from_left - (current_count - len(str_number))\n            return int(str_number[digit_position_in_number - 1])\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # Two-digit numbers cannot start with 0, so we have 5 choices for the first digit (1-5)\n    first_digit_choices = 5\n    # For the second digit, we can use any of the 6 numbers (0-5)\n    second_digit_choices = 6\n    # The total number of combinations is the product of the choices for each digit\n    total_combinations = first_digit_choices * second_digit_choices\n    return total_combinations\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # the sum of an arithmetic sequence is given by n/2 * (first_term + last_term)\n    first_term = 5                    # the first multiple of 5\n    last_term = (50 // 5) * 5        # the last multiple of 5 that is <= 50\n    n = last_term // first_term       # the number of terms in the sequence\n    sum_of_multiples = n / 2 * (first_term + last_term)\n    return int(sum_of_multiples)\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be c and the number of motorbikes be m\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # c + m = 140 (total number of vehicles)\n    # 4c + 2m = 490 (total number of tyres)\n    \n    # We can solve this system of linear equations\n    # First, let's multiply the first equation by 2\n    # 2c + 2m = 280\n    \n    # Now, subtract the modified first equation from the second equation\n    # 4c + 2m - (2c + 2m) = 490 - 280\n    # 2c = 210\n    # c = 105\n    \n    # Therefore, the number of cars is 105.\n    c = 105\n    return c\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n    \n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number_to_round = 8.765\n    rounded_number = round(number_to_round, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    sols = solve((eq1, eq2, eq3), (a, n))\n    \n    # Find the valid solution for n since n must be a positive integer larger than a, a+4, and a+6\n    valid_n = [sol[n] for sol in sols if sol[n] > a and sol[n] > a + 4 and sol[n] > a + 6 and sol[n] > 0]\n\n    # Only one valid 'n' will exist that satisfies all three equations.\n    # We extract this value and calculate the required remainder.\n    valid_n = valid_n[0]\n    remainder = 299 % valid_n\n\n    return remainder\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    add_on = 12\n    original_number = (result - add_on) / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes\n\n    # The distance each planet traveled in 5 minutes\n    distance_planet1 = speed_planet1 * time\n    distance_planet2 = speed_planet2 * time\n\n    # Total distance apart 5 minutes ago\n    total_distance = distance_planet1 + distance_planet2\n\n    return total_distance\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_sum = 0\n    for x in range(2, 199):\n        if all(x % i != 0 for i in range(2, int(x ** 0.5) + 1)):\n            y = 200 - x\n            if x * (2 + y) == 200 + y and y > 1 and all(y % i != 0 for i in range(2, int(y ** 0.5) + 1)) and x != y:\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    repeat_2 = 2\n    repeat_3 = 2\n    \n    permutations_total = factorial(total_digits)\n    permutations_repeat_2 = factorial(repeat_2)\n    permutations_repeat_3 = factorial(repeat_3)\n    \n    ans = permutations_total // (permutations_repeat_2 * permutations_repeat_3)\n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    # Bud spends 2p which is one-quarter of her money\n    # Let x be the total amount of money Bud had initially\n    total_spent = 2  # 2p\n    fraction_spent = 1/4  # one-quarter\n\n    # Since Bud spent one-quarter of her money, the equation will be:\n    # total_spent = fraction_spent * x\n    # 2 = 1/4 * x\n    # x = 2 / (1/4)\n    # x = 2 * (4/1)\n    x = total_spent * (1 / fraction_spent)\n\n    return x\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Given height relationships\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sleepy, 80)\n    # Dopey, Sneezy, Bashful and Grumpy are all the same height\n    equation4 = Eq(dopey, sneezy)\n    equation5 = Eq(dopey, bashful)\n    equation6 = Eq(dopey, grumpy)\n    # Doc and Sleepy combined are the same height as Dopey and Sneezy combined\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Total height of the seven dwarfs\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 13 == 1:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    # Total teams\n    teams = 8\n    # Each team plays against other teams once, so for each team:\n    # (total teams - 1) matches will be played\n    # The total matches will be teams * (teams - 1), but each match is counted twice\n    # because each match involves two teams, hence we divide by 2\n    matches = (teams * (teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n    return total_donation\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = Fraction(31, 6) + Fraction(31, 5)\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7/9) * 27\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # Construction rate per day\n    rate_per_day = 1000 / 5  # meters per day\n    \n    # Total days to construct a 2600-meter highway\n    days = 2600 / rate_per_day\n    \n    return days\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time = 5\n    speed = distance / time\n    \n    time_required = 3\n    distance_traveled = speed * time_required\n    \n    return distance_traveled\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let the numbers on the hats be q, r, and s for Qiang, Rory, and Sophia\n    q = Symbol('q')\n    r = Symbol('r')\n    s = Symbol('s')\n    \n    # Equations based on the problem statement\n    equations = [\n        q + r - 11,\n        q + s - 17,\n        r + s - 22\n    ]\n    \n    # Solve the system of equations\n    hat_numbers = solve(equations)\n    \n    # Find the largest number on a hat\n    ans = max(hat_numbers[q], hat_numbers[r], hat_numbers[s])\n    return ans\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Since the sequence is an arithmetic series,\n    # and the difference between consecutive numbers is 1,\n    # we can take pairs of first and last, second and second last, etc.\n    # These pairs always sum to an odd number (because one will be odd and the other even).\n    # Find the number of pairs to determine odd/even sum.\n    num_terms = (90 - 12) // 1 + 1  # Number of terms in the series\n    \n    if num_terms % 2 == 0:\n        # Even number of terms, each pair sums to an odd number\n        # Hence, an even number of odd numbers will give an even sum\n        ans = \"even\"\n    else:\n        # Odd number of terms\n        # Since the first term is even, the last term (and the middle term in the unpaired sequence)\n        # will also be even, making the sum even.\n        ans = \"even\"\n\n    return ans\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    num_trees = 30\n    distance_apart = 5\n    # The length of the road is the distance between each tree\n    # times the number of spaces between the trees.\n    # The number of spaces is one less than the number of trees.\n    length_of_road = distance_apart * (num_trees - 1)\n    \n    return length_of_road\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    from fractions import Fraction\n\n    product = Fraction(1, 1)  # start with fraction representing 1\n    for i in range(2, 10):\n        product *= Fraction(i, i+1)\n    return product\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    all_permutations = sorted([''.join(map(str, p)) for p in permutations(digits)])\n    fifth_number = int(all_permutations[4])\n    return fifth_number\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n    \n    ans = 0\n    for prime in range(1, 21):\n        if isprime(prime) and isprime(prime + 6):\n            ans += 1\n        elif isprime(prime) and isprime(prime - 6):\n            ans += 1\n    \n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Create equations based on the problem\n    # Distance = Speed * Time\n    # Convert minutes to hours by dividing by 60\n\n    distance_first_30min = x * (30/60)  # Distance covered in the first 30 minutes\n    distance_second_30min = (x - 20) * (30/60)  # Distance covered in the second 30 minutes\n    distance_last_30min = (x + 10) * (30/60)  # Distance covered in the last 30 minutes\n\n    # Sum of distances is equal to the total distance\n    total_distance = Eq(distance_first_30min + distance_second_30min + distance_last_30min, 70)\n\n    # Solve for x\n    solution = solve(total_distance, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    \n    # Digits for 1-9 (9 pages)\n    total_digits += 1 * 9\n\n    # Digits for 10-99 (90 pages)\n    total_digits += 2 * 90\n    \n    # Digits for 100-345 (246 pages)\n    total_digits += 3 * 246\n\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n    \n    buses_needed = -(-total_people // max_per_bus)  # Ceiling division\n    \n    return buses_needed\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "from math import factorial\n\ndef solution():\n    coach_position = 1  # There's only one way to place the coach in the middle.\n    captain_position = 2  # There are two positions for the captain, either to the left or right of the coach.\n    \n    # There are 5 other players who can be arranged in any order in the remaining 5 positions.\n    other_players_arrangement = factorial(5)\n    \n    # Apply the principle of multiplication\n    total_arrangements = coach_position * captain_position * other_players_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let's assume there's an `n x n` square of boys, and an `(n-2) x (n-2)` square of girls inside it\n    # We need to find an `n` such that n^2 - (n-2)^2 = 20\n    # Start with n=3 (smallest possible square with an inner layer) and increment until the condition is met\n    n = 3\n    while True:\n        boys = n * n\n        girls = (n - 2) ** 2 if n > 1 else 0\n        if boys - girls == 20:\n            break\n        n += 1\n    \n    # Total number of students is the sum of boys and girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    # Denise got a fraction of the total prize money for singles and doubles.\n    # Let's represent the total prize money as x.\n    # According to the problem, Denise got (1/5)x from singles and (1/15)x from doubles.\n    # Altogether, Denise got 360 pounds: (1/5)x + (1/15)x = 360\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for total prize money\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq((1/5)*x + (1/15)*x, 360)\n\n    # Solve the equation for x\n    total_prize_money = solve(equation, x)\n\n    return total_prize_money[0]\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    for penguins in range(1, 100):  # Assuming a reasonable upper limit for total penguins\n        if (penguins * 3 + 25 == (penguins - 1) * 6 + 1):\n            return penguins\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    # Initialize the sum\n    total_sum = 0\n    # Initialize the current term\n    current_term = 1\n    # Initialize the count for the current term repetition\n    term_count = 1\n    \n    # Loop over the first 30 terms\n    for _ in range(30):\n        total_sum += current_term\n        term_count -= 1\n        # If the current term has been added 'current_term' times, move to the next term\n        if term_count == 0:\n            current_term += 1\n            term_count = current_term\n            \n    return total_sum\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = 0.25 * 20 + (1/5) * 30 + (2/3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        if (1 + 7 + 3 + a) - (a + 7 + 1) == 0 or (1 + 7 + 3 + a) - (a + 7 + 1) == 11 or (1 + 7 + 3 + a) - (a + 7 + 1) == -11:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    # To ensure Cindy wins, she must have more votes than the highest of the other two, in this case, Betty.\n    votes_to_beat = betty_votes\n\n    # Cindy needs 1 more vote than Betty to ensure a win\n    additional_votes_cindy_needs = votes_to_beat + 1 - cindy_votes\n\n    return additional_votes_cindy_needs\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    import fractions\n    import math\n\n    # First expression: 7 / -3.333... divided by cube root of -0.027\n    expr1_numerator = 7 / fractions.Fraction(-10, 3)\n    expr1_denominator = (-0.027) ** (1/3)\n    expr1 = expr1_numerator / expr1_denominator\n\n    # Second expression: 2^3 / 4^2 divided by (0.125 * [1.8 - (0.2 * 7)])\n    expr2_numerator = (2 ** 3) / (4 ** 2)\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7))\n    expr2 = expr2_numerator / expr2_denominator\n\n    # Third expression: 0.1 / 0.142857... + (2 * 0.3)\n    expr3 = 0.1 / fractions.Fraction(1, 7) + (2 * 0.3)\n\n    # Result\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Calculate the difference in years between the given dates for Gina and James\n    years_diff = 2005 - 1997\n\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n\n    # James' age on 10th May 1997\n    james_age_1997 = 20\n\n    # Calculate Gina's age when James was born\n    gina_age_when_james_born = gina_age_2005 - years_diff - james_age_1997\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n    \n    sales = symbols('sales', real=True, positive=True)\n    \n    # Equation representing the total salary calculation based on sales\n    equation = 2500 + 0.02 * sales + 0.05 * (sales - 25000) - 3300\n    \n    # Solve equation for the point where sales beyond $25000 are considered\n    sales_july = solve(equation, sales)[0] if sales > 25000 else 25000\n    \n    return sales_july\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six = 6 * 150\n    total_height_of_four = 4 * (150 - 2)\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n    \n    return average_height_of_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    prob_first_attempt = 0.4\n\n    # Probability of failing the first attempt and passing the second\n    prob_second_attempt = (1 - prob_first_attempt) * 0.5\n\n    # Probability of failing the first two attempts and passing the third\n    prob_third_attempt = (1 - prob_first_attempt) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    total_probability = prob_first_attempt + prob_second_attempt + prob_third_attempt\n\n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 1014:\n        pages += 1\n        digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    # Let the original number of marbles Ryan had be 2x and Audrey had be 7x.\n    # After the transactions, Ryan has (2x + 20) and Audrey has (7x - 80).\n    # The new ratio is 1 : 3, so we can write the equation (2x + 20)/(7x - 80) = 1/3.\n    # Solving for x gives us the original amount of marbles Audrey had, which is 7x.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Original ratio equation\n    equation1 = Eq(2*x + 20, 1*(7*x - 80)/3)\n    \n    # Solve for x\n    solution_x = solve(equation1, x)[0]\n    \n    # Find the number of marbles Audrey had originally which is 7x\n    audrey_marbles = 7 * solution_x\n    \n    return audrey_marbles\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n    hours_needed = total_pieces / pieces_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n    \n    zero_count = 0\n    while factorial % 10 == 0:\n        zero_count += 1\n        factorial //= 10\n    \n    return zero_count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age/4 + 32, age - 22)\n    \n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    # Let's iterate over possible side lengths of the square and calculate the difference in boys and girls\n    # Start with the smallest possible square that could have one girl, i.e., a 3x3 square\n    side_length = 3\n    while True:\n        # Calculate the number of students in the outermost layer (boys)\n        boys = side_length * 4 - 4\n        \n        # Calculate the number of students in the second layer (girls)\n        girls = (side_length - 2) * 4 - 4\n        \n        # Continue alternating boys and girls until we reach the innermost layer\n        total_boys = total_girls = 0\n        current_layer = side_length\n        while current_layer > 0:\n            if current_layer % 2 == 0:  # even layer is girls\n                total_girls += (current_layer * 4 - 4) if current_layer > 1 else 1\n            else:  # odd layer is boys\n                total_boys += (current_layer * 4 - 4) if current_layer > 1 else 1\n            \n            # Move to the next inner layer\n            current_layer -= 2\n\n        # Check if the difference between boys and girls is 44\n        if total_boys - total_girls == 44:\n            # Calculate the total number of students\n            total_students = total_boys + total_girls\n            return total_students\n\n        # Increment the side for the next potential square array\n        side_length += 2\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # Climbed for 5 days + 6th day\n    total_days_to_climb = 18\n\n    # Since the snail climbs out on the 6th day, we set up an equation for that day.\n    # The snail must slide down an unknown distance 'slide_down_meters' during the night of the 5th day\n    # and climb up 3 meters to reach 18 meters on the 6th day.\n\n    # total_climbed_so_far - slide_down_meters + 6th_day_climb = total_days_to_climb\n    slide_down_meters = total_climbed - total_days_to_climb + 3\n\n    return slide_down_meters\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second_student = 0\n    total_apples = 48\n\n    for first_student in range(1, total_apples - 3):\n        for second_student in range(first_student + 1, total_apples - 2):\n            for third_student in range(second_student + 1, total_apples - 1):\n                fourth_student = total_apples - (first_student + second_student + third_student)\n                if fourth_student > third_student:\n                    max_apples_for_second_student = max(max_apples_for_second_student, second_student)\n\n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    fastest = 1  # Eddie's time\n    second = 2   # Jack's time\n    third = 5    # Rose's time\n    slowest = 10 # Mary's time\n\n    # Strategy:\n    # 1. Fastest and second fastest cross; fastest returns (time: second).\n    # 2. Slowest and third slowest cross; second fastest returns (time: slowest + second).\n    # 3. Fastest and second fastest cross again (time: second).\n    # Total time = second + slowest + second + second = second * 3 + slowest\n    \n    time = (second * 3) + slowest\n    return time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let x be the original length of the rectangle.\n    # The original width is not changed when the length is increased, let's call it y.\n    # After increasing the length by 12 cm, the new length is x+12 and the width remains y.\n    # The perimeter of a rectangle is given by P = 2*(length + width).\n    # According to the problem, the new perimeter P_new is 38 cm.\n    # So, we have P_new = 2 * ((x + 12) + y) = 38.\n    \n    # Now, we need to find the expression for the original perimeter P_original.\n    # The original perimeter P_original = 2 * (x + y).\n    \n    # From the equation above, we can express y in terms of x.\n    # 38 = 2 * (x + 12 + y) => 19 = x + 12 + y => y = 19 - 12 - x => y = 7 - x.\n    \n    # Now we substitute y in the original perimeter formula.\n    # P_original = 2 * (x + 7 - x) = 2 * 7 = 14.\n    \n    # Finally, we return the original perimeter.\n    return 2 * 7\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    sum_of_squares = 0\n    for i in range(1, 90, 2):\n        sum_of_squares += (i**2) - ((i+1)**2)\n    return sum_of_squares\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    import math\n    num_students = 4\n    return math.factorial(num_students)\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    ways = 0\n    for i in range(1, 8):\n        if i < 8 - i:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Let's denote Almaz's total salary as 's'.\n    # According to the information given:\n    # She spent (5/9) * s on a television.\n    # The remainder is s - (5/9) * s = (4/9) * s.\n    # Then she spent (3/4) of the remainder on a table,\n    # so the amount spent on the table is (3/4) * (4/9) * s = (1/3) * s.\n    # She had $160 left, which means:\n    # s - ((5/9) * s + (1/3) * s) = 160\n    \n    # Combining the fractions (5/9) * s + (1/3) * s, we get:\n    # (5/9 + 3/9) * s = (8/9) * s\n    # So (8/9) * s represents the total spent on the television and table.\n\n    # That implies:\n    # (8/9) * s + 160 = s\n\n    # Now, solve for 's':\n    s = 160 / (1 - (8/9))\n    \n    # Calculate the cost of the television as (5/9) * s:\n    television_cost = (5/9) * s\n    \n    return round(television_cost, 2)\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Since Jenny eats chocolate on the first day, we have two scenarios for the second day: peaches or strawberries.\n    # If Jenny eats peaches on the second day, on the third day she can only eat strawberries.\n    # If Jenny eats strawberries on the second day, on the third day she can only eat peaches.\n    # In both scenarios, the third day has only one choice.\n    # Therefore, there are two different ways for the second day, and each leads to one way for the third day.\n    # Hence, the total number of different ways of eating is the product of the number of choices for each day.\n    return 2  # 2 choices for the second day * 1 choice for the third day\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n    # We use circular permutations formula P(n) = (n - 1)!\n    # Where n is the number of people.\n    num_people = 7\n    num_seats = 8\n\n    # Circular Permutation for n - 1 as one seat will always be empty\n    ans = factorial(num_people - 1)\n    return ans\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earning = 70\n    days_worked_in_a_week = 6  # from Monday to Saturday\n\n    total_weekly_earning = average_daily_earning * days_worked_in_a_week\n\n    return total_weekly_earning\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbolic variables for John and Emma's current ages\n    john, emma = symbols('john emma')\n    \n    # Create equations based on the problem statement\n    # In 3 years, John's age will be john+3 and Emma's age will be emma+3\n    # The sum of their ages in 3 years is 27\n    equation1 = Eq(john + 3 + emma + 3, 27)\n    \n    # Emma's age is the difference between her own and John's ages\n    equation2 = Eq(emma, john - emma)\n    \n    # Solve the system of equations for John and Emma's ages\n    solution = solve((equation1, equation2), (john, emma))\n    \n    return solution[emma]\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    num_points = 15\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 1 and number % 4 == 1:\n            return number\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h and Jack's speed is 50 km/h.\n    # Jack starts 3 hours later than Tom.\n    # After another 5 hours, they are 15 km away from each other.\n    # Let's calculate the total distance traveled by Tom first when they are 15 km apart.\n    # Tom's total time = 3 hours (head start) + 5 hours (together with Jack) = 8 hours.\n    tom_distance = 48 * 8  # Tom's speed multiplied by his total time.\n\n    # Now we calculate Jack's total distance when they are 15 km apart.\n    # Jack's total time = 5 hours (together with Tom).\n    jack_distance = 50 * 5  # Jack's speed multiplied by his total time.\n    \n    # The distance between A and B is the sum of distances traveled by Tom and Jack plus the 15 km they're apart.\n    total_distance = tom_distance + jack_distance + 15\n    \n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # The angle for 'Water' is 36 degrees. A full circle is 360 degrees.\n    # Therefore, 'Water' represents 36 / 360 = 1/10 of the total survey responses.\n    water_fraction = 1 / 10  # 36 degrees represent 1/10 of the total\n\n    # 'Tea' represents 1/4 of the total survey responses.\n    tea_fraction = 1 / 4\n\n    # 'Cola' represents 30% = 30/100 = 3/10 of the total survey responses.\n    cola_fraction = 3 / 10\n\n    # Seven people chose 'Coffee'. We don't have a fraction for this, so we'll leave it as a count.\n\n    # We need to add up the fractions and counts and set them equal to 1, representing 100% of the survey.\n    # Since 7 people chose 'Coffee', and it's an integer, we assume the total number of people must also be an integer.\n    total_fraction = tea_fraction + cola_fraction + water_fraction\n    \n    # Rest of the survey responses that chose 'Coffee'\n    coffee_count = 7\n\n    # Let the total number of people in the survey be total_people.\n    # We can now express the sum of fractions times the total number of people\n    # as the total number of people minus the 7 people who chose 'Coffee'.\n    # Simplifying the equation, we get total_fraction * total_people + coffee_count = total_people\n    # Solving for total_people gives us total_people = coffee_count / (1 - total_fraction)\n    \n    # Since we're looking for an integer total_people, we start with 7 and increment until we find an integer solution.\n    total_people = coffee_count\n    while True:\n        if (total_people * (1 - total_fraction)).is_integer():\n            return total_people\n        total_people += 1\n        \nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5/3)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n    # Each child has 2 legs and each dog has 4 legs.\n    # There are 3 times as many dogs as children.\n    equation1 = Eq(dogs, 3 * children)\n    # The total number of legs is 56.\n    equation2 = Eq(2 * children + 4 * dogs, 56)\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present = 18\n    absent_fraction = 2/5\n    present_fraction = 1 - absent_fraction\n    total_pupils = present / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    eq1 = Eq(saturday, 4 * sunday - 5)\n    eq2 = Eq(saturday, sunday + 43)\n\n    sol = solve((eq1, eq2), (saturday, sunday))\n\n    return sol[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Compute the number of trees along the length (subtract 1 to ensure no double counting at corners)\n    trees_length = (length // distance) * 2 - 1\n\n    # Compute the number of trees along the width (subtract 1 to ensure no double counting at corners)\n    trees_width = (width // distance) * 2 - 1\n    \n    # Total number of trees needed\n    total_trees = trees_length + trees_width\n    \n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    katie_height_in_metres = 1.36\n    metres_to_cm_conversion_factor = 100\n\n    katie_height_in_cm = katie_height_in_metres * metres_to_cm_conversion_factor\n\n    return int(katie_height_in_cm)\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 3 / 100\n    tax_amount = income * tax_rate\n    money_after_tax = income - tax_amount\n    return money_after_tax\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    # Set prices for adult and children tickets\n    adult_price = 20\n    children_price = 15\n    total_price = 110\n    children_count = 0\n\n    # Assume there are at least 2 adults\n    for adults in range(2, total_price // adult_price + 1):\n        children = (total_price - adults * adult_price) // children_price\n        if adults * adult_price + children * children_price == total_price:\n            children_count = children\n            break\n\n    return children_count\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets / people\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):\n            original_number = j * 10 + 9  # Add 9 to the units column of j\n            new_number = int(str(9) + str(j))  # Place 9 at the beginning of j\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_volume_squash = 750\n    ratio_squash_to_water = 1/9\n    total_volume = total_volume_squash * (1 + ratio_squash_to_water)\n    \n    volume_per_bottle = 1000  # 1 litre = 1000 millilitres\n    max_bottles = total_volume // volume_per_bottle\n\n    return int(max_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    ans = (180 / (0.6 * 100))\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 1/2\n    \n    book_plus_bag = 132\n    \n    # Let's find out the cost of the book\n    book_cost = book_fraction * (book_fraction + bag_fraction * (1 - book_fraction))\n    \n    # Fix Thomas's mistake by calculating the fractions correctly\n    # Costs of the book is 1/3 of the total money originally had\n    # Costs of the bag is 1/2 of the remainder, i.e., 1/2 of 2/3 of the total money\n    # Total cost is this the sum of both fractions\n    total_fraction_spent = book_fraction + (bag_fraction * (1 - book_fraction))\n    \n    # Calculate 1 unit cost\n    one_unit = book_plus_bag / total_fraction_spent\n    \n    # The correct total amount of money she had at first\n    total_money = one_unit\n    \n    return total_money\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    mod_value = 100  # We're interested in the last 2 digits\n    \n    # Compute the contribution of 6^2015 to the last two digits\n    last_two_digits_pow = pow(6, 2015, mod_value)\n    \n    # Compute the contribution of 2015 * 6 to the last two digits\n    last_two_digits_mult = (2015 * 6) % mod_value\n    \n    # Compute the contribution of 2015^6 to the last two digits\n    last_two_digits_pow_2015 = pow(2015, 6, mod_value)\n    \n    # Combine the contributions to find the last two digits\n    last_two_digits_total = (last_two_digits_pow + last_two_digits_mult + last_two_digits_pow_2015) % mod_value\n    \n    return last_two_digits_total\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # As B=2 and D=0, we substitute these values into the equation\n    # The initial 5* must carry over, which means E must be >= 2 for 6* to be less than 60\n    # Also, F must be 1 because the multiplication by 5 to result in a number starting with 1\n    # so 1XXXX0 being multiplied by 6 should result in XXXX20 and vice versa.\n\n    for E in range(2, 10):\n        for F in range(1, 10):\n            for A in range(0, 10):\n                for C in range(0, 10):\n                    # We already know B=2 and D=0\n                    B, D = 2, 0\n\n                    # All digits must be distinct\n                    if len(set([A, B, C, D, E, F])) == 6:\n                        # Construct numbers from digits\n                        ABCDEF = int(f\"{A}{B}{C}{D}{E}{F}\")\n                        EFABCD = int(f\"{E}{F}{A}{B}{C}{D}\")\n\n                        # Check the equation 5*ABCDEF == 6*EFABCD\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            # If the equation holds, we found our number FACE\n                            return int(f\"{F}{A}{C}{E}\")\n\n# Call the function to get the answer\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since the factors are symmetric, the 8th factor must be the number itself.\n    # The middle two factors (the 6th and 7th factors) multiplied together\n    # must equal the number itself.\n    # Since the factors must be in increasing order and 1, 2, 4, 7, 8 are the first five\n    # the 6th factor must be greater than 8 but less than the number.\n    # Since we only have the 6th and 7th factors left to find, the only options that\n    # can be multiplied with the existing factors (specifically 8) to get a number\n    # are factors of 56 (since 7 * 8 = 56), excluding 1, 2, 4, 7, and 8.\n    # The only factor of 56 that is not in the list and can be pair with another\n    # factor to multiply to 56 is 14.\n    # So the 6th factor must be 14, and it turns out the 7th factor is 28\n    # 1 * 56 = 56\n    # 2 * 28 = 56\n    # 4 * 14 = 56\n    # 7 * 8 = 56\n    # So the number is 56, and it has 8 factors\n\n    number = 56  # the number with 1, 2, 4, 7, 8 as some of its factors\n    return number\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 0.10  # 10%\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n\n    # Initial conditions\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more cows and goats were added\n    equation2 = Eq(c + 240 * 0.20, (0.65 + 0.20) * (c + g + 240))\n\n    # The number of goats doubled\n    equation3 = Eq(2 * g, g + 240 * 0.80)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    cookies_sold_second_month = 1680 * (7 / 20) + 1680\n    decrease_in_kept_cookies = 1680 * (3 / 20)\n    total_cookies_per_box = cookies_sold_second_month + decrease_in_kept_cookies\n\n    return int(total_cookies_per_box)\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene's position from front assuming starting position is 1: 6\n    # Amy's position from back assuming starting position is 1: 8\n    \n    # Total number of children = Jolene's position from front + Amy's position from back - 1\n    # Subtract 1 because Amy is directly behind Jolene, so we should not count Jolene twice\n    total_children = 6 + 8 - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= height:\n            break\n        if jumps % 2 == 0:\n            current_height -= fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    # There are 5 sides in a regular pentagon\n    total_sides = 5\n    \n    # The length of each side of the pentagon is 432 meters\n    side_length = 432\n    \n    # Each sunflower is planted 4 meters apart\n    distance_apart = 4\n    \n    # Calculate the number of sunflowers that can be planted on one side, excluding the corner \n    # as the corners will be counted once for each adjacent side.\n    sunflowers_per_side = (side_length - distance_apart) // distance_apart\n\n    # Total sunflowers planted on the sides excluding the corners \n    # (each side shares its corner sunflowers with the adjacent side)\n    total_sunflowers_sides = sunflowers_per_side * total_sides\n    \n    # Adding the corner sunflowers, which are 5 as it's a pentagon \n    total_sunflowers = total_sunflowers_sides + total_sides\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_price_pence = 46\n    pounds_to_pence = 300\n\n    num_stamps = pounds_to_pence // stamp_price_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    people = 39\n    capacity = 7\n    trip_time = 2\n\n    # One round trip is to the other side and back, but the last trip doesn't need a return.\n    # So we subtract one trip time as there is no need to return the boat after the last group.\n    round_trip_time = (trip_time * 2)\n\n    # Calculate the number of full trips (where 7 people are ferried).\n    full_trips = people // capacity\n\n    # Check if there's a need for an additional trip for the remaining people (less than 7).\n    remaining_people = people % capacity\n    if remaining_people > 0:\n        total_time = (full_trips * round_trip_time) + trip_time\n    else:\n        total_time = ((full_trips - 1) * round_trip_time) + trip_time\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let t be the original time Ryan would take at 45 miles/hour\n    # Distance is the same in both scenarios, so:\n    # 45 * t = 30 * (t + 2)\n    \n    # Solving for t\n    t = (30 * 2) / (45 - 30)\n    \n    return t\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    \n    ans = factorial(100) // factorial(98)\n    \n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    sum_to_10 = sum(range(3, 11))  # sum from 3 to 10\n    sum_to_3 = sum(range(3, 7))    # sum from 6 to 3\n    ans = sum_to_10 + sum_to_10 - sum_to_3  # combine both sums (subtracting the repeated part)\n    return ans\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    from sympy import IntegerPartition\n\n    partitions = IntegerPartition()\n    count = sum(1 for _ in partitions.partitions(5))\n\n    return count\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for i in range(1995):\n        a, b = b, (a + b) % 3\n    return b\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = 4.219**2 / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students\n    # Let y be the total number of sweets\n\n    # According to the problem:\n    # y = 6x - 26 (if he gives 6 sweets per student, he'll be short of 26 sweets)\n    # y = 5x - 5 (if he gives 5 sweets per student, he'll be short of 5 sweets)\n\n    # Both equations are equal to y, so we can set them equal to each other:\n    # 6x - 26 = 5x - 5\n    # Solve for x:\n    x = 26 - 5  # Moving variables to one side and constants to the other side\n\n    # Substitute x back into either equation to find y:\n    y = 5 * x - 5  # Use the second equation for simplicity\n\n    return y\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # If the difference between each tree is 1 and there are 8 trees,\n    # the total number of fruits can be modeled as an arithmetic sequence.\n    # Let x be the number of fruits on the first tree, then the following\n    # trees will have x+1, x+2, x+3, ... , x+7 fruits.\n    # We know the sum of an arithmetic sequence can be calculated by the formula:\n    # (first_term + last_term) * number_of_terms / 2\n    # In this case, the sum is (x + (x+7)) * 8 / 2 = 225\n    # Simplifying the equation gives us 2x + 7 = 225 * 2 / 8\n    # Solving for x gives us:\n    x = (225 * 2 / 8 - 7) / 2\n    # To check if each term after x in the sequance is a whole positive number\n    # We should make sure x is a whole number\n    if not x.is_integer() or x < 0:\n        return \"No, it is not possible.\"\n    else:\n        # If x is valid, we return the number of fruits on each tree\n        fruits = [int(x + i) for i in range(8)]\n        return fruits\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n    \n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n    \n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n    \n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, son = symbols('leo son')\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(son + (leo - son), 70)\n\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age = 8\n    dad_age = 50\n    years_later = 0\n\n    while True:\n        if (dad_age + years_later) == 4 * (heidi_age + years_later):\n            break\n        years_later += 1\n\n    return years_later\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "from math import factorial\n\ndef solution():\n    def count_trailing_zeros(n):\n        zeros = 0\n        while n % 10 == 0:\n            zeros += 1\n            n //= 10\n        return zeros\n\n    number = factorial(60)\n    ans = count_trailing_zeros(number)\n    return ans\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # average of first three numbers\n    average_initial = 120\n\n    # total sum of first three numbers\n    total_initial = average_initial * 3\n\n    # new average after adding the fourth number\n    new_average = 150\n\n    # total sum after adding the fourth number\n    new_total = new_average * 4\n\n    # fourth number\n    fourth_number = new_total - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    result = 11 * 14 + 26\n    ans = result / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    r = symbols('r')\n    equation = Eq(216*r, r**2)\n    sol = solve(equation, r)\n    \n    for val in sol:\n        if val.is_real and val > 0:\n            return val\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3 / 13) * 52\n    return result\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    net_distance_per_day = 8 - 3\n    total_distance_before_last_day = net_distance_per_day * (9 - 1)\n    depth_of_well = total_distance_before_last_day + 8\n    return depth_of_well\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_rate = 15 / 100\n    discounted_price = original_price * (1 - discount_rate)\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    smallest_dividend = quotient * (remainder + 1) + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    both_languages = (french_teachers + japanese_teachers) - total_teachers\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "from math import factorial\n\ndef solution():\n    total_arrangements = factorial(6)\n    teddy_leftmost_arrangements = factorial(5)\n    \n    return total_arrangements - teddy_leftmost_arrangements\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    # Rachel's purchase: 3 bags of sweets + 5 cans of drink = £4.90\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n\n    # Rosie's purchase: 1 bag of sweets + 3 cans of drink = £2.70\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n\n    # The nth term of an arithmetic sequence is given by: a(n) = a(1) + (n - 1) * d\n    # We want to find n such that a(n) < 0, which is the condition for the first negative term\n    # So, we have: 50 + (n - 1) * (-4) < 0\n    # Solving the inequality for n gives us the term number before it goes negative\n    \n    # Let's rearrange the inequality to find n\n    # n - 1 > 50 / 4\n    n = (first_term / abs(common_difference)) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Since they are consecutive numbers and there are 7 of them, we know the middle number is the average.\n    # Let's first find out what the average is, by dividing the total sum by the number of terms.\n    average_number = 280 // 7  # Using floor division since they are whole numbers\n\n    # The largest term is 3 more than the average term (since the numbers are consecutive)\n    largest_number = average_number + 3\n\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for i in range(100, 1000):\n        for j in range(i, 1000):\n            if i != j and set(str(i)) & set(str(j)) and len(set(str(i))) < 3 and len(set(str(j))) < 3:\n                if i % 75 == 0 and j % 75 == 0:\n                    max_sum = max(max_sum, i+j)\n    return max_sum\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = sum((-1) ** (i + 1) * (20 - 2 * i) for i in range(10))\n    return total\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # There are 4 singing (S) performances and 3 dancing (D) performances.\n    # To ensure at least 1 S between every 2 D performances, we need to consider different arrangements.\n    # \n    # We can first arrange the singing performances as they have no restrictions:\n    # S _ S _ S _ S -> there are 4! (factorial) ways to arrange them, where each underscore represents a possible position for D.\n    # Now we need to position the D performances. Since we have to put at least one S between every 2 Ds, we can think of:\n    # - 3 Ds (D D D): We must select 3 positions from the available 5 (counting the leading, in-between, and trailing positions of Ss).\n    # The number of ways to select 3 positions from 5 is given by the combination formula: C(5,3) = 5! / (3! * (5-3)!)\n    # Thus, the total number of different arrangements is given by: n_arrangements = 4! * C(5,3)\n    \n    n_arrangements = factorial(4) * factorial(5) // (factorial(3) * factorial(5-3))\n    return n_arrangements\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # Calculate the sum using the formula for the sum of the squares of the first n natural numbers\n    # The given series is 8 * n^2, where n varies from 1 to 9.\n    n = 9\n    ans = 8 * (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    next_move_is_backward = False\n    \n    for throw in throws:\n        if next_move_is_backward:\n            position -= throw\n            next_move_is_backward = False\n        elif throw == 6:\n            next_move_is_backward = True\n        else:\n            position += throw\n    \n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    # Alex and Brayden had $756 altogether\n    equation1 = Eq(alex + brayden, 756)\n    # After Alex gave $65 to Brayden, Alex had three times as much money as Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial as fact\n\ndef solution():\n    # There will always be a magazine between two storybooks so we arrange magazines and then slots for storybooks\n    # Number of magazines: 5 (M1, M2, M3, M4, M5)\n    # Number of storybooks: 5 (S1, S2, S3, S4, S5)\n    # We treat each magazine as a separator for the storybooks, thus there are 6 places to insert storybooks: _ M _ M _ M _ M _ M _\n    # We have to place 5 storybooks in these 6 \"slots\"\n    # We use combination with repetition (stars and bars) formula: C(n+k-1, k) for n slots and k books\n    # n = 6 (slots), k = 5 (storybooks)\n\n    slots = 6  # slots to place the storybooks\n    storybooks = 5  # number of storybooks\n\n    # Calculate the combinations with repetition for the storybooks\n    comb_with_repetition = fact(slots + storybooks - 1) // (fact(slots - 1) * fact(storybooks))\n\n    # Now we multiply by the permutations of the magazines and the storybooks\n    # Since they are distinct, it is simply factorial of their counts\n    permutations_of_magazines = fact(5)  # 5!\n\n    ans = comb_with_repetition * permutations_of_magazines\n    return ans\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n\n    james_gives = (james - kate) / 2\n\n    return james_gives\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for total_gums in range(1, 1000):  # assuming a realistic upper bound\n        remaining_gums_after_music_lesson = total_gums - 2\n        shared_gums = remaining_gums_after_music_lesson // 3\n        if remaining_gums_after_music_lesson % 3 == 0:  # make sure it's divisible by 3\n            remaining_gums_after_break = remaining_gums_after_music_lesson - shared_gums\n            if remaining_gums_after_break % 4 == 0:  # make sure the remaining is divisible by 4\n                return total_gums\n    return None\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10\n    remaining_sum = 9 * 9\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    time_sec = 300  # time in seconds\n    \n    speed_m_per_sec = (speed_kmh * 1000) / (60 * 60)  # converting speed to meters per second\n    distance_m = speed_m_per_sec * time_sec  # distance in meters\n    \n    return distance_m\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    sum_of_cubes = sum(i**3 for i in range(1, 22, 2))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, blue = symbols('red green blue')\n    \n    equation1 = Eq(red + green + (blue - 112), 350)\n    equation2 = Eq(red, 2 * green)\n    equation3 = Eq((blue - 112) + 50, red)\n    \n    solutions = solve((equation1, equation2, equation3), (red, green, blue))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Original sum of money is shared among 4 people (3 brothers and 1 sister)\n    # If only the 3 brothers share the money, they each get an additional 20\n    total_sum, each_brother_share = symbols('total_sum each_brother_share')\n\n    # Equations based on the problem description\n    equation1 = Eq(each_brother_share - (total_sum/4), 20)\n    equation2 = Eq(each_brother_share, total_sum/3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (total_sum, each_brother_share))\n\n    return solutions[total_sum]\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    # Given 1/3 of the art books is equal to 4/5 of the science books\n    # Let's find the number of science books\n    science_books = (art_books / 3) * (5 / 4)\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n    \n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn/jared, 2/5)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    total_stickers = solutions[katelyn] + solutions[jared]\n\n    return total_stickers\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # first find the sum of the 4 numbers giving each average\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    \n    # the total sum of all 5 numbers is the sum of all these sums minus 4 times each of the averages (since each average is counted 4 times in total)\n    total_sum = sum(sums) - 4 * (36 + 38 + 39 + 45 + 49)\n    \n    # we find the largest individual sum which will have the largest number excluded\n    largest_sum_excluding_largest_number = max(sums)\n\n    # the largest number is the total sum minus the largest sum found above\n    largest_number = total_sum - largest_sum_excluding_largest_number\n    \n    return largest_number\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    principal = 10000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.10 ** 2\n\n    amount_after_three_years = principal * interest_first_three_years\n    final_amount = amount_after_three_years * interest_last_two_years\n\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(n, -2) for n in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # The least common multiple (LCM) of 16 and 24 gives us the minimum number of \n    # pieces we need to split the sausages into in order to equally share them \n    # among 24 people. Once we have the LCM, we subtract the original 16 sausages \n    # to find the number of cuts needed.\n    from math import lcm\n\n    # Find the least common multiple of the total number of sausages and people\n    min_pieces = lcm(16, 24)\n\n    # Subtract the original number of sausages to get the number of cuts\n    cuts = min_pieces - 16\n\n    return cuts\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    textbooks = [42, 63, 28]\n    greatest_common_divisor = gcd(gcd(textbooks[0], textbooks[1]), textbooks[2])\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    companies = 4\n    time = 5 # in days\n    expressway_length = 900 # in meters\n\n    work_rate = companies / time # companies per day for 900m\n\n    # For 2700 m with one company\n    # We first calculate the total work done for 900 m by 4 companies which is 4*5\n    # and since 2700 m is 3 times more than 900 m, we need to multiply the work done by 3\n    required_time_for_one_company = 3 * (companies * time) / 1\n\n    return required_time_for_one_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # St Petersburg is 3 hours ahead of Manchester\n    time_difference = timedelta(hours=3)\n\n    # The meeting time in St Petersburg\n    meeting_time_st_petersburg = datetime.strptime(\"12:00\", \"%H:%M\")\n\n    # Calculate the departure time in Manchester\n    departure_time_manchester = meeting_time_st_petersburg - time_difference\n\n    # Format the time to only display hours and minutes\n    departure_time_formatted = departure_time_manchester.strftime(\"%H:%M\")\n\n    return departure_time_formatted\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Define the relative speed (Weiling's speed minus Qiqi's speed)\n    relative_speed = 72 - 60 # m/min\n\n    # Weiling has to cover the head start of Qiqi in the 2 minutes Qiqi walked before Weiling started\n    qiqi_headstart = 60 * 2 # m\n\n    # Calculate the time difference between Qiqi and Weiling once Weiling starts walking\n    time_difference = 4 # Weiling arrives 4 minutes earlier\n\n    # Weiling catches up to Qiqi by traveling faster by 'relative_speed' and within 'time_difference + 2' minutes\n    catch_up_time = time_difference + 2 # time for Weiling to catch up, including the head start\n    \n    # Calculate the distance Weiling travels during the catch up time\n    catch_up_distance = catch_up_time * relative_speed #m\n\n    # The total distance is Weiling's catch up distance plus Qiqi's head start\n    distance = catch_up_distance + qiqi_headstart # m\n\n    return distance\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate at which Star types be S and the rate at which Nini types be N\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # If Star types for 5 hours and Nini types for 20 hours, they finish the job\n    # 5S + 20N = 1 job\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n\n    # If Star types for 20 hours and Nini types for 8 hours, they finish the job\n    # 20S + 8N = 1 job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # the amount of time it will take for Nini to finish the job by herself is the reciprocal of Nini's rate\n    nini_time = 1 / solutions[nini_rate]\n\n    return nini_time\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_pounds_conversion = 2.2\n    kg = 5\n    pounds = kg * kg_to_pounds_conversion\n    return pounds\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n    ben_height = jane_height - difference\n    return ben_height\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_quantity = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_quantity = (coffee_quantity * total_ratio) / coffee_ratio\n\n    return latte_quantity\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):  # Range from the smallest three-digit number to the largest three-digit number\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    total = 0\n    for i in range(2, 33, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front is:\n    ben_front = 6\n\n    # Frank's position from the end is:\n    frank_end = 9\n\n    # People between Ben and Frank are:\n    people_between = 10\n\n    # Ben's conclusion about total people in the queue:\n    ben_conclusion = 27\n\n    # Let's calculate the total people in the queue based on given conditions:\n    # We add Ben's position from the front, the people in between, Frank's position from the back\n    # Since Ben is 6th from the front, he is in the 6th position, so we do not count him twice:\n    total_people_calculated = (ben_front - 1) + people_between + (frank_end - 1) + 1\n\n    return total_people_calculated\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n\n    red_frac = 2 / 5\n    green_frac = 1 / 3\n    yellow = 96\n\n    # The sum of the fractional part of red and green marbles plus the yellow marbles equals the total number of marbles.\n    equation = Eq(red_frac * total_marbles + green_frac * total_marbles + yellow, total_marbles)\n\n    # Solve the equation for the total number of marbles\n    sol = solve(equation, total_marbles)\n    return sol[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663 ** 2) % 9\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    # Initialize the sum\n    sum_numbers = 0\n    \n    # Calculate the last 4 digits of the sum of the numbers\n    for i in range(1, 2016):\n        number = int('1' * i)\n        sum_numbers += number\n        sum_numbers %= 10000  # only keep the last four digits\n        \n    return sum_numbers\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 8 and (hundreds * 100 + tens * 10 + ones) % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1 / 20\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # In the worst scenario, you can pick up to 3 marbles without getting 2 of the same colour:\n    # first marble - blue, second marble - yellow, third marble - blue or yellow but different from the second one\n    # So to be sure to get 2 marbles of the same colour, you need to pick one more:\n    return 3 + 1  # The next marble you pick will have to be the same colour as one of the ones you've already picked\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initializing the sum of all ages to be returned.\n    sum_of_ages = 0\n\n    # The possible ages for children such that their age's product will cross 2020 next year but is less than 2019 this year.\n    for child1 in range(1, 100):\n        for child2 in range(child1 + 2, 100, 2):\n            child3 = child2 + 2\n            product_children = child1 * child2 * child3\n            if product_children < 2019 and (child1 + 1) * (child2 + 1) * (child3 + 1) > 2020:\n                # Found the ages of the children fulfilling the condition.\n                # Now finding John and Mary's age under same conditions.\n                for mary_age in range(1, 100):\n                    john_age = mary_age + 1\n                    product_parents = mary_age * john_age\n                    if product_parents < 2019 and (mary_age + 1) * (john_age + 1) > 2020:\n                        # If all conditions are satisfied, update the sum of ages.\n                        sum_of_ages = john_age + mary_age + child1 + child2 + child3\n                        return sum_of_ages\n    return sum_of_ages\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # The unit digit of a number raised to any power will cycle after a certain number of exponentiations.\n    # For 13, the cycle is [3, 9, 7, 1] and for 17, the cycle is [7, 9, 3, 1].\n    # Since 4^2 = 16 ends in 6 and any even power of 4 will thus end in 6, the unit digit of 4^2012 is 6.\n\n    # Find the position in the cycle for 13^242\n    cycle_position_13 = 242 % 4  # Because there are 4 elements in the cycle of 13's unit digits\n    if cycle_position_13 == 0:\n        unit_digit_13 = 1\n    elif cycle_position_13 == 1:\n        unit_digit_13 = 3\n    elif cycle_position_13 == 2:\n        unit_digit_13 = 9\n    elif cycle_position_13 == 3:\n        unit_digit_13 = 7\n\n    # Find the position in the cycle for 17^379\n    cycle_position_17 = 379 % 4  # Because there are 4 elements in the cycle of 17's unit digits\n    if cycle_position_17 == 0:\n        unit_digit_17 = 1\n    elif cycle_position_17 == 1:\n        unit_digit_17 = 7\n    elif cycle_position_17 == 2:\n        unit_digit_17 = 9\n    elif cycle_position_17 == 3:\n        unit_digit_17 = 3\n\n    # The unit digit of 4^2012 is 6\n    unit_digit_4_power = 6\n\n    # Now calculate the unit digit of the whole expression\n    unit_digit_expression = (unit_digit_13 + unit_digit_17 * unit_digit_4_power) % 10\n\n    return unit_digit_expression\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    term_number = 7\n\n    seventh_term = first_term + (term_number - 1) * common_difference\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let x be the original amount of money Mrs. Chen had\n    # Mrs. Chen spent 1 - 1/6 = 5/6 of her original money on plates and cups\n    # So we have the equation: x - 36 = 3/4 * (x - 36)\n    # Simplifying the equation will give us the value of x which is the original amount of money\n    \n    # Importing the sympy library for solving the equation\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Setting up the equation\n    # 1/6 of the original amount is equal to the money spent on plates plus 3/4 of the remaining money after buying plates\n    equation = Eq(x - (36 + (3/4) * (x - 36)), 1/6 * x)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = p\n        A = (100*a+10*b+c) + (100*b+10*c+d) + (100*c+10*d+e) + \\\n            (100*d+10*e+f) + (100*e+10*f+g) + (100*f+10*g+h) + \\\n            (100*g+10*h+i)\n        max_A = max(max_A, A)\n    return max_A\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert 1 hour to minutes\n    one_hour_in_minutes = 60\n    \n    # Convert 2 minutes and 30 seconds to minutes\n    travel_time_for_one_mile_in_minutes = 2 + 30 / 60.0\n    \n    # Calculate the number of miles in one hour\n    miles_in_one_hour = one_hour_in_minutes / travel_time_for_one_mile_in_minutes\n    \n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0\n    for num_digits in range(1, 12):  # Assuming 12 digits will be more than enough to reach 2012 numbers.\n        # Calculate the smallest and largest number with the given digit count and a leftmost digit of 8.\n        smallest = int('8' + '0' * (num_digits - 1))\n        largest = int('8' + '9' * (num_digits - 1))\n        \n        # The number of integers in this range with leftmost digit 8\n        range_count = largest - smallest + 1\n        \n        if count + range_count >= 2012:\n            # The desired integer is in this range\n            difference = 2012 - count - 1  # -1 to account for the number 8 itself\n            return smallest + difference\n        \n        count += range_count\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle term in the sequence be 'm'.\n    # Since there are five consecutive natural numbers, we have:\n    # m-2, m-1, m, m+1, m+2\n    # The sum of these five terms is the total number of balls which is 160.\n    # So, (m-2) + (m-1) + m + (m+1) + (m+2) = 160\n    # Simplifying it, we get 5m = 160\n    m = 160 // 5\n    \n    # The student with the most balls has m+2 balls.\n    return m + 2\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from itertools import combinations\n\ndef solution():\n    # Envelopes that must be placed as per the conditions\n    mandatory_envelopes = 2 + 4 + 3  # A + B + C\n    # Remaining envelopes after placing the mandatory ones\n    remaining_envelopes = 15 - mandatory_envelopes\n    \n    # List to store the number of envelopes in each mailbox after placing the mandatory ones\n    ways_to_place = []\n    \n    # Iterate through all possible combinations of placing the remaining envelopes in mailboxes A, B, C, and D\n    for xA in range(0, remaining_envelopes + 1):\n        for xB in range(0, remaining_envelopes - xA + 1):\n            for xC in range(0, remaining_envelopes - xA - xB + 1):\n                xD = remaining_envelopes - xA - xB - xC\n                # Make sure that we do not add below the minimum required for each box\n                # Since box D doesn't have a minimum requirement, we do not check for it\n                if xA + 2 >= 2 and xB + 4 >= 4 and xC + 3 >= 3:\n                    # If the condition is satisfied, add the combination to the list\n                    ways_to_place.append((xA, xB, xC, xD))\n    \n    # The count of different ways is the length of the ways_to_place list\n    count_of_ways = len(ways_to_place)\n    \n    return count_of_ways\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n    ans = (percentage / 100) * total\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum([i**2 for i in range(2, 21, 2)])\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Taxes for the first $20000 at 15%\n    initial_tax_rate = 0.15\n    initial_income_limit = 20000\n    initial_taxed_amount = initial_income_limit * initial_tax_rate\n\n    # Additional tax to reach $7000\n    extra_tax_needed = 7000 - initial_taxed_amount\n\n    # Tax rate for income over $20000\n    additional_tax_rate = 0.20\n\n    # Income over $20000\n    additional_income = extra_tax_needed / additional_tax_rate\n\n    # Total income\n    total_income = initial_income_limit + additional_income\n\n    return total_income\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2*(x + 3), 1)\n\n    return solve(equation, x)[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 / 10\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # The reciprocal of 13 is a recurring decimal, so we need to find the pattern.\n    # The maximum length of the recurring cycle for 1/13 is 12, as it is for any 1/n where n is prime\n    # Let's find the recurring cycle first\n    cycle = ''\n    remainder = 1\n    remainders = set()\n    \n    while True:\n        remainder *= 10\n        digit = remainder // 13\n        remainder = remainder % 13\n        \n        if remainder in remainders:\n            # The cycle is complete\n            break\n        else:\n            cycle += str(digit)\n            remainders.add(remainder)\n    \n    # Now that we have the cycle, we find the position of the 2022nd digit in the cycle\n    position = (2022 % len(cycle)) - 1\n    ans = int(cycle[position])\n    \n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "from math import gcd\n\ndef solution():\n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    gcd12 = gcd(length1, length2)\n    gcd123 = gcd(gcd12, length3)\n    \n    return gcd123\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    # Let's assume all animals are chickens, which have 2 legs each\n    all_chickens = total_animals * 2\n    # The excess legs are therefore those belonging to the rabbits, since they have 4 legs\n    excess_legs = total_legs - all_chickens\n    # Every rabbit contributes 2 more legs than a chicken would, so the excess legs divided by 2 gives us the number of rabbits\n    rabbits = excess_legs // 2\n    # We have 40 animals in total, so we subtract the number of rabbits from the total to get the number of chickens\n    chickens = total_animals - rabbits\n    return chickens\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of chips A and B have after A sold 290 chips.\n    A, B = symbols('A B')\n\n    # Equation representing that after A sells 290 chips, B has 3 times as many as A.\n    equation = Eq(B, 3 * (A - 290))\n\n    # Since A and B had an equal number of packs initially, we substitute B with A in the equation.\n    # Hence both sides of the equation represent the initial number of packs in each store.\n    solved_A = solve(equation.subs(B, A), A)\n    \n    # Get the solution for A which represents the initial number of packs in A and also in B.\n    initial_A = solved_A[0]\n    \n    # Return the combined initial number of packs of potato chips.\n    initial_total = initial_A * 2\n\n    return initial_total\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed_lunch = 4\n    girls_school_lunch = 7\n    students_home_lunch = 5\n    boys_home_lunch = 3\n\n    girls = total_students - boys\n    girls_home_lunch = students_home_lunch - boys_home_lunch\n    girls_packed_lunch = girls - girls_school_lunch - girls_home_lunch\n\n    boys_school_lunch = boys - boys_packed_lunch - boys_home_lunch\n    packed_lunch = boys_packed_lunch + girls_packed_lunch\n\n    return packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate_cost = 20 * 6\n    total_milk_chocolate_cost = 20 * 5\n    total_strawberry_chocolate_cost = 20 * 4\n    total_cost = total_dark_chocolate_cost + total_milk_chocolate_cost + total_strawberry_chocolate_cost\n    total_chocolates = 20 + 20 + 20\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    # The rate of production per day\n    rate_per_day = 720 / 5\n    \n    # Total days needed to complete the order\n    total_days = 3600 / rate_per_day\n    \n    return total_days\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    num = 36\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 12 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    solution_x = solve(equation, x)\n    return solution_x[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of train in meters per second\n    time = 19   # time in seconds to pass a tree\n    length_of_train = speed * time  # length = speed * time\n    return length_of_train\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    man_time = 15\n    couple_time = 12\n\n    man_rate = 1 / man_time\n    couple_rate = 1 / couple_time\n\n    wife_rate = couple_rate - man_rate\n    wife_time = 1 / wife_rate\n\n    return wife_time\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return result\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_fruits = 18 + 30\n    friends = 6\n\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    books_required = 5\n    offer_books_required = 3\n    free_books_per_offer = 1\n\n    full_price_books = books_required // (offer_books_required + free_books_per_offer) * offer_books_required\n    remaining_books_without_offer = books_required % (offer_books_required + free_books_per_offer)\n\n    total_payment = (full_price_books + remaining_books_without_offer) * price_per_book\n\n    return total_payment\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    # Let's denote the total number of people at the exhibition as t.\n    # According to the problem, 2/5 of the people were women. Therefore, the number of women is 2/5 * t.\n    # Let's denote the number of children as c. \n    # Then, the number of men is 3 times the number of children, which is 3 * c.\n    # Also given is that there were 190 more women than children, so the number of women is c + 190.\n    # We can now set up two equations:\n    # (1) 2/5 * t = c + 190     (The number of women)\n    # (2) 3 * c + c + 190 = t   (The total number of people)\n    # Now we can solve the system of equations for t.\n    # Equation (2) can be rewritten as:\n    # 4 * c + 190 = t \n    # Substitute the expression for women from equation (1) into equation (2):\n    # 4 * ((2/5 * t) - 190) + 190 = t\n    # 8/5 * t - 760 + 190 = t\n    # 8/5 * t - t = 570\n    # (8/5 - 5/5) * t = 570\n    # 3/5 * t = 570\n    # t = 570 * (5/3)\n    # t = 950\n    \n    t = 570 * (5/3)\n    return int(t)\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(2 * x + 6, 3 * x - 3)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    # Let b represent the number of boys\n    # Let g represent the number of girls\n    # We have b + g = 40 (total number of pupils)\n    # The total number of pencils is 35 * 40\n    # Boys have 20 * b pencils and girls have 60 * (40 - b)\n    # The equation for the average is: (20 * b + 60 * (40 - b)) / 40 = 35\n\n    # We will solve the equation for b\n    b = symbols('b')\n    equation = Eq((20 * b + 60 * (40 - b)) / 40, 35)\n\n    solution_b = solve(equation, b)\n\n    return solution_b[0]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154\n    mount_fuji_tip = 3776\n    distance = mount_fuji_tip - turpan_depression_base\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) % 4\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    last_two_digits = sum(int('1' * i) for i in range(1, 51)) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding = 36\n    math = 21\n    both = 20\n\n    total_students = coding + math - both\n\n    return total_students\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # We represent the true result as 'true_result', and the divisor as 'divisor'.\n    # Since the divisor is mistakenly taken as 211 instead of 2.11,\n    # the false result will be (true_result * divisor) = (true_result * 211).\n    \n    # We also know that the false result is 98.01 less than the true result,\n    # which can be represented by the equation:\n    # true_result - 98.01 = true_result * (211/2.11)\n    \n    # Now we solve for the true_result:\n    true_result = symbols('true_result')\n    equation = Eq(true_result - 98.01, true_result * (211/2.11))\n    \n    solution = solve(equation, true_result)[0]\n    \n    return solution\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one apple and one banana\n    cost_apple, cost_banana = symbols('cost_apple cost_banana')\n\n    # Set up the equations based on the provided information\n    equation1 = Eq(6 * cost_apple + 7 * cost_banana, 8 * cost_apple + 4 * cost_banana)\n\n    # Use sympy to solve for the cost of an apple\n    apple_cost = solve(equation1, cost_apple)\n\n    # Substitute the cost of the apple to find the cost of a banana\n    cost_banana_eq = equation1.subs(cost_apple, apple_cost[0])\n    banana_cost = solve(cost_banana_eq, cost_banana)\n\n    # Calculate the number of bananas that can be bought without any change\n    equation2 = Eq(banana_cost[0] * cost_banana, 6 * apple_cost[0] + 7 * cost_banana)\n    num_bananas = solve(equation2, cost_banana)\n\n    return num_bananas[0]\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    # Total number of envelopes\n    total_envelopes = 15\n    # Minimum number of envelopes for each box\n    min_a, min_b, min_c = 2, 4, 3\n\n    # Remaining envelopes after putting the minimum required envelopes in each box\n    remaining = total_envelopes - (min_a + min_b + min_c)\n\n    # We add an additional box D with no minimum requirement\n    boxes = [min_a, min_b, min_c]\n\n    # Count the number of ways we can distribute the remaining envelopes\n    # among the boxes including the minimum number already in them\n    ways = 0\n    for combination in combinations_with_replacement(range(4), remaining):\n        # Create a list with the initial contents of the boxes\n        distribution = boxes.copy()\n        for box_index in combination:\n            # Distribute each of the remaining envelopes in one of the boxes\n            distribution[box_index] += 1\n        ways += 1\n    \n    return ways\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    \n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of male and female visitors.\n    males_first, females_first = symbols('males_first females_first')\n\n    # Create equations based on the problem statement:\n    # On the first day, the number of male visitors was 450 more than the number of female visitors.\n    equation1 = Eq(males_first, females_first + 450)\n\n    # On the second day:\n    # The number of female visitors increased by 15%\n    females_second = females_first * 1.15\n    # The number of male visitors decreased by 18%\n    males_second = males_first * 0.82\n\n    # The total number of visitors for the second day was 1354.\n    equation2 = Eq(females_second + males_second, 1354)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (males_first, females_first))\n\n    # Extract the number of male visitors on the first day.\n    male_visitors_first_day = solutions[males_first]\n\n    return male_visitors_first_day\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_half = (remaining_eggs + 4) * 2\n    total_after_first_sale = sold_second_half + (sold_second_half // 2 + 5)\n    initial_eggs = total_after_first_sale\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of money John (J) and Choon Mui (CM) initially had\n    J, CM = symbols('J CM')\n    \n    # Given that John and Choon Mui had the same amount of money initially\n    equation1 = Eq(J, CM)\n    \n    # After spending, John's amount is 4 times Choon Mui's\n    equation2 = Eq(J - 30, 4 * (CM - 150))\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (J, CM))\n    \n    # The amount of money John had left is J - 30\n    john_left = solutions[J] - 30\n\n    return john_left\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10/100\n\n    increased_amount = original_amount * (1 + percentage_increase)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8\n    scale_ratio = 1/20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100  # convert meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    mph_to_kph = 1.60934  # Conversion factor from miles per hour to kilometers per hour\n    speed_limit_mph = 65  # Speed limit in miles per hour\n    time_minutes = 15  # Time spent driving in minutes\n\n    # Convert time to hours\n    time_hours = time_minutes / 60\n\n    # Convert speed to kilometers per hour\n    speed_limit_kph = speed_limit_mph * mph_to_kph\n\n    # Calculate the distance traveled in kilometers\n    distance_km = speed_limit_kph * time_hours\n\n    return distance_km\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n    \n    # This problem is known as derangement or permutation where no element\n    # appears in its original position (subfactorial or !n).\n    # The formula for derangement is !n = n! * sum((-1)^k / k!, k from 0 to n)\n\n    n = 4\n    total_ways = 0\n\n    for k in range(n + 1):\n        total_ways += ((-1) ** k) / factorial(k)\n\n    total_ways *= factorial(n)\n\n    return int(total_ways)\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    count = len(ways)\n    return count\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    distance_covered = 0\n    day = 0\n\n    while distance_covered < total_distance:\n        day += 1\n        distance_covered += climb_per_day\n\n        # Check if snail climbs out during the day\n        if distance_covered >= total_distance:\n            break\n\n        distance_covered -= slide_per_night\n\n    return day\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    initial_amount = 12000\n    interest_rate = 0.10\n    years = 2\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (2, 13)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += 7 * 13\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_earnings = hourly_rate * 8 * 5  # 5 working days in a week\n    remaining_debt = 700 - weekly_earnings\n    return remaining_debt\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    # Create the equations based on the puzzle\n    eq1 = Eq(1 * A + A, 0)\n    eq2 = Eq(11 * A + A, 0)\n    # Solve the system of equations\n    ans = solve((eq1, eq2), (A))\n\n    return ans[A]\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through the numbers from 100 to 999\n        str_i = str(i)\n        if str_i.count('0') == 1:   # Check if there's exactly one '0' in the string\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "def solution():\n    import numpy as np\n    # Days in 2 weeks for Arjun's haircut\n    arjun_period = 2 * 7\n    # Days in 10 days for Yahya's haircut\n    yahya_period = 10\n    # Calculate the least common multiple to find the next occurrence\n    lcm = np.lcm(arjun_period, yahya_period)\n    return lcm\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # calculate time for each section of the race\n    time1 = 280 / 7  # time to cover first 280 meters at 7 m/s\n    time2 = 400 / 5  # time to cover middle 400 meters at 5 m/s\n    time3 = (800 - 280 - 400) / 8  # time to cover last section at 8 m/s\n\n    # total time is sum of times for all sections\n    total_time = time1 + time2 + time3\n    return total_time\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    possible_numbers = []\n    # Divisibility rule for 5: last digit must be 0 or 5\n    for last_digit in [0, 5]:\n        for second_digit in range(10):\n            number = int(f\"2{second_digit}9{last_digit}\")\n            # Divisibility rule for 3: sum of digits must be divisible by 3\n            if (2 + second_digit + 9 + last_digit) % 3 == 0:\n                possible_numbers.append(number)\n    ans = sum(possible_numbers)\n    return ans\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n    num_trees = (highway_length // distance_apart) - 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_initial = 34 + 2 - 11 + 14\n    return stamps_initial\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1\n    sum_of_series = (number_of_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5 / 7) * 112\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, and C as one unit since they must always be next to one another. \n    # This creates 8 units (the ABC group + 7 individual students).\n    units = 8\n    \n    # There are 3! ways to arrange A, B, and C within their own group.\n    abc_permutations = factorial(3)\n    \n    # There are 8! ways to arrange the 8 units.\n    unit_permutations = factorial(units)\n    \n    # The total number of ways A, B, and C can be next to each other in the line.\n    total_permutations = abc_permutations * unit_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # Generate the original number as a string\n    original_number = ''.join(str(i) for i in range(1, 31))\n    \n    # Initialize the smallest number to the whole original number\n    smallest_number = original_number\n    \n    # Considering that removing 46 characters will definitely involve removing all characters in \"1234567891011121314151617181920\" (20 characters)\n    # Focus on removing an additional 26 characters from \"21222324252627282930\" (30 characters)\n    # We need to keep the smallest digits possible (which are '1' and '2') and remove bigger digits\n    part_to_modify = \"21222324252627282930\"\n    \n    # Create combinations of 26 characters to remove from the part_to_modify\n    for i in range(26):\n        # Remove the largest digits first, starting from the end (descending order), which gives us the smallest number\n        modified_part = part_to_modify[:len(part_to_modify) - (i + 1)]\n        \n        # Construct the potential smallest number by combining the elements before part_to_modify and the modified part\n        potential_smallest = original_number[:len(original_number) - len(part_to_modify)] + modified_part\n        \n        # Update the smallest number if potential smallest number is smaller\n        if int(potential_smallest) < int(smallest_number):\n            smallest_number = potential_smallest\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee a white ball, you could theoretically take out all blue balls first.\n    num_blue_balls = 6\n\n    # So after taking out all blue balls, you have to take one more to guarantee a white one.\n    ans = num_blue_balls + 1\n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_pick = 4\n    ans = comb(total_students, students_to_pick)\n    return ans\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james * (1/2)\n    ben = linda * (1/4)\n\n    return james + linda + ben\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_value\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # There are three short rulers, each 20 cm in length.\n    length_each_ruler = 20\n\n    # The overlapping part between two short rulers is 3 cm.\n    overlap_each = 3\n\n    # The total length of the bundle will be the sum of three rulers' lengths\n    # minus the two overlaps (since there are three rulers, making two overlapping points).\n    total_length = (length_each_ruler * 3) - (overlap_each * 2)\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate the distance traveled while jogging\n    jogging_time = 1 # from 6:30 am to 7:30 am is 1 hour\n    jogging_speed = 6 # miles per hour\n    jogging_distance = jogging_time * jogging_speed\n\n    # Calculate the distance traveled while walking\n    walking_time = 2 # from 7:30 am to 9:30 am is 2 hours\n    walking_speed = 5 # miles per hour\n    walking_distance = walking_time * walking_speed\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    total_new_cups = 0\n    \n    while used_cups >= 7:\n        new_cups = used_cups // 7\n        total_new_cups += new_cups\n        used_cups = used_cups % 7 + new_cups\n\n    return total_new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000 - 222\n    return number\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note_value = 50\n    real_cost_of_shoes = 30\n    # Lucas loses the shoes worth of 30 and has to return the 50 from the fake note.\n    loss = real_cost_of_shoes + fake_note_value\n    return loss\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 2300  # The length of the plot in centimeters\n    distance_apart_cm = 15  # The distance between each cauliflower in centimeters\n    first_cauliflower_offset_cm = 20  # The distance from start to the first cauliflower in centimeters\n    cauliflower_width_cm = 45  # The width of a cauliflower in centimeters\n\n    effective_plot_length = plot_length_cm - first_cauliflower_offset_cm - cauliflower_width_cm\n    number_of_cauliflowers = effective_plot_length // (distance_apart_cm + cauliflower_width_cm)\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    # Calculate the total number of pages used over the 6 days\n    total_pages = (14 * 3) + (9 * 2) + 12\n    # Calculate the number of days\n    number_of_days = 6\n    # Calculate the average pages used per day\n    average_pages = total_pages / number_of_days\n    \n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    A = 8\n    B = 12\n    C = 20\n\n    g = gcd(A, gcd(B, C))\n\n    return g\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2 # speed of sound in meters per second\n    distance = 1.5 * 10**3 # distance in meters\n    time = distance / speed_of_sound # time in seconds\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    return number1 - number2\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    badminton_before, bowling_before = symbols('badminton_before bowling_before', positive=True)\n\n    # Equation representing initial relationship between the clubs\n    equation1 = Eq(badminton_before, 3 * bowling_before)\n\n    # Equation after 36 members leave Badminton and 4 leave Bowling and the counts become equal\n    equation2 = Eq(badminton_before - 36, bowling_before - 4)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (badminton_before, bowling_before))\n\n    # Number of members each club had after the members left\n    badminton_after = solutions[badminton_before] - 36\n    bowling_after = solutions[bowling_before] - 4\n\n    # Both clubs have the same number of members in the end\n    ans = badminton_after\n\n    return ans\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average_value = 126\n    difference = 6\n    \n    # The number of cards is total_value / average_value\n    num_cards = total_value // average_value\n    \n    # Since the difference between largest and smallest number is 6, \n    # and all numbers are different odd numbers, \n    # they must be consecutive odd numbers.\n    # Therefore, the smallest number is average_value - number of steps to the smallest number\n    # The steps is (num_cards - 1) / 2 because we have num_cards numbers in total,\n    # and the average is exactly in the middle.\n    smallest_number = average_value - (num_cards - 1) * difference // 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    n = 999\n    count_2 = 0\n    count_5 = 0\n    \n    for i in range(301, n + 1):\n        while i % 2 == 0:\n            count_2 += 1\n            i //= 2\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n            \n    return min(count_2, count_5)\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_fraction = sum(1/denominator for denominator in range(10, 20))\n    integer_part = int(sum_fraction)\n    return integer_part\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 1\n    return int(x)\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Total number of pupils\n    total_pupils = 1690\n\n    # There are 90 more boys than girls\n    eq1 = Eq(b, g + 90)\n\n    # The ratio of the number of girls who can swim (g_swim) to the number of girls who cannot swim (g_not_swim) is 31:49\n    g_swim = 31 / (31 + 49) * g\n    g_not_swim = 49 / (31 + 49) * g\n\n    # The number of boys who can swim (b_swim) is 120 less than the number of boys who cannot swim (b_not_swim)\n    b_swim = symbols('b_swim')\n    eq2 = Eq(b_swim, b - b_swim - 120)\n\n    # Equation based on the total number of pupils\n    eq3 = Eq(g + b, total_pupils)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (b, g, b_swim))\n\n    # Calculate the number of pupils who cannot swim\n    g_not_swim_value = 49 / (31 + 49) * solutions[g]\n    b_not_swim_value = solutions[b_swim] + 120\n\n    # Total number of pupils who cannot swim\n    pupils_not_swim = g_not_swim_value + b_not_swim_value\n\n    return int(pupils_not_swim)\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):   # Loop through two-digit numbers\n        if i % 6 == 0 and (i-1) % 13 == 0: # Check if the number is a multiple of 6 and one more than a multiple of 13\n            return i\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds of the rabbit and the turtle\n    speed_rabbit = 330  # in meters per minute\n    speed_turtle = 30   # in meters per minute\n\n    # The time rabbit runs before sleeping and turtle's distance in that time\n    time_before_sleep = 10  # in minutes\n    distance_turtle_before_sleep = speed_turtle * time_before_sleep\n\n    # Total distance the rabbit travels before it stops to sleep\n    distance_rabbit_before_sleep = speed_rabbit * time_before_sleep\n\n    # Time the rabbit sleeps\n    sleep_time = 215  # in minutes\n\n    # Distance the turtle travels while the rabbit sleeps\n    distance_turtle_during_sleep = speed_turtle * (time_before_sleep + sleep_time)\n\n    # Two cases can happen:\n    # 1. The turtle finishes the race while the rabbit is sleeping.\n    # 2. The rabbit wakes up and finishes the race before the turtle.\n\n    # Total distance the turtle travels when the rabbit wakes up\n    total_distance_turtle_when_rabbit_wakes = distance_turtle_before_sleep + distance_turtle_during_sleep\n\n    # Remaining distance for the rabbit to finish the race after waking up\n    remaining_distance_rabbit = 6990 - distance_rabbit_before_sleep\n\n    # How long it takes for the rabbit to finish the race after waking up\n    remaining_time_rabbit = remaining_distance_rabbit / speed_rabbit\n\n    # Distance the turtle travels during the rabbit's remaining time\n    distance_turtle_during_remaining_time = speed_turtle * remaining_time_rabbit\n\n    # Total distance turtle travels until the rabbit finishes the race\n    total_distance_turtle_when_rabbit_finishes = total_distance_turtle_when_rabbit_wakes + distance_turtle_during_remaining_time\n\n    # Checking who finishes first and calculating the distance between them at the end\n    if total_distance_turtle_when_rabbit_wakes >= 6990:\n        winner = \"turtle\"\n        distance_between = total_distance_turtle_when_rabbit_wakes - 6990\n    else:\n        winner = \"rabbit\"\n        distance_between = 6990 - total_distance_turtle_when_rabbit_finishes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    # Bolt has run 1656 metres more than Boris\n    equation1 = Eq(bolt, boris + 1656)\n    # Bolt has run 280 metres more than 5 times Boris's distance\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    # Total distance they have run is the sum of both their distances\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    # Using the inclusion-exclusion principle\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "from math import factorial\n\ndef solution():\n    total_people = 7\n    group_people = 3\n\n    # Total permutations without restrictions\n    total_permutations = factorial(total_people)\n\n    # Permutations of the group that don't want to stand next to each other\n    group_permutations = factorial(group_people)\n\n    # Positions to place the group as a single unit among the rest\n    positions_for_group = total_people - group_people + 1\n\n    # Permutations for the rest of the people\n    rest_permutations = factorial(total_people - group_people)\n\n    # Final permutations where the group of three are not next to each other\n    non_adjacent_permutations = total_permutations - positions_for_group * group_permutations * rest_permutations\n\n    return non_adjacent_permutations\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    \n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # nth term of arithmetic sequence formula: a_n = a_1 + (n - 1)d\n    last_term = first_term + (num_rows - 1) * common_difference\n    \n    # Sum of arithmetic sequence formula: S_n = n/2 * (a_1 + a_n)\n    total_athletes = num_rows / 2 * (first_term + last_term)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 1.10 # 10% increase is the same as multiplying by 1.10\n    \n    # Since the pocket money went up by 10% each year, we can reverse this process by dividing\n    # by 1.10 for each year from 2020 to 2018 to find the original amount.\n    original_amount = final_amount / (increase_rate**3) # for 3 years\n\n    return original_amount\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n\n    ans = min(count_factors(789, 2), count_factors(789, 5))\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    total_A = 76 * 20\n    combined_average = 70\n    total_teams_combined = total_A + (combined_average * 20)  # Both teams combined should be 40 * 70 = 2800\n    excess_A = total_A - (20 * combined_average)  # Calculating how much extra score team A has\n    students_B = excess_A / (combined_average - 67)  # Calculate students in team B\n\n    return int(students_B)\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    total_participants = 100\n    min_participants_in_max_school = 4\n\n    max_schools_attended = (total_participants - 1) // min_participants_in_max_school + 1\n\n    return max_schools_attended\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):    # loops through each hour of the day\n        for minute in range(60):  # loops through each minute of the hour\n            if str(hour).count('4') + str(minute).count('4') >= 2:  # checks if there are at least two '4's\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 3)\n    min_product = float('inf')\n    for perm1 in perms:\n        remaining_digits = [d for d in digits if d not in perm1]\n        remaining_perms = permutations(remaining_digits, 3)\n        for perm2 in remaining_perms:\n            num1 = int(''.join(map(str, perm1)))\n            num2 = int(''.join(map(str, perm2)))\n            product = num1 * num2\n            if product < min_product:\n                min_product = product\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    possible_permutations = list(permutations(range(1, 10), 7))\n    products = []\n    \n    for perm in possible_permutations:\n        ABCD = perm[0] * 1000 + perm[1] * 100 + perm[2] * 10 + perm[3]\n        EFG = perm[4] * 100 + perm[5] * 10 + perm[6]\n        if ABCD + EFG == 1993:\n            products.append(ABCD * EFG)\n    \n    largest_product = max(products)\n    smallest_product = min(products)\n    difference = largest_product - smallest_product\n    return difference\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_roll = 6\n    target_position = 25\n    # The fastest way would be to roll the maximum each time\n    min_rolls = (target_position - 1) // max_roll + 1\n    return min_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    common_difference = -50\n    # We can find the number of terms using the formula: n = (last_term - first_term) / common_difference + 1\n    # However, first we need to find the last term which is 19 in this case. Let's not calculate the number of terms explicitly.\n    \n    n = (19 - first_term) // common_difference + 1\n    # We use the arithmetic series sum formula: sum = n/2 * (first_term + last_term)\n    last_term = first_term + (n - 1) * common_difference\n    sum_series = n * (first_term + last_term) // 2\n    \n    return sum_series\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    smallest_number = 10 * (15 - 1) + 1\n    return smallest_number\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    return 43 - 5.2 + 1.03\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    return 0.45 + 1.02 + 3.003\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    climb_rate = 40\n    slip_rate = 10\n    hole_depth = 220\n    net_climb = climb_rate - slip_rate\n    hours = 0\n    distance_climbed = 0\n\n    while distance_climbed < hole_depth:\n        hours += 1\n        distance_climbed += climb_rate\n        if distance_climbed >= hole_depth:\n            break\n        distance_climbed -= slip_rate\n        \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    # Start from 29 and go downwards till we find a prime\n    for num in range(29, -1, -1):\n        if isprime(num):\n            return num\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    sick_typists = 2\n    effective_typists = original_typists - sick_typists\n    original_words = 6000\n    original_minutes = 20\n    target_words = 9000\n\n    words_per_minute_per_typist = original_words / (original_typists * original_minutes)\n    estimated_time = target_words / (words_per_minute_per_typist * effective_typists)\n\n    return estimated_time\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    total_cost = 8 * 0.96  # Total cost for 8 cabbages\n    price_per_lettuce = total_cost / 6  # Price per lettuce when buying 6 with the same amount\n\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    amount_spent = 97\n\n    amount_saved = total_money - amount_spent\n\n    return amount_saved\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    initial_plants = 11\n    distance_between_first_and_last = 30\n    remaining_plants = 3\n    intervals = distance_between_first_and_last / (initial_plants - 1)\n    new_distance_between_first_and_last = (initial_plants - 1) * intervals\n    new_intervals = new_distance_between_first_and_last / (remaining_plants - 1)\n\n    return new_intervals\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert 13:52 to minutes past midnight\n    end_time = (14 * 60) + 5     # Convert 14:05 to minutes past midnight\n\n    duration_in_minutes = end_time - start_time\n\n    cost_per_minute = 14  # pence\n\n    total_cost = duration_in_minutes * cost_per_minute\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    n = 20\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 320 * 0.4\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # There are three digits to fill and we need to count how many different\n    # combinations of the digits 2 and 3 we can have\n    \n    # If we have only the digits 2 and 3, at least one of each must occur, we \n    # can have the following possible patterns for three-digit numbers:\n    \n    # 223, 232, 322, 233, 323, 332\n    \n    # Each pattern has all digits 2 and 3 and at least one occurrence of each, also\n    # they are the only combinations possible to ensure at least one 2 and one 3 are included.\n    # Since the above patterns are all the combinations possible, we just count them.\n    \n    count = 6 \n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # 17th October 2023\n    end_date = datetime(2023, 12, 20)    # 20th December 2023\n    current_date = start_date\n\n    # Counter for number of Sundays\n    sunday_count = 0\n\n    # Get the day of the week for the start_date, where Monday is 0 and Sunday is 6\n    start_day_of_week = start_date.weekday()\n\n    # If start_date is not a Sunday, move to the closest next Sunday\n    if start_day_of_week != 6:\n        days_until_next_sunday = (6 - start_day_of_week)\n        current_date += timedelta(days=days_until_next_sunday)\n\n    # Iterate from the current_date (which is a Sunday) to the end_date\n    while current_date <= end_date:\n        sunday_count += 1\n        current_date += timedelta(days=7)  # Move one week ahead\n\n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_pay = pen_price + ruler_price\n\n    return total_pay\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple_tarts, strawberry_tarts = symbols('apple_tarts strawberry_tarts')\n    price_difference = 0.40\n    total_cost = 40\n\n    # Equation representing the cost of tarts\n    equation1 = Eq(apple_tarts, 2 * strawberry_tarts)\n    equation2 = Eq((apple_tarts + strawberry_tarts * (1 + price_difference)), total_cost)\n\n    solutions = solve((equation1, equation2), (apple_tarts, strawberry_tarts))\n\n    return int(sum(solutions.values()))\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import gcd\n    from fractions import Fraction\n\n    # Convert minutes to seconds\n    time_green_all = 9 * 60  # Both lights are green at the same time every 9 minutes\n\n    # First traffic light changes every 30 seconds\n    time_first_light = 30  # First light\n\n    # Second traffic light changes every 45 seconds (0.75 minutes)\n    time_second_light = 45  # Second light\n\n    # Calculate Least Common Multiple (LCM) for the first two traffic lights\n    lcm_first_second = (time_first_light * time_second_light) // gcd(time_first_light, time_second_light)\n\n    # Find the factors of the LCM of the first two lights that are at least 30 seconds or longer\n    factors = []\n    for i in range(30, lcm_first_second + 1):\n        if lcm_first_second % i == 0:\n            factors.append(i)\n\n    # Now verify which of these factors also divides the 9*60 seconds interval\n    for factor in factors:\n        if time_green_all % factor == 0:\n            return factor  # Shortest possible time for the third light\n\n    return None  # No valid time found\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # Pip, Bud, and 3 friends make 5 people in total\n    # There are 5 skiboards and each person picks one, so this is a permutation problem\n    num_people = 5\n    num_skiboards = 5\n\n    # The number of ways to arrange 'n' unique items is n!\n    ans = factorial(num_skiboards)\n\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position_from_right = 17\n\n    children_before_henry = henry_position - 1\n    children_after_tony = total_children - tony_position_from_right\n\n    # Count children from Henry to Tony\n    children_between_henry_and_tony = total_children - children_before_henry - children_after_tony\n\n    return children_between_henry_and_tony\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    metres = 2\n    millimetres = metres * 1000\n    return millimetres\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    # Let total number of pieces be x\n    # After the first day, pieces fitted = 20% of x = 0.20x\n    # After the second day, pieces fitted = 0.20x + 60\n    \n    # Let y be the number of fitted pieces after the second day\n    # y = 0.20x + 60\n    \n    # Given that ratio of fitted to unfitted pieces is 2:5,\n    # Unfitted pieces = 5/2 times fitted pieces\n    # Total pieces = fitted pieces + unfitted pieces\n    # x = y + (5/2) * y\n    # x = (7/2) * y\n    \n    # We substitute y = 0.20x + 60 into x = (7/2) * y\n    # x = (7/2) * (0.20x + 60)\n    # x = 0.7x + 210\n    # 0.3x = 210\n    # x = 210 / 0.3\n    # x = 700\n\n    return 700\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    repayment_percent = 30 / 100\n    repayment_amount = initial_loan * repayment_percent\n    amount_still_owed = initial_loan - repayment_amount\n    \n    return amount_still_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Let's denote the number of birds as 'b'\n    # Since each cat has 4 legs, 2 cats have 2*4 = 8 legs\n    # Each dog also has 4 legs, so 2 dogs have 2*4 = 8 legs\n    # A rabbit has 4 legs\n    # Birds have 2 legs each, so 'b' birds have 2*b legs\n    # The total number of legs is 28\n    \n    # Calculating the number of legs without the birds\n    legs_without_birds = 8 + 8 + 4  # cats' legs + dogs' legs + rabbit's legs\n    # The remaining legs must be from birds, which have 2 legs each\n    legs_from_birds = 28 - legs_without_birds\n    \n    # Calculate the number of birds\n    b = legs_from_birds / 2  # Each bird has 2 legs\n    \n    return int(b)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    meeting_time = 10  # Meeting time in hours\n\n    # Total distance covered by both Jack and Rose\n    total_distance = (jack_speed + rose_speed) * meeting_time\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from fractions import Fraction\n\n    melvin_original = 40\n    gain_from_nelson = Fraction(5, 8) * melvin_original\n    lost_to_oliver = Fraction(1, 4) * melvin_original\n    final_gain_from_nelson = Fraction(1, 8) * melvin_original\n\n    melvin_final = melvin_original + gain_from_nelson - lost_to_oliver + final_gain_from_nelson\n    nelson_final = melvin_final  # After the final round, they all have the same number of cards\n    oliver_final = melvin_final  # After the final round, they all have the same number of cards\n\n    # Calculate the initial amount of Nelson and Oliver\n    nelson_lost = gain_from_nelson + final_gain_from_nelson\n    nelson_initial = nelson_final + nelson_lost\n    oliver_gained = 2 * lost_to_oliver\n    oliver_initial = oliver_final - oliver_gained\n\n    total_initial = melvin_original + nelson_initial + oliver_initial\n\n    return total_initial\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum(filter(lambda x: 24 % x == 0 and x % 2 != 0, range(1, 25)))\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    polly_age, child1_age, child2_age, child3_age = symbols('polly_age child1_age child2_age child3_age')\n\n    # equation representing age differences between Polly and her children\n    equation1 = Eq(child1_age, polly_age - 20)\n    equation2 = Eq(child2_age, polly_age - 22)\n    equation3 = Eq(child3_age, polly_age - 24)\n    \n    # equation representing the sum of her children's ages equalling Polly's age\n    equation4 = Eq(child1_age + child2_age + child3_age, polly_age)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (polly_age, child1_age, child2_age, child3_age))\n\n    return solutions[polly_age]\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n        \n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of arithmetic series formula: n/2 * (first_term + last_term)\n    ans = num_terms / 2 * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of each of the given numbers\n    factorizations = {num: factorint(num) for num in [6, 12, 35, 175, 245, 300]}\n\n    # Check all combinations of products for Candy (2 cards) and Candice (3 cards)\n    for candy in factorizations:\n        for candice in factorizations:\n            if candy != candice: \n                candy_factors = factorizations[candy]\n                candice_factors = factorizations[candice].copy()\n\n                # Multiply the factors of the two cards chosen by Candy\n                for factor, power in candy_factors.items():\n                    candice_factors[factor] = candice_factors.get(factor, 0) + power\n\n                # Check if the remaining 4 numbers contain the same prime factors with the same powers\n                remaining_numbers = set(factorizations.keys()) - {candy, candice}\n                for number in remaining_numbers:\n                    for factor, power in factorizations[number].items():\n                        candice_factors[factor] = candice_factors.get(factor, 0) - power\n\n                        # If the power goes below 0, break since it's not possible for this combination\n                        if candice_factors[factor] < 0:\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    # No factor's power went below 0, so this is a possible choice\n                    # The remaining number is the one not picked\n                    remaining_number = remaining_numbers.pop()\n                    return remaining_number\n        \nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = 2 * 5\n    part2 = 1 * 5\n    part3 = (2 + 1) * 5\n\n    ans = part1 + part2 + part3\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20 * 5\n    weight_of_presents = 20\n\n    weight_of_suitcase_without_presents = total_weight_with_presents - weight_of_presents\n\n    return weight_of_suitcase_without_presents\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Let combined_current_age be the combined current age of the 2 dogs\n    # combined_current_age - 4 is the combined age 4 years ago\n    # combined_current_age + 2 is the combined age in 2 years\n\n    # From the question, we know that (combined_current_age - 4) = 10\n    combined_current_age_4_years_ago = 10\n\n    # To find the current combined age, add 4 years back to the combined age 4 years ago\n    combined_current_age = combined_current_age_4_years_ago + 4\n\n    # To find the combined age in 2 years, add 2 more years to the current combined age\n    combined_age_in_2_years = combined_current_age + 2\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let x be the smaller number and y be the larger number\n    # The difference between two numbers is 39, so y - x = 39 (1)\n    # The sum of the two numbers is 59, so x + y = 59 (2)\n    # To find the value of the smaller number, we can solve these equations\n\n    # From (2), y = 59 - x\n    # We substitute the value of y from this equation into (1)\n    # (59 - x) - x = 39\n    # 59 - 2x = 39\n    # 2x = 59 - 39\n    # 2x = 20\n    # x = 20 / 2\n    # x = 10\n    # Thus, the smaller number is 10\n    \n    x = 10\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5*4 + 6*8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    \n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n\n    equation = Eq(14 * 10 + m, 8 * (10 + m) - 3)\n\n    solution = solve(equation, m)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    return x - 12 + y\n\nans = solution"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    return 0.15 * 340\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = symbols('years')\n\n    equation = Eq(mother_age + years, 3 * (justin_age + years))\n    solution_years = solve(equation, years)\n\n    return int(solution_years[0])\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Factors of the given products\n    factors_of_30 = {2, 3, 5}  # Prime factors of 30\n    factors_of_35 = {5, 7}     # Prime factors of 35\n    factors_of_42 = {2, 3, 7}  # Prime factors of 42\n\n    # Find the common factor for all products which will be the middle number B\n    B = factors_of_30.intersection(factors_of_35, factors_of_42).pop()\n\n    # Calculate A and C using B and the given products\n    A = 30 // B\n    C = 35 // B\n\n    # Finally, calculate the sum A + B + C\n    return A + B + C\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    ans = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    # Cora gives Qingle 8 sweets, so Cora will have cora-8 and Qingle will have qingle+8\n    equation = Eq((qingle + 8) - (cora - 8), 4)\n\n    # Solve the equation\n    diff_cora_qingle = solve(equation, (cora - qingle))[0]\n\n    return diff_cora_qingle\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0, 0), we know that b = 0.\n    b = 0\n\n    # The line also passes through the point (4, 8), which means we can find m by using the slope formula:\n    # m = (y2 - y1) / (x2 - x1)\n    # Since (x1, y1) is the origin (0, 0), this simplifies the slope calculation to:\n    # m = 8 / 4\n    m = 8 / 4\n\n    # Now we can create the linear equation with the found values of m and b\n    linear_equation = f'y={m}x+{b}'\n\n    return linear_equation\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of seashells Jane and Eric have\n    j, e = symbols('j e')\n\n    # Equation 1: Jane has 5 seashells for every 7 seashells Eric has\n    eq1 = Eq(j, 5/7 * e)\n\n    # Equation 2: After Eric gives 6 seashells to Jane, the ratio of Jane's to Eric's seashells is 11:13\n    eq2 = Eq((j + 6)/(e - 6), 11/13)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (j, e))\n\n    # Calculate the total number of seashells they have together\n    total_seashells = solutions[j] + solutions[e]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    current_number = 0\n    largest_number = 0\n    warren_add = 20\n    naida_subtract = 1\n\n    while warren_add > 0:\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        current_number -= naida_subtract\n\n        warren_add -= 1\n        naida_subtract += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + 3 * other_faucet_rate\n    \n    time_to_fill = 1 / combined_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    factors_5 = 0\n    factors_2 = 0\n    numbers = [48, 925, 38, 435]\n\n    for number in numbers:\n        # Count the number of 5s in the prime factorization of each number\n        while number % 5 == 0:\n            factors_5 += 1\n            number //= 5\n        \n        # Count the number of 2s in the prime factorization of each number\n        while number % 2 == 0:\n            factors_2 += 1\n            number //= 2\n\n    # The number of 0s at the end of the product is the minimum of the number of 2s and 5s\n    ans = min(factors_2, factors_5)\n\n    return ans\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_numbers = [num for num in permutations(digits) if num[-1] % 2 == 0]\n    smallest_even_number = min(even_numbers)\n    ans = int(''.join(map(str, smallest_even_number)))\n    return ans\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n\n    piano_and_violin = piano_pupils // 4\n    neither = total_pupils - (piano_pupils + violin_pupils - piano_and_violin)\n\n    return neither\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_in_years = 11\n    \n    amount_in_bank = principal * (1 + interest_rate * time_in_years)\n    return amount_in_bank\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "import sympy as sp\n\ndef solution():\n    # The area of the isosceles right triangle\n    triangle_area = 0.5 * 2 * 2\n\n    # The area of the quarter circle \n    quarter_circle_area = sp.pi * 1**2 / 4\n\n    # The probability that the distance from a random point to the right angle vertex is less than 1\n    probability = quarter_circle_area / triangle_area\n\n    return probability\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    a_math = 10\n    a_english = 15\n    a_both = 2\n    \n    a_either = a_math + a_english - a_both\n\n    return a_either\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime\n\n    # Convert times to datetime objects to make it easier to calculate differences\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    time_caught_bus = datetime.strptime('16:01', '%H:%M')\n    time_dropped_off_bus = datetime.strptime('16:19', '%H:%M') # 16:01 + 18 minutes\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n\n    # Calculate the time spent walking\n    walking_time_to_bus_stop = (time_caught_bus - time_left_school).total_seconds()\n    walking_time_to_home = (time_got_home - time_dropped_off_bus).total_seconds()\n\n    # Sum both walking times and convert to minutes\n    total_walking_time = (walking_time_to_bus_stop + walking_time_to_home) / 60\n    \n    return int(total_walking_time)\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):  # First digit cannot be 0\n        for D in range(1, 10):  # Last digit cannot be 0\n            if A == D * 1/4:  # First digit is 1/4 of last digit\n                B = A - 1\n                if B > 0:  # Second digit must be positive\n                    C = 3 * A  # Since A = 1/4 * D, C must be 3/4 * D which is 3 * A\n                    if C < 10:  # C must be a single digit\n                        ABCD = 1000 * A + 100 * B + 10 * C + D\n                        DCBA = 1000 * D + 100 * C + 10 * B + A\n                        if 4 * ABCD == DCBA and len({A, B, C, D}) == 4:  # No digit repeats\n                            return ABCD\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    final_result = 25\n    subtracted_value = 10\n    divisor = 3\n    \n    original_number = (final_result - subtracted_value) * divisor\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    lhs = 2030452\n    rhs_add = 30000 + 452\n    missing_number = (lhs - rhs_add) // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 20 / 100 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    num_pieces = 2\n    length_per_piece_m = (total_length_cm / 2) / 100\n    return length_per_piece_m\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # Given numbers without 'a'\n    mean_value = 5  # Mean of all numbers is 5\n\n    # Total sum of the numbers is mean multiplied by the number of terms (n)\n    total_sum_with_a = mean_value * (len(numbers) + 1)  # n is len(numbers) + 1 because 'a' is also a term\n\n    # Sum of the given numbers\n    sum_of_given_numbers = sum(numbers)\n\n    # The value of 'a' is the difference between the total sum with 'a' and given numbers' sum\n    a = total_sum_with_a - sum_of_given_numbers\n\n    return a\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Pigeonhole Principle: With 3 colors, taking one sock from each color will ensure she gets 3 individual socks of different colors.\n    # But to ensure she gets at least one pair of the same color, she needs to take an additional sock.\n    # Maximum socks she could take without having a pair is 3 (one white, one grey, and one black).\n    # So she takes one more to guarantee a pair. Total socks needed = 3 + 1\n    \n    socks_needed = 3 + 1\n    return socks_needed\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7  # Pupils to her left, herself, and pupils to her right.\n    total_rows = 1 + 1 + 8  # Rows in front of her, her own row, and rows behind her.\n    \n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_first_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_first_two_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100  # Converting percentage to a decimal\n    time = 1  # in years\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    number = symbols('number')\n    equation = Eq(((number + 3) / 4) * 9, 81)\n    \n    solution = solve(equation, number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1/(i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1/(i * (31 - i)) for i in range(11, 16))\n\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    distance_covered = 6300 - 1800  # Distance covered in 30 minutes\n    distance_per_minute = distance_covered / 30  # Distance covered per minute\n    remaining_distance = 1800  # Distance left at 8:30 am\n    minutes_to_reach = remaining_distance / distance_per_minute  # Time left to cover the remaining distance\n\n    # 8:30 am is represented as 8 * 60 minutes + 30 minutes\n    total_minutes_since_8_am = (8 * 60) + 30 + minutes_to_reach\n    hours_reached = total_minutes_since_8_am // 60\n    minutes_reached = total_minutes_since_8_am % 60\n\n    ans = (hours_reached, minutes_reached)\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the unknown percentage of sugar in Mrs. Smith's 300 mL drink\n    x = symbols('x')\n    \n    # Mr. Smith's mixture\n    smith_sugar_ml = 300 * 0.50 + 600 * 0.20\n    \n    # Total mL of Mr. Smith's mixture\n    smith_total_ml = 300 + 600\n    \n    # Mrs. Smith's mixture with unknown x\n    mrs_smith_sugar_ml = 700 * 0.10 + 300 * (x / 100)\n    \n    # Total mL of Mrs. Smith's mixture\n    mrs_smith_total_ml = 700 + 300\n    \n    # Create an equation where both sugar percentages are equal\n    equation = Eq(smith_sugar_ml / smith_total_ml, mrs_smith_sugar_ml / mrs_smith_total_ml)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    x_value = solution[0]\n    \n    # Round the result to two decimal places\n    return round(x_value, 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 2, 17)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = (3/4) * total_candy\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = (1/3) * remaining_after_lily\n    remaining_candy = remaining_after_lily - given_to_brother\n    \n    return int(remaining_candy)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    # Let's denote May's age when she is 10 as M_10, which is 10 years.\n    M_10 = 10\n    \n    # Kenny's younger brother is K_b, and Kenny's age when May is 10 as K_10. \n    # Kenny is 2 years older than his younger brother, so when May is 10,\n    # Kenny's age will be (K_b + 2).\n    # The sum of the ages of Kenny's younger brother and Kenny is 3 times May's age when she is 10.\n    # Therefore, K_b + (K_b + 2) = 3 * M_10\n    \n    # Let's solve the equation for K_b\n    K_b = (3 * M_10 - 2) / 2\n    \n    # Now Kenny is K_b + 2 years older than their brother\n    K_10 = K_b + 2\n    \n    # Kenny's age difference with May when she is currently 7\n    # We need to subtract 3 years from Kenny's age when May is 10 to get the age difference now.\n    age_difference = K_10 - 3\n    \n    # May is currently 7 years old, so Kenny is age_difference - 7 years older than May.\n    kenny_may_age_diff = age_difference - 7\n    \n    return kenny_may_age_diff\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_money, money_spent_donuts, money_spent_muffins = symbols('total_money money_spent_donuts money_spent_muffins')\n    \n    # Define the equations based on the problem\n    # Amy spent half her money on donuts\n    equation1 = Eq(money_spent_donuts, total_money / 2)\n    # The remaining money on muffins\n    equation2 = Eq(money_spent_muffins, total_money / 2)\n    \n    # Calculate the number of donuts and muffins she could buy\n    donuts_bought = money_spent_donuts / (10 / 7)\n    muffins_bought = money_spent_muffins / (6 / 3)\n\n    # She bought 54 more donuts than muffins\n    equation3 = Eq(donuts_bought - muffins_bought, 54)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_money, money_spent_donuts, money_spent_muffins))\n    return solutions[total_money]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # cost for all sweets\n    total_cost = 10  # in pounds\n\n    # Weight of each bag and total bags\n    weight_per_bag = 250  # in grams\n    total_weight = 5000  # 5 kg converted to grams\n    total_bags = total_weight / weight_per_bag\n\n    # Selling price per bag\n    selling_price_per_bag = 0.65  # in pounds (65 pence converted to pounds)\n\n    # Total revenue from selling all bags\n    total_revenue = selling_price_per_bag * total_bags\n\n    # Profit calculation\n    profit = total_revenue - total_cost\n\n    # Percentage profit calculation\n    percentage_profit = (profit / total_cost) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    \n    # Assume each child gets one apple, leaving 14 - 5 = 9 apples to distribute\n    remaining_apples = total_apples - children\n    \n    # Distribute the remaining apples so that one child gets the maximum\n    max_apples_for_child = 1 + remaining_apples\n\n    return max_apples_for_child\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between the 4th and 9th teeth is 30mm\n    # There are 5 intervals between the 4th and 9th tooth\n    interval_length = 30 / 5\n    \n    # There are 99 intervals between 100 teeth\n    # So, we just multiply the interval length by the number of intervals\n    comb_length_mm = interval_length * 99\n    \n    # Convert the comb length from millimeters to centimeters\n    comb_length_cm = comb_length_mm / 10\n\n    return comb_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    age_difference = 80 - 40\n\n    # Calculate grandmother's age when mum was 25\n    grandmothers_age_when_mum_was_25 = 25 + age_difference\n\n    return grandmothers_age_when_mum_was_25\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total_sum = 46563 + 9785 + 859\n    return total_sum\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = 5!  # Total ways without restriction\n    adjacent_ways = 2! * 4!  # Ways in which the two specific people are adjacent\n\n    # Subtract ways with two people together from total ways to get ways where they are not adjacent\n    non_adjacent_ways = total_ways - adjacent_ways\n\n    return non_adjacent_ways\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since the problem specifies that we are distributing identical ice-cream cones \n    # and each friend must get at least one ice-cream cone, we can use the so-called\n    # \"stars and bars\" method (combinatorial). \n\n    # We need to partition the 5 ice-cream cones into 3 groups (for each friend).\n    # If we give one ice-cream cone to each friend first, we'll have 2 ice-cream cones left to distribute.\n    # Now, this is equivalent to placing two indistinguishable items (ice-cream cones) \n    # into three distinguishable bins (friends).\n    \n    # Using the formula for combinations with repetition, we get:\n    # (n + k - 1) choose (k - 1) where n is the number of items and k is the number of bins.\n    # That is, (2 + 3 - 1) choose (3 - 1) which simplifies to 4 choose 2.\n\n    from math import comb\n\n    remaining_cones = 5 - 3  # Subtract the one ice-cream cone already given to each.\n    friends = 3\n    # Calculate the combinations (bins = friends, items = remaining_cones) \n    ways = comb(remaining_cones + friends - 1, friends - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = total_vegetables * 2 // 3\n    tuesday_sales = (total_vegetables - monday_sales) * 2 // 5\n    total_sales = monday_sales + tuesday_sales\n    return monday_sales, tuesday_sales\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Maximum number of balls to be picked without getting 16 balls of one color\n    max_without_16_same = (16 - 1) * 5\n\n    # Maximum number of balls to be picked without getting 13 balls of another color\n    # We subtract 12 from the second largest quantity and not from 13,\n    # because we need to ensure that we pick PART of the second set before getting the 13\n    max_without_13_of_second = 12 + (26 - 12 - 1) * 4\n\n    # One more ball picked will ensure 16 of one color and 13 of another\n    ans = max(max_without_16_same, max_without_13_of_second) + 1\n\n    return ans\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum = 0\n    for i in range(5, 856, 15):\n        sum += i - (i - 5)\n    return sum\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p, q + 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_away = total_biscuits * (1/4)\n    remaining_biscuits = total_biscuits - given_away\n    return remaining_biscuits\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Define the equations\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the cost of one table and c be the cost of one chair\n    t, c = symbols('t c')\n\n    # Two tables and five chairs cost £220\n    equation1 = Eq(2 * t + 5 * c, 220)\n\n    # The cost of one table is the same as three chairs\n    equation2 = Eq(t, 3 * c)\n\n    # Solving the equations to find the cost of one table\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    total_spent = 1.55 + 2.25\n    remaining_fraction = 4/5\n    original_amount = total_spent / (1 - remaining_fraction)\n    return original_amount\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n    \n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    percent = 40\n    total = 75\n\n    ans = (percent / 100) * total\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    return (125 + 75) * (630 - 616)\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    \n    total_coins = joann_coins + sana_coins + nancy_coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    sum_of_terms = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    # Find the unit rate\n    pizzas_per_person = pizzas_initial / people_initial\n    \n    # Calculate the total amount of pizzas needed for 35 people\n    pizzas_needed = pizzas_per_person * people_final\n    \n    return int(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n\n    while teams > 1:\n        teams /= 2\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    # Let d be the distance walked by Lucas\n    # Since the ratio of their speeds is 3:5, the distance covered by them will also be in the ratio 3:5\n    # Let the total distance covered by them be 20 - 4 = 16 miles\n    # Let's use the formula: distance covered by Lucas / distance covered by his mother = 3/5\n    # d / (16 - d) = 3/5\n    # 5d = 3(16 - d)\n    # 5d = 48 - 3d\n    # 8d = 48\n    d = 48 / 8\n    \n    return d\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "import math\n\ndef solution():\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i * 72).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for earnings of Julie, Marion, and Ethan\n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Marion earns twice what Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    \n    # Ethan earns five times what Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    \n    # The difference between what Marion and Ethan earn is $168\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # Calculate the total earnings together\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands - cards, 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote B as the number of students in the big class.\n    # Let's denote S as the number of students in the small class.\n    B, S = symbols('B S')\n\n    # Each student in the big class got 2 apples.\n    # Each student in the small class also got 2 apples.\n    # Total apples = 48\n    equation1 = Eq(2 * B + 2 * S, 48)\n\n    # Each student in the big class got 3 oranges.\n    # Each student in the small class got 2 oranges.\n    # Total oranges = 55\n    equation2 = Eq(3 * B + 2 * S, 55)\n\n    # Solving the system of equations for B and S\n    solutions = solve((equation1, equation2), (B, S))\n\n    return solutions[S]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years until the ratio of their ages is 5:3\n    x = symbols('x')\n    \n    # Let d be Danny's current age and e be Efron's current age\n    d, e = symbols('d e')\n\n    # According to the problem, we have two equations:\n    # 1. Efron is 30 years younger than Danny: d - e = 30\n    # 2. The current ratio of Danny to Efron's age is 8:3: d / e = 8 / 3 \n    # We need to find x such that the new ratio is 5:3: (d + x) / (e + x) = 5 / 3\n    \n    # System of equations\n    eq1 = Eq(d - e, 30)\n    eq2 = Eq(d / e, 8/3)\n    eq3 = Eq((d + x) / (e + x), 5/3)\n\n    # Solve the system for d and e\n    current_ages = solve((eq1, eq2), (d, e))\n\n    # Substitute d and e in eq3 and solve for x\n    eq3_subs = eq3.subs({d: current_ages[d], e: current_ages[e]})\n    x_value = solve(eq3_subs, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n    cookies_wanted = 150\n\n    butter_needed = (butter_used / cookies_made) * cookies_wanted\n    \n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    # Choose 1 pencil and 1 ruler\n    pencil_ruler_combinations = pencil_colours * ruler_colours\n    # Choose 1 pencil and 1 pen\n    pencil_pen_combinations = pencil_colours * pen_colours\n    # Choose 1 ruler and 1 pen\n    ruler_pen_combinations = ruler_colours * pen_colours\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has a single round-robin tournament among 4 teams\n    # In a round-robin tournament, each team plays every other team once\n    # Total number of matches in one group is n*(n-1)/2, where n is number of teams in the group\n    teams_per_group = 4\n    matches_per_group = teams_per_group * (teams_per_group - 1) // 2\n    total_groups = 8\n    group_stage_matches = matches_per_group * total_groups\n\n    # Calculate the number of games in the knockout stage\n    # Round of 16, quarter-finals, semi-finals, third place match and final\n    round_of_16 = 16 // 2\n    quarter_finals = round_of_16 // 2\n    semi_finals = quarter_finals // 2\n    third_place_and_final = 2  # There are two more matches: third place match and final\n\n    # Total knockout stage matches\n    knockout_stage_matches = round_of_16 + quarter_finals + semi_finals + third_place_and_final\n\n    # Total games played throughout the World Cup\n    total_matches = group_stage_matches + knockout_stage_matches\n\n    return total_matches\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit < 10:  # Ensure it is a digit\n            for third_digit in range(10):  # 0 to 9\n                if 10 <= first_digit + second_digit + third_digit < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tennis_ball, tennis_racket = symbols('tennis_ball tennis_racket')\n    equation1 = Eq(tennis_racket, tennis_ball + 28)\n    equation2 = Eq(tennis_ball + tennis_racket, 30)\n\n    solutions = solve((equation1, equation2), (tennis_ball, tennis_racket))\n\n    return solutions[tennis_ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    result = -6 / 6\n    assert result == 6, \"The equation does not hold true.\"\n    return result\n\ntry:\n    ans = solution()\nexcept AssertionError as e:\n    ans = str(e)"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = solutions[banana] * 5\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    matches = 15\n    n = 1\n    while n * (n - 1) / 2 != matches:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    # Get prime factors and their multiplicities\n    factors = factorint(224)\n    # Calculate number of factors\n    num_factors = 1\n    for power in factors.values():\n        num_factors *= (power + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ans = pencils * rulers * pens\n\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    for correct in range(11):\n        wrong = 10 - correct\n        if correct * 6 - wrong * 2 == 44:\n            return correct\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, t_shirt = symbols('shorts t_shirt')\n\n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of triangles be x\n    # Then the number of quadrilaterals will be x + 82\n    # And there are 2 pentagons\n    \n    triangles, quadrilaterals, pentagons = symbols('triangles quadrilaterals pentagons')\n    equation = Eq(triangles * 3 + (triangles + 82) * 4 + 2 * 5, 394)\n\n    solutions = solve(equation, triangles)\n    # Select the positive solution since the number of shapes cannot be negative\n    num_triangles = max(solutions)\n\n    # Calculate the number of quadrilaterals\n    num_quadrilaterals = num_triangles + 82\n\n    return num_quadrilaterals\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # Tens place (1-9)\n        ones = tens - 3\n        if ones >= 0:  # Ensure ones place is a non-negative digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = second_term + common_difference\n    \n    return third_term\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # Since there are 4 posts, there are 3 gaps between them\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Symbols for Rachel's and Alice's sweets\n    rachel, alice = symbols('rachel alice')\n    \n    # Two equations based on the problem statement\n    eq1 = Eq(rachel - 10, alice + 10)\n    eq2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (rachel, alice))\n    rachel_sweets = solutions[rachel]\n    alice_sweets = solutions[alice]\n    \n    # Total number of sweets they had originally\n    total_sweets = rachel_sweets + alice_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Each team is made up of 3 students.\n    # total_teams is the total number of teams.\n    total_teams = 150 // 3\n    \n    # teams_with_1_boy is the number of teams with only 1 boy, which is given as 15.\n    teams_with_1_boy = 15\n    \n    # teams_with_2_or_more_boys is the number of teams with two or more boys, which is given as 27.\n    teams_with_2_or_more_boys = 27\n    \n    # teams_with_all_girls is the number of all-girl teams.\n    # teams_with_all_boys is the number of all-boy teams, which is twice the number of all-girl teams.\n    # Therefore, let's assume the number of all-girl teams is x. Then the number of all-boy teams will be 2x.\n    # We can set up the equation: teams_with_1_boy + teams_with_2_or_more_boys + x + 2x = total_teams\n    # Solving for x, we get:\n    x = (total_teams - (teams_with_1_boy + teams_with_2_or_more_boys)) // 3\n    \n    # Since each all-girl team consists of 3 girls, the total number of girls is:\n    total_girls = x * 3\n    \n    return total_girls\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_of_digits = sum([int(digit) for digit in str(product)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    base = 7\n    num1 = int('61', base)  # Convert to base 10\n    num2 = int('34', base)  # Convert to base 10\n    result = num1 - num2  # Perform subtraction in base 10\n\n    # Convert the result back to base 7\n    if result == 0:\n        return '0'\n    ans = ''\n    while result > 0:\n        ans = str(result % base) + ans\n        result //= base\n    return ans\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # There are 1+3=4 blue gloves and 2+4=6 green gloves.\n    # To ensure that Dilly gets a pair of matching gloves (not considering left or right hand),\n    # she must take all gloves of one color and one more glove.\n    \n    # The worst case is picking all blue gloves without getting a matching pair. \n    # After 4 blue gloves, the next glove, no matter the color, must give a matching pair.\n    \n    # Number of blue gloves + 1\n    num_gloves = 4 + 1\n    \n    return num_gloves\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_each = 12\n    total_candies = initial_students * candies_each\n    new_student_count = initial_students + 1\n    \n    new_candies_each = total_candies // new_student_count\n    \n    return new_candies_each\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # At 10 km/h he arrives at 10 am; at 15 km/h he arrives at 8 am.\n    # Let t be the time it takes to travel at 10 km/h and t - 2 be the time at 15 km/h\n    # Let d be the distance between Town A and Town B\n    # d = speed * time\n    # d = 10 * t = 15 * (t - 2)\n    \n    # Let's solve for t:\n    # We'll get a system of equations:\n    # d = 10 * t\n    # d = 15 * (t - 2)\n    \n    # Now we equalize both expressions for d:\n    # 10 * t = 15 * (t - 2)\n    # 10 * t = 15 * t - 30\n    # 5 * t = 30\n    t = 30 / 5\n    \n    # Speed to arrive at 9 am (1 hour less than the speed at 10 km/h):\n    # d = speed * (t - 1)\n    # speed = d / (t - 1)\n    # We know that d = 10 * t\n    d = 10 * t\n    t_at_9_am = t - 1\n    speed_at_9_am = d / t_at_9_am\n    \n    return speed_at_9_am\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # According to the problem statement,\n    # Weight of 1 dog = Weight of 8 rabbits\n    # Weight of 1 rabbit = Weight of 2 chickens\n    # We need to find how many chickens weigh as much as 1 dog.\n\n    # Let's set the weight of 1 chicken as 1 unit.\n    weight_of_chicken = 1\n    \n    # Since 1 rabbit weighs as much as 2 chickens,\n    weight_of_rabbit = 2 * weight_of_chicken\n    \n    # Since 1 dog weighs as much as 8 rabbits,\n    weight_of_dog = 8 * weight_of_rabbit\n    \n    # Now, we want to know how many units of chicken's weight is equal to the dog's weight.\n    # We have defined the weight of 1 chicken as 1 unit, so the number of chickens that\n    # weigh as much as 1 dog is the same as the dog's weight in chicken units.\n    num_chickens = weight_of_dog\n    \n    return num_chickens\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    cards_number, _ = solve_congruence(*congruences)\n    \n    return cards_number\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    \n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 4)\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    total_letters = len('REVISE')\n    e_count = 'REVISE'.count('E')\n\n    # Calculate arrangements using formula: n! / (n1! * n2! * ... * nk!)\n    arrangements = factorial(total_letters) // factorial(e_count)\n\n    return arrangements\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_students = 0\n    boys_extra = 52\n    side_length = 1  # Initialization for the side length of the square\n\n    while True:\n        if side_length % 2 == 0:  # If the number is even, it's a girl's layer\n            girls = side_length * side_length\n            boys = (side_length + 2) * (side_length + 2) - girls\n        else:\n            boys = side_length * side_length\n            girls = (side_length - 2) * (side_length - 2) if side_length > 1 else 0\n\n        if boys - girls == boys_extra:\n            total_students = boys + girls\n            break\n\n        side_length += 1\n\n    return total_students\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    tens = 8 * 10\n    hundreds = 2 * 100\n    number = ones + tens + hundreds\n    return number\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To find A such that the six-digit number is divisible by 9,\n    # Sum the digits and find the value of A that makes the sum divisible by 9\n    sum_of_digits = 1 + 2 + 3 + 4 + 5  # Sum of the first five digits\n    for A in range(10):  # A can be a digit from 0 to 9\n        if (sum_of_digits + A) % 9 == 0:\n            six_digit_number = int(f'12345{A}')\n            # Now, we only need the last two digits to find the remainder when divided by 4\n            last_two_digits = int(str(six_digit_number)[-2:])\n            remainder = last_two_digits % 4\n            return remainder\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = original_price * (discount_percentage / 100)\n    sale_price = original_price - discount_amount\n    \n    return sale_price\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    eugene, yuna = symbols('eugene yuna')\n    \n    # Original amount of pins Eugene had is 3 times Yuna's\n    original_condition = Eq(eugene, 3 * yuna)\n    \n    # After Yuna bought 76 pins, she had 7/9 of Eugene's pins\n    new_condition = Eq(yuna + 76, 7/9 * eugene)\n    \n    # Solve the system of equations\n    solutions = solve((original_condition, new_condition), (eugene, yuna))\n    \n    return solutions[eugene]\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To ensure that Kelly wins, she must leave Dan with a number of matches\n    # that is a multiple of 3 on each round. \n\n    # If Kelly starts by taking 1 match, then there will be 10 left.\n    # Dan could then take either 1 or 2 matches, leaving 9 or 8 matches left respectively.\n    # In either scenario, Kelly cannot force the game into a multiple of 3 on her next turn.\n\n    # If Kelly takes 2 matches, however, there will be 9 matches left for Dan,\n    # which is a multiple of 3, no matter if Dan takes 1 or 2 matches (leaving 8 or 7),\n    # Kelly can then take 2 or 1 matches respectively to leave Dan with a multiple of 3 again.\n    \n    # Therefore, to ensure victory, Kelly must take away 2 matches on her first turn.\n    return 2\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n\n    equation = Eq(red_flowers, pink_flowers + 6)\n\n    solutions = solve(equation, total_flowers)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    num_kids = 3\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    num1 = Fraction(5 * 7 + 1, 7)\n    num2 = Fraction(3 * 11 + 3, 11)\n    num3 = Fraction(1 * 23 + 13, 23)\n    \n    den1 = Fraction(3 * 7 + 3, 7)\n    den2 = Fraction(2 * 11 + 2, 11)\n    den3 = Fraction(1 * 23 + 1, 23)\n    \n    # Calculate the numerator and denominator sums\n    numerator_sum = num1 + num2 + num3\n    denominator_sum = den1 + den2 + den3\n    \n    # Divide the sums to get the final answer\n    ans = numerator_sum / denominator_sum\n    \n    return ans\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solutions = solve(equation, square)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Let's denote the number of cars as x, and motorcycles as y.\n    # From the problem we have two equations:\n    # x + y = total_vehicles (27)\n    # 4x + 2y = total_wheels (78)\n\n    # We can solve this using substitution:\n    # From the first equation, y = total_vehicles - x\n    # Now we substitute y in the second equation:\n    # 4x + 2(total_vehicles - x) = total_wheels\n    # 4x + 54 - 2x = 78\n    # 2x = 78 - 54\n    # 2x = 24\n    # x = 12\n\n    cars = total_wheels // 2 - total_vehicles\n    return cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n represent the number of stickers Nicole had in the beginning\n    jason, nicole, n = symbols('jason nicole n')\n    jason_beginning = 20\n    \n    # Setting up the equations based on the problem statement\n    # Nicole had n stickers and after giving Jason 18 stickers, she had n-18 left\n    equation1 = Eq(nicole, n - 18)\n    # After receiving 18 stickers from Nicole, Jason had 20+18 stickers\n    equation2 = Eq(jason, jason_beginning + 18)\n    # Jason had 5 fewer stickers than Nicole after the exchange\n    equation3 = Eq(jason, nicole - 5)\n\n    # Solving the system of equations \n    solutions = solve((equation1, equation2, equation3), (jason, nicole, n))\n\n    # Returning Nicole's initial number of stickers\n    return solutions[n]\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 39):  # 77 // 2 + 1, because we need to account for 0 weights of 2 grams\n        for three_gram_weights in range(0, 26):  # 77 // 3 + 1, similarly for 3 grams\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original dimensions of cuboid are 100% each (length, breadth, height)\n    # New dimensions:\n    # Length is increased by 10%, so it's now 110% of the original length\n    new_length_percentage = 110  \n    # Breadth is reduced to (4/5) or 80% of the original breadth\n    new_breadth_percentage = 80\n    # The ratio of the new height to the original height is 11:10, which is equivalent to 110% of the original height\n    new_height_percentage = 110\n\n    # Calculating the new volume as a percentage of the original volume\n    new_volume_percentage = (new_length_percentage * new_breadth_percentage * new_height_percentage) / (100 * 100 * 100) * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_marshals = 9\n    intervals = total_marshals - 1  # the number of intervals is one less than the number of marshals\n    distance_between_marshals_km = total_distance_km / intervals\n    distance_between_marshals_m = distance_between_marshals_km * 1000  # convert km to m\n\n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_1 = 180\n    time_1 = 6\n    speed_2 = 120\n    time_2 = 8\n\n    distance_1 = speed_1 * time_1\n    distance_2 = speed_2 * time_2\n\n    total_distance = distance_1 + distance_2\n\n    return total_distance\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # minutes to paint one picture\n    total_time = 80  # one hour and twenty minutes in total\n\n    num_pictures = total_time / time_per_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    dominant_color = 'green' if (total_tiles % 2) == 1 else 'red'\n    dominant_count = 0\n    other_count = 0\n    \n    while total_tiles > 0:\n        side_length = int(total_tiles ** 0.5)\n        if layer % 2 == 0:\n            dominant_count += side_length * 4 - 4 if side_length > 1 else 1\n        else:\n            other_count += side_length * 4 - 4 if side_length > 1 else 1\n        total_tiles -= side_length * side_length\n        layer += 1\n    \n    return dominant_color, abs(dominant_count - other_count)\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_value = 1 + (4/7)\n    return round(decimal_value, 1)\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n    \n    # Interest after the first year\n    first_year_interest = principal * interest_rate\n    # Total after first year\n    total_after_first_year = principal + first_year_interest\n    \n    # Interest after the second year\n    second_year_interest = total_after_first_year * interest_rate\n    \n    # Total interest after two years\n    total_interest = first_year_interest + second_year_interest\n    \n    return total_interest\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    sequence_length = len(recurring_sequence)\n    \n    # The 69th digit's position in the recurring sequence\n    position = (69 - 1) % sequence_length\n    \n    # The digit at that position in the sequence\n    digit = recurring_sequence[position]\n    return int(digit)\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    sweets_left = y / 2\n    return sweets_left\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    \n    return concentration\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost price of the entire batch of goods as 'p'.\n    p = symbols('p')\n    # He planned to earn a 50% profit, so the planned sell price for all goods is 'p + 0.5 * p'.\n    planned_profit = 0.5 * p\n    \n    # On the first day, he sold 70% at a 50% profit.\n    day1_revenue = 0.7 * p * 1.5\n    # So the remaining 30% of the goods is '0.3 * p'.\n    \n    # On the second day, let's denote the discount rate as 'd'.\n    d = symbols('d')\n    # The revenue for the second day is the remaining goods sold at '1 - d' times their cost price.\n    day2_revenue = 0.3 * p * (1 - d)\n\n    # The total profit is the sum of both days' revenue minus the original price 'p'\n    # And we know it's 82% of the planned profit.\n    equation = Eq(day1_revenue + day2_revenue - p, 0.82 * planned_profit)\n\n    # Now we solve for the discount rate 'd'.\n    discount_rate_solution = solve(equation, d)\n\n    return float(discount_rate_solution[0])\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let m be the number of widgets sold by Megacorp in 2014\n    # Then, Vastco sold m * 1.68 in 2014\n    \n    # In 2015, Vastco's sales increased 32%, so they sold m * 1.68 * 1.32\n    # At the same time, Vastco sold 44% more than Megacorp, which can be written as m * 1.44\n    \n    # We set up the equation: m * 1.68 * 1.32 = m * (1 + x) * 1.44\n    # Where x is the percentage increase of Megacorp's sales we are looking for, represented as a decimal\n    # Therefore, we can cancel out m from both sides and solve for x:\n    # 1.68 * 1.32 = (1 + x) * 1.44\n    \n    vastco_2014_to_2015_increase = 1.68 * 1.32\n    vastco_2015_to_megacorp_2015 = 1.44\n    \n    # To find the percentage increase for Megacorp, we rearrange the equation to solve for x\n    # x = (vastco_2014_to_2015_increase / vastco_2015_to_megacorp_2015) - 1\n    \n    x = (vastco_2014_to_2015_increase / vastco_2015_to_megacorp_2015) - 1\n    \n    # Convert the decimal to percentage\n    megacorp_increase_percentage = x * 100\n\n    return megacorp_increase_percentage\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's define the symbols for each child's age\n    eldest_son, youngest_son, eldest_daughter, youngest_daughter = symbols('eldest_son youngest_son eldest_daughter youngest_daughter', integer=True)\n    \n    # Equations based on the problem statement\n    equation1 = Eq(eldest_son + youngest_son + eldest_daughter + youngest_daughter, 55)\n    equation2 = Eq(eldest_son - youngest_son, 3)\n    equation3 = Eq(eldest_daughter - youngest_daughter, 2)\n    equation4 = Eq(youngest_son, 2 * eldest_daughter)\n    \n    # Since we're interested in the age of the youngest child, we'll find the minimum among the solutions\n    solutions = solve((equation1, equation2, equation3, equation4), (eldest_son, youngest_son, eldest_daughter, youngest_daughter))\n    \n    youngest_child_age = min(solutions.values())\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    bought_bottles = 48\n    total_bottles = bought_bottles\n    empty_bottles = bought_bottles\n\n    while empty_bottles >= 4:\n        new_bottles, remaining_empty = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + remaining_empty\n\n        if empty_bottles == 3:\n            total_bottles += 1\n            break\n\n    return total_bottles\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    work_done_by_3_workers = workers * days_for_3_workers\n    \n    days_for_1_worker = work_done_by_3_workers // 1  # since we want to find out for 1 worker\n    return days_for_1_worker\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # The number of single-digit numbers (1-9)\n    ones = 9 * 1  # There are 9 one-digit numbers, and each has 1 digit.\n\n    # The number of double-digit numbers (10-99)\n    tens = (99 - 10 + 1) * 2  # There are 90 two-digit numbers, each has 2 digits.\n\n    # The number of triple-digit numbers (100-113)\n    hundreds = (113 - 100 + 1) * 3  # There are 14 three-digit numbers, each has 3 digits.\n\n    total_digits = ones + tens + hundreds  # Total number of digits Johnny wrote.\n\n    return total_digits\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    # Let's denote the original number of pearls as x\n    # According to the problem statement we have:\n    # x = (1/2)x + (1/4)x + (1/6)x + 3 pearls left on the strand\n    \n    # Combine the fractions:\n    # x = (3/6)x + (2/6)x + (1/6)x + 3\n    # x = (6/6)x + 3\n    # x = x + 3\n\n    # Since x = x we need to isolate the 3\n    # Hence there are no pearls originally on the strand because x - x = 0\n    # But we know there are 3 pearls remained on the strand\n    # This means there's a mistake in this line of reasoning\n\n    # To solve the equation, we can re-write it properly as follows:\n    # x - (1/2)x - (1/4)x - (1/6)x = 3\n    # Combine the fractions on the left side:\n    # (6/6)x - (3/6)x - (2/6)x - (1/6)x = 3\n    # (6/6 - 3/6 - 2/6 - 1/6)x = 3\n    # (0/6)x = 3\n\n    # This means the original equation was misleading, and we misunderstood.\n    # Let's do it correctly:\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((1/2)*x + (1/4)*x + (1/6)*x + 3, x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "def solution():\n    from itertools import permutations\n    \n    # There are 3 entrances and we have to place 4 people such that each entrance has at least one person.\n    # We can place the first three people at three entrances in 3! ways.\n    # The fourth person can go to any of the three entrances.\n    # Thus, the total number of ways is 3! (for the first three people) * 3 (choices for the fourth person)\n    \n    ways_for_three_people = 6 # 3! is 6\n    choices_for_fourth_person = 3\n    total_ways = ways_for_three_people * choices_for_fourth_person\n    \n    return total_ways\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    black, white, grey = symbols('black white grey')\n    total_rabbits = 84\n    \n    equation1 = Eq(black, white + 14)  # black is white plus 14\n    equation2 = Eq(grey, white - 2)  # grey is white minus 2\n    equation3 = Eq(black + white + grey, total_rabbits)  # sum of rabbits\n    \n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n    \n    return solutions[white]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    answer = (40 - 4) / 2\n    return answer\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    total_earnings = 92\n\n    # Let the number of glasses broken be x\n    # Earnings = (Total glasses - glasses broken) - (glasses broken) = Total earnings\n    # (Total glasses - x) - x = Total earnings\n    # 2x = Total glasses - Total earnings\n    # x = (Total glasses - Total earnings) / 2\n    broken_glasses = (total_glasses - total_earnings) // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # number of teams\n    n = symbols('n', integer=True)\n\n    # rounds played in a round-robin tournament with n teams: n*(n-1)/2\n    equation = Eq(n*(n-1)/2, 45)\n\n    # solve the equation for n\n    teams = solve(equation, n)\n\n    # since we cannot have a negative number of teams, we choose the positive solution\n    return [t for t in teams if t.is_positive][0]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 15 * cost_per_banana\n    change = (12 * 100) - total_cost  # converting £12 to pence before subtracting\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for x1 in range(1, 57, 2):\n        x2 = x1 + 2\n        x3 = x1 + 4\n        if x1 + x2 + x3 == 57:\n            return x1\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Define the numbers provided and the result of the division\n    numbers = [2, 6, 1, 10, 5, 3]\n    division_result = 2\n    \n    # Multiplied by 3 to get the initial value before division\n    initial_value = division_result * 3\n    \n    # Check if the initial value is in the set of numbers\n    if initial_value in numbers:\n        return initial_value\n    else:\n        return None\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # Dividing by the number of permutations of three numbers.\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let x be the number of people and y be the original number of boats\n    # According to the problem, we have two equations:\n    # Equation 1: (y - 1) * 9 = x (when the number of boats is reduced by 1)\n    # Equation 2: (y + 1) * 6 = x (when the number of boats is increased by 1)\n    # If we equalize the right hand side of both equations we get:\n    # (y - 1) * 9 = (y + 1) * 6\n    # Solving for y (the number of original boats) results in:\n    \n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    equation = Eq((y - 1) * 9, (y + 1) * 6)\n    solution_y = solve(equation, y)\n    y_value = solution_y[0]\n    \n    # Now we substitute the found y value in either Equation 1 or 2 to find the number of people x:\n    x = (y_value - 1) * 9\n    return x\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    import math\n    pencils = 32\n    pens = 40\n    ans = math.gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for John's and Peter's initial cookies\n    john, peter = symbols('john peter')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(john, peter + 180)  # John had 180 more cookies than Peter\n    equation2 = Eq(john * 4/5, peter * 3/10 * 2)  # After selling, John had 1/2 as many cookies as Peter left\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, peter))\n    \n    # John's initial cookies is what we want to find\n    return solutions[john]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    initial_tests = 4\n    initial_average = 60\n    next_test_score = 70\n\n    total_initial_score = initial_tests * initial_average\n    new_total_score = total_initial_score + next_test_score\n    new_average = new_total_score / (initial_tests + 1)\n\n    return new_average\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    for perm in permutations(digits):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        current_sum = num1 + num2\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    # Total amount of apples eaten by horses, pigs and rabbits\n    total_horses_apples = 6 * 20\n    total_pigs_apples = 12 * 15\n    total_rabbits_apples = 12 * 5\n\n    # Total apples eaten by all animals\n    total_apples = total_horses_apples + total_pigs_apples + total_rabbits_apples\n    \n    # Total number of animals\n    total_animals = 6 + 12 + 12\n\n    # Average amount of apples eaten by each animal\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if int(str_num[2]) == int(str_num[0]) + int(str_num[1]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    num_cups = 6\n\n    # Define the discount values\n    disc_plan_A = 10 / 100  # 10% discount\n    disc_plan_B = 0.5       # Fixed $0.5 discount per cup\n\n    # Calculate the total price with discount plan A\n    price_plan_A = (full_price_per_cup * num_cups) * (1 - disc_plan_A)\n    \n    # Calculate the total price with discount plan B\n    price_plan_B = (full_price_per_cup * num_cups) - (disc_plan_B * num_cups)\n\n    # Determine which plan is cheaper\n    if price_plan_A < price_plan_B:\n        ans = price_plan_A\n    else:\n        ans = price_plan_B\n\n    return ans\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, class_B_students = symbols('peaches class_B_students')\n    class_A_students = class_B_students + 3\n\n    # Equation for class A\n    equation1 = Eq(class_A_students * 5 + 10, peaches)\n    # Equation for class B\n    equation2 = Eq(class_B_students * 8 + 2, peaches)\n\n    solutions = solve((equation1, equation2), (peaches, class_B_students))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    water_in_orange_drink = total_orange_drink * fraction_water\n    return water_in_orange_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    # Create a variable to hold the sum\n    total_sum = 0\n\n    # Loop through the sequence and add each term to the sum\n    for i in range(1, 2018):\n        # Add the term to the sum\n        total_sum += int('2'*i)\n    \n    # Get the last five digits\n    last_five_digits = str(total_sum)[-5:]\n\n    # Calculate the sum of the last five digits\n    ans = sum(int(digit) for digit in last_five_digits)\n\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    # We only need to care about the units digit of both numbers\n    units_digit_547 = 7\n    units_digit_479 = 9\n\n    # Multiplying the units digits directly\n    units_product = units_digit_547 * units_digit_479\n\n    # The units digit of the product\n    n = units_product % 10\n\n    return n\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let the amount of money left by Jayden be x\n    # The amount of money left by Benson would be 3x\n    # Benson spent $74, so initial amount is 3x + 74\n    # Jayden spent $120, so initial amount is x + 120\n    # Their combined total money initially is $590\n    # So we can set up the following equation: (3x + 74) + (x + 120) = 590\n\n    # Solving for x\n    x = (590 - 74 - 120) / 4\n\n    # The amount of money Jayden had left is x\n    return x\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    ans = 32068 - 1774\n    return ans\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for number in range(1, 381):\n        if (number ** 2 + number) == 380:\n            return number\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n    \n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time in minutes Betty leaves earlier than Kevin does\n    t = symbols('t')\n    \n    # Based on the question, we know that:\n    # After 6 minutes, Betty is at the grocery store and Kevin has walked 150 meters\n    # After t + 6 minutes, Betty is 900 meters away from the cinema\n    # After 3 more minutes, Kevin is at the grocery store (so t + 6 minutes in total)\n    \n    # Let's assume the speed of Betty is b meters per minute\n    # and the speed of Kevin is k meters per minute\n    # We then have the following equations:\n    equation1 = Eq(b * (6 + t), k * (6 + t) + 150) # after t + 6 minutes, Betty is at the same place Kevin was 3 minutes ago (150m behind)\n    equation2 = Eq(b * (6 + t + 3), 900) # Betty is 900 meters away from cinema after t + 6 + 3 minutes\n    \n    # We need to solve these equations for t, b, and k\n    solutions = solve((equation1, equation2), (t, b, k))\n    \n    # We are interested in the time Betty leaves earlier than Kevin, which is 't'\n    return solutions[t]\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n\n    total_volume = 300\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    cm_per_meter = 100\n    total_cm = meters * cm_per_meter\n    return total_cm\n\nans = solution()"
    ]
}